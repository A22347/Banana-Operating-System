
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0b fc 00 00       	call   c000fc2b <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 8e 02 00       	call   c0028e88 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 1e 9b 02 c0       	mov    ebx,0xc0029b1e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 2c 9b 02 c0    	cmp    ebx,0xc0029b2c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 e3 02 c0       	mov    eax,0xc002e3f8
c0000049:	3d f8 e3 02 c0       	cmp    eax,0xc002e3f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 e3 02 c0       	push   0xc002e3f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 e3 02 c0       	mov    eax,0xc002e3f8
c0000075:	2d f8 e3 02 c0       	sub    eax,0xc002e3f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 e3 02 c0       	push   0xc002e3f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea28,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 34 9b 02 c0       	mov    ebx,0xc0029b34
c00000bb:	81 eb 30 9b 02 c0    	sub    ebx,0xc0029b30
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 30 9b 02 c0       	mov    esi,0xc0029b30
c00000ca:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 e3 02 c0       	push   0xc002e3f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea28,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 ea 02 c0       	push   0xc002ea30
c000012c:	68 f8 e3 02 c0       	push   0xc002e3f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 a9 d9 01 00       	call   c001dd4c <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 64 28 01 00       	call   c0012c1f <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 87 d9 01 00       	call   c001dd4c <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 2f de 01 00       	call   c001e213 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 8d e4 01 00       	call   c001e87a <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 ee 02 c0 	lgdtd  ds:0xc002ee70
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 49 45 01 00       	call   c0014b2b <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <hexStrToInt>:
c0000646:	56                   	push   esi
c0000647:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064b:	31 d2                	xor    edx,edx

c000064d <hexStrToInt.looping>:
c000064d:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064e:	84 c0                	test   al,al
c0000650:	74 0d                	je     c000065f <hexStrToInt.end>
c0000652:	d4 40                	aam    0x40
c0000654:	d5 39                	aad    0x39
c0000656:	2c 30                	sub    al,0x30
c0000658:	c1 e2 04             	shl    edx,0x4
c000065b:	08 c2                	or     dl,al
c000065d:	eb ee                	jmp    c000064d <hexStrToInt.looping>

c000065f <hexStrToInt.end>:
c000065f:	89 d0                	mov    eax,edx
c0000661:	5e                   	pop    esi
c0000662:	c3                   	ret    

c0000663 <memcpy>:
c0000663:	e9 dc de 00 00       	jmp    c000e544 <__not_memcpy>

c0000668 <memcmp>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000676:	85 f6                	test   esi,esi
c0000678:	74 1d                	je     c0000697 <memcmp+0x2f>
c000067a:	8a 08                	mov    cl,BYTE PTR [eax]
c000067c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067f:	38 cb                	cmp    bl,cl
c0000681:	75 19                	jne    c000069c <memcmp+0x34>
c0000683:	01 c6                	add    esi,eax
c0000685:	eb 0a                	jmp    c0000691 <memcmp+0x29>
c0000687:	90                   	nop
c0000688:	8a 08                	mov    cl,BYTE PTR [eax]
c000068a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000068d:	38 d9                	cmp    cl,bl
c000068f:	75 0b                	jne    c000069c <memcmp+0x34>
c0000691:	40                   	inc    eax
c0000692:	42                   	inc    edx
c0000693:	39 f0                	cmp    eax,esi
c0000695:	75 f1                	jne    c0000688 <memcmp+0x20>
c0000697:	31 c0                	xor    eax,eax
c0000699:	5b                   	pop    ebx
c000069a:	5e                   	pop    esi
c000069b:	c3                   	ret    
c000069c:	0f b6 c1             	movzx  eax,cl
c000069f:	29 d8                	sub    eax,ebx
c00006a1:	5b                   	pop    ebx
c00006a2:	5e                   	pop    esi
c00006a3:	c3                   	ret    

c00006a4 <memmove>:
c00006a4:	55                   	push   ebp
c00006a5:	57                   	push   edi
c00006a6:	56                   	push   esi
c00006a7:	53                   	push   ebx
c00006a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b4:	39 dd                	cmp    ebp,ebx
c00006b6:	0f 83 80 00 00 00    	jae    c000073c <memmove+0x98>
c00006bc:	85 d2                	test   edx,edx
c00006be:	74 74                	je     c0000734 <memmove+0x90>
c00006c0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006c3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c6:	39 cd                	cmp    ebp,ecx
c00006c8:	0f 93 c1             	setae  cl
c00006cb:	39 f3                	cmp    ebx,esi
c00006cd:	0f 93 c0             	setae  al
c00006d0:	89 c6                	mov    esi,eax
c00006d2:	09 ce                	or     esi,ecx
c00006d4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d7:	89 f0                	mov    eax,esi
c00006d9:	83 f9 0c             	cmp    ecx,0xc
c00006dc:	0f 97 c1             	seta   cl
c00006df:	84 c8                	test   al,cl
c00006e1:	74 75                	je     c0000758 <memmove+0xb4>
c00006e3:	89 e9                	mov    ecx,ebp
c00006e5:	09 d9                	or     ecx,ebx
c00006e7:	83 e1 03             	and    ecx,0x3
c00006ea:	75 6c                	jne    c0000758 <memmove+0xb4>
c00006ec:	89 d7                	mov    edi,edx
c00006ee:	89 d9                	mov    ecx,ebx
c00006f0:	83 e7 fc             	and    edi,0xfffffffc
c00006f3:	89 ee                	mov    esi,ebp
c00006f5:	01 df                	add    edi,ebx
c00006f7:	90                   	nop
c00006f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006fa:	83 c6 04             	add    esi,0x4
c00006fd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000700:	83 c1 04             	add    ecx,0x4
c0000703:	39 f9                	cmp    ecx,edi
c0000705:	75 f1                	jne    c00006f8 <memmove+0x54>
c0000707:	89 d1                	mov    ecx,edx
c0000709:	89 d7                	mov    edi,edx
c000070b:	83 e1 fc             	and    ecx,0xfffffffc
c000070e:	29 cf                	sub    edi,ecx
c0000710:	01 cb                	add    ebx,ecx
c0000712:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000716:	39 ca                	cmp    edx,ecx
c0000718:	74 1a                	je     c0000734 <memmove+0x90>
c000071a:	8a 03                	mov    al,BYTE PTR [ebx]
c000071c:	83 ff 01             	cmp    edi,0x1
c000071f:	88 06                	mov    BYTE PTR [esi],al
c0000721:	74 11                	je     c0000734 <memmove+0x90>
c0000723:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000726:	83 ff 02             	cmp    edi,0x2
c0000729:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000072c:	74 06                	je     c0000734 <memmove+0x90>
c000072e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000731:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000734:	5b                   	pop    ebx
c0000735:	89 e8                	mov    eax,ebp
c0000737:	5e                   	pop    esi
c0000738:	5f                   	pop    edi
c0000739:	5d                   	pop    ebp
c000073a:	c3                   	ret    
c000073b:	90                   	nop
c000073c:	76 f6                	jbe    c0000734 <memmove+0x90>
c000073e:	85 d2                	test   edx,edx
c0000740:	74 f2                	je     c0000734 <memmove+0x90>
c0000742:	4b                   	dec    ebx
c0000743:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000746:	66 90                	xchg   ax,ax
c0000748:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000074b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074e:	4a                   	dec    edx
c000074f:	75 f7                	jne    c0000748 <memmove+0xa4>
c0000751:	5b                   	pop    ebx
c0000752:	89 e8                	mov    eax,ebp
c0000754:	5e                   	pop    esi
c0000755:	5f                   	pop    edi
c0000756:	5d                   	pop    ebp
c0000757:	c3                   	ret    
c0000758:	01 ea                	add    edx,ebp
c000075a:	89 e9                	mov    ecx,ebp
c000075c:	8a 03                	mov    al,BYTE PTR [ebx]
c000075e:	41                   	inc    ecx
c000075f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000762:	43                   	inc    ebx
c0000763:	39 d1                	cmp    ecx,edx
c0000765:	75 f5                	jne    c000075c <memmove+0xb8>
c0000767:	eb cb                	jmp    c0000734 <memmove+0x90>
c0000769:	8d 76 00             	lea    esi,[esi+0x0]

c000076c <memset>:
c000076c:	57                   	push   edi
c000076d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000771:	85 c9                	test   ecx,ecx
c0000773:	74 0b                	je     c0000780 <memset+0x14>
c0000775:	fc                   	cld    
c0000776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000077e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax

c0000788 <strlen>:
c0000788:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000078c:	31 c0                	xor    eax,eax
c000078e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000791:	74 09                	je     c000079c <strlen+0x14>
c0000793:	90                   	nop
c0000794:	40                   	inc    eax
c0000795:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000799:	75 f9                	jne    c0000794 <strlen+0xc>
c000079b:	c3                   	ret    
c000079c:	c3                   	ret    
c000079d:	8d 76 00             	lea    esi,[esi+0x0]

c00007a0 <strpbrk>:
c00007a0:	57                   	push   edi
c00007a1:	56                   	push   esi
c00007a2:	53                   	push   ebx
c00007a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ab:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ad:	84 db                	test   bl,bl
c00007af:	74 21                	je     c00007d2 <strpbrk+0x32>
c00007b1:	8a 07                	mov    al,BYTE PTR [edi]
c00007b3:	84 c0                	test   al,al
c00007b5:	74 14                	je     c00007cb <strpbrk+0x2b>
c00007b7:	38 d8                	cmp    al,bl
c00007b9:	74 19                	je     c00007d4 <strpbrk+0x34>
c00007bb:	89 fa                	mov    edx,edi
c00007bd:	eb 05                	jmp    c00007c4 <strpbrk+0x24>
c00007bf:	90                   	nop
c00007c0:	38 d9                	cmp    cl,bl
c00007c2:	74 10                	je     c00007d4 <strpbrk+0x34>
c00007c4:	42                   	inc    edx
c00007c5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007c7:	84 c9                	test   cl,cl
c00007c9:	75 f5                	jne    c00007c0 <strpbrk+0x20>
c00007cb:	46                   	inc    esi
c00007cc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ce:	84 db                	test   bl,bl
c00007d0:	75 e1                	jne    c00007b3 <strpbrk+0x13>
c00007d2:	31 f6                	xor    esi,esi
c00007d4:	89 f0                	mov    eax,esi
c00007d6:	5b                   	pop    ebx
c00007d7:	5e                   	pop    esi
c00007d8:	5f                   	pop    edi
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strtok>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007e6:	85 db                	test   ebx,ebx
c00007e8:	75 07                	jne    c00007f1 <strtok+0x15>
c00007ea:	eb 2c                	jmp    c0000818 <strtok+0x3c>
c00007ec:	43                   	inc    ebx
c00007ed:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007f1:	56                   	push   esi
c00007f2:	53                   	push   ebx
c00007f3:	e8 a8 ff ff ff       	call   c00007a0 <strpbrk>
c00007f8:	5a                   	pop    edx
c00007f9:	a3 48 ea 02 c0       	mov    ds:0xc002ea48,eax
c00007fe:	59                   	pop    ecx
c00007ff:	39 d8                	cmp    eax,ebx
c0000801:	74 e9                	je     c00007ec <strtok+0x10>
c0000803:	85 c0                	test   eax,eax
c0000805:	74 1b                	je     c0000822 <strtok+0x46>
c0000807:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000080a:	8d 50 01             	lea    edx,[eax+0x1]
c000080d:	89 d8                	mov    eax,ebx
c000080f:	89 15 48 ea 02 c0    	mov    DWORD PTR ds:0xc002ea48,edx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	c3                   	ret    
c0000818:	8b 1d 48 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea48
c000081e:	85 db                	test   ebx,ebx
c0000820:	75 cf                	jne    c00007f1 <strtok+0x15>
c0000822:	31 c0                	xor    eax,eax
c0000824:	5b                   	pop    ebx
c0000825:	5e                   	pop    esi
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strcpy>:
c0000828:	53                   	push   ebx
c0000829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000831:	89 c3                	mov    ebx,eax
c0000833:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000835:	84 d2                	test   dl,dl
c0000837:	74 0d                	je     c0000846 <strcpy+0x1e>
c0000839:	8d 76 00             	lea    esi,[esi+0x0]
c000083c:	88 13                	mov    BYTE PTR [ebx],dl
c000083e:	41                   	inc    ecx
c000083f:	43                   	inc    ebx
c0000840:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000842:	84 d2                	test   dl,dl
c0000844:	75 f6                	jne    c000083c <strcpy+0x14>
c0000846:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000849:	5b                   	pop    ebx
c000084a:	c3                   	ret    
c000084b:	90                   	nop

c000084c <strncpy>:
c000084c:	55                   	push   ebp
c000084d:	57                   	push   edi
c000084e:	56                   	push   esi
c000084f:	53                   	push   ebx
c0000850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000854:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000858:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000085c:	85 c0                	test   eax,eax
c000085e:	74 39                	je     c0000899 <strncpy+0x4d>
c0000860:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000862:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000865:	8d 55 01             	lea    edx,[ebp+0x1]
c0000868:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000086b:	84 db                	test   bl,bl
c000086d:	74 31                	je     c00008a0 <strncpy+0x54>
c000086f:	85 c9                	test   ecx,ecx
c0000871:	74 26                	je     c0000899 <strncpy+0x4d>
c0000873:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000876:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000879:	8d 55 02             	lea    edx,[ebp+0x2]
c000087c:	8d 46 02             	lea    eax,[esi+0x2]
c000087f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000882:	84 db                	test   bl,bl
c0000884:	75 0f                	jne    c0000895 <strncpy+0x49>
c0000886:	eb 18                	jmp    c00008a0 <strncpy+0x54>
c0000888:	40                   	inc    eax
c0000889:	42                   	inc    edx
c000088a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000088d:	49                   	dec    ecx
c000088e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000891:	84 db                	test   bl,bl
c0000893:	74 0b                	je     c00008a0 <strncpy+0x54>
c0000895:	85 c9                	test   ecx,ecx
c0000897:	75 ef                	jne    c0000888 <strncpy+0x3c>
c0000899:	5b                   	pop    ebx
c000089a:	89 e8                	mov    eax,ebp
c000089c:	5e                   	pop    esi
c000089d:	5f                   	pop    edi
c000089e:	5d                   	pop    ebp
c000089f:	c3                   	ret    
c00008a0:	85 c9                	test   ecx,ecx
c00008a2:	74 f5                	je     c0000899 <strncpy+0x4d>
c00008a4:	fc                   	cld    
c00008a5:	31 c0                	xor    eax,eax
c00008a7:	89 d7                	mov    edi,edx
c00008a9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008ab:	89 e8                	mov    eax,ebp
c00008ad:	5b                   	pop    ebx
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	5d                   	pop    ebp
c00008b1:	c3                   	ret    
c00008b2:	66 90                	xchg   ax,ax

c00008b4 <strcmp>:
c00008b4:	56                   	push   esi
c00008b5:	53                   	push   ebx
c00008b6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008be:	8a 16                	mov    dl,BYTE PTR [esi]
c00008c0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008c3:	38 d1                	cmp    cl,dl
c00008c5:	75 1d                	jne    c00008e4 <strcmp+0x30>
c00008c7:	84 c9                	test   cl,cl
c00008c9:	74 21                	je     c00008ec <strcmp+0x38>
c00008cb:	b8 01 00 00 00       	mov    eax,0x1
c00008d0:	eb 07                	jmp    c00008d9 <strcmp+0x25>
c00008d2:	66 90                	xchg   ax,ax
c00008d4:	40                   	inc    eax
c00008d5:	84 d2                	test   dl,dl
c00008d7:	74 13                	je     c00008ec <strcmp+0x38>
c00008d9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008dc:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008e0:	38 ca                	cmp    dl,cl
c00008e2:	74 f0                	je     c00008d4 <strcmp+0x20>
c00008e4:	0f b6 c2             	movzx  eax,dl
c00008e7:	5b                   	pop    ebx
c00008e8:	29 c8                	sub    eax,ecx
c00008ea:	5e                   	pop    esi
c00008eb:	c3                   	ret    
c00008ec:	31 c0                	xor    eax,eax
c00008ee:	5b                   	pop    ebx
c00008ef:	5e                   	pop    esi
c00008f0:	c3                   	ret    
c00008f1:	8d 76 00             	lea    esi,[esi+0x0]

c00008f4 <strchr>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00008fa:	84 d2                	test   dl,dl
c00008fc:	74 15                	je     c0000913 <strchr+0x1f>
c00008fe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000902:	38 ca                	cmp    dl,cl
c0000904:	75 06                	jne    c000090c <strchr+0x18>
c0000906:	eb 0e                	jmp    c0000916 <strchr+0x22>
c0000908:	38 ca                	cmp    dl,cl
c000090a:	74 09                	je     c0000915 <strchr+0x21>
c000090c:	40                   	inc    eax
c000090d:	8a 10                	mov    dl,BYTE PTR [eax]
c000090f:	84 d2                	test   dl,dl
c0000911:	75 f5                	jne    c0000908 <strchr+0x14>
c0000913:	31 c0                	xor    eax,eax
c0000915:	c3                   	ret    
c0000916:	c3                   	ret    
c0000917:	90                   	nop

c0000918 <strncmp>:
c0000918:	57                   	push   edi
c0000919:	56                   	push   esi
c000091a:	53                   	push   ebx
c000091b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000091f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000923:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000927:	85 ff                	test   edi,edi
c0000929:	74 28                	je     c0000953 <strncmp+0x3b>
c000092b:	8a 16                	mov    dl,BYTE PTR [esi]
c000092d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000930:	38 d1                	cmp    cl,dl
c0000932:	75 28                	jne    c000095c <strncmp+0x44>
c0000934:	8d 46 01             	lea    eax,[esi+0x1]
c0000937:	84 c9                	test   cl,cl
c0000939:	74 18                	je     c0000953 <strncmp+0x3b>
c000093b:	01 fe                	add    esi,edi
c000093d:	eb 0f                	jmp    c000094e <strncmp+0x36>
c000093f:	90                   	nop
c0000940:	8a 10                	mov    dl,BYTE PTR [eax]
c0000942:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000945:	38 ca                	cmp    dl,cl
c0000947:	75 13                	jne    c000095c <strncmp+0x44>
c0000949:	40                   	inc    eax
c000094a:	84 d2                	test   dl,dl
c000094c:	74 05                	je     c0000953 <strncmp+0x3b>
c000094e:	43                   	inc    ebx
c000094f:	39 c6                	cmp    esi,eax
c0000951:	75 ed                	jne    c0000940 <strncmp+0x28>
c0000953:	5b                   	pop    ebx
c0000954:	31 c0                	xor    eax,eax
c0000956:	5e                   	pop    esi
c0000957:	5f                   	pop    edi
c0000958:	c3                   	ret    
c0000959:	8d 76 00             	lea    esi,[esi+0x0]
c000095c:	5b                   	pop    ebx
c000095d:	0f b6 c2             	movzx  eax,dl
c0000960:	5e                   	pop    esi
c0000961:	29 c8                	sub    eax,ecx
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]

c0000968 <strcat>:
c0000968:	56                   	push   esi
c0000969:	53                   	push   ebx
c000096a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000972:	89 c3                	mov    ebx,eax
c0000974:	eb 04                	jmp    c000097a <strcat+0x12>
c0000976:	66 90                	xchg   ax,ax
c0000978:	89 d3                	mov    ebx,edx
c000097a:	8d 53 01             	lea    edx,[ebx+0x1]
c000097d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000981:	75 f5                	jne    c0000978 <strcat+0x10>
c0000983:	31 d2                	xor    edx,edx
c0000985:	8d 76 00             	lea    esi,[esi+0x0]
c0000988:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000098b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000098e:	42                   	inc    edx
c000098f:	84 c9                	test   cl,cl
c0000991:	75 f5                	jne    c0000988 <strcat+0x20>
c0000993:	5b                   	pop    ebx
c0000994:	5e                   	pop    esi
c0000995:	c3                   	ret    
c0000996:	66 90                	xchg   ax,ax

c0000998 <strncat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000099e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009a6:	85 f6                	test   esi,esi
c00009a8:	74 1e                	je     c00009c8 <strncat+0x30>
c00009aa:	89 c2                	mov    edx,eax
c00009ac:	42                   	inc    edx
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f9                	jne    c00009ac <strncat+0x14>
c00009b3:	01 ce                	add    esi,ecx
c00009b5:	eb 06                	jmp    c00009bd <strncat+0x25>
c00009b7:	90                   	nop
c00009b8:	39 f1                	cmp    ecx,esi
c00009ba:	74 10                	je     c00009cc <strncat+0x34>
c00009bc:	42                   	inc    edx
c00009bd:	41                   	inc    ecx
c00009be:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009c1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009c4:	84 db                	test   bl,bl
c00009c6:	75 f0                	jne    c00009b8 <strncat+0x20>
c00009c8:	5b                   	pop    ebx
c00009c9:	5e                   	pop    esi
c00009ca:	c3                   	ret    
c00009cb:	90                   	nop
c00009cc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009cf:	5b                   	pop    ebx
c00009d0:	5e                   	pop    esi
c00009d1:	c3                   	ret    
c00009d2:	66 90                	xchg   ax,ax

c00009d4 <strstr>:
c00009d4:	57                   	push   edi
c00009d5:	56                   	push   esi
c00009d6:	53                   	push   ebx
c00009d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009df:	57                   	push   edi
c00009e0:	e8 a3 fd ff ff       	call   c0000788 <strlen>
c00009e5:	59                   	pop    ecx
c00009e6:	85 c0                	test   eax,eax
c00009e8:	74 2a                	je     c0000a14 <strstr+0x40>
c00009ea:	89 c6                	mov    esi,eax
c00009ec:	eb 12                	jmp    c0000a00 <strstr+0x2c>
c00009ee:	66 90                	xchg   ax,ax
c00009f0:	56                   	push   esi
c00009f1:	57                   	push   edi
c00009f2:	53                   	push   ebx
c00009f3:	e8 70 fc ff ff       	call   c0000668 <memcmp>
c00009f8:	83 c4 0c             	add    esp,0xc
c00009fb:	85 c0                	test   eax,eax
c00009fd:	74 15                	je     c0000a14 <strstr+0x40>
c00009ff:	43                   	inc    ebx
c0000a00:	53                   	push   ebx
c0000a01:	e8 82 fd ff ff       	call   c0000788 <strlen>
c0000a06:	5a                   	pop    edx
c0000a07:	39 f0                	cmp    eax,esi
c0000a09:	73 e5                	jae    c00009f0 <strstr+0x1c>
c0000a0b:	5b                   	pop    ebx
c0000a0c:	31 c0                	xor    eax,eax
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	c3                   	ret    
c0000a11:	8d 76 00             	lea    esi,[esi+0x0]
c0000a14:	89 d8                	mov    eax,ebx
c0000a16:	5b                   	pop    ebx
c0000a17:	5e                   	pop    esi
c0000a18:	5f                   	pop    edi
c0000a19:	c3                   	ret    
c0000a1a:	66 90                	xchg   ax,ax

c0000a1c <toupper>:
c0000a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a20:	0f b6 d0             	movzx  edx,al
c0000a23:	f6 82 40 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd64c0],0x2
c0000a2a:	74 03                	je     c0000a2f <toupper+0x13>
c0000a2c:	83 e8 20             	sub    eax,0x20
c0000a2f:	c3                   	ret    

c0000a30 <tolower>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 40 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64c0],0x1
c0000a3e:	74 03                	je     c0000a43 <tolower+0x13>
c0000a40:	83 c0 20             	add    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <simple_strtoul>:
c0000a44:	55                   	push   ebp
c0000a45:	57                   	push   edi
c0000a46:	56                   	push   esi
c0000a47:	53                   	push   ebx
c0000a48:	83 ec 08             	sub    esp,0x8
c0000a4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a53:	90                   	nop
c0000a54:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a57:	f6 82 40 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd64c0],0x8
c0000a5e:	75 05                	jne    c0000a65 <simple_strtoul+0x21>
c0000a60:	80 fa 09             	cmp    dl,0x9
c0000a63:	75 03                	jne    c0000a68 <simple_strtoul+0x24>
c0000a65:	41                   	inc    ecx
c0000a66:	eb ec                	jmp    c0000a54 <simple_strtoul+0x10>
c0000a68:	80 fa 2d             	cmp    dl,0x2d
c0000a6b:	0f 84 1b 01 00 00    	je     c0000b8c <simple_strtoul+0x148>
c0000a71:	80 fa 2b             	cmp    dl,0x2b
c0000a74:	0f 84 c2 00 00 00    	je     c0000b3c <simple_strtoul+0xf8>
c0000a7a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a82:	85 f6                	test   esi,esi
c0000a84:	0f 85 c3 00 00 00    	jne    c0000b4d <simple_strtoul+0x109>
c0000a8a:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a8c:	80 fa 30             	cmp    dl,0x30
c0000a8f:	0f 84 47 01 00 00    	je     c0000bdc <simple_strtoul+0x198>
c0000a95:	be 0a 00 00 00       	mov    esi,0xa
c0000a9a:	84 d2                	test   dl,dl
c0000a9c:	0f 84 6f 01 00 00    	je     c0000c11 <simple_strtoul+0x1cd>
c0000aa2:	31 ed                	xor    ebp,ebp
c0000aa4:	31 ff                	xor    edi,edi
c0000aa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000aad:	eb 2b                	jmp    c0000ada <simple_strtoul+0x96>
c0000aaf:	90                   	nop
c0000ab0:	83 eb 30             	sub    ebx,0x30
c0000ab3:	39 f3                	cmp    ebx,esi
c0000ab5:	73 4d                	jae    c0000b04 <simple_strtoul+0xc0>
c0000ab7:	31 d2                	xor    edx,edx
c0000ab9:	89 d8                	mov    eax,ebx
c0000abb:	f7 d0                	not    eax
c0000abd:	f7 f6                	div    esi
c0000abf:	39 f8                	cmp    eax,edi
c0000ac1:	0f 82 b1 00 00 00    	jb     c0000b78 <simple_strtoul+0x134>
c0000ac7:	0f af fe             	imul   edi,esi
c0000aca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ad1:	01 df                	add    edi,ebx
c0000ad3:	41                   	inc    ecx
c0000ad4:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ad6:	84 d2                	test   dl,dl
c0000ad8:	74 2a                	je     c0000b04 <simple_strtoul+0xc0>
c0000ada:	0f b6 da             	movzx  ebx,dl
c0000add:	f6 83 40 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd64c0],0x4
c0000ae4:	75 ca                	jne    c0000ab0 <simple_strtoul+0x6c>
c0000ae6:	0f be d2             	movsx  edx,dl
c0000ae9:	52                   	push   edx
c0000aea:	e8 2d ff ff ff       	call   c0000a1c <toupper>
c0000aef:	5b                   	pop    ebx
c0000af0:	0f b6 d0             	movzx  edx,al
c0000af3:	f6 82 40 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64c0],0x1
c0000afa:	74 08                	je     c0000b04 <simple_strtoul+0xc0>
c0000afc:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000aff:	39 f3                	cmp    ebx,esi
c0000b01:	72 b4                	jb     c0000ab7 <simple_strtoul+0x73>
c0000b03:	90                   	nop
c0000b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b08:	85 c0                	test   eax,eax
c0000b0a:	74 14                	je     c0000b20 <simple_strtoul+0xdc>
c0000b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b0f:	09 f8                	or     eax,edi
c0000b11:	75 71                	jne    c0000b84 <simple_strtoul+0x140>
c0000b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b1b:	31 ff                	xor    edi,edi
c0000b1d:	89 30                	mov    DWORD PTR [eax],esi
c0000b1f:	90                   	nop
c0000b20:	4d                   	dec    ebp
c0000b21:	75 05                	jne    c0000b28 <simple_strtoul+0xe4>
c0000b23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b2d:	75 02                	jne    c0000b31 <simple_strtoul+0xed>
c0000b2f:	f7 df                	neg    edi
c0000b31:	83 c4 08             	add    esp,0x8
c0000b34:	89 f8                	mov    eax,edi
c0000b36:	5b                   	pop    ebx
c0000b37:	5e                   	pop    esi
c0000b38:	5f                   	pop    edi
c0000b39:	5d                   	pop    ebp
c0000b3a:	c3                   	ret    
c0000b3b:	90                   	nop
c0000b3c:	41                   	inc    ecx
c0000b3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b45:	85 f6                	test   esi,esi
c0000b47:	0f 84 3d ff ff ff    	je     c0000a8a <simple_strtoul+0x46>
c0000b4d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b50:	83 f8 22             	cmp    eax,0x22
c0000b53:	77 6a                	ja     c0000bbf <simple_strtoul+0x17b>
c0000b55:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b57:	83 fe 08             	cmp    esi,0x8
c0000b5a:	0f 84 a2 00 00 00    	je     c0000c02 <simple_strtoul+0x1be>
c0000b60:	83 fe 10             	cmp    esi,0x10
c0000b63:	0f 85 31 ff ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000b69:	80 fa 30             	cmp    dl,0x30
c0000b6c:	74 2c                	je     c0000b9a <simple_strtoul+0x156>
c0000b6e:	be 10 00 00 00       	mov    esi,0x10
c0000b73:	e9 22 ff ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000b78:	bd 01 00 00 00       	mov    ebp,0x1
c0000b7d:	31 ff                	xor    edi,edi
c0000b7f:	e9 4f ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x8f>
c0000b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b88:	89 08                	mov    DWORD PTR [eax],ecx
c0000b8a:	eb 94                	jmp    c0000b20 <simple_strtoul+0xdc>
c0000b8c:	41                   	inc    ecx
c0000b8d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b95:	e9 e8 fe ff ff       	jmp    c0000a82 <simple_strtoul+0x3e>
c0000b9a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b9e:	88 04 24             	mov    BYTE PTR [esp],al
c0000ba1:	50                   	push   eax
c0000ba2:	e8 89 fe ff ff       	call   c0000a30 <tolower>
c0000ba7:	5e                   	pop    esi
c0000ba8:	83 f8 78             	cmp    eax,0x78
c0000bab:	0f 84 84 00 00 00    	je     c0000c35 <simple_strtoul+0x1f1>
c0000bb1:	41                   	inc    ecx
c0000bb2:	be 10 00 00 00       	mov    esi,0x10
c0000bb7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bba:	e9 db fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000bbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bc3:	85 ff                	test   edi,edi
c0000bc5:	74 5c                	je     c0000c23 <simple_strtoul+0x1df>
c0000bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bcb:	85 c9                	test   ecx,ecx
c0000bcd:	75 4e                	jne    c0000c1d <simple_strtoul+0x1d9>
c0000bcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bd5:	31 ff                	xor    edi,edi
c0000bd7:	e9 4c ff ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000bdc:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000be0:	88 04 24             	mov    BYTE PTR [esp],al
c0000be3:	50                   	push   eax
c0000be4:	e8 47 fe ff ff       	call   c0000a30 <tolower>
c0000be9:	5d                   	pop    ebp
c0000bea:	83 f8 78             	cmp    eax,0x78
c0000bed:	74 3b                	je     c0000c2a <simple_strtoul+0x1e6>
c0000bef:	41                   	inc    ecx
c0000bf0:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bf3:	80 fa 30             	cmp    dl,0x30
c0000bf6:	74 13                	je     c0000c0b <simple_strtoul+0x1c7>
c0000bf8:	be 08 00 00 00       	mov    esi,0x8
c0000bfd:	e9 98 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000c02:	80 fa 30             	cmp    dl,0x30
c0000c05:	0f 85 8f fe ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000c0b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c0e:	41                   	inc    ecx
c0000c0f:	eb e7                	jmp    c0000bf8 <simple_strtoul+0x1b4>
c0000c11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c15:	85 d2                	test   edx,edx
c0000c17:	74 0a                	je     c0000c23 <simple_strtoul+0x1df>
c0000c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c21:	89 30                	mov    DWORD PTR [eax],esi
c0000c23:	31 ff                	xor    edi,edi
c0000c25:	e9 fe fe ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000c2a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c2d:	83 c1 02             	add    ecx,0x2
c0000c30:	e9 34 ff ff ff       	jmp    c0000b69 <simple_strtoul+0x125>
c0000c35:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c38:	be 10 00 00 00       	mov    esi,0x10
c0000c3d:	83 c1 02             	add    ecx,0x2
c0000c40:	e9 55 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>

c0000c45 <largebin_index>:
c0000c45:	89 c2                	mov    edx,eax
c0000c47:	c1 ea 08             	shr    edx,0x8
c0000c4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c50:	77 10                	ja     c0000c62 <largebin_index+0x1d>
c0000c52:	0f bd d2             	bsr    edx,edx
c0000c55:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c58:	d3 e8                	shr    eax,cl
c0000c5a:	83 e0 03             	and    eax,0x3
c0000c5d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c61:	c3                   	ret    
c0000c62:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c67:	c3                   	ret    

c0000c68 <malloc_init_state>:
c0000c68:	53                   	push   ebx
c0000c69:	8d 50 34             	lea    edx,[eax+0x34]
c0000c6c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c72:	89 d1                	mov    ecx,edx
c0000c74:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c77:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c7a:	83 c2 08             	add    edx,0x8
c0000c7d:	39 da                	cmp    edx,ebx
c0000c7f:	75 f3                	jne    c0000c74 <malloc_init_state+0xc>
c0000c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c83:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c8d:	83 e2 03             	and    edx,0x3
c0000c90:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c9a:	83 ca 48             	or     edx,0x48
c0000c9d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ca7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cb1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cbd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cc7:	5b                   	pop    ebx
c0000cc8:	c3                   	ret    

c0000cc9 <malloc_consolidate>:
c0000cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ccb:	85 d2                	test   edx,edx
c0000ccd:	0f 84 d8 00 00 00    	je     c0000dab <malloc_consolidate+0xe2>
c0000cd3:	55                   	push   ebp
c0000cd4:	83 e2 fd             	and    edx,0xfffffffd
c0000cd7:	57                   	push   edi
c0000cd8:	89 c5                	mov    ebp,eax
c0000cda:	56                   	push   esi
c0000cdb:	8d 78 34             	lea    edi,[eax+0x34]
c0000cde:	53                   	push   ebx
c0000cdf:	83 ec 10             	sub    esp,0x10
c0000ce2:	89 10                	mov    DWORD PTR [eax],edx
c0000ce4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ce8:	c1 ea 03             	shr    edx,0x3
c0000ceb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cf3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cf6:	85 d2                	test   edx,edx
c0000cf8:	0f 84 98 00 00 00    	je     c0000d96 <malloc_consolidate+0xcd>
c0000cfe:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d05:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d08:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d0f:	89 f9                	mov    ecx,edi
c0000d11:	83 e1 fe             	and    ecx,0xfffffffe
c0000d14:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d17:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d1a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d1d:	83 e7 01             	and    edi,0x1
c0000d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d23:	75 14                	jne    c0000d39 <malloc_consolidate+0x70>
c0000d25:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d27:	29 fa                	sub    edx,edi
c0000d29:	01 f9                	add    ecx,edi
c0000d2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2e:	89 fb                	mov    ebx,edi
c0000d30:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d33:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d36:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d39:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d3c:	74 40                	je     c0000d7e <malloc_consolidate+0xb5>
c0000d3e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d44:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d48:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d4b:	83 e7 01             	and    edi,0x1
c0000d4e:	75 0e                	jne    c0000d5e <malloc_consolidate+0x95>
c0000d50:	01 d9                	add    ecx,ebx
c0000d52:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d55:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d5b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d5e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d61:	89 ce                	mov    esi,ecx
c0000d63:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d66:	83 ce 01             	or     esi,0x1
c0000d69:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d6c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d6f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d72:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d76:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d79:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d7c:	eb 0c                	jmp    c0000d8a <malloc_consolidate+0xc1>
c0000d7e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d8e:	85 d2                	test   edx,edx
c0000d90:	0f 85 6f ff ff ff    	jne    c0000d05 <malloc_consolidate+0x3c>
c0000d96:	83 c5 04             	add    ebp,0x4
c0000d99:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d9d:	0f 85 50 ff ff ff    	jne    c0000cf3 <malloc_consolidate+0x2a>
c0000da3:	83 c4 10             	add    esp,0x10
c0000da6:	5b                   	pop    ebx
c0000da7:	5e                   	pop    esi
c0000da8:	5f                   	pop    edi
c0000da9:	5d                   	pop    ebp
c0000daa:	c3                   	ret    
c0000dab:	e9 b8 fe ff ff       	jmp    c0000c68 <malloc_init_state>

c0000db0 <dlfree>:
c0000db0:	57                   	push   edi
c0000db1:	56                   	push   esi
c0000db2:	53                   	push   ebx
c0000db3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000db7:	85 db                	test   ebx,ebx
c0000db9:	0f 84 e2 00 00 00    	je     c0000ea1 <dlfree+0xf1>
c0000dbf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dc2:	8b 0d 60 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea60
c0000dc8:	89 f0                	mov    eax,esi
c0000dca:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dcd:	83 e0 fc             	and    eax,0xfffffffc
c0000dd0:	39 c1                	cmp    ecx,eax
c0000dd2:	72 24                	jb     c0000df8 <dlfree+0x48>
c0000dd4:	83 c9 03             	or     ecx,0x3
c0000dd7:	c1 e8 03             	shr    eax,0x3
c0000dda:	89 0d 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,ecx
c0000de0:	83 e8 02             	sub    eax,0x2
c0000de3:	8b 0c 85 64 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd159c]
c0000dea:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dec:	89 14 85 64 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd159c],edx
c0000df3:	e9 a9 00 00 00       	jmp    c0000ea1 <dlfree+0xf1>
c0000df8:	83 e6 02             	and    esi,0x2
c0000dfb:	0f 85 a0 00 00 00    	jne    c0000ea1 <dlfree+0xf1>
c0000e01:	83 c9 01             	or     ecx,0x1
c0000e04:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e07:	89 0d 60 ea 02 c0    	mov    DWORD PTR ds:0xc002ea60,ecx
c0000e0d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e10:	83 e1 fc             	and    ecx,0xfffffffc
c0000e13:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e17:	75 13                	jne    c0000e2c <dlfree+0x7c>
c0000e19:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e1c:	29 da                	sub    edx,ebx
c0000e1e:	01 d8                	add    eax,ebx
c0000e20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e23:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e26:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e29:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e2c:	39 35 8c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea8c,esi
c0000e32:	74 40                	je     c0000e74 <dlfree+0xc4>
c0000e34:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e38:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e3b:	80 e3 01             	and    bl,0x1
c0000e3e:	75 0e                	jne    c0000e4e <dlfree+0x9e>
c0000e40:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e43:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e46:	01 c8                	add    eax,ecx
c0000e48:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e4b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e4e:	8b 0d 9c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea9c
c0000e54:	c7 42 0c 94 ea 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ea94
c0000e5b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e5e:	89 15 9c ea 02 c0    	mov    DWORD PTR ds:0xc002ea9c,edx
c0000e64:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e67:	89 c1                	mov    ecx,eax
c0000e69:	83 c9 01             	or     ecx,0x1
c0000e6c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e6f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e72:	eb 10                	jmp    c0000e84 <dlfree+0xd4>
c0000e74:	01 c8                	add    eax,ecx
c0000e76:	89 c1                	mov    ecx,eax
c0000e78:	83 c9 01             	or     ecx,0x1
c0000e7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7e:	89 15 8c ea 02 c0    	mov    DWORD PTR ds:0xc002ea8c,edx
c0000e84:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e89:	76 16                	jbe    c0000ea1 <dlfree+0xf1>
c0000e8b:	f6 05 60 ea 02 c0 02 	test   BYTE PTR ds:0xc002ea60,0x2
c0000e92:	74 0d                	je     c0000ea1 <dlfree+0xf1>
c0000e94:	5b                   	pop    ebx
c0000e95:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0000e9a:	5e                   	pop    esi
c0000e9b:	5f                   	pop    edi
c0000e9c:	e9 28 fe ff ff       	jmp    c0000cc9 <malloc_consolidate>
c0000ea1:	5b                   	pop    ebx
c0000ea2:	5e                   	pop    esi
c0000ea3:	5f                   	pop    edi
c0000ea4:	c3                   	ret    

c0000ea5 <sYSMALLOc>:
c0000ea5:	55                   	push   ebp
c0000ea6:	57                   	push   edi
c0000ea7:	56                   	push   esi
c0000ea8:	53                   	push   ebx
c0000ea9:	89 d3                	mov    ebx,edx
c0000eab:	83 ec 2c             	sub    esp,0x2c
c0000eae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000eb2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000eb8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ebb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ec2:	74 1f                	je     c0000ee3 <sYSMALLOc+0x3e>
c0000ec4:	89 d8                	mov    eax,ebx
c0000ec6:	e8 fe fd ff ff       	call   c0000cc9 <malloc_consolidate>
c0000ecb:	83 ec 0c             	sub    esp,0xc
c0000ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ed2:	83 e8 07             	sub    eax,0x7
c0000ed5:	50                   	push   eax
c0000ed6:	e8 30 02 00 00       	call   c000110b <dlmalloc>
c0000edb:	83 c4 10             	add    esp,0x10
c0000ede:	e9 20 02 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000ee3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ee6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000eec:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000eef:	83 e0 fc             	and    eax,0xfffffffc
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000efa:	83 c0 10             	add    eax,0x10
c0000efd:	01 c1                	add    ecx,eax
c0000eff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f03:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f0a:	74 04                	je     c0000f10 <sYSMALLOc+0x6b>
c0000f0c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f10:	f7 da                	neg    edx
c0000f12:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f1a:	21 d1                	and    ecx,edx
c0000f1c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f20:	7f 07                	jg     c0000f29 <sYSMALLOc+0x84>
c0000f22:	31 c0                	xor    eax,eax
c0000f24:	e9 da 01 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f30:	e8 cd e7 00 00       	call   c000f702 <sbrk>
c0000f35:	83 c4 10             	add    esp,0x10
c0000f38:	89 c6                	mov    esi,eax
c0000f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f3d:	74 e3                	je     c0000f22 <sYSMALLOc+0x7d>
c0000f3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f43:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f47:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f4a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f50:	39 f1                	cmp    ecx,esi
c0000f52:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f58:	75 13                	jne    c0000f6d <sYSMALLOc+0xc8>
c0000f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f5e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f62:	83 c8 01             	or     eax,0x1
c0000f65:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f68:	e9 3e 01 00 00       	jmp    c00010ab <sYSMALLOc+0x206>
c0000f6d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f73:	88 d0                	mov    al,dl
c0000f75:	83 e0 01             	and    eax,0x1
c0000f78:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f7d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f81:	0f 95 c0             	setne  al
c0000f84:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f88:	39 f1                	cmp    ecx,esi
c0000f8a:	76 12                	jbe    c0000f9e <sYSMALLOc+0xf9>
c0000f8c:	84 c0                	test   al,al
c0000f8e:	74 0e                	je     c0000f9e <sYSMALLOc+0xf9>
c0000f90:	83 e2 fe             	and    edx,0xfffffffe
c0000f93:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f99:	e9 83 00 00 00       	jmp    c0001021 <sYSMALLOc+0x17c>
c0000f9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fa3:	74 7c                	je     c0001021 <sYSMALLOc+0x17c>
c0000fa5:	84 c0                	test   al,al
c0000fa7:	74 0c                	je     c0000fb5 <sYSMALLOc+0x110>
c0000fa9:	89 f0                	mov    eax,esi
c0000fab:	29 c8                	sub    eax,ecx
c0000fad:	01 e8                	add    eax,ebp
c0000faf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fb5:	89 f2                	mov    edx,esi
c0000fb7:	83 e2 07             	and    edx,0x7
c0000fba:	74 0c                	je     c0000fc8 <sYSMALLOc+0x123>
c0000fbc:	b8 08 00 00 00       	mov    eax,0x8
c0000fc1:	29 d0                	sub    eax,edx
c0000fc3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fc6:	eb 04                	jmp    c0000fcc <sYSMALLOc+0x127>
c0000fc8:	89 f5                	mov    ebp,esi
c0000fca:	31 c0                	xor    eax,eax
c0000fcc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fd8:	01 c1                	add    ecx,eax
c0000fda:	83 ec 0c             	sub    esp,0xc
c0000fdd:	01 f1                	add    ecx,esi
c0000fdf:	01 ca                	add    edx,ecx
c0000fe1:	29 c8                	sub    eax,ecx
c0000fe3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fe7:	01 c2                	add    edx,eax
c0000fe9:	52                   	push   edx
c0000fea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fee:	e8 0f e7 00 00       	call   c000f702 <sbrk>
c0000ff3:	83 c4 10             	add    esp,0x10
c0000ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0000ff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ffd:	75 0f                	jne    c000100e <sYSMALLOc+0x169>
c0000fff:	83 ec 0c             	sub    esp,0xc
c0001002:	6a 00                	push   0x0
c0001004:	e8 f9 e6 00 00       	call   c000f702 <sbrk>
c0001009:	83 c4 10             	add    esp,0x10
c000100c:	eb 30                	jmp    c000103e <sYSMALLOc+0x199>
c000100e:	39 c6                	cmp    esi,eax
c0001010:	76 33                	jbe    c0001045 <sYSMALLOc+0x1a0>
c0001012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001016:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000101d:	01 f0                	add    eax,esi
c000101f:	eb 1d                	jmp    c000103e <sYSMALLOc+0x199>
c0001021:	83 ec 0c             	sub    esp,0xc
c0001024:	89 f5                	mov    ebp,esi
c0001026:	6a 00                	push   0x0
c0001028:	e8 d5 e6 00 00       	call   c000f702 <sbrk>
c000102d:	89 c2                	mov    edx,eax
c000102f:	29 f2                	sub    edx,esi
c0001031:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001035:	83 c4 10             	add    esp,0x10
c0001038:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103e:	31 d2                	xor    edx,edx
c0001040:	83 f8 ff             	cmp    eax,0xffffffff
c0001043:	74 66                	je     c00010ab <sYSMALLOc+0x206>
c0001045:	29 e8                	sub    eax,ebp
c0001047:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000104a:	01 d0                	add    eax,edx
c000104c:	83 c8 01             	or     eax,0x1
c000104f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001052:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001058:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000105d:	74 4c                	je     c00010ab <sYSMALLOc+0x206>
c000105f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001063:	83 e8 0c             	sub    eax,0xc
c0001066:	83 e0 f8             	and    eax,0xfffffff8
c0001069:	89 c2                	mov    edx,eax
c000106b:	83 ca 01             	or     edx,0x1
c000106e:	83 f8 0f             	cmp    eax,0xf
c0001071:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001074:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000107c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001084:	76 25                	jbe    c00010ab <sYSMALLOc+0x206>
c0001086:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000108c:	83 ec 0c             	sub    esp,0xc
c000108f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001099:	83 c7 08             	add    edi,0x8
c000109c:	57                   	push   edi
c000109d:	e8 0e fd ff ff       	call   c0000db0 <dlfree>
c00010a2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010a8:	83 c4 10             	add    esp,0x10
c00010ab:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010b1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010b7:	73 06                	jae    c00010bf <sYSMALLOc+0x21a>
c00010b9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010bf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010c5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x22e>
c00010cd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010d9:	83 e2 fc             	and    edx,0xfffffffc
c00010dc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010e0:	0f 82 3c fe ff ff    	jb     c0000f22 <sYSMALLOc+0x7d>
c00010e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ea:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010ed:	29 fa                	sub    edx,edi
c00010ef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010f2:	83 ca 01             	or     edx,0x1
c00010f5:	89 fb                	mov    ebx,edi
c00010f7:	83 c0 08             	add    eax,0x8
c00010fa:	83 cb 01             	or     ebx,0x1
c00010fd:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001100:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001103:	83 c4 2c             	add    esp,0x2c
c0001106:	5b                   	pop    ebx
c0001107:	5e                   	pop    esi
c0001108:	5f                   	pop    edi
c0001109:	5d                   	pop    ebp
c000110a:	c3                   	ret    

c000110b <dlmalloc>:
c000110b:	55                   	push   ebp
c000110c:	57                   	push   edi
c000110d:	56                   	push   esi
c000110e:	53                   	push   ebx
c000110f:	83 ec 1c             	sub    esp,0x1c
c0001112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001116:	83 f8 df             	cmp    eax,0xffffffdf
c0001119:	0f 87 70 03 00 00    	ja     c000148f <dlmalloc+0x384>
c000111f:	83 c0 0b             	add    eax,0xb
c0001122:	be 10 00 00 00       	mov    esi,0x10
c0001127:	83 f8 0f             	cmp    eax,0xf
c000112a:	76 05                	jbe    c0001131 <dlmalloc+0x26>
c000112c:	83 e0 f8             	and    eax,0xfffffff8
c000112f:	89 c6                	mov    esi,eax
c0001131:	8b 3d 60 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea60
c0001137:	f7 c7 01 00 00 00    	test   edi,0x1
c000113d:	75 17                	jne    c0001156 <dlmalloc+0x4b>
c000113f:	85 ff                	test   edi,edi
c0001141:	0f 85 05 03 00 00    	jne    c000144c <dlmalloc+0x341>
c0001147:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c000114c:	e8 78 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c0001151:	e9 f6 02 00 00       	jmp    c000144c <dlmalloc+0x341>
c0001156:	39 f7                	cmp    edi,esi
c0001158:	72 1f                	jb     c0001179 <dlmalloc+0x6e>
c000115a:	89 f2                	mov    edx,esi
c000115c:	c1 ea 03             	shr    edx,0x3
c000115f:	83 ea 02             	sub    edx,0x2
c0001162:	8b 04 95 64 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd159c]
c0001169:	85 c0                	test   eax,eax
c000116b:	74 0c                	je     c0001179 <dlmalloc+0x6e>
c000116d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001170:	89 0c 95 64 ea 02 c0 	mov    DWORD PTR [edx*4-0x3ffd159c],ecx
c0001177:	eb 30                	jmp    c00011a9 <dlmalloc+0x9e>
c0001179:	89 f0                	mov    eax,esi
c000117b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001181:	77 2e                	ja     c00011b1 <dlmalloc+0xa6>
c0001183:	c1 e8 03             	shr    eax,0x3
c0001186:	8d 14 c5 94 ea 02 c0 	lea    edx,[eax*8-0x3ffd156c]
c000118d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001191:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001194:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001197:	39 c3                	cmp    ebx,eax
c0001199:	74 2e                	je     c00011c9 <dlmalloc+0xbe>
c000119b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000119e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011a3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011a6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011a9:	83 c0 08             	add    eax,0x8
c00011ac:	e9 e0 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c00011b1:	e8 8f fa ff ff       	call   c0000c45 <largebin_index>
c00011b6:	83 e7 02             	and    edi,0x2
c00011b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011bd:	74 0a                	je     c00011c9 <dlmalloc+0xbe>
c00011bf:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c00011c4:	e8 00 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c00011c9:	8d 46 10             	lea    eax,[esi+0x10]
c00011cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011d0:	8b 1d a0 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002eaa0
c00011d6:	81 fb 94 ea 02 c0    	cmp    ebx,0xc002ea94
c00011dc:	0f 84 13 01 00 00    	je     c00012f5 <dlmalloc+0x1ea>
c00011e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011e5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011e8:	83 e7 fc             	and    edi,0xfffffffc
c00011eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f1:	77 4c                	ja     c000123f <dlmalloc+0x134>
c00011f3:	3d 94 ea 02 c0       	cmp    eax,0xc002ea94
c00011f8:	75 45                	jne    c000123f <dlmalloc+0x134>
c00011fa:	39 1d 90 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea90,ebx
c0001200:	75 3d                	jne    c000123f <dlmalloc+0x134>
c0001202:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001206:	73 37                	jae    c000123f <dlmalloc+0x134>
c0001208:	8d 04 33             	lea    eax,[ebx+esi*1]
c000120b:	89 fa                	mov    edx,edi
c000120d:	a3 9c ea 02 c0       	mov    ds:0xc002ea9c,eax
c0001212:	a3 a0 ea 02 c0       	mov    ds:0xc002eaa0,eax
c0001217:	a3 90 ea 02 c0       	mov    ds:0xc002ea90,eax
c000121c:	29 f2                	sub    edx,esi
c000121e:	c7 40 08 94 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea94
c0001225:	c7 40 0c 94 ea 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ea94
c000122c:	83 ce 01             	or     esi,0x1
c000122f:	89 d1                	mov    ecx,edx
c0001231:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001234:	83 c9 01             	or     ecx,0x1
c0001237:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000123a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000123d:	eb 15                	jmp    c0001254 <dlmalloc+0x149>
c000123f:	a3 a0 ea 02 c0       	mov    ds:0xc002eaa0,eax
c0001244:	39 fe                	cmp    esi,edi
c0001246:	c7 40 08 94 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea94
c000124d:	75 0d                	jne    c000125c <dlmalloc+0x151>
c000124f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001254:	8d 43 08             	lea    eax,[ebx+0x8]
c0001257:	e9 35 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000125c:	89 f8                	mov    eax,edi
c000125e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001264:	77 19                	ja     c000127f <dlmalloc+0x174>
c0001266:	c1 e8 03             	shr    eax,0x3
c0001269:	8d 14 00             	lea    edx,[eax+eax*1]
c000126c:	83 c2 0d             	add    edx,0xd
c000126f:	8d 2c 95 58 ea 02 c0 	lea    ebp,[edx*4-0x3ffd15a8]
c0001276:	8b 14 95 60 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15a0]
c000127d:	eb 46                	jmp    c00012c5 <dlmalloc+0x1ba>
c000127f:	e8 c1 f9 ff ff       	call   c0000c45 <largebin_index>
c0001284:	8d 14 00             	lea    edx,[eax+eax*1]
c0001287:	83 c2 0d             	add    edx,0xd
c000128a:	8d 0c 95 60 ea 02 c0 	lea    ecx,[edx*4-0x3ffd15a0]
c0001291:	8b 14 95 60 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15a0]
c0001298:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000129b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000129f:	89 d5                	mov    ebp,edx
c00012a1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012a5:	74 1e                	je     c00012c5 <dlmalloc+0x1ba>
c00012a7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012aa:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012ad:	77 12                	ja     c00012c1 <dlmalloc+0x1b6>
c00012af:	83 cf 01             	or     edi,0x1
c00012b2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012b5:	76 05                	jbe    c00012bc <dlmalloc+0x1b1>
c00012b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ba:	eb f6                	jmp    c00012b2 <dlmalloc+0x1a7>
c00012bc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012bf:	eb 04                	jmp    c00012c5 <dlmalloc+0x1ba>
c00012c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012c5:	89 c7                	mov    edi,eax
c00012c7:	88 c1                	mov    cl,al
c00012c9:	c1 ff 05             	sar    edi,0x5
c00012cc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012d0:	bf 01 00 00 00       	mov    edi,0x1
c00012d5:	d3 e7                	shl    edi,cl
c00012d7:	89 f8                	mov    eax,edi
c00012d9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012dd:	09 04 bd 94 ed 02 c0 	or     DWORD PTR [edi*4-0x3ffd126c],eax
c00012e4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012e7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ea:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012ed:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012f0:	e9 db fe ff ff       	jmp    c00011d0 <dlmalloc+0xc5>
c00012f5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012fb:	76 78                	jbe    c0001375 <dlmalloc+0x26a>
c00012fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001301:	8d 04 c5 94 ea 02 c0 	lea    eax,[eax*8-0x3ffd156c]
c0001308:	8d 48 f8             	lea    ecx,[eax-0x8]
c000130b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000130e:	39 ca                	cmp    edx,ecx
c0001310:	74 63                	je     c0001375 <dlmalloc+0x26a>
c0001312:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001315:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001318:	83 e3 fc             	and    ebx,0xfffffffc
c000131b:	39 de                	cmp    esi,ebx
c000131d:	77 52                	ja     c0001371 <dlmalloc+0x266>
c000131f:	89 df                	mov    edi,ebx
c0001321:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001324:	29 f7                	sub    edi,esi
c0001326:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001329:	01 d3                	add    ebx,edx
c000132b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000132e:	83 ff 0f             	cmp    edi,0xf
c0001331:	8d 42 08             	lea    eax,[edx+0x8]
c0001334:	77 09                	ja     c000133f <dlmalloc+0x234>
c0001336:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000133a:	e9 52 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000133f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001342:	83 ce 01             	or     esi,0x1
c0001345:	89 0d 9c ea 02 c0    	mov    DWORD PTR ds:0xc002ea9c,ecx
c000134b:	89 0d a0 ea 02 c0    	mov    DWORD PTR ds:0xc002eaa0,ecx
c0001351:	c7 41 08 94 ea 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ea94
c0001358:	c7 41 0c 94 ea 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ea94
c000135f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001362:	89 fa                	mov    edx,edi
c0001364:	83 ca 01             	or     edx,0x1
c0001367:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000136a:	89 3b                	mov    DWORD PTR [ebx],edi
c000136c:	e9 20 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c0001371:	89 c2                	mov    edx,eax
c0001373:	eb 99                	jmp    c000130e <dlmalloc+0x203>
c0001375:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001379:	b8 01 00 00 00       	mov    eax,0x1
c000137e:	41                   	inc    ecx
c000137f:	89 cb                	mov    ebx,ecx
c0001381:	8d 14 cd 8c ea 02 c0 	lea    edx,[ecx*8-0x3ffd1574]
c0001388:	c1 eb 05             	shr    ebx,0x5
c000138b:	d3 e0                	shl    eax,cl
c000138d:	8b 3c 9d 94 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd126c]
c0001394:	39 f8                	cmp    eax,edi
c0001396:	77 04                	ja     c000139c <dlmalloc+0x291>
c0001398:	85 c0                	test   eax,eax
c000139a:	75 26                	jne    c00013c2 <dlmalloc+0x2b7>
c000139c:	43                   	inc    ebx
c000139d:	83 fb 02             	cmp    ebx,0x2
c00013a0:	0f 87 a6 00 00 00    	ja     c000144c <dlmalloc+0x341>
c00013a6:	8b 3c 9d 94 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd126c]
c00013ad:	85 ff                	test   edi,edi
c00013af:	74 eb                	je     c000139c <dlmalloc+0x291>
c00013b1:	89 d8                	mov    eax,ebx
c00013b3:	c1 e0 06             	shl    eax,0x6
c00013b6:	8d 14 85 8c ea 02 c0 	lea    edx,[eax*4-0x3ffd1574]
c00013bd:	b8 01 00 00 00       	mov    eax,0x1
c00013c2:	85 f8                	test   eax,edi
c00013c4:	75 07                	jne    c00013cd <dlmalloc+0x2c2>
c00013c6:	83 c2 08             	add    edx,0x8
c00013c9:	01 c0                	add    eax,eax
c00013cb:	eb f5                	jmp    c00013c2 <dlmalloc+0x2b7>
c00013cd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013d0:	39 ca                	cmp    edx,ecx
c00013d2:	75 14                	jne    c00013e8 <dlmalloc+0x2dd>
c00013d4:	89 c1                	mov    ecx,eax
c00013d6:	83 c2 08             	add    edx,0x8
c00013d9:	f7 d1                	not    ecx
c00013db:	01 c0                	add    eax,eax
c00013dd:	21 cf                	and    edi,ecx
c00013df:	89 3c 9d 94 ed 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd126c],edi
c00013e6:	eb ac                	jmp    c0001394 <dlmalloc+0x289>
c00013e8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013eb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013ee:	83 e0 fc             	and    eax,0xfffffffc
c00013f1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013f4:	89 c3                	mov    ebx,eax
c00013f6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013f9:	29 f3                	sub    ebx,esi
c00013fb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013fe:	83 fb 0f             	cmp    ebx,0xf
c0001401:	8d 41 08             	lea    eax,[ecx+0x8]
c0001404:	77 09                	ja     c000140f <dlmalloc+0x304>
c0001406:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000140a:	e9 82 00 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000140f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001412:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001418:	89 3d 9c ea 02 c0    	mov    DWORD PTR ds:0xc002ea9c,edi
c000141e:	89 3d a0 ea 02 c0    	mov    DWORD PTR ds:0xc002eaa0,edi
c0001424:	c7 47 08 94 ea 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ea94
c000142b:	c7 47 0c 94 ea 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ea94
c0001432:	77 06                	ja     c000143a <dlmalloc+0x32f>
c0001434:	89 3d 90 ea 02 c0    	mov    DWORD PTR ds:0xc002ea90,edi
c000143a:	83 ce 01             	or     esi,0x1
c000143d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001440:	89 d9                	mov    ecx,ebx
c0001442:	83 c9 01             	or     ecx,0x1
c0001445:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001448:	89 1a                	mov    DWORD PTR [edx],ebx
c000144a:	eb 45                	jmp    c0001491 <dlmalloc+0x386>
c000144c:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0001451:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001457:	83 e2 fc             	and    edx,0xfffffffc
c000145a:	39 d1                	cmp    ecx,edx
c000145c:	77 1e                	ja     c000147c <dlmalloc+0x371>
c000145e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001461:	89 f3                	mov    ebx,esi
c0001463:	89 0d 8c ea 02 c0    	mov    DWORD PTR ds:0xc002ea8c,ecx
c0001469:	83 cb 01             	or     ebx,0x1
c000146c:	29 f2                	sub    edx,esi
c000146e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001471:	83 ca 01             	or     edx,0x1
c0001474:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001477:	e9 2d fd ff ff       	jmp    c00011a9 <dlmalloc+0x9e>
c000147c:	83 c4 1c             	add    esp,0x1c
c000147f:	89 f0                	mov    eax,esi
c0001481:	5b                   	pop    ebx
c0001482:	ba 60 ea 02 c0       	mov    edx,0xc002ea60
c0001487:	5e                   	pop    esi
c0001488:	5f                   	pop    edi
c0001489:	5d                   	pop    ebp
c000148a:	e9 16 fa ff ff       	jmp    c0000ea5 <sYSMALLOc>
c000148f:	31 c0                	xor    eax,eax
c0001491:	83 c4 1c             	add    esp,0x1c
c0001494:	5b                   	pop    ebx
c0001495:	5e                   	pop    esi
c0001496:	5f                   	pop    edi
c0001497:	5d                   	pop    ebp
c0001498:	c3                   	ret    

c0001499 <iALLOc>:
c0001499:	55                   	push   ebp
c000149a:	89 c5                	mov    ebp,eax
c000149c:	57                   	push   edi
c000149d:	56                   	push   esi
c000149e:	53                   	push   ebx
c000149f:	83 ec 2c             	sub    esp,0x2c
c00014a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ae:	83 3d 60 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea60,0x0
c00014b5:	75 12                	jne    c00014c9 <iALLOc+0x30>
c00014b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014bb:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c00014c0:	e8 04 f8 ff ff       	call   c0000cc9 <malloc_consolidate>
c00014c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ce:	74 12                	je     c00014e2 <iALLOc+0x49>
c00014d0:	85 ed                	test   ebp,ebp
c00014d2:	0f 84 64 01 00 00    	je     c000163c <iALLOc+0x1a3>
c00014d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014e0:	eb 33                	jmp    c0001515 <iALLOc+0x7c>
c00014e2:	85 ed                	test   ebp,ebp
c00014e4:	75 14                	jne    c00014fa <iALLOc+0x61>
c00014e6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014ee:	83 c4 2c             	add    esp,0x2c
c00014f1:	5b                   	pop    ebx
c00014f2:	5e                   	pop    esi
c00014f3:	5f                   	pop    edi
c00014f4:	5d                   	pop    ebp
c00014f5:	e9 11 fc ff ff       	jmp    c000110b <dlmalloc>
c00014fa:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001501:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001509:	83 f8 0f             	cmp    eax,0xf
c000150c:	76 07                	jbe    c0001515 <iALLOc+0x7c>
c000150e:	83 e0 f8             	and    eax,0xfffffff8
c0001511:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001515:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000151a:	75 09                	jne    c0001525 <iALLOc+0x8c>
c000151c:	89 d0                	mov    eax,edx
c000151e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001521:	31 f6                	xor    esi,esi
c0001523:	eb 3b                	jmp    c0001560 <iALLOc+0xc7>
c0001525:	8b 02                	mov    eax,DWORD PTR [edx]
c0001527:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000152f:	83 c0 0b             	add    eax,0xb
c0001532:	83 f8 0f             	cmp    eax,0xf
c0001535:	76 07                	jbe    c000153e <iALLOc+0xa5>
c0001537:	83 e0 f8             	and    eax,0xfffffff8
c000153a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000153e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001542:	0f af f5             	imul   esi,ebp
c0001545:	eb 25                	jmp    c000156c <iALLOc+0xd3>
c0001547:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001549:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000154c:	bb 10 00 00 00       	mov    ebx,0x10
c0001551:	83 f9 0f             	cmp    ecx,0xf
c0001554:	76 05                	jbe    c000155b <iALLOc+0xc2>
c0001556:	83 e1 f8             	and    ecx,0xfffffff8
c0001559:	89 cb                	mov    ebx,ecx
c000155b:	01 de                	add    esi,ebx
c000155d:	83 c0 04             	add    eax,0x4
c0001560:	39 c7                	cmp    edi,eax
c0001562:	75 e3                	jne    c0001547 <iALLOc+0xae>
c0001564:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000156c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001570:	8b 1d b4 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002edb4
c0001576:	83 ec 0c             	sub    esp,0xc
c0001579:	c7 05 b4 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002edb4,0x0
c0001583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001587:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000158b:	50                   	push   eax
c000158c:	e8 7a fb ff ff       	call   c000110b <dlmalloc>
c0001591:	83 c4 10             	add    esp,0x10
c0001594:	89 1d b4 ed 02 c0    	mov    DWORD PTR ds:0xc002edb4,ebx
c000159a:	85 c0                	test   eax,eax
c000159c:	0f 84 92 00 00 00    	je     c0001634 <iALLOc+0x19b>
c00015a2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015a5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015a8:	83 e3 fc             	and    ebx,0xfffffffc
c00015ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015af:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015b4:	74 1e                	je     c00015d4 <iALLOc+0x13b>
c00015b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ba:	89 d9                	mov    ecx,ebx
c00015bc:	52                   	push   edx
c00015bd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015c1:	83 e9 04             	sub    ecx,0x4
c00015c4:	51                   	push   ecx
c00015c5:	6a 00                	push   0x0
c00015c7:	50                   	push   eax
c00015c8:	e8 9f f1 ff ff       	call   c000076c <memset>
c00015cd:	83 c4 10             	add    esp,0x10
c00015d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015d9:	75 14                	jne    c00015ef <iALLOc+0x156>
c00015db:	8d 04 37             	lea    eax,[edi+esi*1]
c00015de:	29 f3                	sub    ebx,esi
c00015e0:	8d 48 08             	lea    ecx,[eax+0x8]
c00015e3:	83 cb 01             	or     ebx,0x1
c00015e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015ed:	89 f3                	mov    ebx,esi
c00015ef:	31 c0                	xor    eax,eax
c00015f1:	4d                   	dec    ebp
c00015f2:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015f9:	39 c5                	cmp    ebp,eax
c00015fb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015fe:	74 2c                	je     c000162c <iALLOc+0x193>
c0001600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001604:	85 c9                	test   ecx,ecx
c0001606:	75 15                	jne    c000161d <iALLOc+0x184>
c0001608:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000160b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000160e:	b9 10 00 00 00       	mov    ecx,0x10
c0001613:	83 fe 0f             	cmp    esi,0xf
c0001616:	76 05                	jbe    c000161d <iALLOc+0x184>
c0001618:	83 e6 f8             	and    esi,0xfffffff8
c000161b:	89 f1                	mov    ecx,esi
c000161d:	89 ce                	mov    esi,ecx
c000161f:	29 cb                	sub    ebx,ecx
c0001621:	83 ce 01             	or     esi,0x1
c0001624:	40                   	inc    eax
c0001625:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001628:	01 cf                	add    edi,ecx
c000162a:	eb c6                	jmp    c00015f2 <iALLOc+0x159>
c000162c:	83 cb 01             	or     ebx,0x1
c000162f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001632:	eb 08                	jmp    c000163c <iALLOc+0x1a3>
c0001634:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000163c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001640:	83 c4 2c             	add    esp,0x2c
c0001643:	5b                   	pop    ebx
c0001644:	5e                   	pop    esi
c0001645:	5f                   	pop    edi
c0001646:	5d                   	pop    ebp
c0001647:	c3                   	ret    

c0001648 <dlrealloc>:
c0001648:	55                   	push   ebp
c0001649:	57                   	push   edi
c000164a:	56                   	push   esi
c000164b:	53                   	push   ebx
c000164c:	83 ec 1c             	sub    esp,0x1c
c000164f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0001653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001657:	85 f6                	test   esi,esi
c0001659:	75 10                	jne    c000166b <dlrealloc+0x23>
c000165b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000165f:	83 c4 1c             	add    esp,0x1c
c0001662:	5b                   	pop    ebx
c0001663:	5e                   	pop    esi
c0001664:	5f                   	pop    edi
c0001665:	5d                   	pop    ebp
c0001666:	e9 a0 fa ff ff       	jmp    c000110b <dlmalloc>
c000166b:	83 f8 df             	cmp    eax,0xffffffdf
c000166e:	76 07                	jbe    c0001677 <dlrealloc+0x2f>
c0001670:	31 f6                	xor    esi,esi
c0001672:	e9 68 01 00 00       	jmp    c00017df <dlrealloc+0x197>
c0001677:	83 c0 0b             	add    eax,0xb
c000167a:	bd 10 00 00 00       	mov    ebp,0x10
c000167f:	83 f8 0f             	cmp    eax,0xf
c0001682:	76 05                	jbe    c0001689 <dlrealloc+0x41>
c0001684:	83 e0 f8             	and    eax,0xfffffff8
c0001687:	89 c5                	mov    ebp,eax
c0001689:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000168c:	8d 56 f8             	lea    edx,[esi-0x8]
c000168f:	89 c3                	mov    ebx,eax
c0001691:	83 e3 fc             	and    ebx,0xfffffffc
c0001694:	a8 02                	test   al,0x2
c0001696:	75 d8                	jne    c0001670 <dlrealloc+0x28>
c0001698:	39 dd                	cmp    ebp,ebx
c000169a:	0f 86 02 01 00 00    	jbe    c00017a2 <dlrealloc+0x15a>
c00016a0:	8d 0c 1a             	lea    ecx,[edx+ebx*1]
c00016a3:	8b 79 04             	mov    edi,DWORD PTR [ecx+0x4]
c00016a6:	39 0d 8c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea8c,ecx
c00016ac:	75 33                	jne    c00016e1 <dlrealloc+0x99>
c00016ae:	83 e7 fc             	and    edi,0xfffffffc
c00016b1:	01 df                	add    edi,ebx
c00016b3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00016b7:	8d 7d 10             	lea    edi,[ebp+0x10]
c00016ba:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00016be:	77 49                	ja     c0001709 <dlrealloc+0xc1>
c00016c0:	01 ea                	add    edx,ebp
c00016c2:	83 e0 01             	and    eax,0x1
c00016c5:	09 e8                	or     eax,ebp
c00016c7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00016ca:	89 15 8c ea 02 c0    	mov    DWORD PTR ds:0xc002ea8c,edx
c00016d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00016d4:	29 e8                	sub    eax,ebp
c00016d6:	83 c8 01             	or     eax,0x1
c00016d9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016dc:	e9 fe 00 00 00       	jmp    c00017df <dlrealloc+0x197>
c00016e1:	89 f8                	mov    eax,edi
c00016e3:	83 e0 fe             	and    eax,0xfffffffe
c00016e6:	f6 44 01 04 01       	test   BYTE PTR [ecx+eax*1+0x4],0x1
c00016eb:	75 1c                	jne    c0001709 <dlrealloc+0xc1>
c00016ed:	83 e7 fc             	and    edi,0xfffffffc
c00016f0:	01 df                	add    edi,ebx
c00016f2:	39 fd                	cmp    ebp,edi
c00016f4:	77 13                	ja     c0001709 <dlrealloc+0xc1>
c00016f6:	8b 59 08             	mov    ebx,DWORD PTR [ecx+0x8]
c00016f9:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00016fc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00016ff:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
c0001702:	89 fb                	mov    ebx,edi
c0001704:	e9 99 00 00 00       	jmp    c00017a2 <dlrealloc+0x15a>
c0001709:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000170d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0001711:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001714:	83 ec 0c             	sub    esp,0xc
c0001717:	50                   	push   eax
c0001718:	e8 ee f9 ff ff       	call   c000110b <dlmalloc>
c000171d:	83 c4 10             	add    esp,0x10
c0001720:	89 c7                	mov    edi,eax
c0001722:	85 c0                	test   eax,eax
c0001724:	0f 84 46 ff ff ff    	je     c0001670 <dlrealloc+0x28>
c000172a:	8d 40 f8             	lea    eax,[eax-0x8]
c000172d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001731:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001735:	39 c1                	cmp    ecx,eax
c0001737:	75 0a                	jne    c0001743 <dlrealloc+0xfb>
c0001739:	8b 47 fc             	mov    eax,DWORD PTR [edi-0x4]
c000173c:	83 e0 fc             	and    eax,0xfffffffc
c000173f:	01 c3                	add    ebx,eax
c0001741:	eb 5f                	jmp    c00017a2 <dlrealloc+0x15a>
c0001743:	8d 4b fc             	lea    ecx,[ebx-0x4]
c0001746:	83 f9 27             	cmp    ecx,0x27
c0001749:	76 04                	jbe    c000174f <dlrealloc+0x107>
c000174b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000174d:	eb 43                	jmp    c0001792 <dlrealloc+0x14a>
c000174f:	8b 06                	mov    eax,DWORD PTR [esi]
c0001751:	83 f9 13             	cmp    ecx,0x13
c0001754:	89 07                	mov    DWORD PTR [edi],eax
c0001756:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001759:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000175c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000175f:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0001762:	76 2e                	jbe    c0001792 <dlrealloc+0x14a>
c0001764:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0001767:	83 f9 1b             	cmp    ecx,0x1b
c000176a:	89 47 0c             	mov    DWORD PTR [edi+0xc],eax
c000176d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0001770:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0001773:	76 1d                	jbe    c0001792 <dlrealloc+0x14a>
c0001775:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0001778:	83 f9 23             	cmp    ecx,0x23
c000177b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000177e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0001781:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0001784:	76 0c                	jbe    c0001792 <dlrealloc+0x14a>
c0001786:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0001789:	89 47 1c             	mov    DWORD PTR [edi+0x1c],eax
c000178c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000178f:	89 47 20             	mov    DWORD PTR [edi+0x20],eax
c0001792:	83 ec 0c             	sub    esp,0xc
c0001795:	56                   	push   esi
c0001796:	89 fe                	mov    esi,edi
c0001798:	e8 13 f6 ff ff       	call   c0000db0 <dlfree>
c000179d:	83 c4 10             	add    esp,0x10
c00017a0:	eb 3d                	jmp    c00017df <dlrealloc+0x197>
c00017a2:	89 df                	mov    edi,ebx
c00017a4:	8b 4e fc             	mov    ecx,DWORD PTR [esi-0x4]
c00017a7:	29 ef                	sub    edi,ebp
c00017a9:	83 e1 01             	and    ecx,0x1
c00017ac:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00017af:	83 ff 0f             	cmp    edi,0xf
c00017b2:	77 0b                	ja     c00017bf <dlrealloc+0x177>
c00017b4:	09 cb                	or     ebx,ecx
c00017b6:	89 5e fc             	mov    DWORD PTR [esi-0x4],ebx
c00017b9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bd:	eb 20                	jmp    c00017df <dlrealloc+0x197>
c00017bf:	01 ea                	add    edx,ebp
c00017c1:	83 ec 0c             	sub    esp,0xc
c00017c4:	09 cd                	or     ebp,ecx
c00017c6:	83 c2 08             	add    edx,0x8
c00017c9:	89 6e fc             	mov    DWORD PTR [esi-0x4],ebp
c00017cc:	83 cf 01             	or     edi,0x1
c00017cf:	89 7a fc             	mov    DWORD PTR [edx-0x4],edi
c00017d2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017d6:	52                   	push   edx
c00017d7:	e8 d4 f5 ff ff       	call   c0000db0 <dlfree>
c00017dc:	83 c4 10             	add    esp,0x10
c00017df:	83 c4 1c             	add    esp,0x1c
c00017e2:	89 f0                	mov    eax,esi
c00017e4:	5b                   	pop    ebx
c00017e5:	5e                   	pop    esi
c00017e6:	5f                   	pop    edi
c00017e7:	5d                   	pop    ebp
c00017e8:	c3                   	ret    

c00017e9 <dlmemalign>:
c00017e9:	55                   	push   ebp
c00017ea:	57                   	push   edi
c00017eb:	56                   	push   esi
c00017ec:	53                   	push   ebx
c00017ed:	83 ec 0c             	sub    esp,0xc
c00017f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017f8:	83 fa 08             	cmp    edx,0x8
c00017fb:	77 10                	ja     c000180d <dlmemalign+0x24>
c00017fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001801:	83 c4 0c             	add    esp,0xc
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	e9 fe f8 ff ff       	jmp    c000110b <dlmalloc>
c000180d:	bf 10 00 00 00       	mov    edi,0x10
c0001812:	83 fa 0f             	cmp    edx,0xf
c0001815:	76 13                	jbe    c000182a <dlmemalign+0x41>
c0001817:	8d 4a ff             	lea    ecx,[edx-0x1]
c000181a:	85 d1                	test   ecx,edx
c000181c:	75 04                	jne    c0001822 <dlmemalign+0x39>
c000181e:	89 d7                	mov    edi,edx
c0001820:	eb 08                	jmp    c000182a <dlmemalign+0x41>
c0001822:	39 d7                	cmp    edi,edx
c0001824:	73 04                	jae    c000182a <dlmemalign+0x41>
c0001826:	01 ff                	add    edi,edi
c0001828:	eb f8                	jmp    c0001822 <dlmemalign+0x39>
c000182a:	83 f8 df             	cmp    eax,0xffffffdf
c000182d:	76 07                	jbe    c0001836 <dlmemalign+0x4d>
c000182f:	31 c0                	xor    eax,eax
c0001831:	e9 ce 00 00 00       	jmp    c0001904 <dlmemalign+0x11b>
c0001836:	83 c0 0b             	add    eax,0xb
c0001839:	bd 10 00 00 00       	mov    ebp,0x10
c000183e:	83 f8 0f             	cmp    eax,0xf
c0001841:	76 05                	jbe    c0001848 <dlmemalign+0x5f>
c0001843:	83 e0 f8             	and    eax,0xfffffff8
c0001846:	89 c5                	mov    ebp,eax
c0001848:	83 ec 0c             	sub    esp,0xc
c000184b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000184f:	50                   	push   eax
c0001850:	e8 b6 f8 ff ff       	call   c000110b <dlmalloc>
c0001855:	83 c4 10             	add    esp,0x10
c0001858:	89 c1                	mov    ecx,eax
c000185a:	85 c0                	test   eax,eax
c000185c:	74 d1                	je     c000182f <dlmemalign+0x46>
c000185e:	31 d2                	xor    edx,edx
c0001860:	8d 70 f8             	lea    esi,[eax-0x8]
c0001863:	f7 f7                	div    edi
c0001865:	85 d2                	test   edx,edx
c0001867:	74 62                	je     c00018cb <dlmemalign+0xe2>
c0001869:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000186d:	89 f8                	mov    eax,edi
c000186f:	f7 d8                	neg    eax
c0001871:	21 c3                	and    ebx,eax
c0001873:	83 eb 08             	sub    ebx,0x8
c0001876:	89 d8                	mov    eax,ebx
c0001878:	29 f0                	sub    eax,esi
c000187a:	83 f8 0f             	cmp    eax,0xf
c000187d:	77 02                	ja     c0001881 <dlmemalign+0x98>
c000187f:	01 fb                	add    ebx,edi
c0001881:	89 d8                	mov    eax,ebx
c0001883:	29 f0                	sub    eax,esi
c0001885:	89 c6                	mov    esi,eax
c0001887:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000188a:	89 c2                	mov    edx,eax
c000188c:	83 e2 fc             	and    edx,0xfffffffc
c000188f:	29 f2                	sub    edx,esi
c0001891:	a8 02                	test   al,0x2
c0001893:	74 10                	je     c00018a5 <dlmemalign+0xbc>
c0001895:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001898:	83 ca 02             	or     edx,0x2
c000189b:	8d 43 08             	lea    eax,[ebx+0x8]
c000189e:	89 33                	mov    DWORD PTR [ebx],esi
c00018a0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018a3:	eb 5f                	jmp    c0001904 <dlmemalign+0x11b>
c00018a5:	83 ec 0c             	sub    esp,0xc
c00018a8:	89 d0                	mov    eax,edx
c00018aa:	83 c8 01             	or     eax,0x1
c00018ad:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018b0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018b5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b8:	83 e0 01             	and    eax,0x1
c00018bb:	09 f0                	or     eax,esi
c00018bd:	89 de                	mov    esi,ebx
c00018bf:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018c2:	51                   	push   ecx
c00018c3:	e8 e8 f4 ff ff       	call   c0000db0 <dlfree>
c00018c8:	83 c4 10             	add    esp,0x10
c00018cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ce:	a8 02                	test   al,0x2
c00018d0:	75 2f                	jne    c0001901 <dlmemalign+0x118>
c00018d2:	83 e0 fc             	and    eax,0xfffffffc
c00018d5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018d8:	39 c2                	cmp    edx,eax
c00018da:	73 25                	jae    c0001901 <dlmemalign+0x118>
c00018dc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018df:	83 ec 0c             	sub    esp,0xc
c00018e2:	29 e8                	sub    eax,ebp
c00018e4:	83 c2 08             	add    edx,0x8
c00018e7:	83 c8 01             	or     eax,0x1
c00018ea:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018ed:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f0:	83 e0 01             	and    eax,0x1
c00018f3:	09 c5                	or     ebp,eax
c00018f5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018f8:	52                   	push   edx
c00018f9:	e8 b2 f4 ff ff       	call   c0000db0 <dlfree>
c00018fe:	83 c4 10             	add    esp,0x10
c0001901:	8d 46 08             	lea    eax,[esi+0x8]
c0001904:	83 c4 0c             	add    esp,0xc
c0001907:	5b                   	pop    ebx
c0001908:	5e                   	pop    esi
c0001909:	5f                   	pop    edi
c000190a:	5d                   	pop    ebp
c000190b:	c3                   	ret    

c000190c <dlcalloc>:
c000190c:	53                   	push   ebx
c000190d:	83 ec 14             	sub    esp,0x14
c0001910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001914:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001919:	50                   	push   eax
c000191a:	e8 ec f7 ff ff       	call   c000110b <dlmalloc>
c000191f:	83 c4 10             	add    esp,0x10
c0001922:	89 c3                	mov    ebx,eax
c0001924:	85 c0                	test   eax,eax
c0001926:	74 77                	je     c000199f <dlcalloc+0x93>
c0001928:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000192b:	89 d0                	mov    eax,edx
c000192d:	83 e0 fc             	and    eax,0xfffffffc
c0001930:	80 e2 02             	and    dl,0x2
c0001933:	75 5a                	jne    c000198f <dlcalloc+0x83>
c0001935:	83 e8 04             	sub    eax,0x4
c0001938:	83 f8 27             	cmp    eax,0x27
c000193b:	76 03                	jbe    c0001940 <dlcalloc+0x34>
c000193d:	51                   	push   ecx
c000193e:	eb 53                	jmp    c0001993 <dlcalloc+0x87>
c0001940:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001946:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000194d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001954:	83 f8 13             	cmp    eax,0x13
c0001957:	76 46                	jbe    c000199f <dlcalloc+0x93>
c0001959:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001960:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001967:	83 f8 1b             	cmp    eax,0x1b
c000196a:	76 33                	jbe    c000199f <dlcalloc+0x93>
c000196c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001973:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000197a:	83 f8 23             	cmp    eax,0x23
c000197d:	76 20                	jbe    c000199f <dlcalloc+0x93>
c000197f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001986:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000198d:	eb 10                	jmp    c000199f <dlcalloc+0x93>
c000198f:	83 e8 08             	sub    eax,0x8
c0001992:	52                   	push   edx
c0001993:	50                   	push   eax
c0001994:	6a 00                	push   0x0
c0001996:	53                   	push   ebx
c0001997:	e8 d0 ed ff ff       	call   c000076c <memset>
c000199c:	83 c4 10             	add    esp,0x10
c000199f:	89 d8                	mov    eax,ebx
c00019a1:	83 c4 08             	add    esp,0x8
c00019a4:	5b                   	pop    ebx
c00019a5:	c3                   	ret    

c00019a6 <dlcfree>:
c00019a6:	e9 05 f4 ff ff       	jmp    c0000db0 <dlfree>

c00019ab <dlindependent_calloc>:
c00019ab:	83 ec 28             	sub    esp,0x28
c00019ae:	b9 03 00 00 00       	mov    ecx,0x3
c00019b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019bf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019c7:	e8 cd fa ff ff       	call   c0001499 <iALLOc>
c00019cc:	83 c4 2c             	add    esp,0x2c
c00019cf:	c3                   	ret    

c00019d0 <dlindependent_comalloc>:
c00019d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019d8:	31 c9                	xor    ecx,ecx
c00019da:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019e2:	e9 b2 fa ff ff       	jmp    c0001499 <iALLOc>

c00019e7 <dlvalloc>:
c00019e7:	83 ec 0c             	sub    esp,0xc
c00019ea:	83 3d 60 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea60,0x0
c00019f1:	75 0a                	jne    c00019fd <dlvalloc+0x16>
c00019f3:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c00019f8:	e8 cc f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c00019fd:	50                   	push   eax
c00019fe:	50                   	push   eax
c00019ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a03:	ff 35 bc ed 02 c0    	push   DWORD PTR ds:0xc002edbc
c0001a09:	e8 db fd ff ff       	call   c00017e9 <dlmemalign>
c0001a0e:	83 c4 1c             	add    esp,0x1c
c0001a11:	c3                   	ret    

c0001a12 <dlpvalloc>:
c0001a12:	83 ec 0c             	sub    esp,0xc
c0001a15:	83 3d 60 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea60,0x0
c0001a1c:	75 0a                	jne    c0001a28 <dlpvalloc+0x16>
c0001a1e:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0001a23:	e8 a1 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a28:	a1 bc ed 02 c0       	mov    eax,ds:0xc002edbc
c0001a2d:	89 c1                	mov    ecx,eax
c0001a2f:	52                   	push   edx
c0001a30:	f7 d9                	neg    ecx
c0001a32:	52                   	push   edx
c0001a33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a37:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a3b:	21 ca                	and    edx,ecx
c0001a3d:	52                   	push   edx
c0001a3e:	50                   	push   eax
c0001a3f:	e8 a5 fd ff ff       	call   c00017e9 <dlmemalign>
c0001a44:	83 c4 1c             	add    esp,0x1c
c0001a47:	c3                   	ret    

c0001a48 <dlmalloc_trim>:
c0001a48:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0001a4d:	e8 77 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a52:	31 c0                	xor    eax,eax
c0001a54:	c3                   	ret    

c0001a55 <dlmalloc_usable_size>:
c0001a55:	53                   	push   ebx
c0001a56:	31 c0                	xor    eax,eax
c0001a58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a5c:	85 c9                	test   ecx,ecx
c0001a5e:	74 24                	je     c0001a84 <dlmalloc_usable_size+0x2f>
c0001a60:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a63:	f6 c2 02             	test   dl,0x2
c0001a66:	74 08                	je     c0001a70 <dlmalloc_usable_size+0x1b>
c0001a68:	83 e2 fc             	and    edx,0xfffffffc
c0001a6b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a6e:	eb 14                	jmp    c0001a84 <dlmalloc_usable_size+0x2f>
c0001a70:	89 d3                	mov    ebx,edx
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	83 e3 fe             	and    ebx,0xfffffffe
c0001a77:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a7c:	74 06                	je     c0001a84 <dlmalloc_usable_size+0x2f>
c0001a7e:	83 e2 fc             	and    edx,0xfffffffc
c0001a81:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a84:	5b                   	pop    ebx
c0001a85:	c3                   	ret    

c0001a86 <dlmallinfo>:
c0001a86:	55                   	push   ebp
c0001a87:	57                   	push   edi
c0001a88:	56                   	push   esi
c0001a89:	53                   	push   ebx
c0001a8a:	83 ec 08             	sub    esp,0x8
c0001a8d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a91:	83 3d 8c ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea8c,0x0
c0001a98:	75 0a                	jne    c0001aa4 <dlmallinfo+0x1e>
c0001a9a:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0001a9f:	e8 25 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001aa4:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0001aa9:	31 ed                	xor    ebp,ebp
c0001aab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001aae:	31 c9                	xor    ecx,ecx
c0001ab0:	83 e0 fc             	and    eax,0xfffffffc
c0001ab3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ab7:	31 c0                	xor    eax,eax
c0001ab9:	8b 14 85 64 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd159c]
c0001ac0:	85 d2                	test   edx,edx
c0001ac2:	74 0e                	je     c0001ad2 <dlmallinfo+0x4c>
c0001ac4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ac7:	45                   	inc    ebp
c0001ac8:	83 e6 fc             	and    esi,0xfffffffc
c0001acb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ace:	01 f1                	add    ecx,esi
c0001ad0:	eb ee                	jmp    c0001ac0 <dlmallinfo+0x3a>
c0001ad2:	40                   	inc    eax
c0001ad3:	83 f8 0a             	cmp    eax,0xa
c0001ad6:	75 e1                	jne    c0001ab9 <dlmallinfo+0x33>
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ae3:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ae6:	b8 94 ea 02 c0       	mov    eax,0xc002ea94
c0001aeb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aee:	39 f0                	cmp    eax,esi
c0001af0:	74 10                	je     c0001b02 <dlmallinfo+0x7c>
c0001af2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001af5:	ff 04 24             	inc    DWORD PTR [esp]
c0001af8:	83 e7 fc             	and    edi,0xfffffffc
c0001afb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001afe:	01 fa                	add    edx,edi
c0001b00:	eb ec                	jmp    c0001aee <dlmallinfo+0x68>
c0001b02:	83 c0 08             	add    eax,0x8
c0001b05:	3d 8c ed 02 c0       	cmp    eax,0xc002ed8c
c0001b0a:	75 df                	jne    c0001aeb <dlmallinfo+0x65>
c0001b0c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b0f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b12:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b15:	a1 c8 ed 02 c0       	mov    eax,ds:0xc002edc8
c0001b1a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b1d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b1f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b22:	8b 35 b0 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edb0
c0001b28:	29 d0                	sub    eax,edx
c0001b2a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b2d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b30:	8b 35 c4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edc4
c0001b36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b3a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b3d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b40:	8b 35 d4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edd4
c0001b46:	89 d8                	mov    eax,ebx
c0001b48:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b4b:	83 c4 08             	add    esp,0x8
c0001b4e:	5b                   	pop    ebx
c0001b4f:	5e                   	pop    esi
c0001b50:	5f                   	pop    edi
c0001b51:	5d                   	pop    ebp
c0001b52:	c2 04 00             	ret    0x4

c0001b55 <dlmalloc_stats>:
c0001b55:	83 ec 30             	sub    esp,0x30
c0001b58:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b5c:	50                   	push   eax
c0001b5d:	e8 24 ff ff ff       	call   c0001a86 <dlmallinfo>
c0001b62:	83 c4 30             	add    esp,0x30
c0001b65:	c3                   	ret    

c0001b66 <dlmallopt>:
c0001b66:	56                   	push   esi
c0001b67:	b8 60 ea 02 c0       	mov    eax,0xc002ea60
c0001b6c:	53                   	push   ebx
c0001b6d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b75:	e8 4f f1 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001b7a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b7d:	83 f8 05             	cmp    eax,0x5
c0001b80:	77 67                	ja     c0001be9 <dlmallopt+0x83>
c0001b82:	ff 24 85 44 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd63bc]
c0001b89:	83 fb 50             	cmp    ebx,0x50
c0001b8c:	77 5b                	ja     c0001be9 <dlmallopt+0x83>
c0001b8e:	ba 08 00 00 00       	mov    edx,0x8
c0001b93:	85 db                	test   ebx,ebx
c0001b95:	74 12                	je     c0001ba9 <dlmallopt+0x43>
c0001b97:	83 c3 0b             	add    ebx,0xb
c0001b9a:	ba 10 00 00 00       	mov    edx,0x10
c0001b9f:	83 fb 0f             	cmp    ebx,0xf
c0001ba2:	76 05                	jbe    c0001ba9 <dlmallopt+0x43>
c0001ba4:	89 da                	mov    edx,ebx
c0001ba6:	83 e2 f8             	and    edx,0xfffffff8
c0001ba9:	a1 60 ea 02 c0       	mov    eax,ds:0xc002ea60
c0001bae:	83 e0 03             	and    eax,0x3
c0001bb1:	09 d0                	or     eax,edx
c0001bb3:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0001bb8:	eb 31                	jmp    c0001beb <dlmallopt+0x85>
c0001bba:	89 1d a4 ed 02 c0    	mov    DWORD PTR ds:0xc002eda4,ebx
c0001bc0:	eb 06                	jmp    c0001bc8 <dlmallopt+0x62>
c0001bc2:	89 1d a8 ed 02 c0    	mov    DWORD PTR ds:0xc002eda8,ebx
c0001bc8:	be 01 00 00 00       	mov    esi,0x1
c0001bcd:	eb 1c                	jmp    c0001beb <dlmallopt+0x85>
c0001bcf:	89 1d ac ed 02 c0    	mov    DWORD PTR ds:0xc002edac,ebx
c0001bd5:	eb f1                	jmp    c0001bc8 <dlmallopt+0x62>
c0001bd7:	31 f6                	xor    esi,esi
c0001bd9:	85 db                	test   ebx,ebx
c0001bdb:	75 0e                	jne    c0001beb <dlmallopt+0x85>
c0001bdd:	c7 05 b4 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002edb4,0x0
c0001be7:	eb df                	jmp    c0001bc8 <dlmallopt+0x62>
c0001be9:	31 f6                	xor    esi,esi
c0001beb:	89 f0                	mov    eax,esi
c0001bed:	5b                   	pop    ebx
c0001bee:	5e                   	pop    esi
c0001bef:	c3                   	ret    

c0001bf0 <disk_status>:
c0001bf0:	31 c0                	xor    eax,eax
c0001bf2:	c3                   	ret    

c0001bf3 <disk_initialize>:
c0001bf3:	31 c0                	xor    eax,eax
c0001bf5:	c3                   	ret    

c0001bf6 <disk_read>:
c0001bf6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bfb:	0f b6 04 85 40 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdac0]
c0001c03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c07:	e9 22 f9 01 00       	jmp    c002152e <fatWrapperReadDisk>

c0001c0c <disk_write>:
c0001c0c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c11:	0f b6 04 85 40 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdac0]
c0001c19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c1d:	e9 53 f9 01 00       	jmp    c0021575 <fatWrapperWriteDisk>

c0001c22 <disk_ioctl>:
c0001c22:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c2b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c30:	0f b6 04 85 40 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdac0]
c0001c38:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3c:	e9 7b f9 01 00       	jmp    c00215bc <fatWrapperIoctl>

c0001c41 <ld_word>:
c0001c41:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c45:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c48:	c1 e2 08             	shl    edx,0x8
c0001c4b:	09 d0                	or     eax,edx
c0001c4d:	c3                   	ret    

c0001c4e <ld_dword>:
c0001c4e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c52:	89 d1                	mov    ecx,edx
c0001c54:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c58:	c1 e1 08             	shl    ecx,0x8
c0001c5b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c5e:	09 ca                	or     edx,ecx
c0001c60:	c1 e2 08             	shl    edx,0x8
c0001c63:	09 d0                	or     eax,edx
c0001c65:	c3                   	ret    

c0001c66 <ld_qword>:
c0001c66:	57                   	push   edi
c0001c67:	56                   	push   esi
c0001c68:	53                   	push   ebx
c0001c69:	31 db                	xor    ebx,ebx
c0001c6b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c6e:	89 df                	mov    edi,ebx
c0001c70:	89 ce                	mov    esi,ecx
c0001c72:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c76:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7a:	c1 e6 08             	shl    esi,0x8
c0001c7d:	09 f2                	or     edx,esi
c0001c7f:	89 d6                	mov    esi,edx
c0001c81:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c85:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c89:	c1 e6 08             	shl    esi,0x8
c0001c8c:	09 f2                	or     edx,esi
c0001c8e:	89 d6                	mov    esi,edx
c0001c90:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c94:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c9b:	c1 e6 08             	shl    esi,0x8
c0001c9e:	89 fb                	mov    ebx,edi
c0001ca0:	09 f2                	or     edx,esi
c0001ca2:	89 d1                	mov    ecx,edx
c0001ca4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ca8:	c1 e1 08             	shl    ecx,0x8
c0001cab:	89 da                	mov    edx,ebx
c0001cad:	09 c8                	or     eax,ecx
c0001caf:	5b                   	pop    ebx
c0001cb0:	5e                   	pop    esi
c0001cb1:	5f                   	pop    edi
c0001cb2:	c3                   	ret    

c0001cb3 <st_word>:
c0001cb3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cb6:	c3                   	ret    

c0001cb7 <st_dword>:
c0001cb7:	89 10                	mov    DWORD PTR [eax],edx
c0001cb9:	c3                   	ret    

c0001cba <st_qword>:
c0001cba:	89 10                	mov    DWORD PTR [eax],edx
c0001cbc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cbf:	c3                   	ret    

c0001cc0 <mem_cpy>:
c0001cc0:	85 c9                	test   ecx,ecx
c0001cc2:	74 10                	je     c0001cd4 <mem_cpy+0x14>
c0001cc4:	57                   	push   edi
c0001cc5:	01 c1                	add    ecx,eax
c0001cc7:	56                   	push   esi
c0001cc8:	89 c7                	mov    edi,eax
c0001cca:	89 d6                	mov    esi,edx
c0001ccc:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ccd:	39 f9                	cmp    ecx,edi
c0001ccf:	75 fb                	jne    c0001ccc <mem_cpy+0xc>
c0001cd1:	5e                   	pop    esi
c0001cd2:	5f                   	pop    edi
c0001cd3:	c3                   	ret    
c0001cd4:	c3                   	ret    

c0001cd5 <mem_set>:
c0001cd5:	01 c1                	add    ecx,eax
c0001cd7:	40                   	inc    eax
c0001cd8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cdb:	39 c8                	cmp    eax,ecx
c0001cdd:	75 f8                	jne    c0001cd7 <mem_set+0x2>
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cmp>:
c0001ce0:	57                   	push   edi
c0001ce1:	56                   	push   esi
c0001ce2:	89 c6                	mov    esi,eax
c0001ce4:	53                   	push   ebx
c0001ce5:	46                   	inc    esi
c0001ce6:	42                   	inc    edx
c0001ce7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001ceb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cef:	29 fb                	sub    ebx,edi
c0001cf1:	89 cf                	mov    edi,ecx
c0001cf3:	29 f7                	sub    edi,esi
c0001cf5:	01 c7                	add    edi,eax
c0001cf7:	74 04                	je     c0001cfd <mem_cmp+0x1d>
c0001cf9:	85 db                	test   ebx,ebx
c0001cfb:	74 e8                	je     c0001ce5 <mem_cmp+0x5>
c0001cfd:	89 d8                	mov    eax,ebx
c0001cff:	5b                   	pop    ebx
c0001d00:	5e                   	pop    esi
c0001d01:	5f                   	pop    edi
c0001d02:	c3                   	ret    

c0001d03 <chk_chr>:
c0001d03:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d06:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d09:	74 07                	je     c0001d12 <chk_chr+0xf>
c0001d0b:	39 d1                	cmp    ecx,edx
c0001d0d:	74 03                	je     c0001d12 <chk_chr+0xf>
c0001d0f:	40                   	inc    eax
c0001d10:	eb f1                	jmp    c0001d03 <chk_chr>
c0001d12:	89 c8                	mov    eax,ecx
c0001d14:	c3                   	ret    

c0001d15 <dbc_1st>:
c0001d15:	31 c0                	xor    eax,eax
c0001d17:	c3                   	ret    

c0001d18 <dbc_2nd>:
c0001d18:	31 c0                	xor    eax,eax
c0001d1a:	c3                   	ret    

c0001d1b <tchar2uni>:
c0001d1b:	57                   	push   edi
c0001d1c:	89 c7                	mov    edi,eax
c0001d1e:	56                   	push   esi
c0001d1f:	53                   	push   ebx
c0001d20:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d22:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d24:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d27:	84 c9                	test   cl,cl
c0001d29:	78 0a                	js     c0001d35 <tchar2uni+0x1a>
c0001d2b:	0f b6 d1             	movzx  edx,cl
c0001d2e:	89 f3                	mov    ebx,esi
c0001d30:	e9 9f 00 00 00       	jmp    c0001dd4 <tchar2uni+0xb9>
c0001d35:	88 ca                	mov    dl,cl
c0001d37:	83 e2 e0             	and    edx,0xffffffe0
c0001d3a:	80 fa c0             	cmp    dl,0xc0
c0001d3d:	75 0c                	jne    c0001d4b <tchar2uni+0x30>
c0001d3f:	89 ca                	mov    edx,ecx
c0001d41:	b9 01 00 00 00       	mov    ecx,0x1
c0001d46:	83 e2 1f             	and    edx,0x1f
c0001d49:	eb 2e                	jmp    c0001d79 <tchar2uni+0x5e>
c0001d4b:	88 ca                	mov    dl,cl
c0001d4d:	83 e2 f0             	and    edx,0xfffffff0
c0001d50:	80 fa e0             	cmp    dl,0xe0
c0001d53:	75 0c                	jne    c0001d61 <tchar2uni+0x46>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 02 00 00 00       	mov    ecx,0x2
c0001d5c:	83 e2 0f             	and    edx,0xf
c0001d5f:	eb 18                	jmp    c0001d79 <tchar2uni+0x5e>
c0001d61:	88 ca                	mov    dl,cl
c0001d63:	83 e2 f8             	and    edx,0xfffffff8
c0001d66:	88 d0                	mov    al,dl
c0001d68:	83 ca ff             	or     edx,0xffffffff
c0001d6b:	3c f0                	cmp    al,0xf0
c0001d6d:	75 6c                	jne    c0001ddb <tchar2uni+0xc0>
c0001d6f:	89 ca                	mov    edx,ecx
c0001d71:	b9 03 00 00 00       	mov    ecx,0x3
c0001d76:	83 e2 07             	and    edx,0x7
c0001d79:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d7d:	46                   	inc    esi
c0001d7e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d81:	88 c8                	mov    al,cl
c0001d83:	83 e0 c0             	and    eax,0xffffffc0
c0001d86:	3c 80                	cmp    al,0x80
c0001d88:	75 4e                	jne    c0001dd8 <tchar2uni+0xbd>
c0001d8a:	c1 e2 06             	shl    edx,0x6
c0001d8d:	83 e1 3f             	and    ecx,0x3f
c0001d90:	09 ca                	or     edx,ecx
c0001d92:	39 de                	cmp    esi,ebx
c0001d94:	75 e7                	jne    c0001d7d <tchar2uni+0x62>
c0001d96:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d99:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d9f:	77 37                	ja     c0001dd8 <tchar2uni+0xbd>
c0001da1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001da7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dad:	76 29                	jbe    c0001dd8 <tchar2uni+0xbd>
c0001daf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001db5:	76 1d                	jbe    c0001dd4 <tchar2uni+0xb9>
c0001db7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001dbd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001dc3:	c1 e1 06             	shl    ecx,0x6
c0001dc6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dcc:	09 ca                	or     edx,ecx
c0001dce:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dd4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dd6:	eb 03                	jmp    c0001ddb <tchar2uni+0xc0>
c0001dd8:	83 ca ff             	or     edx,0xffffffff
c0001ddb:	5b                   	pop    ebx
c0001ddc:	89 d0                	mov    eax,edx
c0001dde:	5e                   	pop    esi
c0001ddf:	5f                   	pop    edi
c0001de0:	c3                   	ret    

c0001de1 <put_utf>:
c0001de1:	53                   	push   ebx
c0001de2:	83 f8 7f             	cmp    eax,0x7f
c0001de5:	89 c3                	mov    ebx,eax
c0001de7:	b0 00                	mov    al,0x0
c0001de9:	77 11                	ja     c0001dfc <put_utf+0x1b>
c0001deb:	85 c9                	test   ecx,ecx
c0001ded:	0f 84 e5 00 00 00    	je     c0001ed8 <put_utf+0xf7>
c0001df3:	88 1a                	mov    BYTE PTR [edx],bl
c0001df5:	b0 01                	mov    al,0x1
c0001df7:	e9 dc 00 00 00       	jmp    c0001ed8 <put_utf+0xf7>
c0001dfc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e02:	77 23                	ja     c0001e27 <put_utf+0x46>
c0001e04:	83 f9 01             	cmp    ecx,0x1
c0001e07:	0f 86 cb 00 00 00    	jbe    c0001ed8 <put_utf+0xf7>
c0001e0d:	89 d8                	mov    eax,ebx
c0001e0f:	83 e3 3f             	and    ebx,0x3f
c0001e12:	c1 e8 06             	shr    eax,0x6
c0001e15:	83 cb 80             	or     ebx,0xffffff80
c0001e18:	83 c8 c0             	or     eax,0xffffffc0
c0001e1b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e1e:	88 02                	mov    BYTE PTR [edx],al
c0001e20:	b0 02                	mov    al,0x2
c0001e22:	e9 b1 00 00 00       	jmp    c0001ed8 <put_utf+0xf7>
c0001e27:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e2d:	77 40                	ja     c0001e6f <put_utf+0x8e>
c0001e2f:	83 f9 02             	cmp    ecx,0x2
c0001e32:	0f 86 a0 00 00 00    	jbe    c0001ed8 <put_utf+0xf7>
c0001e38:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e3e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e44:	0f 86 8e 00 00 00    	jbe    c0001ed8 <put_utf+0xf7>
c0001e4a:	89 d8                	mov    eax,ebx
c0001e4c:	c1 e8 0c             	shr    eax,0xc
c0001e4f:	83 c8 e0             	or     eax,0xffffffe0
c0001e52:	88 02                	mov    BYTE PTR [edx],al
c0001e54:	89 d8                	mov    eax,ebx
c0001e56:	83 e3 3f             	and    ebx,0x3f
c0001e59:	c1 e8 06             	shr    eax,0x6
c0001e5c:	83 cb 80             	or     ebx,0xffffff80
c0001e5f:	83 e0 3f             	and    eax,0x3f
c0001e62:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e65:	83 c8 80             	or     eax,0xffffff80
c0001e68:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e6b:	b0 03                	mov    al,0x3
c0001e6d:	eb 69                	jmp    c0001ed8 <put_utf+0xf7>
c0001e6f:	83 f9 03             	cmp    ecx,0x3
c0001e72:	76 64                	jbe    c0001ed8 <put_utf+0xf7>
c0001e74:	89 d9                	mov    ecx,ebx
c0001e76:	0f b7 c3             	movzx  eax,bx
c0001e79:	66 31 c9             	xor    cx,cx
c0001e7c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e82:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e88:	c1 e9 06             	shr    ecx,0x6
c0001e8b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e91:	77 43                	ja     c0001ed6 <put_utf+0xf5>
c0001e93:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e99:	77 3b                	ja     c0001ed6 <put_utf+0xf5>
c0001e9b:	09 cb                	or     ebx,ecx
c0001e9d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ea3:	89 d8                	mov    eax,ebx
c0001ea5:	c1 e8 12             	shr    eax,0x12
c0001ea8:	83 c8 f0             	or     eax,0xfffffff0
c0001eab:	88 02                	mov    BYTE PTR [edx],al
c0001ead:	89 d8                	mov    eax,ebx
c0001eaf:	c1 e8 0c             	shr    eax,0xc
c0001eb2:	83 e0 3f             	and    eax,0x3f
c0001eb5:	83 c8 80             	or     eax,0xffffff80
c0001eb8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ebb:	89 d8                	mov    eax,ebx
c0001ebd:	83 e3 3f             	and    ebx,0x3f
c0001ec0:	c1 e8 06             	shr    eax,0x6
c0001ec3:	83 cb 80             	or     ebx,0xffffff80
c0001ec6:	83 e0 3f             	and    eax,0x3f
c0001ec9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ecc:	83 c8 80             	or     eax,0xffffff80
c0001ecf:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ed2:	b0 04                	mov    al,0x4
c0001ed4:	eb 02                	jmp    c0001ed8 <put_utf+0xf7>
c0001ed6:	31 c0                	xor    eax,eax
c0001ed8:	5b                   	pop    ebx
c0001ed9:	c3                   	ret    

c0001eda <clst2sect>:
c0001eda:	89 c1                	mov    ecx,eax
c0001edc:	83 ea 02             	sub    edx,0x2
c0001edf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ee2:	83 e8 02             	sub    eax,0x2
c0001ee5:	39 d0                	cmp    eax,edx
c0001ee7:	76 0d                	jbe    c0001ef6 <clst2sect+0x1c>
c0001ee9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001eed:	f7 e2                	mul    edx
c0001eef:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ef2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001ef5:	c3                   	ret    
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	31 d2                	xor    edx,edx
c0001efa:	c3                   	ret    

c0001efb <clmt_clust>:
c0001efb:	57                   	push   edi
c0001efc:	89 cf                	mov    edi,ecx
c0001efe:	56                   	push   esi
c0001eff:	89 d6                	mov    esi,edx
c0001f01:	53                   	push   ebx
c0001f02:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f06:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f09:	89 f2                	mov    edx,esi
c0001f0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f0d:	c1 ef 09             	shr    edi,0x9
c0001f10:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f14:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f17:	89 f9                	mov    ecx,edi
c0001f19:	31 ff                	xor    edi,edi
c0001f1b:	57                   	push   edi
c0001f1c:	56                   	push   esi
c0001f1d:	51                   	push   ecx
c0001f1e:	52                   	push   edx
c0001f1f:	e8 c0 52 02 00       	call   c00271e4 <__udivdi3>
c0001f24:	83 c4 10             	add    esp,0x10
c0001f27:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f29:	85 d2                	test   edx,edx
c0001f2b:	74 10                	je     c0001f3d <clmt_clust+0x42>
c0001f2d:	39 d0                	cmp    eax,edx
c0001f2f:	72 07                	jb     c0001f38 <clmt_clust+0x3d>
c0001f31:	29 d0                	sub    eax,edx
c0001f33:	83 c3 08             	add    ebx,0x8
c0001f36:	eb ef                	jmp    c0001f27 <clmt_clust+0x2c>
c0001f38:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f3b:	89 c2                	mov    edx,eax
c0001f3d:	5b                   	pop    ebx
c0001f3e:	89 d0                	mov    eax,edx
c0001f40:	5e                   	pop    esi
c0001f41:	5f                   	pop    edi
c0001f42:	c3                   	ret    

c0001f43 <pick_lfn>:
c0001f43:	55                   	push   ebp
c0001f44:	57                   	push   edi
c0001f45:	56                   	push   esi
c0001f46:	89 d6                	mov    esi,edx
c0001f48:	53                   	push   ebx
c0001f49:	89 c3                	mov    ebx,eax
c0001f4b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f4e:	e8 ee fc ff ff       	call   c0001c41 <ld_word>
c0001f53:	66 85 c0             	test   ax,ax
c0001f56:	74 04                	je     c0001f5c <pick_lfn+0x19>
c0001f58:	31 c0                	xor    eax,eax
c0001f5a:	eb 5c                	jmp    c0001fb8 <pick_lfn+0x75>
c0001f5c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f5f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f64:	83 e1 bf             	and    ecx,0xffffffbf
c0001f67:	31 ff                	xor    edi,edi
c0001f69:	49                   	dec    ecx
c0001f6a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f6d:	0f b6 87 60 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd62a0]
c0001f74:	01 f0                	add    eax,esi
c0001f76:	e8 c6 fc ff ff       	call   c0001c41 <ld_word>
c0001f7b:	66 85 ed             	test   bp,bp
c0001f7e:	74 11                	je     c0001f91 <pick_lfn+0x4e>
c0001f80:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f86:	77 d0                	ja     c0001f58 <pick_lfn+0x15>
c0001f88:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f8c:	89 c5                	mov    ebp,eax
c0001f8e:	41                   	inc    ecx
c0001f8f:	eb 04                	jmp    c0001f95 <pick_lfn+0x52>
c0001f91:	66 40                	inc    ax
c0001f93:	75 c3                	jne    c0001f58 <pick_lfn+0x15>
c0001f95:	47                   	inc    edi
c0001f96:	83 ff 0d             	cmp    edi,0xd
c0001f99:	75 d2                	jne    c0001f6d <pick_lfn+0x2a>
c0001f9b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f9e:	74 13                	je     c0001fb3 <pick_lfn+0x70>
c0001fa0:	66 85 ed             	test   bp,bp
c0001fa3:	74 0e                	je     c0001fb3 <pick_lfn+0x70>
c0001fa5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fab:	77 ab                	ja     c0001f58 <pick_lfn+0x15>
c0001fad:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fb3:	b8 01 00 00 00       	mov    eax,0x1
c0001fb8:	5b                   	pop    ebx
c0001fb9:	5e                   	pop    esi
c0001fba:	5f                   	pop    edi
c0001fbb:	5d                   	pop    ebp
c0001fbc:	c3                   	ret    

c0001fbd <put_lfn>:
c0001fbd:	55                   	push   ebp
c0001fbe:	31 ed                	xor    ebp,ebp
c0001fc0:	57                   	push   edi
c0001fc1:	89 d7                	mov    edi,edx
c0001fc3:	56                   	push   esi
c0001fc4:	31 f6                	xor    esi,esi
c0001fc6:	53                   	push   ebx
c0001fc7:	83 ec 08             	sub    esp,0x8
c0001fca:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fcd:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fd5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fdb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fde:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fe1:	31 d2                	xor    edx,edx
c0001fe3:	e8 cb fc ff ff       	call   c0001cb3 <st_word>
c0001fe8:	0f b6 d9             	movzx  ebx,cl
c0001feb:	4b                   	dec    ebx
c0001fec:	6b db 0d             	imul   ebx,ebx,0xd
c0001fef:	66 83 fe ff          	cmp    si,0xffff
c0001ff3:	74 08                	je     c0001ffd <put_lfn+0x40>
c0001ff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001ff8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001ffc:	43                   	inc    ebx
c0001ffd:	0f b6 85 60 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd62a0]
c0002004:	0f b7 d6             	movzx  edx,si
c0002007:	01 f8                	add    eax,edi
c0002009:	e8 a5 fc ff ff       	call   c0001cb3 <st_word>
c000200e:	66 85 f6             	test   si,si
c0002011:	75 03                	jne    c0002016 <put_lfn+0x59>
c0002013:	83 ce ff             	or     esi,0xffffffff
c0002016:	45                   	inc    ebp
c0002017:	83 fd 0d             	cmp    ebp,0xd
c000201a:	75 d3                	jne    c0001fef <put_lfn+0x32>
c000201c:	66 46                	inc    si
c000201e:	74 0a                	je     c000202a <put_lfn+0x6d>
c0002020:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002023:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002028:	75 09                	jne    c0002033 <put_lfn+0x76>
c000202a:	88 c8                	mov    al,cl
c000202c:	83 c8 40             	or     eax,0x40
c000202f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002033:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002037:	88 07                	mov    BYTE PTR [edi],al
c0002039:	83 c4 08             	add    esp,0x8
c000203c:	5b                   	pop    ebx
c000203d:	5e                   	pop    esi
c000203e:	5f                   	pop    edi
c000203f:	5d                   	pop    ebp
c0002040:	c3                   	ret    

c0002041 <gen_numname>:
c0002041:	57                   	push   edi
c0002042:	89 cf                	mov    edi,ecx
c0002044:	56                   	push   esi
c0002045:	b9 0b 00 00 00       	mov    ecx,0xb
c000204a:	53                   	push   ebx
c000204b:	89 c6                	mov    esi,eax
c000204d:	83 ec 10             	sub    esp,0x10
c0002050:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002054:	e8 67 fc ff ff       	call   c0001cc0 <mem_cpy>
c0002059:	83 fb 05             	cmp    ebx,0x5
c000205c:	76 2d                	jbe    c000208b <gen_numname+0x4a>
c000205e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002061:	66 85 c0             	test   ax,ax
c0002064:	74 25                	je     c000208b <gen_numname+0x4a>
c0002066:	83 c7 02             	add    edi,0x2
c0002069:	ba 10 00 00 00       	mov    edx,0x10
c000206e:	01 db                	add    ebx,ebx
c0002070:	89 c1                	mov    ecx,eax
c0002072:	66 d1 e8             	shr    ax,1
c0002075:	83 e1 01             	and    ecx,0x1
c0002078:	01 cb                	add    ebx,ecx
c000207a:	0f ba e3 10          	bt     ebx,0x10
c000207e:	73 06                	jae    c0002086 <gen_numname+0x45>
c0002080:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002086:	4a                   	dec    edx
c0002087:	75 e5                	jne    c000206e <gen_numname+0x2d>
c0002089:	eb d3                	jmp    c000205e <gen_numname+0x1d>
c000208b:	b8 07 00 00 00       	mov    eax,0x7
c0002090:	88 d9                	mov    cl,bl
c0002092:	83 e1 0f             	and    ecx,0xf
c0002095:	8d 51 30             	lea    edx,[ecx+0x30]
c0002098:	80 fa 39             	cmp    dl,0x39
c000209b:	76 03                	jbe    c00020a0 <gen_numname+0x5f>
c000209d:	8d 51 37             	lea    edx,[ecx+0x37]
c00020a0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020a3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020a7:	89 da                	mov    edx,ebx
c00020a9:	c1 ea 04             	shr    edx,0x4
c00020ac:	83 fb 0f             	cmp    ebx,0xf
c00020af:	76 06                	jbe    c00020b7 <gen_numname+0x76>
c00020b1:	89 c8                	mov    eax,ecx
c00020b3:	89 d3                	mov    ebx,edx
c00020b5:	eb d9                	jmp    c0002090 <gen_numname+0x4f>
c00020b7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020bc:	31 d2                	xor    edx,edx
c00020be:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020c1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020c4:	39 ca                	cmp    edx,ecx
c00020c6:	73 18                	jae    c00020e0 <gen_numname+0x9f>
c00020c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020cb:	3c 20                	cmp    al,0x20
c00020cd:	74 11                	je     c00020e0 <gen_numname+0x9f>
c00020cf:	e8 41 fc ff ff       	call   c0001d15 <dbc_1st>
c00020d4:	85 c0                	test   eax,eax
c00020d6:	74 05                	je     c00020dd <gen_numname+0x9c>
c00020d8:	39 d3                	cmp    ebx,edx
c00020da:	74 04                	je     c00020e0 <gen_numname+0x9f>
c00020dc:	42                   	inc    edx
c00020dd:	42                   	inc    edx
c00020de:	eb e1                	jmp    c00020c1 <gen_numname+0x80>
c00020e0:	b0 20                	mov    al,0x20
c00020e2:	83 f9 07             	cmp    ecx,0x7
c00020e5:	77 05                	ja     c00020ec <gen_numname+0xab>
c00020e7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020eb:	41                   	inc    ecx
c00020ec:	42                   	inc    edx
c00020ed:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020f1:	83 fa 07             	cmp    edx,0x7
c00020f4:	76 ea                	jbe    c00020e0 <gen_numname+0x9f>
c00020f6:	83 c4 10             	add    esp,0x10
c00020f9:	5b                   	pop    ebx
c00020fa:	5e                   	pop    esi
c00020fb:	5f                   	pop    edi
c00020fc:	c3                   	ret    

c00020fd <sum_sfn>:
c00020fd:	31 c9                	xor    ecx,ecx
c00020ff:	31 d2                	xor    edx,edx
c0002101:	d0 ca                	ror    dl,1
c0002103:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002106:	41                   	inc    ecx
c0002107:	83 f9 0b             	cmp    ecx,0xb
c000210a:	75 f5                	jne    c0002101 <sum_sfn+0x4>
c000210c:	88 d0                	mov    al,dl
c000210e:	c3                   	ret    

c000210f <xdir_sum>:
c000210f:	56                   	push   esi
c0002110:	31 c9                	xor    ecx,ecx
c0002112:	53                   	push   ebx
c0002113:	31 d2                	xor    edx,edx
c0002115:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002119:	43                   	inc    ebx
c000211a:	c1 e3 05             	shl    ebx,0x5
c000211d:	83 fa 02             	cmp    edx,0x2
c0002120:	74 0b                	je     c000212d <xdir_sum+0x1e>
c0002122:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002126:	66 d1 c9             	ror    cx,1
c0002129:	01 f1                	add    ecx,esi
c000212b:	eb 05                	jmp    c0002132 <xdir_sum+0x23>
c000212d:	ba 03 00 00 00       	mov    edx,0x3
c0002132:	42                   	inc    edx
c0002133:	39 d3                	cmp    ebx,edx
c0002135:	77 e6                	ja     c000211d <xdir_sum+0xe>
c0002137:	89 c8                	mov    eax,ecx
c0002139:	5b                   	pop    ebx
c000213a:	5e                   	pop    esi
c000213b:	c3                   	ret    

c000213c <xsum32>:
c000213c:	d1 ca                	ror    edx,1
c000213e:	0f b6 c0             	movzx  eax,al
c0002141:	01 d0                	add    eax,edx
c0002143:	c3                   	ret    

c0002144 <get_xfileinfo>:
c0002144:	55                   	push   ebp
c0002145:	31 c9                	xor    ecx,ecx
c0002147:	57                   	push   edi
c0002148:	bd 40 00 00 00       	mov    ebp,0x40
c000214d:	56                   	push   esi
c000214e:	31 ff                	xor    edi,edi
c0002150:	53                   	push   ebx
c0002151:	89 c6                	mov    esi,eax
c0002153:	83 ec 0c             	sub    esp,0xc
c0002156:	89 d3                	mov    ebx,edx
c0002158:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000215f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002163:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002166:	76 6d                	jbe    c00021d5 <get_xfileinfo+0x91>
c0002168:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000216e:	76 0b                	jbe    c000217b <get_xfileinfo+0x37>
c0002170:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002174:	bf 01 00 00 00       	mov    edi,0x1
c0002179:	eb 63                	jmp    c00021de <get_xfileinfo+0x9a>
c000217b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002181:	75 03                	jne    c0002186 <get_xfileinfo+0x42>
c0002183:	83 c5 02             	add    ebp,0x2
c0002186:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0002189:	83 c5 02             	add    ebp,0x2
c000218c:	e8 b0 fa ff ff       	call   c0001c41 <ld_word>
c0002191:	ff 04 24             	inc    DWORD PTR [esp]
c0002194:	66 85 c9             	test   cx,cx
c0002197:	75 0d                	jne    c00021a6 <get_xfileinfo+0x62>
c0002199:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c000219f:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021a4:	76 2b                	jbe    c00021d1 <get_xfileinfo+0x8d>
c00021a6:	c1 e1 10             	shl    ecx,0x10
c00021a9:	ba ff 00 00 00       	mov    edx,0xff
c00021ae:	0f b7 c0             	movzx  eax,ax
c00021b1:	29 fa                	sub    edx,edi
c00021b3:	09 c8                	or     eax,ecx
c00021b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021b9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021bd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021c1:	e8 1b fc ff ff       	call   c0001de1 <put_utf>
c00021c6:	84 c0                	test   al,al
c00021c8:	74 a6                	je     c0002170 <get_xfileinfo+0x2c>
c00021ca:	0f b6 c0             	movzx  eax,al
c00021cd:	01 c7                	add    edi,eax
c00021cf:	31 c0                	xor    eax,eax
c00021d1:	89 c1                	mov    ecx,eax
c00021d3:	eb 8a                	jmp    c000215f <get_xfileinfo+0x1b>
c00021d5:	85 ff                	test   edi,edi
c00021d7:	74 97                	je     c0002170 <get_xfileinfo+0x2c>
c00021d9:	66 85 c9             	test   cx,cx
c00021dc:	75 92                	jne    c0002170 <get_xfileinfo+0x2c>
c00021de:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021e3:	31 c0                	xor    eax,eax
c00021e5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021e9:	31 d2                	xor    edx,edx
c00021eb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021ee:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021f1:	80 e1 10             	and    cl,0x10
c00021f4:	75 08                	jne    c00021fe <get_xfileinfo+0xba>
c00021f6:	8d 46 38             	lea    eax,[esi+0x38]
c00021f9:	e8 68 fa ff ff       	call   c0001c66 <ld_qword>
c00021fe:	89 03                	mov    DWORD PTR [ebx],eax
c0002200:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002203:	8d 46 0c             	lea    eax,[esi+0xc]
c0002206:	e8 36 fa ff ff       	call   c0001c41 <ld_word>
c000220b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000220f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002212:	e8 2a fa ff ff       	call   c0001c41 <ld_word>
c0002217:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000221b:	83 c4 0c             	add    esp,0xc
c000221e:	5b                   	pop    ebx
c000221f:	5e                   	pop    esi
c0002220:	5f                   	pop    edi
c0002221:	5d                   	pop    ebp
c0002222:	c3                   	ret    

c0002223 <get_ldnumber>:
c0002223:	8b 10                	mov    edx,DWORD PTR [eax]
c0002225:	85 d2                	test   edx,edx
c0002227:	74 14                	je     c000223d <get_ldnumber+0x1a>
c0002229:	56                   	push   esi
c000222a:	53                   	push   ebx
c000222b:	89 d3                	mov    ebx,edx
c000222d:	43                   	inc    ebx
c000222e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002231:	80 f9 1f             	cmp    cl,0x1f
c0002234:	76 0d                	jbe    c0002243 <get_ldnumber+0x20>
c0002236:	80 f9 3a             	cmp    cl,0x3a
c0002239:	75 f2                	jne    c000222d <get_ldnumber+0xa>
c000223b:	eb 0a                	jmp    c0002247 <get_ldnumber+0x24>
c000223d:	83 c9 ff             	or     ecx,0xffffffff
c0002240:	89 c8                	mov    eax,ecx
c0002242:	c3                   	ret    
c0002243:	31 c9                	xor    ecx,ecx
c0002245:	eb 24                	jmp    c000226b <get_ldnumber+0x48>
c0002247:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000224a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000224d:	80 f9 09             	cmp    cl,0x9
c0002250:	77 16                	ja     c0002268 <get_ldnumber+0x45>
c0002252:	83 c2 02             	add    edx,0x2
c0002255:	83 c9 ff             	or     ecx,0xffffffff
c0002258:	39 d3                	cmp    ebx,edx
c000225a:	75 0f                	jne    c000226b <get_ldnumber+0x48>
c000225c:	89 f2                	mov    edx,esi
c000225e:	89 18                	mov    DWORD PTR [eax],ebx
c0002260:	0f be ca             	movsx  ecx,dl
c0002263:	83 e9 30             	sub    ecx,0x30
c0002266:	eb 03                	jmp    c000226b <get_ldnumber+0x48>
c0002268:	83 c9 ff             	or     ecx,0xffffffff
c000226b:	89 c8                	mov    eax,ecx
c000226d:	5b                   	pop    ebx
c000226e:	5e                   	pop    esi
c000226f:	c3                   	ret    

c0002270 <crc32>:
c0002270:	56                   	push   esi
c0002271:	89 d6                	mov    esi,edx
c0002273:	53                   	push   ebx
c0002274:	b2 01                	mov    dl,0x1
c0002276:	bb 08 00 00 00       	mov    ebx,0x8
c000227b:	89 f1                	mov    ecx,esi
c000227d:	84 d1                	test   cl,dl
c000227f:	0f 95 c1             	setne  cl
c0002282:	0f b6 c9             	movzx  ecx,cl
c0002285:	31 c1                	xor    ecx,eax
c0002287:	89 c8                	mov    eax,ecx
c0002289:	d1 e8                	shr    eax,1
c000228b:	80 e1 01             	and    cl,0x1
c000228e:	74 05                	je     c0002295 <crc32+0x25>
c0002290:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002295:	d1 e2                	shl    edx,1
c0002297:	4b                   	dec    ebx
c0002298:	75 e1                	jne    c000227b <crc32+0xb>
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <test_gpt_header>:
c000229d:	55                   	push   ebp
c000229e:	b9 10 00 00 00       	mov    ecx,0x10
c00022a3:	57                   	push   edi
c00022a4:	ba 60 9c 02 c0       	mov    edx,0xc0029c60
c00022a9:	56                   	push   esi
c00022aa:	31 ff                	xor    edi,edi
c00022ac:	53                   	push   ebx
c00022ad:	89 c3                	mov    ebx,eax
c00022af:	e8 2c fa ff ff       	call   c0001ce0 <mem_cmp>
c00022b4:	85 c0                	test   eax,eax
c00022b6:	75 55                	jne    c000230d <test_gpt_header+0x70>
c00022b8:	89 c7                	mov    edi,eax
c00022ba:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022bf:	83 ce ff             	or     esi,0xffffffff
c00022c2:	31 d2                	xor    edx,edx
c00022c4:	83 fd 03             	cmp    ebp,0x3
c00022c7:	76 05                	jbe    c00022ce <test_gpt_header+0x31>
c00022c9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ce:	89 f0                	mov    eax,esi
c00022d0:	45                   	inc    ebp
c00022d1:	e8 9a ff ff ff       	call   c0002270 <crc32>
c00022d6:	83 fd 4c             	cmp    ebp,0x4c
c00022d9:	89 c6                	mov    esi,eax
c00022db:	75 e5                	jne    c00022c2 <test_gpt_header+0x25>
c00022dd:	8d 43 10             	lea    eax,[ebx+0x10]
c00022e0:	f7 d6                	not    esi
c00022e2:	e8 67 f9 ff ff       	call   c0001c4e <ld_dword>
c00022e7:	39 c6                	cmp    esi,eax
c00022e9:	75 22                	jne    c000230d <test_gpt_header+0x70>
c00022eb:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ee:	e8 5b f9 ff ff       	call   c0001c4e <ld_dword>
c00022f3:	83 c0 80             	add    eax,0xffffff80
c00022f6:	75 15                	jne    c000230d <test_gpt_header+0x70>
c00022f8:	8d 43 50             	lea    eax,[ebx+0x50]
c00022fb:	e8 4e f9 ff ff       	call   c0001c4e <ld_dword>
c0002300:	3d 80 00 00 00       	cmp    eax,0x80
c0002305:	0f 96 c0             	setbe  al
c0002308:	0f b6 c0             	movzx  eax,al
c000230b:	89 c7                	mov    edi,eax
c000230d:	5b                   	pop    ebx
c000230e:	89 f8                	mov    eax,edi
c0002310:	5e                   	pop    esi
c0002311:	5f                   	pop    edi
c0002312:	5d                   	pop    ebp
c0002313:	c3                   	ret    

c0002314 <make_rand>:
c0002314:	56                   	push   esi
c0002315:	85 c0                	test   eax,eax
c0002317:	53                   	push   ebx
c0002318:	75 05                	jne    c000231f <make_rand+0xb>
c000231a:	b8 01 00 00 00       	mov    eax,0x1
c000231f:	01 d1                	add    ecx,edx
c0002321:	bb 08 00 00 00       	mov    ebx,0x8
c0002326:	89 c6                	mov    esi,eax
c0002328:	d1 e8                	shr    eax,1
c000232a:	83 e6 01             	and    esi,0x1
c000232d:	85 f6                	test   esi,esi
c000232f:	74 05                	je     c0002336 <make_rand+0x22>
c0002331:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002336:	4b                   	dec    ebx
c0002337:	75 ed                	jne    c0002326 <make_rand+0x12>
c0002339:	42                   	inc    edx
c000233a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000233d:	39 ca                	cmp    edx,ecx
c000233f:	75 e0                	jne    c0002321 <make_rand+0xd>
c0002341:	5b                   	pop    ebx
c0002342:	5e                   	pop    esi
c0002343:	c3                   	ret    

c0002344 <validate>:
c0002344:	56                   	push   esi
c0002345:	53                   	push   ebx
c0002346:	89 d6                	mov    esi,edx
c0002348:	51                   	push   ecx
c0002349:	85 c0                	test   eax,eax
c000234b:	75 09                	jne    c0002356 <validate+0x12>
c000234d:	b8 09 00 00 00       	mov    eax,0x9
c0002352:	31 c9                	xor    ecx,ecx
c0002354:	eb 2f                	jmp    c0002385 <validate+0x41>
c0002356:	89 c3                	mov    ebx,eax
c0002358:	8b 00                	mov    eax,DWORD PTR [eax]
c000235a:	85 c0                	test   eax,eax
c000235c:	74 ef                	je     c000234d <validate+0x9>
c000235e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002361:	74 ea                	je     c000234d <validate+0x9>
c0002363:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002367:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000236b:	75 e0                	jne    c000234d <validate+0x9>
c000236d:	83 ec 0c             	sub    esp,0xc
c0002370:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002374:	50                   	push   eax
c0002375:	e8 76 f8 ff ff       	call   c0001bf0 <disk_status>
c000237a:	83 c4 10             	add    esp,0x10
c000237d:	a8 01                	test   al,0x1
c000237f:	75 cc                	jne    c000234d <validate+0x9>
c0002381:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002383:	31 c0                	xor    eax,eax
c0002385:	89 0e                	mov    DWORD PTR [esi],ecx
c0002387:	5a                   	pop    edx
c0002388:	5b                   	pop    ebx
c0002389:	5e                   	pop    esi
c000238a:	c3                   	ret    

c000238b <sync_window>:
c000238b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000238f:	0f 84 85 00 00 00    	je     c000241a <sync_window+0x8f>
c0002395:	55                   	push   ebp
c0002396:	8d 68 54             	lea    ebp,[eax+0x54]
c0002399:	57                   	push   edi
c000239a:	56                   	push   esi
c000239b:	53                   	push   ebx
c000239c:	89 c3                	mov    ebx,eax
c000239e:	83 ec 28             	sub    esp,0x28
c00023a1:	6a 01                	push   0x1
c00023a3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023a6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023a9:	55                   	push   ebp
c00023aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ae:	50                   	push   eax
c00023af:	e8 58 f8 ff ff       	call   c0001c0c <disk_write>
c00023b4:	83 c4 20             	add    esp,0x20
c00023b7:	ba 01 00 00 00       	mov    edx,0x1
c00023bc:	85 c0                	test   eax,eax
c00023be:	75 50                	jne    c0002410 <sync_window+0x85>
c00023c0:	31 ff                	xor    edi,edi
c00023c2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023c5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023c9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023cd:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023d0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023d3:	89 c6                	mov    esi,eax
c00023d5:	89 d7                	mov    edi,edx
c00023d7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023da:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023de:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023e1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023e5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023e9:	73 23                	jae    c000240e <sync_window+0x83>
c00023eb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023ef:	75 1d                	jne    c000240e <sync_window+0x83>
c00023f1:	83 ec 0c             	sub    esp,0xc
c00023f4:	6a 01                	push   0x1
c00023f6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023fa:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023fe:	52                   	push   edx
c00023ff:	50                   	push   eax
c0002400:	55                   	push   ebp
c0002401:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002405:	50                   	push   eax
c0002406:	e8 01 f8 ff ff       	call   c0001c0c <disk_write>
c000240b:	83 c4 20             	add    esp,0x20
c000240e:	31 d2                	xor    edx,edx
c0002410:	83 c4 1c             	add    esp,0x1c
c0002413:	89 d0                	mov    eax,edx
c0002415:	5b                   	pop    ebx
c0002416:	5e                   	pop    esi
c0002417:	5f                   	pop    edi
c0002418:	5d                   	pop    ebp
c0002419:	c3                   	ret    
c000241a:	31 d2                	xor    edx,edx
c000241c:	89 d0                	mov    eax,edx
c000241e:	c3                   	ret    

c000241f <move_window>:
c000241f:	56                   	push   esi
c0002420:	53                   	push   ebx
c0002421:	89 c3                	mov    ebx,eax
c0002423:	83 ec 14             	sub    esp,0x14
c0002426:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002429:	75 07                	jne    c0002432 <move_window+0x13>
c000242b:	31 f6                	xor    esi,esi
c000242d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002430:	74 59                	je     c000248b <move_window+0x6c>
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000243a:	89 d8                	mov    eax,ebx
c000243c:	e8 4a ff ff ff       	call   c000238b <sync_window>
c0002441:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002445:	89 c6                	mov    esi,eax
c0002447:	85 c0                	test   eax,eax
c0002449:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000244d:	75 3c                	jne    c000248b <move_window+0x6c>
c000244f:	83 ec 0c             	sub    esp,0xc
c0002452:	8d 43 54             	lea    eax,[ebx+0x54]
c0002455:	6a 01                	push   0x1
c0002457:	51                   	push   ecx
c0002458:	52                   	push   edx
c0002459:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000245d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002461:	50                   	push   eax
c0002462:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002466:	50                   	push   eax
c0002467:	e8 8a f7 ff ff       	call   c0001bf6 <disk_read>
c000246c:	83 c4 20             	add    esp,0x20
c000246f:	85 c0                	test   eax,eax
c0002471:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002475:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002479:	74 0a                	je     c0002485 <move_window+0x66>
c000247b:	83 ca ff             	or     edx,0xffffffff
c000247e:	be 01 00 00 00       	mov    esi,0x1
c0002483:	89 d1                	mov    ecx,edx
c0002485:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002488:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000248b:	89 f0                	mov    eax,esi
c000248d:	83 c4 14             	add    esp,0x14
c0002490:	5b                   	pop    ebx
c0002491:	5e                   	pop    esi
c0002492:	c3                   	ret    

c0002493 <check_fs>:
c0002493:	53                   	push   ebx
c0002494:	89 c3                	mov    ebx,eax
c0002496:	83 ec 08             	sub    esp,0x8
c0002499:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000249d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024a4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024ab:	e8 6f ff ff ff       	call   c000241f <move_window>
c00024b0:	ba 04 00 00 00       	mov    edx,0x4
c00024b5:	85 c0                	test   eax,eax
c00024b7:	0f 85 89 00 00 00    	jne    c0002546 <check_fs+0xb3>
c00024bd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024c3:	e8 79 f7 ff ff       	call   c0001c41 <ld_word>
c00024c8:	ba 03 00 00 00       	mov    edx,0x3
c00024cd:	66 3d 55 aa          	cmp    ax,0xaa55
c00024d1:	75 73                	jne    c0002546 <check_fs+0xb3>
c00024d3:	ba 80 9d 02 c0       	mov    edx,0xc0029d80
c00024d8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024db:	b9 0b 00 00 00       	mov    ecx,0xb
c00024e0:	e8 fb f7 ff ff       	call   c0001ce0 <mem_cmp>
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	74 58                	je     c0002546 <check_fs+0xb3>
c00024ee:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024f1:	8d 50 18             	lea    edx,[eax+0x18]
c00024f4:	80 fa 01             	cmp    dl,0x1
c00024f7:	76 09                	jbe    c0002502 <check_fs+0x6f>
c00024f9:	ba 02 00 00 00       	mov    edx,0x2
c00024fe:	3c eb                	cmp    al,0xeb
c0002500:	75 44                	jne    c0002546 <check_fs+0xb3>
c0002502:	ba 50 d2 02 c0       	mov    edx,0xc002d250
c0002507:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000250d:	b9 03 00 00 00       	mov    ecx,0x3
c0002512:	e8 c9 f7 ff ff       	call   c0001ce0 <mem_cmp>
c0002517:	31 d2                	xor    edx,edx
c0002519:	85 c0                	test   eax,eax
c000251b:	74 29                	je     c0002546 <check_fs+0xb3>
c000251d:	ba 8c 9d 02 c0       	mov    edx,0xc0029d8c
c0002522:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002528:	b9 05 00 00 00       	mov    ecx,0x5
c000252d:	e8 ae f7 ff ff       	call   c0001ce0 <mem_cmp>
c0002532:	31 d2                	xor    edx,edx
c0002534:	85 c0                	test   eax,eax
c0002536:	74 0e                	je     c0002546 <check_fs+0xb3>
c0002538:	31 d2                	xor    edx,edx
c000253a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002541:	0f 95 c2             	setne  dl
c0002544:	01 d2                	add    edx,edx
c0002546:	89 d0                	mov    eax,edx
c0002548:	83 c4 08             	add    esp,0x8
c000254b:	5b                   	pop    ebx
c000254c:	c3                   	ret    

c000254d <find_volume>:
c000254d:	55                   	push   ebp
c000254e:	31 c9                	xor    ecx,ecx
c0002550:	57                   	push   edi
c0002551:	56                   	push   esi
c0002552:	89 d6                	mov    esi,edx
c0002554:	53                   	push   ebx
c0002555:	31 d2                	xor    edx,edx
c0002557:	83 ec 3c             	sub    esp,0x3c
c000255a:	89 c3                	mov    ebx,eax
c000255c:	e8 32 ff ff ff       	call   c0002493 <check_fs>
c0002561:	83 f8 02             	cmp    eax,0x2
c0002564:	74 0e                	je     c0002574 <find_volume+0x27>
c0002566:	0f 87 5d 01 00 00    	ja     c00026c9 <find_volume+0x17c>
c000256c:	85 f6                	test   esi,esi
c000256e:	0f 84 55 01 00 00    	je     c00026c9 <find_volume+0x17c>
c0002574:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000257b:	0f 85 dd 00 00 00    	jne    c000265e <find_volume+0x111>
c0002581:	31 c9                	xor    ecx,ecx
c0002583:	ba 01 00 00 00       	mov    edx,0x1
c0002588:	89 d8                	mov    eax,ebx
c000258a:	e8 90 fe ff ff       	call   c000241f <move_window>
c000258f:	85 c0                	test   eax,eax
c0002591:	74 0a                	je     c000259d <find_volume+0x50>
c0002593:	b8 04 00 00 00       	mov    eax,0x4
c0002598:	e9 2c 01 00 00       	jmp    c00026c9 <find_volume+0x17c>
c000259d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025a0:	89 e8                	mov    eax,ebp
c00025a2:	e8 f6 fc ff ff       	call   c000229d <test_gpt_header>
c00025a7:	85 c0                	test   eax,eax
c00025a9:	75 0a                	jne    c00025b5 <find_volume+0x68>
c00025ab:	b8 03 00 00 00       	mov    eax,0x3
c00025b0:	e9 14 01 00 00       	jmp    c00026c9 <find_volume+0x17c>
c00025b5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025bb:	e8 8e f6 ff ff       	call   c0001c4e <ld_dword>
c00025c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025c4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ca:	e8 97 f6 ff ff       	call   c0001c66 <ld_qword>
c00025cf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025df:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025eb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025ef:	74 ba                	je     c00025ab <find_volume+0x5e>
c00025f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025f5:	31 c9                	xor    ecx,ecx
c00025f7:	c1 e7 07             	shl    edi,0x7
c00025fa:	89 d8                	mov    eax,ebx
c00025fc:	89 fa                	mov    edx,edi
c00025fe:	c1 ea 09             	shr    edx,0x9
c0002601:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002605:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002609:	e8 11 fe ff ff       	call   c000241f <move_window>
c000260e:	85 c0                	test   eax,eax
c0002610:	75 81                	jne    c0002593 <find_volume+0x46>
c0002612:	81 e7 80 01 00 00    	and    edi,0x180
c0002618:	b9 10 00 00 00       	mov    ecx,0x10
c000261d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002621:	ba 70 9d 02 c0       	mov    edx,0xc0029d70
c0002626:	e8 b5 f6 ff ff       	call   c0001ce0 <mem_cmp>
c000262b:	85 c0                	test   eax,eax
c000262d:	75 29                	jne    c0002658 <find_volume+0x10b>
c000262f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002633:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002637:	e8 2a f6 ff ff       	call   c0001c66 <ld_qword>
c000263c:	89 d1                	mov    ecx,edx
c000263e:	89 c2                	mov    edx,eax
c0002640:	89 d8                	mov    eax,ebx
c0002642:	e8 4c fe ff ff       	call   c0002493 <check_fs>
c0002647:	85 f6                	test   esi,esi
c0002649:	75 07                	jne    c0002652 <find_volume+0x105>
c000264b:	83 f8 01             	cmp    eax,0x1
c000264e:	77 08                	ja     c0002658 <find_volume+0x10b>
c0002650:	eb 77                	jmp    c00026c9 <find_volume+0x17c>
c0002652:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002656:	74 71                	je     c00026c9 <find_volume+0x17c>
c0002658:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000265c:	eb 89                	jmp    c00025e7 <find_volume+0x9a>
c000265e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002662:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002668:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000266e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002672:	89 cd                	mov    ebp,ecx
c0002674:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002678:	89 f8                	mov    eax,edi
c000267a:	83 c7 10             	add    edi,0x10
c000267d:	e8 cc f5 ff ff       	call   c0001c4e <ld_dword>
c0002682:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002686:	89 01                	mov    DWORD PTR [ecx],eax
c0002688:	83 c1 04             	add    ecx,0x4
c000268b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000268f:	75 e3                	jne    c0002674 <find_volume+0x127>
c0002691:	31 ff                	xor    edi,edi
c0002693:	85 f6                	test   esi,esi
c0002695:	74 03                	je     c000269a <find_volume+0x14d>
c0002697:	8d 7e ff             	lea    edi,[esi-0x1]
c000269a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000269e:	85 d2                	test   edx,edx
c00026a0:	74 14                	je     c00026b6 <find_volume+0x169>
c00026a2:	31 c9                	xor    ecx,ecx
c00026a4:	89 d8                	mov    eax,ebx
c00026a6:	e8 e8 fd ff ff       	call   c0002493 <check_fs>
c00026ab:	83 f8 01             	cmp    eax,0x1
c00026ae:	76 19                	jbe    c00026c9 <find_volume+0x17c>
c00026b0:	85 f6                	test   esi,esi
c00026b2:	74 0f                	je     c00026c3 <find_volume+0x176>
c00026b4:	eb 13                	jmp    c00026c9 <find_volume+0x17c>
c00026b6:	85 f6                	test   esi,esi
c00026b8:	0f 85 ed fe ff ff    	jne    c00025ab <find_volume+0x5e>
c00026be:	b8 03 00 00 00       	mov    eax,0x3
c00026c3:	47                   	inc    edi
c00026c4:	83 ff 03             	cmp    edi,0x3
c00026c7:	76 d1                	jbe    c000269a <find_volume+0x14d>
c00026c9:	83 c4 3c             	add    esp,0x3c
c00026cc:	5b                   	pop    ebx
c00026cd:	5e                   	pop    esi
c00026ce:	5f                   	pop    edi
c00026cf:	5d                   	pop    ebp
c00026d0:	c3                   	ret    

c00026d1 <mount_volume>:
c00026d1:	55                   	push   ebp
c00026d2:	57                   	push   edi
c00026d3:	89 cf                	mov    edi,ecx
c00026d5:	56                   	push   esi
c00026d6:	53                   	push   ebx
c00026d7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026dc:	83 ec 3c             	sub    esp,0x3c
c00026df:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026e5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026e9:	e8 35 fb ff ff       	call   c0002223 <get_ldnumber>
c00026ee:	85 c0                	test   eax,eax
c00026f0:	0f 88 3a 05 00 00    	js     c0002c30 <mount_volume+0x55f>
c00026f6:	8b 2c 85 00 ee 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1200]
c00026fd:	89 c6                	mov    esi,eax
c00026ff:	bb 0c 00 00 00       	mov    ebx,0xc
c0002704:	85 ed                	test   ebp,ebp
c0002706:	0f 84 24 05 00 00    	je     c0002c30 <mount_volume+0x55f>
c000270c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002710:	83 e7 fe             	and    edi,0xfffffffe
c0002713:	89 2a                	mov    DWORD PTR [edx],ebp
c0002715:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002719:	74 32                	je     c000274d <mount_volume+0x7c>
c000271b:	83 ec 0c             	sub    esp,0xc
c000271e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002722:	50                   	push   eax
c0002723:	e8 c8 f4 ff ff       	call   c0001bf0 <disk_status>
c0002728:	83 c4 10             	add    esp,0x10
c000272b:	a8 01                	test   al,0x1
c000272d:	75 1e                	jne    c000274d <mount_volume+0x7c>
c000272f:	31 db                	xor    ebx,ebx
c0002731:	89 f9                	mov    ecx,edi
c0002733:	84 c9                	test   cl,cl
c0002735:	0f 84 f5 04 00 00    	je     c0002c30 <mount_volume+0x55f>
c000273b:	a8 04                	test   al,0x4
c000273d:	0f 84 ed 04 00 00    	je     c0002c30 <mount_volume+0x55f>
c0002743:	bb 0a 00 00 00       	mov    ebx,0xa
c0002748:	e9 e3 04 00 00       	jmp    c0002c30 <mount_volume+0x55f>
c000274d:	83 ec 0c             	sub    esp,0xc
c0002750:	89 f0                	mov    eax,esi
c0002752:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002756:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002759:	0f b6 f0             	movzx  esi,al
c000275c:	bb 03 00 00 00       	mov    ebx,0x3
c0002761:	56                   	push   esi
c0002762:	e8 8c f4 ff ff       	call   c0001bf3 <disk_initialize>
c0002767:	83 c4 10             	add    esp,0x10
c000276a:	a8 01                	test   al,0x1
c000276c:	0f 85 be 04 00 00    	jne    c0002c30 <mount_volume+0x55f>
c0002772:	89 f9                	mov    ecx,edi
c0002774:	84 c9                	test   cl,cl
c0002776:	74 04                	je     c000277c <mount_volume+0xab>
c0002778:	a8 04                	test   al,0x4
c000277a:	75 c7                	jne    c0002743 <mount_volume+0x72>
c000277c:	31 d2                	xor    edx,edx
c000277e:	89 e8                	mov    eax,ebp
c0002780:	e8 c8 fd ff ff       	call   c000254d <find_volume>
c0002785:	83 f8 04             	cmp    eax,0x4
c0002788:	75 0a                	jne    c0002794 <mount_volume+0xc3>
c000278a:	bb 01 00 00 00       	mov    ebx,0x1
c000278f:	e9 9c 04 00 00       	jmp    c0002c30 <mount_volume+0x55f>
c0002794:	83 f8 01             	cmp    eax,0x1
c0002797:	76 0a                	jbe    c00027a3 <mount_volume+0xd2>
c0002799:	bb 0d 00 00 00       	mov    ebx,0xd
c000279e:	e9 8d 04 00 00       	jmp    c0002c30 <mount_volume+0x55f>
c00027a3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027a6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027b1:	75 17                	jne    c00027ca <mount_volume+0xf9>
c00027b3:	b8 0b 00 00 00       	mov    eax,0xb
c00027b8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027bd:	75 da                	jne    c0002799 <mount_volume+0xc8>
c00027bf:	40                   	inc    eax
c00027c0:	83 f8 40             	cmp    eax,0x40
c00027c3:	75 f3                	jne    c00027b8 <mount_volume+0xe7>
c00027c5:	e9 5a 02 00 00       	jmp    c0002a24 <mount_volume+0x353>
c00027ca:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027cd:	e8 6f f4 ff ff       	call   c0001c41 <ld_word>
c00027d2:	66 3d 00 02          	cmp    ax,0x200
c00027d6:	75 c1                	jne    c0002799 <mount_volume+0xc8>
c00027d8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027db:	e8 61 f4 ff ff       	call   c0001c41 <ld_word>
c00027e0:	0f b7 c0             	movzx  eax,ax
c00027e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027e7:	85 c0                	test   eax,eax
c00027e9:	75 0c                	jne    c00027f7 <mount_volume+0x126>
c00027eb:	8d 45 78             	lea    eax,[ebp+0x78]
c00027ee:	e8 5b f4 ff ff       	call   c0001c4e <ld_dword>
c00027f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027fb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027fe:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002801:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002805:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002808:	48                   	dec    eax
c0002809:	3c 01                	cmp    al,0x1
c000280b:	77 8c                	ja     c0002799 <mount_volume+0xc8>
c000280d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002811:	89 c3                	mov    ebx,eax
c0002813:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002817:	66 85 c0             	test   ax,ax
c000281a:	0f 84 79 ff ff ff    	je     c0002799 <mount_volume+0xc8>
c0002820:	8d 40 ff             	lea    eax,[eax-0x1]
c0002823:	85 d8                	test   eax,ebx
c0002825:	0f 85 6e ff ff ff    	jne    c0002799 <mount_volume+0xc8>
c000282b:	8d 45 65             	lea    eax,[ebp+0x65]
c000282e:	e8 0e f4 ff ff       	call   c0001c41 <ld_word>
c0002833:	89 c7                	mov    edi,eax
c0002835:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002839:	a8 0f                	test   al,0xf
c000283b:	0f 85 58 ff ff ff    	jne    c0002799 <mount_volume+0xc8>
c0002841:	8d 45 67             	lea    eax,[ebp+0x67]
c0002844:	e8 f8 f3 ff ff       	call   c0001c41 <ld_word>
c0002849:	0f b7 f0             	movzx  esi,ax
c000284c:	85 f6                	test   esi,esi
c000284e:	75 0a                	jne    c000285a <mount_volume+0x189>
c0002850:	8d 45 74             	lea    eax,[ebp+0x74]
c0002853:	e8 f6 f3 ff ff       	call   c0001c4e <ld_dword>
c0002858:	89 c6                	mov    esi,eax
c000285a:	8d 45 62             	lea    eax,[ebp+0x62]
c000285d:	e8 df f3 ff ff       	call   c0001c41 <ld_word>
c0002862:	66 85 c0             	test   ax,ax
c0002865:	0f 84 2e ff ff ff    	je     c0002799 <mount_volume+0xc8>
c000286b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002870:	0f b7 c8             	movzx  ecx,ax
c0002873:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002878:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000287c:	89 fa                	mov    edx,edi
c000287e:	66 c1 ea 04          	shr    dx,0x4
c0002882:	0f b7 d2             	movzx  edx,dx
c0002885:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002889:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000288c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002890:	39 c6                	cmp    esi,eax
c0002892:	0f 82 01 ff ff ff    	jb     c0002799 <mount_volume+0xc8>
c0002898:	29 c6                	sub    esi,eax
c000289a:	31 d2                	xor    edx,edx
c000289c:	89 f0                	mov    eax,esi
c000289e:	f7 f3                	div    ebx
c00028a0:	39 de                	cmp    esi,ebx
c00028a2:	0f 82 f1 fe ff ff    	jb     c0002799 <mount_volume+0xc8>
c00028a8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028ad:	0f 87 e6 fe ff ff    	ja     c0002799 <mount_volume+0xc8>
c00028b3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028b8:	0f 86 63 03 00 00    	jbe    c0002c21 <mount_volume+0x550>
c00028be:	bb 03 00 00 00       	mov    ebx,0x3
c00028c3:	8d 70 02             	lea    esi,[eax+0x2]
c00028c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ce:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028d1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	89 c8                	mov    eax,ecx
c00028d8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028db:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028df:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028e7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028eb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ee:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028f5:	31 d2                	xor    edx,edx
c00028f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028ff:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002902:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002905:	83 fb 03             	cmp    ebx,0x3
c0002908:	75 2b                	jne    c0002935 <mount_volume+0x264>
c000290a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000290d:	e8 2f f3 ff ff       	call   c0001c41 <ld_word>
c0002912:	66 09 c7             	or     di,ax
c0002915:	0f 85 7e fe ff ff    	jne    c0002799 <mount_volume+0xc8>
c000291b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002921:	c1 e6 02             	shl    esi,0x2
c0002924:	e8 25 f3 ff ff       	call   c0001c4e <ld_dword>
c0002929:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002930:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002933:	eb 30                	jmp    c0002965 <mount_volume+0x294>
c0002935:	66 85 ff             	test   di,di
c0002938:	0f 84 5b fe ff ff    	je     c0002799 <mount_volume+0xc8>
c000293e:	31 d2                	xor    edx,edx
c0002940:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002944:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002948:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000294c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002952:	83 fb 02             	cmp    ebx,0x2
c0002955:	75 04                	jne    c000295b <mount_volume+0x28a>
c0002957:	01 f6                	add    esi,esi
c0002959:	eb 0a                	jmp    c0002965 <mount_volume+0x294>
c000295b:	8d 04 76             	lea    eax,[esi+esi*2]
c000295e:	83 e6 01             	and    esi,0x1
c0002961:	d1 e8                	shr    eax,1
c0002963:	01 c6                	add    esi,eax
c0002965:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000296b:	c1 ee 09             	shr    esi,0x9
c000296e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002972:	0f 87 21 fe ff ff    	ja     c0002799 <mount_volume+0xc8>
c0002978:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000297f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002986:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000298a:	83 fb 03             	cmp    ebx,0x3
c000298d:	75 7a                	jne    c0002a09 <mount_volume+0x338>
c000298f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002995:	e8 a7 f2 ff ff       	call   c0001c41 <ld_word>
c000299a:	66 48                	dec    ax
c000299c:	75 6b                	jne    c0002a09 <mount_volume+0x338>
c000299e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029a6:	83 c2 01             	add    edx,0x1
c00029a9:	89 e8                	mov    eax,ebp
c00029ab:	83 d1 00             	adc    ecx,0x0
c00029ae:	e8 6c fa ff ff       	call   c000241f <move_window>
c00029b3:	85 c0                	test   eax,eax
c00029b5:	75 52                	jne    c0002a09 <mount_volume+0x338>
c00029b7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029bb:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029c1:	e8 7b f2 ff ff       	call   c0001c41 <ld_word>
c00029c6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ca:	75 3d                	jne    c0002a09 <mount_volume+0x338>
c00029cc:	8d 45 54             	lea    eax,[ebp+0x54]
c00029cf:	e8 7a f2 ff ff       	call   c0001c4e <ld_dword>
c00029d4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029d9:	75 2e                	jne    c0002a09 <mount_volume+0x338>
c00029db:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029e1:	e8 68 f2 ff ff       	call   c0001c4e <ld_dword>
c00029e6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029eb:	75 1c                	jne    c0002a09 <mount_volume+0x338>
c00029ed:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029f3:	e8 56 f2 ff ff       	call   c0001c4e <ld_dword>
c00029f8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029fb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a01:	e8 48 f2 ff ff       	call   c0001c4e <ld_dword>
c0002a06:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a09:	66 a1 e0 ed 02 c0    	mov    ax,ds:0xc002ede0
c0002a0f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a12:	40                   	inc    eax
c0002a13:	31 db                	xor    ebx,ebx
c0002a15:	66 a3 e0 ed 02 c0    	mov    ds:0xc002ede0,ax
c0002a1b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a1f:	e9 0c 02 00 00       	jmp    c0002c30 <mount_volume+0x55f>
c0002a24:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a2a:	e8 12 f2 ff ff       	call   c0001c41 <ld_word>
c0002a2f:	66 3d 00 01          	cmp    ax,0x100
c0002a33:	0f 85 60 fd ff ff    	jne    c0002799 <mount_volume+0xc8>
c0002a39:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a40:	0f 85 53 fd ff ff    	jne    c0002799 <mount_volume+0xc8>
c0002a46:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a4c:	e8 15 f2 ff ff       	call   c0001c66 <ld_qword>
c0002a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a55:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a59:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a5f:	e8 ea f1 ff ff       	call   c0001c4e <ld_dword>
c0002a64:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a67:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a6d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a70:	fe c8                	dec    al
c0002a72:	0f 85 21 fd ff ff    	jne    c0002799 <mount_volume+0xc8>
c0002a78:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a7f:	bb 01 00 00 00       	mov    ebx,0x1
c0002a84:	d3 e3                	shl    ebx,cl
c0002a86:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a8a:	66 85 db             	test   bx,bx
c0002a8d:	0f 84 06 fd ff ff    	je     c0002799 <mount_volume+0xc8>
c0002a93:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a99:	e8 b0 f1 ff ff       	call   c0001c4e <ld_dword>
c0002a9e:	89 c6                	mov    esi,eax
c0002aa0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002aa5:	0f 87 ee fc ff ff    	ja     c0002799 <mount_volume+0xc8>
c0002aab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002aaf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ab2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ab5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ab8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002abc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002abf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ac5:	e8 84 f1 ff ff       	call   c0001c4e <ld_dword>
c0002aca:	31 d2                	xor    edx,edx
c0002acc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ad0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ad4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ad8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002adc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002adf:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ae2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ae8:	e8 61 f1 ff ff       	call   c0001c4e <ld_dword>
c0002aed:	31 d2                	xor    edx,edx
c0002aef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002af3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002afe:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b01:	0f b7 c3             	movzx  eax,bx
c0002b04:	31 d2                	xor    edx,edx
c0002b06:	0f af f0             	imul   esi,eax
c0002b09:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b0d:	89 f0                	mov    eax,esi
c0002b0f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b13:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b17:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b1b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b1f:	39 c1                	cmp    ecx,eax
c0002b21:	89 df                	mov    edi,ebx
c0002b23:	19 d7                	sbb    edi,edx
c0002b25:	0f 82 6e fc ff ff    	jb     c0002799 <mount_volume+0xc8>
c0002b2b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	e8 16 f1 ff ff       	call   c0001c4e <ld_dword>
c0002b38:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b3f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b42:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b4a:	85 db                	test   ebx,ebx
c0002b4c:	75 39                	jne    c0002b87 <mount_volume+0x4b6>
c0002b4e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b52:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b56:	0f 86 3d fc ff ff    	jbe    c0002799 <mount_volume+0xc8>
c0002b5c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b5f:	31 ff                	xor    edi,edi
c0002b61:	89 e8                	mov    eax,ebp
c0002b63:	e8 72 f3 ff ff       	call   c0001eda <clst2sect>
c0002b68:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b6c:	01 c6                	add    esi,eax
c0002b6e:	89 e8                	mov    eax,ebp
c0002b70:	11 d7                	adc    edi,edx
c0002b72:	89 f2                	mov    edx,esi
c0002b74:	89 f9                	mov    ecx,edi
c0002b76:	e8 a4 f8 ff ff       	call   c000241f <move_window>
c0002b7b:	85 c0                	test   eax,eax
c0002b7d:	0f 85 07 fc ff ff    	jne    c000278a <mount_volume+0xb9>
c0002b83:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b87:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b8c:	74 0b                	je     c0002b99 <mount_volume+0x4c8>
c0002b8e:	83 c3 20             	add    ebx,0x20
c0002b91:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b97:	eb b1                	jmp    c0002b4a <mount_volume+0x479>
c0002b99:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b9c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ba0:	e8 a9 f0 ff ff       	call   c0001c4e <ld_dword>
c0002ba5:	89 c3                	mov    ebx,eax
c0002ba7:	83 f8 01             	cmp    eax,0x1
c0002baa:	0f 86 e9 fb ff ff    	jbe    c0002799 <mount_volume+0xc8>
c0002bb0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bb3:	0f 86 e0 fb ff ff    	jbe    c0002799 <mount_volume+0xc8>
c0002bb9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bbc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bc0:	0f af c2             	imul   eax,edx
c0002bc3:	31 d2                	xor    edx,edx
c0002bc5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bc8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bcb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bce:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bd1:	31 c9                	xor    ecx,ecx
c0002bd3:	89 da                	mov    edx,ebx
c0002bd5:	89 e8                	mov    eax,ebp
c0002bd7:	c1 ea 07             	shr    edx,0x7
c0002bda:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bdd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002be0:	e8 3a f8 ff ff       	call   c000241f <move_window>
c0002be5:	85 c0                	test   eax,eax
c0002be7:	0f 85 9d fb ff ff    	jne    c000278a <mount_volume+0xb9>
c0002bed:	89 d8                	mov    eax,ebx
c0002bef:	83 e0 7f             	and    eax,0x7f
c0002bf2:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bf5:	e8 54 f0 ff ff       	call   c0001c4e <ld_dword>
c0002bfa:	83 f8 ff             	cmp    eax,0xffffffff
c0002bfd:	74 0a                	je     c0002c09 <mount_volume+0x538>
c0002bff:	43                   	inc    ebx
c0002c00:	39 d8                	cmp    eax,ebx
c0002c02:	74 cd                	je     c0002bd1 <mount_volume+0x500>
c0002c04:	e9 90 fb ff ff       	jmp    c0002799 <mount_volume+0xc8>
c0002c09:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c10:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c17:	bb 04 00 00 00       	mov    ebx,0x4
c0002c1c:	e9 e8 fd ff ff       	jmp    c0002a09 <mount_volume+0x338>
c0002c21:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c26:	19 db                	sbb    ebx,ebx
c0002c28:	83 c3 02             	add    ebx,0x2
c0002c2b:	e9 93 fc ff ff       	jmp    c00028c3 <mount_volume+0x1f2>
c0002c30:	83 c4 3c             	add    esp,0x3c
c0002c33:	89 d8                	mov    eax,ebx
c0002c35:	5b                   	pop    ebx
c0002c36:	5e                   	pop    esi
c0002c37:	5f                   	pop    edi
c0002c38:	5d                   	pop    ebp
c0002c39:	c3                   	ret    

c0002c3a <find_bitmap>:
c0002c3a:	55                   	push   ebp
c0002c3b:	57                   	push   edi
c0002c3c:	89 c7                	mov    edi,eax
c0002c3e:	56                   	push   esi
c0002c3f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c42:	53                   	push   ebx
c0002c43:	83 ec 1c             	sub    esp,0x1c
c0002c46:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c49:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c4d:	83 e8 02             	sub    eax,0x2
c0002c50:	39 f0                	cmp    eax,esi
c0002c52:	77 02                	ja     c0002c56 <find_bitmap+0x1c>
c0002c54:	31 f6                	xor    esi,esi
c0002c56:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c5a:	89 f3                	mov    ebx,esi
c0002c5c:	31 ed                	xor    ebp,ebp
c0002c5e:	31 c9                	xor    ecx,ecx
c0002c60:	89 da                	mov    edx,ebx
c0002c62:	89 f8                	mov    eax,edi
c0002c64:	c1 ea 0c             	shr    edx,0xc
c0002c67:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c6a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c6d:	e8 ad f7 ff ff       	call   c000241f <move_window>
c0002c72:	85 c0                	test   eax,eax
c0002c74:	75 68                	jne    c0002cde <find_bitmap+0xa4>
c0002c76:	89 da                	mov    edx,ebx
c0002c78:	89 d9                	mov    ecx,ebx
c0002c7a:	c1 ea 03             	shr    edx,0x3
c0002c7d:	83 e1 07             	and    ecx,0x7
c0002c80:	b8 01 00 00 00       	mov    eax,0x1
c0002c85:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c8b:	d3 e0                	shl    eax,cl
c0002c8d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c90:	83 e9 02             	sub    ecx,0x2
c0002c93:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c97:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c9b:	43                   	inc    ebx
c0002c9c:	21 c1                	and    ecx,eax
c0002c9e:	d1 e0                	shl    eax,1
c0002ca0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ca4:	77 09                	ja     c0002caf <find_bitmap+0x75>
c0002ca6:	31 db                	xor    ebx,ebx
c0002ca8:	ba 00 02 00 00       	mov    edx,0x200
c0002cad:	31 c0                	xor    eax,eax
c0002caf:	84 c9                	test   cl,cl
c0002cb1:	75 10                	jne    c0002cc3 <find_bitmap+0x89>
c0002cb3:	45                   	inc    ebp
c0002cb4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cb8:	75 0f                	jne    c0002cc9 <find_bitmap+0x8f>
c0002cba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cbe:	83 c0 02             	add    eax,0x2
c0002cc1:	eb 22                	jmp    c0002ce5 <find_bitmap+0xab>
c0002cc3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cc7:	31 ed                	xor    ebp,ebp
c0002cc9:	39 de                	cmp    esi,ebx
c0002ccb:	74 16                	je     c0002ce3 <find_bitmap+0xa9>
c0002ccd:	84 c0                	test   al,al
c0002ccf:	75 c6                	jne    c0002c97 <find_bitmap+0x5d>
c0002cd1:	42                   	inc    edx
c0002cd2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cd8:	77 84                	ja     c0002c5e <find_bitmap+0x24>
c0002cda:	b0 01                	mov    al,0x1
c0002cdc:	eb b9                	jmp    c0002c97 <find_bitmap+0x5d>
c0002cde:	83 c8 ff             	or     eax,0xffffffff
c0002ce1:	eb 02                	jmp    c0002ce5 <find_bitmap+0xab>
c0002ce3:	31 c0                	xor    eax,eax
c0002ce5:	83 c4 1c             	add    esp,0x1c
c0002ce8:	5b                   	pop    ebx
c0002ce9:	5e                   	pop    esi
c0002cea:	5f                   	pop    edi
c0002ceb:	5d                   	pop    ebp
c0002cec:	c3                   	ret    

c0002ced <change_bitmap>:
c0002ced:	55                   	push   ebp
c0002cee:	89 cd                	mov    ebp,ecx
c0002cf0:	57                   	push   edi
c0002cf1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cf4:	56                   	push   esi
c0002cf5:	89 c7                	mov    edi,eax
c0002cf7:	53                   	push   ebx
c0002cf8:	89 c8                	mov    eax,ecx
c0002cfa:	83 ec 1c             	sub    esp,0x1c
c0002cfd:	31 d2                	xor    edx,edx
c0002cff:	89 ce                	mov    esi,ecx
c0002d01:	c1 e8 0c             	shr    eax,0xc
c0002d04:	bb 01 00 00 00       	mov    ebx,0x1
c0002d09:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d0c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d0f:	c1 ee 03             	shr    esi,0x3
c0002d12:	83 e1 07             	and    ecx,0x7
c0002d15:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d1b:	d3 e3                	shl    ebx,cl
c0002d1d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	89 d3                	mov    ebx,edx
c0002d25:	83 c1 01             	add    ecx,0x1
c0002d28:	83 d3 00             	adc    ebx,0x0
c0002d2b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d2f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d33:	89 d1                	mov    ecx,edx
c0002d35:	89 c2                	mov    edx,eax
c0002d37:	89 f8                	mov    eax,edi
c0002d39:	e8 e1 f6 ff ff       	call   c000241f <move_window>
c0002d3e:	89 c1                	mov    ecx,eax
c0002d40:	85 c0                	test   eax,eax
c0002d42:	75 48                	jne    c0002d8c <change_bitmap+0x9f>
c0002d44:	31 d2                	xor    edx,edx
c0002d46:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d4a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d4e:	0f 95 c2             	setne  dl
c0002d51:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d55:	74 3c                	je     c0002d93 <change_bitmap+0xa6>
c0002d57:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d5b:	4d                   	dec    ebp
c0002d5c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d60:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d64:	74 32                	je     c0002d98 <change_bitmap+0xab>
c0002d66:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d6a:	75 d8                	jne    c0002d44 <change_bitmap+0x57>
c0002d6c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d6f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d74:	89 c3                	mov    ebx,eax
c0002d76:	31 f6                	xor    esi,esi
c0002d78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d80:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d86:	74 99                	je     c0002d21 <change_bitmap+0x34>
c0002d88:	89 de                	mov    esi,ebx
c0002d8a:	eb b8                	jmp    c0002d44 <change_bitmap+0x57>
c0002d8c:	b9 01 00 00 00       	mov    ecx,0x1
c0002d91:	eb 05                	jmp    c0002d98 <change_bitmap+0xab>
c0002d93:	b9 02 00 00 00       	mov    ecx,0x2
c0002d98:	83 c4 1c             	add    esp,0x1c
c0002d9b:	89 c8                	mov    eax,ecx
c0002d9d:	5b                   	pop    ebx
c0002d9e:	5e                   	pop    esi
c0002d9f:	5f                   	pop    edi
c0002da0:	5d                   	pop    ebp
c0002da1:	c3                   	ret    

c0002da2 <put_fat>:
c0002da2:	83 fa 01             	cmp    edx,0x1
c0002da5:	0f 86 7b 01 00 00    	jbe    c0002f26 <put_fat+0x184>
c0002dab:	55                   	push   ebp
c0002dac:	57                   	push   edi
c0002dad:	89 cf                	mov    edi,ecx
c0002daf:	56                   	push   esi
c0002db0:	b9 02 00 00 00       	mov    ecx,0x2
c0002db5:	53                   	push   ebx
c0002db6:	89 c6                	mov    esi,eax
c0002db8:	83 ec 1c             	sub    esp,0x1c
c0002dbb:	89 d3                	mov    ebx,edx
c0002dbd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dc0:	0f 86 68 01 00 00    	jbe    c0002f2e <put_fat+0x18c>
c0002dc6:	8a 00                	mov    al,BYTE PTR [eax]
c0002dc8:	3c 02                	cmp    al,0x2
c0002dca:	0f 84 c7 00 00 00    	je     c0002e97 <put_fat+0xf5>
c0002dd0:	77 09                	ja     c0002ddb <put_fat+0x39>
c0002dd2:	fe c8                	dec    al
c0002dd4:	74 17                	je     c0002ded <put_fat+0x4b>
c0002dd6:	e9 53 01 00 00       	jmp    c0002f2e <put_fat+0x18c>
c0002ddb:	b9 02 00 00 00       	mov    ecx,0x2
c0002de0:	3c 04                	cmp    al,0x4
c0002de2:	0f 86 e1 00 00 00    	jbe    c0002ec9 <put_fat+0x127>
c0002de8:	e9 41 01 00 00       	jmp    c0002f2e <put_fat+0x18c>
c0002ded:	89 d5                	mov    ebp,edx
c0002def:	31 c9                	xor    ecx,ecx
c0002df1:	d1 ed                	shr    ebp,1
c0002df3:	89 f0                	mov    eax,esi
c0002df5:	01 d5                	add    ebp,edx
c0002df7:	89 ea                	mov    edx,ebp
c0002df9:	c1 ea 09             	shr    edx,0x9
c0002dfc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dff:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e02:	e8 18 f6 ff ff       	call   c000241f <move_window>
c0002e07:	89 c1                	mov    ecx,eax
c0002e09:	85 c0                	test   eax,eax
c0002e0b:	0f 85 1d 01 00 00    	jne    c0002f2e <put_fat+0x18c>
c0002e11:	8d 46 54             	lea    eax,[esi+0x54]
c0002e14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e18:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e1b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e25:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e29:	89 f8                	mov    eax,edi
c0002e2b:	83 e3 01             	and    ebx,0x1
c0002e2e:	74 0d                	je     c0002e3d <put_fat+0x9b>
c0002e30:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e33:	89 fa                	mov    edx,edi
c0002e35:	83 e0 0f             	and    eax,0xf
c0002e38:	c1 e2 04             	shl    edx,0x4
c0002e3b:	09 d0                	or     eax,edx
c0002e3d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e44:	31 c9                	xor    ecx,ecx
c0002e46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4a:	c1 ea 09             	shr    edx,0x9
c0002e4d:	89 f0                	mov    eax,esi
c0002e4f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e52:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e55:	e8 c5 f5 ff ff       	call   c000241f <move_window>
c0002e5a:	89 c1                	mov    ecx,eax
c0002e5c:	85 c0                	test   eax,eax
c0002e5e:	0f 85 ca 00 00 00    	jne    c0002f2e <put_fat+0x18c>
c0002e64:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e6e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e72:	85 db                	test   ebx,ebx
c0002e74:	74 07                	je     c0002e7d <put_fat+0xdb>
c0002e76:	c1 ef 04             	shr    edi,0x4
c0002e79:	89 fa                	mov    edx,edi
c0002e7b:	eb 0e                	jmp    c0002e8b <put_fat+0xe9>
c0002e7d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e80:	c1 ef 08             	shr    edi,0x8
c0002e83:	83 e2 f0             	and    edx,0xfffffff0
c0002e86:	83 e7 0f             	and    edi,0xf
c0002e89:	09 fa                	or     edx,edi
c0002e8b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e8e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e92:	e9 97 00 00 00       	jmp    c0002f2e <put_fat+0x18c>
c0002e97:	31 c9                	xor    ecx,ecx
c0002e99:	c1 ea 08             	shr    edx,0x8
c0002e9c:	89 f0                	mov    eax,esi
c0002e9e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ea1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ea4:	e8 76 f5 ff ff       	call   c000241f <move_window>
c0002ea9:	89 c1                	mov    ecx,eax
c0002eab:	85 c0                	test   eax,eax
c0002ead:	75 7f                	jne    c0002f2e <put_fat+0x18c>
c0002eaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002eb3:	01 db                	add    ebx,ebx
c0002eb5:	0f b7 d7             	movzx  edx,di
c0002eb8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ebe:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ec2:	e8 ec ed ff ff       	call   c0001cb3 <st_word>
c0002ec7:	eb 53                	jmp    c0002f1c <put_fat+0x17a>
c0002ec9:	31 c9                	xor    ecx,ecx
c0002ecb:	c1 ea 07             	shr    edx,0x7
c0002ece:	89 f0                	mov    eax,esi
c0002ed0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ed3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ed6:	e8 44 f5 ff ff       	call   c000241f <move_window>
c0002edb:	89 c1                	mov    ecx,eax
c0002edd:	85 c0                	test   eax,eax
c0002edf:	75 4d                	jne    c0002f2e <put_fat+0x18c>
c0002ee1:	c1 e3 02             	shl    ebx,0x2
c0002ee4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002eea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002eed:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ef1:	74 1c                	je     c0002f0f <put_fat+0x16d>
c0002ef3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002efd:	89 d8                	mov    eax,ebx
c0002eff:	e8 4a ed ff ff       	call   c0001c4e <ld_dword>
c0002f04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f08:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f0d:	09 c7                	or     edi,eax
c0002f0f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f13:	89 fa                	mov    edx,edi
c0002f15:	89 d8                	mov    eax,ebx
c0002f17:	e8 9b ed ff ff       	call   c0001cb7 <st_dword>
c0002f1c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f24:	eb 08                	jmp    c0002f2e <put_fat+0x18c>
c0002f26:	b9 02 00 00 00       	mov    ecx,0x2
c0002f2b:	89 c8                	mov    eax,ecx
c0002f2d:	c3                   	ret    
c0002f2e:	83 c4 1c             	add    esp,0x1c
c0002f31:	89 c8                	mov    eax,ecx
c0002f33:	5b                   	pop    ebx
c0002f34:	5e                   	pop    esi
c0002f35:	5f                   	pop    edi
c0002f36:	5d                   	pop    ebp
c0002f37:	c3                   	ret    

c0002f38 <fill_last_frag>:
c0002f38:	57                   	push   edi
c0002f39:	89 cf                	mov    edi,ecx
c0002f3b:	56                   	push   esi
c0002f3c:	89 d6                	mov    esi,edx
c0002f3e:	53                   	push   ebx
c0002f3f:	89 c3                	mov    ebx,eax
c0002f41:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f44:	85 c0                	test   eax,eax
c0002f46:	74 21                	je     c0002f69 <fill_last_frag+0x31>
c0002f48:	89 f9                	mov    ecx,edi
c0002f4a:	83 f8 01             	cmp    eax,0x1
c0002f4d:	76 05                	jbe    c0002f54 <fill_last_frag+0x1c>
c0002f4f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f52:	29 c1                	sub    ecx,eax
c0002f54:	8d 56 01             	lea    edx,[esi+0x1]
c0002f57:	29 c2                	sub    edx,eax
c0002f59:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f5b:	e8 42 fe ff ff       	call   c0002da2 <put_fat>
c0002f60:	85 c0                	test   eax,eax
c0002f62:	75 05                	jne    c0002f69 <fill_last_frag+0x31>
c0002f64:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f67:	eb d8                	jmp    c0002f41 <fill_last_frag+0x9>
c0002f69:	5b                   	pop    ebx
c0002f6a:	5e                   	pop    esi
c0002f6b:	5f                   	pop    edi
c0002f6c:	c3                   	ret    

c0002f6d <fill_first_frag>:
c0002f6d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f71:	75 2d                	jne    c0002fa0 <fill_first_frag+0x33>
c0002f73:	57                   	push   edi
c0002f74:	56                   	push   esi
c0002f75:	53                   	push   ebx
c0002f76:	89 c3                	mov    ebx,eax
c0002f78:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f7b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f7e:	01 d7                	add    edi,edx
c0002f80:	39 fa                	cmp    edx,edi
c0002f82:	74 14                	je     c0002f98 <fill_first_frag+0x2b>
c0002f84:	8d 72 01             	lea    esi,[edx+0x1]
c0002f87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f89:	89 f1                	mov    ecx,esi
c0002f8b:	e8 12 fe ff ff       	call   c0002da2 <put_fat>
c0002f90:	89 f2                	mov    edx,esi
c0002f92:	85 c0                	test   eax,eax
c0002f94:	74 ea                	je     c0002f80 <fill_first_frag+0x13>
c0002f96:	eb 0b                	jmp    c0002fa3 <fill_first_frag+0x36>
c0002f98:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f9c:	31 c0                	xor    eax,eax
c0002f9e:	eb 03                	jmp    c0002fa3 <fill_first_frag+0x36>
c0002fa0:	31 c0                	xor    eax,eax
c0002fa2:	c3                   	ret    
c0002fa3:	5b                   	pop    ebx
c0002fa4:	5e                   	pop    esi
c0002fa5:	5f                   	pop    edi
c0002fa6:	c3                   	ret    

c0002fa7 <get_fat>:
c0002fa7:	83 fa 01             	cmp    edx,0x1
c0002faa:	0f 86 db 01 00 00    	jbe    c000318b <get_fat+0x1e4>
c0002fb0:	55                   	push   ebp
c0002fb1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fb6:	57                   	push   edi
c0002fb7:	56                   	push   esi
c0002fb8:	53                   	push   ebx
c0002fb9:	83 ec 1c             	sub    esp,0x1c
c0002fbc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fbe:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fc1:	0f 86 cc 01 00 00    	jbe    c0003193 <get_fat+0x1ec>
c0002fc7:	89 c3                	mov    ebx,eax
c0002fc9:	89 d6                	mov    esi,edx
c0002fcb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fcd:	3c 02                	cmp    al,0x2
c0002fcf:	0f 84 99 00 00 00    	je     c000306e <get_fat+0xc7>
c0002fd5:	77 09                	ja     c0002fe0 <get_fat+0x39>
c0002fd7:	fe c8                	dec    al
c0002fd9:	74 1a                	je     c0002ff5 <get_fat+0x4e>
c0002fdb:	e9 b3 01 00 00       	jmp    c0003193 <get_fat+0x1ec>
c0002fe0:	3c 03                	cmp    al,0x3
c0002fe2:	0f 84 b5 00 00 00    	je     c000309d <get_fat+0xf6>
c0002fe8:	3c 04                	cmp    al,0x4
c0002fea:	0f 84 e3 00 00 00    	je     c00030d3 <get_fat+0x12c>
c0002ff0:	e9 9e 01 00 00       	jmp    c0003193 <get_fat+0x1ec>
c0002ff5:	89 d3                	mov    ebx,edx
c0002ff7:	31 c9                	xor    ecx,ecx
c0002ff9:	d1 eb                	shr    ebx,1
c0002ffb:	89 f8                	mov    eax,edi
c0002ffd:	01 d3                	add    ebx,edx
c0002fff:	89 da                	mov    edx,ebx
c0003001:	c1 ea 09             	shr    edx,0x9
c0003004:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003007:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000300a:	e8 10 f4 ff ff       	call   c000241f <move_window>
c000300f:	85 c0                	test   eax,eax
c0003011:	74 08                	je     c000301b <get_fat+0x74>
c0003013:	83 c9 ff             	or     ecx,0xffffffff
c0003016:	e9 78 01 00 00       	jmp    c0003193 <get_fat+0x1ec>
c000301b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000301e:	31 c9                	xor    ecx,ecx
c0003020:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003026:	89 ea                	mov    edx,ebp
c0003028:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000302c:	c1 ea 09             	shr    edx,0x9
c000302f:	89 f8                	mov    eax,edi
c0003031:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003034:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003037:	e8 e3 f3 ff ff       	call   c000241f <move_window>
c000303c:	85 c0                	test   eax,eax
c000303e:	75 d3                	jne    c0003013 <get_fat+0x6c>
c0003040:	0f b6 c3             	movzx  eax,bl
c0003043:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003049:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000304e:	c1 e3 08             	shl    ebx,0x8
c0003051:	09 c3                	or     ebx,eax
c0003053:	89 d9                	mov    ecx,ebx
c0003055:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000305b:	83 e6 01             	and    esi,0x1
c000305e:	0f 84 2f 01 00 00    	je     c0003193 <get_fat+0x1ec>
c0003064:	89 d9                	mov    ecx,ebx
c0003066:	c1 e9 04             	shr    ecx,0x4
c0003069:	e9 25 01 00 00       	jmp    c0003193 <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	c1 ea 08             	shr    edx,0x8
c0003073:	89 f8                	mov    eax,edi
c0003075:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003078:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307b:	e8 9f f3 ff ff       	call   c000241f <move_window>
c0003080:	85 c0                	test   eax,eax
c0003082:	75 8f                	jne    c0003013 <get_fat+0x6c>
c0003084:	01 f6                	add    esi,esi
c0003086:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000308c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003090:	e8 ac eb ff ff       	call   c0001c41 <ld_word>
c0003095:	0f b7 c8             	movzx  ecx,ax
c0003098:	e9 f6 00 00 00       	jmp    c0003193 <get_fat+0x1ec>
c000309d:	31 c9                	xor    ecx,ecx
c000309f:	c1 ea 07             	shr    edx,0x7
c00030a2:	89 f8                	mov    eax,edi
c00030a4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030aa:	e8 70 f3 ff ff       	call   c000241f <move_window>
c00030af:	85 c0                	test   eax,eax
c00030b1:	0f 85 5c ff ff ff    	jne    c0003013 <get_fat+0x6c>
c00030b7:	c1 e6 02             	shl    esi,0x2
c00030ba:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030c0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030c4:	e8 85 eb ff ff       	call   c0001c4e <ld_dword>
c00030c9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ce:	e9 b4 00 00 00       	jmp    c0003187 <get_fat+0x1e0>
c00030d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030d9:	89 d1                	mov    ecx,edx
c00030db:	09 c1                	or     ecx,eax
c00030dd:	74 06                	je     c00030e5 <get_fat+0x13e>
c00030df:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030e3:	75 0f                	jne    c00030f4 <get_fat+0x14d>
c00030e5:	b9 01 00 00 00       	mov    ecx,0x1
c00030ea:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030ee:	0f 85 9f 00 00 00    	jne    c0003193 <get_fat+0x1ec>
c00030f4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030f8:	89 f5                	mov    ebp,esi
c00030fa:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030ff:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003102:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003105:	80 f9 02             	cmp    cl,0x2
c0003108:	75 35                	jne    c000313f <get_fat+0x198>
c000310a:	83 c0 ff             	add    eax,0xffffffff
c000310d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003112:	83 d2 ff             	adc    edx,0xffffffff
c0003115:	31 db                	xor    ebx,ebx
c0003117:	0f ac d0 09          	shrd   eax,edx,0x9
c000311b:	53                   	push   ebx
c000311c:	c1 ea 09             	shr    edx,0x9
c000311f:	51                   	push   ecx
c0003120:	52                   	push   edx
c0003121:	50                   	push   eax
c0003122:	e8 bd 40 02 00       	call   c00271e4 <__udivdi3>
c0003127:	83 c4 10             	add    esp,0x10
c000312a:	b9 01 00 00 00       	mov    ecx,0x1
c000312f:	39 c5                	cmp    ebp,eax
c0003131:	77 60                	ja     c0003193 <get_fat+0x1ec>
c0003133:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003138:	74 59                	je     c0003193 <get_fat+0x1ec>
c000313a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000313d:	eb 54                	jmp    c0003193 <get_fat+0x1ec>
c000313f:	80 f9 03             	cmp    cl,0x3
c0003142:	75 05                	jne    c0003149 <get_fat+0x1a2>
c0003144:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003147:	77 f1                	ja     c000313a <get_fat+0x193>
c0003149:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000314e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003152:	75 3f                	jne    c0003193 <get_fat+0x1ec>
c0003154:	31 c9                	xor    ecx,ecx
c0003156:	89 f2                	mov    edx,esi
c0003158:	89 f8                	mov    eax,edi
c000315a:	c1 ea 07             	shr    edx,0x7
c000315d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003160:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003163:	e8 b7 f2 ff ff       	call   c000241f <move_window>
c0003168:	85 c0                	test   eax,eax
c000316a:	0f 85 a3 fe ff ff    	jne    c0003013 <get_fat+0x6c>
c0003170:	c1 e6 02             	shl    esi,0x2
c0003173:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003179:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000317d:	e8 cc ea ff ff       	call   c0001c4e <ld_dword>
c0003182:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003187:	89 c1                	mov    ecx,eax
c0003189:	eb 08                	jmp    c0003193 <get_fat+0x1ec>
c000318b:	b9 01 00 00 00       	mov    ecx,0x1
c0003190:	89 c8                	mov    eax,ecx
c0003192:	c3                   	ret    
c0003193:	83 c4 1c             	add    esp,0x1c
c0003196:	89 c8                	mov    eax,ecx
c0003198:	5b                   	pop    ebx
c0003199:	5e                   	pop    esi
c000319a:	5f                   	pop    edi
c000319b:	5d                   	pop    ebp
c000319c:	c3                   	ret    

c000319d <dir_sdi>:
c000319d:	55                   	push   ebp
c000319e:	57                   	push   edi
c000319f:	56                   	push   esi
c00031a0:	53                   	push   ebx
c00031a1:	89 c3                	mov    ebx,eax
c00031a3:	83 ec 1c             	sub    esp,0x1c
c00031a6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031a8:	31 c0                	xor    eax,eax
c00031aa:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031ad:	0f 94 c0             	sete   al
c00031b0:	48                   	dec    eax
c00031b1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031b6:	05 00 00 00 10       	add    eax,0x10000000
c00031bb:	39 d0                	cmp    eax,edx
c00031bd:	77 0a                	ja     c00031c9 <dir_sdi+0x2c>
c00031bf:	b8 02 00 00 00       	mov    eax,0x2
c00031c4:	e9 c4 00 00 00       	jmp    c000328d <dir_sdi+0xf0>
c00031c9:	89 d6                	mov    esi,edx
c00031cb:	f6 c2 1f             	test   dl,0x1f
c00031ce:	75 ef                	jne    c00031bf <dir_sdi+0x22>
c00031d0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031d3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031d6:	85 c9                	test   ecx,ecx
c00031d8:	75 2d                	jne    c0003207 <dir_sdi+0x6a>
c00031da:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031dd:	77 1b                	ja     c00031fa <dir_sdi+0x5d>
c00031df:	89 f2                	mov    edx,esi
c00031e1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031e5:	c1 ea 05             	shr    edx,0x5
c00031e8:	39 c2                	cmp    edx,eax
c00031ea:	73 d3                	jae    c00031bf <dir_sdi+0x22>
c00031ec:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031ef:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031f2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031f5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031f8:	eb 4b                	jmp    c0003245 <dir_sdi+0xa8>
c00031fa:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031fd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003201:	85 c0                	test   eax,eax
c0003203:	74 da                	je     c00031df <dir_sdi+0x42>
c0003205:	89 c1                	mov    ecx,eax
c0003207:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000320b:	c1 e5 09             	shl    ebp,0x9
c000320e:	89 ca                	mov    edx,ecx
c0003210:	39 ee                	cmp    esi,ebp
c0003212:	72 1c                	jb     c0003230 <dir_sdi+0x93>
c0003214:	89 d8                	mov    eax,ebx
c0003216:	e8 8c fd ff ff       	call   c0002fa7 <get_fat>
c000321b:	89 c1                	mov    ecx,eax
c000321d:	83 f8 ff             	cmp    eax,0xffffffff
c0003220:	74 66                	je     c0003288 <dir_sdi+0xeb>
c0003222:	83 f8 01             	cmp    eax,0x1
c0003225:	76 98                	jbe    c00031bf <dir_sdi+0x22>
c0003227:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000322a:	76 93                	jbe    c00031bf <dir_sdi+0x22>
c000322c:	29 ee                	sub    esi,ebp
c000322e:	eb de                	jmp    c000320e <dir_sdi+0x71>
c0003230:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003234:	89 f8                	mov    eax,edi
c0003236:	e8 9f ec ff ff       	call   c0001eda <clst2sect>
c000323b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000323f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003242:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003245:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003248:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000324b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000324e:	89 d1                	mov    ecx,edx
c0003250:	09 c1                	or     ecx,eax
c0003252:	0f 84 67 ff ff ff    	je     c00031bf <dir_sdi+0x22>
c0003258:	89 f1                	mov    ecx,esi
c000325a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003262:	c1 e9 09             	shr    ecx,0x9
c0003265:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003269:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000326d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003271:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003274:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000327a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000327d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003281:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003284:	31 c0                	xor    eax,eax
c0003286:	eb 05                	jmp    c000328d <dir_sdi+0xf0>
c0003288:	b8 01 00 00 00       	mov    eax,0x1
c000328d:	83 c4 1c             	add    esp,0x1c
c0003290:	5b                   	pop    ebx
c0003291:	5e                   	pop    esi
c0003292:	5f                   	pop    edi
c0003293:	5d                   	pop    ebp
c0003294:	c3                   	ret    

c0003295 <create_chain>:
c0003295:	55                   	push   ebp
c0003296:	89 c5                	mov    ebp,eax
c0003298:	57                   	push   edi
c0003299:	56                   	push   esi
c000329a:	53                   	push   ebx
c000329b:	83 ec 1c             	sub    esp,0x1c
c000329e:	85 d2                	test   edx,edx
c00032a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032a4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032a6:	75 0e                	jne    c00032b6 <create_chain+0x21>
c00032a8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032ab:	85 ff                	test   edi,edi
c00032ad:	74 39                	je     c00032e8 <create_chain+0x53>
c00032af:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032b2:	77 39                	ja     c00032ed <create_chain+0x58>
c00032b4:	eb 32                	jmp    c00032e8 <create_chain+0x53>
c00032b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032ba:	e8 e8 fc ff ff       	call   c0002fa7 <get_fat>
c00032bf:	89 c3                	mov    ebx,eax
c00032c1:	83 f8 01             	cmp    eax,0x1
c00032c4:	77 0a                	ja     c00032d0 <create_chain+0x3b>
c00032c6:	bb 01 00 00 00       	mov    ebx,0x1
c00032cb:	e9 ba 01 00 00       	jmp    c000348a <create_chain+0x1f5>
c00032d0:	83 f8 ff             	cmp    eax,0xffffffff
c00032d3:	0f 84 62 01 00 00    	je     c000343b <create_chain+0x1a6>
c00032d9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032dc:	0f 87 a8 01 00 00    	ja     c000348a <create_chain+0x1f5>
c00032e2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032e6:	eb 05                	jmp    c00032ed <create_chain+0x58>
c00032e8:	bf 01 00 00 00       	mov    edi,0x1
c00032ed:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032f1:	75 07                	jne    c00032fa <create_chain+0x65>
c00032f3:	31 db                	xor    ebx,ebx
c00032f5:	e9 90 01 00 00       	jmp    c000348a <create_chain+0x1f5>
c00032fa:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032fd:	75 74                	jne    c0003373 <create_chain+0xde>
c00032ff:	b9 01 00 00 00       	mov    ecx,0x1
c0003304:	89 fa                	mov    edx,edi
c0003306:	89 f0                	mov    eax,esi
c0003308:	e8 2d f9 ff ff       	call   c0002c3a <find_bitmap>
c000330d:	89 c3                	mov    ebx,eax
c000330f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003312:	83 f8 fd             	cmp    eax,0xfffffffd
c0003315:	0f 87 6f 01 00 00    	ja     c000348a <create_chain+0x1f5>
c000331b:	83 ec 0c             	sub    esp,0xc
c000331e:	b9 01 00 00 00       	mov    ecx,0x1
c0003323:	6a 01                	push   0x1
c0003325:	89 da                	mov    edx,ebx
c0003327:	89 f0                	mov    eax,esi
c0003329:	e8 bf f9 ff ff       	call   c0002ced <change_bitmap>
c000332e:	83 c4 10             	add    esp,0x10
c0003331:	83 f8 02             	cmp    eax,0x2
c0003334:	74 90                	je     c00032c6 <create_chain+0x31>
c0003336:	83 f8 01             	cmp    eax,0x1
c0003339:	0f 84 fc 00 00 00    	je     c000343b <create_chain+0x1a6>
c000333f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003344:	75 09                	jne    c000334f <create_chain+0xba>
c0003346:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000334a:	e9 0c 01 00 00       	jmp    c000345b <create_chain+0x1c6>
c000334f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003353:	0f 85 e7 00 00 00    	jne    c0003440 <create_chain+0x1ab>
c0003359:	8d 57 01             	lea    edx,[edi+0x1]
c000335c:	39 da                	cmp    edx,ebx
c000335e:	0f 84 f7 00 00 00    	je     c000345b <create_chain+0x1c6>
c0003364:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003367:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000336b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000336e:	e9 cd 00 00 00       	jmp    c0003440 <create_chain+0x1ab>
c0003373:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003377:	75 41                	jne    c00033ba <create_chain+0x125>
c0003379:	8d 5f 01             	lea    ebx,[edi+0x1]
c000337c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000337f:	77 05                	ja     c0003386 <create_chain+0xf1>
c0003381:	bb 02 00 00 00       	mov    ebx,0x2
c0003386:	89 da                	mov    edx,ebx
c0003388:	89 e8                	mov    eax,ebp
c000338a:	e8 18 fc ff ff       	call   c0002fa7 <get_fat>
c000338f:	83 f8 01             	cmp    eax,0x1
c0003392:	0f 84 2e ff ff ff    	je     c00032c6 <create_chain+0x31>
c0003398:	83 f8 ff             	cmp    eax,0xffffffff
c000339b:	0f 84 9a 00 00 00    	je     c000343b <create_chain+0x1a6>
c00033a1:	85 c0                	test   eax,eax
c00033a3:	74 11                	je     c00033b6 <create_chain+0x121>
c00033a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033a8:	83 f8 01             	cmp    eax,0x1
c00033ab:	76 0d                	jbe    c00033ba <create_chain+0x125>
c00033ad:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033b0:	76 08                	jbe    c00033ba <create_chain+0x125>
c00033b2:	89 c7                	mov    edi,eax
c00033b4:	eb 04                	jmp    c00033ba <create_chain+0x125>
c00033b6:	85 db                	test   ebx,ebx
c00033b8:	75 38                	jne    c00033f2 <create_chain+0x15d>
c00033ba:	89 fb                	mov    ebx,edi
c00033bc:	43                   	inc    ebx
c00033bd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033c0:	77 0e                	ja     c00033d0 <create_chain+0x13b>
c00033c2:	83 ff 01             	cmp    edi,0x1
c00033c5:	0f 86 28 ff ff ff    	jbe    c00032f3 <create_chain+0x5e>
c00033cb:	bb 02 00 00 00       	mov    ebx,0x2
c00033d0:	89 da                	mov    edx,ebx
c00033d2:	89 e8                	mov    eax,ebp
c00033d4:	e8 ce fb ff ff       	call   c0002fa7 <get_fat>
c00033d9:	85 c0                	test   eax,eax
c00033db:	74 15                	je     c00033f2 <create_chain+0x15d>
c00033dd:	83 f8 01             	cmp    eax,0x1
c00033e0:	0f 84 e0 fe ff ff    	je     c00032c6 <create_chain+0x31>
c00033e6:	40                   	inc    eax
c00033e7:	74 52                	je     c000343b <create_chain+0x1a6>
c00033e9:	39 fb                	cmp    ebx,edi
c00033eb:	75 cf                	jne    c00033bc <create_chain+0x127>
c00033ed:	e9 01 ff ff ff       	jmp    c00032f3 <create_chain+0x5e>
c00033f2:	83 c9 ff             	or     ecx,0xffffffff
c00033f5:	89 da                	mov    edx,ebx
c00033f7:	89 f0                	mov    eax,esi
c00033f9:	e8 a4 f9 ff ff       	call   c0002da2 <put_fat>
c00033fe:	85 c0                	test   eax,eax
c0003400:	75 32                	jne    c0003434 <create_chain+0x19f>
c0003402:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003407:	74 11                	je     c000341a <create_chain+0x185>
c0003409:	89 d9                	mov    ecx,ebx
c000340b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000340f:	89 f0                	mov    eax,esi
c0003411:	e8 8c f9 ff ff       	call   c0002da2 <put_fat>
c0003416:	85 c0                	test   eax,eax
c0003418:	75 1a                	jne    c0003434 <create_chain+0x19f>
c000341a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000341d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003420:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003423:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003426:	39 d0                	cmp    eax,edx
c0003428:	77 04                	ja     c000342e <create_chain+0x199>
c000342a:	48                   	dec    eax
c000342b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000342e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003432:	eb 56                	jmp    c000348a <create_chain+0x1f5>
c0003434:	48                   	dec    eax
c0003435:	0f 85 8b fe ff ff    	jne    c00032c6 <create_chain+0x31>
c000343b:	83 cb ff             	or     ebx,0xffffffff
c000343e:	eb 4a                	jmp    c000348a <create_chain+0x1f5>
c0003440:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003444:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003447:	41                   	inc    ecx
c0003448:	39 d9                	cmp    ecx,ebx
c000344a:	75 19                	jne    c0003465 <create_chain+0x1d0>
c000344c:	b9 02 00 00 00       	mov    ecx,0x2
c0003451:	85 d2                	test   edx,edx
c0003453:	74 03                	je     c0003458 <create_chain+0x1c3>
c0003455:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003458:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000345b:	85 c0                	test   eax,eax
c000345d:	0f 85 63 fe ff ff    	jne    c00032c6 <create_chain+0x31>
c0003463:	eb b5                	jmp    c000341a <create_chain+0x185>
c0003465:	85 d2                	test   edx,edx
c0003467:	75 07                	jne    c0003470 <create_chain+0x1db>
c0003469:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003470:	89 d9                	mov    ecx,ebx
c0003472:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003476:	89 e8                	mov    eax,ebp
c0003478:	e8 bb fa ff ff       	call   c0002f38 <fill_last_frag>
c000347d:	85 c0                	test   eax,eax
c000347f:	75 b3                	jne    c0003434 <create_chain+0x19f>
c0003481:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003488:	eb 90                	jmp    c000341a <create_chain+0x185>
c000348a:	83 c4 1c             	add    esp,0x1c
c000348d:	89 d8                	mov    eax,ebx
c000348f:	5b                   	pop    ebx
c0003490:	5e                   	pop    esi
c0003491:	5f                   	pop    edi
c0003492:	5d                   	pop    ebp
c0003493:	c3                   	ret    

c0003494 <remove_chain>:
c0003494:	55                   	push   ebp
c0003495:	57                   	push   edi
c0003496:	56                   	push   esi
c0003497:	53                   	push   ebx
c0003498:	83 ec 1c             	sub    esp,0x1c
c000349b:	83 fa 01             	cmp    edx,0x1
c000349e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034a2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034a4:	77 0a                	ja     c00034b0 <remove_chain+0x1c>
c00034a6:	b8 02 00 00 00       	mov    eax,0x2
c00034ab:	e9 24 01 00 00       	jmp    c00035d4 <remove_chain+0x140>
c00034b0:	89 d6                	mov    esi,edx
c00034b2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034b5:	76 ef                	jbe    c00034a6 <remove_chain+0x12>
c00034b7:	89 c7                	mov    edi,eax
c00034b9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034be:	75 06                	jne    c00034c6 <remove_chain+0x32>
c00034c0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034c4:	eb 54                	jmp    c000351a <remove_chain+0x86>
c00034c6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034c9:	75 06                	jne    c00034d1 <remove_chain+0x3d>
c00034cb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034cf:	74 ef                	je     c00034c0 <remove_chain+0x2c>
c00034d1:	83 c9 ff             	or     ecx,0xffffffff
c00034d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034d8:	89 d8                	mov    eax,ebx
c00034da:	e8 c3 f8 ff ff       	call   c0002da2 <put_fat>
c00034df:	85 c0                	test   eax,eax
c00034e1:	74 dd                	je     c00034c0 <remove_chain+0x2c>
c00034e3:	e9 ec 00 00 00       	jmp    c00035d4 <remove_chain+0x140>
c00034e8:	83 f8 01             	cmp    eax,0x1
c00034eb:	74 b9                	je     c00034a6 <remove_chain+0x12>
c00034ed:	83 f8 ff             	cmp    eax,0xffffffff
c00034f0:	74 6d                	je     c000355f <remove_chain+0xcb>
c00034f2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f5:	75 6f                	jne    c0003566 <remove_chain+0xd2>
c00034f7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034fa:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034fd:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003500:	39 d0                	cmp    eax,edx
c0003502:	73 08                	jae    c000350c <remove_chain+0x78>
c0003504:	40                   	inc    eax
c0003505:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003509:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000350c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000350f:	39 e9                	cmp    ecx,ebp
c0003511:	75 64                	jne    c0003577 <remove_chain+0xe3>
c0003513:	89 ee                	mov    esi,ebp
c0003515:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003518:	76 0f                	jbe    c0003529 <remove_chain+0x95>
c000351a:	89 f2                	mov    edx,esi
c000351c:	89 f8                	mov    eax,edi
c000351e:	e8 84 fa ff ff       	call   c0002fa7 <get_fat>
c0003523:	89 c5                	mov    ebp,eax
c0003525:	85 c0                	test   eax,eax
c0003527:	75 bf                	jne    c00034e8 <remove_chain+0x54>
c0003529:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000352c:	0f 85 a0 00 00 00    	jne    c00035d2 <remove_chain+0x13e>
c0003532:	eb 6c                	jmp    c00035a0 <remove_chain+0x10c>
c0003534:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003537:	84 c0                	test   al,al
c0003539:	75 7d                	jne    c00035b8 <remove_chain+0x124>
c000353b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000353e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003542:	0f 84 86 00 00 00    	je     c00035ce <remove_chain+0x13a>
c0003548:	89 da                	mov    edx,ebx
c000354a:	89 f8                	mov    eax,edi
c000354c:	e8 56 fa ff ff       	call   c0002fa7 <get_fat>
c0003551:	83 f8 01             	cmp    eax,0x1
c0003554:	0f 86 4c ff ff ff    	jbe    c00034a6 <remove_chain+0x12>
c000355a:	83 f8 ff             	cmp    eax,0xffffffff
c000355d:	75 4e                	jne    c00035ad <remove_chain+0x119>
c000355f:	b8 01 00 00 00       	mov    eax,0x1
c0003564:	eb 6e                	jmp    c00035d4 <remove_chain+0x140>
c0003566:	31 c9                	xor    ecx,ecx
c0003568:	89 f2                	mov    edx,esi
c000356a:	89 d8                	mov    eax,ebx
c000356c:	e8 31 f8 ff ff       	call   c0002da2 <put_fat>
c0003571:	85 c0                	test   eax,eax
c0003573:	74 82                	je     c00034f7 <remove_chain+0x63>
c0003575:	eb 5d                	jmp    c00035d4 <remove_chain+0x140>
c0003577:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000357a:	75 1b                	jne    c0003597 <remove_chain+0x103>
c000357c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003580:	89 d8                	mov    eax,ebx
c0003582:	83 ec 0c             	sub    esp,0xc
c0003585:	6a 00                	push   0x0
c0003587:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000358b:	e8 5d f7 ff ff       	call   c0002ced <change_bitmap>
c0003590:	83 c4 10             	add    esp,0x10
c0003593:	85 c0                	test   eax,eax
c0003595:	75 3d                	jne    c00035d4 <remove_chain+0x140>
c0003597:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000359b:	e9 73 ff ff ff       	jmp    c0003513 <remove_chain+0x7f>
c00035a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035a5:	75 8d                	jne    c0003534 <remove_chain+0xa0>
c00035a7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035ab:	eb 25                	jmp    c00035d2 <remove_chain+0x13e>
c00035ad:	8d 53 01             	lea    edx,[ebx+0x1]
c00035b0:	89 c3                	mov    ebx,eax
c00035b2:	39 c2                	cmp    edx,eax
c00035b4:	74 88                	je     c000353e <remove_chain+0xaa>
c00035b6:	eb 1a                	jmp    c00035d2 <remove_chain+0x13e>
c00035b8:	3c 03                	cmp    al,0x3
c00035ba:	75 16                	jne    c00035d2 <remove_chain+0x13e>
c00035bc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035bf:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035c3:	77 0d                	ja     c00035d2 <remove_chain+0x13e>
c00035c5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035c8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035cc:	72 04                	jb     c00035d2 <remove_chain+0x13e>
c00035ce:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035d2:	31 c0                	xor    eax,eax
c00035d4:	83 c4 1c             	add    esp,0x1c
c00035d7:	5b                   	pop    ebx
c00035d8:	5e                   	pop    esi
c00035d9:	5f                   	pop    edi
c00035da:	5d                   	pop    ebp
c00035db:	c3                   	ret    

c00035dc <dir_clear>:
c00035dc:	55                   	push   ebp
c00035dd:	57                   	push   edi
c00035de:	56                   	push   esi
c00035df:	89 c6                	mov    esi,eax
c00035e1:	53                   	push   ebx
c00035e2:	83 ec 1c             	sub    esp,0x1c
c00035e5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035e9:	e8 9d ed ff ff       	call   c000238b <sync_window>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	0f 85 de 00 00 00    	jne    c00036d4 <dir_clear+0xf8>
c00035f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035fa:	89 f0                	mov    eax,esi
c00035fc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035ff:	e8 d6 e8 ff ff       	call   c0001eda <clst2sect>
c0003604:	b9 00 02 00 00       	mov    ecx,0x200
c0003609:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000360d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003611:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003614:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003617:	89 e8                	mov    eax,ebp
c0003619:	31 d2                	xor    edx,edx
c000361b:	e8 b5 e6 ff ff       	call   c0001cd5 <mem_set>
c0003620:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003624:	c1 e3 09             	shl    ebx,0x9
c0003627:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000362d:	76 1f                	jbe    c000364e <dir_clear+0x72>
c000362f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003634:	eb 18                	jmp    c000364e <dir_clear+0x72>
c0003636:	83 ec 0c             	sub    esp,0xc
c0003639:	53                   	push   ebx
c000363a:	e8 35 4e 00 00       	call   c0008474 <ff_memalloc>
c000363f:	83 c4 10             	add    esp,0x10
c0003642:	89 c7                	mov    edi,eax
c0003644:	85 c0                	test   eax,eax
c0003646:	0f 85 8f 00 00 00    	jne    c00036db <dir_clear+0xff>
c000364c:	d1 eb                	shr    ebx,1
c000364e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003654:	77 e0                	ja     c0003636 <dir_clear+0x5a>
c0003656:	31 db                	xor    ebx,ebx
c0003658:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000365c:	39 d8                	cmp    eax,ebx
c000365e:	76 66                	jbe    c00036c6 <dir_clear+0xea>
c0003660:	83 ec 0c             	sub    esp,0xc
c0003663:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003667:	6a 01                	push   0x1
c0003669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000366d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003671:	55                   	push   ebp
c0003672:	50                   	push   eax
c0003673:	e8 94 e5 ff ff       	call   c0001c0c <disk_write>
c0003678:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000367d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003682:	83 c4 20             	add    esp,0x20
c0003685:	85 c0                	test   eax,eax
c0003687:	75 3d                	jne    c00036c6 <dir_clear+0xea>
c0003689:	43                   	inc    ebx
c000368a:	eb cc                	jmp    c0003658 <dir_clear+0x7c>
c000368c:	83 ec 0c             	sub    esp,0xc
c000368f:	31 d2                	xor    edx,edx
c0003691:	55                   	push   ebp
c0003692:	89 d8                	mov    eax,ebx
c0003694:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003698:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000369c:	52                   	push   edx
c000369d:	50                   	push   eax
c000369e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036a2:	57                   	push   edi
c00036a3:	50                   	push   eax
c00036a4:	e8 63 e5 ff ff       	call   c0001c0c <disk_write>
c00036a9:	83 c4 20             	add    esp,0x20
c00036ac:	85 c0                	test   eax,eax
c00036ae:	75 0a                	jne    c00036ba <dir_clear+0xde>
c00036b0:	01 eb                	add    ebx,ebp
c00036b2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b6:	39 d8                	cmp    eax,ebx
c00036b8:	77 d2                	ja     c000368c <dir_clear+0xb0>
c00036ba:	83 ec 0c             	sub    esp,0xc
c00036bd:	57                   	push   edi
c00036be:	e8 c7 4d 00 00       	call   c000848a <ff_memfree>
c00036c3:	83 c4 10             	add    esp,0x10
c00036c6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ca:	39 d8                	cmp    eax,ebx
c00036cc:	0f 95 c0             	setne  al
c00036cf:	0f b6 c0             	movzx  eax,al
c00036d2:	eb 19                	jmp    c00036ed <dir_clear+0x111>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 12                	jmp    c00036ed <dir_clear+0x111>
c00036db:	89 d9                	mov    ecx,ebx
c00036dd:	31 d2                	xor    edx,edx
c00036df:	c1 eb 09             	shr    ebx,0x9
c00036e2:	e8 ee e5 ff ff       	call   c0001cd5 <mem_set>
c00036e7:	89 dd                	mov    ebp,ebx
c00036e9:	31 db                	xor    ebx,ebx
c00036eb:	eb c5                	jmp    c00036b2 <dir_clear+0xd6>
c00036ed:	83 c4 1c             	add    esp,0x1c
c00036f0:	5b                   	pop    ebx
c00036f1:	5e                   	pop    esi
c00036f2:	5f                   	pop    edi
c00036f3:	5d                   	pop    ebp
c00036f4:	c3                   	ret    

c00036f5 <dir_next>:
c00036f5:	55                   	push   ebp
c00036f6:	57                   	push   edi
c00036f7:	56                   	push   esi
c00036f8:	53                   	push   ebx
c00036f9:	89 c3                	mov    ebx,eax
c00036fb:	83 ec 1c             	sub    esp,0x1c
c00036fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003700:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003704:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003707:	8d 78 20             	lea    edi,[eax+0x20]
c000370a:	31 c0                	xor    eax,eax
c000370c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003710:	0f 94 c0             	sete   al
c0003713:	48                   	dec    eax
c0003714:	25 00 00 20 f0       	and    eax,0xf0200000
c0003719:	05 00 00 00 10       	add    eax,0x10000000
c000371e:	39 f8                	cmp    eax,edi
c0003720:	77 0e                	ja     c0003730 <dir_next+0x3b>
c0003722:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003729:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003730:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003733:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003736:	b8 04 00 00 00       	mov    eax,0x4
c000373b:	89 ce                	mov    esi,ecx
c000373d:	09 d6                	or     esi,edx
c000373f:	0f 84 da 00 00 00    	je     c000381f <dir_next+0x12a>
c0003745:	89 f8                	mov    eax,edi
c0003747:	25 ff 01 00 00       	and    eax,0x1ff
c000374c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003750:	0f 85 b9 00 00 00    	jne    c000380f <dir_next+0x11a>
c0003756:	83 c2 01             	add    edx,0x1
c0003759:	83 d1 00             	adc    ecx,0x0
c000375c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000375f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003762:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003765:	85 d2                	test   edx,edx
c0003767:	75 29                	jne    c0003792 <dir_next+0x9d>
c0003769:	89 fa                	mov    edx,edi
c000376b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000376f:	c1 ea 05             	shr    edx,0x5
c0003772:	39 c2                	cmp    edx,eax
c0003774:	0f 82 95 00 00 00    	jb     c000380f <dir_next+0x11a>
c000377a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003781:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003788:	b8 04 00 00 00       	mov    eax,0x4
c000378d:	e9 8d 00 00 00       	jmp    c000381f <dir_next+0x12a>
c0003792:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003796:	89 f9                	mov    ecx,edi
c0003798:	48                   	dec    eax
c0003799:	c1 e9 09             	shr    ecx,0x9
c000379c:	85 c8                	test   eax,ecx
c000379e:	75 6f                	jne    c000380f <dir_next+0x11a>
c00037a0:	89 d8                	mov    eax,ebx
c00037a2:	e8 00 f8 ff ff       	call   c0002fa7 <get_fat>
c00037a7:	89 c6                	mov    esi,eax
c00037a9:	83 f8 01             	cmp    eax,0x1
c00037ac:	77 07                	ja     c00037b5 <dir_next+0xc0>
c00037ae:	b8 02 00 00 00       	mov    eax,0x2
c00037b3:	eb 6a                	jmp    c000381f <dir_next+0x12a>
c00037b5:	83 f8 ff             	cmp    eax,0xffffffff
c00037b8:	75 07                	jne    c00037c1 <dir_next+0xcc>
c00037ba:	b8 01 00 00 00       	mov    eax,0x1
c00037bf:	eb 5e                	jmp    c000381f <dir_next+0x12a>
c00037c1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037c4:	77 37                	ja     c00037fd <dir_next+0x108>
c00037c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037cb:	74 ad                	je     c000377a <dir_next+0x85>
c00037cd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037d0:	89 d8                	mov    eax,ebx
c00037d2:	e8 be fa ff ff       	call   c0003295 <create_chain>
c00037d7:	89 c6                	mov    esi,eax
c00037d9:	b8 07 00 00 00       	mov    eax,0x7
c00037de:	85 f6                	test   esi,esi
c00037e0:	74 3d                	je     c000381f <dir_next+0x12a>
c00037e2:	83 fe 01             	cmp    esi,0x1
c00037e5:	74 c7                	je     c00037ae <dir_next+0xb9>
c00037e7:	83 fe ff             	cmp    esi,0xffffffff
c00037ea:	74 ce                	je     c00037ba <dir_next+0xc5>
c00037ec:	89 f2                	mov    edx,esi
c00037ee:	89 e8                	mov    eax,ebp
c00037f0:	e8 e7 fd ff ff       	call   c00035dc <dir_clear>
c00037f5:	85 c0                	test   eax,eax
c00037f7:	75 c1                	jne    c00037ba <dir_next+0xc5>
c00037f9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037fd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003800:	89 f2                	mov    edx,esi
c0003802:	89 e8                	mov    eax,ebp
c0003804:	e8 d1 e6 ff ff       	call   c0001eda <clst2sect>
c0003809:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000380c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000380f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003813:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003816:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000381a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000381d:	31 c0                	xor    eax,eax
c000381f:	83 c4 1c             	add    esp,0x1c
c0003822:	5b                   	pop    ebx
c0003823:	5e                   	pop    esi
c0003824:	5f                   	pop    edi
c0003825:	5d                   	pop    ebp
c0003826:	c3                   	ret    

c0003827 <load_xdir>:
c0003827:	55                   	push   ebp
c0003828:	57                   	push   edi
c0003829:	56                   	push   esi
c000382a:	89 c6                	mov    esi,eax
c000382c:	53                   	push   ebx
c000382d:	83 ec 1c             	sub    esp,0x1c
c0003830:	8b 00                	mov    eax,DWORD PTR [eax]
c0003832:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003835:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003838:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000383b:	e8 df eb ff ff       	call   c000241f <move_window>
c0003840:	89 c3                	mov    ebx,eax
c0003842:	85 c0                	test   eax,eax
c0003844:	0f 85 0c 01 00 00    	jne    c0003956 <load_xdir+0x12f>
c000384a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000384d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003850:	0f 85 fb 00 00 00    	jne    c0003951 <load_xdir+0x12a>
c0003856:	89 f8                	mov    eax,edi
c0003858:	b9 20 00 00 00       	mov    ecx,0x20
c000385d:	e8 5e e4 ff ff       	call   c0001cc0 <mem_cpy>
c0003862:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003866:	40                   	inc    eax
c0003867:	c1 e0 05             	shl    eax,0x5
c000386a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000386e:	83 e8 60             	sub    eax,0x60
c0003871:	3d 00 02 00 00       	cmp    eax,0x200
c0003876:	0f 87 d5 00 00 00    	ja     c0003951 <load_xdir+0x12a>
c000387c:	31 d2                	xor    edx,edx
c000387e:	89 f0                	mov    eax,esi
c0003880:	e8 70 fe ff ff       	call   c00036f5 <dir_next>
c0003885:	89 c3                	mov    ebx,eax
c0003887:	83 f8 04             	cmp    eax,0x4
c000388a:	0f 84 c1 00 00 00    	je     c0003951 <load_xdir+0x12a>
c0003890:	85 c0                	test   eax,eax
c0003892:	0f 85 be 00 00 00    	jne    c0003956 <load_xdir+0x12f>
c0003898:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000389e:	8b 06                	mov    eax,DWORD PTR [esi]
c00038a0:	e8 7a eb ff ff       	call   c000241f <move_window>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	85 c0                	test   eax,eax
c00038a9:	0f 85 a7 00 00 00    	jne    c0003956 <load_xdir+0x12f>
c00038af:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038b5:	0f 85 96 00 00 00    	jne    c0003951 <load_xdir+0x12a>
c00038bb:	8d 47 20             	lea    eax,[edi+0x20]
c00038be:	b9 20 00 00 00       	mov    ecx,0x20
c00038c3:	e8 f8 e3 ff ff       	call   c0001cc0 <mem_cpy>
c00038c8:	31 d2                	xor    edx,edx
c00038ca:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00038d3:	83 c0 2c             	add    eax,0x2c
c00038d6:	f7 f1                	div    ecx
c00038d8:	c1 e0 05             	shl    eax,0x5
c00038db:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038df:	77 70                	ja     c0003951 <load_xdir+0x12a>
c00038e1:	bd 40 00 00 00       	mov    ebp,0x40
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 f0                	mov    eax,esi
c00038ea:	e8 06 fe ff ff       	call   c00036f5 <dir_next>
c00038ef:	89 c3                	mov    ebx,eax
c00038f1:	83 f8 04             	cmp    eax,0x4
c00038f4:	74 5b                	je     c0003951 <load_xdir+0x12a>
c00038f6:	85 c0                	test   eax,eax
c00038f8:	75 5c                	jne    c0003956 <load_xdir+0x12f>
c00038fa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038fd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003900:	8b 06                	mov    eax,DWORD PTR [esi]
c0003902:	e8 18 eb ff ff       	call   c000241f <move_window>
c0003907:	89 c3                	mov    ebx,eax
c0003909:	85 c0                	test   eax,eax
c000390b:	75 49                	jne    c0003956 <load_xdir+0x12f>
c000390d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003910:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003913:	75 3c                	jne    c0003951 <load_xdir+0x12a>
c0003915:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000391b:	77 0d                	ja     c000392a <load_xdir+0x103>
c000391d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003920:	b9 20 00 00 00       	mov    ecx,0x20
c0003925:	e8 96 e3 ff ff       	call   c0001cc0 <mem_cpy>
c000392a:	83 c5 20             	add    ebp,0x20
c000392d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003931:	77 b3                	ja     c00038e6 <load_xdir+0xbf>
c0003933:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003939:	77 1b                	ja     c0003956 <load_xdir+0x12f>
c000393b:	89 f8                	mov    eax,edi
c000393d:	e8 cd e7 ff ff       	call   c000210f <xdir_sum>
c0003942:	89 c1                	mov    ecx,eax
c0003944:	8d 47 02             	lea    eax,[edi+0x2]
c0003947:	e8 f5 e2 ff ff       	call   c0001c41 <ld_word>
c000394c:	66 39 c1             	cmp    cx,ax
c000394f:	74 05                	je     c0003956 <load_xdir+0x12f>
c0003951:	bb 02 00 00 00       	mov    ebx,0x2
c0003956:	83 c4 1c             	add    esp,0x1c
c0003959:	89 d8                	mov    eax,ebx
c000395b:	5b                   	pop    ebx
c000395c:	5e                   	pop    esi
c000395d:	5f                   	pop    edi
c000395e:	5d                   	pop    ebp
c000395f:	c3                   	ret    

c0003960 <load_obj_xdir>:
c0003960:	53                   	push   ebx
c0003961:	89 c3                	mov    ebx,eax
c0003963:	83 ec 08             	sub    esp,0x8
c0003966:	8b 02                	mov    eax,DWORD PTR [edx]
c0003968:	89 03                	mov    DWORD PTR [ebx],eax
c000396a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000396d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003970:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003973:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003976:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003979:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003980:	30 c0                	xor    al,al
c0003982:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003989:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000398c:	89 d8                	mov    eax,ebx
c000398e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003991:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003994:	e8 04 f8 ff ff       	call   c000319d <dir_sdi>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 0b                	jne    c00039a8 <load_obj_xdir+0x48>
c000399d:	89 d8                	mov    eax,ebx
c000399f:	83 c4 08             	add    esp,0x8
c00039a2:	5b                   	pop    ebx
c00039a3:	e9 7f fe ff ff       	jmp    c0003827 <load_xdir>
c00039a8:	83 c4 08             	add    esp,0x8
c00039ab:	5b                   	pop    ebx
c00039ac:	c3                   	ret    

c00039ad <dir_read>:
c00039ad:	55                   	push   ebp
c00039ae:	bd 04 00 00 00       	mov    ebp,0x4
c00039b3:	57                   	push   edi
c00039b4:	56                   	push   esi
c00039b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ba:	53                   	push   ebx
c00039bb:	89 c3                	mov    ebx,eax
c00039bd:	83 ec 1c             	sub    esp,0x1c
c00039c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039c4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039c6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039cb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ce:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039d1:	89 c8                	mov    eax,ecx
c00039d3:	09 d0                	or     eax,edx
c00039d5:	0f 84 25 01 00 00    	je     c0003b00 <dir_read+0x153>
c00039db:	89 f8                	mov    eax,edi
c00039dd:	e8 3d ea ff ff       	call   c000241f <move_window>
c00039e2:	89 c5                	mov    ebp,eax
c00039e4:	85 c0                	test   eax,eax
c00039e6:	0f 85 23 01 00 00    	jne    c0003b0f <dir_read+0x162>
c00039ec:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039ef:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039f1:	84 c9                	test   cl,cl
c00039f3:	0f 84 11 01 00 00    	je     c0003b0a <dir_read+0x15d>
c00039f9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039fc:	75 48                	jne    c0003a46 <dir_read+0x99>
c00039fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a03:	74 10                	je     c0003a15 <dir_read+0x68>
c0003a05:	80 f9 83             	cmp    cl,0x83
c0003a08:	0f 85 dd 00 00 00    	jne    c0003aeb <dir_read+0x13e>
c0003a0e:	31 ed                	xor    ebp,ebp
c0003a10:	e9 08 01 00 00       	jmp    c0003b1d <dir_read+0x170>
c0003a15:	80 f9 85             	cmp    cl,0x85
c0003a18:	0f 85 cd 00 00 00    	jne    c0003aeb <dir_read+0x13e>
c0003a1e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a21:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a24:	89 d8                	mov    eax,ebx
c0003a26:	e8 fc fd ff ff       	call   c0003827 <load_xdir>
c0003a2b:	89 c5                	mov    ebp,eax
c0003a2d:	85 c0                	test   eax,eax
c0003a2f:	0f 85 da 00 00 00    	jne    c0003b0f <dir_read+0x162>
c0003a35:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a38:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a3b:	83 e0 3f             	and    eax,0x3f
c0003a3e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a41:	e9 d7 00 00 00       	jmp    c0003b1d <dir_read+0x170>
c0003a46:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a49:	83 e0 3f             	and    eax,0x3f
c0003a4c:	80 f9 2e             	cmp    cl,0x2e
c0003a4f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a53:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a56:	0f 84 8a 00 00 00    	je     c0003ae6 <dir_read+0x139>
c0003a5c:	80 f9 e5             	cmp    cl,0xe5
c0003a5f:	0f 84 81 00 00 00    	je     c0003ae6 <dir_read+0x139>
c0003a65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a69:	83 e0 1f             	and    eax,0x1f
c0003a6c:	83 f8 08             	cmp    eax,0x8
c0003a6f:	0f 94 c0             	sete   al
c0003a72:	0f b6 c0             	movzx  eax,al
c0003a75:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a79:	75 6b                	jne    c0003ae6 <dir_read+0x139>
c0003a7b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a80:	75 44                	jne    c0003ac6 <dir_read+0x119>
c0003a82:	f6 c1 40             	test   cl,0x40
c0003a85:	74 12                	je     c0003a99 <dir_read+0xec>
c0003a87:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a8a:	83 e1 bf             	and    ecx,0xffffffbf
c0003a8d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a91:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a94:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a97:	eb 06                	jmp    c0003a9f <dir_read+0xf2>
c0003a99:	89 f0                	mov    eax,esi
c0003a9b:	38 c8                	cmp    al,cl
c0003a9d:	75 47                	jne    c0003ae6 <dir_read+0x139>
c0003a9f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003aa3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aa8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003aab:	75 3e                	jne    c0003aeb <dir_read+0x13e>
c0003aad:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ab1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ab4:	e8 8a e4 ff ff       	call   c0001f43 <pick_lfn>
c0003ab9:	85 c0                	test   eax,eax
c0003abb:	74 2e                	je     c0003aeb <dir_read+0x13e>
c0003abd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ac1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ac4:	eb 25                	jmp    c0003aeb <dir_read+0x13e>
c0003ac6:	89 f0                	mov    eax,esi
c0003ac8:	84 c0                	test   al,al
c0003aca:	75 11                	jne    c0003add <dir_read+0x130>
c0003acc:	89 d0                	mov    eax,edx
c0003ace:	e8 2a e6 ff ff       	call   c00020fd <sum_sfn>
c0003ad3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003ad7:	0f 84 31 ff ff ff    	je     c0003a0e <dir_read+0x61>
c0003add:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003ae4:	eb 37                	jmp    c0003b1d <dir_read+0x170>
c0003ae6:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aeb:	31 d2                	xor    edx,edx
c0003aed:	89 d8                	mov    eax,ebx
c0003aef:	e8 01 fc ff ff       	call   c00036f5 <dir_next>
c0003af4:	89 c5                	mov    ebp,eax
c0003af6:	85 c0                	test   eax,eax
c0003af8:	0f 84 cd fe ff ff    	je     c00039cb <dir_read+0x1e>
c0003afe:	eb 0f                	jmp    c0003b0f <dir_read+0x162>
c0003b00:	85 ed                	test   ebp,ebp
c0003b02:	0f 84 06 ff ff ff    	je     c0003a0e <dir_read+0x61>
c0003b08:	eb 05                	jmp    c0003b0f <dir_read+0x162>
c0003b0a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b0f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b16:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b1d:	83 c4 1c             	add    esp,0x1c
c0003b20:	89 e8                	mov    eax,ebp
c0003b22:	5b                   	pop    ebx
c0003b23:	5e                   	pop    esi
c0003b24:	5f                   	pop    edi
c0003b25:	5d                   	pop    ebp
c0003b26:	c3                   	ret    

c0003b27 <dir_alloc>:
c0003b27:	55                   	push   ebp
c0003b28:	89 d5                	mov    ebp,edx
c0003b2a:	57                   	push   edi
c0003b2b:	31 d2                	xor    edx,edx
c0003b2d:	56                   	push   esi
c0003b2e:	53                   	push   ebx
c0003b2f:	89 c3                	mov    ebx,eax
c0003b31:	83 ec 0c             	sub    esp,0xc
c0003b34:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b36:	e8 62 f6 ff ff       	call   c000319d <dir_sdi>
c0003b3b:	85 c0                	test   eax,eax
c0003b3d:	75 4e                	jne    c0003b8d <dir_alloc+0x66>
c0003b3f:	31 f6                	xor    esi,esi
c0003b41:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b44:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b47:	89 f8                	mov    eax,edi
c0003b49:	e8 d1 e8 ff ff       	call   c000241f <move_window>
c0003b4e:	85 c0                	test   eax,eax
c0003b50:	75 3b                	jne    c0003b8d <dir_alloc+0x66>
c0003b52:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b55:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b58:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b5a:	75 07                	jne    c0003b63 <dir_alloc+0x3c>
c0003b5c:	f7 d2                	not    edx
c0003b5e:	c0 ea 07             	shr    dl,0x7
c0003b61:	eb 0d                	jmp    c0003b70 <dir_alloc+0x49>
c0003b63:	84 d2                	test   dl,dl
c0003b65:	0f 94 c1             	sete   cl
c0003b68:	80 fa e5             	cmp    dl,0xe5
c0003b6b:	0f 94 c2             	sete   dl
c0003b6e:	09 ca                	or     edx,ecx
c0003b70:	84 d2                	test   dl,dl
c0003b72:	74 07                	je     c0003b7b <dir_alloc+0x54>
c0003b74:	46                   	inc    esi
c0003b75:	39 ee                	cmp    esi,ebp
c0003b77:	75 04                	jne    c0003b7d <dir_alloc+0x56>
c0003b79:	eb 1c                	jmp    c0003b97 <dir_alloc+0x70>
c0003b7b:	31 f6                	xor    esi,esi
c0003b7d:	ba 01 00 00 00       	mov    edx,0x1
c0003b82:	89 d8                	mov    eax,ebx
c0003b84:	e8 6c fb ff ff       	call   c00036f5 <dir_next>
c0003b89:	85 c0                	test   eax,eax
c0003b8b:	74 b4                	je     c0003b41 <dir_alloc+0x1a>
c0003b8d:	83 f8 04             	cmp    eax,0x4
c0003b90:	75 05                	jne    c0003b97 <dir_alloc+0x70>
c0003b92:	b8 07 00 00 00       	mov    eax,0x7
c0003b97:	83 c4 0c             	add    esp,0xc
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	5d                   	pop    ebp
c0003b9e:	c3                   	ret    

c0003b9f <store_xdir>:
c0003b9f:	55                   	push   ebp
c0003ba0:	57                   	push   edi
c0003ba1:	89 c7                	mov    edi,eax
c0003ba3:	56                   	push   esi
c0003ba4:	53                   	push   ebx
c0003ba5:	83 ec 0c             	sub    esp,0xc
c0003ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003baa:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bad:	89 e8                	mov    eax,ebp
c0003baf:	e8 5b e5 ff ff       	call   c000210f <xdir_sum>
c0003bb4:	0f b7 d0             	movzx  edx,ax
c0003bb7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bba:	e8 f4 e0 ff ff       	call   c0001cb3 <st_word>
c0003bbf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bc3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bc6:	89 f8                	mov    eax,edi
c0003bc8:	e8 d0 f5 ff ff       	call   c000319d <dir_sdi>
c0003bcd:	89 c6                	mov    esi,eax
c0003bcf:	85 f6                	test   esi,esi
c0003bd1:	75 3d                	jne    c0003c10 <store_xdir+0x71>
c0003bd3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bd6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bd9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdb:	e8 3f e8 ff ff       	call   c000241f <move_window>
c0003be0:	89 c6                	mov    esi,eax
c0003be2:	85 c0                	test   eax,eax
c0003be4:	75 2a                	jne    c0003c10 <store_xdir+0x71>
c0003be6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003be9:	b9 20 00 00 00       	mov    ecx,0x20
c0003bee:	89 ea                	mov    edx,ebp
c0003bf0:	e8 cb e0 ff ff       	call   c0001cc0 <mem_cpy>
c0003bf5:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bf7:	85 db                	test   ebx,ebx
c0003bf9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003bfd:	74 11                	je     c0003c10 <store_xdir+0x71>
c0003bff:	31 d2                	xor    edx,edx
c0003c01:	89 f8                	mov    eax,edi
c0003c03:	83 c5 20             	add    ebp,0x20
c0003c06:	e8 ea fa ff ff       	call   c00036f5 <dir_next>
c0003c0b:	4b                   	dec    ebx
c0003c0c:	89 c6                	mov    esi,eax
c0003c0e:	eb bf                	jmp    c0003bcf <store_xdir+0x30>
c0003c10:	89 f0                	mov    eax,esi
c0003c12:	83 fe 02             	cmp    esi,0x2
c0003c15:	76 05                	jbe    c0003c1c <store_xdir+0x7d>
c0003c17:	b8 02 00 00 00       	mov    eax,0x2
c0003c1c:	83 c4 0c             	add    esp,0xc
c0003c1f:	5b                   	pop    ebx
c0003c20:	5e                   	pop    esi
c0003c21:	5f                   	pop    edi
c0003c22:	5d                   	pop    ebp
c0003c23:	c3                   	ret    

c0003c24 <dir_remove>:
c0003c24:	57                   	push   edi
c0003c25:	56                   	push   esi
c0003c26:	53                   	push   ebx
c0003c27:	89 c3                	mov    ebx,eax
c0003c29:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c2c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c2e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c31:	83 fa ff             	cmp    edx,0xffffffff
c0003c34:	74 09                	je     c0003c3f <dir_remove+0x1b>
c0003c36:	e8 62 f5 ff ff       	call   c000319d <dir_sdi>
c0003c3b:	85 c0                	test   eax,eax
c0003c3d:	75 41                	jne    c0003c80 <dir_remove+0x5c>
c0003c3f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c42:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c45:	89 f0                	mov    eax,esi
c0003c47:	e8 d3 e7 ff ff       	call   c000241f <move_window>
c0003c4c:	85 c0                	test   eax,eax
c0003c4e:	75 26                	jne    c0003c76 <dir_remove+0x52>
c0003c50:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c53:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c56:	75 05                	jne    c0003c5d <dir_remove+0x39>
c0003c58:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c5b:	eb 03                	jmp    c0003c60 <dir_remove+0x3c>
c0003c5d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c64:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c67:	73 17                	jae    c0003c80 <dir_remove+0x5c>
c0003c69:	31 d2                	xor    edx,edx
c0003c6b:	89 d8                	mov    eax,ebx
c0003c6d:	e8 83 fa ff ff       	call   c00036f5 <dir_next>
c0003c72:	85 c0                	test   eax,eax
c0003c74:	74 c9                	je     c0003c3f <dir_remove+0x1b>
c0003c76:	83 f8 04             	cmp    eax,0x4
c0003c79:	75 05                	jne    c0003c80 <dir_remove+0x5c>
c0003c7b:	b8 02 00 00 00       	mov    eax,0x2
c0003c80:	5b                   	pop    ebx
c0003c81:	5e                   	pop    esi
c0003c82:	5f                   	pop    edi
c0003c83:	c3                   	ret    

c0003c84 <create_name>:
c0003c84:	55                   	push   ebp
c0003c85:	89 d5                	mov    ebp,edx
c0003c87:	57                   	push   edi
c0003c88:	89 c7                	mov    edi,eax
c0003c8a:	56                   	push   esi
c0003c8b:	31 f6                	xor    esi,esi
c0003c8d:	53                   	push   ebx
c0003c8e:	83 ec 3c             	sub    esp,0x3c
c0003c91:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c93:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c97:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c99:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ca0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ca4:	e8 72 e0 ff ff       	call   c0001d1b <tchar2uni>
c0003ca9:	89 c3                	mov    ebx,eax
c0003cab:	83 f8 ff             	cmp    eax,0xffffffff
c0003cae:	75 0a                	jne    c0003cba <create_name+0x36>
c0003cb0:	b8 06 00 00 00       	mov    eax,0x6
c0003cb5:	e9 9e 02 00 00       	jmp    c0003f58 <create_name+0x2d4>
c0003cba:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cbf:	76 0c                	jbe    c0003ccd <create_name+0x49>
c0003cc1:	c1 e8 10             	shr    eax,0x10
c0003cc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cc8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ccc:	46                   	inc    esi
c0003ccd:	66 83 fb 1f          	cmp    bx,0x1f
c0003cd1:	76 4f                	jbe    c0003d22 <create_name+0x9e>
c0003cd3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cd7:	74 35                	je     c0003d0e <create_name+0x8a>
c0003cd9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cdd:	74 2f                	je     c0003d0e <create_name+0x8a>
c0003cdf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ce3:	77 11                	ja     c0003cf6 <create_name+0x72>
c0003ce5:	0f b7 d3             	movzx  edx,bx
c0003ce8:	b8 92 9d 02 c0       	mov    eax,0xc0029d92
c0003ced:	e8 11 e0 ff ff       	call   c0001d03 <chk_chr>
c0003cf2:	85 c0                	test   eax,eax
c0003cf4:	75 ba                	jne    c0003cb0 <create_name+0x2c>
c0003cf6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003cfc:	77 b2                	ja     c0003cb0 <create_name+0x2c>
c0003cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d02:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d06:	46                   	inc    esi
c0003d07:	eb 97                	jmp    c0003ca0 <create_name+0x1c>
c0003d09:	40                   	inc    eax
c0003d0a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d12:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d14:	80 fa 2f             	cmp    dl,0x2f
c0003d17:	74 f0                	je     c0003d09 <create_name+0x85>
c0003d19:	80 fa 5c             	cmp    dl,0x5c
c0003d1c:	74 eb                	je     c0003d09 <create_name+0x85>
c0003d1e:	31 db                	xor    ebx,ebx
c0003d20:	eb 02                	jmp    c0003d24 <create_name+0xa0>
c0003d22:	b3 04                	mov    bl,0x4
c0003d24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d28:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d2b:	85 f6                	test   esi,esi
c0003d2d:	74 18                	je     c0003d47 <create_name+0xc3>
c0003d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d33:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d38:	66 83 f8 20          	cmp    ax,0x20
c0003d3c:	74 06                	je     c0003d44 <create_name+0xc0>
c0003d3e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d42:	75 03                	jne    c0003d47 <create_name+0xc3>
c0003d44:	4e                   	dec    esi
c0003d45:	eb e4                	jmp    c0003d2b <create_name+0xa7>
c0003d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d4b:	31 ed                	xor    ebp,ebp
c0003d4d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d53:	85 f6                	test   esi,esi
c0003d55:	0f 84 55 ff ff ff    	je     c0003cb0 <create_name+0x2c>
c0003d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d5f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d62:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d66:	66 83 f8 20          	cmp    ax,0x20
c0003d6a:	75 04                	jne    c0003d70 <create_name+0xec>
c0003d6c:	89 d5                	mov    ebp,edx
c0003d6e:	eb eb                	jmp    c0003d5b <create_name+0xd7>
c0003d70:	85 ed                	test   ebp,ebp
c0003d72:	75 06                	jne    c0003d7a <create_name+0xf6>
c0003d74:	66 83 f8 2e          	cmp    ax,0x2e
c0003d78:	75 08                	jne    c0003d82 <create_name+0xfe>
c0003d7a:	83 cb 03             	or     ebx,0x3
c0003d7d:	eb 03                	jmp    c0003d82 <create_name+0xfe>
c0003d7f:	4e                   	dec    esi
c0003d80:	74 0c                	je     c0003d8e <create_name+0x10a>
c0003d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d86:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d8c:	75 f1                	jne    c0003d7f <create_name+0xfb>
c0003d8e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d93:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d96:	ba 20 00 00 00       	mov    edx,0x20
c0003d9b:	e8 35 df ff ff       	call   c0001cd5 <mem_set>
c0003da0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003da8:	31 c9                	xor    ecx,ecx
c0003daa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003daf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003db2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dba:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dbe:	66 85 ed             	test   bp,bp
c0003dc1:	0f 84 30 01 00 00    	je     c0003ef7 <create_name+0x273>
c0003dc7:	66 83 fd 20          	cmp    bp,0x20
c0003dcb:	74 10                	je     c0003ddd <create_name+0x159>
c0003dcd:	66 83 fd 2e          	cmp    bp,0x2e
c0003dd1:	75 13                	jne    c0003de6 <create_name+0x162>
c0003dd3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd7:	0f 84 6b 01 00 00    	je     c0003f48 <create_name+0x2c4>
c0003ddd:	83 cb 03             	or     ebx,0x3
c0003de0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003de4:	eb c9                	jmp    c0003daf <create_name+0x12b>
c0003de6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dea:	73 0b                	jae    c0003df7 <create_name+0x173>
c0003dec:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df0:	75 47                	jne    c0003e39 <create_name+0x1b5>
c0003df2:	e9 51 01 00 00       	jmp    c0003f48 <create_name+0x2c4>
c0003df7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003dfc:	75 10                	jne    c0003e0e <create_name+0x18a>
c0003dfe:	83 cb 03             	or     ebx,0x3
c0003e01:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e09:	e9 e9 00 00 00       	jmp    c0003ef7 <create_name+0x273>
c0003e0e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e12:	74 0d                	je     c0003e21 <create_name+0x19d>
c0003e14:	83 cb 03             	or     ebx,0x3
c0003e17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1b:	0f 87 d6 00 00 00    	ja     c0003ef7 <create_name+0x273>
c0003e21:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e26:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e2a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e32:	b9 08 00 00 00       	mov    ecx,0x8
c0003e37:	eb a7                	jmp    c0003de0 <create_name+0x15c>
c0003e39:	66 83 fd 7f          	cmp    bp,0x7f
c0003e3d:	76 68                	jbe    c0003ea7 <create_name+0x223>
c0003e3f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e43:	88 da                	mov    dl,bl
c0003e45:	83 ca 02             	or     edx,0x2
c0003e48:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e4c:	50                   	push   eax
c0003e4d:	50                   	push   eax
c0003e4e:	68 b5 01 00 00       	push   0x1b5
c0003e53:	55                   	push   ebp
c0003e54:	e8 48 46 00 00       	call   c00084a1 <ff_uni2oem>
c0003e59:	83 c4 10             	add    esp,0x10
c0003e5c:	89 c5                	mov    ebp,eax
c0003e5e:	a8 80                	test   al,0x80
c0003e60:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e64:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e68:	74 0c                	je     c0003e76 <create_name+0x1f2>
c0003e6a:	83 e5 7f             	and    ebp,0x7f
c0003e6d:	0f b6 ad e0 9c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6320]
c0003e74:	eb 2a                	jmp    c0003ea0 <create_name+0x21c>
c0003e76:	66 3d ff 00          	cmp    ax,0xff
c0003e7a:	76 24                	jbe    c0003ea0 <create_name+0x21c>
c0003e7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e80:	48                   	dec    eax
c0003e81:	39 c8                	cmp    eax,ecx
c0003e83:	77 0c                	ja     c0003e91 <create_name+0x20d>
c0003e85:	83 cb 03             	or     ebx,0x3
c0003e88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e8c:	e9 4f ff ff ff       	jmp    c0003de0 <create_name+0x15c>
c0003e91:	89 e8                	mov    eax,ebp
c0003e93:	88 d3                	mov    bl,dl
c0003e95:	66 c1 e8 08          	shr    ax,0x8
c0003e99:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e9d:	41                   	inc    ecx
c0003e9e:	eb 4b                	jmp    c0003eeb <create_name+0x267>
c0003ea0:	88 d3                	mov    bl,dl
c0003ea2:	66 85 ed             	test   bp,bp
c0003ea5:	74 19                	je     c0003ec0 <create_name+0x23c>
c0003ea7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003eab:	0f b7 d5             	movzx  edx,bp
c0003eae:	b8 9b 9d 02 c0       	mov    eax,0xc0029d9b
c0003eb3:	e8 4b de ff ff       	call   c0001d03 <chk_chr>
c0003eb8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ebc:	85 c0                	test   eax,eax
c0003ebe:	74 0a                	je     c0003eca <create_name+0x246>
c0003ec0:	83 cb 03             	or     ebx,0x3
c0003ec3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ec8:	eb 21                	jmp    c0003eeb <create_name+0x267>
c0003eca:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ecd:	66 83 f8 19          	cmp    ax,0x19
c0003ed1:	77 07                	ja     c0003eda <create_name+0x256>
c0003ed3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ed8:	eb 11                	jmp    c0003eeb <create_name+0x267>
c0003eda:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003edd:	66 83 f8 19          	cmp    ax,0x19
c0003ee1:	77 08                	ja     c0003eeb <create_name+0x267>
c0003ee3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ee8:	83 ed 20             	sub    ebp,0x20
c0003eeb:	89 e8                	mov    eax,ebp
c0003eed:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ef1:	41                   	inc    ecx
c0003ef2:	e9 e9 fe ff ff       	jmp    c0003de0 <create_name+0x15c>
c0003ef7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003efb:	75 04                	jne    c0003f01 <create_name+0x27d>
c0003efd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f01:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f06:	75 05                	jne    c0003f0d <create_name+0x289>
c0003f08:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f0d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f11:	83 e0 0c             	and    eax,0xc
c0003f14:	3c 0c                	cmp    al,0xc
c0003f16:	74 0b                	je     c0003f23 <create_name+0x29f>
c0003f18:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f1c:	83 e0 03             	and    eax,0x3
c0003f1f:	3c 03                	cmp    al,0x3
c0003f21:	75 05                	jne    c0003f28 <create_name+0x2a4>
c0003f23:	83 cb 02             	or     ebx,0x2
c0003f26:	eb 19                	jmp    c0003f41 <create_name+0x2bd>
c0003f28:	f6 c3 02             	test   bl,0x2
c0003f2b:	75 14                	jne    c0003f41 <create_name+0x2bd>
c0003f2d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f32:	74 03                	je     c0003f37 <create_name+0x2b3>
c0003f34:	83 cb 10             	or     ebx,0x10
c0003f37:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f3c:	74 03                	je     c0003f41 <create_name+0x2bd>
c0003f3e:	83 cb 08             	or     ebx,0x8
c0003f41:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f44:	31 c0                	xor    eax,eax
c0003f46:	eb 10                	jmp    c0003f58 <create_name+0x2d4>
c0003f48:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f4d:	0f 85 ce fe ff ff    	jne    c0003e21 <create_name+0x19d>
c0003f53:	e9 a6 fe ff ff       	jmp    c0003dfe <create_name+0x17a>
c0003f58:	83 c4 3c             	add    esp,0x3c
c0003f5b:	5b                   	pop    ebx
c0003f5c:	5e                   	pop    esi
c0003f5d:	5f                   	pop    edi
c0003f5e:	5d                   	pop    ebp
c0003f5f:	c3                   	ret    

c0003f60 <xname_sum>:
c0003f60:	56                   	push   esi
c0003f61:	53                   	push   ebx
c0003f62:	89 c6                	mov    esi,eax
c0003f64:	51                   	push   ecx
c0003f65:	31 db                	xor    ebx,ebx
c0003f67:	83 c6 02             	add    esi,0x2
c0003f6a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 1f                	je     c0003f92 <xname_sum+0x32>
c0003f73:	83 ec 0c             	sub    esp,0xc
c0003f76:	66 d1 cb             	ror    bx,1
c0003f79:	50                   	push   eax
c0003f7a:	e8 1e 46 00 00       	call   c000859d <ff_wtoupper>
c0003f7f:	83 c4 10             	add    esp,0x10
c0003f82:	0f b6 d0             	movzx  edx,al
c0003f85:	66 c1 e8 08          	shr    ax,0x8
c0003f89:	01 d3                	add    ebx,edx
c0003f8b:	66 d1 cb             	ror    bx,1
c0003f8e:	01 c3                	add    ebx,eax
c0003f90:	eb d5                	jmp    c0003f67 <xname_sum+0x7>
c0003f92:	89 d8                	mov    eax,ebx
c0003f94:	5a                   	pop    edx
c0003f95:	5b                   	pop    ebx
c0003f96:	5e                   	pop    esi
c0003f97:	c3                   	ret    

c0003f98 <create_xdir>:
c0003f98:	55                   	push   ebp
c0003f99:	b9 40 00 00 00       	mov    ecx,0x40
c0003f9e:	57                   	push   edi
c0003f9f:	bd 01 00 00 00       	mov    ebp,0x1
c0003fa4:	56                   	push   esi
c0003fa5:	31 ff                	xor    edi,edi
c0003fa7:	53                   	push   ebx
c0003fa8:	be 40 00 00 00       	mov    esi,0x40
c0003fad:	89 c3                	mov    ebx,eax
c0003faf:	83 ec 1c             	sub    esp,0x1c
c0003fb2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fb6:	31 d2                	xor    edx,edx
c0003fb8:	e8 18 dd ff ff       	call   c0001cd5 <mem_set>
c0003fbd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fc0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fc4:	31 c9                	xor    ecx,ecx
c0003fc6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fc9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fcd:	83 c6 02             	add    esi,0x2
c0003fd0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fd4:	66 85 ed             	test   bp,bp
c0003fd7:	74 12                	je     c0003feb <create_xdir+0x53>
c0003fd9:	0f b6 c1             	movzx  eax,cl
c0003fdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fe4:	66 83 fd 01          	cmp    bp,0x1
c0003fe8:	80 d9 ff             	sbb    cl,0xff
c0003feb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fee:	0f b7 d5             	movzx  edx,bp
c0003ff1:	83 c6 02             	add    esi,0x2
c0003ff4:	e8 ba dc ff ff       	call   c0001cb3 <st_word>
c0003ff9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fff:	75 d3                	jne    c0003fd4 <create_xdir+0x3c>
c0004001:	8d 47 01             	lea    eax,[edi+0x1]
c0004004:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004008:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000400c:	0f b6 c1             	movzx  eax,cl
c000400f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004014:	74 07                	je     c000401d <create_xdir+0x85>
c0004016:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000401b:	eb a9                	jmp    c0003fc6 <create_xdir+0x2e>
c000401d:	8d 47 02             	lea    eax,[edi+0x2]
c0004020:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004023:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004026:	89 d0                	mov    eax,edx
c0004028:	e8 33 ff ff ff       	call   c0003f60 <xname_sum>
c000402d:	83 c4 1c             	add    esp,0x1c
c0004030:	0f b7 d0             	movzx  edx,ax
c0004033:	8d 43 24             	lea    eax,[ebx+0x24]
c0004036:	5b                   	pop    ebx
c0004037:	5e                   	pop    esi
c0004038:	5f                   	pop    edi
c0004039:	5d                   	pop    ebp
c000403a:	e9 74 dc ff ff       	jmp    c0001cb3 <st_word>

c000403f <cmp_lfn>:
c000403f:	55                   	push   ebp
c0004040:	57                   	push   edi
c0004041:	89 d7                	mov    edi,edx
c0004043:	56                   	push   esi
c0004044:	53                   	push   ebx
c0004045:	83 ec 1c             	sub    esp,0x1c
c0004048:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000404c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000404f:	e8 ed db ff ff       	call   c0001c41 <ld_word>
c0004054:	66 85 c0             	test   ax,ax
c0004057:	74 07                	je     c0004060 <cmp_lfn+0x21>
c0004059:	31 c0                	xor    eax,eax
c000405b:	e9 9a 00 00 00       	jmp    c00040fa <cmp_lfn+0xbb>
c0004060:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	83 e3 3f             	and    ebx,0x3f
c000406a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004072:	4b                   	dec    ebx
c0004073:	6b db 0d             	imul   ebx,ebx,0xd
c0004076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000407a:	0f b6 80 60 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd62a0]
c0004081:	01 f8                	add    eax,edi
c0004083:	e8 b9 db ff ff       	call   c0001c41 <ld_word>
c0004088:	66 85 ed             	test   bp,bp
c000408b:	89 c6                	mov    esi,eax
c000408d:	74 3c                	je     c00040cb <cmp_lfn+0x8c>
c000408f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0004095:	77 c2                	ja     c0004059 <cmp_lfn+0x1a>
c0004097:	83 ec 0c             	sub    esp,0xc
c000409a:	0f b7 c0             	movzx  eax,ax
c000409d:	50                   	push   eax
c000409e:	e8 fa 44 00 00       	call   c000859d <ff_wtoupper>
c00040a3:	89 c5                	mov    ebp,eax
c00040a5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040b0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 e1 44 00 00       	call   c000859d <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 c5                	cmp    ebp,eax
c00040c1:	75 96                	jne    c0004059 <cmp_lfn+0x1a>
c00040c3:	89 f5                	mov    ebp,esi
c00040c5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040c9:	eb 04                	jmp    c00040cf <cmp_lfn+0x90>
c00040cb:	66 46                	inc    si
c00040cd:	75 8a                	jne    c0004059 <cmp_lfn+0x1a>
c00040cf:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040d3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040d8:	75 9c                	jne    c0004076 <cmp_lfn+0x37>
c00040da:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040dd:	74 16                	je     c00040f5 <cmp_lfn+0xb6>
c00040df:	66 85 ed             	test   bp,bp
c00040e2:	74 11                	je     c00040f5 <cmp_lfn+0xb6>
c00040e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040e8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040ed:	0f 94 c0             	sete   al
c00040f0:	0f b6 c0             	movzx  eax,al
c00040f3:	eb 05                	jmp    c00040fa <cmp_lfn+0xbb>
c00040f5:	b8 01 00 00 00       	mov    eax,0x1
c00040fa:	83 c4 1c             	add    esp,0x1c
c00040fd:	5b                   	pop    ebx
c00040fe:	5e                   	pop    esi
c00040ff:	5f                   	pop    edi
c0004100:	5d                   	pop    ebp
c0004101:	c3                   	ret    

c0004102 <dir_find>:
c0004102:	55                   	push   ebp
c0004103:	31 d2                	xor    edx,edx
c0004105:	57                   	push   edi
c0004106:	56                   	push   esi
c0004107:	53                   	push   ebx
c0004108:	89 c3                	mov    ebx,eax
c000410a:	83 ec 1c             	sub    esp,0x1c
c000410d:	8b 30                	mov    esi,DWORD PTR [eax]
c000410f:	e8 89 f0 ff ff       	call   c000319d <dir_sdi>
c0004114:	89 04 24             	mov    DWORD PTR [esp],eax
c0004117:	85 c0                	test   eax,eax
c0004119:	0f 85 9e 01 00 00    	jne    c00042bd <dir_find+0x1bb>
c000411f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004122:	0f 85 8d 00 00 00    	jne    c00041b5 <dir_find+0xb3>
c0004128:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000412b:	e8 30 fe ff ff       	call   c0003f60 <xname_sum>
c0004130:	89 c7                	mov    edi,eax
c0004132:	31 d2                	xor    edx,edx
c0004134:	89 d8                	mov    eax,ebx
c0004136:	e8 72 f8 ff ff       	call   c00039ad <dir_read>
c000413b:	85 c0                	test   eax,eax
c000413d:	0f 85 5e 01 00 00    	jne    c00042a1 <dir_find+0x19f>
c0004143:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004146:	8d 41 24             	lea    eax,[ecx+0x24]
c0004149:	e8 f3 da ff ff       	call   c0001c41 <ld_word>
c000414e:	66 39 f8             	cmp    ax,di
c0004151:	75 df                	jne    c0004132 <dir_find+0x30>
c0004153:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004156:	31 ed                	xor    ebp,ebp
c0004158:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000415c:	ba 40 00 00 00       	mov    edx,0x40
c0004161:	89 e9                	mov    ecx,ebp
c0004163:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004167:	0f 84 42 01 00 00    	je     c00042af <dir_find+0x1ad>
c000416d:	f6 c2 1f             	test   dl,0x1f
c0004170:	75 03                	jne    c0004175 <dir_find+0x73>
c0004172:	83 c2 02             	add    edx,0x2
c0004175:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004179:	89 d0                	mov    eax,edx
c000417b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000417e:	e8 be da ff ff       	call   c0001c41 <ld_word>
c0004183:	83 ec 0c             	sub    esp,0xc
c0004186:	0f b7 c0             	movzx  eax,ax
c0004189:	50                   	push   eax
c000418a:	e8 0e 44 00 00       	call   c000859d <ff_wtoupper>
c000418f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004193:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004196:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c000419a:	89 04 24             	mov    DWORD PTR [esp],eax
c000419d:	e8 fb 43 00 00       	call   c000859d <ff_wtoupper>
c00041a2:	83 c4 10             	add    esp,0x10
c00041a5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041a9:	75 87                	jne    c0004132 <dir_find+0x30>
c00041ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041af:	45                   	inc    ebp
c00041b0:	83 c2 02             	add    edx,0x2
c00041b3:	eb ac                	jmp    c0004161 <dir_find+0x5f>
c00041b5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041bc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041c1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041c6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041c9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041cc:	89 f0                	mov    eax,esi
c00041ce:	e8 4c e2 ff ff       	call   c000241f <move_window>
c00041d3:	85 c0                	test   eax,eax
c00041d5:	0f 85 c6 00 00 00    	jne    c00042a1 <dir_find+0x19f>
c00041db:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041de:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041e1:	84 c9                	test   cl,cl
c00041e3:	0f 84 bd 00 00 00    	je     c00042a6 <dir_find+0x1a4>
c00041e9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041ec:	88 d0                	mov    al,dl
c00041ee:	83 e0 3f             	and    eax,0x3f
c00041f1:	80 f9 e5             	cmp    cl,0xe5
c00041f4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041f7:	0f 84 87 00 00 00    	je     c0004284 <dir_find+0x182>
c00041fd:	80 e2 08             	and    dl,0x8
c0004200:	74 06                	je     c0004208 <dir_find+0x106>
c0004202:	3c 0f                	cmp    al,0xf
c0004204:	75 7e                	jne    c0004284 <dir_find+0x182>
c0004206:	eb 04                	jmp    c000420c <dir_find+0x10a>
c0004208:	3c 0f                	cmp    al,0xf
c000420a:	75 4c                	jne    c0004258 <dir_find+0x156>
c000420c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004210:	75 7e                	jne    c0004290 <dir_find+0x18e>
c0004212:	f6 c1 40             	test   cl,0x40
c0004215:	74 12                	je     c0004229 <dir_find+0x127>
c0004217:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000421a:	83 e1 bf             	and    ecx,0xffffffbf
c000421d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004221:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004224:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004227:	eb 06                	jmp    c000422f <dir_find+0x12d>
c0004229:	89 f8                	mov    eax,edi
c000422b:	38 c8                	cmp    al,cl
c000422d:	75 5c                	jne    c000428b <dir_find+0x189>
c000422f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004233:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004238:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000423b:	75 53                	jne    c0004290 <dir_find+0x18e>
c000423d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004241:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004244:	89 ea                	mov    edx,ebp
c0004246:	e8 f4 fd ff ff       	call   c000403f <cmp_lfn>
c000424b:	85 c0                	test   eax,eax
c000424d:	74 41                	je     c0004290 <dir_find+0x18e>
c000424f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004253:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004256:	eb 38                	jmp    c0004290 <dir_find+0x18e>
c0004258:	89 f8                	mov    eax,edi
c000425a:	84 c0                	test   al,al
c000425c:	75 0d                	jne    c000426b <dir_find+0x169>
c000425e:	89 e8                	mov    eax,ebp
c0004260:	e8 98 de ff ff       	call   c00020fd <sum_sfn>
c0004265:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004269:	74 52                	je     c00042bd <dir_find+0x1bb>
c000426b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000426f:	75 13                	jne    c0004284 <dir_find+0x182>
c0004271:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004274:	b9 0b 00 00 00       	mov    ecx,0xb
c0004279:	89 e8                	mov    eax,ebp
c000427b:	e8 60 da ff ff       	call   c0001ce0 <mem_cmp>
c0004280:	85 c0                	test   eax,eax
c0004282:	74 39                	je     c00042bd <dir_find+0x1bb>
c0004284:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000428b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004290:	31 d2                	xor    edx,edx
c0004292:	89 d8                	mov    eax,ebx
c0004294:	e8 5c f4 ff ff       	call   c00036f5 <dir_next>
c0004299:	85 c0                	test   eax,eax
c000429b:	0f 84 25 ff ff ff    	je     c00041c6 <dir_find+0xc4>
c00042a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042a4:	eb 17                	jmp    c00042bd <dir_find+0x1bb>
c00042a6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042ad:	eb 0e                	jmp    c00042bd <dir_find+0x1bb>
c00042af:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042b2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042b7:	0f 85 75 fe ff ff    	jne    c0004132 <dir_find+0x30>
c00042bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042c0:	83 c4 1c             	add    esp,0x1c
c00042c3:	5b                   	pop    ebx
c00042c4:	5e                   	pop    esi
c00042c5:	5f                   	pop    edi
c00042c6:	5d                   	pop    ebp
c00042c7:	c3                   	ret    

c00042c8 <dir_register>:
c00042c8:	55                   	push   ebp
c00042c9:	57                   	push   edi
c00042ca:	56                   	push   esi
c00042cb:	be 06 00 00 00       	mov    esi,0x6
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 6c             	sub    esp,0x6c
c00042d4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042d8:	0f 85 62 02 00 00    	jne    c0004540 <dir_register+0x278>
c00042de:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042e0:	31 ff                	xor    edi,edi
c00042e2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042ea:	74 03                	je     c00042ef <dir_register+0x27>
c00042ec:	47                   	inc    edi
c00042ed:	eb f6                	jmp    c00042e5 <dir_register+0x1d>
c00042ef:	89 c3                	mov    ebx,eax
c00042f1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042f5:	0f 85 e1 00 00 00    	jne    c00043dc <dir_register+0x114>
c00042fb:	83 c7 0e             	add    edi,0xe
c00042fe:	b9 0f 00 00 00       	mov    ecx,0xf
c0004303:	89 f8                	mov    eax,edi
c0004305:	31 d2                	xor    edx,edx
c0004307:	f7 f1                	div    ecx
c0004309:	8d 50 02             	lea    edx,[eax+0x2]
c000430c:	89 c7                	mov    edi,eax
c000430e:	89 d8                	mov    eax,ebx
c0004310:	e8 12 f8 ff ff       	call   c0003b27 <dir_alloc>
c0004315:	89 c6                	mov    esi,eax
c0004317:	85 c0                	test   eax,eax
c0004319:	0f 85 21 02 00 00    	jne    c0004540 <dir_register+0x278>
c000431f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004325:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004328:	c1 e7 05             	shl    edi,0x5
c000432b:	29 f8                	sub    eax,edi
c000432d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004330:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004333:	a8 04                	test   al,0x4
c0004335:	0f 84 91 00 00 00    	je     c00043cc <dir_register+0x104>
c000433b:	83 e0 fb             	and    eax,0xfffffffb
c000433e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004341:	89 d8                	mov    eax,ebx
c0004343:	e8 25 ec ff ff       	call   c0002f6d <fill_first_frag>
c0004348:	85 c0                	test   eax,eax
c000434a:	0f 85 ee 01 00 00    	jne    c000453e <dir_register+0x276>
c0004350:	83 c9 ff             	or     ecx,0xffffffff
c0004353:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004356:	89 d8                	mov    eax,ebx
c0004358:	e8 db eb ff ff       	call   c0002f38 <fill_last_frag>
c000435d:	85 c0                	test   eax,eax
c000435f:	0f 85 d9 01 00 00    	jne    c000453e <dir_register+0x276>
c0004365:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004369:	74 61                	je     c00043cc <dir_register+0x104>
c000436b:	89 da                	mov    edx,ebx
c000436d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004371:	e8 ea f5 ff ff       	call   c0003960 <load_obj_xdir>
c0004376:	85 c0                	test   eax,eax
c0004378:	0f 85 c0 01 00 00    	jne    c000453e <dir_register+0x276>
c000437e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004382:	31 c9                	xor    ecx,ecx
c0004384:	c1 e2 09             	shl    edx,0x9
c0004387:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000438a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000438d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004390:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004393:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004396:	83 c0 38             	add    eax,0x38
c0004399:	e8 1c d9 ff ff       	call   c0001cba <st_qword>
c000439e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043a1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043a4:	83 c0 28             	add    eax,0x28
c00043a7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043aa:	e8 0b d9 ff ff       	call   c0001cba <st_qword>
c00043af:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043b2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043b5:	83 c8 01             	or     eax,0x1
c00043b8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043bf:	e8 db f7 ff ff       	call   c0003b9f <store_xdir>
c00043c4:	85 c0                	test   eax,eax
c00043c6:	0f 85 72 01 00 00    	jne    c000453e <dir_register+0x276>
c00043cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043d2:	e8 c1 fb ff ff       	call   c0003f98 <create_xdir>
c00043d7:	e9 64 01 00 00       	jmp    c0004540 <dir_register+0x278>
c00043dc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043df:	b9 0c 00 00 00       	mov    ecx,0xc
c00043e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043e8:	89 c2                	mov    edx,eax
c00043ea:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043ee:	e8 cd d8 ff ff       	call   c0001cc0 <mem_cpy>
c00043f3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043f8:	74 58                	je     c0004452 <dir_register+0x18a>
c00043fa:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043fe:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004406:	83 ec 0c             	sub    esp,0xc
c0004409:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000440c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004410:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004414:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004418:	e8 24 dc ff ff       	call   c0002041 <gen_numname>
c000441d:	89 d8                	mov    eax,ebx
c000441f:	e8 de fc ff ff       	call   c0004102 <dir_find>
c0004424:	83 c4 10             	add    esp,0x10
c0004427:	89 c6                	mov    esi,eax
c0004429:	85 c0                	test   eax,eax
c000442b:	75 15                	jne    c0004442 <dir_register+0x17a>
c000442d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004431:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004436:	75 ce                	jne    c0004406 <dir_register+0x13e>
c0004438:	be 07 00 00 00       	mov    esi,0x7
c000443d:	e9 fe 00 00 00       	jmp    c0004540 <dir_register+0x278>
c0004442:	83 f8 04             	cmp    eax,0x4
c0004445:	0f 85 f5 00 00 00    	jne    c0004540 <dir_register+0x278>
c000444b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000444f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004452:	b9 01 00 00 00       	mov    ecx,0x1
c0004457:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000445c:	74 0f                	je     c000446d <dir_register+0x1a5>
c000445e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004463:	8d 47 0c             	lea    eax,[edi+0xc]
c0004466:	31 d2                	xor    edx,edx
c0004468:	f7 f1                	div    ecx
c000446a:	8d 48 01             	lea    ecx,[eax+0x1]
c000446d:	89 ca                	mov    edx,ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	89 d8                	mov    eax,ebx
c0004475:	e8 ad f6 ff ff       	call   c0003b27 <dir_alloc>
c000447a:	89 c6                	mov    esi,eax
c000447c:	85 c0                	test   eax,eax
c000447e:	0f 85 bc 00 00 00    	jne    c0004540 <dir_register+0x278>
c0004484:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004488:	49                   	dec    ecx
c0004489:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000448d:	74 6a                	je     c00044f9 <dir_register+0x231>
c000448f:	89 c8                	mov    eax,ecx
c0004491:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004494:	c1 e0 05             	shl    eax,0x5
c0004497:	29 c2                	sub    edx,eax
c0004499:	89 d8                	mov    eax,ebx
c000449b:	e8 fd ec ff ff       	call   c000319d <dir_sdi>
c00044a0:	89 c6                	mov    esi,eax
c00044a2:	85 c0                	test   eax,eax
c00044a4:	0f 85 96 00 00 00    	jne    c0004540 <dir_register+0x278>
c00044aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ae:	e8 4a dc ff ff       	call   c00020fd <sum_sfn>
c00044b3:	0f b6 f8             	movzx  edi,al
c00044b6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044b9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044bc:	89 e8                	mov    eax,ebp
c00044be:	e8 5c df ff ff       	call   c000241f <move_window>
c00044c3:	89 c6                	mov    esi,eax
c00044c5:	85 c0                	test   eax,eax
c00044c7:	75 77                	jne    c0004540 <dir_register+0x278>
c00044c9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ce:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044d1:	83 ec 0c             	sub    esp,0xc
c00044d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044d7:	57                   	push   edi
c00044d8:	e8 e0 da ff ff       	call   c0001fbd <put_lfn>
c00044dd:	31 d2                	xor    edx,edx
c00044df:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044e3:	89 d8                	mov    eax,ebx
c00044e5:	e8 0b f2 ff ff       	call   c00036f5 <dir_next>
c00044ea:	83 c4 10             	add    esp,0x10
c00044ed:	89 c6                	mov    esi,eax
c00044ef:	85 c0                	test   eax,eax
c00044f1:	75 4d                	jne    c0004540 <dir_register+0x278>
c00044f3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044f7:	75 bd                	jne    c00044b6 <dir_register+0x1ee>
c00044f9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044fc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044ff:	89 e8                	mov    eax,ebp
c0004501:	e8 19 df ff ff       	call   c000241f <move_window>
c0004506:	89 c6                	mov    esi,eax
c0004508:	85 c0                	test   eax,eax
c000450a:	75 34                	jne    c0004540 <dir_register+0x278>
c000450c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000450f:	b9 20 00 00 00       	mov    ecx,0x20
c0004514:	31 d2                	xor    edx,edx
c0004516:	e8 ba d7 ff ff       	call   c0001cd5 <mem_set>
c000451b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000451e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004522:	b9 0b 00 00 00       	mov    ecx,0xb
c0004527:	e8 94 d7 ff ff       	call   c0001cc0 <mem_cpy>
c000452c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000452f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004532:	83 e0 18             	and    eax,0x18
c0004535:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004538:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000453c:	eb 02                	jmp    c0004540 <dir_register+0x278>
c000453e:	89 c6                	mov    esi,eax
c0004540:	83 c4 6c             	add    esp,0x6c
c0004543:	89 f0                	mov    eax,esi
c0004545:	5b                   	pop    ebx
c0004546:	5e                   	pop    esi
c0004547:	5f                   	pop    edi
c0004548:	5d                   	pop    ebp
c0004549:	c3                   	ret    

c000454a <sync_fs>:
c000454a:	56                   	push   esi
c000454b:	53                   	push   ebx
c000454c:	53                   	push   ebx
c000454d:	89 c3                	mov    ebx,eax
c000454f:	e8 37 de ff ff       	call   c000238b <sync_window>
c0004554:	85 c0                	test   eax,eax
c0004556:	0f 85 b1 00 00 00    	jne    c000460d <sync_fs+0xc3>
c000455c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000455f:	0f 85 8e 00 00 00    	jne    c00045f3 <sync_fs+0xa9>
c0004565:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004569:	0f 85 84 00 00 00    	jne    c00045f3 <sync_fs+0xa9>
c000456f:	b9 00 02 00 00       	mov    ecx,0x200
c0004574:	8d 73 54             	lea    esi,[ebx+0x54]
c0004577:	31 d2                	xor    edx,edx
c0004579:	89 f0                	mov    eax,esi
c000457b:	e8 55 d7 ff ff       	call   c0001cd5 <mem_set>
c0004580:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004586:	ba 55 aa 00 00       	mov    edx,0xaa55
c000458b:	e8 23 d7 ff ff       	call   c0001cb3 <st_word>
c0004590:	ba 52 52 61 41       	mov    edx,0x41615252
c0004595:	89 f0                	mov    eax,esi
c0004597:	e8 1b d7 ff ff       	call   c0001cb7 <st_dword>
c000459c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045a2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045a7:	e8 0b d7 ff ff       	call   c0001cb7 <st_dword>
c00045ac:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045af:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045b5:	e8 fd d6 ff ff       	call   c0001cb7 <st_dword>
c00045ba:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045bd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045c3:	e8 ef d6 ff ff       	call   c0001cb7 <st_dword>
c00045c8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045cb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ce:	83 c0 01             	add    eax,0x1
c00045d1:	83 d2 00             	adc    edx,0x0
c00045d4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045d7:	83 ec 0c             	sub    esp,0xc
c00045da:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045dd:	6a 01                	push   0x1
c00045df:	52                   	push   edx
c00045e0:	50                   	push   eax
c00045e1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045e5:	56                   	push   esi
c00045e6:	50                   	push   eax
c00045e7:	e8 20 d6 ff ff       	call   c0001c0c <disk_write>
c00045ec:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045f0:	83 c4 20             	add    esp,0x20
c00045f3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045f7:	51                   	push   ecx
c00045f8:	6a 00                	push   0x0
c00045fa:	6a 00                	push   0x0
c00045fc:	50                   	push   eax
c00045fd:	e8 20 d6 ff ff       	call   c0001c22 <disk_ioctl>
c0004602:	83 c4 10             	add    esp,0x10
c0004605:	85 c0                	test   eax,eax
c0004607:	0f 95 c0             	setne  al
c000460a:	0f b6 c0             	movzx  eax,al
c000460d:	5a                   	pop    edx
c000460e:	5b                   	pop    ebx
c000460f:	5e                   	pop    esi
c0004610:	c3                   	ret    

c0004611 <create_partition>:
c0004611:	55                   	push   ebp
c0004612:	0f b6 c0             	movzx  eax,al
c0004615:	57                   	push   edi
c0004616:	56                   	push   esi
c0004617:	53                   	push   ebx
c0004618:	83 ec 60             	sub    esp,0x60
c000461b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000461f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004623:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004627:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000462b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000462f:	50                   	push   eax
c0004630:	6a 01                	push   0x1
c0004632:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004636:	e8 e7 d5 ff ff       	call   c0001c22 <disk_ioctl>
c000463b:	83 c4 10             	add    esp,0x10
c000463e:	85 c0                	test   eax,eax
c0004640:	74 0a                	je     c000464c <create_partition+0x3b>
c0004642:	b8 01 00 00 00       	mov    eax,0x1
c0004647:	e9 67 05 00 00       	jmp    c0004bb3 <create_partition+0x5a2>
c000464c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004650:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004654:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004658:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000465c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004661:	0f 86 ed 03 00 00    	jbe    c0004a54 <create_partition+0x443>
c0004667:	83 c0 df             	add    eax,0xffffffdf
c000466a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004672:	83 d2 ff             	adc    edx,0xffffffff
c0004675:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004679:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000467d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004685:	83 c0 bd             	add    eax,0xffffffbd
c0004688:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000468f:	83 d2 ff             	adc    edx,0xffffffff
c0004692:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004696:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000469a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046a2:	be 22 00 00 00       	mov    esi,0x22
c00046a7:	31 ff                	xor    edi,edi
c00046a9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046b1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046b9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046c1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046c5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046cb:	75 0e                	jne    c00046db <create_partition+0xca>
c00046cd:	b9 00 02 00 00       	mov    ecx,0x200
c00046d2:	31 d2                	xor    edx,edx
c00046d4:	89 d8                	mov    eax,ebx
c00046d6:	e8 fa d5 ff ff       	call   c0001cd5 <mem_set>
c00046db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ea:	0f 84 23 01 00 00    	je     c0004813 <create_partition+0x202>
c00046f0:	89 f0                	mov    eax,esi
c00046f2:	89 fa                	mov    edx,edi
c00046f4:	05 ff 07 00 00       	add    eax,0x7ff
c00046f9:	83 d2 00             	adc    edx,0x0
c00046fc:	89 c1                	mov    ecx,eax
c00046fe:	89 d7                	mov    edi,edx
c0004700:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004706:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000470a:	89 ce                	mov    esi,ecx
c000470c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004710:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004714:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004718:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000471b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000471f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004722:	b8 64 00 00 00       	mov    eax,0x64
c0004727:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000472a:	b8 00 00 00 00       	mov    eax,0x0
c000472f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004733:	72 41                	jb     c0004776 <create_partition+0x165>
c0004735:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004739:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000473d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004741:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004746:	01 c1                	add    ecx,eax
c0004748:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000474c:	f7 24 24             	mul    DWORD PTR [esp]
c000474f:	6a 00                	push   0x0
c0004751:	01 ca                	add    edx,ecx
c0004753:	6a 64                	push   0x64
c0004755:	52                   	push   edx
c0004756:	50                   	push   eax
c0004757:	e8 88 2a 02 00       	call   c00271e4 <__udivdi3>
c000475c:	83 c4 10             	add    esp,0x10
c000475f:	05 ff 07 00 00       	add    eax,0x7ff
c0004764:	83 d2 00             	adc    edx,0x0
c0004767:	89 c1                	mov    ecx,eax
c0004769:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000476d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004773:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004776:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004779:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000477d:	01 f0                	add    eax,esi
c000477f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004783:	11 fa                	adc    edx,edi
c0004785:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004789:	19 d1                	sbb    ecx,edx
c000478b:	73 2e                	jae    c00047bb <create_partition+0x1aa>
c000478d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004791:	89 f8                	mov    eax,edi
c0004793:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000479a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000479e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047a6:	73 6b                	jae    c0004813 <create_partition+0x202>
c00047a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047b0:	29 f0                	sub    eax,esi
c00047b2:	19 fa                	sbb    edx,edi
c00047b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047bf:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047c2:	74 4f                	je     c0004813 <create_partition+0x202>
c00047c4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047c7:	b9 10 00 00 00       	mov    ecx,0x10
c00047cc:	ba 70 9d 02 c0       	mov    edx,0xc0029d70
c00047d1:	e8 ea d4 ff ff       	call   c0001cc0 <mem_cpy>
c00047d6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047da:	b9 10 00 00 00       	mov    ecx,0x10
c00047df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047e3:	e8 2c db ff ff       	call   c0002314 <make_rand>
c00047e8:	89 f2                	mov    edx,esi
c00047ea:	89 f9                	mov    ecx,edi
c00047ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047f0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047f4:	e8 c1 d4 ff ff       	call   c0001cba <st_qword>
c00047f9:	03 34 24             	add    esi,DWORD PTR [esp]
c00047fc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004800:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004804:	89 f2                	mov    edx,esi
c0004806:	89 f9                	mov    ecx,edi
c0004808:	83 c2 ff             	add    edx,0xffffffff
c000480b:	83 d1 ff             	adc    ecx,0xffffffff
c000480e:	e8 a7 d4 ff ff       	call   c0001cba <st_qword>
c0004813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004817:	83 e8 80             	sub    eax,0xffffff80
c000481a:	89 c5                	mov    ebp,eax
c000481c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004820:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004826:	75 6b                	jne    c0004893 <create_partition+0x282>
c0004828:	45                   	inc    ebp
c0004829:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000482d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004832:	e8 39 da ff ff       	call   c0002270 <crc32>
c0004837:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000483d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004841:	75 e5                	jne    c0004828 <create_partition+0x217>
c0004843:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004847:	31 d2                	xor    edx,edx
c0004849:	83 ec 0c             	sub    esp,0xc
c000484c:	c1 ed 09             	shr    ebp,0x9
c000484f:	6a 01                	push   0x1
c0004851:	8d 45 02             	lea    eax,[ebp+0x2]
c0004854:	52                   	push   edx
c0004855:	50                   	push   eax
c0004856:	53                   	push   ebx
c0004857:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000485b:	e8 ac d3 ff ff       	call   c0001c0c <disk_write>
c0004860:	83 c4 20             	add    esp,0x20
c0004863:	85 c0                	test   eax,eax
c0004865:	0f 85 d7 fd ff ff    	jne    c0004642 <create_partition+0x31>
c000486b:	83 ec 0c             	sub    esp,0xc
c000486e:	31 d2                	xor    edx,edx
c0004870:	6a 01                	push   0x1
c0004872:	89 e8                	mov    eax,ebp
c0004874:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004878:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000487c:	52                   	push   edx
c000487d:	50                   	push   eax
c000487e:	53                   	push   ebx
c000487f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004883:	e8 84 d3 ff ff       	call   c0001c0c <disk_write>
c0004888:	83 c4 20             	add    esp,0x20
c000488b:	85 c0                	test   eax,eax
c000488d:	0f 85 af fd ff ff    	jne    c0004642 <create_partition+0x31>
c0004893:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004897:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000489b:	3d 00 40 00 00       	cmp    eax,0x4000
c00048a0:	74 0d                	je     c00048af <create_partition+0x29e>
c00048a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048a6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048aa:	e9 12 fe ff ff       	jmp    c00046c1 <create_partition+0xb0>
c00048af:	31 d2                	xor    edx,edx
c00048b1:	b9 00 02 00 00       	mov    ecx,0x200
c00048b6:	89 d8                	mov    eax,ebx
c00048b8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048bb:	e8 15 d4 ff ff       	call   c0001cd5 <mem_set>
c00048c0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048c3:	b9 10 00 00 00       	mov    ecx,0x10
c00048c8:	ba 60 9c 02 c0       	mov    edx,0xc0029c60
c00048cd:	89 d8                	mov    eax,ebx
c00048cf:	e8 ec d3 ff ff       	call   c0001cc0 <mem_cpy>
c00048d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048d8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048db:	f7 d2                	not    edx
c00048dd:	e8 d5 d3 ff ff       	call   c0001cb7 <st_dword>
c00048e2:	8d 43 18             	lea    eax,[ebx+0x18]
c00048e5:	31 c9                	xor    ecx,ecx
c00048e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00048ea:	ba 01 00 00 00       	mov    edx,0x1
c00048ef:	e8 c6 d3 ff ff       	call   c0001cba <st_qword>
c00048f4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048f8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048fc:	83 c2 ff             	add    edx,0xffffffff
c00048ff:	89 e8                	mov    eax,ebp
c0004901:	83 d1 ff             	adc    ecx,0xffffffff
c0004904:	e8 b1 d3 ff ff       	call   c0001cba <st_qword>
c0004909:	31 c9                	xor    ecx,ecx
c000490b:	8d 43 28             	lea    eax,[ebx+0x28]
c000490e:	ba 22 00 00 00       	mov    edx,0x22
c0004913:	e8 a2 d3 ff ff       	call   c0001cba <st_qword>
c0004918:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000491c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004920:	83 c2 de             	add    edx,0xffffffde
c0004923:	8d 43 30             	lea    eax,[ebx+0x30]
c0004926:	83 d1 ff             	adc    ecx,0xffffffff
c0004929:	31 f6                	xor    esi,esi
c000492b:	e8 8a d3 ff ff       	call   c0001cba <st_qword>
c0004930:	8d 43 54             	lea    eax,[ebx+0x54]
c0004933:	ba 80 00 00 00       	mov    edx,0x80
c0004938:	e8 7a d3 ff ff       	call   c0001cb7 <st_dword>
c000493d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004940:	ba 80 00 00 00       	mov    edx,0x80
c0004945:	e8 6d d3 ff ff       	call   c0001cb7 <st_dword>
c000494a:	ba 02 00 00 00       	mov    edx,0x2
c000494f:	89 f8                	mov    eax,edi
c0004951:	e8 61 d3 ff ff       	call   c0001cb7 <st_dword>
c0004956:	8d 53 38             	lea    edx,[ebx+0x38]
c0004959:	b9 10 00 00 00       	mov    ecx,0x10
c000495e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004962:	e8 ad d9 ff ff       	call   c0002314 <make_rand>
c0004967:	83 c8 ff             	or     eax,0xffffffff
c000496a:	46                   	inc    esi
c000496b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004970:	e8 fb d8 ff ff       	call   c0002270 <crc32>
c0004975:	83 fe 5c             	cmp    esi,0x5c
c0004978:	75 f0                	jne    c000496a <create_partition+0x359>
c000497a:	f7 d0                	not    eax
c000497c:	8d 73 10             	lea    esi,[ebx+0x10]
c000497f:	89 c2                	mov    edx,eax
c0004981:	89 f0                	mov    eax,esi
c0004983:	e8 2f d3 ff ff       	call   c0001cb7 <st_dword>
c0004988:	83 ec 0c             	sub    esp,0xc
c000498b:	6a 01                	push   0x1
c000498d:	6a 00                	push   0x0
c000498f:	6a 01                	push   0x1
c0004991:	53                   	push   ebx
c0004992:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004996:	e8 71 d2 ff ff       	call   c0001c0c <disk_write>
c000499b:	83 c4 20             	add    esp,0x20
c000499e:	85 c0                	test   eax,eax
c00049a0:	0f 85 9c fc ff ff    	jne    c0004642 <create_partition+0x31>
c00049a6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049aa:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ae:	83 c2 ff             	add    edx,0xffffffff
c00049b1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b4:	83 d1 ff             	adc    ecx,0xffffffff
c00049b7:	e8 fe d2 ff ff       	call   c0001cba <st_qword>
c00049bc:	ba 01 00 00 00       	mov    edx,0x1
c00049c1:	31 c9                	xor    ecx,ecx
c00049c3:	89 e8                	mov    eax,ebp
c00049c5:	e8 f0 d2 ff ff       	call   c0001cba <st_qword>
c00049ca:	89 f8                	mov    eax,edi
c00049cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049d4:	31 ff                	xor    edi,edi
c00049d6:	e8 df d2 ff ff       	call   c0001cba <st_qword>
c00049db:	89 f0                	mov    eax,esi
c00049dd:	31 d2                	xor    edx,edx
c00049df:	e8 d3 d2 ff ff       	call   c0001cb7 <st_dword>
c00049e4:	83 c8 ff             	or     eax,0xffffffff
c00049e7:	47                   	inc    edi
c00049e8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049ed:	e8 7e d8 ff ff       	call   c0002270 <crc32>
c00049f2:	83 ff 5c             	cmp    edi,0x5c
c00049f5:	75 f0                	jne    c00049e7 <create_partition+0x3d6>
c00049f7:	f7 d0                	not    eax
c00049f9:	89 c2                	mov    edx,eax
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	e8 b5 d2 ff ff       	call   c0001cb7 <st_dword>
c0004a02:	83 ec 0c             	sub    esp,0xc
c0004a05:	6a 01                	push   0x1
c0004a07:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a0b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a0f:	83 c0 ff             	add    eax,0xffffffff
c0004a12:	83 d2 ff             	adc    edx,0xffffffff
c0004a15:	52                   	push   edx
c0004a16:	50                   	push   eax
c0004a17:	53                   	push   ebx
c0004a18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a1c:	e8 eb d1 ff ff       	call   c0001c0c <disk_write>
c0004a21:	83 c4 20             	add    esp,0x20
c0004a24:	85 c0                	test   eax,eax
c0004a26:	0f 85 16 fc ff ff    	jne    c0004642 <create_partition+0x31>
c0004a2c:	31 d2                	xor    edx,edx
c0004a2e:	89 d8                	mov    eax,ebx
c0004a30:	b9 00 02 00 00       	mov    ecx,0x200
c0004a35:	e8 9b d2 ff ff       	call   c0001cd5 <mem_set>
c0004a3a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a40:	b9 10 00 00 00       	mov    ecx,0x10
c0004a45:	ba 70 9c 02 c0       	mov    edx,0xc0029c70
c0004a4a:	e8 71 d2 ff ff       	call   c0001cc0 <mem_cpy>
c0004a4f:	e9 21 01 00 00       	jmp    c0004b75 <create_partition+0x564>
c0004a54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a58:	b9 05 00 00 00       	mov    ecx,0x5
c0004a5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a60:	bf 08 00 00 00       	mov    edi,0x8
c0004a65:	89 f8                	mov    eax,edi
c0004a67:	31 d2                	xor    edx,edx
c0004a69:	0f b6 f0             	movzx  esi,al
c0004a6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a6f:	f7 f6                	div    esi
c0004a71:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a76:	76 0a                	jbe    c0004a82 <create_partition+0x471>
c0004a78:	d1 e7                	shl    edi,1
c0004a7a:	49                   	dec    ecx
c0004a7b:	75 e8                	jne    c0004a65 <create_partition+0x454>
c0004a7d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a82:	b9 00 02 00 00       	mov    ecx,0x200
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	89 d8                	mov    eax,ebx
c0004a8b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a91:	e8 3f d2 ff ff       	call   c0001cd5 <mem_set>
c0004a96:	b9 64 00 00 00       	mov    ecx,0x64
c0004a9b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a9e:	31 d2                	xor    edx,edx
c0004aa0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004aa8:	f7 f1                	div    ecx
c0004aaa:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004aaf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ab3:	89 f8                	mov    eax,edi
c0004ab5:	0f b6 c0             	movzx  eax,al
c0004ab8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004abc:	e9 80 00 00 00       	jmp    c0004b41 <create_partition+0x530>
c0004ac1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac4:	29 cf                	sub    edi,ecx
c0004ac6:	89 ca                	mov    edx,ecx
c0004ac8:	89 f0                	mov    eax,esi
c0004aca:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004acf:	e8 e3 d1 ff ff       	call   c0001cb7 <st_dword>
c0004ad4:	8d 46 04             	lea    eax,[esi+0x4]
c0004ad7:	89 fa                	mov    edx,edi
c0004ad9:	83 c6 10             	add    esi,0x10
c0004adc:	e8 d6 d1 ff ff       	call   c0001cb7 <st_dword>
c0004ae1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004ae5:	31 d2                	xor    edx,edx
c0004ae7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004aea:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004aee:	89 c8                	mov    eax,ecx
c0004af0:	01 f9                	add    ecx,edi
c0004af2:	f7 f5                	div    ebp
c0004af4:	89 d5                	mov    ebp,edx
c0004af6:	31 d2                	xor    edx,edx
c0004af8:	45                   	inc    ebp
c0004af9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004afd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b00:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b03:	89 c2                	mov    edx,eax
c0004b05:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b08:	c1 ea 02             	shr    edx,0x2
c0004b0b:	83 e2 c0             	and    edx,0xffffffc0
c0004b0e:	09 ea                	or     edx,ebp
c0004b10:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b15:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b18:	31 d2                	xor    edx,edx
c0004b1a:	f7 f5                	div    ebp
c0004b1c:	89 d7                	mov    edi,edx
c0004b1e:	31 d2                	xor    edx,edx
c0004b20:	47                   	inc    edi
c0004b21:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b25:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b28:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b2b:	89 c5                	mov    ebp,eax
c0004b2d:	c1 ed 02             	shr    ebp,0x2
c0004b30:	83 e5 c0             	and    ebp,0xffffffc0
c0004b33:	09 ef                	or     edi,ebp
c0004b35:	89 fa                	mov    edx,edi
c0004b37:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b3a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b3f:	74 34                	je     c0004b75 <create_partition+0x564>
c0004b41:	85 c9                	test   ecx,ecx
c0004b43:	74 30                	je     c0004b75 <create_partition+0x564>
c0004b45:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b48:	76 2b                	jbe    c0004b75 <create_partition+0x564>
c0004b4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b4e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b52:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b55:	83 ff 64             	cmp    edi,0x64
c0004b58:	76 4b                	jbe    c0004ba5 <create_partition+0x594>
c0004b5a:	89 f8                	mov    eax,edi
c0004b5c:	01 c8                	add    eax,ecx
c0004b5e:	0f 82 5d ff ff ff    	jb     c0004ac1 <create_partition+0x4b0>
c0004b64:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b67:	0f 87 54 ff ff ff    	ja     c0004ac1 <create_partition+0x4b0>
c0004b6d:	85 ff                	test   edi,edi
c0004b6f:	0f 85 51 ff ff ff    	jne    c0004ac6 <create_partition+0x4b5>
c0004b75:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b7b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b80:	e8 2e d1 ff ff       	call   c0001cb3 <st_word>
c0004b85:	83 ec 0c             	sub    esp,0xc
c0004b88:	6a 01                	push   0x1
c0004b8a:	6a 00                	push   0x0
c0004b8c:	6a 00                	push   0x0
c0004b8e:	53                   	push   ebx
c0004b8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b93:	e8 74 d0 ff ff       	call   c0001c0c <disk_write>
c0004b98:	83 c4 20             	add    esp,0x20
c0004b9b:	85 c0                	test   eax,eax
c0004b9d:	0f 95 c0             	setne  al
c0004ba0:	0f b6 c0             	movzx  eax,al
c0004ba3:	eb 0e                	jmp    c0004bb3 <create_partition+0x5a2>
c0004ba5:	74 07                	je     c0004bae <create_partition+0x59d>
c0004ba7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bac:	eb ac                	jmp    c0004b5a <create_partition+0x549>
c0004bae:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bb1:	eb a7                	jmp    c0004b5a <create_partition+0x549>
c0004bb3:	83 c4 5c             	add    esp,0x5c
c0004bb6:	5b                   	pop    ebx
c0004bb7:	5e                   	pop    esi
c0004bb8:	5f                   	pop    edi
c0004bb9:	5d                   	pop    ebp
c0004bba:	c3                   	ret    

c0004bbb <get_fileinfo>:
c0004bbb:	55                   	push   ebp
c0004bbc:	57                   	push   edi
c0004bbd:	56                   	push   esi
c0004bbe:	53                   	push   ebx
c0004bbf:	83 ec 1c             	sub    esp,0x1c
c0004bc2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bc4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bc8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bcc:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bcf:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bd2:	0f 84 dc 01 00 00    	je     c0004db4 <get_fileinfo+0x1f9>
c0004bd8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bdb:	75 0f                	jne    c0004bec <get_fileinfo+0x31>
c0004bdd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004be0:	83 c4 1c             	add    esp,0x1c
c0004be3:	5b                   	pop    ebx
c0004be4:	5e                   	pop    esi
c0004be5:	5f                   	pop    edi
c0004be6:	5d                   	pop    ebp
c0004be7:	e9 58 d5 ff ff       	jmp    c0002144 <get_xfileinfo>
c0004bec:	89 d3                	mov    ebx,edx
c0004bee:	89 c6                	mov    esi,eax
c0004bf0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bf4:	74 6a                	je     c0004c60 <get_fileinfo+0xa5>
c0004bf6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004bfe:	31 ed                	xor    ebp,ebp
c0004c00:	31 ff                	xor    edi,edi
c0004c02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c0a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c0d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c11:	66 85 d2             	test   dx,dx
c0004c14:	74 3e                	je     c0004c54 <get_fileinfo+0x99>
c0004c16:	66 85 ed             	test   bp,bp
c0004c19:	75 0c                	jne    c0004c27 <get_fileinfo+0x6c>
c0004c1b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c21:	66 3d ff 07          	cmp    ax,0x7ff
c0004c25:	76 22                	jbe    c0004c49 <get_fileinfo+0x8e>
c0004c27:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c2c:	89 e8                	mov    eax,ebp
c0004c2e:	29 f9                	sub    ecx,edi
c0004c30:	c1 e0 10             	shl    eax,0x10
c0004c33:	09 d0                	or     eax,edx
c0004c35:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c39:	e8 a3 d1 ff ff       	call   c0001de1 <put_utf>
c0004c3e:	84 c0                	test   al,al
c0004c40:	74 10                	je     c0004c52 <get_fileinfo+0x97>
c0004c42:	0f b6 c0             	movzx  eax,al
c0004c45:	31 d2                	xor    edx,edx
c0004c47:	01 c7                	add    edi,eax
c0004c49:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c4e:	89 d5                	mov    ebp,edx
c0004c50:	eb b0                	jmp    c0004c02 <get_fileinfo+0x47>
c0004c52:	31 ff                	xor    edi,edi
c0004c54:	66 85 ed             	test   bp,bp
c0004c57:	74 02                	je     c0004c5b <get_fileinfo+0xa0>
c0004c59:	31 ff                	xor    edi,edi
c0004c5b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c60:	31 ff                	xor    edi,edi
c0004c62:	31 c9                	xor    ecx,ecx
c0004c64:	83 f9 0a             	cmp    ecx,0xa
c0004c67:	0f 87 ad 00 00 00    	ja     c0004d1a <get_fileinfo+0x15f>
c0004c6d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c70:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c73:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c77:	66 83 fa 20          	cmp    dx,0x20
c0004c7b:	0f 84 92 00 00 00    	je     c0004d13 <get_fileinfo+0x158>
c0004c81:	66 83 fa 05          	cmp    dx,0x5
c0004c85:	75 05                	jne    c0004c8c <get_fileinfo+0xd1>
c0004c87:	ba e5 00 00 00       	mov    edx,0xe5
c0004c8c:	83 ff 0b             	cmp    edi,0xb
c0004c8f:	77 0b                	ja     c0004c9c <get_fileinfo+0xe1>
c0004c91:	83 fd 09             	cmp    ebp,0x9
c0004c94:	75 06                	jne    c0004c9c <get_fileinfo+0xe1>
c0004c96:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c9b:	47                   	inc    edi
c0004c9c:	0f b7 c2             	movzx  eax,dx
c0004c9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ca3:	e8 6d d0 ff ff       	call   c0001d15 <dbc_1st>
c0004ca8:	85 c0                	test   eax,eax
c0004caa:	74 2f                	je     c0004cdb <get_fileinfo+0x120>
c0004cac:	83 fd 08             	cmp    ebp,0x8
c0004caf:	74 2a                	je     c0004cdb <get_fileinfo+0x120>
c0004cb1:	83 fd 0b             	cmp    ebp,0xb
c0004cb4:	74 25                	je     c0004cdb <get_fileinfo+0x120>
c0004cb6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cbd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004cc1:	e8 52 d0 ff ff       	call   c0001d18 <dbc_2nd>
c0004cc6:	85 c0                	test   eax,eax
c0004cc8:	74 11                	je     c0004cdb <get_fileinfo+0x120>
c0004cca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cd3:	c1 e2 08             	shl    edx,0x8
c0004cd6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cd9:	09 c2                	or     edx,eax
c0004cdb:	0f b7 d2             	movzx  edx,dx
c0004cde:	50                   	push   eax
c0004cdf:	50                   	push   eax
c0004ce0:	68 b5 01 00 00       	push   0x1b5
c0004ce5:	52                   	push   edx
c0004ce6:	e8 46 38 00 00       	call   c0008531 <ff_oem2uni>
c0004ceb:	83 c4 10             	add    esp,0x10
c0004cee:	66 85 c0             	test   ax,ax
c0004cf1:	75 04                	jne    c0004cf7 <get_fileinfo+0x13c>
c0004cf3:	31 ff                	xor    edi,edi
c0004cf5:	eb 23                	jmp    c0004d1a <get_fileinfo+0x15f>
c0004cf7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004cfc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d00:	29 f9                	sub    ecx,edi
c0004d02:	0f b7 c0             	movzx  eax,ax
c0004d05:	e8 d7 d0 ff ff       	call   c0001de1 <put_utf>
c0004d0a:	84 c0                	test   al,al
c0004d0c:	74 e5                	je     c0004cf3 <get_fileinfo+0x138>
c0004d0e:	0f b6 c0             	movzx  eax,al
c0004d11:	01 c7                	add    edi,eax
c0004d13:	89 e9                	mov    ecx,ebp
c0004d15:	e9 4a ff ff ff       	jmp    c0004c64 <get_fileinfo+0xa9>
c0004d1a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d1f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d23:	75 54                	jne    c0004d79 <get_fileinfo+0x1be>
c0004d25:	85 ff                	test   edi,edi
c0004d27:	75 0b                	jne    c0004d34 <get_fileinfo+0x179>
c0004d29:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d2d:	ba 01 00 00 00       	mov    edx,0x1
c0004d32:	eb 33                	jmp    c0004d67 <get_fileinfo+0x1ac>
c0004d34:	b1 08                	mov    cl,0x8
c0004d36:	31 d2                	xor    edx,edx
c0004d38:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d3e:	84 c0                	test   al,al
c0004d40:	74 25                	je     c0004d67 <get_fileinfo+0x1ac>
c0004d42:	66 83 f8 2e          	cmp    ax,0x2e
c0004d46:	74 16                	je     c0004d5e <get_fileinfo+0x1a3>
c0004d48:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d4b:	66 83 ff 19          	cmp    di,0x19
c0004d4f:	77 0f                	ja     c0004d60 <get_fileinfo+0x1a5>
c0004d51:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d54:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d57:	74 07                	je     c0004d60 <get_fileinfo+0x1a5>
c0004d59:	83 c0 20             	add    eax,0x20
c0004d5c:	eb 02                	jmp    c0004d60 <get_fileinfo+0x1a5>
c0004d5e:	b1 10                	mov    cl,0x10
c0004d60:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d64:	42                   	inc    edx
c0004d65:	eb d1                	jmp    c0004d38 <get_fileinfo+0x17d>
c0004d67:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d6c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d73:	75 04                	jne    c0004d79 <get_fileinfo+0x1be>
c0004d75:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d79:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d7f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d85:	83 c0 1c             	add    eax,0x1c
c0004d88:	e8 c1 ce ff ff       	call   c0001c4e <ld_dword>
c0004d8d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d94:	89 03                	mov    DWORD PTR [ebx],eax
c0004d96:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d99:	83 c0 16             	add    eax,0x16
c0004d9c:	e8 a0 ce ff ff       	call   c0001c41 <ld_word>
c0004da1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004da5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da8:	83 c0 18             	add    eax,0x18
c0004dab:	e8 91 ce ff ff       	call   c0001c41 <ld_word>
c0004db0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004db4:	83 c4 1c             	add    esp,0x1c
c0004db7:	5b                   	pop    ebx
c0004db8:	5e                   	pop    esi
c0004db9:	5f                   	pop    edi
c0004dba:	5d                   	pop    ebp
c0004dbb:	c3                   	ret    

c0004dbc <ld_clust.isra.0>:
c0004dbc:	56                   	push   esi
c0004dbd:	89 c6                	mov    esi,eax
c0004dbf:	53                   	push   ebx
c0004dc0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004dc3:	89 d3                	mov    ebx,edx
c0004dc5:	e8 77 ce ff ff       	call   c0001c41 <ld_word>
c0004dca:	0f b7 c8             	movzx  ecx,ax
c0004dcd:	89 f0                	mov    eax,esi
c0004dcf:	3c 03                	cmp    al,0x3
c0004dd1:	75 0d                	jne    c0004de0 <ld_clust.isra.0+0x24>
c0004dd3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dd6:	e8 66 ce ff ff       	call   c0001c41 <ld_word>
c0004ddb:	c1 e0 10             	shl    eax,0x10
c0004dde:	09 c1                	or     ecx,eax
c0004de0:	89 c8                	mov    eax,ecx
c0004de2:	5b                   	pop    ebx
c0004de3:	5e                   	pop    esi
c0004de4:	c3                   	ret    

c0004de5 <st_clust.isra.1>:
c0004de5:	56                   	push   esi
c0004de6:	89 c6                	mov    esi,eax
c0004de8:	53                   	push   ebx
c0004de9:	89 d3                	mov    ebx,edx
c0004deb:	0f b7 d1             	movzx  edx,cx
c0004dee:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004df1:	e8 bd ce ff ff       	call   c0001cb3 <st_word>
c0004df6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004df9:	75 0f                	jne    c0004e0a <st_clust.isra.1+0x25>
c0004dfb:	c1 e9 10             	shr    ecx,0x10
c0004dfe:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e01:	89 ca                	mov    edx,ecx
c0004e03:	5b                   	pop    ebx
c0004e04:	5e                   	pop    esi
c0004e05:	e9 a9 ce ff ff       	jmp    c0001cb3 <st_word>
c0004e0a:	5b                   	pop    ebx
c0004e0b:	5e                   	pop    esi
c0004e0c:	c3                   	ret    

c0004e0d <init_alloc_info.isra.2>:
c0004e0d:	56                   	push   esi
c0004e0e:	53                   	push   ebx
c0004e0f:	89 c6                	mov    esi,eax
c0004e11:	89 d3                	mov    ebx,edx
c0004e13:	51                   	push   ecx
c0004e14:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e16:	83 c0 34             	add    eax,0x34
c0004e19:	e8 30 ce ff ff       	call   c0001c4e <ld_dword>
c0004e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e21:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e23:	83 c0 38             	add    eax,0x38
c0004e26:	e8 3b ce ff ff       	call   c0001c66 <ld_qword>
c0004e2b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e2e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e31:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e33:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e36:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e3d:	83 e0 02             	and    eax,0x2
c0004e40:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e43:	5b                   	pop    ebx
c0004e44:	5b                   	pop    ebx
c0004e45:	5e                   	pop    esi
c0004e46:	c3                   	ret    

c0004e47 <follow_path>:
c0004e47:	56                   	push   esi
c0004e48:	53                   	push   ebx
c0004e49:	89 c3                	mov    ebx,eax
c0004e4b:	83 ec 14             	sub    esp,0x14
c0004e4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e52:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e58:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e5a:	80 fa 5c             	cmp    dl,0x5c
c0004e5d:	75 07                	jne    c0004e66 <follow_path+0x1f>
c0004e5f:	40                   	inc    eax
c0004e60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e64:	eb ee                	jmp    c0004e54 <follow_path+0xd>
c0004e66:	80 fa 2f             	cmp    dl,0x2f
c0004e69:	74 f4                	je     c0004e5f <follow_path+0x18>
c0004e6b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e72:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e79:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e7c:	77 52                	ja     c0004ed0 <follow_path+0x89>
c0004e7e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e82:	31 d2                	xor    edx,edx
c0004e84:	89 d8                	mov    eax,ebx
c0004e86:	e8 12 e3 ff ff       	call   c000319d <dir_sdi>
c0004e8b:	eb 7c                	jmp    c0004f09 <follow_path+0xc2>
c0004e8d:	89 d8                	mov    eax,ebx
c0004e8f:	e8 6e f2 ff ff       	call   c0004102 <dir_find>
c0004e94:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e97:	85 c0                	test   eax,eax
c0004e99:	75 46                	jne    c0004ee1 <follow_path+0x9a>
c0004e9b:	80 e2 04             	and    dl,0x4
c0004e9e:	75 69                	jne    c0004f09 <follow_path+0xc2>
c0004ea0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ea4:	74 5e                	je     c0004f04 <follow_path+0xbd>
c0004ea6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ea8:	3c 04                	cmp    al,0x4
c0004eaa:	75 41                	jne    c0004eed <follow_path+0xa6>
c0004eac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004eaf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004eb3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004eb6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004eb9:	30 c0                	xor    al,al
c0004ebb:	09 d0                	or     eax,edx
c0004ebd:	89 da                	mov    edx,ebx
c0004ebf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ec2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ec5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ec8:	8d 46 10             	lea    eax,[esi+0x10]
c0004ecb:	e8 3d ff ff ff       	call   c0004e0d <init_alloc_info.isra.2>
c0004ed0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ed4:	89 d8                	mov    eax,ebx
c0004ed6:	e8 a9 ed ff ff       	call   c0003c84 <create_name>
c0004edb:	85 c0                	test   eax,eax
c0004edd:	74 ae                	je     c0004e8d <follow_path+0x46>
c0004edf:	eb 28                	jmp    c0004f09 <follow_path+0xc2>
c0004ee1:	83 f8 04             	cmp    eax,0x4
c0004ee4:	75 23                	jne    c0004f09 <follow_path+0xc2>
c0004ee6:	80 e2 04             	and    dl,0x4
c0004ee9:	74 19                	je     c0004f04 <follow_path+0xbd>
c0004eeb:	eb 1c                	jmp    c0004f09 <follow_path+0xc2>
c0004eed:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ef0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ef6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004efa:	e8 bd fe ff ff       	call   c0004dbc <ld_clust.isra.0>
c0004eff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f02:	eb cc                	jmp    c0004ed0 <follow_path+0x89>
c0004f04:	b8 05 00 00 00       	mov    eax,0x5
c0004f09:	83 c4 14             	add    esp,0x14
c0004f0c:	5b                   	pop    ebx
c0004f0d:	5e                   	pop    esi
c0004f0e:	c3                   	ret    

c0004f0f <f_mount>:
c0004f0f:	53                   	push   ebx
c0004f10:	83 ec 18             	sub    esp,0x18
c0004f13:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f17:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f23:	e8 fb d2 ff ff       	call   c0002223 <get_ldnumber>
c0004f28:	89 c2                	mov    edx,eax
c0004f2a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f2f:	85 d2                	test   edx,edx
c0004f31:	78 39                	js     c0004f6c <f_mount+0x5d>
c0004f33:	8b 04 95 00 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1200]
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	74 03                	je     c0004f41 <f_mount+0x32>
c0004f3e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f45:	85 c0                	test   eax,eax
c0004f47:	74 03                	je     c0004f4c <f_mount+0x3d>
c0004f49:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f50:	89 04 95 00 ee 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1200],eax
c0004f57:	31 c0                	xor    eax,eax
c0004f59:	84 db                	test   bl,bl
c0004f5b:	74 0f                	je     c0004f6c <f_mount+0x5d>
c0004f5d:	31 c9                	xor    ecx,ecx
c0004f5f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f63:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f67:	e8 65 d7 ff ff       	call   c00026d1 <mount_volume>
c0004f6c:	83 c4 18             	add    esp,0x18
c0004f6f:	5b                   	pop    ebx
c0004f70:	c3                   	ret    

c0004f71 <f_open>:
c0004f71:	55                   	push   ebp
c0004f72:	bd 09 00 00 00       	mov    ebp,0x9
c0004f77:	57                   	push   edi
c0004f78:	56                   	push   esi
c0004f79:	53                   	push   ebx
c0004f7a:	83 ec 7c             	sub    esp,0x7c
c0004f7d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f84:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f8b:	85 db                	test   ebx,ebx
c0004f8d:	0f 84 10 04 00 00    	je     c00053a3 <f_open+0x432>
c0004f93:	89 fe                	mov    esi,edi
c0004f95:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f99:	83 e6 3f             	and    esi,0x3f
c0004f9c:	89 f0                	mov    eax,esi
c0004f9e:	0f b6 c8             	movzx  ecx,al
c0004fa1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fa8:	e8 24 d7 ff ff       	call   c00026d1 <mount_volume>
c0004fad:	89 c5                	mov    ebp,eax
c0004faf:	85 c0                	test   eax,eax
c0004fb1:	0f 85 e6 03 00 00    	jne    c000539d <f_open+0x42c>
c0004fb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fc0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fc4:	83 ec 0c             	sub    esp,0xc
c0004fc7:	68 60 04 00 00       	push   0x460
c0004fcc:	e8 a3 34 00 00       	call   c0008474 <ff_memalloc>
c0004fd1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fd5:	83 c4 10             	add    esp,0x10
c0004fd8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fdd:	0f 84 c0 03 00 00    	je     c00053a3 <f_open+0x432>
c0004fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004feb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ff1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004ff4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004ff7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004ffe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005002:	e8 40 fe ff ff       	call   c0004e47 <follow_path>
c0005007:	89 c5                	mov    ebp,eax
c0005009:	85 c0                	test   eax,eax
c000500b:	75 0c                	jne    c0005019 <f_open+0xa8>
c000500d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005012:	79 05                	jns    c0005019 <f_open+0xa8>
c0005014:	bd 06 00 00 00       	mov    ebp,0x6
c0005019:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000501f:	0f 84 84 01 00 00    	je     c00051a9 <f_open+0x238>
c0005025:	85 ed                	test   ebp,ebp
c0005027:	74 20                	je     c0005049 <f_open+0xd8>
c0005029:	83 fd 04             	cmp    ebp,0x4
c000502c:	0f 85 58 03 00 00    	jne    c000538a <f_open+0x419>
c0005032:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005036:	83 ce 08             	or     esi,0x8
c0005039:	e8 8a f2 ff ff       	call   c00042c8 <dir_register>
c000503e:	89 c5                	mov    ebp,eax
c0005040:	85 c0                	test   eax,eax
c0005042:	74 2f                	je     c0005073 <f_open+0x102>
c0005044:	e9 41 03 00 00       	jmp    c000538a <f_open+0x419>
c0005049:	bd 07 00 00 00       	mov    ebp,0x7
c000504e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005053:	0f 85 31 03 00 00    	jne    c000538a <f_open+0x419>
c0005059:	bd 08 00 00 00       	mov    ebp,0x8
c000505e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005064:	0f 85 20 03 00 00    	jne    c000538a <f_open+0x419>
c000506a:	83 e7 08             	and    edi,0x8
c000506d:	0f 84 65 01 00 00    	je     c00051d8 <f_open+0x267>
c0005073:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005077:	8a 02                	mov    al,BYTE PTR [edx]
c0005079:	3c 04                	cmp    al,0x4
c000507b:	0f 85 97 00 00 00    	jne    c0005118 <f_open+0x1a7>
c0005081:	8d 42 10             	lea    eax,[edx+0x10]
c0005084:	89 13                	mov    DWORD PTR [ebx],edx
c0005086:	89 da                	mov    edx,ebx
c0005088:	e8 80 fd ff ff       	call   c0004e0d <init_alloc_info.isra.2>
c000508d:	31 d2                	xor    edx,edx
c000508f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005093:	b9 1e 00 00 00       	mov    ecx,0x1e
c0005098:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000509b:	83 c0 02             	add    eax,0x2
c000509e:	e8 32 cc ff ff       	call   c0001cd5 <mem_set>
c00050a3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050a8:	31 d2                	xor    edx,edx
c00050aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b1:	83 c0 26             	add    eax,0x26
c00050b4:	e8 1c cc ff ff       	call   c0001cd5 <mem_set>
c00050b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050c0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050c4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050cc:	83 c0 08             	add    eax,0x8
c00050cf:	e8 e3 cb ff ff       	call   c0001cb7 <st_dword>
c00050d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050db:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050e3:	e8 b7 ea ff ff       	call   c0003b9f <store_xdir>
c00050e8:	89 c5                	mov    ebp,eax
c00050ea:	85 c0                	test   eax,eax
c00050ec:	0f 85 98 02 00 00    	jne    c000538a <f_open+0x419>
c00050f2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050f5:	85 d2                	test   edx,edx
c00050f7:	0f 84 db 00 00 00    	je     c00051d8 <f_open+0x267>
c00050fd:	31 c9                	xor    ecx,ecx
c00050ff:	89 d8                	mov    eax,ebx
c0005101:	e8 8e e3 ff ff       	call   c0003494 <remove_chain>
c0005106:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000510a:	89 c5                	mov    ebp,eax
c000510c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000510f:	48                   	dec    eax
c0005110:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005113:	e9 b8 00 00 00       	jmp    c00051d0 <f_open+0x25f>
c0005118:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000511c:	89 ea                	mov    edx,ebp
c000511e:	e8 99 fc ff ff       	call   c0004dbc <ld_clust.isra.0>
c0005123:	ba 00 00 21 50       	mov    edx,0x50210000
c0005128:	89 c7                	mov    edi,eax
c000512a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000512d:	e8 85 cb ff ff       	call   c0001cb7 <st_dword>
c0005132:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005136:	31 c9                	xor    ecx,ecx
c0005138:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000513c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005140:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005144:	e8 9c fc ff ff       	call   c0004de5 <st_clust.isra.1>
c0005149:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000514d:	31 d2                	xor    edx,edx
c000514f:	83 c0 1c             	add    eax,0x1c
c0005152:	e8 60 cb ff ff       	call   c0001cb7 <st_dword>
c0005157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515b:	85 ff                	test   edi,edi
c000515d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005161:	74 75                	je     c00051d8 <f_open+0x267>
c0005163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005167:	31 c9                	xor    ecx,ecx
c0005169:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000516c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000516f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005173:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005177:	89 fa                	mov    edx,edi
c0005179:	8d 44 24 24          	lea    eax,[esp+0x24]
c000517d:	e8 12 e3 ff ff       	call   c0003494 <remove_chain>
c0005182:	89 c5                	mov    ebp,eax
c0005184:	85 c0                	test   eax,eax
c0005186:	0f 85 fe 01 00 00    	jne    c000538a <f_open+0x419>
c000518c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005190:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005194:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005198:	4f                   	dec    edi
c0005199:	e8 81 d2 ff ff       	call   c000241f <move_window>
c000519e:	89 c5                	mov    ebp,eax
c00051a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051a4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051a7:	eb 27                	jmp    c00051d0 <f_open+0x25f>
c00051a9:	85 ed                	test   ebp,ebp
c00051ab:	0f 85 d9 01 00 00    	jne    c000538a <f_open+0x419>
c00051b1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051b5:	bd 04 00 00 00       	mov    ebp,0x4
c00051ba:	a8 10                	test   al,0x10
c00051bc:	0f 85 c8 01 00 00    	jne    c000538a <f_open+0x419>
c00051c2:	83 e7 02             	and    edi,0x2
c00051c5:	74 11                	je     c00051d8 <f_open+0x267>
c00051c7:	bd 07 00 00 00       	mov    ebp,0x7
c00051cc:	a8 01                	test   al,0x1
c00051ce:	eb 02                	jmp    c00051d2 <f_open+0x261>
c00051d0:	85 ed                	test   ebp,ebp
c00051d2:	0f 85 b2 01 00 00    	jne    c000538a <f_open+0x419>
c00051d8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051de:	74 03                	je     c00051e3 <f_open+0x272>
c00051e0:	83 ce 40             	or     esi,0x40
c00051e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051e7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051ea:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051ed:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051f0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051f3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051f7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051fa:	8a 02                	mov    al,BYTE PTR [edx]
c00051fc:	3c 04                	cmp    al,0x4
c00051fe:	75 2a                	jne    c000522a <f_open+0x2b9>
c0005200:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005204:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005209:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000520c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005210:	30 c0                	xor    al,al
c0005212:	09 c8                	or     eax,ecx
c0005214:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005217:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000521b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000521e:	8d 42 10             	lea    eax,[edx+0x10]
c0005221:	89 da                	mov    edx,ebx
c0005223:	e8 e5 fb ff ff       	call   c0004e0d <init_alloc_info.isra.2>
c0005228:	eb 1c                	jmp    c0005246 <f_open+0x2d5>
c000522a:	89 fa                	mov    edx,edi
c000522c:	e8 8b fb ff ff       	call   c0004dbc <ld_clust.isra.0>
c0005231:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005234:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005237:	e8 12 ca ff ff       	call   c0001c4e <ld_dword>
c000523c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005243:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005246:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000524a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005251:	89 03                	mov    DWORD PTR [ebx],eax
c0005253:	31 d2                	xor    edx,edx
c0005255:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005259:	b9 00 02 00 00       	mov    ecx,0x200
c000525e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005262:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005266:	89 f0                	mov    eax,esi
c0005268:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000526f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005272:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005279:	8d 43 50             	lea    eax,[ebx+0x50]
c000527c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005283:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000528a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000528e:	e8 42 ca ff ff       	call   c0001cd5 <mem_set>
c0005293:	83 e6 20             	and    esi,0x20
c0005296:	75 07                	jne    c000529f <f_open+0x32e>
c0005298:	31 ed                	xor    ebp,ebp
c000529a:	e9 eb 00 00 00       	jmp    c000538a <f_open+0x419>
c000529f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052a2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052b1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052b5:	74 e1                	je     c0005298 <f_open+0x327>
c00052b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052bf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052c2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052c9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052cc:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052d0:	31 ff                	xor    edi,edi
c00052d2:	c1 e5 09             	shl    ebp,0x9
c00052d5:	89 ee                	mov    esi,ebp
c00052d7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052db:	89 f8                	mov    eax,edi
c00052dd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052e1:	73 22                	jae    c0005305 <f_open+0x394>
c00052e3:	89 d8                	mov    eax,ebx
c00052e5:	e8 bd dc ff ff       	call   c0002fa7 <get_fat>
c00052ea:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052ee:	89 c2                	mov    edx,eax
c00052f0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052f4:	83 f8 01             	cmp    eax,0x1
c00052f7:	76 10                	jbe    c0005309 <f_open+0x398>
c00052f9:	83 f8 ff             	cmp    eax,0xffffffff
c00052fc:	75 d9                	jne    c00052d7 <f_open+0x366>
c00052fe:	bd 01 00 00 00       	mov    ebp,0x1
c0005303:	eb 09                	jmp    c000530e <f_open+0x39d>
c0005305:	31 ed                	xor    ebp,ebp
c0005307:	eb 05                	jmp    c000530e <f_open+0x39d>
c0005309:	bd 02 00 00 00       	mov    ebp,0x2
c000530e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005311:	85 ed                	test   ebp,ebp
c0005313:	75 75                	jne    c000538a <f_open+0x419>
c0005315:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005319:	25 ff 01 00 00       	and    eax,0x1ff
c000531e:	0f 84 74 ff ff ff    	je     c0005298 <f_open+0x327>
c0005324:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005328:	bd 02 00 00 00       	mov    ebp,0x2
c000532d:	89 c8                	mov    eax,ecx
c000532f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005333:	e8 a2 cb ff ff       	call   c0001eda <clst2sect>
c0005338:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000533c:	89 d7                	mov    edi,edx
c000533e:	09 c7                	or     edi,eax
c0005340:	74 48                	je     c000538a <f_open+0x419>
c0005342:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005346:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000534a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005352:	0f ac fe 09          	shrd   esi,edi,0x9
c0005356:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000535a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000535e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005361:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005365:	83 ec 0c             	sub    esp,0xc
c0005368:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000536b:	6a 01                	push   0x1
c000536d:	52                   	push   edx
c000536e:	50                   	push   eax
c000536f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005373:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005377:	50                   	push   eax
c0005378:	e8 79 c8 ff ff       	call   c0001bf6 <disk_read>
c000537d:	83 c4 20             	add    esp,0x20
c0005380:	85 c0                	test   eax,eax
c0005382:	0f 95 c0             	setne  al
c0005385:	0f b6 c0             	movzx  eax,al
c0005388:	89 c5                	mov    ebp,eax
c000538a:	83 ec 0c             	sub    esp,0xc
c000538d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005391:	e8 f4 30 00 00       	call   c000848a <ff_memfree>
c0005396:	83 c4 10             	add    esp,0x10
c0005399:	85 ed                	test   ebp,ebp
c000539b:	74 06                	je     c00053a3 <f_open+0x432>
c000539d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053a3:	83 c4 7c             	add    esp,0x7c
c00053a6:	89 e8                	mov    eax,ebp
c00053a8:	5b                   	pop    ebx
c00053a9:	5e                   	pop    esi
c00053aa:	5f                   	pop    edi
c00053ab:	5d                   	pop    ebp
c00053ac:	c3                   	ret    

c00053ad <f_read>:
c00053ad:	55                   	push   ebp
c00053ae:	57                   	push   edi
c00053af:	56                   	push   esi
c00053b0:	53                   	push   ebx
c00053b1:	83 ec 2c             	sub    esp,0x2c
c00053b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053b8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053c2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053c6:	89 d8                	mov    eax,ebx
c00053c8:	e8 77 cf ff ff       	call   c0002344 <validate>
c00053cd:	89 c5                	mov    ebp,eax
c00053cf:	85 c0                	test   eax,eax
c00053d1:	0f 85 4c 02 00 00    	jne    c0005623 <f_read+0x276>
c00053d7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053db:	85 ed                	test   ebp,ebp
c00053dd:	0f 85 40 02 00 00    	jne    c0005623 <f_read+0x276>
c00053e3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053e7:	0f 84 31 02 00 00    	je     c000561e <f_read+0x271>
c00053ed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053f0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053f3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053f6:	bf 00 00 00 00       	mov    edi,0x0
c00053fb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053fe:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005402:	89 d1                	mov    ecx,edx
c0005404:	19 f9                	sbb    ecx,edi
c0005406:	0f 83 cf 00 00 00    	jae    c00054db <f_read+0x12e>
c000540c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005410:	e9 c6 00 00 00       	jmp    c00054db <f_read+0x12e>
c0005415:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005418:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000541b:	89 d0                	mov    eax,edx
c000541d:	25 ff 01 00 00       	and    eax,0x1ff
c0005422:	0f 85 c9 01 00 00    	jne    c00055f1 <f_read+0x244>
c0005428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000542c:	89 d6                	mov    esi,edx
c000542e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005432:	89 cf                	mov    edi,ecx
c0005434:	48                   	dec    eax
c0005435:	0f ac fe 09          	shrd   esi,edi,0x9
c0005439:	21 f0                	and    eax,esi
c000543b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000543f:	0f 84 a6 00 00 00    	je     c00054eb <f_read+0x13e>
c0005445:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005449:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000544c:	89 c8                	mov    eax,ecx
c000544e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005451:	e8 84 ca ff ff       	call   c0001eda <clst2sect>
c0005456:	89 d7                	mov    edi,edx
c0005458:	09 c7                	or     edi,eax
c000545a:	0f 84 b4 00 00 00    	je     c0005514 <f_read+0x167>
c0005460:	31 ff                	xor    edi,edi
c0005462:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005466:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005469:	01 c6                	add    esi,eax
c000546b:	11 d7                	adc    edi,edx
c000546d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005475:	0f 86 fd 00 00 00    	jbe    c0005578 <f_read+0x1cb>
c000547b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000547f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005483:	c1 e8 09             	shr    eax,0x9
c0005486:	89 04 24             	mov    DWORD PTR [esp],eax
c0005489:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000548d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005490:	39 c2                	cmp    edx,eax
c0005492:	76 07                	jbe    c000549b <f_read+0xee>
c0005494:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	83 ec 0c             	sub    esp,0xc
c000549e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054a2:	57                   	push   edi
c00054a3:	56                   	push   esi
c00054a4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054a8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054ac:	50                   	push   eax
c00054ad:	e8 44 c7 ff ff       	call   c0001bf6 <disk_read>
c00054b2:	83 c4 20             	add    esp,0x20
c00054b5:	85 c0                	test   eax,eax
c00054b7:	75 6e                	jne    c0005527 <f_read+0x17a>
c00054b9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054bd:	78 7e                	js     c000553d <f_read+0x190>
c00054bf:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054c2:	c1 e6 09             	shl    esi,0x9
c00054c5:	31 ff                	xor    edi,edi
c00054c7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054cb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054cf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d3:	01 30                	add    DWORD PTR [eax],esi
c00054d5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054d8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054db:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054e0:	0f 85 2f ff ff ff    	jne    c0005415 <f_read+0x68>
c00054e6:	e9 38 01 00 00       	jmp    c0005623 <f_read+0x276>
c00054eb:	89 c8                	mov    eax,ecx
c00054ed:	09 d0                	or     eax,edx
c00054ef:	75 05                	jne    c00054f6 <f_read+0x149>
c00054f1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054f4:	eb 19                	jmp    c000550f <f_read+0x162>
c00054f6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054fa:	74 09                	je     c0005505 <f_read+0x158>
c00054fc:	89 d8                	mov    eax,ebx
c00054fe:	e8 f8 c9 ff ff       	call   c0001efb <clmt_clust>
c0005503:	eb 0a                	jmp    c000550f <f_read+0x162>
c0005505:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005508:	89 d8                	mov    eax,ebx
c000550a:	e8 98 da ff ff       	call   c0002fa7 <get_fat>
c000550f:	83 f8 01             	cmp    eax,0x1
c0005512:	77 0e                	ja     c0005522 <f_read+0x175>
c0005514:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005518:	bd 02 00 00 00       	mov    ebp,0x2
c000551d:	e9 01 01 00 00       	jmp    c0005623 <f_read+0x276>
c0005522:	83 f8 ff             	cmp    eax,0xffffffff
c0005525:	75 0e                	jne    c0005535 <f_read+0x188>
c0005527:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000552b:	bd 01 00 00 00       	mov    ebp,0x1
c0005530:	e9 ee 00 00 00       	jmp    c0005623 <f_read+0x276>
c0005535:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005538:	e9 08 ff ff ff       	jmp    c0005445 <f_read+0x98>
c000553d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005540:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005543:	29 f0                	sub    eax,esi
c0005545:	19 fa                	sbb    edx,edi
c0005547:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000554a:	89 d7                	mov    edi,edx
c000554c:	ba 00 00 00 00       	mov    edx,0x0
c0005551:	89 f9                	mov    ecx,edi
c0005553:	19 d1                	sbb    ecx,edx
c0005555:	0f 83 64 ff ff ff    	jae    c00054bf <f_read+0x112>
c000555b:	89 c7                	mov    edi,eax
c000555d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005560:	c1 e7 09             	shl    edi,0x9
c0005563:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005567:	b9 00 02 00 00       	mov    ecx,0x200
c000556c:	01 f8                	add    eax,edi
c000556e:	e8 4d c7 ff ff       	call   c0001cc0 <mem_cpy>
c0005573:	e9 47 ff ff ff       	jmp    c00054bf <f_read+0x112>
c0005578:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000557b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000557e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005581:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005585:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005589:	75 05                	jne    c0005590 <f_read+0x1e3>
c000558b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000558e:	74 5b                	je     c00055eb <f_read+0x23e>
c0005590:	8d 43 50             	lea    eax,[ebx+0x50]
c0005593:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000559b:	79 2a                	jns    c00055c7 <f_read+0x21a>
c000559d:	83 ec 0c             	sub    esp,0xc
c00055a0:	6a 01                	push   0x1
c00055a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055b2:	50                   	push   eax
c00055b3:	e8 54 c6 ff ff       	call   c0001c0c <disk_write>
c00055b8:	83 c4 20             	add    esp,0x20
c00055bb:	85 c0                	test   eax,eax
c00055bd:	0f 85 64 ff ff ff    	jne    c0005527 <f_read+0x17a>
c00055c3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055c7:	83 ec 0c             	sub    esp,0xc
c00055ca:	6a 01                	push   0x1
c00055cc:	57                   	push   edi
c00055cd:	56                   	push   esi
c00055ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055d6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055da:	50                   	push   eax
c00055db:	e8 16 c6 ff ff       	call   c0001bf6 <disk_read>
c00055e0:	83 c4 20             	add    esp,0x20
c00055e3:	85 c0                	test   eax,eax
c00055e5:	0f 85 3c ff ff ff    	jne    c0005527 <f_read+0x17a>
c00055eb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055ee:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f4:	ba 00 02 00 00       	mov    edx,0x200
c00055f9:	25 ff 01 00 00       	and    eax,0x1ff
c00055fe:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005602:	29 c2                	sub    edx,eax
c0005604:	39 d6                	cmp    esi,edx
c0005606:	76 02                	jbe    c000560a <f_read+0x25d>
c0005608:	89 d6                	mov    esi,edx
c000560a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000560e:	89 f1                	mov    ecx,esi
c0005610:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005614:	e8 a7 c6 ff ff       	call   c0001cc0 <mem_cpy>
c0005619:	e9 a7 fe ff ff       	jmp    c00054c5 <f_read+0x118>
c000561e:	bd 07 00 00 00       	mov    ebp,0x7
c0005623:	83 c4 2c             	add    esp,0x2c
c0005626:	89 e8                	mov    eax,ebp
c0005628:	5b                   	pop    ebx
c0005629:	5e                   	pop    esi
c000562a:	5f                   	pop    edi
c000562b:	5d                   	pop    ebp
c000562c:	c3                   	ret    

c000562d <f_write>:
c000562d:	55                   	push   ebp
c000562e:	57                   	push   edi
c000562f:	56                   	push   esi
c0005630:	53                   	push   ebx
c0005631:	83 ec 2c             	sub    esp,0x2c
c0005634:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005638:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000563c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005642:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005646:	89 d8                	mov    eax,ebx
c0005648:	e8 f7 cc ff ff       	call   c0002344 <validate>
c000564d:	89 c5                	mov    ebp,eax
c000564f:	85 c0                	test   eax,eax
c0005651:	0f 85 86 02 00 00    	jne    c00058dd <f_write+0x2b0>
c0005657:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000565b:	85 ed                	test   ebp,ebp
c000565d:	0f 85 7a 02 00 00    	jne    c00058dd <f_write+0x2b0>
c0005663:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005667:	0f 84 6b 02 00 00    	je     c00058d8 <f_write+0x2ab>
c000566d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005671:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005674:	0f 84 43 01 00 00    	je     c00057bd <f_write+0x190>
c000567a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567d:	89 c1                	mov    ecx,eax
c000567f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005683:	0f 83 34 01 00 00    	jae    c00057bd <f_write+0x190>
c0005689:	f7 d0                	not    eax
c000568b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000568f:	e9 29 01 00 00       	jmp    c00057bd <f_write+0x190>
c0005694:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005697:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000569a:	89 d0                	mov    eax,edx
c000569c:	25 ff 01 00 00       	and    eax,0x1ff
c00056a1:	0f 85 00 02 00 00    	jne    c00058a7 <f_write+0x27a>
c00056a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ab:	89 d6                	mov    esi,edx
c00056ad:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056b1:	89 cf                	mov    edi,ecx
c00056b3:	48                   	dec    eax
c00056b4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056b8:	21 f0                	and    eax,esi
c00056ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056be:	0f 84 06 01 00 00    	je     c00057ca <f_write+0x19d>
c00056c4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056c8:	0f 88 6e 01 00 00    	js     c000583c <f_write+0x20f>
c00056ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056d2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056d5:	89 c8                	mov    eax,ecx
c00056d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056db:	e8 fa c7 ff ff       	call   c0001eda <clst2sect>
c00056e0:	89 d1                	mov    ecx,edx
c00056e2:	09 c1                	or     ecx,eax
c00056e4:	0f 84 1c 01 00 00    	je     c0005806 <f_write+0x1d9>
c00056ea:	31 ff                	xor    edi,edi
c00056ec:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056f4:	01 c6                	add    esi,eax
c00056f6:	11 d7                	adc    edi,edx
c00056f8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005700:	0f 86 63 01 00 00    	jbe    c0005869 <f_write+0x23c>
c0005706:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000570a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000570e:	c1 e8 09             	shr    eax,0x9
c0005711:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005715:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005719:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000571d:	39 c2                	cmp    edx,eax
c000571f:	76 08                	jbe    c0005729 <f_write+0xfc>
c0005721:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005729:	83 ec 0c             	sub    esp,0xc
c000572c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005730:	57                   	push   edi
c0005731:	56                   	push   esi
c0005732:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005736:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000573a:	50                   	push   eax
c000573b:	e8 cc c4 ff ff       	call   c0001c0c <disk_write>
c0005740:	83 c4 20             	add    esp,0x20
c0005743:	85 c0                	test   eax,eax
c0005745:	0f 85 ce 00 00 00    	jne    c0005819 <f_write+0x1ec>
c000574b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000574e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005751:	29 f0                	sub    eax,esi
c0005753:	19 fa                	sbb    edx,edi
c0005755:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005759:	89 d7                	mov    edi,edx
c000575b:	ba 00 00 00 00       	mov    edx,0x0
c0005760:	89 f9                	mov    ecx,edi
c0005762:	19 d1                	sbb    ecx,edx
c0005764:	73 1c                	jae    c0005782 <f_write+0x155>
c0005766:	89 c7                	mov    edi,eax
c0005768:	b9 00 02 00 00       	mov    ecx,0x200
c000576d:	c1 e7 09             	shl    edi,0x9
c0005770:	8d 43 50             	lea    eax,[ebx+0x50]
c0005773:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005777:	89 fa                	mov    edx,edi
c0005779:	e8 42 c5 ff ff       	call   c0001cc0 <mem_cpy>
c000577e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005782:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005786:	c1 e6 09             	shl    esi,0x9
c0005789:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000578d:	31 ff                	xor    edi,edi
c000578f:	01 30                	add    DWORD PTR [eax],esi
c0005791:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005795:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005799:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000579c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000579f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057a2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057a5:	89 c1                	mov    ecx,eax
c00057a7:	39 f2                	cmp    edx,esi
c00057a9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057ac:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057af:	19 f9                	sbb    ecx,edi
c00057b1:	73 04                	jae    c00057b7 <f_write+0x18a>
c00057b3:	89 f2                	mov    edx,esi
c00057b5:	89 f8                	mov    eax,edi
c00057b7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057ba:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057bd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057c2:	0f 85 cc fe ff ff    	jne    c0005694 <f_write+0x67>
c00057c8:	eb 2e                	jmp    c00057f8 <f_write+0x1cb>
c00057ca:	89 c8                	mov    eax,ecx
c00057cc:	09 d0                	or     eax,edx
c00057ce:	75 0b                	jne    c00057db <f_write+0x1ae>
c00057d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057d3:	31 d2                	xor    edx,edx
c00057d5:	85 c0                	test   eax,eax
c00057d7:	75 28                	jne    c0005801 <f_write+0x1d4>
c00057d9:	eb 12                	jmp    c00057ed <f_write+0x1c0>
c00057db:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057df:	74 09                	je     c00057ea <f_write+0x1bd>
c00057e1:	89 d8                	mov    eax,ebx
c00057e3:	e8 13 c7 ff ff       	call   c0001efb <clmt_clust>
c00057e8:	eb 0a                	jmp    c00057f4 <f_write+0x1c7>
c00057ea:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057ed:	89 d8                	mov    eax,ebx
c00057ef:	e8 a1 da ff ff       	call   c0003295 <create_chain>
c00057f4:	85 c0                	test   eax,eax
c00057f6:	75 09                	jne    c0005801 <f_write+0x1d4>
c00057f8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057fc:	e9 dc 00 00 00       	jmp    c00058dd <f_write+0x2b0>
c0005801:	83 f8 01             	cmp    eax,0x1
c0005804:	75 0e                	jne    c0005814 <f_write+0x1e7>
c0005806:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000580a:	bd 02 00 00 00       	mov    ebp,0x2
c000580f:	e9 c9 00 00 00       	jmp    c00058dd <f_write+0x2b0>
c0005814:	83 f8 ff             	cmp    eax,0xffffffff
c0005817:	75 0e                	jne    c0005827 <f_write+0x1fa>
c0005819:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000581d:	bd 01 00 00 00       	mov    ebp,0x1
c0005822:	e9 b6 00 00 00       	jmp    c00058dd <f_write+0x2b0>
c0005827:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000582a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000582e:	0f 85 90 fe ff ff    	jne    c00056c4 <f_write+0x97>
c0005834:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005837:	e9 88 fe ff ff       	jmp    c00056c4 <f_write+0x97>
c000583c:	83 ec 0c             	sub    esp,0xc
c000583f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005842:	6a 01                	push   0x1
c0005844:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005847:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584a:	50                   	push   eax
c000584b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000584f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005853:	50                   	push   eax
c0005854:	e8 b3 c3 ff ff       	call   c0001c0c <disk_write>
c0005859:	83 c4 20             	add    esp,0x20
c000585c:	85 c0                	test   eax,eax
c000585e:	75 b9                	jne    c0005819 <f_write+0x1ec>
c0005860:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005864:	e9 65 fe ff ff       	jmp    c00056ce <f_write+0xa1>
c0005869:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000586c:	75 05                	jne    c0005873 <f_write+0x246>
c000586e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005871:	74 2e                	je     c00058a1 <f_write+0x274>
c0005873:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005876:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005879:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000587c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000587f:	73 20                	jae    c00058a1 <f_write+0x274>
c0005881:	83 ec 0c             	sub    esp,0xc
c0005884:	8d 43 50             	lea    eax,[ebx+0x50]
c0005887:	6a 01                	push   0x1
c0005889:	57                   	push   edi
c000588a:	56                   	push   esi
c000588b:	50                   	push   eax
c000588c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005890:	50                   	push   eax
c0005891:	e8 60 c3 ff ff       	call   c0001bf6 <disk_read>
c0005896:	83 c4 20             	add    esp,0x20
c0005899:	85 c0                	test   eax,eax
c000589b:	0f 85 78 ff ff ff    	jne    c0005819 <f_write+0x1ec>
c00058a1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058a4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058a7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058aa:	ba 00 02 00 00       	mov    edx,0x200
c00058af:	25 ff 01 00 00       	and    eax,0x1ff
c00058b4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058b8:	29 c2                	sub    edx,eax
c00058ba:	39 d6                	cmp    esi,edx
c00058bc:	76 02                	jbe    c00058c0 <f_write+0x293>
c00058be:	89 d6                	mov    esi,edx
c00058c0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058c4:	89 f1                	mov    ecx,esi
c00058c6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ca:	e8 f1 c3 ff ff       	call   c0001cc0 <mem_cpy>
c00058cf:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058d3:	e9 b1 fe ff ff       	jmp    c0005789 <f_write+0x15c>
c00058d8:	bd 07 00 00 00       	mov    ebp,0x7
c00058dd:	83 c4 2c             	add    esp,0x2c
c00058e0:	89 e8                	mov    eax,ebp
c00058e2:	5b                   	pop    ebx
c00058e3:	5e                   	pop    esi
c00058e4:	5f                   	pop    edi
c00058e5:	5d                   	pop    ebp
c00058e6:	c3                   	ret    

c00058e7 <f_sync>:
c00058e7:	56                   	push   esi
c00058e8:	53                   	push   ebx
c00058e9:	83 ec 64             	sub    esp,0x64
c00058ec:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058f0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058f4:	89 d8                	mov    eax,ebx
c00058f6:	e8 49 ca ff ff       	call   c0002344 <validate>
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 ba 01 00 00    	jne    c0005abd <f_sync+0x1d6>
c0005903:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005906:	f6 c2 40             	test   dl,0x40
c0005909:	0f 84 ae 01 00 00    	je     c0005abd <f_sync+0x1d6>
c000590f:	84 d2                	test   dl,dl
c0005911:	79 33                	jns    c0005946 <f_sync+0x5f>
c0005913:	83 ec 0c             	sub    esp,0xc
c0005916:	8d 43 50             	lea    eax,[ebx+0x50]
c0005919:	6a 01                	push   0x1
c000591b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000591e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005921:	50                   	push   eax
c0005922:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005926:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000592a:	50                   	push   eax
c000592b:	e8 dc c2 ff ff       	call   c0001c0c <disk_write>
c0005930:	83 c4 20             	add    esp,0x20
c0005933:	89 c2                	mov    edx,eax
c0005935:	b8 01 00 00 00       	mov    eax,0x1
c000593a:	85 d2                	test   edx,edx
c000593c:	0f 85 7b 01 00 00    	jne    c0005abd <f_sync+0x1d6>
c0005942:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000594d:	0f 85 11 01 00 00    	jne    c0005a64 <f_sync+0x17d>
c0005953:	89 d8                	mov    eax,ebx
c0005955:	e8 13 d6 ff ff       	call   c0002f6d <fill_first_frag>
c000595a:	85 c0                	test   eax,eax
c000595c:	0f 85 5b 01 00 00    	jne    c0005abd <f_sync+0x1d6>
c0005962:	83 c9 ff             	or     ecx,0xffffffff
c0005965:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005968:	89 d8                	mov    eax,ebx
c000596a:	e8 c9 d5 ff ff       	call   c0002f38 <fill_last_frag>
c000596f:	85 c0                	test   eax,eax
c0005971:	0f 85 46 01 00 00    	jne    c0005abd <f_sync+0x1d6>
c0005977:	83 ec 0c             	sub    esp,0xc
c000597a:	68 60 04 00 00       	push   0x460
c000597f:	e8 f0 2a 00 00       	call   c0008474 <ff_memalloc>
c0005984:	83 c4 10             	add    esp,0x10
c0005987:	89 c6                	mov    esi,eax
c0005989:	b8 11 00 00 00       	mov    eax,0x11
c000598e:	85 f6                	test   esi,esi
c0005990:	0f 84 27 01 00 00    	je     c0005abd <f_sync+0x1d6>
c0005996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000599a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059a0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059a3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059a6:	89 da                	mov    edx,ebx
c00059a8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059ac:	e8 af df ff ff       	call   c0003960 <load_obj_xdir>
c00059b1:	85 c0                	test   eax,eax
c00059b3:	0f 85 95 00 00 00    	jne    c0005a4e <f_sync+0x167>
c00059b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059c0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059c4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059c7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ca:	83 ca 01             	or     edx,0x1
c00059cd:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059d0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059d6:	83 c0 34             	add    eax,0x34
c00059d9:	e8 d9 c2 ff ff       	call   c0001cb7 <st_dword>
c00059de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059eb:	83 c0 38             	add    eax,0x38
c00059ee:	e8 c7 c2 ff ff       	call   c0001cba <st_qword>
c00059f3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059fa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a00:	83 c0 28             	add    eax,0x28
c0005a03:	e8 b2 c2 ff ff       	call   c0001cba <st_qword>
c0005a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a11:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a14:	83 c0 0c             	add    eax,0xc
c0005a17:	e8 9b c2 ff ff       	call   c0001cb7 <st_dword>
c0005a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a20:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a23:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a27:	31 d2                	xor    edx,edx
c0005a29:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2c:	83 c0 10             	add    eax,0x10
c0005a2f:	e8 83 c2 ff ff       	call   c0001cb7 <st_dword>
c0005a34:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a38:	e8 62 e1 ff ff       	call   c0003b9f <store_xdir>
c0005a3d:	85 c0                	test   eax,eax
c0005a3f:	75 0d                	jne    c0005a4e <f_sync+0x167>
c0005a41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a45:	e8 00 eb ff ff       	call   c000454a <sync_fs>
c0005a4a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a52:	83 ec 0c             	sub    esp,0xc
c0005a55:	56                   	push   esi
c0005a56:	e8 2f 2a 00 00       	call   c000848a <ff_memfree>
c0005a5b:	83 c4 10             	add    esp,0x10
c0005a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a62:	eb 59                	jmp    c0005abd <f_sync+0x1d6>
c0005a64:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a67:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a6a:	e8 b0 c9 ff ff       	call   c000241f <move_window>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	75 4a                	jne    c0005abd <f_sync+0x1d6>
c0005a73:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a76:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a7a:	89 f2                	mov    edx,esi
c0005a7c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a81:	e8 5f f3 ff ff       	call   c0004de5 <st_clust.isra.1>
c0005a86:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a89:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a8c:	e8 26 c2 ff ff       	call   c0001cb7 <st_dword>
c0005a91:	8d 46 16             	lea    eax,[esi+0x16]
c0005a94:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a99:	e8 19 c2 ff ff       	call   c0001cb7 <st_dword>
c0005a9e:	8d 46 12             	lea    eax,[esi+0x12]
c0005aa1:	31 d2                	xor    edx,edx
c0005aa3:	e8 0b c2 ff ff       	call   c0001cb3 <st_word>
c0005aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ab4:	e8 91 ea ff ff       	call   c000454a <sync_fs>
c0005ab9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005abd:	83 c4 64             	add    esp,0x64
c0005ac0:	5b                   	pop    ebx
c0005ac1:	5e                   	pop    esi
c0005ac2:	c3                   	ret    

c0005ac3 <f_close>:
c0005ac3:	53                   	push   ebx
c0005ac4:	83 ec 24             	sub    esp,0x24
c0005ac7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005acb:	53                   	push   ebx
c0005acc:	e8 16 fe ff ff       	call   c00058e7 <f_sync>
c0005ad1:	83 c4 10             	add    esp,0x10
c0005ad4:	85 c0                	test   eax,eax
c0005ad6:	75 15                	jne    c0005aed <f_close+0x2a>
c0005ad8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005adc:	89 d8                	mov    eax,ebx
c0005ade:	e8 61 c8 ff ff       	call   c0002344 <validate>
c0005ae3:	85 c0                	test   eax,eax
c0005ae5:	75 06                	jne    c0005aed <f_close+0x2a>
c0005ae7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005aed:	83 c4 18             	add    esp,0x18
c0005af0:	5b                   	pop    ebx
c0005af1:	c3                   	ret    

c0005af2 <f_lseek>:
c0005af2:	55                   	push   ebp
c0005af3:	57                   	push   edi
c0005af4:	56                   	push   esi
c0005af5:	53                   	push   ebx
c0005af6:	83 ec 3c             	sub    esp,0x3c
c0005af9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005afd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b01:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b05:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b08:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b0c:	89 d8                	mov    eax,ebx
c0005b0e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b12:	e8 2d c8 ff ff       	call   c0002344 <validate>
c0005b17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b1b:	85 c0                	test   eax,eax
c0005b1d:	0f 85 7a 04 00 00    	jne    c0005f9d <f_lseek+0x4ab>
c0005b23:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b2b:	85 c0                	test   eax,eax
c0005b2d:	0f 85 6a 04 00 00    	jne    c0005f9d <f_lseek+0x4ab>
c0005b33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b37:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b3a:	74 0c                	je     c0005b48 <f_lseek+0x56>
c0005b3c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b3f:	85 c0                	test   eax,eax
c0005b41:	75 1f                	jne    c0005b62 <f_lseek+0x70>
c0005b43:	e9 b5 01 00 00       	jmp    c0005cfd <f_lseek+0x20b>
c0005b48:	83 c9 ff             	or     ecx,0xffffffff
c0005b4b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b4e:	89 d8                	mov    eax,ebx
c0005b50:	e8 e3 d3 ff ff       	call   c0002f38 <fill_last_frag>
c0005b55:	85 c0                	test   eax,eax
c0005b57:	74 e3                	je     c0005b3c <f_lseek+0x4a>
c0005b59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5d:	e9 3b 04 00 00       	jmp    c0005f9d <f_lseek+0x4ab>
c0005b62:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b67:	0f 85 ac 00 00 00    	jne    c0005c19 <f_lseek+0x127>
c0005b6d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b71:	0f 85 a2 00 00 00    	jne    c0005c19 <f_lseek+0x127>
c0005b77:	8d 78 04             	lea    edi,[eax+0x4]
c0005b7a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b7f:	be 02 00 00 00       	mov    esi,0x2
c0005b84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b88:	85 ed                	test   ebp,ebp
c0005b8a:	74 73                	je     c0005bff <f_lseek+0x10d>
c0005b8c:	89 e9                	mov    ecx,ebp
c0005b8e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b95:	ff 04 24             	inc    DWORD PTR [esp]
c0005b98:	89 ca                	mov    edx,ecx
c0005b9a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b9e:	89 d8                	mov    eax,ebx
c0005ba0:	e8 02 d4 ff ff       	call   c0002fa7 <get_fat>
c0005ba5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ba9:	83 f8 01             	cmp    eax,0x1
c0005bac:	77 11                	ja     c0005bbf <f_lseek+0xcd>
c0005bae:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bb2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bba:	e9 de 03 00 00       	jmp    c0005f9d <f_lseek+0x4ab>
c0005bbf:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc2:	75 11                	jne    c0005bd5 <f_lseek+0xe3>
c0005bc4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bc8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bd0:	e9 c8 03 00 00       	jmp    c0005f9d <f_lseek+0x4ab>
c0005bd5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bd8:	89 c1                	mov    ecx,eax
c0005bda:	39 c2                	cmp    edx,eax
c0005bdc:	74 b7                	je     c0005b95 <f_lseek+0xa3>
c0005bde:	83 c6 02             	add    esi,0x2
c0005be1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005be5:	72 0b                	jb     c0005bf2 <f_lseek+0x100>
c0005be7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bea:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bed:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bef:	83 c7 08             	add    edi,0x8
c0005bf2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bf9:	76 04                	jbe    c0005bff <f_lseek+0x10d>
c0005bfb:	89 c5                	mov    ebp,eax
c0005bfd:	eb 8d                	jmp    c0005b8c <f_lseek+0x9a>
c0005bff:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c02:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c06:	89 30                	mov    DWORD PTR [eax],esi
c0005c08:	0f 87 87 03 00 00    	ja     c0005f95 <f_lseek+0x4a3>
c0005c0e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c14:	e9 84 03 00 00       	jmp    c0005f9d <f_lseek+0x4ab>
c0005c19:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c1c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c2b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c32:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c36:	73 0f                	jae    c0005c47 <f_lseek+0x155>
c0005c38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c4f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c52:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c59:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c5d:	0f 84 3a 03 00 00    	je     c0005f9d <f_lseek+0x4ab>
c0005c63:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c67:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c6b:	83 c6 ff             	add    esi,0xffffffff
c0005c6e:	89 d8                	mov    eax,ebx
c0005c70:	83 d7 ff             	adc    edi,0xffffffff
c0005c73:	89 f2                	mov    edx,esi
c0005c75:	89 f9                	mov    ecx,edi
c0005c77:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c7b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c7e:	e8 78 c2 ff ff       	call   c0001efb <clmt_clust>
c0005c83:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c87:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c8a:	89 c2                	mov    edx,eax
c0005c8c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c90:	89 c8                	mov    eax,ecx
c0005c92:	e8 43 c2 ff ff       	call   c0001eda <clst2sect>
c0005c97:	89 d7                	mov    edi,edx
c0005c99:	09 c7                	or     edi,eax
c0005c9b:	0f 84 0d ff ff ff    	je     c0005bae <f_lseek+0xbc>
c0005ca1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ca5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cab:	0f 84 ec 02 00 00    	je     c0005f9d <f_lseek+0x4ab>
c0005cb1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cb9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cbc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cc0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc4:	4d                   	dec    ebp
c0005cc5:	31 ff                	xor    edi,edi
c0005cc7:	21 ee                	and    esi,ebp
c0005cc9:	01 c6                	add    esi,eax
c0005ccb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cce:	11 d7                	adc    edi,edx
c0005cd0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd3:	39 fa                	cmp    edx,edi
c0005cd5:	75 08                	jne    c0005cdf <f_lseek+0x1ed>
c0005cd7:	39 f0                	cmp    eax,esi
c0005cd9:	0f 84 be 02 00 00    	je     c0005f9d <f_lseek+0x4ab>
c0005cdf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce6:	0f 89 80 02 00 00    	jns    c0005f6c <f_lseek+0x47a>
c0005cec:	83 ec 0c             	sub    esp,0xc
c0005cef:	6a 01                	push   0x1
c0005cf1:	52                   	push   edx
c0005cf2:	50                   	push   eax
c0005cf3:	55                   	push   ebp
c0005cf4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cf8:	e9 5a 02 00 00       	jmp    c0005f57 <f_lseek+0x465>
c0005cfd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d01:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d04:	74 16                	je     c0005d1c <f_lseek+0x22a>
c0005d06:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d0b:	76 0f                	jbe    c0005d1c <f_lseek+0x22a>
c0005d0d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d14:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d1c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d1f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d22:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d25:	89 c7                	mov    edi,eax
c0005d27:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d2b:	73 0d                	jae    c0005d3a <f_lseek+0x248>
c0005d2d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d31:	75 07                	jne    c0005d3a <f_lseek+0x248>
c0005d33:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d3a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d3d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d40:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d44:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d4b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d52:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d55:	75 09                	jne    c0005d60 <f_lseek+0x26e>
c0005d57:	31 f6                	xor    esi,esi
c0005d59:	31 ff                	xor    edi,edi
c0005d5b:	e9 af 01 00 00       	jmp    c0005f0f <f_lseek+0x41d>
c0005d60:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d64:	89 d7                	mov    edi,edx
c0005d66:	c1 e1 09             	shl    ecx,0x9
c0005d69:	09 c7                	or     edi,eax
c0005d6b:	89 cd                	mov    ebp,ecx
c0005d6d:	74 6d                	je     c0005ddc <f_lseek+0x2ea>
c0005d6f:	83 c0 ff             	add    eax,0xffffffff
c0005d72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d76:	83 d2 ff             	adc    edx,0xffffffff
c0005d79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d80:	83 c0 ff             	add    eax,0xffffffff
c0005d83:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d87:	83 d2 ff             	adc    edx,0xffffffff
c0005d8a:	31 ff                	xor    edi,edi
c0005d8c:	57                   	push   edi
c0005d8d:	51                   	push   ecx
c0005d8e:	52                   	push   edx
c0005d8f:	50                   	push   eax
c0005d90:	e8 4f 14 02 00       	call   c00271e4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005da0:	57                   	push   edi
c0005da1:	55                   	push   ebp
c0005da2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005da6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005daa:	e8 35 14 02 00       	call   c00271e4 <__udivdi3>
c0005daf:	83 c4 10             	add    esp,0x10
c0005db2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005db6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dba:	19 d1                	sbb    ecx,edx
c0005dbc:	72 1e                	jb     c0005ddc <f_lseek+0x2ea>
c0005dbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dc2:	89 e9                	mov    ecx,ebp
c0005dc4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dc7:	f7 d9                	neg    ecx
c0005dc9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dcc:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005dd0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dd3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dd6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dda:	eb 28                	jmp    c0005e04 <f_lseek+0x312>
c0005ddc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ddf:	85 c0                	test   eax,eax
c0005de1:	75 1e                	jne    c0005e01 <f_lseek+0x30f>
c0005de3:	31 d2                	xor    edx,edx
c0005de5:	89 d8                	mov    eax,ebx
c0005de7:	e8 a9 d4 ff ff       	call   c0003295 <create_chain>
c0005dec:	83 f8 01             	cmp    eax,0x1
c0005def:	0f 84 b9 fd ff ff    	je     c0005bae <f_lseek+0xbc>
c0005df5:	83 f8 ff             	cmp    eax,0xffffffff
c0005df8:	0f 84 c6 fd ff ff    	je     c0005bc4 <f_lseek+0xd2>
c0005dfe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e01:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e04:	85 c0                	test   eax,eax
c0005e06:	0f 84 4b ff ff ff    	je     c0005d57 <f_lseek+0x265>
c0005e0c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e10:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e18:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e1b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e22:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e25:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e29:	0f 83 9d 00 00 00    	jae    c0005ecc <f_lseek+0x3da>
c0005e2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e33:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e37:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e3a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e3e:	01 f2                	add    edx,esi
c0005e40:	11 f9                	adc    ecx,edi
c0005e42:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e46:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e4a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e4d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e50:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e53:	f6 c1 02             	test   cl,0x2
c0005e56:	74 35                	je     c0005e8d <f_lseek+0x39b>
c0005e58:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e5c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e5f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e62:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e66:	73 16                	jae    c0005e7e <f_lseek+0x38c>
c0005e68:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e6c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e70:	88 ca                	mov    dl,cl
c0005e72:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e75:	83 ca 40             	or     edx,0x40
c0005e78:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e7b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e7e:	89 c2                	mov    edx,eax
c0005e80:	89 d8                	mov    eax,ebx
c0005e82:	e8 0e d4 ff ff       	call   c0003295 <create_chain>
c0005e87:	85 c0                	test   eax,eax
c0005e89:	75 0b                	jne    c0005e96 <f_lseek+0x3a4>
c0005e8b:	eb 30                	jmp    c0005ebd <f_lseek+0x3cb>
c0005e8d:	89 c2                	mov    edx,eax
c0005e8f:	89 d8                	mov    eax,ebx
c0005e91:	e8 11 d1 ff ff       	call   c0002fa7 <get_fat>
c0005e96:	83 f8 ff             	cmp    eax,0xffffffff
c0005e99:	0f 84 25 fd ff ff    	je     c0005bc4 <f_lseek+0xd2>
c0005e9f:	83 f8 01             	cmp    eax,0x1
c0005ea2:	0f 86 06 fd ff ff    	jbe    c0005bae <f_lseek+0xbc>
c0005ea8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005eac:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005eaf:	0f 86 f9 fc ff ff    	jbe    c0005bae <f_lseek+0xbc>
c0005eb5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005eb8:	e9 5b ff ff ff       	jmp    c0005e18 <f_lseek+0x326>
c0005ebd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ec4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ecc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ecf:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ed3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ed6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ed9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005edc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ee2:	0f 84 6f fe ff ff    	je     c0005d57 <f_lseek+0x265>
c0005ee8:	89 c2                	mov    edx,eax
c0005eea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005eee:	e8 e7 bf ff ff       	call   c0001eda <clst2sect>
c0005ef3:	89 d7                	mov    edi,edx
c0005ef5:	09 c7                	or     edi,eax
c0005ef7:	0f 84 b1 fc ff ff    	je     c0005bae <f_lseek+0xbc>
c0005efd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f01:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f04:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f08:	c1 ef 09             	shr    edi,0x9
c0005f0b:	01 c6                	add    esi,eax
c0005f0d:	11 d7                	adc    edi,edx
c0005f0f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f12:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f15:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f18:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f1b:	19 d1                	sbb    ecx,edx
c0005f1d:	73 0a                	jae    c0005f29 <f_lseek+0x437>
c0005f1f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f22:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f25:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f29:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f2e:	74 6d                	je     c0005f9d <f_lseek+0x4ab>
c0005f30:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f36:	39 fa                	cmp    edx,edi
c0005f38:	75 04                	jne    c0005f3e <f_lseek+0x44c>
c0005f3a:	39 f0                	cmp    eax,esi
c0005f3c:	74 5f                	je     c0005f9d <f_lseek+0x4ab>
c0005f3e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f41:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f45:	79 25                	jns    c0005f6c <f_lseek+0x47a>
c0005f47:	83 ec 0c             	sub    esp,0xc
c0005f4a:	6a 01                	push   0x1
c0005f4c:	52                   	push   edx
c0005f4d:	50                   	push   eax
c0005f4e:	55                   	push   ebp
c0005f4f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f53:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f57:	50                   	push   eax
c0005f58:	e8 af bc ff ff       	call   c0001c0c <disk_write>
c0005f5d:	83 c4 20             	add    esp,0x20
c0005f60:	85 c0                	test   eax,eax
c0005f62:	0f 85 5c fc ff ff    	jne    c0005bc4 <f_lseek+0xd2>
c0005f68:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f6c:	83 ec 0c             	sub    esp,0xc
c0005f6f:	6a 01                	push   0x1
c0005f71:	57                   	push   edi
c0005f72:	56                   	push   esi
c0005f73:	55                   	push   ebp
c0005f74:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f78:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7c:	50                   	push   eax
c0005f7d:	e8 74 bc ff ff       	call   c0001bf6 <disk_read>
c0005f82:	83 c4 20             	add    esp,0x20
c0005f85:	85 c0                	test   eax,eax
c0005f87:	0f 85 37 fc ff ff    	jne    c0005bc4 <f_lseek+0xd2>
c0005f8d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f90:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f93:	eb 08                	jmp    c0005f9d <f_lseek+0x4ab>
c0005f95:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fa1:	83 c4 3c             	add    esp,0x3c
c0005fa4:	5b                   	pop    ebx
c0005fa5:	5e                   	pop    esi
c0005fa6:	5f                   	pop    edi
c0005fa7:	5d                   	pop    ebp
c0005fa8:	c3                   	ret    

c0005fa9 <f_opendir>:
c0005fa9:	56                   	push   esi
c0005faa:	b8 09 00 00 00       	mov    eax,0x9
c0005faf:	53                   	push   ebx
c0005fb0:	83 ec 24             	sub    esp,0x24
c0005fb3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fb7:	85 db                	test   ebx,ebx
c0005fb9:	0f 84 e6 00 00 00    	je     c00060a5 <f_opendir+0xfc>
c0005fbf:	31 c9                	xor    ecx,ecx
c0005fc1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fc5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fc9:	e8 03 c7 ff ff       	call   c00026d1 <mount_volume>
c0005fce:	85 c0                	test   eax,eax
c0005fd0:	0f 85 c9 00 00 00    	jne    c000609f <f_opendir+0xf6>
c0005fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fda:	83 ec 0c             	sub    esp,0xc
c0005fdd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fdf:	68 60 04 00 00       	push   0x460
c0005fe4:	e8 8b 24 00 00       	call   c0008474 <ff_memalloc>
c0005fe9:	83 c4 10             	add    esp,0x10
c0005fec:	89 c6                	mov    esi,eax
c0005fee:	b8 11 00 00 00       	mov    eax,0x11
c0005ff3:	85 f6                	test   esi,esi
c0005ff5:	0f 84 aa 00 00 00    	je     c00060a5 <f_opendir+0xfc>
c0005ffb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fff:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006005:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006008:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000600b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000600f:	89 d8                	mov    eax,ebx
c0006011:	e8 31 ee ff ff       	call   c0004e47 <follow_path>
c0006016:	85 c0                	test   eax,eax
c0006018:	75 61                	jne    c000607b <f_opendir+0xd2>
c000601a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000601e:	78 46                	js     c0006066 <f_opendir+0xbd>
c0006020:	b8 05 00 00 00       	mov    eax,0x5
c0006025:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006029:	74 50                	je     c000607b <f_opendir+0xd2>
c000602b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000602f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006031:	3c 04                	cmp    al,0x4
c0006033:	75 26                	jne    c000605b <f_opendir+0xb2>
c0006035:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006038:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000603b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000603e:	30 d2                	xor    dl,dl
c0006040:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006044:	09 c2                	or     edx,eax
c0006046:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006049:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000604c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000604f:	89 da                	mov    edx,ebx
c0006051:	8d 41 10             	lea    eax,[ecx+0x10]
c0006054:	e8 b4 ed ff ff       	call   c0004e0d <init_alloc_info.isra.2>
c0006059:	eb 0b                	jmp    c0006066 <f_opendir+0xbd>
c000605b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000605e:	e8 59 ed ff ff       	call   c0004dbc <ld_clust.isra.0>
c0006063:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006066:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000606a:	31 d2                	xor    edx,edx
c000606c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006070:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006074:	89 d8                	mov    eax,ebx
c0006076:	e8 22 d1 ff ff       	call   c000319d <dir_sdi>
c000607b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000607f:	83 ec 0c             	sub    esp,0xc
c0006082:	56                   	push   esi
c0006083:	e8 02 24 00 00       	call   c000848a <ff_memfree>
c0006088:	83 c4 10             	add    esp,0x10
c000608b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000608f:	83 f8 04             	cmp    eax,0x4
c0006092:	74 06                	je     c000609a <f_opendir+0xf1>
c0006094:	85 c0                	test   eax,eax
c0006096:	74 0d                	je     c00060a5 <f_opendir+0xfc>
c0006098:	eb 05                	jmp    c000609f <f_opendir+0xf6>
c000609a:	b8 05 00 00 00       	mov    eax,0x5
c000609f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060a5:	83 c4 24             	add    esp,0x24
c00060a8:	5b                   	pop    ebx
c00060a9:	5e                   	pop    esi
c00060aa:	c3                   	ret    

c00060ab <f_closedir>:
c00060ab:	53                   	push   ebx
c00060ac:	83 ec 18             	sub    esp,0x18
c00060af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060b3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060b7:	89 d8                	mov    eax,ebx
c00060b9:	e8 86 c2 ff ff       	call   c0002344 <validate>
c00060be:	85 c0                	test   eax,eax
c00060c0:	75 06                	jne    c00060c8 <f_closedir+0x1d>
c00060c2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c8:	83 c4 18             	add    esp,0x18
c00060cb:	5b                   	pop    ebx
c00060cc:	c3                   	ret    

c00060cd <f_readdir>:
c00060cd:	57                   	push   edi
c00060ce:	56                   	push   esi
c00060cf:	53                   	push   ebx
c00060d0:	83 ec 20             	sub    esp,0x20
c00060d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060db:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060df:	89 d8                	mov    eax,ebx
c00060e1:	e8 5e c2 ff ff       	call   c0002344 <validate>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 77                	jne    c0006161 <f_readdir+0x94>
c00060ea:	85 ff                	test   edi,edi
c00060ec:	75 0b                	jne    c00060f9 <f_readdir+0x2c>
c00060ee:	31 d2                	xor    edx,edx
c00060f0:	89 d8                	mov    eax,ebx
c00060f2:	e8 a6 d0 ff ff       	call   c000319d <dir_sdi>
c00060f7:	eb 68                	jmp    c0006161 <f_readdir+0x94>
c00060f9:	83 ec 0c             	sub    esp,0xc
c00060fc:	68 60 04 00 00       	push   0x460
c0006101:	e8 6e 23 00 00       	call   c0008474 <ff_memalloc>
c0006106:	83 c4 10             	add    esp,0x10
c0006109:	89 c6                	mov    esi,eax
c000610b:	b8 11 00 00 00       	mov    eax,0x11
c0006110:	85 f6                	test   esi,esi
c0006112:	74 4d                	je     c0006161 <f_readdir+0x94>
c0006114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006118:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000611e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006121:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006124:	31 d2                	xor    edx,edx
c0006126:	89 d8                	mov    eax,ebx
c0006128:	e8 80 d8 ff ff       	call   c00039ad <dir_read>
c000612d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006132:	75 19                	jne    c000614d <f_readdir+0x80>
c0006134:	89 fa                	mov    edx,edi
c0006136:	89 d8                	mov    eax,ebx
c0006138:	e8 7e ea ff ff       	call   c0004bbb <get_fileinfo>
c000613d:	31 d2                	xor    edx,edx
c000613f:	89 d8                	mov    eax,ebx
c0006141:	e8 af d5 ff ff       	call   c00036f5 <dir_next>
c0006146:	83 f8 04             	cmp    eax,0x4
c0006149:	75 02                	jne    c000614d <f_readdir+0x80>
c000614b:	31 c0                	xor    eax,eax
c000614d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006151:	83 ec 0c             	sub    esp,0xc
c0006154:	56                   	push   esi
c0006155:	e8 30 23 00 00       	call   c000848a <ff_memfree>
c000615a:	83 c4 10             	add    esp,0x10
c000615d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006161:	83 c4 20             	add    esp,0x20
c0006164:	5b                   	pop    ebx
c0006165:	5e                   	pop    esi
c0006166:	5f                   	pop    edi
c0006167:	c3                   	ret    

c0006168 <f_stat>:
c0006168:	57                   	push   edi
c0006169:	31 c9                	xor    ecx,ecx
c000616b:	56                   	push   esi
c000616c:	53                   	push   ebx
c000616d:	83 ec 50             	sub    esp,0x50
c0006170:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006174:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006178:	8d 44 24 60          	lea    eax,[esp+0x60]
c000617c:	e8 50 c5 ff ff       	call   c00026d1 <mount_volume>
c0006181:	89 c3                	mov    ebx,eax
c0006183:	85 c0                	test   eax,eax
c0006185:	75 67                	jne    c00061ee <f_stat+0x86>
c0006187:	83 ec 0c             	sub    esp,0xc
c000618a:	bb 11 00 00 00       	mov    ebx,0x11
c000618f:	68 60 04 00 00       	push   0x460
c0006194:	e8 db 22 00 00       	call   c0008474 <ff_memalloc>
c0006199:	83 c4 10             	add    esp,0x10
c000619c:	89 c6                	mov    esi,eax
c000619e:	85 c0                	test   eax,eax
c00061a0:	74 4c                	je     c00061ee <f_stat+0x86>
c00061a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061a6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061ac:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061af:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061b2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061b6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061ba:	e8 88 ec ff ff       	call   c0004e47 <follow_path>
c00061bf:	89 c3                	mov    ebx,eax
c00061c1:	85 c0                	test   eax,eax
c00061c3:	75 1d                	jne    c00061e2 <f_stat+0x7a>
c00061c5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ca:	78 11                	js     c00061dd <f_stat+0x75>
c00061cc:	85 ff                	test   edi,edi
c00061ce:	74 12                	je     c00061e2 <f_stat+0x7a>
c00061d0:	89 fa                	mov    edx,edi
c00061d2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061d6:	e8 e0 e9 ff ff       	call   c0004bbb <get_fileinfo>
c00061db:	eb 05                	jmp    c00061e2 <f_stat+0x7a>
c00061dd:	bb 06 00 00 00       	mov    ebx,0x6
c00061e2:	83 ec 0c             	sub    esp,0xc
c00061e5:	56                   	push   esi
c00061e6:	e8 9f 22 00 00       	call   c000848a <ff_memfree>
c00061eb:	83 c4 10             	add    esp,0x10
c00061ee:	83 c4 50             	add    esp,0x50
c00061f1:	89 d8                	mov    eax,ebx
c00061f3:	5b                   	pop    ebx
c00061f4:	5e                   	pop    esi
c00061f5:	5f                   	pop    edi
c00061f6:	c3                   	ret    

c00061f7 <f_getfree>:
c00061f7:	55                   	push   ebp
c00061f8:	31 c9                	xor    ecx,ecx
c00061fa:	57                   	push   edi
c00061fb:	56                   	push   esi
c00061fc:	53                   	push   ebx
c00061fd:	83 ec 5c             	sub    esp,0x5c
c0006200:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006204:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006208:	e8 c4 c4 ff ff       	call   c00026d1 <mount_volume>
c000620d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006211:	85 c0                	test   eax,eax
c0006213:	0f 85 9d 01 00 00    	jne    c00063b6 <f_getfree+0x1bf>
c0006219:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000621d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006221:	89 02                	mov    DWORD PTR [edx],eax
c0006223:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006226:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006229:	8d 71 fe             	lea    esi,[ecx-0x2]
c000622c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006230:	39 f2                	cmp    edx,esi
c0006232:	77 0b                	ja     c000623f <f_getfree+0x48>
c0006234:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006238:	89 10                	mov    DWORD PTR [eax],edx
c000623a:	e9 77 01 00 00       	jmp    c00063b6 <f_getfree+0x1bf>
c000623f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006241:	80 fa 01             	cmp    dl,0x1
c0006244:	75 3a                	jne    c0006280 <f_getfree+0x89>
c0006246:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000624a:	be 02 00 00 00       	mov    esi,0x2
c000624f:	31 db                	xor    ebx,ebx
c0006251:	89 f2                	mov    edx,esi
c0006253:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006257:	e8 4b cd ff ff       	call   c0002fa7 <get_fat>
c000625c:	83 f8 ff             	cmp    eax,0xffffffff
c000625f:	0f 84 28 01 00 00    	je     c000638d <f_getfree+0x196>
c0006265:	83 f8 01             	cmp    eax,0x1
c0006268:	0f 84 29 01 00 00    	je     c0006397 <f_getfree+0x1a0>
c000626e:	83 d3 00             	adc    ebx,0x0
c0006271:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006275:	46                   	inc    esi
c0006276:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006279:	77 d6                	ja     c0006251 <f_getfree+0x5a>
c000627b:	e9 25 01 00 00       	jmp    c00063a5 <f_getfree+0x1ae>
c0006280:	80 fa 04             	cmp    dl,0x4
c0006283:	0f 85 88 00 00 00    	jne    c0006311 <f_getfree+0x11a>
c0006289:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000628c:	31 ed                	xor    ebp,ebp
c000628e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006291:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006295:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006299:	31 db                	xor    ebx,ebx
c000629b:	85 ed                	test   ebp,ebp
c000629d:	75 3f                	jne    c00062de <f_getfree+0xe7>
c000629f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062a7:	83 c0 01             	add    eax,0x1
c00062aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ae:	83 d2 00             	adc    edx,0x0
c00062b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062c1:	e8 59 c1 ff ff       	call   c000241f <move_window>
c00062c6:	85 c0                	test   eax,eax
c00062c8:	0f 85 d3 00 00 00    	jne    c00063a1 <f_getfree+0x1aa>
c00062ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062e5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062e9:	89 cf                	mov    edi,ecx
c00062eb:	85 f6                	test   esi,esi
c00062ed:	74 12                	je     c0006301 <f_getfree+0x10a>
c00062ef:	88 c1                	mov    cl,al
c00062f1:	83 e1 01             	and    ecx,0x1
c00062f4:	80 f9 01             	cmp    cl,0x1
c00062f7:	83 d3 00             	adc    ebx,0x0
c00062fa:	d0 e8                	shr    al,1
c00062fc:	4e                   	dec    esi
c00062fd:	39 fe                	cmp    esi,edi
c00062ff:	75 ea                	jne    c00062eb <f_getfree+0xf4>
c0006301:	45                   	inc    ebp
c0006302:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006308:	85 f6                	test   esi,esi
c000630a:	75 8f                	jne    c000629b <f_getfree+0xa4>
c000630c:	e9 94 00 00 00       	jmp    c00063a5 <f_getfree+0x1ae>
c0006311:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006314:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006317:	31 f6                	xor    esi,esi
c0006319:	31 db                	xor    ebx,ebx
c000631b:	85 f6                	test   esi,esi
c000631d:	75 1b                	jne    c000633a <f_getfree+0x143>
c000631f:	89 d7                	mov    edi,edx
c0006321:	89 cd                	mov    ebp,ecx
c0006323:	83 c7 01             	add    edi,0x1
c0006326:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000632a:	83 d5 00             	adc    ebp,0x0
c000632d:	e8 ed c0 ff ff       	call   c000241f <move_window>
c0006332:	85 c0                	test   eax,eax
c0006334:	75 6b                	jne    c00063a1 <f_getfree+0x1aa>
c0006336:	89 fa                	mov    edx,edi
c0006338:	89 e9                	mov    ecx,ebp
c000633a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000633e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006342:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006346:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006349:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000634d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006351:	75 11                	jne    c0006364 <f_getfree+0x16d>
c0006353:	e8 e9 b8 ff ff       	call   c0001c41 <ld_word>
c0006358:	66 83 f8 01          	cmp    ax,0x1
c000635c:	83 d3 00             	adc    ebx,0x0
c000635f:	83 c6 02             	add    esi,0x2
c0006362:	eb 13                	jmp    c0006377 <f_getfree+0x180>
c0006364:	e8 e5 b8 ff ff       	call   c0001c4e <ld_dword>
c0006369:	25 ff ff ff 0f       	and    eax,0xfffffff
c000636e:	83 f8 01             	cmp    eax,0x1
c0006371:	83 d3 00             	adc    ebx,0x0
c0006374:	83 c6 04             	add    esi,0x4
c0006377:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000637d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006381:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006385:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006389:	75 90                	jne    c000631b <f_getfree+0x124>
c000638b:	eb 18                	jmp    c00063a5 <f_getfree+0x1ae>
c000638d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006395:	eb 0e                	jmp    c00063a5 <f_getfree+0x1ae>
c0006397:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000639f:	eb 04                	jmp    c00063a5 <f_getfree+0x1ae>
c00063a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063a5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063a9:	89 18                	mov    DWORD PTR [eax],ebx
c00063ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063af:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063b2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063ba:	83 c4 5c             	add    esp,0x5c
c00063bd:	5b                   	pop    ebx
c00063be:	5e                   	pop    esi
c00063bf:	5f                   	pop    edi
c00063c0:	5d                   	pop    ebp
c00063c1:	c3                   	ret    

c00063c2 <f_truncate>:
c00063c2:	56                   	push   esi
c00063c3:	53                   	push   ebx
c00063c4:	83 ec 14             	sub    esp,0x14
c00063c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063cb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063cf:	89 d8                	mov    eax,ebx
c00063d1:	e8 6e bf ff ff       	call   c0002344 <validate>
c00063d6:	89 c6                	mov    esi,eax
c00063d8:	85 c0                	test   eax,eax
c00063da:	0f 85 d2 00 00 00    	jne    c00064b2 <f_truncate+0xf0>
c00063e0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063e4:	85 f6                	test   esi,esi
c00063e6:	0f 85 c6 00 00 00    	jne    c00064b2 <f_truncate+0xf0>
c00063ec:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063f0:	0f 84 b7 00 00 00    	je     c00064ad <f_truncate+0xeb>
c00063f6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063f9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063fc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063ff:	89 d1                	mov    ecx,edx
c0006401:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006404:	0f 83 a8 00 00 00    	jae    c00064b2 <f_truncate+0xf0>
c000640a:	09 c2                	or     edx,eax
c000640c:	75 15                	jne    c0006423 <f_truncate+0x61>
c000640e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006411:	31 c9                	xor    ecx,ecx
c0006413:	89 d8                	mov    eax,ebx
c0006415:	e8 7a d0 ff ff       	call   c0003494 <remove_chain>
c000641a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006421:	eb 35                	jmp    c0006458 <f_truncate+0x96>
c0006423:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006426:	89 d8                	mov    eax,ebx
c0006428:	e8 7a cb ff ff       	call   c0002fa7 <get_fat>
c000642d:	89 c2                	mov    edx,eax
c000642f:	b8 01 00 00 00       	mov    eax,0x1
c0006434:	83 fa ff             	cmp    edx,0xffffffff
c0006437:	74 1f                	je     c0006458 <f_truncate+0x96>
c0006439:	b8 02 00 00 00       	mov    eax,0x2
c000643e:	83 fa 01             	cmp    edx,0x1
c0006441:	74 15                	je     c0006458 <f_truncate+0x96>
c0006443:	31 c0                	xor    eax,eax
c0006445:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006449:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000644c:	76 0a                	jbe    c0006458 <f_truncate+0x96>
c000644e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006451:	89 d8                	mov    eax,ebx
c0006453:	e8 3c d0 ff ff       	call   c0003494 <remove_chain>
c0006458:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000645b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000645e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006461:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006464:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006467:	83 ca 40             	or     edx,0x40
c000646a:	85 c0                	test   eax,eax
c000646c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000646f:	75 35                	jne    c00064a6 <f_truncate+0xe4>
c0006471:	84 d2                	test   dl,dl
c0006473:	79 3d                	jns    c00064b2 <f_truncate+0xf0>
c0006475:	83 ec 0c             	sub    esp,0xc
c0006478:	8d 43 50             	lea    eax,[ebx+0x50]
c000647b:	6a 01                	push   0x1
c000647d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006480:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006483:	50                   	push   eax
c0006484:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006488:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000648c:	50                   	push   eax
c000648d:	e8 7a b7 ff ff       	call   c0001c0c <disk_write>
c0006492:	83 c4 20             	add    esp,0x20
c0006495:	85 c0                	test   eax,eax
c0006497:	75 08                	jne    c00064a1 <f_truncate+0xdf>
c0006499:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000649d:	31 f6                	xor    esi,esi
c000649f:	eb 11                	jmp    c00064b2 <f_truncate+0xf0>
c00064a1:	b8 01 00 00 00       	mov    eax,0x1
c00064a6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064a9:	89 c6                	mov    esi,eax
c00064ab:	eb 05                	jmp    c00064b2 <f_truncate+0xf0>
c00064ad:	be 07 00 00 00       	mov    esi,0x7
c00064b2:	89 f0                	mov    eax,esi
c00064b4:	83 c4 14             	add    esp,0x14
c00064b7:	5b                   	pop    ebx
c00064b8:	5e                   	pop    esi
c00064b9:	c3                   	ret    

c00064ba <f_unlink>:
c00064ba:	56                   	push   esi
c00064bb:	b9 02 00 00 00       	mov    ecx,0x2
c00064c0:	53                   	push   ebx
c00064c1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064c7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064cb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064d2:	e8 fa c1 ff ff       	call   c00026d1 <mount_volume>
c00064d7:	85 c0                	test   eax,eax
c00064d9:	0f 85 55 01 00 00    	jne    c0006634 <f_unlink+0x17a>
c00064df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064e3:	83 ec 0c             	sub    esp,0xc
c00064e6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064ea:	68 60 04 00 00       	push   0x460
c00064ef:	e8 80 1f 00 00       	call   c0008474 <ff_memalloc>
c00064f4:	83 c4 10             	add    esp,0x10
c00064f7:	89 c3                	mov    ebx,eax
c00064f9:	b8 11 00 00 00       	mov    eax,0x11
c00064fe:	85 db                	test   ebx,ebx
c0006500:	0f 84 2e 01 00 00    	je     c0006634 <f_unlink+0x17a>
c0006506:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006510:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006513:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006516:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000651d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006521:	e8 21 e9 ff ff       	call   c0004e47 <follow_path>
c0006526:	85 c0                	test   eax,eax
c0006528:	0f 85 f2 00 00 00    	jne    c0006620 <f_unlink+0x166>
c000652e:	b8 06 00 00 00       	mov    eax,0x6
c0006533:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000653b:	0f 88 df 00 00 00    	js     c0006620 <f_unlink+0x166>
c0006541:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006546:	74 0a                	je     c0006552 <f_unlink+0x98>
c0006548:	b8 07 00 00 00       	mov    eax,0x7
c000654d:	e9 ce 00 00 00       	jmp    c0006620 <f_unlink+0x166>
c0006552:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006556:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000655a:	8a 02                	mov    al,BYTE PTR [edx]
c000655c:	3c 04                	cmp    al,0x4
c000655e:	75 12                	jne    c0006572 <f_unlink+0xb8>
c0006560:	8d 42 10             	lea    eax,[edx+0x10]
c0006563:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006567:	e8 a1 e8 ff ff       	call   c0004e0d <init_alloc_info.isra.2>
c000656c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006570:	eb 0e                	jmp    c0006580 <f_unlink+0xc6>
c0006572:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006579:	e8 3e e8 ff ff       	call   c0004dbc <ld_clust.isra.0>
c000657e:	89 c6                	mov    esi,eax
c0006580:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006585:	75 12                	jne    c0006599 <f_unlink+0xdf>
c0006587:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658b:	e8 94 d6 ff ff       	call   c0003c24 <dir_remove>
c0006590:	85 c0                	test   eax,eax
c0006592:	74 6c                	je     c0006600 <f_unlink+0x146>
c0006594:	e9 87 00 00 00       	jmp    c0006620 <f_unlink+0x166>
c0006599:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000659d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065a4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065ab:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ae:	75 21                	jne    c00065d1 <f_unlink+0x117>
c00065b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065b8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065bf:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065c6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ca:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065d1:	31 d2                	xor    edx,edx
c00065d3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065da:	e8 be cb ff ff       	call   c000319d <dir_sdi>
c00065df:	85 c0                	test   eax,eax
c00065e1:	75 3d                	jne    c0006620 <f_unlink+0x166>
c00065e3:	31 d2                	xor    edx,edx
c00065e5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065ec:	e8 bc d3 ff ff       	call   c00039ad <dir_read>
c00065f1:	85 c0                	test   eax,eax
c00065f3:	0f 84 4f ff ff ff    	je     c0006548 <f_unlink+0x8e>
c00065f9:	83 f8 04             	cmp    eax,0x4
c00065fc:	75 22                	jne    c0006620 <f_unlink+0x166>
c00065fe:	eb 87                	jmp    c0006587 <f_unlink+0xcd>
c0006600:	85 f6                	test   esi,esi
c0006602:	75 0b                	jne    c000660f <f_unlink+0x155>
c0006604:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006608:	e8 3d df ff ff       	call   c000454a <sync_fs>
c000660d:	eb 11                	jmp    c0006620 <f_unlink+0x166>
c000660f:	31 c9                	xor    ecx,ecx
c0006611:	89 f2                	mov    edx,esi
c0006613:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006617:	e8 78 ce ff ff       	call   c0003494 <remove_chain>
c000661c:	85 c0                	test   eax,eax
c000661e:	74 e4                	je     c0006604 <f_unlink+0x14a>
c0006620:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006624:	83 ec 0c             	sub    esp,0xc
c0006627:	53                   	push   ebx
c0006628:	e8 5d 1e 00 00       	call   c000848a <ff_memfree>
c000662d:	83 c4 10             	add    esp,0x10
c0006630:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006634:	81 c4 e4 00 00 00    	add    esp,0xe4
c000663a:	5b                   	pop    ebx
c000663b:	5e                   	pop    esi
c000663c:	c3                   	ret    

c000663d <f_mkdir>:
c000663d:	57                   	push   edi
c000663e:	b9 02 00 00 00       	mov    ecx,0x2
c0006643:	56                   	push   esi
c0006644:	53                   	push   ebx
c0006645:	83 c4 80             	add    esp,0xffffff80
c0006648:	8d 54 24 08          	lea    edx,[esp+0x8]
c000664c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006653:	e8 79 c0 ff ff       	call   c00026d1 <mount_volume>
c0006658:	89 c3                	mov    ebx,eax
c000665a:	85 c0                	test   eax,eax
c000665c:	0f 85 fe 01 00 00    	jne    c0006860 <f_mkdir+0x223>
c0006662:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006666:	bb 11 00 00 00       	mov    ebx,0x11
c000666b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000666f:	83 ec 0c             	sub    esp,0xc
c0006672:	68 60 04 00 00       	push   0x460
c0006677:	e8 f8 1d 00 00       	call   c0008474 <ff_memalloc>
c000667c:	83 c4 10             	add    esp,0x10
c000667f:	89 c7                	mov    edi,eax
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 84 d7 01 00 00    	je     c0006860 <f_mkdir+0x223>
c0006689:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006693:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006696:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006699:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066a0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a4:	e8 9e e7 ff ff       	call   c0004e47 <follow_path>
c00066a9:	89 c3                	mov    ebx,eax
c00066ab:	85 c0                	test   eax,eax
c00066ad:	74 3e                	je     c00066ed <f_mkdir+0xb0>
c00066af:	83 f8 04             	cmp    eax,0x4
c00066b2:	75 3e                	jne    c00066f2 <f_mkdir+0xb5>
c00066b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b8:	31 d2                	xor    edx,edx
c00066ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066c2:	e8 ce cb ff ff       	call   c0003295 <create_chain>
c00066c7:	89 c6                	mov    esi,eax
c00066c9:	85 c0                	test   eax,eax
c00066cb:	74 0c                	je     c00066d9 <f_mkdir+0x9c>
c00066cd:	bb 02 00 00 00       	mov    ebx,0x2
c00066d2:	83 f8 01             	cmp    eax,0x1
c00066d5:	74 07                	je     c00066de <f_mkdir+0xa1>
c00066d7:	eb 2a                	jmp    c0006703 <f_mkdir+0xc6>
c00066d9:	bb 07 00 00 00       	mov    ebx,0x7
c00066de:	31 c9                	xor    ecx,ecx
c00066e0:	89 f2                	mov    edx,esi
c00066e2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e6:	e8 a9 cd ff ff       	call   c0003494 <remove_chain>
c00066eb:	eb 05                	jmp    c00066f2 <f_mkdir+0xb5>
c00066ed:	bb 08 00 00 00       	mov    ebx,0x8
c00066f2:	83 ec 0c             	sub    esp,0xc
c00066f5:	57                   	push   edi
c00066f6:	e8 8f 1d 00 00       	call   c000848a <ff_memfree>
c00066fb:	83 c4 10             	add    esp,0x10
c00066fe:	e9 5d 01 00 00       	jmp    c0006860 <f_mkdir+0x223>
c0006703:	bb 01 00 00 00       	mov    ebx,0x1
c0006708:	83 f8 ff             	cmp    eax,0xffffffff
c000670b:	74 d1                	je     c00066de <f_mkdir+0xa1>
c000670d:	89 f2                	mov    edx,esi
c000670f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006713:	e8 c4 ce ff ff       	call   c00035dc <dir_clear>
c0006718:	89 c3                	mov    ebx,eax
c000671a:	85 c0                	test   eax,eax
c000671c:	75 c0                	jne    c00066de <f_mkdir+0xa1>
c000671e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006722:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006725:	74 69                	je     c0006790 <f_mkdir+0x153>
c0006727:	b9 0b 00 00 00       	mov    ecx,0xb
c000672c:	83 c0 54             	add    eax,0x54
c000672f:	ba 20 00 00 00       	mov    edx,0x20
c0006734:	e8 9c b5 ff ff       	call   c0001cd5 <mem_set>
c0006739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006742:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006746:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000674a:	83 c0 6a             	add    eax,0x6a
c000674d:	e8 65 b5 ff ff       	call   c0001cb7 <st_dword>
c0006752:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006756:	89 f1                	mov    ecx,esi
c0006758:	8d 50 54             	lea    edx,[eax+0x54]
c000675b:	e8 85 e6 ff ff       	call   c0004de5 <st_clust.isra.1>
c0006760:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006764:	b9 20 00 00 00       	mov    ecx,0x20
c0006769:	8d 50 54             	lea    edx,[eax+0x54]
c000676c:	83 c0 74             	add    eax,0x74
c000676f:	e8 4c b5 ff ff       	call   c0001cc0 <mem_cpy>
c0006774:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006778:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000677c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006780:	8d 50 74             	lea    edx,[eax+0x74]
c0006783:	e8 5d e6 ff ff       	call   c0004de5 <st_clust.isra.1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006790:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006794:	e8 2f db ff ff       	call   c00042c8 <dir_register>
c0006799:	89 c3                	mov    ebx,eax
c000679b:	85 c0                	test   eax,eax
c000679d:	0f 85 3b ff ff ff    	jne    c00066de <f_mkdir+0xa1>
c00067a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067aa:	75 74                	jne    c0006820 <f_mkdir+0x1e3>
c00067ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067af:	ba 00 00 21 50       	mov    edx,0x50210000
c00067b4:	83 c0 0c             	add    eax,0xc
c00067b7:	e8 fb b4 ff ff       	call   c0001cb7 <st_dword>
c00067bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c0:	89 f2                	mov    edx,esi
c00067c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c5:	83 c0 34             	add    eax,0x34
c00067c8:	e8 ea b4 ff ff       	call   c0001cb7 <st_dword>
c00067cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d8:	c1 e2 09             	shl    edx,0x9
c00067db:	83 c0 38             	add    eax,0x38
c00067de:	e8 d4 b4 ff ff       	call   c0001cb7 <st_dword>
c00067e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ee:	c1 e2 09             	shl    edx,0x9
c00067f1:	83 c0 28             	add    eax,0x28
c00067f4:	e8 be b4 ff ff       	call   c0001cb7 <st_dword>
c00067f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067fd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006800:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006804:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006807:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000680b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000680f:	e8 8b d3 ff ff       	call   c0003b9f <store_xdir>
c0006814:	89 c3                	mov    ebx,eax
c0006816:	85 c0                	test   eax,eax
c0006818:	0f 85 d4 fe ff ff    	jne    c00066f2 <f_mkdir+0xb5>
c000681e:	eb 30                	jmp    c0006850 <f_mkdir+0x213>
c0006820:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006824:	ba 00 00 21 50       	mov    edx,0x50210000
c0006829:	83 c0 16             	add    eax,0x16
c000682c:	e8 86 b4 ff ff       	call   c0001cb7 <st_dword>
c0006831:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006835:	89 f1                	mov    ecx,esi
c0006837:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000683b:	e8 a5 e5 ff ff       	call   c0004de5 <st_clust.isra.1>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006848:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000684c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006850:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006854:	e8 f1 dc ff ff       	call   c000454a <sync_fs>
c0006859:	89 c3                	mov    ebx,eax
c000685b:	e9 92 fe ff ff       	jmp    c00066f2 <f_mkdir+0xb5>
c0006860:	83 ec 80             	sub    esp,0xffffff80
c0006863:	89 d8                	mov    eax,ebx
c0006865:	5b                   	pop    ebx
c0006866:	5e                   	pop    esi
c0006867:	5f                   	pop    edi
c0006868:	c3                   	ret    

c0006869 <f_rename>:
c0006869:	55                   	push   ebp
c000686a:	57                   	push   edi
c000686b:	56                   	push   esi
c000686c:	53                   	push   ebx
c000686d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006873:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000687a:	e8 a4 b9 ff ff       	call   c0002223 <get_ldnumber>
c000687f:	b9 02 00 00 00       	mov    ecx,0x2
c0006884:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006888:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000688f:	e8 3d be ff ff       	call   c00026d1 <mount_volume>
c0006894:	85 c0                	test   eax,eax
c0006896:	0f 85 b5 02 00 00    	jne    c0006b51 <f_rename+0x2e8>
c000689c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a0:	83 ec 0c             	sub    esp,0xc
c00068a3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068a7:	68 60 04 00 00       	push   0x460
c00068ac:	e8 c3 1b 00 00       	call   c0008474 <ff_memalloc>
c00068b1:	83 c4 10             	add    esp,0x10
c00068b4:	89 c3                	mov    ebx,eax
c00068b6:	b8 11 00 00 00       	mov    eax,0x11
c00068bb:	85 db                	test   ebx,ebx
c00068bd:	0f 84 8e 02 00 00    	je     c0006b51 <f_rename+0x2e8>
c00068c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068cd:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068d3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068da:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068de:	e8 64 e5 ff ff       	call   c0004e47 <follow_path>
c00068e3:	85 c0                	test   eax,eax
c00068e5:	0f 85 52 02 00 00    	jne    c0006b3d <f_rename+0x2d4>
c00068eb:	b8 06 00 00 00       	mov    eax,0x6
c00068f0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068f8:	0f 85 3f 02 00 00    	jne    c0006b3d <f_rename+0x2d4>
c00068fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006902:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006905:	0f 85 05 01 00 00    	jne    c0006a10 <f_rename+0x1a7>
c000690b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000690e:	b9 40 00 00 00       	mov    ecx,0x40
c0006913:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006917:	e8 a4 b3 ff ff       	call   c0001cc0 <mem_cpy>
c000691c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006921:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006925:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000692c:	e8 8f b3 ff ff       	call   c0001cc0 <mem_cpy>
c0006931:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006938:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000693f:	e8 03 e5 ff ff       	call   c0004e47 <follow_path>
c0006944:	85 c0                	test   eax,eax
c0006946:	75 29                	jne    c0006971 <f_rename+0x108>
c0006948:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000694c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006953:	74 0a                	je     c000695f <f_rename+0xf6>
c0006955:	b8 08 00 00 00       	mov    eax,0x8
c000695a:	e9 de 01 00 00       	jmp    c0006b3d <f_rename+0x2d4>
c000695f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006966:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000696d:	75 e6                	jne    c0006955 <f_rename+0xec>
c000696f:	eb 09                	jmp    c000697a <f_rename+0x111>
c0006971:	83 f8 04             	cmp    eax,0x4
c0006974:	0f 85 c3 01 00 00    	jne    c0006b3d <f_rename+0x2d4>
c000697a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006981:	e8 42 d9 ff ff       	call   c00042c8 <dir_register>
c0006986:	85 c0                	test   eax,eax
c0006988:	0f 85 af 01 00 00    	jne    c0006b3d <f_rename+0x2d4>
c000698e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006992:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006995:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006998:	89 c5                	mov    ebp,eax
c000699a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000699d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069a1:	8d 46 24             	lea    eax,[esi+0x24]
c00069a4:	e8 98 b2 ff ff       	call   c0001c41 <ld_word>
c00069a9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ae:	89 c7                	mov    edi,eax
c00069b0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069b4:	89 f0                	mov    eax,esi
c00069b6:	e8 05 b3 ff ff       	call   c0001cc0 <mem_cpy>
c00069bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069bf:	89 e9                	mov    ecx,ebp
c00069c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069c7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069d5:	0f b7 d7             	movzx  edx,di
c00069d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069db:	83 c0 24             	add    eax,0x24
c00069de:	e8 d0 b2 ff ff       	call   c0001cb3 <st_word>
c00069e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069ea:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069ed:	a8 10                	test   al,0x10
c00069ef:	75 06                	jne    c00069f7 <f_rename+0x18e>
c00069f1:	83 c8 20             	or     eax,0x20
c00069f4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069f7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069fe:	e8 9c d1 ff ff       	call   c0003b9f <store_xdir>
c0006a03:	85 c0                	test   eax,eax
c0006a05:	0f 84 1c 01 00 00    	je     c0006b27 <f_rename+0x2be>
c0006a0b:	e9 2d 01 00 00       	jmp    c0006b3d <f_rename+0x2d4>
c0006a10:	b9 20 00 00 00       	mov    ecx,0x20
c0006a15:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a1c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a20:	e8 9b b2 ff ff       	call   c0001cc0 <mem_cpy>
c0006a25:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a2a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a2e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a35:	e8 86 b2 ff ff       	call   c0001cc0 <mem_cpy>
c0006a3a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a41:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a48:	e8 fa e3 ff ff       	call   c0004e47 <follow_path>
c0006a4d:	85 c0                	test   eax,eax
c0006a4f:	75 27                	jne    c0006a78 <f_rename+0x20f>
c0006a51:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a55:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a5c:	0f 85 f3 fe ff ff    	jne    c0006955 <f_rename+0xec>
c0006a62:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a69:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a70:	0f 85 df fe ff ff    	jne    c0006955 <f_rename+0xec>
c0006a76:	eb 09                	jmp    c0006a81 <f_rename+0x218>
c0006a78:	83 f8 04             	cmp    eax,0x4
c0006a7b:	0f 85 bc 00 00 00    	jne    c0006b3d <f_rename+0x2d4>
c0006a81:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a88:	e8 3b d8 ff ff       	call   c00042c8 <dir_register>
c0006a8d:	85 c0                	test   eax,eax
c0006a8f:	0f 85 a8 00 00 00    	jne    c0006b3d <f_rename+0x2d4>
c0006a95:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a9c:	b9 13 00 00 00       	mov    ecx,0x13
c0006aa1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006aa4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006aa8:	e8 13 b2 ff ff       	call   c0001cc0 <mem_cpy>
c0006aad:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ab1:	a8 10                	test   al,0x10
c0006ab3:	75 03                	jne    c0006ab8 <f_rename+0x24f>
c0006ab5:	83 c8 20             	or     eax,0x20
c0006ab8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006abb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006abf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ac7:	74 5e                	je     c0006b27 <f_rename+0x2be>
c0006ac9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ad0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006ad4:	74 51                	je     c0006b27 <f_rename+0x2be>
c0006ad6:	89 f2                	mov    edx,esi
c0006ad8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006adc:	8a 07                	mov    al,BYTE PTR [edi]
c0006ade:	e8 d9 e2 ff ff       	call   c0004dbc <ld_clust.isra.0>
c0006ae3:	89 c2                	mov    edx,eax
c0006ae5:	89 f8                	mov    eax,edi
c0006ae7:	e8 ee b3 ff ff       	call   c0001eda <clst2sect>
c0006aec:	89 c6                	mov    esi,eax
c0006aee:	89 d1                	mov    ecx,edx
c0006af0:	b8 02 00 00 00       	mov    eax,0x2
c0006af5:	09 f2                	or     edx,esi
c0006af7:	74 44                	je     c0006b3d <f_rename+0x2d4>
c0006af9:	89 f2                	mov    edx,esi
c0006afb:	89 f8                	mov    eax,edi
c0006afd:	e8 1d b9 ff ff       	call   c000241f <move_window>
c0006b02:	85 c0                	test   eax,eax
c0006b04:	75 37                	jne    c0006b3d <f_rename+0x2d4>
c0006b06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b0a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b0e:	75 17                	jne    c0006b27 <f_rename+0x2be>
c0006b10:	8d 50 74             	lea    edx,[eax+0x74]
c0006b13:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b1a:	e8 c6 e2 ff ff       	call   c0004de5 <st_clust.isra.1>
c0006b1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b23:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b27:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b2b:	e8 f4 d0 ff ff       	call   c0003c24 <dir_remove>
c0006b30:	85 c0                	test   eax,eax
c0006b32:	75 09                	jne    c0006b3d <f_rename+0x2d4>
c0006b34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b38:	e8 0d da ff ff       	call   c000454a <sync_fs>
c0006b3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b41:	83 ec 0c             	sub    esp,0xc
c0006b44:	53                   	push   ebx
c0006b45:	e8 40 19 00 00       	call   c000848a <ff_memfree>
c0006b4a:	83 c4 10             	add    esp,0x10
c0006b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b51:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b57:	5b                   	pop    ebx
c0006b58:	5e                   	pop    esi
c0006b59:	5f                   	pop    edi
c0006b5a:	5d                   	pop    ebp
c0006b5b:	c3                   	ret    

c0006b5c <f_chmod>:
c0006b5c:	57                   	push   edi
c0006b5d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b62:	56                   	push   esi
c0006b63:	53                   	push   ebx
c0006b64:	83 ec 60             	sub    esp,0x60
c0006b67:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b6b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b6f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b73:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b77:	e8 55 bb ff ff       	call   c00026d1 <mount_volume>
c0006b7c:	85 c0                	test   eax,eax
c0006b7e:	0f 85 af 00 00 00    	jne    c0006c33 <f_chmod+0xd7>
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	83 ec 0c             	sub    esp,0xc
c0006b8b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b8f:	68 60 04 00 00       	push   0x460
c0006b94:	e8 db 18 00 00       	call   c0008474 <ff_memalloc>
c0006b99:	83 c4 10             	add    esp,0x10
c0006b9c:	89 c6                	mov    esi,eax
c0006b9e:	b8 11 00 00 00       	mov    eax,0x11
c0006ba3:	85 f6                	test   esi,esi
c0006ba5:	0f 84 88 00 00 00    	je     c0006c33 <f_chmod+0xd7>
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bb5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bbf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc3:	e8 7f e2 ff ff       	call   c0004e47 <follow_path>
c0006bc8:	85 c0                	test   eax,eax
c0006bca:	75 53                	jne    c0006c1f <f_chmod+0xc3>
c0006bcc:	b8 06 00 00 00       	mov    eax,0x6
c0006bd1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd6:	75 47                	jne    c0006c1f <f_chmod+0xc3>
c0006bd8:	89 f9                	mov    ecx,edi
c0006bda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bde:	83 e1 27             	and    ecx,0x27
c0006be1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006be4:	75 1d                	jne    c0006c03 <f_chmod+0xa7>
c0006be6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bec:	21 cb                	and    ebx,ecx
c0006bee:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bf1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bf4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf8:	e8 a2 cf ff ff       	call   c0003b9f <store_xdir>
c0006bfd:	85 c0                	test   eax,eax
c0006bff:	75 1e                	jne    c0006c1f <f_chmod+0xc3>
c0006c01:	eb 13                	jmp    c0006c16 <f_chmod+0xba>
c0006c03:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c07:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c0a:	21 cb                	and    ebx,ecx
c0006c0c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c0f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c12:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1a:	e8 2b d9 ff ff       	call   c000454a <sync_fs>
c0006c1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c23:	83 ec 0c             	sub    esp,0xc
c0006c26:	56                   	push   esi
c0006c27:	e8 5e 18 00 00       	call   c000848a <ff_memfree>
c0006c2c:	83 c4 10             	add    esp,0x10
c0006c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c33:	83 c4 60             	add    esp,0x60
c0006c36:	5b                   	pop    ebx
c0006c37:	5e                   	pop    esi
c0006c38:	5f                   	pop    edi
c0006c39:	c3                   	ret    

c0006c3a <f_utime>:
c0006c3a:	56                   	push   esi
c0006c3b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c40:	53                   	push   ebx
c0006c41:	83 ec 64             	sub    esp,0x64
c0006c44:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c48:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c50:	e8 7c ba ff ff       	call   c00026d1 <mount_volume>
c0006c55:	85 c0                	test   eax,eax
c0006c57:	0f 85 b5 00 00 00    	jne    c0006d12 <f_utime+0xd8>
c0006c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c61:	83 ec 0c             	sub    esp,0xc
c0006c64:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c68:	68 60 04 00 00       	push   0x460
c0006c6d:	e8 02 18 00 00       	call   c0008474 <ff_memalloc>
c0006c72:	83 c4 10             	add    esp,0x10
c0006c75:	89 c3                	mov    ebx,eax
c0006c77:	b8 11 00 00 00       	mov    eax,0x11
c0006c7c:	85 db                	test   ebx,ebx
c0006c7e:	0f 84 8e 00 00 00    	je     c0006d12 <f_utime+0xd8>
c0006c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c88:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c8e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c91:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c94:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c98:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9c:	e8 a6 e1 ff ff       	call   c0004e47 <follow_path>
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	75 59                	jne    c0006cfe <f_utime+0xc4>
c0006ca5:	b8 06 00 00 00       	mov    eax,0x6
c0006caa:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006caf:	75 4d                	jne    c0006cfe <f_utime+0xc4>
c0006cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cb9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cbd:	c1 e2 10             	shl    edx,0x10
c0006cc0:	09 ca                	or     edx,ecx
c0006cc2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cc5:	75 1a                	jne    c0006ce1 <f_utime+0xa7>
c0006cc7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cca:	83 c0 0c             	add    eax,0xc
c0006ccd:	e8 e5 af ff ff       	call   c0001cb7 <st_dword>
c0006cd2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cd6:	e8 c4 ce ff ff       	call   c0003b9f <store_xdir>
c0006cdb:	85 c0                	test   eax,eax
c0006cdd:	75 1f                	jne    c0006cfe <f_utime+0xc4>
c0006cdf:	eb 14                	jmp    c0006cf5 <f_utime+0xbb>
c0006ce1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ce5:	83 c0 16             	add    eax,0x16
c0006ce8:	e8 ca af ff ff       	call   c0001cb7 <st_dword>
c0006ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf9:	e8 4c d8 ff ff       	call   c000454a <sync_fs>
c0006cfe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d02:	83 ec 0c             	sub    esp,0xc
c0006d05:	53                   	push   ebx
c0006d06:	e8 7f 17 00 00       	call   c000848a <ff_memfree>
c0006d0b:	83 c4 10             	add    esp,0x10
c0006d0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d12:	83 c4 64             	add    esp,0x64
c0006d15:	5b                   	pop    ebx
c0006d16:	5e                   	pop    esi
c0006d17:	c3                   	ret    

c0006d18 <f_getlabel>:
c0006d18:	55                   	push   ebp
c0006d19:	31 c9                	xor    ecx,ecx
c0006d1b:	57                   	push   edi
c0006d1c:	56                   	push   esi
c0006d1d:	53                   	push   ebx
c0006d1e:	83 ec 6c             	sub    esp,0x6c
c0006d21:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d25:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2c:	e8 a0 b9 ff ff       	call   c00026d1 <mount_volume>
c0006d31:	89 c6                	mov    esi,eax
c0006d33:	85 c0                	test   eax,eax
c0006d35:	0f 85 c1 01 00 00    	jne    c0006efc <f_getlabel+0x1e4>
c0006d3b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d43:	0f 84 5f 01 00 00    	je     c0006ea8 <f_getlabel+0x190>
c0006d49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d4d:	31 d2                	xor    edx,edx
c0006d4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d53:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d5b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5f:	e8 39 c4 ff ff       	call   c000319d <dir_sdi>
c0006d64:	85 c0                	test   eax,eax
c0006d66:	0f 85 2d 01 00 00    	jne    c0006e99 <f_getlabel+0x181>
c0006d6c:	ba 01 00 00 00       	mov    edx,0x1
c0006d71:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d75:	e8 33 cc ff ff       	call   c00039ad <dir_read>
c0006d7a:	85 c0                	test   eax,eax
c0006d7c:	0f 85 17 01 00 00    	jne    c0006e99 <f_getlabel+0x181>
c0006d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d86:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d89:	74 09                	je     c0006d94 <f_getlabel+0x7c>
c0006d8b:	31 db                	xor    ebx,ebx
c0006d8d:	31 c9                	xor    ecx,ecx
c0006d8f:	e9 c8 00 00 00       	jmp    c0006e5c <f_getlabel+0x144>
c0006d94:	31 ed                	xor    ebp,ebp
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	31 ff                	xor    edi,edi
c0006d9a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d9e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006da2:	39 fa                	cmp    edx,edi
c0006da4:	76 4b                	jbe    c0006df1 <f_getlabel+0xd9>
c0006da6:	47                   	inc    edi
c0006da7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006daa:	01 d0                	add    eax,edx
c0006dac:	e8 90 ae ff ff       	call   c0001c41 <ld_word>
c0006db1:	66 85 ed             	test   bp,bp
c0006db4:	75 0d                	jne    c0006dc3 <f_getlabel+0xab>
c0006db6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006dbc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006dc1:	76 28                	jbe    c0006deb <f_getlabel+0xd3>
c0006dc3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dca:	89 e9                	mov    ecx,ebp
c0006dcc:	01 da                	add    edx,ebx
c0006dce:	c1 e1 10             	shl    ecx,0x10
c0006dd1:	0f b7 c0             	movzx  eax,ax
c0006dd4:	09 c8                	or     eax,ecx
c0006dd6:	b9 04 00 00 00       	mov    ecx,0x4
c0006ddb:	e8 01 b0 ff ff       	call   c0001de1 <put_utf>
c0006de0:	84 c0                	test   al,al
c0006de2:	74 0b                	je     c0006def <f_getlabel+0xd7>
c0006de4:	0f b6 c0             	movzx  eax,al
c0006de7:	01 c3                	add    ebx,eax
c0006de9:	31 c0                	xor    eax,eax
c0006deb:	89 c5                	mov    ebp,eax
c0006ded:	eb ab                	jmp    c0006d9a <f_getlabel+0x82>
c0006def:	31 db                	xor    ebx,ebx
c0006df1:	66 85 ed             	test   bp,bp
c0006df4:	74 02                	je     c0006df8 <f_getlabel+0xe0>
c0006df6:	31 db                	xor    ebx,ebx
c0006df8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dff:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e03:	e9 a0 00 00 00       	jmp    c0006ea8 <f_getlabel+0x190>
c0006e08:	83 ff 0b             	cmp    edi,0xb
c0006e0b:	74 11                	je     c0006e1e <f_getlabel+0x106>
c0006e0d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e16:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e19:	c1 e0 08             	shl    eax,0x8
c0006e1c:	09 c2                	or     edx,eax
c0006e1e:	0f b7 d2             	movzx  edx,dx
c0006e21:	50                   	push   eax
c0006e22:	50                   	push   eax
c0006e23:	68 b5 01 00 00       	push   0x1b5
c0006e28:	52                   	push   edx
c0006e29:	e8 03 17 00 00       	call   c0008531 <ff_oem2uni>
c0006e2e:	83 c4 10             	add    esp,0x10
c0006e31:	66 85 c0             	test   ax,ax
c0006e34:	74 46                	je     c0006e7c <f_getlabel+0x164>
c0006e36:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e3d:	0f b7 c0             	movzx  eax,ax
c0006e40:	01 da                	add    edx,ebx
c0006e42:	b9 04 00 00 00       	mov    ecx,0x4
c0006e47:	e8 95 af ff ff       	call   c0001de1 <put_utf>
c0006e4c:	84 c0                	test   al,al
c0006e4e:	74 2c                	je     c0006e7c <f_getlabel+0x164>
c0006e50:	0f b6 c0             	movzx  eax,al
c0006e53:	01 c3                	add    ebx,eax
c0006e55:	83 ff 0b             	cmp    edi,0xb
c0006e58:	74 24                	je     c0006e7e <f_getlabel+0x166>
c0006e5a:	89 f9                	mov    ecx,edi
c0006e5c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e60:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e63:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e68:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e71:	e8 9f ae ff ff       	call   c0001d15 <dbc_1st>
c0006e76:	85 c0                	test   eax,eax
c0006e78:	74 a4                	je     c0006e1e <f_getlabel+0x106>
c0006e7a:	eb 8c                	jmp    c0006e08 <f_getlabel+0xf0>
c0006e7c:	31 db                	xor    ebx,ebx
c0006e7e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e85:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e88:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e8f:	74 17                	je     c0006ea8 <f_getlabel+0x190>
c0006e91:	4b                   	dec    ebx
c0006e92:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e95:	74 ee                	je     c0006e85 <f_getlabel+0x16d>
c0006e97:	eb 0f                	jmp    c0006ea8 <f_getlabel+0x190>
c0006e99:	83 f8 04             	cmp    eax,0x4
c0006e9c:	75 5c                	jne    c0006efa <f_getlabel+0x1e2>
c0006e9e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ea5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ea8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006eb0:	74 4a                	je     c0006efc <f_getlabel+0x1e4>
c0006eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006eb9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ebc:	e8 5e b5 ff ff       	call   c000241f <move_window>
c0006ec1:	89 c6                	mov    esi,eax
c0006ec3:	85 c0                	test   eax,eax
c0006ec5:	75 35                	jne    c0006efc <f_getlabel+0x1e4>
c0006ec7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ecb:	b8 43 00 00 00       	mov    eax,0x43
c0006ed0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ed2:	80 f9 03             	cmp    cl,0x3
c0006ed5:	74 0f                	je     c0006ee6 <f_getlabel+0x1ce>
c0006ed7:	31 c0                	xor    eax,eax
c0006ed9:	80 f9 04             	cmp    cl,0x4
c0006edc:	0f 94 c0             	sete   al
c0006edf:	48                   	dec    eax
c0006ee0:	83 e0 c3             	and    eax,0xffffffc3
c0006ee3:	83 c0 64             	add    eax,0x64
c0006ee6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006eea:	e8 5f ad ff ff       	call   c0001c4e <ld_dword>
c0006eef:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006ef6:	89 07                	mov    DWORD PTR [edi],eax
c0006ef8:	eb 02                	jmp    c0006efc <f_getlabel+0x1e4>
c0006efa:	89 c6                	mov    esi,eax
c0006efc:	83 c4 6c             	add    esp,0x6c
c0006eff:	89 f0                	mov    eax,esi
c0006f01:	5b                   	pop    ebx
c0006f02:	5e                   	pop    esi
c0006f03:	5f                   	pop    edi
c0006f04:	5d                   	pop    ebp
c0006f05:	c3                   	ret    

c0006f06 <f_setlabel>:
c0006f06:	56                   	push   esi
c0006f07:	b9 02 00 00 00       	mov    ecx,0x2
c0006f0c:	53                   	push   ebx
c0006f0d:	83 ec 74             	sub    esp,0x74
c0006f10:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f14:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f1b:	e8 b1 b7 ff ff       	call   c00026d1 <mount_volume>
c0006f20:	89 c6                	mov    esi,eax
c0006f22:	85 c0                	test   eax,eax
c0006f24:	0f 85 41 02 00 00    	jne    c000716b <f_setlabel+0x265>
c0006f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f2e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f31:	0f 85 8e 00 00 00    	jne    c0006fc5 <f_setlabel+0xbf>
c0006f37:	b9 16 00 00 00       	mov    ecx,0x16
c0006f3c:	31 d2                	xor    edx,edx
c0006f3e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f42:	31 db                	xor    ebx,ebx
c0006f44:	e8 8c ad ff ff       	call   c0001cd5 <mem_set>
c0006f49:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f50:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f53:	0f 86 0a 01 00 00    	jbe    c0007063 <f_setlabel+0x15d>
c0006f59:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f60:	e8 b6 ad ff ff       	call   c0001d1b <tchar2uni>
c0006f65:	89 c6                	mov    esi,eax
c0006f67:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f6c:	76 2a                	jbe    c0006f98 <f_setlabel+0x92>
c0006f6e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f71:	74 05                	je     c0006f78 <f_setlabel+0x72>
c0006f73:	83 fb 09             	cmp    ebx,0x9
c0006f76:	76 0a                	jbe    c0006f82 <f_setlabel+0x7c>
c0006f78:	be 06 00 00 00       	mov    esi,0x6
c0006f7d:	e9 e9 01 00 00       	jmp    c000716b <f_setlabel+0x265>
c0006f82:	89 c2                	mov    edx,eax
c0006f84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f88:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f8b:	c1 ea 10             	shr    edx,0x10
c0006f8e:	01 c8                	add    eax,ecx
c0006f90:	43                   	inc    ebx
c0006f91:	e8 1d ad ff ff       	call   c0001cb3 <st_word>
c0006f96:	eb 04                	jmp    c0006f9c <f_setlabel+0x96>
c0006f98:	85 c0                	test   eax,eax
c0006f9a:	74 dc                	je     c0006f78 <f_setlabel+0x72>
c0006f9c:	89 f2                	mov    edx,esi
c0006f9e:	b8 b7 9c 02 c0       	mov    eax,0xc0029cb7
c0006fa3:	e8 5b ad ff ff       	call   c0001d03 <chk_chr>
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	75 cc                	jne    c0006f78 <f_setlabel+0x72>
c0006fac:	83 fb 0a             	cmp    ebx,0xa
c0006faf:	77 c7                	ja     c0006f78 <f_setlabel+0x72>
c0006fb1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb8:	0f b7 d6             	movzx  edx,si
c0006fbb:	01 c8                	add    eax,ecx
c0006fbd:	43                   	inc    ebx
c0006fbe:	e8 f0 ac ff ff       	call   c0001cb3 <st_word>
c0006fc3:	eb 84                	jmp    c0006f49 <f_setlabel+0x43>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	ba 20 00 00 00       	mov    edx,0x20
c0006fcf:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fd3:	31 db                	xor    ebx,ebx
c0006fd5:	e8 fb ac ff ff       	call   c0001cd5 <mem_set>
c0006fda:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fe1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fe4:	76 60                	jbe    c0007046 <f_setlabel+0x140>
c0006fe6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fed:	e8 29 ad ff ff       	call   c0001d1b <tchar2uni>
c0006ff2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006ff7:	0f 87 7b ff ff ff    	ja     c0006f78 <f_setlabel+0x72>
c0006ffd:	83 ec 0c             	sub    esp,0xc
c0007000:	50                   	push   eax
c0007001:	e8 97 15 00 00       	call   c000859d <ff_wtoupper>
c0007006:	5a                   	pop    edx
c0007007:	59                   	pop    ecx
c0007008:	68 b5 01 00 00       	push   0x1b5
c000700d:	50                   	push   eax
c000700e:	e8 8e 14 00 00       	call   c00084a1 <ff_uni2oem>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	89 c6                	mov    esi,eax
c0007018:	66 85 c0             	test   ax,ax
c000701b:	0f 84 57 ff ff ff    	je     c0006f78 <f_setlabel+0x72>
c0007021:	0f b7 d0             	movzx  edx,ax
c0007024:	b8 b0 9c 02 c0       	mov    eax,0xc0029cb0
c0007029:	e8 d5 ac ff ff       	call   c0001d03 <chk_chr>
c000702e:	85 c0                	test   eax,eax
c0007030:	0f 85 42 ff ff ff    	jne    c0006f78 <f_setlabel+0x72>
c0007036:	66 81 fe ff 00       	cmp    si,0xff
c000703b:	0f 87 14 01 00 00    	ja     c0007155 <f_setlabel+0x24f>
c0007041:	e9 fa 00 00 00       	jmp    c0007140 <f_setlabel+0x23a>
c0007046:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000704b:	0f 84 27 ff ff ff    	je     c0006f78 <f_setlabel+0x72>
c0007051:	85 db                	test   ebx,ebx
c0007053:	74 0e                	je     c0007063 <f_setlabel+0x15d>
c0007055:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007058:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000705d:	75 04                	jne    c0007063 <f_setlabel+0x15d>
c000705f:	89 c3                	mov    ebx,eax
c0007061:	eb ee                	jmp    c0007051 <f_setlabel+0x14b>
c0007063:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007067:	31 d2                	xor    edx,edx
c0007069:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000706d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007075:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007079:	e8 1f c1 ff ff       	call   c000319d <dir_sdi>
c000707e:	89 c6                	mov    esi,eax
c0007080:	85 c0                	test   eax,eax
c0007082:	0f 85 e3 00 00 00    	jne    c000716b <f_setlabel+0x265>
c0007088:	ba 01 00 00 00       	mov    edx,0x1
c000708d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007091:	e8 17 c9 ff ff       	call   c00039ad <dir_read>
c0007096:	85 c0                	test   eax,eax
c0007098:	75 21                	jne    c00070bb <f_setlabel+0x1b5>
c000709a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000709e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070a5:	74 5d                	je     c0007104 <f_setlabel+0x1fe>
c00070a7:	85 db                	test   ebx,ebx
c00070a9:	74 0b                	je     c00070b6 <f_setlabel+0x1b0>
c00070ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00070b0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070b4:	eb 70                	jmp    c0007126 <f_setlabel+0x220>
c00070b6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070b9:	eb 70                	jmp    c000712b <f_setlabel+0x225>
c00070bb:	83 f8 04             	cmp    eax,0x4
c00070be:	75 7c                	jne    c000713c <f_setlabel+0x236>
c00070c0:	85 db                	test   ebx,ebx
c00070c2:	0f 84 a3 00 00 00    	je     c000716b <f_setlabel+0x265>
c00070c8:	ba 01 00 00 00       	mov    edx,0x1
c00070cd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070d1:	e8 51 ca ff ff       	call   c0003b27 <dir_alloc>
c00070d6:	89 c6                	mov    esi,eax
c00070d8:	85 c0                	test   eax,eax
c00070da:	0f 85 8b 00 00 00    	jne    c000716b <f_setlabel+0x265>
c00070e0:	31 d2                	xor    edx,edx
c00070e2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e6:	b9 20 00 00 00       	mov    ecx,0x20
c00070eb:	e8 e5 ab ff ff       	call   c0001cd5 <mem_set>
c00070f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070f7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070fb:	75 18                	jne    c0007115 <f_setlabel+0x20f>
c00070fd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007100:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007104:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007107:	b9 16 00 00 00       	mov    ecx,0x16
c000710c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007110:	83 c0 02             	add    eax,0x2
c0007113:	eb 9b                	jmp    c00070b0 <f_setlabel+0x1aa>
c0007115:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007119:	b9 0b 00 00 00       	mov    ecx,0xb
c000711e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007122:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007126:	e8 95 ab ff ff       	call   c0001cc0 <mem_cpy>
c000712b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000712f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007133:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007137:	e8 0e d4 ff ff       	call   c000454a <sync_fs>
c000713c:	89 c6                	mov    esi,eax
c000713e:	eb 2b                	jmp    c000716b <f_setlabel+0x265>
c0007140:	83 fb 0a             	cmp    ebx,0xa
c0007143:	0f 87 2f fe ff ff    	ja     c0006f78 <f_setlabel+0x72>
c0007149:	89 f0                	mov    eax,esi
c000714b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714f:	43                   	inc    ebx
c0007150:	e9 85 fe ff ff       	jmp    c0006fda <f_setlabel+0xd4>
c0007155:	83 fb 09             	cmp    ebx,0x9
c0007158:	0f 87 1a fe ff ff    	ja     c0006f78 <f_setlabel+0x72>
c000715e:	89 f0                	mov    eax,esi
c0007160:	66 c1 e8 08          	shr    ax,0x8
c0007164:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007168:	43                   	inc    ebx
c0007169:	eb de                	jmp    c0007149 <f_setlabel+0x243>
c000716b:	89 f0                	mov    eax,esi
c000716d:	83 c4 74             	add    esp,0x74
c0007170:	5b                   	pop    ebx
c0007171:	5e                   	pop    esi
c0007172:	c3                   	ret    

c0007173 <f_forward>:
c0007173:	55                   	push   ebp
c0007174:	57                   	push   edi
c0007175:	56                   	push   esi
c0007176:	53                   	push   ebx
c0007177:	83 ec 2c             	sub    esp,0x2c
c000717a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000717e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007182:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007188:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000718c:	89 d8                	mov    eax,ebx
c000718e:	e8 b1 b1 ff ff       	call   c0002344 <validate>
c0007193:	89 c5                	mov    ebp,eax
c0007195:	85 c0                	test   eax,eax
c0007197:	0f 85 aa 01 00 00    	jne    c0007347 <f_forward+0x1d4>
c000719d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071a1:	85 ed                	test   ebp,ebp
c00071a3:	0f 85 9e 01 00 00    	jne    c0007347 <f_forward+0x1d4>
c00071a9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071ad:	0f 84 8f 01 00 00    	je     c0007342 <f_forward+0x1cf>
c00071b3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071b6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071b9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071bc:	bf 00 00 00 00       	mov    edi,0x0
c00071c1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071c4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071c8:	89 d1                	mov    ecx,edx
c00071ca:	19 f9                	sbb    ecx,edi
c00071cc:	0f 83 cf 00 00 00    	jae    c00072a1 <f_forward+0x12e>
c00071d2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071d6:	e9 c6 00 00 00       	jmp    c00072a1 <f_forward+0x12e>
c00071db:	50                   	push   eax
c00071dc:	50                   	push   eax
c00071dd:	6a 00                	push   0x0
c00071df:	6a 00                	push   0x0
c00071e1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071e5:	83 c4 10             	add    esp,0x10
c00071e8:	85 c0                	test   eax,eax
c00071ea:	0f 84 57 01 00 00    	je     c0007347 <f_forward+0x1d4>
c00071f0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071f7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071fa:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071fe:	89 d7                	mov    edi,edx
c0007200:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007203:	89 c6                	mov    esi,eax
c0007205:	0f ac fe 09          	shrd   esi,edi,0x9
c0007209:	21 ce                	and    esi,ecx
c000720b:	89 c1                	mov    ecx,eax
c000720d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007213:	0f 84 98 00 00 00    	je     c00072b1 <f_forward+0x13e>
c0007219:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007220:	89 c8                	mov    eax,ecx
c0007222:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007226:	e8 af ac ff ff       	call   c0001eda <clst2sect>
c000722b:	89 d7                	mov    edi,edx
c000722d:	09 c7                	or     edi,eax
c000722f:	0f 84 9e 00 00 00    	je     c00072d3 <f_forward+0x160>
c0007235:	31 ff                	xor    edi,edi
c0007237:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000723a:	01 c6                	add    esi,eax
c000723c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007240:	11 d7                	adc    edi,edx
c0007242:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007245:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007248:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000724c:	39 fa                	cmp    edx,edi
c000724e:	0f 85 a2 00 00 00    	jne    c00072f6 <f_forward+0x183>
c0007254:	39 f0                	cmp    eax,esi
c0007256:	0f 85 9a 00 00 00    	jne    c00072f6 <f_forward+0x183>
c000725c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000725f:	ba 00 02 00 00       	mov    edx,0x200
c0007264:	25 ff 01 00 00       	and    eax,0x1ff
c0007269:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000726d:	29 c2                	sub    edx,eax
c000726f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007272:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007275:	39 d1                	cmp    ecx,edx
c0007277:	76 02                	jbe    c000727b <f_forward+0x108>
c0007279:	89 d1                	mov    ecx,edx
c000727b:	8d 73 50             	lea    esi,[ebx+0x50]
c000727e:	52                   	push   edx
c000727f:	01 c6                	add    esi,eax
c0007281:	52                   	push   edx
c0007282:	51                   	push   ecx
c0007283:	56                   	push   esi
c0007284:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007288:	83 c4 10             	add    esp,0x10
c000728b:	85 c0                	test   eax,eax
c000728d:	74 44                	je     c00072d3 <f_forward+0x160>
c000728f:	31 ff                	xor    edi,edi
c0007291:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007294:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007297:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000729b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000729f:	01 07                	add    DWORD PTR [edi],eax
c00072a1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072a6:	0f 85 2f ff ff ff    	jne    c00071db <f_forward+0x68>
c00072ac:	e9 96 00 00 00       	jmp    c0007347 <f_forward+0x1d4>
c00072b1:	85 f6                	test   esi,esi
c00072b3:	0f 85 60 ff ff ff    	jne    c0007219 <f_forward+0xa6>
c00072b9:	89 d7                	mov    edi,edx
c00072bb:	09 c7                	or     edi,eax
c00072bd:	75 05                	jne    c00072c4 <f_forward+0x151>
c00072bf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072c2:	eb 0a                	jmp    c00072ce <f_forward+0x15b>
c00072c4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072c7:	89 d8                	mov    eax,ebx
c00072c9:	e8 d9 bc ff ff       	call   c0002fa7 <get_fat>
c00072ce:	83 f8 01             	cmp    eax,0x1
c00072d1:	77 0b                	ja     c00072de <f_forward+0x16b>
c00072d3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072d7:	bd 02 00 00 00       	mov    ebp,0x2
c00072dc:	eb 69                	jmp    c0007347 <f_forward+0x1d4>
c00072de:	83 f8 ff             	cmp    eax,0xffffffff
c00072e1:	75 0b                	jne    c00072ee <f_forward+0x17b>
c00072e3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072e7:	bd 01 00 00 00       	mov    ebp,0x1
c00072ec:	eb 59                	jmp    c0007347 <f_forward+0x1d4>
c00072ee:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072f1:	e9 23 ff ff ff       	jmp    c0007219 <f_forward+0xa6>
c00072f6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072fa:	79 20                	jns    c000731c <f_forward+0x1a9>
c00072fc:	83 ec 0c             	sub    esp,0xc
c00072ff:	6a 01                	push   0x1
c0007301:	52                   	push   edx
c0007302:	50                   	push   eax
c0007303:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007307:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000730b:	50                   	push   eax
c000730c:	e8 fb a8 ff ff       	call   c0001c0c <disk_write>
c0007311:	83 c4 20             	add    esp,0x20
c0007314:	85 c0                	test   eax,eax
c0007316:	75 cb                	jne    c00072e3 <f_forward+0x170>
c0007318:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	57                   	push   edi
c0007322:	56                   	push   esi
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000732b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000732f:	50                   	push   eax
c0007330:	e8 c1 a8 ff ff       	call   c0001bf6 <disk_read>
c0007335:	83 c4 20             	add    esp,0x20
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 1c ff ff ff    	je     c000725c <f_forward+0xe9>
c0007340:	eb a1                	jmp    c00072e3 <f_forward+0x170>
c0007342:	bd 07 00 00 00       	mov    ebp,0x7
c0007347:	83 c4 2c             	add    esp,0x2c
c000734a:	89 e8                	mov    eax,ebp
c000734c:	5b                   	pop    ebx
c000734d:	5e                   	pop    esi
c000734e:	5f                   	pop    edi
c000734f:	5d                   	pop    ebp
c0007350:	c3                   	ret    

c0007351 <f_mkfs>:
c0007351:	55                   	push   ebp
c0007352:	57                   	push   edi
c0007353:	56                   	push   esi
c0007354:	53                   	push   ebx
c0007355:	bb 0b 00 00 00       	mov    ebx,0xb
c000735a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007360:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007367:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000736e:	e8 b0 ae ff ff       	call   c0002223 <get_ldnumber>
c0007373:	85 c0                	test   eax,eax
c0007375:	0f 88 ec 10 00 00    	js     c0008467 <f_mkfs+0x1116>
c000737b:	8b 14 85 00 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1200]
c0007382:	85 d2                	test   edx,edx
c0007384:	74 03                	je     c0007389 <f_mkfs+0x38>
c0007386:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007389:	85 f6                	test   esi,esi
c000738b:	75 05                	jne    c0007392 <f_mkfs+0x41>
c000738d:	be a0 9c 02 c0       	mov    esi,0xc0029ca0
c0007392:	83 ec 0c             	sub    esp,0xc
c0007395:	0f b6 c0             	movzx  eax,al
c0007398:	bb 03 00 00 00       	mov    ebx,0x3
c000739d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a5:	e8 49 a8 ff ff       	call   c0001bf3 <disk_initialize>
c00073aa:	83 c4 10             	add    esp,0x10
c00073ad:	a8 01                	test   al,0x1
c00073af:	0f 85 b2 10 00 00    	jne    c0008467 <f_mkfs+0x1116>
c00073b5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073ba:	a8 04                	test   al,0x4
c00073bc:	0f 85 a5 10 00 00    	jne    c0008467 <f_mkfs+0x1116>
c00073c2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073c5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073c9:	85 c0                	test   eax,eax
c00073cb:	75 20                	jne    c00073ed <f_mkfs+0x9c>
c00073cd:	51                   	push   ecx
c00073ce:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073d2:	50                   	push   eax
c00073d3:	6a 03                	push   0x3
c00073d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073d9:	e8 44 a8 ff ff       	call   c0001c22 <disk_ioctl>
c00073de:	83 c4 10             	add    esp,0x10
c00073e1:	85 c0                	test   eax,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0x9c>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073f1:	8d 42 ff             	lea    eax,[edx-0x1]
c00073f4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073f9:	77 04                	ja     c00073ff <f_mkfs+0xae>
c00073fb:	85 c2                	test   edx,eax
c00073fd:	74 08                	je     c0007407 <f_mkfs+0xb6>
c00073ff:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007407:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000740a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000740e:	48                   	dec    eax
c000740f:	3c 01                	cmp    al,0x1
c0007411:	76 05                	jbe    c0007418 <f_mkfs+0xc7>
c0007413:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007418:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000741b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000741f:	48                   	dec    eax
c0007420:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007425:	77 07                	ja     c000742e <f_mkfs+0xdd>
c0007427:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000742c:	74 08                	je     c0007436 <f_mkfs+0xe5>
c000742e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007436:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007439:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000743f:	77 07                	ja     c0007448 <f_mkfs+0xf7>
c0007441:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007444:	85 d8                	test   eax,ebx
c0007446:	74 02                	je     c000744a <f_mkfs+0xf9>
c0007448:	31 db                	xor    ebx,ebx
c000744a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007455:	77 0a                	ja     c0007461 <f_mkfs+0x110>
c0007457:	bb 11 00 00 00       	mov    ebx,0x11
c000745c:	e9 06 10 00 00       	jmp    c0008467 <f_mkfs+0x1116>
c0007461:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007468:	8b 36                	mov    esi,DWORD PTR [esi]
c000746a:	85 ed                	test   ebp,ebp
c000746c:	75 1e                	jne    c000748c <f_mkfs+0x13b>
c000746e:	83 ec 0c             	sub    esp,0xc
c0007471:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007478:	25 00 fe ff ff       	and    eax,0xfffffe00
c000747d:	50                   	push   eax
c000747e:	e8 f1 0f 00 00       	call   c0008474 <ff_memalloc>
c0007483:	83 c4 10             	add    esp,0x10
c0007486:	89 c5                	mov    ebp,eax
c0007488:	85 c0                	test   eax,eax
c000748a:	74 cb                	je     c0007457 <f_mkfs+0x106>
c000748c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007494:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000749c:	52                   	push   edx
c000749d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074a1:	50                   	push   eax
c00074a2:	6a 01                	push   0x1
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	e8 75 a7 ff ff       	call   c0001c22 <disk_ioctl>
c00074ad:	83 c4 10             	add    esp,0x10
c00074b0:	85 c0                	test   eax,eax
c00074b2:	0f 85 4a 0f 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c00074b8:	89 f1                	mov    ecx,esi
c00074ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074c2:	83 e1 0f             	and    ecx,0xf
c00074c5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074cd:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074d1:	83 e6 08             	and    esi,0x8
c00074d4:	75 56                	jne    c000752c <f_mkfs+0x1db>
c00074d6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074da:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074de:	83 ff 00             	cmp    edi,0x0
c00074e1:	76 20                	jbe    c0007503 <f_mkfs+0x1b2>
c00074e3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074e8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074f0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074f6:	83 d7 ff             	adc    edi,0xffffffff
c00074f9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074fd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007501:	eb 21                	jmp    c0007524 <f_mkfs+0x1d3>
c0007503:	ba 3f 00 00 00       	mov    edx,0x3f
c0007508:	39 f2                	cmp    edx,esi
c000750a:	19 f8                	sbb    eax,edi
c000750c:	73 1e                	jae    c000752c <f_mkfs+0x1db>
c000750e:	83 c6 c1             	add    esi,0xffffffc1
c0007511:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007519:	83 d7 ff             	adc    edi,0xffffffff
c000751c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007520:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007524:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000752c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007530:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007534:	89 04 24             	mov    DWORD PTR [esp],eax
c0007537:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000753b:	31 c0                	xor    eax,eax
c000753d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007542:	89 c7                	mov    edi,eax
c0007544:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007547:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000754b:	0f 83 c5 0a 00 00    	jae    c0008016 <f_mkfs+0xcc5>
c0007551:	89 df                	mov    edi,ebx
c0007553:	c1 ef 09             	shr    edi,0x9
c0007556:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000755a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007561:	c1 ef 09             	shr    edi,0x9
c0007564:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007569:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000756d:	74 29                	je     c0007598 <f_mkfs+0x247>
c000756f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007575:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000757a:	0f 97 c2             	seta   dl
c000757d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007580:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007584:	0f 92 c0             	setb   al
c0007587:	08 c2                	or     dl,al
c0007589:	75 5b                	jne    c00075e6 <f_mkfs+0x295>
c000758b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000758f:	83 e0 07             	and    eax,0x7
c0007592:	3c 04                	cmp    al,0x4
c0007594:	74 50                	je     c00075e6 <f_mkfs+0x295>
c0007596:	eb 1b                	jmp    c00075b3 <f_mkfs+0x262>
c0007598:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000759d:	0f 87 73 0a 00 00    	ja     c0008016 <f_mkfs+0xcc5>
c00075a3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075a9:	76 08                	jbe    c00075b3 <f_mkfs+0x262>
c00075ab:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075b3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075bb:	83 e0 01             	and    eax,0x1
c00075be:	80 e1 02             	and    cl,0x2
c00075c1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075c5:	74 0d                	je     c00075d4 <f_mkfs+0x283>
c00075c7:	84 c0                	test   al,al
c00075c9:	0f 84 53 09 00 00    	je     c0007f22 <f_mkfs+0xbd1>
c00075cf:	e9 12 08 00 00       	jmp    c0007de6 <f_mkfs+0xa95>
c00075d4:	bb 13 00 00 00       	mov    ebx,0x13
c00075d9:	84 c0                	test   al,al
c00075db:	0f 85 05 08 00 00    	jne    c0007de6 <f_mkfs+0xa95>
c00075e1:	e9 39 0e 00 00       	jmp    c000841f <f_mkfs+0x10ce>
c00075e6:	31 c0                	xor    eax,eax
c00075e8:	ba ff 0f 00 00       	mov    edx,0xfff
c00075ed:	89 c7                	mov    edi,eax
c00075ef:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075f2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075f6:	0f 83 1a 0a 00 00    	jae    c0008016 <f_mkfs+0xcc5>
c00075fc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007602:	77 39                	ja     c000763d <f_mkfs+0x2ec>
c0007604:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007609:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007611:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007614:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007618:	73 08                	jae    c0007622 <f_mkfs+0x2d1>
c000761a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007622:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007627:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000762a:	b8 00 00 00 00       	mov    eax,0x0
c000762f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007633:	73 08                	jae    c000763d <f_mkfs+0x2ec>
c0007635:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000763d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007641:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007645:	83 c0 20             	add    eax,0x20
c0007648:	83 d2 00             	adc    edx,0x0
c000764b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000764f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007657:	31 d2                	xor    edx,edx
c0007659:	31 ff                	xor    edi,edi
c000765b:	52                   	push   edx
c000765c:	89 fb                	mov    ebx,edi
c000765e:	50                   	push   eax
c000765f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007663:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007667:	e8 78 fb 01 00       	call   c00271e4 <__udivdi3>
c000766c:	83 c4 10             	add    esp,0x10
c000766f:	c1 e0 02             	shl    eax,0x2
c0007672:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007676:	05 07 02 00 00       	add    eax,0x207
c000767b:	89 f1                	mov    ecx,esi
c000767d:	c1 e8 09             	shr    eax,0x9
c0007680:	83 c1 ff             	add    ecx,0xffffffff
c0007683:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007687:	83 d3 ff             	adc    ebx,0xffffffff
c000768a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000768e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007692:	31 d2                	xor    edx,edx
c0007694:	01 c8                	add    eax,ecx
c0007696:	11 da                	adc    edx,ebx
c0007698:	89 c1                	mov    ecx,eax
c000769a:	f7 de                	neg    esi
c000769c:	89 d0                	mov    eax,edx
c000769e:	83 d7 00             	adc    edi,0x0
c00076a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076a5:	f7 df                	neg    edi
c00076a7:	21 f1                	and    ecx,esi
c00076a9:	21 f8                	and    eax,edi
c00076ab:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076b3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076bb:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076c2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076c6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ca:	89 df                	mov    edi,ebx
c00076cc:	d1 ea                	shr    edx,1
c00076ce:	39 c1                	cmp    ecx,eax
c00076d0:	19 d7                	sbb    edi,edx
c00076d2:	0f 83 3e 09 00 00    	jae    c0008016 <f_mkfs+0xcc5>
c00076d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076dc:	31 d2                	xor    edx,edx
c00076de:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076ea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ed:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076f1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076f5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076fd:	83 f8 0f             	cmp    eax,0xf
c0007700:	0f 86 10 09 00 00    	jbe    c0008016 <f_mkfs+0xcc5>
c0007706:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000770e:	0f 87 02 09 00 00    	ja     c0008016 <f_mkfs+0xcc5>
c0007714:	31 d2                	xor    edx,edx
c0007716:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000771a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007722:	83 c0 07             	add    eax,0x7
c0007725:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000772d:	c1 e8 03             	shr    eax,0x3
c0007730:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007737:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000773b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000773f:	c1 e0 09             	shl    eax,0x9
c0007742:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007746:	48                   	dec    eax
c0007747:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000774b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000774f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007753:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007757:	31 d2                	xor    edx,edx
c0007759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000775d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007768:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000776d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007771:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007775:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007779:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000777d:	31 ff                	xor    edi,edi
c000777f:	31 f6                	xor    esi,esi
c0007781:	31 db                	xor    ebx,ebx
c0007783:	85 ff                	test   edi,edi
c0007785:	74 05                	je     c000778c <f_mkfs+0x43b>
c0007787:	4f                   	dec    edi
c0007788:	74 44                	je     c00077ce <f_mkfs+0x47d>
c000778a:	eb 4f                	jmp    c00077db <f_mkfs+0x48a>
c000778c:	83 ec 0c             	sub    esp,0xc
c000778f:	0f b7 c3             	movzx  eax,bx
c0007792:	50                   	push   eax
c0007793:	e8 05 0e 00 00       	call   c000859d <ff_wtoupper>
c0007798:	83 c4 10             	add    esp,0x10
c000779b:	89 c1                	mov    ecx,eax
c000779d:	8d 53 01             	lea    edx,[ebx+0x1]
c00077a0:	66 39 c3             	cmp    bx,ax
c00077a3:	75 3e                	jne    c00077e3 <f_mkfs+0x492>
c00077a5:	be 01 00 00 00       	mov    esi,0x1
c00077aa:	89 df                	mov    edi,ebx
c00077ac:	66 01 f7             	add    di,si
c00077af:	75 07                	jne    c00077b8 <f_mkfs+0x467>
c00077b1:	83 fe 7f             	cmp    esi,0x7f
c00077b4:	77 31                	ja     c00077e7 <f_mkfs+0x496>
c00077b6:	eb 16                	jmp    c00077ce <f_mkfs+0x47d>
c00077b8:	83 ec 0c             	sub    esp,0xc
c00077bb:	0f b7 ff             	movzx  edi,di
c00077be:	57                   	push   edi
c00077bf:	e8 d9 0d 00 00       	call   c000859d <ff_wtoupper>
c00077c4:	83 c4 10             	add    esp,0x10
c00077c7:	39 c7                	cmp    edi,eax
c00077c9:	75 e6                	jne    c00077b1 <f_mkfs+0x460>
c00077cb:	46                   	inc    esi
c00077cc:	eb dc                	jmp    c00077aa <f_mkfs+0x459>
c00077ce:	31 c0                	xor    eax,eax
c00077d0:	89 d9                	mov    ecx,ebx
c00077d2:	4e                   	dec    esi
c00077d3:	0f 95 c0             	setne  al
c00077d6:	43                   	inc    ebx
c00077d7:	89 c7                	mov    edi,eax
c00077d9:	eb 14                	jmp    c00077ef <f_mkfs+0x49e>
c00077db:	89 f1                	mov    ecx,esi
c00077dd:	01 f3                	add    ebx,esi
c00077df:	31 ff                	xor    edi,edi
c00077e1:	eb 0c                	jmp    c00077ef <f_mkfs+0x49e>
c00077e3:	89 d3                	mov    ebx,edx
c00077e5:	eb 08                	jmp    c00077ef <f_mkfs+0x49e>
c00077e7:	bf 02 00 00 00       	mov    edi,0x2
c00077ec:	83 c9 ff             	or     ecx,0xffffffff
c00077ef:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077fa:	0f b6 c1             	movzx  eax,cl
c00077fd:	e8 3a a9 ff ff       	call   c000213c <xsum32>
c0007802:	66 c1 e9 08          	shr    cx,0x8
c0007806:	89 c2                	mov    edx,eax
c0007808:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000780f:	0f b7 c1             	movzx  eax,cx
c0007812:	e8 25 a9 ff ff       	call   c000213c <xsum32>
c0007817:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000781c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007820:	66 85 db             	test   bx,bx
c0007823:	74 1f                	je     c0007844 <f_mkfs+0x4f3>
c0007825:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007828:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000782f:	83 c0 02             	add    eax,0x2
c0007832:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007838:	39 c2                	cmp    edx,eax
c000783a:	74 08                	je     c0007844 <f_mkfs+0x4f3>
c000783c:	89 04 24             	mov    DWORD PTR [esp],eax
c000783f:	e9 3f ff ff ff       	jmp    c0007783 <f_mkfs+0x432>
c0007844:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007847:	83 ec 0c             	sub    esp,0xc
c000784a:	05 01 02 00 00       	add    eax,0x201
c000784f:	c1 e8 09             	shr    eax,0x9
c0007852:	50                   	push   eax
c0007853:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007857:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000785b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000785f:	55                   	push   ebp
c0007860:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007864:	e8 a3 a3 ff ff       	call   c0001c0c <disk_write>
c0007869:	83 c4 20             	add    esp,0x20
c000786c:	85 c0                	test   eax,eax
c000786e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007871:	0f 85 8b 0b 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c0007877:	89 d0                	mov    eax,edx
c0007879:	31 d2                	xor    edx,edx
c000787b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000787f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007883:	66 85 db             	test   bx,bx
c0007886:	74 04                	je     c000788c <f_mkfs+0x53b>
c0007888:	31 c0                	xor    eax,eax
c000788a:	eb b0                	jmp    c000783c <f_mkfs+0x4eb>
c000788c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007890:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007894:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007898:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000789e:	31 d2                	xor    edx,edx
c00078a0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078ab:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078af:	c1 eb 09             	shr    ebx,0x9
c00078b2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078bd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078c5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078c9:	8d 70 01             	lea    esi,[eax+0x1]
c00078cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078d4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078db:	31 d2                	xor    edx,edx
c00078dd:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e5:	89 c1                	mov    ecx,eax
c00078e7:	89 e8                	mov    eax,ebp
c00078e9:	e8 e7 a3 ff ff       	call   c0001cd5 <mem_set>
c00078ee:	31 c0                	xor    eax,eax
c00078f0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f3:	76 10                	jbe    c0007905 <f_mkfs+0x5b4>
c00078f5:	83 fe 07             	cmp    esi,0x7
c00078f8:	76 0b                	jbe    c0007905 <f_mkfs+0x5b4>
c00078fa:	40                   	inc    eax
c00078fb:	83 ee 08             	sub    esi,0x8
c00078fe:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007903:	eb eb                	jmp    c00078f0 <f_mkfs+0x59f>
c0007905:	b2 01                	mov    dl,0x1
c0007907:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000790b:	85 f6                	test   esi,esi
c000790d:	74 0c                	je     c000791b <f_mkfs+0x5ca>
c000790f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007912:	76 07                	jbe    c000791b <f_mkfs+0x5ca>
c0007914:	08 11                	or     BYTE PTR [ecx],dl
c0007916:	4e                   	dec    esi
c0007917:	d1 e2                	shl    edx,1
c0007919:	eb f0                	jmp    c000790b <f_mkfs+0x5ba>
c000791b:	89 df                	mov    edi,ebx
c000791d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007921:	76 04                	jbe    c0007927 <f_mkfs+0x5d6>
c0007923:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007927:	83 ec 0c             	sub    esp,0xc
c000792a:	57                   	push   edi
c000792b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000792f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007933:	55                   	push   ebp
c0007934:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007938:	e8 cf a2 ff ff       	call   c0001c0c <disk_write>
c000793d:	83 c4 20             	add    esp,0x20
c0007940:	85 c0                	test   eax,eax
c0007942:	0f 85 ba 0a 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c0007948:	31 d2                	xor    edx,edx
c000794a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000794e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007952:	29 fb                	sub    ebx,edi
c0007954:	0f 85 7a ff ff ff    	jne    c00078d4 <f_mkfs+0x583>
c000795a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000795e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007966:	31 f6                	xor    esi,esi
c0007968:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000796c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000796f:	31 d2                	xor    edx,edx
c0007971:	89 e8                	mov    eax,ebp
c0007973:	e8 5d a3 ff ff       	call   c0001cd5 <mem_set>
c0007978:	31 c9                	xor    ecx,ecx
c000797a:	85 db                	test   ebx,ebx
c000797c:	75 40                	jne    c00079be <f_mkfs+0x66d>
c000797e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007983:	89 e8                	mov    eax,ebp
c0007985:	bb 02 00 00 00       	mov    ebx,0x2
c000798a:	e8 28 a3 ff ff       	call   c0001cb7 <st_dword>
c000798f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007992:	83 ca ff             	or     edx,0xffffffff
c0007995:	e8 1d a3 ff ff       	call   c0001cb7 <st_dword>
c000799a:	b9 08 00 00 00       	mov    ecx,0x8
c000799f:	eb 1d                	jmp    c00079be <f_mkfs+0x66d>
c00079a1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079a4:	76 3b                	jbe    c00079e1 <f_mkfs+0x690>
c00079a6:	43                   	inc    ebx
c00079a7:	83 fe 01             	cmp    esi,0x1
c00079aa:	89 da                	mov    edx,ebx
c00079ac:	77 03                	ja     c00079b1 <f_mkfs+0x660>
c00079ae:	83 ca ff             	or     edx,0xffffffff
c00079b1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079b5:	4e                   	dec    esi
c00079b6:	e8 fc a2 ff ff       	call   c0001cb7 <st_dword>
c00079bb:	83 c1 04             	add    ecx,0x4
c00079be:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079c2:	85 f6                	test   esi,esi
c00079c4:	75 db                	jne    c00079a1 <f_mkfs+0x650>
c00079c6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079cb:	77 14                	ja     c00079e1 <f_mkfs+0x690>
c00079cd:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079d1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079d8:	85 f6                	test   esi,esi
c00079da:	74 05                	je     c00079e1 <f_mkfs+0x690>
c00079dc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079df:	77 dd                	ja     c00079be <f_mkfs+0x66d>
c00079e1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079e5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079e9:	39 cf                	cmp    edi,ecx
c00079eb:	76 02                	jbe    c00079ef <f_mkfs+0x69e>
c00079ed:	89 cf                	mov    edi,ecx
c00079ef:	83 ec 0c             	sub    esp,0xc
c00079f2:	57                   	push   edi
c00079f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079f7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079fb:	55                   	push   ebp
c00079fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a00:	e8 07 a2 ff ff       	call   c0001c0c <disk_write>
c0007a05:	83 c4 20             	add    esp,0x20
c0007a08:	85 c0                	test   eax,eax
c0007a0a:	0f 85 f2 09 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c0007a10:	31 d2                	xor    edx,edx
c0007a12:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a16:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a1a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a1e:	0f 85 48 ff ff ff    	jne    c000796c <f_mkfs+0x61b>
c0007a24:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a27:	31 d2                	xor    edx,edx
c0007a29:	89 e8                	mov    eax,ebp
c0007a2b:	31 ff                	xor    edi,edi
c0007a2d:	e8 a3 a2 ff ff       	call   c0001cd5 <mem_set>
c0007a32:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a35:	ba 02 00 00 00       	mov    edx,0x2
c0007a3a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a3e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a42:	e8 70 a2 ff ff       	call   c0001cb7 <st_dword>
c0007a47:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a4a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a4e:	e8 64 a2 ff ff       	call   c0001cb7 <st_dword>
c0007a53:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a56:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a5a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a5e:	e8 54 a2 ff ff       	call   c0001cb7 <st_dword>
c0007a63:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a6a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a6e:	83 c2 02             	add    edx,0x2
c0007a71:	e8 41 a2 ff ff       	call   c0001cb7 <st_dword>
c0007a76:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a79:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a7d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a81:	e8 31 a2 ff ff       	call   c0001cb7 <st_dword>
c0007a86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a8a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a8f:	89 c6                	mov    esi,eax
c0007a91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a95:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a99:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a9c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007aa0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007aa3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007aa7:	39 cb                	cmp    ebx,ecx
c0007aa9:	76 02                	jbe    c0007aad <f_mkfs+0x75c>
c0007aab:	89 cb                	mov    ebx,ecx
c0007aad:	83 ec 0c             	sub    esp,0xc
c0007ab0:	53                   	push   ebx
c0007ab1:	57                   	push   edi
c0007ab2:	56                   	push   esi
c0007ab3:	55                   	push   ebp
c0007ab4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ab8:	e8 4f a1 ff ff       	call   c0001c0c <disk_write>
c0007abd:	83 c4 20             	add    esp,0x20
c0007ac0:	85 c0                	test   eax,eax
c0007ac2:	0f 85 3a 09 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c0007ac8:	31 d2                	xor    edx,edx
c0007aca:	b9 00 02 00 00       	mov    ecx,0x200
c0007acf:	89 e8                	mov    eax,ebp
c0007ad1:	e8 ff a1 ff ff       	call   c0001cd5 <mem_set>
c0007ad6:	31 d2                	xor    edx,edx
c0007ad8:	01 de                	add    esi,ebx
c0007ada:	11 d7                	adc    edi,edx
c0007adc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007adf:	75 bf                	jne    c0007aa0 <f_mkfs+0x74f>
c0007ae1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ae5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007ae9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007af1:	b9 00 02 00 00       	mov    ecx,0x200
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	89 e8                	mov    eax,ebp
c0007afa:	e8 d6 a1 ff ff       	call   c0001cd5 <mem_set>
c0007aff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b04:	ba 80 9d 02 c0       	mov    edx,0xc0029d80
c0007b09:	89 e8                	mov    eax,ebp
c0007b0b:	e8 b0 a1 ff ff       	call   c0001cc0 <mem_cpy>
c0007b10:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b17:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b1b:	e8 9a a1 ff ff       	call   c0001cba <st_qword>
c0007b20:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b24:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b27:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b2b:	e8 8a a1 ff ff       	call   c0001cba <st_qword>
c0007b30:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b33:	ba 20 00 00 00       	mov    edx,0x20
c0007b38:	e8 7a a1 ff ff       	call   c0001cb7 <st_dword>
c0007b3d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b45:	e8 6d a1 ff ff       	call   c0001cb7 <st_dword>
c0007b4a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b4e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b52:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b56:	e8 5c a1 ff ff       	call   c0001cb7 <st_dword>
c0007b5b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b5e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b62:	e8 50 a1 ff ff       	call   c0001cb7 <st_dword>
c0007b67:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b6b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b6e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b71:	e8 41 a1 ff ff       	call   c0001cb7 <st_dword>
c0007b76:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b79:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b7e:	e8 34 a1 ff ff       	call   c0001cb7 <st_dword>
c0007b83:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b86:	ba 00 01 00 00       	mov    edx,0x100
c0007b8b:	e8 23 a1 ff ff       	call   c0001cb3 <st_word>
c0007b90:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b94:	b8 0a 00 00 00       	mov    eax,0xa
c0007b99:	48                   	dec    eax
c0007b9a:	74 05                	je     c0007ba1 <f_mkfs+0x850>
c0007b9c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b9f:	eb f8                	jmp    c0007b99 <f_mkfs+0x848>
c0007ba1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ba5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007ba9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bad:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bb1:	74 05                	je     c0007bb8 <f_mkfs+0x867>
c0007bb3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bb6:	eb f5                	jmp    c0007bad <f_mkfs+0x85c>
c0007bb8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bbb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bc0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	e8 e6 a0 ff ff       	call   c0001cb3 <st_word>
c0007bcd:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bd3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bd8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bdb:	e8 d3 a0 ff ff       	call   c0001cb3 <st_word>
c0007be0:	31 c9                	xor    ecx,ecx
c0007be2:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007be5:	83 f8 01             	cmp    eax,0x1
c0007be8:	76 13                	jbe    c0007bfd <f_mkfs+0x8ac>
c0007bea:	83 f9 70             	cmp    ecx,0x70
c0007bed:	74 0e                	je     c0007bfd <f_mkfs+0x8ac>
c0007bef:	89 da                	mov    edx,ebx
c0007bf1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bf6:	e8 41 a5 ff ff       	call   c000213c <xsum32>
c0007bfb:	89 c3                	mov    ebx,eax
c0007bfd:	41                   	inc    ecx
c0007bfe:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c04:	75 dc                	jne    c0007be2 <f_mkfs+0x891>
c0007c06:	89 f0                	mov    eax,esi
c0007c08:	89 fa                	mov    edx,edi
c0007c0a:	83 c0 01             	add    eax,0x1
c0007c0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c11:	83 d2 00             	adc    edx,0x0
c0007c14:	83 ec 0c             	sub    esp,0xc
c0007c17:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c1b:	6a 01                	push   0x1
c0007c1d:	57                   	push   edi
c0007c1e:	56                   	push   esi
c0007c1f:	55                   	push   ebp
c0007c20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c24:	e8 e3 9f ff ff       	call   c0001c0c <disk_write>
c0007c29:	83 c4 20             	add    esp,0x20
c0007c2c:	85 c0                	test   eax,eax
c0007c2e:	0f 85 ce 07 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c0007c34:	31 d2                	xor    edx,edx
c0007c36:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3b:	89 e8                	mov    eax,ebp
c0007c3d:	e8 93 a0 ff ff       	call   c0001cd5 <mem_set>
c0007c42:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c4a:	e8 64 a0 ff ff       	call   c0001cb3 <st_word>
c0007c4f:	89 f0                	mov    eax,esi
c0007c51:	89 fa                	mov    edx,edi
c0007c53:	83 c0 09             	add    eax,0x9
c0007c56:	83 d2 00             	adc    edx,0x0
c0007c59:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c5c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c60:	31 c9                	xor    ecx,ecx
c0007c62:	41                   	inc    ecx
c0007c63:	89 da                	mov    edx,ebx
c0007c65:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c6a:	e8 cd a4 ff ff       	call   c000213c <xsum32>
c0007c6f:	89 c3                	mov    ebx,eax
c0007c71:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c77:	75 e9                	jne    c0007c62 <f_mkfs+0x911>
c0007c79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c7d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c81:	83 c0 01             	add    eax,0x1
c0007c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c88:	83 d2 00             	adc    edx,0x0
c0007c8b:	83 ec 0c             	sub    esp,0xc
c0007c8e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c92:	6a 01                	push   0x1
c0007c94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9c:	55                   	push   ebp
c0007c9d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ca1:	e8 66 9f ff ff       	call   c0001c0c <disk_write>
c0007ca6:	83 c4 20             	add    esp,0x20
c0007ca9:	85 c0                	test   eax,eax
c0007cab:	0f 85 51 07 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c0007cb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cb5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cb9:	75 09                	jne    c0007cc4 <f_mkfs+0x973>
c0007cbb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cbe:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cc2:	74 12                	je     c0007cd6 <f_mkfs+0x985>
c0007cc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cc8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ccc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cd0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cd4:	eb 8a                	jmp    c0007c60 <f_mkfs+0x90f>
c0007cd6:	31 d2                	xor    edx,edx
c0007cd8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cdd:	89 e8                	mov    eax,ebp
c0007cdf:	e8 f1 9f ff ff       	call   c0001cd5 <mem_set>
c0007ce4:	83 c6 0b             	add    esi,0xb
c0007ce7:	83 d7 00             	adc    edi,0x0
c0007cea:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cee:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cf2:	31 c9                	xor    ecx,ecx
c0007cf4:	41                   	inc    ecx
c0007cf5:	89 da                	mov    edx,ebx
c0007cf7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cfc:	e8 3b a4 ff ff       	call   c000213c <xsum32>
c0007d01:	89 c3                	mov    ebx,eax
c0007d03:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d09:	75 e9                	jne    c0007cf4 <f_mkfs+0x9a3>
c0007d0b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d0e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d12:	83 c6 01             	add    esi,0x1
c0007d15:	83 d7 00             	adc    edi,0x0
c0007d18:	83 ec 0c             	sub    esp,0xc
c0007d1b:	6a 01                	push   0x1
c0007d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d25:	55                   	push   ebp
c0007d26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d2a:	e8 dd 9e ff ff       	call   c0001c0c <disk_write>
c0007d2f:	83 c4 20             	add    esp,0x20
c0007d32:	85 c0                	test   eax,eax
c0007d34:	0f 85 c8 06 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c0007d3a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d3e:	75 06                	jne    c0007d46 <f_mkfs+0x9f5>
c0007d40:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d44:	74 09                	je     c0007d4f <f_mkfs+0x9fe>
c0007d46:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d49:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d4d:	eb a3                	jmp    c0007cf2 <f_mkfs+0x9a1>
c0007d4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d53:	89 da                	mov    edx,ebx
c0007d55:	01 e8                	add    eax,ebp
c0007d57:	e8 5b 9f ff ff       	call   c0001cb7 <st_dword>
c0007d5c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d61:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d69:	75 e4                	jne    c0007d4f <f_mkfs+0x9fe>
c0007d6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d6e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d72:	83 c6 02             	add    esi,0x2
c0007d75:	83 d7 00             	adc    edi,0x0
c0007d78:	83 ec 0c             	sub    esp,0xc
c0007d7b:	6a 01                	push   0x1
c0007d7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d85:	55                   	push   ebp
c0007d86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d8a:	e8 7d 9e ff ff       	call   c0001c0c <disk_write>
c0007d8f:	83 c4 20             	add    esp,0x20
c0007d92:	85 c0                	test   eax,eax
c0007d94:	0f 85 68 06 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c0007d9a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d9f:	74 0d                	je     c0007dae <f_mkfs+0xa5d>
c0007da1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007da9:	e9 43 fd ff ff       	jmp    c0007af1 <f_mkfs+0x7a0>
c0007dae:	b1 07                	mov    cl,0x7
c0007db0:	e9 e3 05 00 00       	jmp    c0008398 <f_mkfs+0x1047>
c0007db5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dba:	0f 85 4f 02 00 00    	jne    c000800f <f_mkfs+0xcbe>
c0007dc0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dc5:	0f 86 22 02 00 00    	jbe    c0007fed <f_mkfs+0xc9c>
c0007dcb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dd0:	0f 85 81 06 00 00    	jne    c0008457 <f_mkfs+0x1106>
c0007dd6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ddd:	83 f8 40             	cmp    eax,0x40
c0007de0:	0f 87 51 06 00 00    	ja     c0008437 <f_mkfs+0x10e6>
c0007de6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dea:	85 ff                	test   edi,edi
c0007dec:	75 1c                	jne    c0007e0a <f_mkfs+0xab9>
c0007dee:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007df1:	ba 80 9c 02 c0       	mov    edx,0xc0029c80
c0007df6:	c1 e9 0c             	shr    ecx,0xc
c0007df9:	bf 01 00 00 00       	mov    edi,0x1
c0007dfe:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e01:	66 85 c0             	test   ax,ax
c0007e04:	0f 85 95 01 00 00    	jne    c0007f9f <f_mkfs+0xc4e>
c0007e0a:	31 d2                	xor    edx,edx
c0007e0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0f:	f7 f7                	div    edi
c0007e11:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e16:	0f 86 95 01 00 00    	jbe    c0007fb1 <f_mkfs+0xc60>
c0007e1c:	83 c0 02             	add    eax,0x2
c0007e1f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e24:	01 c0                	add    eax,eax
c0007e26:	05 ff 01 00 00       	add    eax,0x1ff
c0007e2b:	be 01 00 00 00       	mov    esi,0x1
c0007e30:	c1 e8 09             	shr    eax,0x9
c0007e33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e3b:	c1 e0 05             	shl    eax,0x5
c0007e3e:	c1 e8 09             	shr    eax,0x9
c0007e41:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e45:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e4a:	31 d2                	xor    edx,edx
c0007e4c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e50:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e54:	89 f0                	mov    eax,esi
c0007e56:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e5a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e62:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e71:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e75:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e79:	31 db                	xor    ebx,ebx
c0007e7b:	01 c8                	add    eax,ecx
c0007e7d:	11 da                	adc    edx,ebx
c0007e7f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e83:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e87:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e8b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e8f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e93:	f7 da                	neg    edx
c0007e95:	21 d1                	and    ecx,edx
c0007e97:	29 d9                	sub    ecx,ebx
c0007e99:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9e:	0f 85 20 01 00 00    	jne    c0007fc4 <f_mkfs+0xc73>
c0007ea4:	31 db                	xor    ebx,ebx
c0007ea6:	01 ce                	add    esi,ecx
c0007ea8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007eac:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007eb0:	31 d2                	xor    edx,edx
c0007eb2:	89 f8                	mov    eax,edi
c0007eb4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007eb8:	c1 e0 04             	shl    eax,0x4
c0007ebb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ebf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ec3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ec7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ecb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ece:	19 d3                	sbb    ebx,edx
c0007ed0:	0f 82 40 01 00 00    	jb     c0008016 <f_mkfs+0xcc5>
c0007ed6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ed9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007edd:	89 c8                	mov    eax,ecx
c0007edf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ee4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ee8:	29 f0                	sub    eax,esi
c0007eea:	29 d0                	sub    eax,edx
c0007eec:	31 d2                	xor    edx,edx
c0007eee:	f7 f7                	div    edi
c0007ef0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ef5:	89 c3                	mov    ebx,eax
c0007ef7:	0f 85 b8 fe ff ff    	jne    c0007db5 <f_mkfs+0xa64>
c0007efd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f02:	0f 87 1d 01 00 00    	ja     c0008025 <f_mkfs+0xcd4>
c0007f08:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f0d:	0f 85 03 01 00 00    	jne    c0008016 <f_mkfs+0xcc5>
c0007f13:	83 ff 01             	cmp    edi,0x1
c0007f16:	0f 86 fa 00 00 00    	jbe    c0008016 <f_mkfs+0xcc5>
c0007f1c:	d1 ef                	shr    edi,1
c0007f1e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f22:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f26:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f29:	85 db                	test   ebx,ebx
c0007f2b:	75 2d                	jne    c0007f5a <f_mkfs+0xc09>
c0007f2d:	89 cb                	mov    ebx,ecx
c0007f2f:	ba 90 9c 02 c0       	mov    edx,0xc0029c90
c0007f34:	c1 eb 11             	shr    ebx,0x11
c0007f37:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f3f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f42:	66 85 c0             	test   ax,ax
c0007f45:	74 11                	je     c0007f58 <f_mkfs+0xc07>
c0007f47:	83 c2 02             	add    edx,0x2
c0007f4a:	39 d8                	cmp    eax,ebx
c0007f4c:	77 0a                	ja     c0007f58 <f_mkfs+0xc07>
c0007f4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f52:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f56:	eb e7                	jmp    c0007f3f <f_mkfs+0xbee>
c0007f58:	31 db                	xor    ebx,ebx
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	89 c8                	mov    eax,ecx
c0007f5e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f62:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f69:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f6e:	c1 ea 09             	shr    edx,0x9
c0007f71:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f76:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f7a:	0f 87 96 00 00 00    	ja     c0008016 <f_mkfs+0xcc5>
c0007f80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f84:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f8c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f90:	be 20 00 00 00       	mov    esi,0x20
c0007f95:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f9a:	e9 a6 fe ff ff       	jmp    c0007e45 <f_mkfs+0xaf4>
c0007f9f:	83 c2 02             	add    edx,0x2
c0007fa2:	39 c8                	cmp    eax,ecx
c0007fa4:	0f 87 60 fe ff ff    	ja     c0007e0a <f_mkfs+0xab9>
c0007faa:	01 ff                	add    edi,edi
c0007fac:	e9 4d fe ff ff       	jmp    c0007dfe <f_mkfs+0xaad>
c0007fb1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fb4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fb9:	40                   	inc    eax
c0007fba:	d1 e8                	shr    eax,1
c0007fbc:	83 c0 03             	add    eax,0x3
c0007fbf:	e9 62 fe ff ff       	jmp    c0007e26 <f_mkfs+0xad5>
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	89 c8                	mov    eax,ecx
c0007fc8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fcc:	85 d2                	test   edx,edx
c0007fce:	74 0c                	je     c0007fdc <f_mkfs+0xc8b>
c0007fd0:	49                   	dec    ecx
c0007fd1:	46                   	inc    esi
c0007fd2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fd7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fdc:	89 c8                	mov    eax,ecx
c0007fde:	31 d2                	xor    edx,edx
c0007fe0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fe4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fe8:	e9 c3 fe ff ff       	jmp    c0007eb0 <f_mkfs+0xb5f>
c0007fed:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ff2:	77 31                	ja     c0008025 <f_mkfs+0xcd4>
c0007ff4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ff9:	75 1b                	jne    c0008016 <f_mkfs+0xcc5>
c0007ffb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ffe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008002:	3d 80 00 00 00       	cmp    eax,0x80
c0008007:	0f 86 d9 fd ff ff    	jbe    c0007de6 <f_mkfs+0xa95>
c000800d:	eb 07                	jmp    c0008016 <f_mkfs+0xcc5>
c000800f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008014:	76 0a                	jbe    c0008020 <f_mkfs+0xccf>
c0008016:	bb 0e 00 00 00       	mov    ebx,0xe
c000801b:	e9 ff 03 00 00       	jmp    c000841f <f_mkfs+0x10ce>
c0008020:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008025:	31 d2                	xor    edx,edx
c0008027:	b9 00 02 00 00       	mov    ecx,0x200
c000802c:	89 e8                	mov    eax,ebp
c000802e:	e8 a2 9c ff ff       	call   c0001cd5 <mem_set>
c0008033:	b9 0b 00 00 00       	mov    ecx,0xb
c0008038:	ba a2 9d 02 c0       	mov    edx,0xc0029da2
c000803d:	89 e8                	mov    eax,ebp
c000803f:	e8 7c 9c ff ff       	call   c0001cc0 <mem_cpy>
c0008044:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008047:	ba 00 02 00 00       	mov    edx,0x200
c000804c:	e8 62 9c ff ff       	call   c0001cb3 <st_word>
c0008051:	89 f8                	mov    eax,edi
c0008053:	0f b7 d6             	movzx  edx,si
c0008056:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008059:	8d 45 0e             	lea    eax,[ebp+0xe]
c000805c:	e8 52 9c ff ff       	call   c0001cb3 <st_word>
c0008061:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008065:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000806a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000806d:	75 08                	jne    c0008077 <f_mkfs+0xd26>
c000806f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008077:	8d 45 11             	lea    eax,[ebp+0x11]
c000807a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807e:	e8 30 9c ff ff       	call   c0001cb3 <st_word>
c0008083:	b8 ff ff 00 00       	mov    eax,0xffff
c0008088:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000808c:	39 d0                	cmp    eax,edx
c000808e:	b8 00 00 00 00       	mov    eax,0x0
c0008093:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008097:	72 0a                	jb     c00080a3 <f_mkfs+0xd52>
c0008099:	8d 45 13             	lea    eax,[ebp+0x13]
c000809c:	e8 12 9c ff ff       	call   c0001cb3 <st_word>
c00080a1:	eb 08                	jmp    c00080ab <f_mkfs+0xd5a>
c00080a3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080a6:	e8 0c 9c ff ff       	call   c0001cb7 <st_dword>
c00080ab:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ae:	ba 3f 00 00 00       	mov    edx,0x3f
c00080b3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080b7:	e8 f7 9b ff ff       	call   c0001cb3 <st_word>
c00080bc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080bf:	ba ff 00 00 00       	mov    edx,0xff
c00080c4:	e8 ea 9b ff ff       	call   c0001cb3 <st_word>
c00080c9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080d0:	e8 e2 9b ff ff       	call   c0001cb7 <st_dword>
c00080d5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080da:	75 57                	jne    c0008133 <f_mkfs+0xde2>
c00080dc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080df:	ba 00 00 21 50       	mov    edx,0x50210000
c00080e4:	e8 ce 9b ff ff       	call   c0001cb7 <st_dword>
c00080e9:	8d 45 24             	lea    eax,[ebp+0x24]
c00080ec:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f0:	e8 c2 9b ff ff       	call   c0001cb7 <st_dword>
c00080f5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080f8:	ba 02 00 00 00       	mov    edx,0x2
c00080fd:	e8 b5 9b ff ff       	call   c0001cb7 <st_dword>
c0008102:	8d 45 30             	lea    eax,[ebp+0x30]
c0008105:	ba 01 00 00 00       	mov    edx,0x1
c000810a:	e8 a4 9b ff ff       	call   c0001cb3 <st_word>
c000810f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008112:	ba 06 00 00 00       	mov    edx,0x6
c0008117:	e8 97 9b ff ff       	call   c0001cb3 <st_word>
c000811c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008120:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008124:	8d 45 47             	lea    eax,[ebp+0x47]
c0008127:	b9 13 00 00 00       	mov    ecx,0x13
c000812c:	ba ae 9d 02 c0       	mov    edx,0xc0029dae
c0008131:	eb 2f                	jmp    c0008162 <f_mkfs+0xe11>
c0008133:	8d 45 27             	lea    eax,[ebp+0x27]
c0008136:	ba 00 00 21 50       	mov    edx,0x50210000
c000813b:	e8 77 9b ff ff       	call   c0001cb7 <st_dword>
c0008140:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008145:	8d 45 16             	lea    eax,[ebp+0x16]
c0008148:	e8 66 9b ff ff       	call   c0001cb3 <st_word>
c000814d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008151:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008155:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008158:	b9 13 00 00 00       	mov    ecx,0x13
c000815d:	ba c2 9d 02 c0       	mov    edx,0xc0029dc2
c0008162:	e8 59 9b ff ff       	call   c0001cc0 <mem_cpy>
c0008167:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000816d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008172:	89 f0                	mov    eax,esi
c0008174:	e8 3a 9b ff ff       	call   c0001cb3 <st_word>
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	6a 01                	push   0x1
c000817e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008182:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008186:	55                   	push   ebp
c0008187:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000818b:	e8 7c 9a ff ff       	call   c0001c0c <disk_write>
c0008190:	83 c4 20             	add    esp,0x20
c0008193:	85 c0                	test   eax,eax
c0008195:	0f 85 67 02 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c000819b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081a0:	0f 85 b7 00 00 00    	jne    c000825d <f_mkfs+0xf0c>
c00081a6:	83 ec 0c             	sub    esp,0xc
c00081a9:	6a 01                	push   0x1
c00081ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081b3:	83 c0 06             	add    eax,0x6
c00081b6:	83 d2 00             	adc    edx,0x0
c00081b9:	52                   	push   edx
c00081ba:	50                   	push   eax
c00081bb:	55                   	push   ebp
c00081bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c0:	e8 47 9a ff ff       	call   c0001c0c <disk_write>
c00081c5:	83 c4 20             	add    esp,0x20
c00081c8:	b9 00 02 00 00       	mov    ecx,0x200
c00081cd:	31 d2                	xor    edx,edx
c00081cf:	89 e8                	mov    eax,ebp
c00081d1:	e8 ff 9a ff ff       	call   c0001cd5 <mem_set>
c00081d6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081db:	89 e8                	mov    eax,ebp
c00081dd:	e8 d5 9a ff ff       	call   c0001cb7 <st_dword>
c00081e2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081e8:	ba 72 72 41 61       	mov    edx,0x61417272
c00081ed:	e8 c5 9a ff ff       	call   c0001cb7 <st_dword>
c00081f2:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081f5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081fb:	e8 b7 9a ff ff       	call   c0001cb7 <st_dword>
c0008200:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008206:	ba 02 00 00 00       	mov    edx,0x2
c000820b:	e8 a7 9a ff ff       	call   c0001cb7 <st_dword>
c0008210:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008215:	89 f0                	mov    eax,esi
c0008217:	e8 97 9a ff ff       	call   c0001cb3 <st_word>
c000821c:	83 ec 0c             	sub    esp,0xc
c000821f:	6a 01                	push   0x1
c0008221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008225:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008229:	83 c0 07             	add    eax,0x7
c000822c:	83 d2 00             	adc    edx,0x0
c000822f:	52                   	push   edx
c0008230:	50                   	push   eax
c0008231:	55                   	push   ebp
c0008232:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008236:	e8 d1 99 ff ff       	call   c0001c0c <disk_write>
c000823b:	83 c4 14             	add    esp,0x14
c000823e:	6a 01                	push   0x1
c0008240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008244:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008248:	83 c0 01             	add    eax,0x1
c000824b:	83 d2 00             	adc    edx,0x0
c000824e:	52                   	push   edx
c000824f:	50                   	push   eax
c0008250:	55                   	push   ebp
c0008251:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008255:	e8 b2 99 ff ff       	call   c0001c0c <disk_write>
c000825a:	83 c4 20             	add    esp,0x20
c000825d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008264:	31 d2                	xor    edx,edx
c0008266:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000826c:	31 db                	xor    ebx,ebx
c000826e:	89 e8                	mov    eax,ebp
c0008270:	e8 60 9a ff ff       	call   c0001cd5 <mem_set>
c0008275:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000827a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008281:	0f 94 c3             	sete   bl
c0008284:	4b                   	dec    ebx
c0008285:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000828b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008291:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008296:	75 21                	jne    c00082b9 <f_mkfs+0xf68>
c0008298:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000829d:	89 e8                	mov    eax,ebp
c000829f:	e8 13 9a ff ff       	call   c0001cb7 <st_dword>
c00082a4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082a7:	83 ca ff             	or     edx,0xffffffff
c00082aa:	e8 08 9a ff ff       	call   c0001cb7 <st_dword>
c00082af:	8d 45 08             	lea    eax,[ebp+0x8]
c00082b2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082b7:	eb 04                	jmp    c00082bd <f_mkfs+0xf6c>
c00082b9:	89 da                	mov    edx,ebx
c00082bb:	89 e8                	mov    eax,ebp
c00082bd:	e8 f5 99 ff ff       	call   c0001cb7 <st_dword>
c00082c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ca:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082d2:	39 ce                	cmp    esi,ecx
c00082d4:	76 02                	jbe    c00082d8 <f_mkfs+0xf87>
c00082d6:	89 ce                	mov    esi,ecx
c00082d8:	83 ec 0c             	sub    esp,0xc
c00082db:	56                   	push   esi
c00082dc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e4:	55                   	push   ebp
c00082e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082e9:	e8 1e 99 ff ff       	call   c0001c0c <disk_write>
c00082ee:	83 c4 20             	add    esp,0x20
c00082f1:	85 c0                	test   eax,eax
c00082f3:	0f 85 09 01 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c00082f9:	31 d2                	xor    edx,edx
c00082fb:	b9 00 02 00 00       	mov    ecx,0x200
c0008300:	89 e8                	mov    eax,ebp
c0008302:	e8 ce 99 ff ff       	call   c0001cd5 <mem_set>
c0008307:	31 d2                	xor    edx,edx
c0008309:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000830d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008311:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008315:	75 b3                	jne    c00082ca <f_mkfs+0xf79>
c0008317:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000831a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008321:	40                   	inc    eax
c0008322:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008326:	0f 87 65 ff ff ff    	ja     c0008291 <f_mkfs+0xf40>
c000832c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008331:	74 04                	je     c0008337 <f_mkfs+0xfe6>
c0008333:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008337:	89 fb                	mov    ebx,edi
c0008339:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000833d:	76 04                	jbe    c0008343 <f_mkfs+0xff2>
c000833f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008343:	83 ec 0c             	sub    esp,0xc
c0008346:	53                   	push   ebx
c0008347:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834f:	55                   	push   ebp
c0008350:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008354:	e8 b3 98 ff ff       	call   c0001c0c <disk_write>
c0008359:	83 c4 20             	add    esp,0x20
c000835c:	85 c0                	test   eax,eax
c000835e:	0f 85 9e 00 00 00    	jne    c0008402 <f_mkfs+0x10b1>
c0008364:	31 d2                	xor    edx,edx
c0008366:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000836a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000836e:	29 df                	sub    edi,ebx
c0008370:	75 c5                	jne    c0008337 <f_mkfs+0xfe6>
c0008372:	b1 0c                	mov    cl,0xc
c0008374:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008379:	74 1d                	je     c0008398 <f_mkfs+0x1047>
c000837b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008380:	b1 06                	mov    cl,0x6
c0008382:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008386:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000838a:	72 0c                	jb     c0008398 <f_mkfs+0x1047>
c000838c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008391:	0f 94 c1             	sete   cl
c0008394:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008398:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000839d:	75 4c                	jne    c00083eb <f_mkfs+0x109a>
c000839f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083a3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083a7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ae:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083b5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083c0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083cb:	0f b6 c9             	movzx  ecx,cl
c00083ce:	83 ec 0c             	sub    esp,0xc
c00083d1:	55                   	push   ebp
c00083d2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083dd:	e8 2f c2 ff ff       	call   c0004611 <create_partition>
c00083e2:	83 c4 10             	add    esp,0x10
c00083e5:	89 c3                	mov    ebx,eax
c00083e7:	85 c0                	test   eax,eax
c00083e9:	75 34                	jne    c000841f <f_mkfs+0x10ce>
c00083eb:	31 db                	xor    ebx,ebx
c00083ed:	50                   	push   eax
c00083ee:	6a 00                	push   0x0
c00083f0:	6a 00                	push   0x0
c00083f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083f6:	e8 27 98 ff ff       	call   c0001c22 <disk_ioctl>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	85 c0                	test   eax,eax
c0008400:	74 1d                	je     c000841f <f_mkfs+0x10ce>
c0008402:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840a:	75 0c                	jne    c0008418 <f_mkfs+0x10c7>
c000840c:	83 ec 0c             	sub    esp,0xc
c000840f:	55                   	push   ebp
c0008410:	e8 75 00 00 00       	call   c000848a <ff_memfree>
c0008415:	83 c4 10             	add    esp,0x10
c0008418:	bb 01 00 00 00       	mov    ebx,0x1
c000841d:	eb 48                	jmp    c0008467 <f_mkfs+0x1116>
c000841f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008427:	75 3e                	jne    c0008467 <f_mkfs+0x1116>
c0008429:	83 ec 0c             	sub    esp,0xc
c000842c:	55                   	push   ebp
c000842d:	e8 58 00 00 00       	call   c000848a <ff_memfree>
c0008432:	83 c4 10             	add    esp,0x10
c0008435:	eb 30                	jmp    c0008467 <f_mkfs+0x1116>
c0008437:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000843c:	0f 85 eb fa ff ff    	jne    c0007f2d <f_mkfs+0xbdc>
c0008442:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008446:	81 ff 80 00 00 00    	cmp    edi,0x80
c000844c:	0f 86 b8 f9 ff ff    	jbe    c0007e0a <f_mkfs+0xab9>
c0008452:	e9 bf fb ff ff       	jmp    c0008016 <f_mkfs+0xcc5>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 c0 fa ff ff    	jne    c0007f22 <f_mkfs+0xbd1>
c0008462:	e9 af fb ff ff       	jmp    c0008016 <f_mkfs+0xcc5>
c0008467:	81 c4 9c 00 00 00    	add    esp,0x9c
c000846d:	89 d8                	mov    eax,ebx
c000846f:	5b                   	pop    ebx
c0008470:	5e                   	pop    esi
c0008471:	5f                   	pop    edi
c0008472:	5d                   	pop    ebp
c0008473:	c3                   	ret    

c0008474 <ff_memalloc>:
c0008474:	83 ec 0c             	sub    esp,0xc
c0008477:	83 ec 0c             	sub    esp,0xc
c000847a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847e:	e8 23 74 00 00       	call   c000f8a6 <malloc>
c0008483:	83 c4 10             	add    esp,0x10
c0008486:	83 c4 0c             	add    esp,0xc
c0008489:	c3                   	ret    

c000848a <ff_memfree>:
c000848a:	83 ec 0c             	sub    esp,0xc
c000848d:	83 ec 0c             	sub    esp,0xc
c0008490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008494:	e8 1d 74 00 00       	call   c000f8b6 <free>
c0008499:	83 c4 10             	add    esp,0x10
c000849c:	90                   	nop
c000849d:	83 c4 0c             	add    esp,0xc
c00084a0:	c3                   	ret    

c00084a1 <ff_uni2oem>:
c00084a1:	83 ec 14             	sub    esp,0x14
c00084a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084a8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084ac:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084b3:	c7 44 24 0c e0 a0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a0e0
c00084bb:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084c0:	77 0b                	ja     c00084cd <ff_uni2oem+0x2c>
c00084c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084c6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084cb:	eb 5b                	jmp    c0008528 <ff_uni2oem+0x87>
c00084cd:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084d5:	77 51                	ja     c0008528 <ff_uni2oem+0x87>
c00084d7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084dd:	75 49                	jne    c0008528 <ff_uni2oem+0x87>
c00084df:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084e6:	eb 0b                	jmp    c00084f3 <ff_uni2oem+0x52>
c00084e8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084ed:	40                   	inc    eax
c00084ee:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084f9:	77 1b                	ja     c0008516 <ff_uni2oem+0x75>
c00084fb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008500:	01 c0                	add    eax,eax
c0008502:	89 c2                	mov    edx,eax
c0008504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008508:	01 d0                	add    eax,edx
c000850a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000850d:	0f b7 c0             	movzx  eax,ax
c0008510:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008514:	75 d2                	jne    c00084e8 <ff_uni2oem+0x47>
c0008516:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000851b:	83 e8 80             	sub    eax,0xffffff80
c000851e:	25 ff 00 00 00       	and    eax,0xff
c0008523:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008528:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000852d:	83 c4 14             	add    esp,0x14
c0008530:	c3                   	ret    

c0008531 <ff_oem2uni>:
c0008531:	83 ec 18             	sub    esp,0x18
c0008534:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000853c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008541:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008545:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000854c:	c7 44 24 10 e0 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0e0
c0008554:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000855a:	77 0b                	ja     c0008567 <ff_oem2uni+0x36>
c000855c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008560:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008565:	eb 2d                	jmp    c0008594 <ff_oem2uni+0x63>
c0008567:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000856d:	75 25                	jne    c0008594 <ff_oem2uni+0x63>
c000856f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008576:	77 1c                	ja     c0008594 <ff_oem2uni+0x63>
c0008578:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000857d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008582:	01 c0                	add    eax,eax
c0008584:	89 c2                	mov    edx,eax
c0008586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000858a:	01 d0                	add    eax,edx
c000858c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000858f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008594:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008599:	83 c4 18             	add    esp,0x18
c000859c:	c3                   	ret    

c000859d <ff_wtoupper>:
c000859d:	83 ec 10             	sub    esp,0x10
c00085a0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085a8:	0f 87 3e 01 00 00    	ja     c00086ec <ff_wtoupper+0x14f>
c00085ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085b2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085b7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085be:	77 07                	ja     c00085c7 <ff_wtoupper+0x2a>
c00085c0:	b8 e0 9e 02 c0       	mov    eax,0xc0029ee0
c00085c5:	eb 05                	jmp    c00085cc <ff_wtoupper+0x2f>
c00085c7:	b8 20 9e 02 c0       	mov    eax,0xc0029e20
c00085cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085d4:	8d 50 02             	lea    edx,[eax+0x2]
c00085d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085db:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085de:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085e3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085e9:	0f 84 f4 00 00 00    	je     c00086e3 <ff_wtoupper+0x146>
c00085ef:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085f4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085f9:	0f 82 e4 00 00 00    	jb     c00086e3 <ff_wtoupper+0x146>
c00085ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008603:	8d 50 02             	lea    edx,[eax+0x2]
c0008606:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000860a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000860d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008612:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008617:	66 c1 e8 08          	shr    ax,0x8
c000861b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008620:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008627:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000862c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008631:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008636:	01 ca                	add    edx,ecx
c0008638:	39 d0                	cmp    eax,edx
c000863a:	0f 8d 86 00 00 00    	jge    c00086c6 <ff_wtoupper+0x129>
c0008640:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008645:	83 f8 08             	cmp    eax,0x8
c0008648:	0f 87 94 00 00 00    	ja     c00086e2 <ff_wtoupper+0x145>
c000864e:	8b 04 85 e0 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6220]
c0008655:	ff e0                	jmp    eax
c0008657:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000865c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008661:	29 c2                	sub    edx,eax
c0008663:	89 d0                	mov    eax,edx
c0008665:	01 c0                	add    eax,eax
c0008667:	89 c2                	mov    edx,eax
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	01 d0                	add    eax,edx
c000866f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008672:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008677:	eb 4b                	jmp    c00086c4 <ff_wtoupper+0x127>
c0008679:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000867e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008682:	83 e0 01             	and    eax,0x1
c0008685:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000868a:	eb 38                	jmp    c00086c4 <ff_wtoupper+0x127>
c000868c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008692:	eb 30                	jmp    c00086c4 <ff_wtoupper+0x127>
c0008694:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000869a:	eb 28                	jmp    c00086c4 <ff_wtoupper+0x127>
c000869c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086a2:	eb 20                	jmp    c00086c4 <ff_wtoupper+0x127>
c00086a4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086aa:	eb 18                	jmp    c00086c4 <ff_wtoupper+0x127>
c00086ac:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086b2:	eb 10                	jmp    c00086c4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086ba:	eb 08                	jmp    c00086c4 <ff_wtoupper+0x127>
c00086bc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086c3:	90                   	nop
c00086c4:	eb 1c                	jmp    c00086e2 <ff_wtoupper+0x145>
c00086c6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086cc:	0f 85 fe fe ff ff    	jne    c00085d0 <ff_wtoupper+0x33>
c00086d2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086d7:	01 c0                	add    eax,eax
c00086d9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086dd:	e9 ee fe ff ff       	jmp    c00085d0 <ff_wtoupper+0x33>
c00086e2:	90                   	nop
c00086e3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086f0:	83 c4 10             	add    esp,0x10
c00086f3:	c3                   	ret    

c00086f4 <psrc_set_converter>:
c00086f4:	56                   	push   esi
c00086f5:	89 d6                	mov    esi,edx
c00086f7:	53                   	push   ebx
c00086f8:	89 c3                	mov    ebx,eax
c00086fa:	83 ec 0c             	sub    esp,0xc
c00086fd:	52                   	push   edx
c00086fe:	50                   	push   eax
c00086ff:	e8 6f 55 00 00       	call   c000dc73 <sinc_set_converter>
c0008704:	83 c4 10             	add    esp,0x10
c0008707:	85 c0                	test   eax,eax
c0008709:	74 25                	je     c0008730 <psrc_set_converter+0x3c>
c000870b:	50                   	push   eax
c000870c:	50                   	push   eax
c000870d:	56                   	push   esi
c000870e:	53                   	push   ebx
c000870f:	e8 17 5d 00 00       	call   c000e42b <zoh_set_converter>
c0008714:	83 c4 10             	add    esp,0x10
c0008717:	85 c0                	test   eax,eax
c0008719:	74 15                	je     c0008730 <psrc_set_converter+0x3c>
c000871b:	51                   	push   ecx
c000871c:	51                   	push   ecx
c000871d:	56                   	push   esi
c000871e:	53                   	push   ebx
c000871f:	e8 0f 11 00 00       	call   c0009833 <linear_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	ba 0a 00 00 00       	mov    edx,0xa
c000872c:	85 c0                	test   eax,eax
c000872e:	75 02                	jne    c0008732 <psrc_set_converter+0x3e>
c0008730:	31 d2                	xor    edx,edx
c0008732:	89 d0                	mov    eax,edx
c0008734:	5a                   	pop    edx
c0008735:	5b                   	pop    ebx
c0008736:	5e                   	pop    esi
c0008737:	c3                   	ret    

c0008738 <src_delete>:
c0008738:	53                   	push   ebx
c0008739:	83 ec 08             	sub    esp,0x8
c000873c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008740:	85 db                	test   ebx,ebx
c0008742:	74 29                	je     c000876d <src_delete+0x35>
c0008744:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008747:	85 c0                	test   eax,eax
c0008749:	74 0c                	je     c0008757 <src_delete+0x1f>
c000874b:	83 ec 0c             	sub    esp,0xc
c000874e:	50                   	push   eax
c000874f:	e8 62 71 00 00       	call   c000f8b6 <free>
c0008754:	83 c4 10             	add    esp,0x10
c0008757:	50                   	push   eax
c0008758:	6a 3c                	push   0x3c
c000875a:	6a 00                	push   0x0
c000875c:	53                   	push   ebx
c000875d:	e8 0a 80 ff ff       	call   c000076c <memset>
c0008762:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008765:	e8 4c 71 00 00       	call   c000f8b6 <free>
c000876a:	83 c4 10             	add    esp,0x10
c000876d:	31 c0                	xor    eax,eax
c000876f:	83 c4 08             	add    esp,0x8
c0008772:	5b                   	pop    ebx
c0008773:	c3                   	ret    

c0008774 <src_process>:
c0008774:	55                   	push   ebp
c0008775:	57                   	push   edi
c0008776:	56                   	push   esi
c0008777:	53                   	push   ebx
c0008778:	83 ec 1c             	sub    esp,0x1c
c000877b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000877f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008783:	85 ed                	test   ebp,ebp
c0008785:	0f 84 6f 01 00 00    	je     c00088fa <src_process+0x186>
c000878b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000878f:	0f 84 6c 01 00 00    	je     c0008901 <src_process+0x18d>
c0008795:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008799:	0f 84 62 01 00 00    	je     c0008901 <src_process+0x18d>
c000879f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087a6:	0f 85 5c 01 00 00    	jne    c0008908 <src_process+0x194>
c00087ac:	85 db                	test   ebx,ebx
c00087ae:	0f 84 5b 01 00 00    	je     c000890f <src_process+0x19b>
c00087b4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087b6:	85 f6                	test   esi,esi
c00087b8:	0f 84 58 01 00 00    	je     c0008916 <src_process+0x1a2>
c00087be:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087c1:	85 ff                	test   edi,edi
c00087c3:	0f 84 4d 01 00 00    	je     c0008916 <src_process+0x1a2>
c00087c9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087cc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087d7:	68 00 00 70 3f       	push   0x3f700000
c00087dc:	6a 00                	push   0x0
c00087de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e6:	e8 cc 04 02 00       	call   c0028cb7 <__ltdf2>
c00087eb:	83 c4 10             	add    esp,0x10
c00087ee:	85 c0                	test   eax,eax
c00087f0:	0f 88 27 01 00 00    	js     c000891d <src_process+0x1a9>
c00087f6:	68 00 00 70 40       	push   0x40700000
c00087fb:	6a 00                	push   0x0
c00087fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008801:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008805:	e8 8f 04 02 00       	call   c0028c99 <__gtdf2>
c000880a:	83 c4 10             	add    esp,0x10
c000880d:	85 c0                	test   eax,eax
c000880f:	0f 8f 08 01 00 00    	jg     c000891d <src_process+0x1a9>
c0008815:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008819:	79 07                	jns    c0008822 <src_process+0xae>
c000881b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008822:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008825:	85 c0                	test   eax,eax
c0008827:	79 50                	jns    c0008879 <src_process+0x105>
c0008829:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008830:	39 fe                	cmp    esi,edi
c0008832:	72 37                	jb     c000886b <src_process+0xf7>
c0008834:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000883b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008842:	68 00 00 70 3f       	push   0x3f700000
c0008847:	6a 00                	push   0x0
c0008849:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000884c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000884f:	e8 63 04 02 00       	call   c0028cb7 <__ltdf2>
c0008854:	83 c4 10             	add    esp,0x10
c0008857:	85 c0                	test   eax,eax
c0008859:	79 37                	jns    c0008892 <src_process+0x11e>
c000885b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000885f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008863:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008866:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008869:	eb 27                	jmp    c0008892 <src_process+0x11e>
c000886b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000886e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008872:	8d 04 86             	lea    eax,[esi+eax*4]
c0008875:	39 c7                	cmp    edi,eax
c0008877:	eb 0d                	jmp    c0008886 <src_process+0x112>
c0008879:	39 fe                	cmp    esi,edi
c000887b:	72 ee                	jb     c000886b <src_process+0xf7>
c000887d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008881:	8d 04 87             	lea    eax,[edi+eax*4]
c0008884:	39 c6                	cmp    esi,eax
c0008886:	73 ac                	jae    c0008834 <src_process+0xc0>
c0008888:	b8 10 00 00 00       	mov    eax,0x10
c000888d:	e9 90 00 00 00       	jmp    c0008922 <src_process+0x1ae>
c0008892:	83 ec 10             	sub    esp,0x10
c0008895:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008898:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000889b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000889e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088a1:	e8 16 fb 01 00       	call   c00283bc <__subdf3>
c00088a6:	83 c4 18             	add    esp,0x18
c00088a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088ad:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088b1:	52                   	push   edx
c00088b2:	50                   	push   eax
c00088b3:	e8 98 05 02 00       	call   c0028e50 <fabs>
c00088b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	68 af 03 d2 3c       	push   0x3cd203af
c00088c8:	68 16 56 e7 9e       	push   0x9ee75616
c00088cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d5:	e8 dd 03 02 00       	call   c0028cb7 <__ltdf2>
c00088da:	83 c4 10             	add    esp,0x10
c00088dd:	85 c0                	test   eax,eax
c00088df:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088e3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088e7:	79 05                	jns    c00088ee <src_process+0x17a>
c00088e9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088ec:	eb 03                	jmp    c00088f1 <src_process+0x17d>
c00088ee:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088f1:	83 c4 1c             	add    esp,0x1c
c00088f4:	5b                   	pop    ebx
c00088f5:	5e                   	pop    esi
c00088f6:	5f                   	pop    edi
c00088f7:	5d                   	pop    ebp
c00088f8:	ff e0                	jmp    eax
c00088fa:	b8 02 00 00 00       	mov    eax,0x2
c00088ff:	eb 21                	jmp    c0008922 <src_process+0x1ae>
c0008901:	b8 07 00 00 00       	mov    eax,0x7
c0008906:	eb 1a                	jmp    c0008922 <src_process+0x1ae>
c0008908:	b8 12 00 00 00       	mov    eax,0x12
c000890d:	eb 13                	jmp    c0008922 <src_process+0x1ae>
c000890f:	b8 03 00 00 00       	mov    eax,0x3
c0008914:	eb 0c                	jmp    c0008922 <src_process+0x1ae>
c0008916:	b8 04 00 00 00       	mov    eax,0x4
c000891b:	eb 05                	jmp    c0008922 <src_process+0x1ae>
c000891d:	b8 06 00 00 00       	mov    eax,0x6
c0008922:	83 c4 1c             	add    esp,0x1c
c0008925:	5b                   	pop    ebx
c0008926:	5e                   	pop    esi
c0008927:	5f                   	pop    edi
c0008928:	5d                   	pop    ebp
c0008929:	c3                   	ret    

c000892a <src_callback_read>:
c000892a:	55                   	push   ebp
c000892b:	57                   	push   edi
c000892c:	56                   	push   esi
c000892d:	53                   	push   ebx
c000892e:	83 ec 3c             	sub    esp,0x3c
c0008931:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008935:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008939:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000893d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008941:	85 ed                	test   ebp,ebp
c0008943:	0f 8e 52 01 00 00    	jle    c0008a9b <src_callback_read+0x171>
c0008949:	85 db                	test   ebx,ebx
c000894b:	0f 84 4a 01 00 00    	je     c0008a9b <src_callback_read+0x171>
c0008951:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008958:	74 0c                	je     c0008966 <src_callback_read+0x3c>
c000895a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008961:	e9 35 01 00 00       	jmp    c0008a9b <src_callback_read+0x171>
c0008966:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000896a:	75 0c                	jne    c0008978 <src_callback_read+0x4e>
c000896c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008973:	e9 23 01 00 00       	jmp    c0008a9b <src_callback_read+0x171>
c0008978:	51                   	push   ecx
c0008979:	6a 24                	push   0x24
c000897b:	6a 00                	push   0x0
c000897d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008981:	50                   	push   eax
c0008982:	e8 e5 7d ff ff       	call   c000076c <memset>
c0008987:	83 c4 10             	add    esp,0x10
c000898a:	68 00 00 70 3f       	push   0x3f700000
c000898f:	6a 00                	push   0x0
c0008991:	57                   	push   edi
c0008992:	56                   	push   esi
c0008993:	e8 1f 03 02 00       	call   c0028cb7 <__ltdf2>
c0008998:	83 c4 10             	add    esp,0x10
c000899b:	85 c0                	test   eax,eax
c000899d:	78 3e                	js     c00089dd <src_callback_read+0xb3>
c000899f:	68 00 00 70 40       	push   0x40700000
c00089a4:	6a 00                	push   0x0
c00089a6:	57                   	push   edi
c00089a7:	56                   	push   esi
c00089a8:	e8 ec 02 02 00       	call   c0028c99 <__gtdf2>
c00089ad:	83 c4 10             	add    esp,0x10
c00089b0:	85 c0                	test   eax,eax
c00089b2:	7f 29                	jg     c00089dd <src_callback_read+0xb3>
c00089b4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089b8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089c0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089c4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089c7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089cf:	31 f6                	xor    esi,esi
c00089d1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089d8:	e9 97 00 00 00       	jmp    c0008a74 <src_callback_read+0x14a>
c00089dd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089e4:	e9 b2 00 00 00       	jmp    c0008a9b <src_callback_read+0x171>
c00089e9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089f1:	52                   	push   edx
c00089f2:	52                   	push   edx
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089fb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a0a:	83 c4 10             	add    esp,0x10
c0008a0d:	85 c0                	test   eax,eax
c0008a0f:	75 08                	jne    c0008a19 <src_callback_read+0xef>
c0008a11:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a19:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a20:	50                   	push   eax
c0008a21:	50                   	push   eax
c0008a22:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a26:	50                   	push   eax
c0008a27:	53                   	push   ebx
c0008a28:	e8 47 fd ff ff       	call   c0008774 <src_process>
c0008a2d:	83 c4 10             	add    esp,0x10
c0008a30:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a37:	85 c0                	test   eax,eax
c0008a39:	75 49                	jne    c0008a84 <src_callback_read+0x15a>
c0008a3b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a3f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a42:	89 f9                	mov    ecx,edi
c0008a44:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a48:	0f af ca             	imul   ecx,edx
c0008a4b:	c1 e1 02             	shl    ecx,0x2
c0008a4e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a52:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a56:	0f af d1             	imul   edx,ecx
c0008a59:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a5d:	c1 e2 02             	shl    edx,0x2
c0008a60:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a64:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a67:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a6c:	74 12                	je     c0008a80 <src_callback_read+0x156>
c0008a6e:	39 d5                	cmp    ebp,edx
c0008a70:	7e 14                	jle    c0008a86 <src_callback_read+0x15c>
c0008a72:	89 d6                	mov    esi,edx
c0008a74:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a79:	75 9e                	jne    c0008a19 <src_callback_read+0xef>
c0008a7b:	e9 69 ff ff ff       	jmp    c00089e9 <src_callback_read+0xbf>
c0008a80:	85 c9                	test   ecx,ecx
c0008a82:	75 ea                	jne    c0008a6e <src_callback_read+0x144>
c0008a84:	89 f2                	mov    edx,esi
c0008a86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a8a:	85 c0                	test   eax,eax
c0008a8c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a8f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a93:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a96:	74 05                	je     c0008a9d <src_callback_read+0x173>
c0008a98:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9b:	31 d2                	xor    edx,edx
c0008a9d:	83 c4 3c             	add    esp,0x3c
c0008aa0:	89 d0                	mov    eax,edx
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	5d                   	pop    ebp
c0008aa6:	c3                   	ret    

c0008aa7 <src_set_ratio>:
c0008aa7:	57                   	push   edi
c0008aa8:	ba 02 00 00 00       	mov    edx,0x2
c0008aad:	56                   	push   esi
c0008aae:	53                   	push   ebx
c0008aaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ab7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008abb:	85 db                	test   ebx,ebx
c0008abd:	74 4c                	je     c0008b0b <src_set_ratio+0x64>
c0008abf:	ba 07 00 00 00       	mov    edx,0x7
c0008ac4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ac8:	74 41                	je     c0008b0b <src_set_ratio+0x64>
c0008aca:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ace:	74 3b                	je     c0008b0b <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 3f       	push   0x3f700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 d9 01 02 00       	call   c0028cb7 <__ltdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	78 21                	js     c0008b0b <src_set_ratio+0x64>
c0008aea:	68 00 00 70 40       	push   0x40700000
c0008aef:	6a 00                	push   0x0
c0008af1:	57                   	push   edi
c0008af2:	56                   	push   esi
c0008af3:	e8 a1 01 02 00       	call   c0028c99 <__gtdf2>
c0008af8:	83 c4 10             	add    esp,0x10
c0008afb:	ba 06 00 00 00       	mov    edx,0x6
c0008b00:	85 c0                	test   eax,eax
c0008b02:	7f 07                	jg     c0008b0b <src_set_ratio+0x64>
c0008b04:	89 33                	mov    DWORD PTR [ebx],esi
c0008b06:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b09:	31 d2                	xor    edx,edx
c0008b0b:	5b                   	pop    ebx
c0008b0c:	89 d0                	mov    eax,edx
c0008b0e:	5e                   	pop    esi
c0008b0f:	5f                   	pop    edi
c0008b10:	c3                   	ret    

c0008b11 <src_get_channels>:
c0008b11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b15:	b8 02 00 00 00       	mov    eax,0x2
c0008b1a:	85 d2                	test   edx,edx
c0008b1c:	74 14                	je     c0008b32 <src_get_channels+0x21>
c0008b1e:	b8 07 00 00 00       	mov    eax,0x7
c0008b23:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b27:	74 09                	je     c0008b32 <src_get_channels+0x21>
c0008b29:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b2d:	74 03                	je     c0008b32 <src_get_channels+0x21>
c0008b2f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b32:	c3                   	ret    

c0008b33 <src_reset>:
c0008b33:	53                   	push   ebx
c0008b34:	b8 02 00 00 00       	mov    eax,0x2
c0008b39:	83 ec 08             	sub    esp,0x8
c0008b3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b40:	85 db                	test   ebx,ebx
c0008b42:	74 36                	je     c0008b7a <src_reset+0x47>
c0008b44:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b47:	85 c0                	test   eax,eax
c0008b49:	74 09                	je     c0008b54 <src_reset+0x21>
c0008b4b:	83 ec 0c             	sub    esp,0xc
c0008b4e:	53                   	push   ebx
c0008b4f:	ff d0                	call   eax
c0008b51:	83 c4 10             	add    esp,0x10
c0008b54:	31 c0                	xor    eax,eax
c0008b56:	31 d2                	xor    edx,edx
c0008b58:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b5b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b5d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b60:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b63:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b6a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b71:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b78:	31 c0                	xor    eax,eax
c0008b7a:	83 c4 08             	add    esp,0x8
c0008b7d:	5b                   	pop    ebx
c0008b7e:	c3                   	ret    

c0008b7f <src_new>:
c0008b7f:	57                   	push   edi
c0008b80:	56                   	push   esi
c0008b81:	53                   	push   ebx
c0008b82:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b86:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b8a:	85 f6                	test   esi,esi
c0008b8c:	74 73                	je     c0008c01 <src_new+0x82>
c0008b8e:	85 ff                	test   edi,edi
c0008b90:	7f 08                	jg     c0008b9a <src_new+0x1b>
c0008b92:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b98:	eb 1e                	jmp    c0008bb8 <src_new+0x39>
c0008b9a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008ba0:	50                   	push   eax
c0008ba1:	50                   	push   eax
c0008ba2:	6a 3c                	push   0x3c
c0008ba4:	6a 01                	push   0x1
c0008ba6:	e8 2b 6d 00 00       	call   c000f8d6 <calloc>
c0008bab:	83 c4 10             	add    esp,0x10
c0008bae:	89 c3                	mov    ebx,eax
c0008bb0:	85 c0                	test   eax,eax
c0008bb2:	75 10                	jne    c0008bc4 <src_new+0x45>
c0008bb4:	85 f6                	test   esi,esi
c0008bb6:	75 04                	jne    c0008bbc <src_new+0x3d>
c0008bb8:	31 db                	xor    ebx,ebx
c0008bba:	eb 4b                	jmp    c0008c07 <src_new+0x88>
c0008bbc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bc2:	eb 43                	jmp    c0008c07 <src_new+0x88>
c0008bc4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bc7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bd2:	e8 1d fb ff ff       	call   c00086f4 <psrc_set_converter>
c0008bd7:	85 c0                	test   eax,eax
c0008bd9:	74 18                	je     c0008bf3 <src_new+0x74>
c0008bdb:	85 f6                	test   esi,esi
c0008bdd:	74 06                	je     c0008be5 <src_new+0x66>
c0008bdf:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008be5:	83 ec 0c             	sub    esp,0xc
c0008be8:	53                   	push   ebx
c0008be9:	31 db                	xor    ebx,ebx
c0008beb:	e8 c6 6c 00 00       	call   c000f8b6 <free>
c0008bf0:	83 c4 10             	add    esp,0x10
c0008bf3:	83 ec 0c             	sub    esp,0xc
c0008bf6:	53                   	push   ebx
c0008bf7:	e8 37 ff ff ff       	call   c0008b33 <src_reset>
c0008bfc:	83 c4 10             	add    esp,0x10
c0008bff:	eb 06                	jmp    c0008c07 <src_new+0x88>
c0008c01:	85 ff                	test   edi,edi
c0008c03:	7f 9b                	jg     c0008ba0 <src_new+0x21>
c0008c05:	eb b1                	jmp    c0008bb8 <src_new+0x39>
c0008c07:	89 d8                	mov    eax,ebx
c0008c09:	5b                   	pop    ebx
c0008c0a:	5e                   	pop    esi
c0008c0b:	5f                   	pop    edi
c0008c0c:	c3                   	ret    

c0008c0d <src_callback_new>:
c0008c0d:	56                   	push   esi
c0008c0e:	53                   	push   ebx
c0008c0f:	53                   	push   ebx
c0008c10:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c18:	85 f6                	test   esi,esi
c0008c1a:	75 0e                	jne    c0008c2a <src_callback_new+0x1d>
c0008c1c:	31 db                	xor    ebx,ebx
c0008c1e:	85 c0                	test   eax,eax
c0008c20:	74 47                	je     c0008c69 <src_callback_new+0x5c>
c0008c22:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c28:	eb 3f                	jmp    c0008c69 <src_callback_new+0x5c>
c0008c2a:	85 c0                	test   eax,eax
c0008c2c:	74 06                	je     c0008c34 <src_callback_new+0x27>
c0008c2e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c34:	51                   	push   ecx
c0008c35:	50                   	push   eax
c0008c36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c3e:	e8 3c ff ff ff       	call   c0008b7f <src_new>
c0008c43:	83 c4 10             	add    esp,0x10
c0008c46:	89 c3                	mov    ebx,eax
c0008c48:	85 c0                	test   eax,eax
c0008c4a:	74 1d                	je     c0008c69 <src_callback_new+0x5c>
c0008c4c:	83 ec 0c             	sub    esp,0xc
c0008c4f:	50                   	push   eax
c0008c50:	e8 de fe ff ff       	call   c0008b33 <src_reset>
c0008c55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c59:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c60:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c63:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c66:	83 c4 10             	add    esp,0x10
c0008c69:	89 d8                	mov    eax,ebx
c0008c6b:	5a                   	pop    edx
c0008c6c:	5b                   	pop    ebx
c0008c6d:	5e                   	pop    esi
c0008c6e:	c3                   	ret    

c0008c6f <src_get_name>:
c0008c6f:	53                   	push   ebx
c0008c70:	83 ec 14             	sub    esp,0x14
c0008c73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c77:	53                   	push   ebx
c0008c78:	e8 d0 4f 00 00       	call   c000dc4d <sinc_get_name>
c0008c7d:	83 c4 10             	add    esp,0x10
c0008c80:	85 c0                	test   eax,eax
c0008c82:	75 1d                	jne    c0008ca1 <src_get_name+0x32>
c0008c84:	83 ec 0c             	sub    esp,0xc
c0008c87:	53                   	push   ebx
c0008c88:	e8 80 57 00 00       	call   c000e40d <zoh_get_name>
c0008c8d:	83 c4 10             	add    esp,0x10
c0008c90:	85 c0                	test   eax,eax
c0008c92:	75 0d                	jne    c0008ca1 <src_get_name+0x32>
c0008c94:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c98:	83 c4 08             	add    esp,0x8
c0008c9b:	5b                   	pop    ebx
c0008c9c:	e9 74 0b 00 00       	jmp    c0009815 <linear_get_name>
c0008ca1:	83 c4 08             	add    esp,0x8
c0008ca4:	5b                   	pop    ebx
c0008ca5:	c3                   	ret    

c0008ca6 <src_get_description>:
c0008ca6:	53                   	push   ebx
c0008ca7:	83 ec 14             	sub    esp,0x14
c0008caa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cae:	53                   	push   ebx
c0008caf:	e8 ac 4f 00 00       	call   c000dc60 <sinc_get_description>
c0008cb4:	83 c4 10             	add    esp,0x10
c0008cb7:	85 c0                	test   eax,eax
c0008cb9:	75 1d                	jne    c0008cd8 <src_get_description+0x32>
c0008cbb:	83 ec 0c             	sub    esp,0xc
c0008cbe:	53                   	push   ebx
c0008cbf:	e8 58 57 00 00       	call   c000e41c <zoh_get_description>
c0008cc4:	83 c4 10             	add    esp,0x10
c0008cc7:	85 c0                	test   eax,eax
c0008cc9:	75 0d                	jne    c0008cd8 <src_get_description+0x32>
c0008ccb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ccf:	83 c4 08             	add    esp,0x8
c0008cd2:	5b                   	pop    ebx
c0008cd3:	e9 4c 0b 00 00       	jmp    c0009824 <linear_get_description>
c0008cd8:	83 c4 08             	add    esp,0x8
c0008cdb:	5b                   	pop    ebx
c0008cdc:	c3                   	ret    

c0008cdd <src_get_version>:
c0008cdd:	b8 e0 a1 02 c0       	mov    eax,0xc002a1e0
c0008ce2:	c3                   	ret    

c0008ce3 <src_is_valid_ratio>:
c0008ce3:	83 ec 1c             	sub    esp,0x1c
c0008ce6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cf6:	68 00 00 70 3f       	push   0x3f700000
c0008cfb:	6a 00                	push   0x0
c0008cfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d05:	e8 ad ff 01 00       	call   c0028cb7 <__ltdf2>
c0008d0a:	83 c4 10             	add    esp,0x10
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	85 c0                	test   eax,eax
c0008d11:	78 1e                	js     c0008d31 <src_is_valid_ratio+0x4e>
c0008d13:	68 00 00 70 40       	push   0x40700000
c0008d18:	6a 00                	push   0x0
c0008d1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d22:	e8 72 ff 01 00       	call   c0028c99 <__gtdf2>
c0008d27:	31 d2                	xor    edx,edx
c0008d29:	83 c4 10             	add    esp,0x10
c0008d2c:	85 c0                	test   eax,eax
c0008d2e:	0f 9e c2             	setle  dl
c0008d31:	89 d0                	mov    eax,edx
c0008d33:	83 c4 1c             	add    esp,0x1c
c0008d36:	c3                   	ret    

c0008d37 <src_error>:
c0008d37:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d3b:	31 c0                	xor    eax,eax
c0008d3d:	85 d2                	test   edx,edx
c0008d3f:	74 03                	je     c0008d44 <src_error+0xd>
c0008d41:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d44:	c3                   	ret    

c0008d45 <src_strerror>:
c0008d45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d49:	31 c0                	xor    eax,eax
c0008d4b:	83 fa 17             	cmp    edx,0x17
c0008d4e:	77 07                	ja     c0008d57 <src_strerror+0x12>
c0008d50:	8b 04 95 40 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd59c0]
c0008d57:	c3                   	ret    

c0008d58 <src_simple>:
c0008d58:	56                   	push   esi
c0008d59:	53                   	push   ebx
c0008d5a:	83 ec 18             	sub    esp,0x18
c0008d5d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d61:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d65:	50                   	push   eax
c0008d66:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d6a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d6e:	e8 0c fe ff ff       	call   c0008b7f <src_new>
c0008d73:	83 c4 10             	add    esp,0x10
c0008d76:	85 c0                	test   eax,eax
c0008d78:	75 06                	jne    c0008d80 <src_simple+0x28>
c0008d7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d7e:	eb 25                	jmp    c0008da5 <src_simple+0x4d>
c0008d80:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d87:	89 c3                	mov    ebx,eax
c0008d89:	50                   	push   eax
c0008d8a:	50                   	push   eax
c0008d8b:	56                   	push   esi
c0008d8c:	53                   	push   ebx
c0008d8d:	e8 e2 f9 ff ff       	call   c0008774 <src_process>
c0008d92:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d99:	e8 9a f9 ff ff       	call   c0008738 <src_delete>
c0008d9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008da2:	83 c4 10             	add    esp,0x10
c0008da5:	83 c4 14             	add    esp,0x14
c0008da8:	5b                   	pop    ebx
c0008da9:	5e                   	pop    esi
c0008daa:	c3                   	ret    

c0008dab <src_short_to_float_array>:
c0008dab:	53                   	push   ebx
c0008dac:	83 ec 18             	sub    esp,0x18
c0008daf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008db3:	85 db                	test   ebx,ebx
c0008db5:	74 54                	je     c0008e0b <src_short_to_float_array+0x60>
c0008db7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dbb:	4b                   	dec    ebx
c0008dbc:	83 ec 0c             	sub    esp,0xc
c0008dbf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008dc3:	50                   	push   eax
c0008dc4:	e8 82 fc 01 00       	call   c0028a4b <__floatsidf>
c0008dc9:	83 c4 10             	add    esp,0x10
c0008dcc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dd0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dd4:	68 00 00 00 3f       	push   0x3f000000
c0008dd9:	6a 00                	push   0x0
c0008ddb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de3:	e8 00 f6 01 00       	call   c00283e8 <__muldf3>
c0008de8:	59                   	pop    ecx
c0008de9:	59                   	pop    ecx
c0008dea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008df2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dfa:	e8 bc fe 01 00       	call   c0028cbb <__truncdfsf2>
c0008dff:	83 c4 10             	add    esp,0x10
c0008e02:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e06:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e09:	eb a8                	jmp    c0008db3 <src_short_to_float_array+0x8>
c0008e0b:	83 c4 18             	add    esp,0x18
c0008e0e:	5b                   	pop    ebx
c0008e0f:	c3                   	ret    

c0008e10 <src_float_to_short_array>:
c0008e10:	56                   	push   esi
c0008e11:	53                   	push   ebx
c0008e12:	83 ec 14             	sub    esp,0x14
c0008e15:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e19:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e1d:	85 db                	test   ebx,ebx
c0008e1f:	0f 84 a4 00 00 00    	je     c0008ec9 <src_float_to_short_array+0xb9>
c0008e25:	83 ec 0c             	sub    esp,0xc
c0008e28:	4b                   	dec    ebx
c0008e29:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e2d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e30:	e8 aa ff 01 00       	call   c0028ddf <__extendsfdf2>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e40:	68 00 00 e0 41       	push   0x41e00000
c0008e45:	6a 00                	push   0x0
c0008e47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e4f:	e8 94 f5 01 00       	call   c00283e8 <__muldf3>
c0008e54:	83 c4 10             	add    esp,0x10
c0008e57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e5f:	68 ff ff df 41       	push   0x41dfffff
c0008e64:	68 00 00 c0 ff       	push   0xffc00000
c0008e69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e71:	e8 3f fe 01 00       	call   c0028cb5 <__gedf2>
c0008e76:	83 c4 10             	add    esp,0x10
c0008e79:	85 c0                	test   eax,eax
c0008e7b:	78 08                	js     c0008e85 <src_float_to_short_array+0x75>
c0008e7d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e83:	eb 98                	jmp    c0008e1d <src_float_to_short_array+0xd>
c0008e85:	68 00 00 e0 c1       	push   0xc1e00000
c0008e8a:	6a 00                	push   0x0
c0008e8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e94:	e8 20 fe 01 00       	call   c0028cb9 <__ledf2>
c0008e99:	83 c4 10             	add    esp,0x10
c0008e9c:	85 c0                	test   eax,eax
c0008e9e:	7f 0b                	jg     c0008eab <src_float_to_short_array+0x9b>
c0008ea0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ea6:	e9 72 ff ff ff       	jmp    c0008e1d <src_float_to_short_array+0xd>
c0008eab:	50                   	push   eax
c0008eac:	50                   	push   eax
c0008ead:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb5:	e8 b6 ff 01 00       	call   c0028e70 <lrint>
c0008eba:	83 c4 10             	add    esp,0x10
c0008ebd:	c1 f8 10             	sar    eax,0x10
c0008ec0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ec4:	e9 54 ff ff ff       	jmp    c0008e1d <src_float_to_short_array+0xd>
c0008ec9:	83 c4 14             	add    esp,0x14
c0008ecc:	5b                   	pop    ebx
c0008ecd:	5e                   	pop    esi
c0008ece:	c3                   	ret    

c0008ecf <src_int_to_float_array>:
c0008ecf:	53                   	push   ebx
c0008ed0:	83 ec 18             	sub    esp,0x18
c0008ed3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ed7:	85 db                	test   ebx,ebx
c0008ed9:	74 52                	je     c0008f2d <src_int_to_float_array+0x5e>
c0008edb:	83 ec 0c             	sub    esp,0xc
c0008ede:	4b                   	dec    ebx
c0008edf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ee3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ee6:	e8 60 fb 01 00       	call   c0028a4b <__floatsidf>
c0008eeb:	83 c4 10             	add    esp,0x10
c0008eee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ef2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ef6:	68 00 00 00 3e       	push   0x3e000000
c0008efb:	6a 00                	push   0x0
c0008efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f05:	e8 de f4 01 00       	call   c00283e8 <__muldf3>
c0008f0a:	59                   	pop    ecx
c0008f0b:	59                   	pop    ecx
c0008f0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1c:	e8 9a fd 01 00       	call   c0028cbb <__truncdfsf2>
c0008f21:	83 c4 10             	add    esp,0x10
c0008f24:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f28:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f2b:	eb aa                	jmp    c0008ed7 <src_int_to_float_array+0x8>
c0008f2d:	83 c4 18             	add    esp,0x18
c0008f30:	5b                   	pop    ebx
c0008f31:	c3                   	ret    

c0008f32 <src_float_to_int_array>:
c0008f32:	56                   	push   esi
c0008f33:	53                   	push   ebx
c0008f34:	83 ec 14             	sub    esp,0x14
c0008f37:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f3b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f3f:	85 db                	test   ebx,ebx
c0008f41:	0f 84 a2 00 00 00    	je     c0008fe9 <src_float_to_int_array+0xb7>
c0008f47:	83 ec 0c             	sub    esp,0xc
c0008f4a:	4b                   	dec    ebx
c0008f4b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f4f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f52:	e8 88 fe 01 00       	call   c0028ddf <__extendsfdf2>
c0008f57:	83 c4 10             	add    esp,0x10
c0008f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f62:	68 00 00 e0 41       	push   0x41e00000
c0008f67:	6a 00                	push   0x0
c0008f69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f71:	e8 72 f4 01 00       	call   c00283e8 <__muldf3>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f81:	68 ff ff df 41       	push   0x41dfffff
c0008f86:	68 00 00 c0 ff       	push   0xffc00000
c0008f8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f93:	e8 1d fd 01 00       	call   c0028cb5 <__gedf2>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	85 c0                	test   eax,eax
c0008f9d:	78 09                	js     c0008fa8 <src_float_to_int_array+0x76>
c0008f9f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fa6:	eb 97                	jmp    c0008f3f <src_float_to_int_array+0xd>
c0008fa8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fad:	6a 00                	push   0x0
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd fc 01 00       	call   c0028cb9 <__ledf2>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	85 c0                	test   eax,eax
c0008fc1:	7f 0c                	jg     c0008fcf <src_float_to_int_array+0x9d>
c0008fc3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fca:	e9 70 ff ff ff       	jmp    c0008f3f <src_float_to_int_array+0xd>
c0008fcf:	50                   	push   eax
c0008fd0:	50                   	push   eax
c0008fd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd9:	e8 92 fe 01 00       	call   c0028e70 <lrint>
c0008fde:	83 c4 10             	add    esp,0x10
c0008fe1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fe4:	e9 56 ff ff ff       	jmp    c0008f3f <src_float_to_int_array+0xd>
c0008fe9:	83 c4 14             	add    esp,0x14
c0008fec:	5b                   	pop    ebx
c0008fed:	5e                   	pop    esi
c0008fee:	c3                   	ret    

c0008fef <linear_vari_process>:
c0008fef:	55                   	push   ebp
c0008ff0:	31 d2                	xor    edx,edx
c0008ff2:	57                   	push   edi
c0008ff3:	56                   	push   esi
c0008ff4:	53                   	push   ebx
c0008ff5:	83 ec 3c             	sub    esp,0x3c
c0008ff8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ffc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009000:	0f 8e d3 07 00 00    	jle    c00097d9 <linear_vari_process+0x7ea>
c0009006:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000900a:	ba 05 00 00 00       	mov    edx,0x5
c000900f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009012:	85 db                	test   ebx,ebx
c0009014:	0f 84 bf 07 00 00    	je     c00097d9 <linear_vari_process+0x7ea>
c000901a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000901d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009021:	74 19                	je     c000903c <linear_vari_process+0x4d>
c0009023:	31 d2                	xor    edx,edx
c0009025:	39 c2                	cmp    edx,eax
c0009027:	7d 0c                	jge    c0009035 <linear_vari_process+0x46>
c0009029:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000902b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000902e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009032:	42                   	inc    edx
c0009033:	eb f0                	jmp    c0009025 <linear_vari_process+0x36>
c0009035:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000903c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000903f:	0f af d0             	imul   edx,eax
c0009042:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009045:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009049:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009050:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009053:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000905a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000905e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009061:	8b 00                	mov    eax,DWORD PTR [eax]
c0009063:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009067:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000906b:	68 00 00 70 3f       	push   0x3f700000
c0009070:	6a 00                	push   0x0
c0009072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000907a:	e8 38 fc 01 00       	call   c0028cb7 <__ltdf2>
c000907f:	83 c4 10             	add    esp,0x10
c0009082:	ba 16 00 00 00       	mov    edx,0x16
c0009087:	85 c0                	test   eax,eax
c0009089:	0f 88 4a 07 00 00    	js     c00097d9 <linear_vari_process+0x7ea>
c000908f:	68 00 00 70 40       	push   0x40700000
c0009094:	6a 00                	push   0x0
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909e:	e8 f6 fb 01 00       	call   c0028c99 <__gtdf2>
c00090a3:	83 c4 10             	add    esp,0x10
c00090a6:	ba 16 00 00 00       	mov    edx,0x16
c00090ab:	85 c0                	test   eax,eax
c00090ad:	0f 8f 26 07 00 00    	jg     c00097d9 <linear_vari_process+0x7ea>
c00090b3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090b7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090c5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ca:	6a 00                	push   0x0
c00090cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d4:	e8 de fb 01 00       	call   c0028cb7 <__ltdf2>
c00090d9:	83 c4 10             	add    esp,0x10
c00090dc:	85 c0                	test   eax,eax
c00090de:	0f 89 89 02 00 00    	jns    c000936d <linear_vari_process+0x37e>
c00090e4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090e7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090ea:	0f 8d 7d 02 00 00    	jge    c000936d <linear_vari_process+0x37e>
c00090f0:	83 ec 0c             	sub    esp,0xc
c00090f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090f6:	e8 50 f9 01 00       	call   c0028a4b <__floatsidf>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009101:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009105:	68 00 00 f0 3f       	push   0x3ff00000
c000910a:	6a 00                	push   0x0
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009114:	e8 52 ec 01 00       	call   c0027d6b <__adddf3>
c0009119:	83 c4 10             	add    esp,0x10
c000911c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009120:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009124:	52                   	push   edx
c0009125:	50                   	push   eax
c0009126:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000912a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000912e:	e8 b5 f2 01 00       	call   c00283e8 <__muldf3>
c0009133:	5d                   	pop    ebp
c0009134:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009138:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000913c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000913f:	e8 07 f9 01 00       	call   c0028a4b <__floatsidf>
c0009144:	83 c4 10             	add    esp,0x10
c0009147:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000914f:	52                   	push   edx
c0009150:	50                   	push   eax
c0009151:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009155:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009159:	e8 0d ec 01 00       	call   c0027d6b <__adddf3>
c000915e:	59                   	pop    ecx
c000915f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009163:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009167:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000916a:	e8 dc f8 01 00       	call   c0028a4b <__floatsidf>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009176:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000917a:	52                   	push   edx
c000917b:	50                   	push   eax
c000917c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009180:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009184:	e8 2c fb 01 00       	call   c0028cb5 <__gedf2>
c0009189:	83 c4 10             	add    esp,0x10
c000918c:	85 c0                	test   eax,eax
c000918e:	0f 89 d9 01 00 00    	jns    c000936d <linear_vari_process+0x37e>
c0009194:	85 ff                	test   edi,edi
c0009196:	0f 8e f4 00 00 00    	jle    c0009290 <linear_vari_process+0x2a1>
c000919c:	83 ec 10             	sub    esp,0x10
c000919f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091a5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091a9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091ac:	ff 30                	push   DWORD PTR [eax]
c00091ae:	e8 09 f2 01 00       	call   c00283bc <__subdf3>
c00091b3:	83 c4 18             	add    esp,0x18
c00091b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091be:	52                   	push   edx
c00091bf:	50                   	push   eax
c00091c0:	e8 8b fc 01 00       	call   c0028e50 <fabs>
c00091c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091d5:	68 23 42 92 0c       	push   0xc924223
c00091da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e2:	e8 b2 fa 01 00       	call   c0028c99 <__gtdf2>
c00091e7:	83 c4 10             	add    esp,0x10
c00091ea:	85 c0                	test   eax,eax
c00091ec:	0f 8e 9e 00 00 00    	jle    c0009290 <linear_vari_process+0x2a1>
c00091f2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091f6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00091fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0009202:	52                   	push   edx
c0009203:	50                   	push   eax
c0009204:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009207:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000920a:	e8 ad f1 01 00       	call   c00283bc <__subdf3>
c000920f:	59                   	pop    ecx
c0009210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009218:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000921b:	e8 2b f8 01 00       	call   c0028a4b <__floatsidf>
c0009220:	83 c4 10             	add    esp,0x10
c0009223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000922b:	52                   	push   edx
c000922c:	50                   	push   eax
c000922d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009235:	e8 ae f1 01 00       	call   c00283e8 <__muldf3>
c000923a:	5f                   	pop    edi
c000923b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000923f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009243:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009246:	e8 00 f8 01 00       	call   c0028a4b <__floatsidf>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009252:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009256:	52                   	push   edx
c0009257:	50                   	push   eax
c0009258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009260:	e8 67 f4 01 00       	call   c00286cc <__divdf3>
c0009265:	83 c4 10             	add    esp,0x10
c0009268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000926c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 e6 ea 01 00       	call   c0027d6b <__adddf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	31 ff                	xor    edi,edi
c0009292:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009295:	0f 8e 9d 00 00 00    	jle    c0009338 <linear_vari_process+0x349>
c000929b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000929e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092a5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ae:	52                   	push   edx
c00092af:	52                   	push   edx
c00092b0:	55                   	push   ebp
c00092b1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092b4:	47                   	inc    edi
c00092b5:	e8 46 e4 01 00       	call   c0027700 <__subsf3>
c00092ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00092bd:	e8 1d fb 01 00       	call   c0028ddf <__extendsfdf2>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092c9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092dd:	e8 06 f1 01 00       	call   c00283e8 <__muldf3>
c00092e2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092ed:	e8 ed fa 01 00       	call   c0028ddf <__extendsfdf2>
c00092f2:	83 c4 10             	add    esp,0x10
c00092f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fd:	52                   	push   edx
c00092fe:	50                   	push   eax
c00092ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009303:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009307:	e8 5f ea 01 00       	call   c0027d6b <__adddf3>
c000930c:	59                   	pop    ecx
c000930d:	5d                   	pop    ebp
c000930e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009312:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009316:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931e:	e8 98 f9 01 00       	call   c0028cbb <__truncdfsf2>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009329:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000932d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009330:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009333:	e9 5a ff ff ff       	jmp    c0009292 <linear_vari_process+0x2a3>
c0009338:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009340:	68 00 00 f0 3f       	push   0x3ff00000
c0009345:	6a 00                	push   0x0
c0009347:	e8 80 f3 01 00       	call   c00286cc <__divdf3>
c000934c:	83 c4 10             	add    esp,0x10
c000934f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009352:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009356:	52                   	push   edx
c0009357:	50                   	push   eax
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	e8 06 ea 01 00       	call   c0027d6b <__adddf3>
c0009365:	83 c4 10             	add    esp,0x10
c0009368:	e9 50 fd ff ff       	jmp    c00090bd <linear_vari_process+0xce>
c000936d:	50                   	push   eax
c000936e:	50                   	push   eax
c000936f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009373:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009377:	e8 f4 fa 01 00       	call   c0028e70 <lrint>
c000937c:	83 ec 0c             	sub    esp,0xc
c000937f:	50                   	push   eax
c0009380:	e8 c6 f6 01 00       	call   c0028a4b <__floatsidf>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000938c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009390:	52                   	push   edx
c0009391:	50                   	push   eax
c0009392:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000939a:	e8 1d f0 01 00       	call   c00283bc <__subdf3>
c000939f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093a7:	83 c4 20             	add    esp,0x20
c00093aa:	6a 00                	push   0x0
c00093ac:	6a 00                	push   0x0
c00093ae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b6:	e8 fc f8 01 00       	call   c0028cb7 <__ltdf2>
c00093bb:	83 c4 10             	add    esp,0x10
c00093be:	85 c0                	test   eax,eax
c00093c0:	79 1e                	jns    c00093e0 <linear_vari_process+0x3f1>
c00093c2:	68 00 00 f0 3f       	push   0x3ff00000
c00093c7:	6a 00                	push   0x0
c00093c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d1:	e8 95 e9 01 00       	call   c0027d6b <__adddf3>
c00093d6:	83 c4 10             	add    esp,0x10
c00093d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093dc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093e0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093e3:	83 ec 10             	sub    esp,0x10
c00093e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f6:	e8 c1 ef 01 00       	call   c00283bc <__subdf3>
c00093fb:	83 c4 18             	add    esp,0x18
c00093fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009402:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009406:	52                   	push   edx
c0009407:	50                   	push   eax
c0009408:	e8 63 fa 01 00       	call   c0028e70 <lrint>
c000940d:	83 c4 10             	add    esp,0x10
c0009410:	0f af f8             	imul   edi,eax
c0009413:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009416:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009419:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000941c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000941f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009422:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009426:	0f 8d 13 03 00 00    	jge    c000973f <linear_vari_process+0x750>
c000942c:	83 ec 0c             	sub    esp,0xc
c000942f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009432:	e8 14 f6 01 00       	call   c0028a4b <__floatsidf>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000943e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009442:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009446:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000944a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000944e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009452:	e8 91 ef 01 00       	call   c00283e8 <__muldf3>
c0009457:	89 3c 24             	mov    DWORD PTR [esp],edi
c000945a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000945e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009462:	e8 e4 f5 01 00       	call   c0028a4b <__floatsidf>
c0009467:	83 c4 10             	add    esp,0x10
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	52                   	push   edx
c0009473:	50                   	push   eax
c0009474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009478:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947c:	e8 ea e8 01 00       	call   c0027d6b <__adddf3>
c0009481:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009484:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009488:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948c:	e8 ba f5 01 00       	call   c0028a4b <__floatsidf>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009498:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949c:	52                   	push   edx
c000949d:	50                   	push   eax
c000949e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a6:	e8 0c f8 01 00       	call   c0028cb7 <__ltdf2>
c00094ab:	83 c4 10             	add    esp,0x10
c00094ae:	85 c0                	test   eax,eax
c00094b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094b4:	0f 89 85 02 00 00    	jns    c000973f <linear_vari_process+0x750>
c00094ba:	85 c9                	test   ecx,ecx
c00094bc:	0f 8e f5 00 00 00    	jle    c00095b7 <linear_vari_process+0x5c8>
c00094c2:	83 ec 10             	sub    esp,0x10
c00094c5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094c8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094cb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094cf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094d2:	ff 30                	push   DWORD PTR [eax]
c00094d4:	e8 e3 ee 01 00       	call   c00283bc <__subdf3>
c00094d9:	83 c4 18             	add    esp,0x18
c00094dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094e4:	52                   	push   edx
c00094e5:	50                   	push   eax
c00094e6:	e8 65 f9 01 00       	call   c0028e50 <fabs>
c00094eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094fb:	68 23 42 92 0c       	push   0xc924223
c0009500:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009504:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009508:	e8 8c f7 01 00       	call   c0028c99 <__gtdf2>
c000950d:	83 c4 10             	add    esp,0x10
c0009510:	85 c0                	test   eax,eax
c0009512:	0f 8e 9f 00 00 00    	jle    c00095b7 <linear_vari_process+0x5c8>
c0009518:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000951c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000951f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009521:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009529:	52                   	push   edx
c000952a:	50                   	push   eax
c000952b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000952e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009531:	e8 86 ee 01 00       	call   c00283bc <__subdf3>
c0009536:	5f                   	pop    edi
c0009537:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000953b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000953f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009542:	e8 04 f5 01 00       	call   c0028a4b <__floatsidf>
c0009547:	83 c4 10             	add    esp,0x10
c000954a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000954e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009552:	52                   	push   edx
c0009553:	50                   	push   eax
c0009554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955c:	e8 87 ee 01 00       	call   c00283e8 <__muldf3>
c0009561:	5d                   	pop    ebp
c0009562:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009566:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000956a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000956d:	e8 d9 f4 01 00       	call   c0028a4b <__floatsidf>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009579:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957d:	52                   	push   edx
c000957e:	50                   	push   eax
c000957f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009587:	e8 40 f1 01 00       	call   c00286cc <__divdf3>
c000958c:	83 c4 10             	add    esp,0x10
c000958f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009597:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000959b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 bf e7 01 00       	call   c0027d6b <__adddf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	31 ff                	xor    edi,edi
c00095b9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095bc:	39 f8                	cmp    eax,edi
c00095be:	0f 8e ac 00 00 00    	jle    c0009670 <linear_vari_process+0x681>
c00095c4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095c6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095c9:	29 c1                	sub    ecx,eax
c00095cb:	89 c8                	mov    eax,ecx
c00095cd:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095d0:	01 f8                	add    eax,edi
c00095d2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095d6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095e0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095e3:	51                   	push   ecx
c00095e4:	01 f8                	add    eax,edi
c00095e6:	51                   	push   ecx
c00095e7:	47                   	inc    edi
c00095e8:	55                   	push   ebp
c00095e9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095ec:	e8 0f e1 01 00       	call   c0027700 <__subsf3>
c00095f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f4:	e8 e6 f7 01 00       	call   c0028ddf <__extendsfdf2>
c00095f9:	83 c4 10             	add    esp,0x10
c00095fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009600:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009604:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009608:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009614:	e8 cf ed 01 00       	call   c00283e8 <__muldf3>
c0009619:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000961c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009620:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009624:	e8 b6 f7 01 00       	call   c0028ddf <__extendsfdf2>
c0009629:	83 c4 10             	add    esp,0x10
c000962c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009630:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009634:	52                   	push   edx
c0009635:	50                   	push   eax
c0009636:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963e:	e8 28 e7 01 00       	call   c0027d6b <__adddf3>
c0009643:	5d                   	pop    ebp
c0009644:	59                   	pop    ecx
c0009645:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009649:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000964d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009651:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009655:	e8 61 f6 01 00       	call   c0028cbb <__truncdfsf2>
c000965a:	83 c4 10             	add    esp,0x10
c000965d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009661:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009665:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009668:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000966b:	e9 49 ff ff ff       	jmp    c00095b9 <linear_vari_process+0x5ca>
c0009670:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009674:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009678:	68 00 00 f0 3f       	push   0x3ff00000
c000967d:	6a 00                	push   0x0
c000967f:	e8 48 f0 01 00       	call   c00286cc <__divdf3>
c0009684:	83 c4 10             	add    esp,0x10
c0009687:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000968b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000968f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009693:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969f:	e8 c7 e6 01 00       	call   c0027d6b <__adddf3>
c00096a4:	59                   	pop    ecx
c00096a5:	5f                   	pop    edi
c00096a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b6:	e8 b5 f7 01 00       	call   c0028e70 <lrint>
c00096bb:	83 ec 0c             	sub    esp,0xc
c00096be:	50                   	push   eax
c00096bf:	e8 87 f3 01 00       	call   c0028a4b <__floatsidf>
c00096c4:	83 c4 10             	add    esp,0x10
c00096c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096cb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096cf:	52                   	push   edx
c00096d0:	50                   	push   eax
c00096d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096d9:	e8 de ec 01 00       	call   c00283bc <__subdf3>
c00096de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e6:	83 c4 20             	add    esp,0x20
c00096e9:	6a 00                	push   0x0
c00096eb:	6a 00                	push   0x0
c00096ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f5:	e8 bd f5 01 00       	call   c0028cb7 <__ltdf2>
c00096fa:	83 c4 10             	add    esp,0x10
c00096fd:	85 c0                	test   eax,eax
c00096ff:	79 1e                	jns    c000971f <linear_vari_process+0x730>
c0009701:	68 00 00 f0 3f       	push   0x3ff00000
c0009706:	6a 00                	push   0x0
c0009708:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000970c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009710:	e8 56 e6 01 00       	call   c0027d6b <__adddf3>
c0009715:	83 c4 10             	add    esp,0x10
c0009718:	89 04 24             	mov    DWORD PTR [esp],eax
c000971b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000971f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009722:	83 ec 10             	sub    esp,0x10
c0009725:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009729:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009731:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009735:	e8 82 ec 01 00       	call   c00283bc <__subdf3>
c000973a:	e9 bc fc ff ff       	jmp    c00093fb <linear_vari_process+0x40c>
c000973f:	39 fd                	cmp    ebp,edi
c0009741:	7d 38                	jge    c000977b <linear_vari_process+0x78c>
c0009743:	83 ec 0c             	sub    esp,0xc
c0009746:	89 f8                	mov    eax,edi
c0009748:	29 e8                	sub    eax,ebp
c000974a:	99                   	cdq    
c000974b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000974e:	50                   	push   eax
c000974f:	e8 f7 f2 01 00       	call   c0028a4b <__floatsidf>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000975b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000975f:	52                   	push   edx
c0009760:	50                   	push   eax
c0009761:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009765:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009769:	e8 fd e5 01 00       	call   c0027d6b <__adddf3>
c000976e:	83 c4 10             	add    esp,0x10
c0009771:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009774:	89 04 24             	mov    DWORD PTR [esp],eax
c0009777:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009782:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009786:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009789:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000978c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978f:	85 c0                	test   eax,eax
c0009791:	7f 29                	jg     c00097bc <linear_vari_process+0x7cd>
c0009793:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000979f:	89 01                	mov    DWORD PTR [ecx],eax
c00097a1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097a7:	99                   	cdq    
c00097a8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097ab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097b1:	99                   	cdq    
c00097b2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097b5:	31 d2                	xor    edx,edx
c00097b7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097ba:	eb 1d                	jmp    c00097d9 <linear_vari_process+0x7ea>
c00097bc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097bf:	31 d2                	xor    edx,edx
c00097c1:	29 c8                	sub    eax,ecx
c00097c3:	c1 e0 02             	shl    eax,0x2
c00097c6:	39 d1                	cmp    ecx,edx
c00097c8:	7e c9                	jle    c0009793 <linear_vari_process+0x7a4>
c00097ca:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097cc:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097cf:	83 c0 04             	add    eax,0x4
c00097d2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097d6:	42                   	inc    edx
c00097d7:	eb ed                	jmp    c00097c6 <linear_vari_process+0x7d7>
c00097d9:	83 c4 3c             	add    esp,0x3c
c00097dc:	89 d0                	mov    eax,edx
c00097de:	5b                   	pop    ebx
c00097df:	5e                   	pop    esi
c00097e0:	5f                   	pop    edi
c00097e1:	5d                   	pop    ebp
c00097e2:	c3                   	ret    

c00097e3 <linear_reset>:
c00097e3:	83 ec 0c             	sub    esp,0xc
c00097e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097ea:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097ed:	85 c0                	test   eax,eax
c00097ef:	74 20                	je     c0009811 <linear_reset+0x2e>
c00097f1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097f4:	83 c0 1c             	add    eax,0x1c
c00097f7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097fa:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009801:	c1 e2 02             	shl    edx,0x2
c0009804:	51                   	push   ecx
c0009805:	52                   	push   edx
c0009806:	6a 00                	push   0x0
c0009808:	50                   	push   eax
c0009809:	e8 5e 6f ff ff       	call   c000076c <memset>
c000980e:	83 c4 10             	add    esp,0x10
c0009811:	83 c4 0c             	add    esp,0xc
c0009814:	c3                   	ret    

c0009815 <linear_get_name>:
c0009815:	31 c0                	xor    eax,eax
c0009817:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000981c:	75 05                	jne    c0009823 <linear_get_name+0xe>
c000981e:	b8 a0 a6 02 c0       	mov    eax,0xc002a6a0
c0009823:	c3                   	ret    

c0009824 <linear_get_description>:
c0009824:	31 c0                	xor    eax,eax
c0009826:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000982b:	75 05                	jne    c0009832 <linear_get_description+0xe>
c000982d:	b8 b4 a6 02 c0       	mov    eax,0xc002a6b4
c0009832:	c3                   	ret    

c0009833 <linear_set_converter>:
c0009833:	53                   	push   ebx
c0009834:	b8 0a 00 00 00       	mov    eax,0xa
c0009839:	83 ec 08             	sub    esp,0x8
c000983c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009840:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009845:	75 6e                	jne    c00098b5 <linear_set_converter+0x82>
c0009847:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000984a:	85 c0                	test   eax,eax
c000984c:	74 13                	je     c0009861 <linear_set_converter+0x2e>
c000984e:	83 ec 0c             	sub    esp,0xc
c0009851:	50                   	push   eax
c0009852:	e8 5f 60 00 00       	call   c000f8b6 <free>
c0009857:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000985e:	83 c4 10             	add    esp,0x10
c0009861:	50                   	push   eax
c0009862:	50                   	push   eax
c0009863:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009866:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000986d:	50                   	push   eax
c000986e:	6a 01                	push   0x1
c0009870:	e8 61 60 00 00       	call   c000f8d6 <calloc>
c0009875:	83 c4 10             	add    esp,0x10
c0009878:	89 c2                	mov    edx,eax
c000987a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000987d:	85 d2                	test   edx,edx
c000987f:	b8 01 00 00 00       	mov    eax,0x1
c0009884:	74 2f                	je     c00098b5 <linear_set_converter+0x82>
c0009886:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009889:	83 ec 0c             	sub    esp,0xc
c000988c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000988f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009895:	c7 43 24 ef 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fef
c000989c:	c7 43 20 ef 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fef
c00098a3:	c7 43 28 e3 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097e3
c00098aa:	53                   	push   ebx
c00098ab:	e8 33 ff ff ff       	call   c00097e3 <linear_reset>
c00098b0:	83 c4 10             	add    esp,0x10
c00098b3:	31 c0                	xor    eax,eax
c00098b5:	83 c4 08             	add    esp,0x8
c00098b8:	5b                   	pop    ebx
c00098b9:	c3                   	ret    

c00098ba <int_to_fp>:
c00098ba:	c1 e0 0c             	shl    eax,0xc
c00098bd:	c3                   	ret    

c00098be <fp_to_int>:
c00098be:	c1 f8 0c             	sar    eax,0xc
c00098c1:	c3                   	ret    

c00098c2 <fp_fraction_part>:
c00098c2:	25 ff 0f 00 00       	and    eax,0xfff
c00098c7:	c3                   	ret    

c00098c8 <fp_to_double>:
c00098c8:	83 ec 1c             	sub    esp,0x1c
c00098cb:	e8 f2 ff ff ff       	call   c00098c2 <fp_fraction_part>
c00098d0:	83 ec 0c             	sub    esp,0xc
c00098d3:	50                   	push   eax
c00098d4:	e8 72 f1 01 00       	call   c0028a4b <__floatsidf>
c00098d9:	83 c4 10             	add    esp,0x10
c00098dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098e4:	68 00 00 30 3f       	push   0x3f300000
c00098e9:	6a 00                	push   0x0
c00098eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f3:	e8 f0 ea 01 00       	call   c00283e8 <__muldf3>
c00098f8:	83 c4 2c             	add    esp,0x2c
c00098fb:	c3                   	ret    

c00098fc <calc_output_single>:
c00098fc:	55                   	push   ebp
c00098fd:	57                   	push   edi
c00098fe:	56                   	push   esi
c00098ff:	89 c6                	mov    esi,eax
c0009901:	53                   	push   ebx
c0009902:	89 d3                	mov    ebx,edx
c0009904:	83 ec 4c             	sub    esp,0x4c
c0009907:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000990b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000990e:	e8 a7 ff ff ff       	call   c00098ba <int_to_fp>
c0009913:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009916:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000991a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000991e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009922:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009925:	99                   	cdq    
c0009926:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000992e:	f7 fb                	idiv   ebx
c0009930:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009938:	89 da                	mov    edx,ebx
c000993a:	0f af d0             	imul   edx,eax
c000993d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009941:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009945:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009949:	29 c2                	sub    edx,eax
c000994b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000994e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009952:	83 c5 04             	add    ebp,0x4
c0009955:	e8 6e ff ff ff       	call   c00098c8 <fp_to_double>
c000995a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000995e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009966:	e8 53 ff ff ff       	call   c00098be <fp_to_int>
c000996b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000996e:	52                   	push   edx
c000996f:	52                   	push   edx
c0009970:	51                   	push   ecx
c0009971:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009975:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009979:	e8 82 dd 01 00       	call   c0027700 <__subsf3>
c000997e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009981:	e8 59 f4 01 00       	call   c0028ddf <__extendsfdf2>
c0009986:	83 c4 10             	add    esp,0x10
c0009989:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000998d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009991:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000999d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099a1:	e8 42 ea 01 00       	call   c00283e8 <__muldf3>
c00099a6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ae:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099b1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099b5:	e8 25 f4 01 00       	call   c0028ddf <__extendsfdf2>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099c5:	52                   	push   edx
c00099c6:	50                   	push   eax
c00099c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099cf:	e8 97 e3 01 00       	call   c0027d6b <__adddf3>
c00099d4:	59                   	pop    ecx
c00099d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099dd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099e3:	e8 f7 f3 01 00       	call   c0028ddf <__extendsfdf2>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099fd:	e8 e6 e9 01 00       	call   c00283e8 <__muldf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a0d:	52                   	push   edx
c0009a0e:	50                   	push   eax
c0009a0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a17:	e8 4f e3 01 00       	call   c0027d6b <__adddf3>
c0009a1c:	83 c4 10             	add    esp,0x10
c0009a1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a23:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a27:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a2b:	0f 89 1d ff ff ff    	jns    c000994e <calc_output_single+0x52>
c0009a31:	89 d9                	mov    ecx,ebx
c0009a33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a37:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a3b:	89 dd                	mov    ebp,ebx
c0009a3d:	29 c8                	sub    eax,ecx
c0009a3f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a47:	99                   	cdq    
c0009a48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a50:	f7 fb                	idiv   ebx
c0009a52:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a56:	0f af e8             	imul   ebp,eax
c0009a59:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a5d:	01 cd                	add    ebp,ecx
c0009a5f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a62:	89 e8                	mov    eax,ebp
c0009a64:	83 ee 04             	sub    esi,0x4
c0009a67:	e8 5c fe ff ff       	call   c00098c8 <fp_to_double>
c0009a6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a74:	89 e8                	mov    eax,ebp
c0009a76:	29 dd                	sub    ebp,ebx
c0009a78:	e8 41 fe ff ff       	call   c00098be <fp_to_int>
c0009a7d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a80:	52                   	push   edx
c0009a81:	52                   	push   edx
c0009a82:	51                   	push   ecx
c0009a83:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a87:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a8b:	e8 70 dc 01 00       	call   c0027700 <__subsf3>
c0009a90:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a93:	e8 47 f3 01 00       	call   c0028ddf <__extendsfdf2>
c0009a98:	83 c4 10             	add    esp,0x10
c0009a9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a9f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009aaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab3:	e8 30 e9 01 00       	call   c00283e8 <__muldf3>
c0009ab8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009abc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ac0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ac3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ac7:	e8 13 f3 01 00       	call   c0028ddf <__extendsfdf2>
c0009acc:	83 c4 10             	add    esp,0x10
c0009acf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ad7:	52                   	push   edx
c0009ad8:	50                   	push   eax
c0009ad9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009add:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae1:	e8 85 e2 01 00       	call   c0027d6b <__adddf3>
c0009ae6:	59                   	pop    ecx
c0009ae7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009aeb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009aef:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009af5:	e8 e5 f2 01 00       	call   c0028ddf <__extendsfdf2>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b01:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b0f:	e8 d4 e8 01 00       	call   c00283e8 <__muldf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b1f:	52                   	push   edx
c0009b20:	50                   	push   eax
c0009b21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b29:	e8 3d e2 01 00       	call   c0027d6b <__adddf3>
c0009b2e:	83 c4 10             	add    esp,0x10
c0009b31:	85 ed                	test   ebp,ebp
c0009b33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b37:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b3b:	0f 8f 21 ff ff ff    	jg     c0009a62 <calc_output_single+0x166>
c0009b41:	52                   	push   edx
c0009b42:	50                   	push   eax
c0009b43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b4b:	e8 1b e2 01 00       	call   c0027d6b <__adddf3>
c0009b50:	83 c4 5c             	add    esp,0x5c
c0009b53:	5b                   	pop    ebx
c0009b54:	5e                   	pop    esi
c0009b55:	5f                   	pop    edi
c0009b56:	5d                   	pop    ebp
c0009b57:	c3                   	ret    

c0009b58 <calc_output_stereo>:
c0009b58:	55                   	push   ebp
c0009b59:	89 cd                	mov    ebp,ecx
c0009b5b:	57                   	push   edi
c0009b5c:	56                   	push   esi
c0009b5d:	53                   	push   ebx
c0009b5e:	89 c3                	mov    ebx,eax
c0009b60:	83 ec 6c             	sub    esp,0x6c
c0009b63:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b67:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b6e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b75:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b79:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b80:	e8 35 fd ff ff       	call   c00098ba <int_to_fp>
c0009b85:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b8d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b91:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b99:	29 c8                	sub    eax,ecx
c0009b9b:	99                   	cdq    
c0009b9c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ba0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ba4:	0f af d0             	imul   edx,eax
c0009ba7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009baa:	31 d2                	xor    edx,edx
c0009bac:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bb0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bb4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bb7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bbb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bbe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bc2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bc6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bc9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bce:	29 c1                	sub    ecx,eax
c0009bd0:	31 c0                	xor    eax,eax
c0009bd2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bd9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bdd:	83 c7 08             	add    edi,0x8
c0009be0:	e8 e3 fc ff ff       	call   c00098c8 <fp_to_double>
c0009be5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009be9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bf1:	e8 c8 fc ff ff       	call   c00098be <fp_to_int>
c0009bf6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bf9:	52                   	push   edx
c0009bfa:	52                   	push   edx
c0009bfb:	51                   	push   ecx
c0009bfc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c00:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c04:	e8 f7 da 01 00       	call   c0027700 <__subsf3>
c0009c09:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c0c:	e8 ce f1 01 00       	call   c0028ddf <__extendsfdf2>
c0009c11:	83 c4 10             	add    esp,0x10
c0009c14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c18:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c24:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c28:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2c:	e8 b7 e7 01 00       	call   c00283e8 <__muldf3>
c0009c31:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c35:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c39:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c3c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c40:	e8 9a f1 01 00       	call   c0028ddf <__extendsfdf2>
c0009c45:	83 c4 10             	add    esp,0x10
c0009c48:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c4c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c50:	52                   	push   edx
c0009c51:	50                   	push   eax
c0009c52:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c56:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c5a:	e8 0c e1 01 00       	call   c0027d6b <__adddf3>
c0009c5f:	59                   	pop    ecx
c0009c60:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c64:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c68:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c6e:	e8 6c f1 01 00       	call   c0028ddf <__extendsfdf2>
c0009c73:	83 c4 10             	add    esp,0x10
c0009c76:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c7a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c7e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c82:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c86:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c8a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c8e:	e8 55 e7 01 00       	call   c00283e8 <__muldf3>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	52                   	push   edx
c0009c9f:	50                   	push   eax
c0009ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca8:	e8 be e0 01 00       	call   c0027d6b <__adddf3>
c0009cad:	59                   	pop    ecx
c0009cae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cb2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cb6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cbc:	e8 1e f1 01 00       	call   c0028ddf <__extendsfdf2>
c0009cc1:	83 c4 10             	add    esp,0x10
c0009cc4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ccc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cd8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cdc:	e8 07 e7 01 00       	call   c00283e8 <__muldf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ce8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cec:	52                   	push   edx
c0009ced:	50                   	push   eax
c0009cee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf6:	e8 70 e0 01 00       	call   c0027d6b <__adddf3>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d06:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d0a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d0e:	0f 89 c5 fe ff ff    	jns    c0009bd9 <calc_output_stereo+0x81>
c0009d14:	29 e9                	sub    ecx,ebp
c0009d16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d1a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d1e:	29 c8                	sub    eax,ecx
c0009d20:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d28:	99                   	cdq    
c0009d29:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d2d:	31 d2                	xor    edx,edx
c0009d2f:	0f af f8             	imul   edi,eax
c0009d32:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d36:	40                   	inc    eax
c0009d37:	01 cf                	add    edi,ecx
c0009d39:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d3e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d42:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d4a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d4d:	31 c0                	xor    eax,eax
c0009d4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d53:	89 f8                	mov    eax,edi
c0009d55:	83 eb 08             	sub    ebx,0x8
c0009d58:	e8 6b fb ff ff       	call   c00098c8 <fp_to_double>
c0009d5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d65:	89 f8                	mov    eax,edi
c0009d67:	e8 52 fb ff ff       	call   c00098be <fp_to_int>
c0009d6c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d6f:	52                   	push   edx
c0009d70:	52                   	push   edx
c0009d71:	55                   	push   ebp
c0009d72:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d76:	e8 85 d9 01 00       	call   c0027700 <__subsf3>
c0009d7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d7e:	e8 5c f0 01 00       	call   c0028ddf <__extendsfdf2>
c0009d83:	83 c4 10             	add    esp,0x10
c0009d86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d96:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d9a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d9e:	e8 45 e6 01 00       	call   c00283e8 <__muldf3>
c0009da3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009da6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009daa:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dae:	e8 2c f0 01 00       	call   c0028ddf <__extendsfdf2>
c0009db3:	83 c4 10             	add    esp,0x10
c0009db6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dbe:	52                   	push   edx
c0009dbf:	50                   	push   eax
c0009dc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dc8:	e8 9e df 01 00       	call   c0027d6b <__adddf3>
c0009dcd:	59                   	pop    ecx
c0009dce:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dd2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dd6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ddc:	e8 fe ef 01 00       	call   c0028ddf <__extendsfdf2>
c0009de1:	83 c4 10             	add    esp,0x10
c0009de4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009df8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfc:	e8 e7 e5 01 00       	call   c00283e8 <__muldf3>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	52                   	push   edx
c0009e0d:	50                   	push   eax
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e16:	e8 50 df 01 00       	call   c0027d6b <__adddf3>
c0009e1b:	5d                   	pop    ebp
c0009e1c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e20:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e24:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e2a:	e8 b0 ef 01 00       	call   c0028ddf <__extendsfdf2>
c0009e2f:	83 c4 10             	add    esp,0x10
c0009e32:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e36:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e3e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e42:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e46:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e4a:	e8 99 e5 01 00       	call   c00283e8 <__muldf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e56:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e5a:	52                   	push   edx
c0009e5b:	50                   	push   eax
c0009e5c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e64:	e8 02 df 01 00       	call   c0027d6b <__adddf3>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e70:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e74:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e78:	85 ff                	test   edi,edi
c0009e7a:	0f 8f d3 fe ff ff    	jg     c0009d53 <calc_output_stereo+0x1fb>
c0009e80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e90:	e8 d6 de 01 00       	call   c0027d6b <__adddf3>
c0009e95:	83 c4 10             	add    esp,0x10
c0009e98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ea0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eb0:	e8 33 e5 01 00       	call   c00283e8 <__muldf3>
c0009eb5:	59                   	pop    ecx
c0009eb6:	5b                   	pop    ebx
c0009eb7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ebb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ebf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec7:	e8 ef ed 01 00       	call   c0028cbb <__truncdfsf2>
c0009ecc:	83 c4 10             	add    esp,0x10
c0009ecf:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ed6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ed8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009edc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee8:	e8 7e de 01 00       	call   c0027d6b <__adddf3>
c0009eed:	83 c4 10             	add    esp,0x10
c0009ef0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ef4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ef8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009efc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f08:	e8 db e4 01 00       	call   c00283e8 <__muldf3>
c0009f0d:	5e                   	pop    esi
c0009f0e:	5f                   	pop    edi
c0009f0f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f1f:	e8 97 ed 01 00       	call   c0028cbb <__truncdfsf2>
c0009f24:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f2b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f2e:	83 c4 7c             	add    esp,0x7c
c0009f31:	5b                   	pop    ebx
c0009f32:	5e                   	pop    esi
c0009f33:	5f                   	pop    edi
c0009f34:	5d                   	pop    ebp
c0009f35:	c3                   	ret    

c0009f36 <calc_output_quad>:
c0009f36:	55                   	push   ebp
c0009f37:	57                   	push   edi
c0009f38:	56                   	push   esi
c0009f39:	89 c6                	mov    esi,eax
c0009f3b:	53                   	push   ebx
c0009f3c:	83 ec 7c             	sub    esp,0x7c
c0009f3f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f43:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f47:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f4e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f55:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f5d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f60:	e8 55 f9 ff ff       	call   c00098ba <int_to_fp>
c0009f65:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f68:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f6b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f73:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f77:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f7b:	99                   	cdq    
c0009f7c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f80:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f84:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f87:	31 d2                	xor    edx,edx
c0009f89:	0f af d8             	imul   ebx,eax
c0009f8c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f94:	0f af c7             	imul   eax,edi
c0009f97:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f9b:	29 c1                	sub    ecx,eax
c0009f9d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fa5:	31 c0                	xor    eax,eax
c0009fa7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009faa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fbe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fc2:	89 d8                	mov    eax,ebx
c0009fc4:	83 c7 10             	add    edi,0x10
c0009fc7:	e8 fc f8 ff ff       	call   c00098c8 <fp_to_double>
c0009fcc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fd4:	89 d8                	mov    eax,ebx
c0009fd6:	e8 e3 f8 ff ff       	call   c00098be <fp_to_int>
c0009fdb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fdf:	52                   	push   edx
c0009fe0:	52                   	push   edx
c0009fe1:	51                   	push   ecx
c0009fe2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fe6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fea:	e8 11 d7 01 00       	call   c0027700 <__subsf3>
c0009fef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ff2:	e8 e8 ed 01 00       	call   c0028ddf <__extendsfdf2>
c0009ff7:	83 c4 10             	add    esp,0x10
c0009ffa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ffe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a00a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a00e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a012:	e8 d1 e3 01 00       	call   c00283e8 <__muldf3>
c000a017:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a01b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a01f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a022:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a026:	e8 b4 ed 01 00       	call   c0028ddf <__extendsfdf2>
c000a02b:	83 c4 10             	add    esp,0x10
c000a02e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a032:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a036:	52                   	push   edx
c000a037:	50                   	push   eax
c000a038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a040:	e8 26 dd 01 00       	call   c0027d6b <__adddf3>
c000a045:	59                   	pop    ecx
c000a046:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a04a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a04e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a054:	e8 86 ed 01 00       	call   c0028ddf <__extendsfdf2>
c000a059:	83 c4 10             	add    esp,0x10
c000a05c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a060:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a064:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a070:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a074:	e8 6f e3 01 00       	call   c00283e8 <__muldf3>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	52                   	push   edx
c000a085:	50                   	push   eax
c000a086:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a08a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a08e:	e8 d8 dc 01 00       	call   c0027d6b <__adddf3>
c000a093:	59                   	pop    ecx
c000a094:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a098:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a09c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0a2:	e8 38 ed 01 00       	call   c0028ddf <__extendsfdf2>
c000a0a7:	83 c4 10             	add    esp,0x10
c000a0aa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ae:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ba:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0be:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c2:	e8 21 e3 01 00       	call   c00283e8 <__muldf3>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	52                   	push   edx
c000a0d3:	50                   	push   eax
c000a0d4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0d8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0dc:	e8 8a dc 01 00       	call   c0027d6b <__adddf3>
c000a0e1:	59                   	pop    ecx
c000a0e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0e6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0ea:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0f0:	e8 ea ec 01 00       	call   c0028ddf <__extendsfdf2>
c000a0f5:	83 c4 10             	add    esp,0x10
c000a0f8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a108:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a10c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a110:	e8 d3 e2 01 00       	call   c00283e8 <__muldf3>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	52                   	push   edx
c000a121:	50                   	push   eax
c000a122:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a126:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a12a:	e8 3c dc 01 00       	call   c0027d6b <__adddf3>
c000a12f:	59                   	pop    ecx
c000a130:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a134:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a138:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a13e:	e8 9c ec 01 00       	call   c0028ddf <__extendsfdf2>
c000a143:	83 c4 10             	add    esp,0x10
c000a146:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a14a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a156:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a15a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a15e:	e8 85 e2 01 00       	call   c00283e8 <__muldf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a16a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a16e:	52                   	push   edx
c000a16f:	50                   	push   eax
c000a170:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a174:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a178:	e8 ee db 01 00       	call   c0027d6b <__adddf3>
c000a17d:	83 c4 10             	add    esp,0x10
c000a180:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a184:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a188:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a18c:	0f 89 30 fe ff ff    	jns    c0009fc2 <calc_output_quad+0x8c>
c000a192:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a196:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a19a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a19e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1a2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1aa:	29 c8                	sub    eax,ecx
c000a1ac:	99                   	cdq    
c000a1ad:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1b1:	31 d2                	xor    edx,edx
c000a1b3:	0f af d8             	imul   ebx,eax
c000a1b6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1ba:	40                   	inc    eax
c000a1bb:	01 cb                	add    ebx,ecx
c000a1bd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1c2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1c6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ce:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1d1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1d9:	31 c0                	xor    eax,eax
c000a1db:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1df:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1e7:	89 d8                	mov    eax,ebx
c000a1e9:	83 ee 10             	sub    esi,0x10
c000a1ec:	e8 d7 f6 ff ff       	call   c00098c8 <fp_to_double>
c000a1f1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1f9:	89 d8                	mov    eax,ebx
c000a1fb:	e8 be f6 ff ff       	call   c00098be <fp_to_int>
c000a200:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a204:	52                   	push   edx
c000a205:	52                   	push   edx
c000a206:	57                   	push   edi
c000a207:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a20b:	e8 f0 d4 01 00       	call   c0027700 <__subsf3>
c000a210:	89 04 24             	mov    DWORD PTR [esp],eax
c000a213:	e8 c7 eb 01 00       	call   c0028ddf <__extendsfdf2>
c000a218:	83 c4 10             	add    esp,0x10
c000a21b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a21f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a22b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a22f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a233:	e8 b0 e1 01 00       	call   c00283e8 <__muldf3>
c000a238:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a23b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a23f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a243:	e8 97 eb 01 00       	call   c0028ddf <__extendsfdf2>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a24f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a253:	52                   	push   edx
c000a254:	50                   	push   eax
c000a255:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a259:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25d:	e8 09 db 01 00       	call   c0027d6b <__adddf3>
c000a262:	59                   	pop    ecx
c000a263:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a267:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a271:	e8 69 eb 01 00       	call   c0028ddf <__extendsfdf2>
c000a276:	83 c4 10             	add    esp,0x10
c000a279:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a289:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a291:	e8 52 e1 01 00       	call   c00283e8 <__muldf3>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	52                   	push   edx
c000a2a2:	50                   	push   eax
c000a2a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ab:	e8 bb da 01 00       	call   c0027d6b <__adddf3>
c000a2b0:	5f                   	pop    edi
c000a2b1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2b5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2b9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2bf:	e8 1b eb 01 00       	call   c0028ddf <__extendsfdf2>
c000a2c4:	83 c4 10             	add    esp,0x10
c000a2c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2df:	e8 04 e1 01 00       	call   c00283e8 <__muldf3>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	52                   	push   edx
c000a2f0:	50                   	push   eax
c000a2f1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2f5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2f9:	e8 6d da 01 00       	call   c0027d6b <__adddf3>
c000a2fe:	59                   	pop    ecx
c000a2ff:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a303:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a307:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a30d:	e8 cd ea 01 00       	call   c0028ddf <__extendsfdf2>
c000a312:	83 c4 10             	add    esp,0x10
c000a315:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a319:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a325:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a329:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32d:	e8 b6 e0 01 00       	call   c00283e8 <__muldf3>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	52                   	push   edx
c000a33e:	50                   	push   eax
c000a33f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a343:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a347:	e8 1f da 01 00       	call   c0027d6b <__adddf3>
c000a34c:	5f                   	pop    edi
c000a34d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a351:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a355:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a35b:	e8 7f ea 01 00       	call   c0028ddf <__extendsfdf2>
c000a360:	83 c4 10             	add    esp,0x10
c000a363:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a367:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a36f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a373:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a377:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37b:	e8 68 e0 01 00       	call   c00283e8 <__muldf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a387:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38b:	52                   	push   edx
c000a38c:	50                   	push   eax
c000a38d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a391:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a395:	e8 d1 d9 01 00       	call   c0027d6b <__adddf3>
c000a39a:	83 c4 10             	add    esp,0x10
c000a39d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3a5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3a9:	85 db                	test   ebx,ebx
c000a3ab:	0f 8f 36 fe ff ff    	jg     c000a1e7 <calc_output_quad+0x2b1>
c000a3b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c1:	e8 a5 d9 01 00       	call   c0027d6b <__adddf3>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e1:	e8 02 e0 01 00       	call   c00283e8 <__muldf3>
c000a3e6:	59                   	pop    ecx
c000a3e7:	5b                   	pop    ebx
c000a3e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f8:	e8 be e8 01 00       	call   c0028cbb <__truncdfsf2>
c000a3fd:	83 c4 10             	add    esp,0x10
c000a400:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a407:	89 06                	mov    DWORD PTR [esi],eax
c000a409:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a40d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a411:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a415:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a419:	e8 4d d9 01 00       	call   c0027d6b <__adddf3>
c000a41e:	83 c4 10             	add    esp,0x10
c000a421:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a425:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a429:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a431:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a435:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a439:	e8 aa df 01 00       	call   c00283e8 <__muldf3>
c000a43e:	5e                   	pop    esi
c000a43f:	5f                   	pop    edi
c000a440:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a444:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a450:	e8 66 e8 01 00       	call   c0028cbb <__truncdfsf2>
c000a455:	83 c4 10             	add    esp,0x10
c000a458:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a45f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a462:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a466:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a46a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a46e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a472:	e8 f4 d8 01 00       	call   c0027d6b <__adddf3>
c000a477:	83 c4 10             	add    esp,0x10
c000a47a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a47e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a492:	e8 51 df 01 00       	call   c00283e8 <__muldf3>
c000a497:	5d                   	pop    ebp
c000a498:	59                   	pop    ecx
c000a499:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a49d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a9:	e8 0d e8 01 00       	call   c0028cbb <__truncdfsf2>
c000a4ae:	83 c4 10             	add    esp,0x10
c000a4b1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4b8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4bf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cb:	e8 9b d8 01 00       	call   c0027d6b <__adddf3>
c000a4d0:	83 c4 10             	add    esp,0x10
c000a4d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4eb:	e8 f8 de 01 00       	call   c00283e8 <__muldf3>
c000a4f0:	5b                   	pop    ebx
c000a4f1:	5e                   	pop    esi
c000a4f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a502:	e8 b4 e7 01 00       	call   c0028cbb <__truncdfsf2>
c000a507:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a50e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a511:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a517:	5b                   	pop    ebx
c000a518:	5e                   	pop    esi
c000a519:	5f                   	pop    edi
c000a51a:	5d                   	pop    ebp
c000a51b:	c3                   	ret    

c000a51c <calc_output_hex>:
c000a51c:	55                   	push   ebp
c000a51d:	89 cd                	mov    ebp,ecx
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	89 c3                	mov    ebx,eax
c000a524:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a52a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a52d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a534:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a53b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a53f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a543:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a546:	e8 6f f3 ff ff       	call   c00098ba <int_to_fp>
c000a54b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a54e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a552:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a555:	29 c8                	sub    eax,ecx
c000a557:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a55b:	99                   	cdq    
c000a55c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a564:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a567:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a56f:	0f af f8             	imul   edi,eax
c000a572:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a575:	01 cf                	add    edi,ecx
c000a577:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a57b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a57e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a582:	0f af c2             	imul   eax,edx
c000a585:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a589:	29 c1                	sub    ecx,eax
c000a58b:	31 d2                	xor    edx,edx
c000a58d:	31 c0                	xor    eax,eax
c000a58f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a592:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a596:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a59a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a59e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5a6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5aa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ae:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5ba:	89 f8                	mov    eax,edi
c000a5bc:	e8 07 f3 ff ff       	call   c00098c8 <fp_to_double>
c000a5c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5c9:	89 f8                	mov    eax,edi
c000a5cb:	e8 ee f2 ff ff       	call   c00098be <fp_to_int>
c000a5d0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5d4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5d7:	52                   	push   edx
c000a5d8:	52                   	push   edx
c000a5d9:	51                   	push   ecx
c000a5da:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5de:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5e5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5e9:	e8 12 d1 01 00       	call   c0027700 <__subsf3>
c000a5ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5f1:	e8 e9 e7 01 00       	call   c0028ddf <__extendsfdf2>
c000a5f6:	83 c4 10             	add    esp,0x10
c000a5f9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5fd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a609:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a60d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a611:	e8 d2 dd 01 00       	call   c00283e8 <__muldf3>
c000a616:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a61a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a61e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a621:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a625:	e8 b5 e7 01 00       	call   c0028ddf <__extendsfdf2>
c000a62a:	83 c4 10             	add    esp,0x10
c000a62d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a631:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a635:	52                   	push   edx
c000a636:	50                   	push   eax
c000a637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a63b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a63f:	e8 27 d7 01 00       	call   c0027d6b <__adddf3>
c000a644:	59                   	pop    ecx
c000a645:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a649:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a64d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a653:	e8 87 e7 01 00       	call   c0028ddf <__extendsfdf2>
c000a658:	83 c4 10             	add    esp,0x10
c000a65b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a65f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a66f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a673:	e8 70 dd 01 00       	call   c00283e8 <__muldf3>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	52                   	push   edx
c000a684:	50                   	push   eax
c000a685:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a689:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68d:	e8 d9 d6 01 00       	call   c0027d6b <__adddf3>
c000a692:	59                   	pop    ecx
c000a693:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a697:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a69b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6a1:	e8 39 e7 01 00       	call   c0028ddf <__extendsfdf2>
c000a6a6:	83 c4 10             	add    esp,0x10
c000a6a9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ad:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6b9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6c1:	e8 22 dd 01 00       	call   c00283e8 <__muldf3>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	52                   	push   edx
c000a6d2:	50                   	push   eax
c000a6d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6db:	e8 8b d6 01 00       	call   c0027d6b <__adddf3>
c000a6e0:	59                   	pop    ecx
c000a6e1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6e5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6e9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6ef:	e8 eb e6 01 00       	call   c0028ddf <__extendsfdf2>
c000a6f4:	83 c4 10             	add    esp,0x10
c000a6f7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6fb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a707:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a70b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a70f:	e8 d4 dc 01 00       	call   c00283e8 <__muldf3>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	52                   	push   edx
c000a720:	50                   	push   eax
c000a721:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a725:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a729:	e8 3d d6 01 00       	call   c0027d6b <__adddf3>
c000a72e:	59                   	pop    ecx
c000a72f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a733:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a737:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a73d:	e8 9d e6 01 00       	call   c0028ddf <__extendsfdf2>
c000a742:	83 c4 10             	add    esp,0x10
c000a745:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a749:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a74d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a755:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a759:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75d:	e8 86 dc 01 00       	call   c00283e8 <__muldf3>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	52                   	push   edx
c000a76e:	50                   	push   eax
c000a76f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a773:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a777:	e8 ef d5 01 00       	call   c0027d6b <__adddf3>
c000a77c:	59                   	pop    ecx
c000a77d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a781:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a785:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a78b:	e8 4f e6 01 00       	call   c0028ddf <__extendsfdf2>
c000a790:	83 c4 10             	add    esp,0x10
c000a793:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a797:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a79b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ab:	e8 38 dc 01 00       	call   c00283e8 <__muldf3>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	83 c6 18             	add    esi,0x18
c000a7b6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ba:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7be:	52                   	push   edx
c000a7bf:	50                   	push   eax
c000a7c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c8:	e8 9e d5 01 00       	call   c0027d6b <__adddf3>
c000a7cd:	59                   	pop    ecx
c000a7ce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7d2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7d6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7dc:	e8 fe e5 01 00       	call   c0028ddf <__extendsfdf2>
c000a7e1:	83 c4 10             	add    esp,0x10
c000a7e4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fc:	e8 e7 db 01 00       	call   c00283e8 <__muldf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a808:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a80c:	52                   	push   edx
c000a80d:	50                   	push   eax
c000a80e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a812:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a816:	e8 50 d5 01 00       	call   c0027d6b <__adddf3>
c000a81b:	83 c4 10             	add    esp,0x10
c000a81e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a822:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a826:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a829:	0f 89 8b fd ff ff    	jns    c000a5ba <calc_output_hex+0x9e>
c000a82f:	31 f6                	xor    esi,esi
c000a831:	31 ff                	xor    edi,edi
c000a833:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a837:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a83a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a83e:	29 e9                	sub    ecx,ebp
c000a840:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a844:	29 c8                	sub    eax,ecx
c000a846:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a849:	99                   	cdq    
c000a84a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a84e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a851:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a855:	0f af e8             	imul   ebp,eax
c000a858:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a85c:	40                   	inc    eax
c000a85d:	01 cd                	add    ebp,ecx
c000a85f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a864:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a868:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a86c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a870:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a873:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a877:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a87b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a87f:	89 e8                	mov    eax,ebp
c000a881:	e8 42 f0 ff ff       	call   c00098c8 <fp_to_double>
c000a886:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a88a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a88e:	89 e8                	mov    eax,ebp
c000a890:	e8 29 f0 ff ff       	call   c00098be <fp_to_int>
c000a895:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a899:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a89c:	52                   	push   edx
c000a89d:	52                   	push   edx
c000a89e:	51                   	push   ecx
c000a89f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8a6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8ad:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8b1:	e8 4a ce 01 00       	call   c0027700 <__subsf3>
c000a8b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8b9:	e8 21 e5 01 00       	call   c0028ddf <__extendsfdf2>
c000a8be:	83 c4 10             	add    esp,0x10
c000a8c1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d9:	e8 0a db 01 00       	call   c00283e8 <__muldf3>
c000a8de:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8e9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8ec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8f0:	e8 ea e4 01 00       	call   c0028ddf <__extendsfdf2>
c000a8f5:	83 c4 10             	add    esp,0x10
c000a8f8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8fc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a900:	52                   	push   edx
c000a901:	50                   	push   eax
c000a902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a90a:	e8 5c d4 01 00       	call   c0027d6b <__adddf3>
c000a90f:	59                   	pop    ecx
c000a910:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a914:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a918:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a91e:	e8 bc e4 01 00       	call   c0028ddf <__extendsfdf2>
c000a923:	83 c4 10             	add    esp,0x10
c000a926:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a92a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a92e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a932:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a936:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a93a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a93e:	e8 a5 da 01 00       	call   c00283e8 <__muldf3>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	52                   	push   edx
c000a94f:	50                   	push   eax
c000a950:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a954:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a958:	e8 0e d4 01 00       	call   c0027d6b <__adddf3>
c000a95d:	59                   	pop    ecx
c000a95e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a962:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a966:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a96c:	e8 6e e4 01 00       	call   c0028ddf <__extendsfdf2>
c000a971:	83 c4 10             	add    esp,0x10
c000a974:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a978:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a97c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a980:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a984:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a988:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98c:	e8 57 da 01 00       	call   c00283e8 <__muldf3>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	52                   	push   edx
c000a99d:	50                   	push   eax
c000a99e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a6:	e8 c0 d3 01 00       	call   c0027d6b <__adddf3>
c000a9ab:	59                   	pop    ecx
c000a9ac:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9b0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9b4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9ba:	e8 20 e4 01 00       	call   c0028ddf <__extendsfdf2>
c000a9bf:	83 c4 10             	add    esp,0x10
c000a9c2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9d6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9da:	e8 09 da 01 00       	call   c00283e8 <__muldf3>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	52                   	push   edx
c000a9eb:	50                   	push   eax
c000a9ec:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f4:	e8 72 d3 01 00       	call   c0027d6b <__adddf3>
c000a9f9:	59                   	pop    ecx
c000a9fa:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9fe:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa02:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa08:	e8 d2 e3 01 00       	call   c0028ddf <__extendsfdf2>
c000aa0d:	83 c4 10             	add    esp,0x10
c000aa10:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa14:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa20:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa24:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa28:	e8 bb d9 01 00       	call   c00283e8 <__muldf3>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	52                   	push   edx
c000aa39:	50                   	push   eax
c000aa3a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa3e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa42:	e8 24 d3 01 00       	call   c0027d6b <__adddf3>
c000aa47:	59                   	pop    ecx
c000aa48:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa4c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa50:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa56:	e8 84 e3 01 00       	call   c0028ddf <__extendsfdf2>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa62:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa72:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa76:	e8 6d d9 01 00       	call   c00283e8 <__muldf3>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	83 eb 18             	sub    ebx,0x18
c000aa81:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa85:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa89:	52                   	push   edx
c000aa8a:	50                   	push   eax
c000aa8b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa8f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa93:	e8 d3 d2 01 00       	call   c0027d6b <__adddf3>
c000aa98:	59                   	pop    ecx
c000aa99:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa9d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aaa1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aaa7:	e8 33 e3 01 00       	call   c0028ddf <__extendsfdf2>
c000aaac:	83 c4 10             	add    esp,0x10
c000aaaf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aab3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aabb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aabf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac7:	e8 1c d9 01 00       	call   c00283e8 <__muldf3>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aad3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aad7:	52                   	push   edx
c000aad8:	50                   	push   eax
c000aad9:	57                   	push   edi
c000aada:	56                   	push   esi
c000aadb:	e8 8b d2 01 00       	call   c0027d6b <__adddf3>
c000aae0:	83 c4 10             	add    esp,0x10
c000aae3:	89 c6                	mov    esi,eax
c000aae5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aae8:	89 d7                	mov    edi,edx
c000aaea:	85 ed                	test   ebp,ebp
c000aaec:	0f 8f 8d fd ff ff    	jg     c000a87f <calc_output_hex+0x363>
c000aaf2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aaf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aafa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aafe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab02:	e8 64 d2 01 00       	call   c0027d6b <__adddf3>
c000ab07:	83 c4 10             	add    esp,0x10
c000ab0a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab21:	e8 c2 d8 01 00       	call   c00283e8 <__muldf3>
c000ab26:	59                   	pop    ecx
c000ab27:	5b                   	pop    ebx
c000ab28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab2c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab30:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab38:	e8 7e e1 01 00       	call   c0028cbb <__truncdfsf2>
c000ab3d:	83 c4 10             	add    esp,0x10
c000ab40:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab47:	89 03                	mov    DWORD PTR [ebx],eax
c000ab49:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab4d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab51:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab55:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab59:	e8 0d d2 01 00       	call   c0027d6b <__adddf3>
c000ab5e:	83 c4 10             	add    esp,0x10
c000ab61:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab64:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab78:	e8 6b d8 01 00       	call   c00283e8 <__muldf3>
c000ab7d:	5d                   	pop    ebp
c000ab7e:	59                   	pop    ecx
c000ab7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab87:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8f:	e8 27 e1 01 00       	call   c0028cbb <__truncdfsf2>
c000ab94:	83 c4 10             	add    esp,0x10
c000ab97:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab9e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000aba1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aba5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aba9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abb1:	e8 b5 d1 01 00       	call   c0027d6b <__adddf3>
c000abb6:	83 c4 10             	add    esp,0x10
c000abb9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd0:	e8 13 d8 01 00       	call   c00283e8 <__muldf3>
c000abd5:	5b                   	pop    ebx
c000abd6:	5d                   	pop    ebp
c000abd7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abdf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe7:	e8 cf e0 01 00       	call   c0028cbb <__truncdfsf2>
c000abec:	83 c4 10             	add    esp,0x10
c000abef:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abf6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abf9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abfd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac09:	e8 5d d1 01 00       	call   c0027d6b <__adddf3>
c000ac0e:	83 c4 10             	add    esp,0x10
c000ac11:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac14:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac18:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac28:	e8 bb d7 01 00       	call   c00283e8 <__muldf3>
c000ac2d:	59                   	pop    ecx
c000ac2e:	5b                   	pop    ebx
c000ac2f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac37:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3f:	e8 77 e0 01 00       	call   c0028cbb <__truncdfsf2>
c000ac44:	83 c4 10             	add    esp,0x10
c000ac47:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac4e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac51:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac55:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac61:	e8 05 d1 01 00       	call   c0027d6b <__adddf3>
c000ac66:	83 c4 10             	add    esp,0x10
c000ac69:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac6c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac80:	e8 63 d7 01 00       	call   c00283e8 <__muldf3>
c000ac85:	5d                   	pop    ebp
c000ac86:	59                   	pop    ecx
c000ac87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac8f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac93:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac97:	e8 1f e0 01 00       	call   c0028cbb <__truncdfsf2>
c000ac9c:	83 c4 10             	add    esp,0x10
c000ac9f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aca6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aca9:	57                   	push   edi
c000acaa:	56                   	push   esi
c000acab:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acaf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb3:	e8 b3 d0 01 00       	call   c0027d6b <__adddf3>
c000acb8:	83 c4 10             	add    esp,0x10
c000acbb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acc2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd2:	e8 11 d7 01 00       	call   c00283e8 <__muldf3>
c000acd7:	5b                   	pop    ebx
c000acd8:	5e                   	pop    esi
c000acd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acdd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ace1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace9:	e8 cd df 01 00       	call   c0028cbb <__truncdfsf2>
c000acee:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acf5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acf8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000acfe:	5b                   	pop    ebx
c000acff:	5e                   	pop    esi
c000ad00:	5f                   	pop    edi
c000ad01:	5d                   	pop    ebp
c000ad02:	c3                   	ret    

c000ad03 <sinc_reset>:
c000ad03:	56                   	push   esi
c000ad04:	53                   	push   ebx
c000ad05:	51                   	push   ecx
c000ad06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad0a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad0d:	85 db                	test   ebx,ebx
c000ad0f:	74 59                	je     c000ad6a <sinc_reset+0x67>
c000ad11:	31 d2                	xor    edx,edx
c000ad13:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad1a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad1d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad20:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad27:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad2e:	31 c0                	xor    eax,eax
c000ad30:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad36:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad39:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad3c:	52                   	push   edx
c000ad3d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad40:	c1 e0 02             	shl    eax,0x2
c000ad43:	50                   	push   eax
c000ad44:	6a 00                	push   0x0
c000ad46:	56                   	push   esi
c000ad47:	e8 20 5a ff ff       	call   c000076c <memset>
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad52:	c1 e0 02             	shl    eax,0x2
c000ad55:	50                   	push   eax
c000ad56:	68 aa 00 00 00       	push   0xaa
c000ad5b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad5e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad61:	50                   	push   eax
c000ad62:	e8 05 5a ff ff       	call   c000076c <memset>
c000ad67:	83 c4 10             	add    esp,0x10
c000ad6a:	58                   	pop    eax
c000ad6b:	5b                   	pop    ebx
c000ad6c:	5e                   	pop    esi
c000ad6d:	c3                   	ret    

c000ad6e <calc_output_multi>:
c000ad6e:	55                   	push   ebp
c000ad6f:	57                   	push   edi
c000ad70:	56                   	push   esi
c000ad71:	89 c6                	mov    esi,eax
c000ad73:	53                   	push   ebx
c000ad74:	83 ec 4c             	sub    esp,0x4c
c000ad77:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad7b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad7f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad83:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad87:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad8b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad8f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad93:	8d 46 44             	lea    eax,[esi+0x44]
c000ad96:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad99:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ada3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ada6:	e8 0f eb ff ff       	call   c00098ba <int_to_fp>
c000adab:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adae:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adb2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adb6:	99                   	cdq    
c000adb7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adbb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000adbf:	0f af d0             	imul   edx,eax
c000adc2:	0f af c3             	imul   eax,ebx
c000adc5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adc9:	29 c1                	sub    ecx,eax
c000adcb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adcf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000add3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adda:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adde:	57                   	push   edi
c000addf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ade3:	6a 00                	push   0x0
c000ade5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ade9:	e8 7e 59 ff ff       	call   c000076c <memset>
c000adee:	83 c4 10             	add    esp,0x10
c000adf1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adf5:	89 df                	mov    edi,ebx
c000adf7:	e8 cc ea ff ff       	call   c00098c8 <fp_to_double>
c000adfc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae08:	e8 b1 ea ff ff       	call   c00098be <fp_to_int>
c000ae0d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae10:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae13:	51                   	push   ecx
c000ae14:	51                   	push   ecx
c000ae15:	55                   	push   ebp
c000ae16:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae1a:	e8 e1 c8 01 00       	call   c0027700 <__subsf3>
c000ae1f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae22:	e8 b8 df 01 00       	call   c0028ddf <__extendsfdf2>
c000ae27:	83 c4 10             	add    esp,0x10
c000ae2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae3e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae42:	e8 a1 d5 01 00       	call   c00283e8 <__muldf3>
c000ae47:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae4e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae52:	e8 88 df 01 00       	call   c0028ddf <__extendsfdf2>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae62:	52                   	push   edx
c000ae63:	50                   	push   eax
c000ae64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6c:	e8 fa ce 01 00       	call   c0027d6b <__adddf3>
c000ae71:	83 c4 10             	add    esp,0x10
c000ae74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae7c:	89 f8                	mov    eax,edi
c000ae7e:	b9 08 00 00 00       	mov    ecx,0x8
c000ae83:	99                   	cdq    
c000ae84:	f7 f9                	idiv   ecx
c000ae86:	4a                   	dec    edx
c000ae87:	83 fa 06             	cmp    edx,0x6
c000ae8a:	77 07                	ja     c000ae93 <calc_output_multi+0x125>
c000ae8c:	ff 24 95 e4 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd591c]
c000ae93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae96:	4f                   	dec    edi
c000ae97:	83 ec 0c             	sub    esp,0xc
c000ae9a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aea1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aea8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeac:	e8 2e df 01 00       	call   c0028ddf <__extendsfdf2>
c000aeb1:	83 c4 10             	add    esp,0x10
c000aeb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aebc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aecc:	e8 17 d5 01 00       	call   c00283e8 <__muldf3>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	52                   	push   edx
c000aedd:	50                   	push   eax
c000aede:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aee1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aee4:	e8 82 ce 01 00       	call   c0027d6b <__adddf3>
c000aee9:	83 c4 10             	add    esp,0x10
c000aeec:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeef:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aef2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef5:	4f                   	dec    edi
c000aef6:	83 ec 0c             	sub    esp,0xc
c000aef9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aefc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af00:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af07:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af0b:	e8 cf de 01 00       	call   c0028ddf <__extendsfdf2>
c000af10:	83 c4 10             	add    esp,0x10
c000af13:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af17:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af23:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af27:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af2b:	e8 b8 d4 01 00       	call   c00283e8 <__muldf3>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	52                   	push   edx
c000af3c:	50                   	push   eax
c000af3d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af40:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af43:	e8 23 ce 01 00       	call   c0027d6b <__adddf3>
c000af48:	83 c4 10             	add    esp,0x10
c000af4b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af4e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af51:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af54:	4f                   	dec    edi
c000af55:	83 ec 0c             	sub    esp,0xc
c000af58:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af5f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af66:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af6a:	e8 70 de 01 00       	call   c0028ddf <__extendsfdf2>
c000af6f:	83 c4 10             	add    esp,0x10
c000af72:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af76:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af82:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af8a:	e8 59 d4 01 00       	call   c00283e8 <__muldf3>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	52                   	push   edx
c000af9b:	50                   	push   eax
c000af9c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af9f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afa2:	e8 c4 cd 01 00       	call   c0027d6b <__adddf3>
c000afa7:	83 c4 10             	add    esp,0x10
c000afaa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afb0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afb3:	4f                   	dec    edi
c000afb4:	83 ec 0c             	sub    esp,0xc
c000afb7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afbe:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afc5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afc9:	e8 11 de 01 00       	call   c0028ddf <__extendsfdf2>
c000afce:	83 c4 10             	add    esp,0x10
c000afd1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afd5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afdd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afe5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afe9:	e8 fa d3 01 00       	call   c00283e8 <__muldf3>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	52                   	push   edx
c000affa:	50                   	push   eax
c000affb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000affe:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b001:	e8 65 cd 01 00       	call   c0027d6b <__adddf3>
c000b006:	83 c4 10             	add    esp,0x10
c000b009:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b00c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b00f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b012:	4f                   	dec    edi
c000b013:	83 ec 0c             	sub    esp,0xc
c000b016:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b019:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b01d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b024:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b028:	e8 b2 dd 01 00       	call   c0028ddf <__extendsfdf2>
c000b02d:	83 c4 10             	add    esp,0x10
c000b030:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b034:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b038:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b03c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b040:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b044:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b048:	e8 9b d3 01 00       	call   c00283e8 <__muldf3>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	52                   	push   edx
c000b059:	50                   	push   eax
c000b05a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b05d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b060:	e8 06 cd 01 00       	call   c0027d6b <__adddf3>
c000b065:	83 c4 10             	add    esp,0x10
c000b068:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b06b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b06e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b071:	4f                   	dec    edi
c000b072:	83 ec 0c             	sub    esp,0xc
c000b075:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b078:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b07c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b083:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b087:	e8 53 dd 01 00       	call   c0028ddf <__extendsfdf2>
c000b08c:	83 c4 10             	add    esp,0x10
c000b08f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b093:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b097:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a7:	e8 3c d3 01 00       	call   c00283e8 <__muldf3>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	52                   	push   edx
c000b0b8:	50                   	push   eax
c000b0b9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0bc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0bf:	e8 a7 cc 01 00       	call   c0027d6b <__adddf3>
c000b0c4:	83 c4 10             	add    esp,0x10
c000b0c7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ca:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0d0:	4f                   	dec    edi
c000b0d1:	83 ec 0c             	sub    esp,0xc
c000b0d4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0db:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0e2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0e6:	e8 f4 dc 01 00       	call   c0028ddf <__extendsfdf2>
c000b0eb:	83 c4 10             	add    esp,0x10
c000b0ee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fe:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b102:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b106:	e8 dd d2 01 00       	call   c00283e8 <__muldf3>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	52                   	push   edx
c000b117:	50                   	push   eax
c000b118:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b11b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b11e:	e8 48 cc 01 00       	call   c0027d6b <__adddf3>
c000b123:	83 c4 10             	add    esp,0x10
c000b126:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b129:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b12c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b12f:	4f                   	dec    edi
c000b130:	83 ec 0c             	sub    esp,0xc
c000b133:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b136:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b13a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b141:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b145:	e8 95 dc 01 00       	call   c0028ddf <__extendsfdf2>
c000b14a:	83 c4 10             	add    esp,0x10
c000b14d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b151:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b155:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b159:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b161:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b165:	e8 7e d2 01 00       	call   c00283e8 <__muldf3>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	52                   	push   edx
c000b176:	50                   	push   eax
c000b177:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b17a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b17d:	e8 e9 cb 01 00       	call   c0027d6b <__adddf3>
c000b182:	83 c4 10             	add    esp,0x10
c000b185:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b188:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b18b:	85 ff                	test   edi,edi
c000b18d:	0f 8f e9 fc ff ff    	jg     c000ae7c <calc_output_multi+0x10e>
c000b193:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b197:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b19b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b19f:	0f 89 4c fc ff ff    	jns    c000adf1 <calc_output_multi+0x83>
c000b1a5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1ad:	29 c8                	sub    eax,ecx
c000b1af:	99                   	cdq    
c000b1b0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1b8:	0f af d0             	imul   edx,eax
c000b1bb:	40                   	inc    eax
c000b1bc:	01 d1                	add    ecx,edx
c000b1be:	0f af c3             	imul   eax,ebx
c000b1c1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1c5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1cc:	55                   	push   ebp
c000b1cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d1:	6a 00                	push   0x0
c000b1d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d7:	e8 90 55 ff ff       	call   c000076c <memset>
c000b1dc:	83 c4 10             	add    esp,0x10
c000b1df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1e3:	e8 e0 e6 ff ff       	call   c00098c8 <fp_to_double>
c000b1e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1f4:	e8 c5 e6 ff ff       	call   c00098be <fp_to_int>
c000b1f9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1fc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1ff:	57                   	push   edi
c000b200:	57                   	push   edi
c000b201:	89 df                	mov    edi,ebx
c000b203:	55                   	push   ebp
c000b204:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b208:	e8 f3 c4 01 00       	call   c0027700 <__subsf3>
c000b20d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b210:	e8 ca db 01 00       	call   c0028ddf <__extendsfdf2>
c000b215:	83 c4 10             	add    esp,0x10
c000b218:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b220:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b228:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b22c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b230:	e8 b3 d1 01 00       	call   c00283e8 <__muldf3>
c000b235:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b238:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b23c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b240:	e8 9a db 01 00       	call   c0028ddf <__extendsfdf2>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b24c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b250:	52                   	push   edx
c000b251:	50                   	push   eax
c000b252:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b25a:	e8 0c cb 01 00       	call   c0027d6b <__adddf3>
c000b25f:	83 c4 10             	add    esp,0x10
c000b262:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b266:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b26a:	89 f8                	mov    eax,edi
c000b26c:	b9 08 00 00 00       	mov    ecx,0x8
c000b271:	99                   	cdq    
c000b272:	f7 f9                	idiv   ecx
c000b274:	4a                   	dec    edx
c000b275:	83 fa 06             	cmp    edx,0x6
c000b278:	77 07                	ja     c000b281 <calc_output_multi+0x513>
c000b27a:	ff 24 95 00 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5900]
c000b281:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b285:	4f                   	dec    edi
c000b286:	83 ec 0c             	sub    esp,0xc
c000b289:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b290:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b297:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29b:	e8 3f db 01 00       	call   c0028ddf <__extendsfdf2>
c000b2a0:	83 c4 10             	add    esp,0x10
c000b2a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bb:	e8 28 d1 01 00       	call   c00283e8 <__muldf3>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	52                   	push   edx
c000b2cc:	50                   	push   eax
c000b2cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d3:	e8 93 ca 01 00       	call   c0027d6b <__adddf3>
c000b2d8:	83 c4 10             	add    esp,0x10
c000b2db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e5:	4f                   	dec    edi
c000b2e6:	83 ec 0c             	sub    esp,0xc
c000b2e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fb:	e8 df da 01 00       	call   c0028ddf <__extendsfdf2>
c000b300:	83 c4 10             	add    esp,0x10
c000b303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b307:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b30f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b313:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b317:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31b:	e8 c8 d0 01 00       	call   c00283e8 <__muldf3>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	52                   	push   edx
c000b32c:	50                   	push   eax
c000b32d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b330:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b333:	e8 33 ca 01 00       	call   c0027d6b <__adddf3>
c000b338:	83 c4 10             	add    esp,0x10
c000b33b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b33e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b341:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b345:	4f                   	dec    edi
c000b346:	83 ec 0c             	sub    esp,0xc
c000b349:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b34c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b350:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b357:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b35b:	e8 7f da 01 00       	call   c0028ddf <__extendsfdf2>
c000b360:	83 c4 10             	add    esp,0x10
c000b363:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b367:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b36f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b373:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b377:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b37b:	e8 68 d0 01 00       	call   c00283e8 <__muldf3>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	52                   	push   edx
c000b38c:	50                   	push   eax
c000b38d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b390:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b393:	e8 d3 c9 01 00       	call   c0027d6b <__adddf3>
c000b398:	83 c4 10             	add    esp,0x10
c000b39b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b39e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a5:	4f                   	dec    edi
c000b3a6:	83 ec 0c             	sub    esp,0xc
c000b3a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3bb:	e8 1f da 01 00       	call   c0028ddf <__extendsfdf2>
c000b3c0:	83 c4 10             	add    esp,0x10
c000b3c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3db:	e8 08 d0 01 00       	call   c00283e8 <__muldf3>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	52                   	push   edx
c000b3ec:	50                   	push   eax
c000b3ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3f3:	e8 73 c9 01 00       	call   c0027d6b <__adddf3>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b401:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b405:	4f                   	dec    edi
c000b406:	83 ec 0c             	sub    esp,0xc
c000b409:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b40c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b410:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b417:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b41b:	e8 bf d9 01 00       	call   c0028ddf <__extendsfdf2>
c000b420:	83 c4 10             	add    esp,0x10
c000b423:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b427:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b42b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b433:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b43b:	e8 a8 cf 01 00       	call   c00283e8 <__muldf3>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	52                   	push   edx
c000b44c:	50                   	push   eax
c000b44d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b450:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b453:	e8 13 c9 01 00       	call   c0027d6b <__adddf3>
c000b458:	83 c4 10             	add    esp,0x10
c000b45b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b45e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b465:	4f                   	dec    edi
c000b466:	83 ec 0c             	sub    esp,0xc
c000b469:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b46c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b470:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b477:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b47b:	e8 5f d9 01 00       	call   c0028ddf <__extendsfdf2>
c000b480:	83 c4 10             	add    esp,0x10
c000b483:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b487:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b493:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b497:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b49b:	e8 48 cf 01 00       	call   c00283e8 <__muldf3>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	52                   	push   edx
c000b4ac:	50                   	push   eax
c000b4ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4b3:	e8 b3 c8 01 00       	call   c0027d6b <__adddf3>
c000b4b8:	83 c4 10             	add    esp,0x10
c000b4bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c5:	4f                   	dec    edi
c000b4c6:	83 ec 0c             	sub    esp,0xc
c000b4c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4db:	e8 ff d8 01 00       	call   c0028ddf <__extendsfdf2>
c000b4e0:	83 c4 10             	add    esp,0x10
c000b4e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4fb:	e8 e8 ce 01 00       	call   c00283e8 <__muldf3>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	52                   	push   edx
c000b50c:	50                   	push   eax
c000b50d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b510:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b513:	e8 53 c8 01 00       	call   c0027d6b <__adddf3>
c000b518:	83 c4 10             	add    esp,0x10
c000b51b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b51e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b521:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b525:	4f                   	dec    edi
c000b526:	83 ec 0c             	sub    esp,0xc
c000b529:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b52c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b530:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b537:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b53b:	e8 9f d8 01 00       	call   c0028ddf <__extendsfdf2>
c000b540:	83 c4 10             	add    esp,0x10
c000b543:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b547:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b54b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b54f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b553:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b557:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b55b:	e8 88 ce 01 00       	call   c00283e8 <__muldf3>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	52                   	push   edx
c000b56c:	50                   	push   eax
c000b56d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b570:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b573:	e8 f3 c7 01 00       	call   c0027d6b <__adddf3>
c000b578:	83 c4 10             	add    esp,0x10
c000b57b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b57e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b581:	85 ff                	test   edi,edi
c000b583:	0f 8f e1 fc ff ff    	jg     c000b26a <calc_output_multi+0x4fc>
c000b589:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b58d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b591:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b595:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b59a:	0f 8f 3f fc ff ff    	jg     c000b1df <calc_output_multi+0x471>
c000b5a0:	be 08 00 00 00       	mov    esi,0x8
c000b5a5:	89 d8                	mov    eax,ebx
c000b5a7:	99                   	cdq    
c000b5a8:	f7 fe                	idiv   esi
c000b5aa:	4a                   	dec    edx
c000b5ab:	83 fa 06             	cmp    edx,0x6
c000b5ae:	77 07                	ja     c000b5b7 <calc_output_multi+0x849>
c000b5b0:	ff 24 95 1c a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58e4]
c000b5b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5bb:	4b                   	dec    ebx
c000b5bc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5cb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ce:	e8 98 c7 01 00       	call   c0027d6b <__adddf3>
c000b5d3:	83 c4 10             	add    esp,0x10
c000b5d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ee:	e8 f5 cd 01 00       	call   c00283e8 <__muldf3>
c000b5f3:	5d                   	pop    ebp
c000b5f4:	59                   	pop    ecx
c000b5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b605:	e8 b1 d6 01 00       	call   c0028cbb <__truncdfsf2>
c000b60a:	83 c4 10             	add    esp,0x10
c000b60d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b611:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b618:	4b                   	dec    ebx
c000b619:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b624:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b628:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b62b:	e8 3b c7 01 00       	call   c0027d6b <__adddf3>
c000b630:	83 c4 10             	add    esp,0x10
c000b633:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b63b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b643:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64b:	e8 98 cd 01 00       	call   c00283e8 <__muldf3>
c000b650:	59                   	pop    ecx
c000b651:	5f                   	pop    edi
c000b652:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b662:	e8 54 d6 01 00       	call   c0028cbb <__truncdfsf2>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b675:	4b                   	dec    ebx
c000b676:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b67a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b67d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b681:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b685:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b688:	e8 de c6 01 00       	call   c0027d6b <__adddf3>
c000b68d:	83 c4 10             	add    esp,0x10
c000b690:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b694:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b698:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b69c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a8:	e8 3b cd 01 00       	call   c00283e8 <__muldf3>
c000b6ad:	5f                   	pop    edi
c000b6ae:	5d                   	pop    ebp
c000b6af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6bf:	e8 f7 d5 01 00       	call   c0028cbb <__truncdfsf2>
c000b6c4:	83 c4 10             	add    esp,0x10
c000b6c7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6cb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6d2:	4b                   	dec    ebx
c000b6d3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6d7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6de:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6e2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6e5:	e8 81 c6 01 00       	call   c0027d6b <__adddf3>
c000b6ea:	83 c4 10             	add    esp,0x10
c000b6ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b701:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b705:	e8 de cc 01 00       	call   c00283e8 <__muldf3>
c000b70a:	5d                   	pop    ebp
c000b70b:	59                   	pop    ecx
c000b70c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b710:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b714:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b718:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71c:	e8 9a d5 01 00       	call   c0028cbb <__truncdfsf2>
c000b721:	83 c4 10             	add    esp,0x10
c000b724:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b728:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b72b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b72f:	4b                   	dec    ebx
c000b730:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b734:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b737:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b73b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b73f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b742:	e8 24 c6 01 00       	call   c0027d6b <__adddf3>
c000b747:	83 c4 10             	add    esp,0x10
c000b74a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b74e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b762:	e8 81 cc 01 00       	call   c00283e8 <__muldf3>
c000b767:	59                   	pop    ecx
c000b768:	5f                   	pop    edi
c000b769:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b76d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b779:	e8 3d d5 01 00       	call   c0028cbb <__truncdfsf2>
c000b77e:	83 c4 10             	add    esp,0x10
c000b781:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b785:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b78c:	4b                   	dec    ebx
c000b78d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b791:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b798:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b79c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b79f:	e8 c7 c5 01 00       	call   c0027d6b <__adddf3>
c000b7a4:	83 c4 10             	add    esp,0x10
c000b7a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bf:	e8 24 cc 01 00       	call   c00283e8 <__muldf3>
c000b7c4:	5f                   	pop    edi
c000b7c5:	5d                   	pop    ebp
c000b7c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d6:	e8 e0 d4 01 00       	call   c0028cbb <__truncdfsf2>
c000b7db:	83 c4 10             	add    esp,0x10
c000b7de:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7e2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e9:	4b                   	dec    ebx
c000b7ea:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7ee:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7f5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7f9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7fc:	e8 6a c5 01 00       	call   c0027d6b <__adddf3>
c000b801:	83 c4 10             	add    esp,0x10
c000b804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b808:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b814:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81c:	e8 c7 cb 01 00       	call   c00283e8 <__muldf3>
c000b821:	5d                   	pop    ebp
c000b822:	59                   	pop    ecx
c000b823:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b827:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b82b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b82f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b833:	e8 83 d4 01 00       	call   c0028cbb <__truncdfsf2>
c000b838:	83 c4 10             	add    esp,0x10
c000b83b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b83f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b846:	4b                   	dec    ebx
c000b847:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b84b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b84e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b852:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b856:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b859:	e8 0d c5 01 00       	call   c0027d6b <__adddf3>
c000b85e:	83 c4 10             	add    esp,0x10
c000b861:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b865:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b875:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b879:	e8 6a cb 01 00       	call   c00283e8 <__muldf3>
c000b87e:	59                   	pop    ecx
c000b87f:	5f                   	pop    edi
c000b880:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b884:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b888:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b88c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b890:	e8 26 d4 01 00       	call   c0028cbb <__truncdfsf2>
c000b895:	83 c4 10             	add    esp,0x10
c000b898:	85 db                	test   ebx,ebx
c000b89a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b89e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8a1:	0f 8f fe fc ff ff    	jg     c000b5a5 <calc_output_multi+0x837>
c000b8a7:	83 c4 4c             	add    esp,0x4c
c000b8aa:	5b                   	pop    ebx
c000b8ab:	5e                   	pop    esi
c000b8ac:	5f                   	pop    edi
c000b8ad:	5d                   	pop    ebp
c000b8ae:	c3                   	ret    

c000b8af <double_to_fp>:
c000b8af:	83 ec 0c             	sub    esp,0xc
c000b8b2:	68 00 00 b0 40       	push   0x40b00000
c000b8b7:	6a 00                	push   0x0
c000b8b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c1:	e8 22 cb 01 00       	call   c00283e8 <__muldf3>
c000b8c6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ca:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ce:	83 c4 1c             	add    esp,0x1c
c000b8d1:	e9 9a d5 01 00       	jmp    c0028e70 <lrint>

c000b8d6 <prepare_data>:
c000b8d6:	55                   	push   ebp
c000b8d7:	57                   	push   edi
c000b8d8:	56                   	push   esi
c000b8d9:	53                   	push   ebx
c000b8da:	83 ec 1c             	sub    esp,0x1c
c000b8dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8e5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8e9:	0f 89 57 01 00 00    	jns    c000ba46 <prepare_data+0x170>
c000b8ef:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8f2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8f5:	85 d2                	test   edx,edx
c000b8f7:	75 0d                	jne    c000b906 <prepare_data+0x30>
c000b8f9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8fc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8ff:	29 d0                	sub    eax,edx
c000b901:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b904:	eb 44                	jmp    c000b94a <prepare_data+0x74>
c000b906:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b909:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b90c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b90f:	39 c1                	cmp    ecx,eax
c000b911:	7d 04                	jge    c000b917 <prepare_data+0x41>
c000b913:	29 d0                	sub    eax,edx
c000b915:	eb 2d                	jmp    c000b944 <prepare_data+0x6e>
c000b917:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b91d:	29 d7                	sub    edi,edx
c000b91f:	01 f7                	add    edi,esi
c000b921:	51                   	push   ecx
c000b922:	29 f2                	sub    edx,esi
c000b924:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b92b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b92e:	51                   	push   ecx
c000b92f:	52                   	push   edx
c000b930:	50                   	push   eax
c000b931:	e8 6e 4d ff ff       	call   c00006a4 <memmove>
c000b936:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b939:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b93c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b93f:	29 f0                	sub    eax,esi
c000b941:	83 c4 10             	add    esp,0x10
c000b944:	29 f0                	sub    eax,esi
c000b946:	79 02                	jns    c000b94a <prepare_data+0x74>
c000b948:	31 c0                	xor    eax,eax
c000b94a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b94d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b950:	29 ef                	sub    edi,ebp
c000b952:	39 c7                	cmp    edi,eax
c000b954:	7e 02                	jle    c000b958 <prepare_data+0x82>
c000b956:	89 c7                	mov    edi,eax
c000b958:	89 f8                	mov    eax,edi
c000b95a:	99                   	cdq    
c000b95b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b95e:	b8 15 00 00 00       	mov    eax,0x15
c000b963:	29 d7                	sub    edi,edx
c000b965:	0f 88 dd 00 00 00    	js     c000ba48 <prepare_data+0x172>
c000b96b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b96e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b971:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b974:	0f 8f ce 00 00 00    	jg     c000ba48 <prepare_data+0x172>
c000b97a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b980:	50                   	push   eax
c000b981:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b988:	50                   	push   eax
c000b989:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b98d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b98f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b992:	50                   	push   eax
c000b993:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b996:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b99a:	50                   	push   eax
c000b99b:	e8 c3 4c ff ff       	call   c0000663 <memcpy>
c000b9a0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9a3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9a6:	01 fd                	add    ebp,edi
c000b9a8:	01 f9                	add    ecx,edi
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9b0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9b3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9ba:	0f 85 86 00 00 00    	jne    c000ba46 <prepare_data+0x170>
c000b9c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9c3:	89 e8                	mov    eax,ebp
c000b9c5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9c8:	29 c8                	sub    eax,ecx
c000b9ca:	39 f8                	cmp    eax,edi
c000b9cc:	7d 78                	jge    c000ba46 <prepare_data+0x170>
c000b9ce:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9d2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9d6:	74 6e                	je     c000ba46 <prepare_data+0x170>
c000b9d8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9db:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9df:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9e2:	29 ef                	sub    edi,ebp
c000b9e4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9e8:	7c 29                	jl     c000ba13 <prepare_data+0x13d>
c000b9ea:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9ed:	29 f1                	sub    ecx,esi
c000b9ef:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9f6:	55                   	push   ebp
c000b9f7:	50                   	push   eax
c000b9f8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9fb:	50                   	push   eax
c000b9fc:	52                   	push   edx
c000b9fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba01:	e8 9e 4c ff ff       	call   c00006a4 <memmove>
c000ba06:	83 c4 10             	add    esp,0x10
c000ba09:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba0c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba13:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba16:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba19:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba1c:	83 c6 05             	add    esi,0x5
c000ba1f:	78 07                	js     c000ba28 <prepare_data+0x152>
c000ba21:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba24:	39 cf                	cmp    edi,ecx
c000ba26:	7e 04                	jle    c000ba2c <prepare_data+0x156>
c000ba28:	89 ce                	mov    esi,ecx
c000ba2a:	29 c6                	sub    esi,eax
c000ba2c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba2f:	51                   	push   ecx
c000ba30:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba37:	51                   	push   ecx
c000ba38:	6a 00                	push   0x0
c000ba3a:	50                   	push   eax
c000ba3b:	e8 2c 4d ff ff       	call   c000076c <memset>
c000ba40:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba43:	83 c4 10             	add    esp,0x10
c000ba46:	31 c0                	xor    eax,eax
c000ba48:	83 c4 1c             	add    esp,0x1c
c000ba4b:	5b                   	pop    ebx
c000ba4c:	5e                   	pop    esi
c000ba4d:	5f                   	pop    edi
c000ba4e:	5d                   	pop    ebp
c000ba4f:	c3                   	ret    

c000ba50 <sinc_multichan_vari_process>:
c000ba50:	55                   	push   ebp
c000ba51:	ba 05 00 00 00       	mov    edx,0x5
c000ba56:	57                   	push   edi
c000ba57:	56                   	push   esi
c000ba58:	53                   	push   ebx
c000ba59:	83 ec 4c             	sub    esp,0x4c
c000ba5c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba60:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba64:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba67:	85 db                	test   ebx,ebx
c000ba69:	0f 84 9b 06 00 00    	je     c000c10a <sinc_multichan_vari_process+0x6ba>
c000ba6f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba72:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba75:	0f af c5             	imul   eax,ebp
c000ba78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba7b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba7e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba85:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba8c:	0f af c5             	imul   eax,ebp
c000ba8f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba92:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba95:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba97:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba9f:	68 00 00 70 3f       	push   0x3f700000
c000baa4:	6a 00                	push   0x0
c000baa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baae:	e8 04 d2 01 00       	call   c0028cb7 <__ltdf2>
c000bab3:	83 c4 10             	add    esp,0x10
c000bab6:	ba 16 00 00 00       	mov    edx,0x16
c000babb:	85 c0                	test   eax,eax
c000babd:	0f 88 47 06 00 00    	js     c000c10a <sinc_multichan_vari_process+0x6ba>
c000bac3:	68 00 00 70 40       	push   0x40700000
c000bac8:	6a 00                	push   0x0
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad2:	e8 c2 d1 01 00       	call   c0028c99 <__gtdf2>
c000bad7:	83 c4 10             	add    esp,0x10
c000bada:	ba 16 00 00 00       	mov    edx,0x16
c000badf:	85 c0                	test   eax,eax
c000bae1:	0f 8f 23 06 00 00    	jg     c000c10a <sinc_multichan_vari_process+0x6ba>
c000bae7:	83 ec 0c             	sub    esp,0xc
c000baea:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000baed:	e8 59 cf 01 00       	call   c0028a4b <__floatsidf>
c000baf2:	83 c4 10             	add    esp,0x10
c000baf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000baf9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bafd:	68 00 00 00 40       	push   0x40000000
c000bb02:	6a 00                	push   0x0
c000bb04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0c:	e8 5a c2 01 00       	call   c0027d6b <__adddf3>
c000bb11:	59                   	pop    ecx
c000bb12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb16:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb1a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb1d:	e8 29 cf 01 00       	call   c0028a4b <__floatsidf>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	52                   	push   edx
c000bb2e:	50                   	push   eax
c000bb2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb37:	e8 90 cb 01 00       	call   c00286cc <__divdf3>
c000bb3c:	83 c4 10             	add    esp,0x10
c000bb3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb47:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb4a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb65:	e8 2f d1 01 00       	call   c0028c99 <__gtdf2>
c000bb6a:	83 c4 10             	add    esp,0x10
c000bb6d:	85 c0                	test   eax,eax
c000bb6f:	7e 2d                	jle    c000bb9e <sinc_multichan_vari_process+0x14e>
c000bb71:	68 00 00 f0 3f       	push   0x3ff00000
c000bb76:	6a 00                	push   0x0
c000bb78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb80:	e8 32 d1 01 00       	call   c0028cb7 <__ltdf2>
c000bb85:	83 c4 10             	add    esp,0x10
c000bb88:	85 c0                	test   eax,eax
c000bb8a:	79 4d                	jns    c000bbd9 <sinc_multichan_vari_process+0x189>
c000bb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb9c:	eb 1b                	jmp    c000bbb9 <sinc_multichan_vari_process+0x169>
c000bb9e:	68 00 00 f0 3f       	push   0x3ff00000
c000bba3:	6a 00                	push   0x0
c000bba5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbad:	e8 05 d1 01 00       	call   c0028cb7 <__ltdf2>
c000bbb2:	83 c4 10             	add    esp,0x10
c000bbb5:	85 c0                	test   eax,eax
c000bbb7:	79 20                	jns    c000bbd9 <sinc_multichan_vari_process+0x189>
c000bbb9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 fe ca 01 00       	call   c00286cc <__divdf3>
c000bbce:	83 c4 10             	add    esp,0x10
c000bbd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbd9:	50                   	push   eax
c000bbda:	50                   	push   eax
c000bbdb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbdf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe3:	e8 88 d2 01 00       	call   c0028e70 <lrint>
c000bbe8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbeb:	40                   	inc    eax
c000bbec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbf0:	0f af c5             	imul   eax,ebp
c000bbf3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbf7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbfa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbfe:	58                   	pop    eax
c000bbff:	5a                   	pop    edx
c000bc00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc08:	e8 63 d2 01 00       	call   c0028e70 <lrint>
c000bc0d:	83 ec 0c             	sub    esp,0xc
c000bc10:	50                   	push   eax
c000bc11:	e8 35 ce 01 00       	call   c0028a4b <__floatsidf>
c000bc16:	83 c4 10             	add    esp,0x10
c000bc19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc21:	52                   	push   edx
c000bc22:	50                   	push   eax
c000bc23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc2b:	e8 8c c7 01 00       	call   c00283bc <__subdf3>
c000bc30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc34:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc38:	83 c4 20             	add    esp,0x20
c000bc3b:	6a 00                	push   0x0
c000bc3d:	6a 00                	push   0x0
c000bc3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc47:	e8 6b d0 01 00       	call   c0028cb7 <__ltdf2>
c000bc4c:	83 c4 10             	add    esp,0x10
c000bc4f:	85 c0                	test   eax,eax
c000bc51:	79 1f                	jns    c000bc72 <sinc_multichan_vari_process+0x222>
c000bc53:	68 00 00 f0 3f       	push   0x3ff00000
c000bc58:	6a 00                	push   0x0
c000bc5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc62:	e8 04 c1 01 00       	call   c0027d6b <__adddf3>
c000bc67:	83 c4 10             	add    esp,0x10
c000bc6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc72:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc75:	83 ec 10             	sub    esp,0x10
c000bc78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc7c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc8f:	e8 28 c7 01 00       	call   c00283bc <__subdf3>
c000bc94:	83 c4 18             	add    esp,0x18
c000bc97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc9f:	52                   	push   edx
c000bca0:	50                   	push   eax
c000bca1:	e8 ca d1 01 00       	call   c0028e70 <lrint>
c000bca6:	0f af e8             	imul   ebp,eax
c000bca9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcad:	01 e8                	add    eax,ebp
c000bcaf:	99                   	cdq    
c000bcb0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcb3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcb6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bcc3:	6a 00                	push   0x0
c000bcc5:	e8 02 ca 01 00       	call   c00286cc <__divdf3>
c000bcca:	83 c4 10             	add    esp,0x10
c000bccd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcda:	68 23 42 92 0c       	push   0xc924223
c000bcdf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce7:	e8 7f c0 01 00       	call   c0027d6b <__adddf3>
c000bcec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcf0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcf4:	83 c4 20             	add    esp,0x20
c000bcf7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcff:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd07:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd0a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd0d:	7d 50                	jge    c000bd5f <sinc_multichan_vari_process+0x30f>
c000bd0f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd12:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd15:	01 c8                	add    eax,ecx
c000bd17:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd1a:	99                   	cdq    
c000bd1b:	f7 f9                	idiv   ecx
c000bd1d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd21:	7d 0c                	jge    c000bd2f <sinc_multichan_vari_process+0x2df>
c000bd23:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd26:	85 ed                	test   ebp,ebp
c000bd28:	79 6b                	jns    c000bd95 <sinc_multichan_vari_process+0x345>
c000bd2a:	e9 e6 00 00 00       	jmp    c000be15 <sinc_multichan_vari_process+0x3c5>
c000bd2f:	50                   	push   eax
c000bd30:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd34:	57                   	push   edi
c000bd35:	53                   	push   ebx
c000bd36:	e8 9b fb ff ff       	call   c000b8d6 <prepare_data>
c000bd3b:	83 c4 10             	add    esp,0x10
c000bd3e:	89 c2                	mov    edx,eax
c000bd40:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd43:	85 c0                	test   eax,eax
c000bd45:	0f 85 bf 03 00 00    	jne    c000c10a <sinc_multichan_vari_process+0x6ba>
c000bd4b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd4e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd51:	01 c8                	add    eax,ecx
c000bd53:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd56:	99                   	cdq    
c000bd57:	f7 f9                	idiv   ecx
c000bd59:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd5d:	7c c4                	jl     c000bd23 <sinc_multichan_vari_process+0x2d3>
c000bd5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd67:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd6a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd75:	89 06                	mov    DWORD PTR [esi],eax
c000bd77:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd7a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd7d:	99                   	cdq    
c000bd7e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd81:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd84:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd87:	99                   	cdq    
c000bd88:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd8b:	31 d2                	xor    edx,edx
c000bd8d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd90:	e9 75 03 00 00       	jmp    c000c10a <sinc_multichan_vari_process+0x6ba>
c000bd95:	83 ec 0c             	sub    esp,0xc
c000bd98:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd9b:	e8 ab cc 01 00       	call   c0028a4b <__floatsidf>
c000bda0:	83 c4 10             	add    esp,0x10
c000bda3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bda7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbb:	e8 ab bf 01 00       	call   c0027d6b <__adddf3>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 8b bf 01 00       	call   c0027d6b <__adddf3>
c000bde0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bde3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bde7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdeb:	e8 5b cc 01 00       	call   c0028a4b <__floatsidf>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdf7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdfb:	52                   	push   edx
c000bdfc:	50                   	push   eax
c000bdfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be05:	e8 ab ce 01 00       	call   c0028cb5 <__gedf2>
c000be0a:	83 c4 10             	add    esp,0x10
c000be0d:	85 c0                	test   eax,eax
c000be0f:	0f 89 4a ff ff ff    	jns    c000bd5f <sinc_multichan_vari_process+0x30f>
c000be15:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be19:	0f 8e ed 00 00 00    	jle    c000bf0c <sinc_multichan_vari_process+0x4bc>
c000be1f:	83 ec 10             	sub    esp,0x10
c000be22:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be25:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be28:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be2b:	ff 36                	push   DWORD PTR [esi]
c000be2d:	e8 8a c5 01 00       	call   c00283bc <__subdf3>
c000be32:	83 c4 18             	add    esp,0x18
c000be35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be3d:	52                   	push   edx
c000be3e:	50                   	push   eax
c000be3f:	e8 0c d0 01 00       	call   c0028e50 <fabs>
c000be44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be54:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be61:	e8 33 ce 01 00       	call   c0028c99 <__gtdf2>
c000be66:	83 c4 10             	add    esp,0x10
c000be69:	85 c0                	test   eax,eax
c000be6b:	0f 8e 9b 00 00 00    	jle    c000bf0c <sinc_multichan_vari_process+0x4bc>
c000be71:	8b 06                	mov    eax,DWORD PTR [esi]
c000be73:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be7a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be7e:	52                   	push   edx
c000be7f:	50                   	push   eax
c000be80:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be83:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be86:	e8 31 c5 01 00       	call   c00283bc <__subdf3>
c000be8b:	59                   	pop    ecx
c000be8c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be90:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be94:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be97:	e8 af cb 01 00       	call   c0028a4b <__floatsidf>
c000be9c:	83 c4 10             	add    esp,0x10
c000be9f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bea3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea7:	52                   	push   edx
c000bea8:	50                   	push   eax
c000bea9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bead:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beb1:	e8 32 c5 01 00       	call   c00283e8 <__muldf3>
c000beb6:	5d                   	pop    ebp
c000beb7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bebb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bebf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bec2:	e8 84 cb 01 00       	call   c0028a4b <__floatsidf>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bece:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bed2:	52                   	push   edx
c000bed3:	50                   	push   eax
c000bed4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bedc:	e8 eb c7 01 00       	call   c00286cc <__divdf3>
c000bee1:	83 c4 10             	add    esp,0x10
c000bee4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bee8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 6a be 01 00       	call   c0027d6b <__adddf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf08:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf0c:	83 ec 0c             	sub    esp,0xc
c000bf0f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf12:	e8 34 cb 01 00       	call   c0028a4b <__floatsidf>
c000bf17:	83 c4 10             	add    esp,0x10
c000bf1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf32:	e8 80 cd 01 00       	call   c0028cb7 <__ltdf2>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	85 c0                	test   eax,eax
c000bf3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf44:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf48:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf4c:	78 10                	js     c000bf5e <sinc_multichan_vari_process+0x50e>
c000bf4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf56:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf5a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf5e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf62:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf6a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf6e:	e8 75 c4 01 00       	call   c00283e8 <__muldf3>
c000bf73:	59                   	pop    ecx
c000bf74:	5d                   	pop    ebp
c000bf75:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf85:	e8 25 f9 ff ff       	call   c000b8af <double_to_fp>
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	89 c5                	mov    ebp,eax
c000bf90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf94:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9c:	e8 47 c4 01 00       	call   c00283e8 <__muldf3>
c000bfa1:	83 c4 18             	add    esp,0x18
c000bfa4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfa8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfac:	52                   	push   edx
c000bfad:	50                   	push   eax
c000bfae:	e8 fc f8 ff ff       	call   c000b8af <double_to_fp>
c000bfb3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfb6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfba:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfbd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfc0:	50                   	push   eax
c000bfc1:	50                   	push   eax
c000bfc2:	50                   	push   eax
c000bfc3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfc6:	e8 80 ca 01 00       	call   c0028a4b <__floatsidf>
c000bfcb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfcf:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfd3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfd7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfdb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfdf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe3:	e8 e4 c6 01 00       	call   c00286cc <__divdf3>
c000bfe8:	83 c4 1c             	add    esp,0x1c
c000bfeb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfef:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bff3:	52                   	push   edx
c000bff4:	89 ea                	mov    edx,ebp
c000bff6:	50                   	push   eax
c000bff7:	89 d8                	mov    eax,ebx
c000bff9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bffc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c000:	e8 69 ed ff ff       	call   c000ad6e <calc_output_multi>
c000c005:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c008:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c00b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c00f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c013:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c017:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c01b:	e8 ac c6 01 00       	call   c00286cc <__divdf3>
c000c020:	83 c4 10             	add    esp,0x10
c000c023:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c027:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c02b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c02f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c033:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c037:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c03b:	e8 2b bd 01 00       	call   c0027d6b <__adddf3>
c000c040:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c044:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c048:	83 c4 28             	add    esp,0x28
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	e8 18 ce 01 00       	call   c0028e70 <lrint>
c000c058:	83 ec 0c             	sub    esp,0xc
c000c05b:	50                   	push   eax
c000c05c:	e8 ea c9 01 00       	call   c0028a4b <__floatsidf>
c000c061:	83 c4 10             	add    esp,0x10
c000c064:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c068:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06c:	52                   	push   edx
c000c06d:	50                   	push   eax
c000c06e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c072:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c076:	e8 41 c3 01 00       	call   c00283bc <__subdf3>
c000c07b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c07f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c083:	83 c4 20             	add    esp,0x20
c000c086:	6a 00                	push   0x0
c000c088:	6a 00                	push   0x0
c000c08a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c08e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c092:	e8 20 cc 01 00       	call   c0028cb7 <__ltdf2>
c000c097:	83 c4 10             	add    esp,0x10
c000c09a:	85 c0                	test   eax,eax
c000c09c:	79 20                	jns    c000c0be <sinc_multichan_vari_process+0x66e>
c000c09e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	e8 b8 bc 01 00       	call   c0027d6b <__adddf3>
c000c0b3:	83 c4 10             	add    esp,0x10
c000c0b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0be:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0c1:	83 ec 10             	sub    esp,0x10
c000c0c4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0c8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0db:	e8 dc c2 01 00       	call   c00283bc <__subdf3>
c000c0e0:	83 c4 18             	add    esp,0x18
c000c0e3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0eb:	52                   	push   edx
c000c0ec:	50                   	push   eax
c000c0ed:	e8 7e cd 01 00       	call   c0028e70 <lrint>
c000c0f2:	0f af e8             	imul   ebp,eax
c000c0f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0f9:	83 c4 10             	add    esp,0x10
c000c0fc:	01 e8                	add    eax,ebp
c000c0fe:	99                   	cdq    
c000c0ff:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c102:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c105:	e9 fd fb ff ff       	jmp    c000bd07 <sinc_multichan_vari_process+0x2b7>
c000c10a:	83 c4 4c             	add    esp,0x4c
c000c10d:	89 d0                	mov    eax,edx
c000c10f:	5b                   	pop    ebx
c000c110:	5e                   	pop    esi
c000c111:	5f                   	pop    edi
c000c112:	5d                   	pop    ebp
c000c113:	c3                   	ret    

c000c114 <sinc_hex_vari_process>:
c000c114:	55                   	push   ebp
c000c115:	ba 05 00 00 00       	mov    edx,0x5
c000c11a:	57                   	push   edi
c000c11b:	56                   	push   esi
c000c11c:	53                   	push   ebx
c000c11d:	83 ec 4c             	sub    esp,0x4c
c000c120:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c124:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c128:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c12b:	85 db                	test   ebx,ebx
c000c12d:	0f 84 9c 06 00 00    	je     c000c7cf <sinc_hex_vari_process+0x6bb>
c000c133:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c136:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c139:	0f af c7             	imul   eax,edi
c000c13c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c13f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c142:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c149:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c150:	0f af c7             	imul   eax,edi
c000c153:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c156:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c159:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c15c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c160:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c164:	68 00 00 70 3f       	push   0x3f700000
c000c169:	6a 00                	push   0x0
c000c16b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c16f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c173:	e8 3f cb 01 00       	call   c0028cb7 <__ltdf2>
c000c178:	83 c4 10             	add    esp,0x10
c000c17b:	ba 16 00 00 00       	mov    edx,0x16
c000c180:	85 c0                	test   eax,eax
c000c182:	0f 88 47 06 00 00    	js     c000c7cf <sinc_hex_vari_process+0x6bb>
c000c188:	68 00 00 70 40       	push   0x40700000
c000c18d:	6a 00                	push   0x0
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c197:	e8 fd ca 01 00       	call   c0028c99 <__gtdf2>
c000c19c:	83 c4 10             	add    esp,0x10
c000c19f:	ba 16 00 00 00       	mov    edx,0x16
c000c1a4:	85 c0                	test   eax,eax
c000c1a6:	0f 8f 23 06 00 00    	jg     c000c7cf <sinc_hex_vari_process+0x6bb>
c000c1ac:	83 ec 0c             	sub    esp,0xc
c000c1af:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1b2:	e8 94 c8 01 00       	call   c0028a4b <__floatsidf>
c000c1b7:	83 c4 10             	add    esp,0x10
c000c1ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1c2:	68 00 00 00 40       	push   0x40000000
c000c1c7:	6a 00                	push   0x0
c000c1c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1d1:	e8 95 bb 01 00       	call   c0027d6b <__adddf3>
c000c1d6:	59                   	pop    ecx
c000c1d7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1db:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e2:	e8 64 c8 01 00       	call   c0028a4b <__floatsidf>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	52                   	push   edx
c000c1f3:	50                   	push   eax
c000c1f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fc:	e8 cb c4 01 00       	call   c00286cc <__divdf3>
c000c201:	83 c4 10             	add    esp,0x10
c000c204:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c208:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c20c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c20f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c212:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c216:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c21a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c222:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c226:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22a:	e8 6a ca 01 00       	call   c0028c99 <__gtdf2>
c000c22f:	83 c4 10             	add    esp,0x10
c000c232:	85 c0                	test   eax,eax
c000c234:	7e 2d                	jle    c000c263 <sinc_hex_vari_process+0x14f>
c000c236:	68 00 00 f0 3f       	push   0x3ff00000
c000c23b:	6a 00                	push   0x0
c000c23d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c245:	e8 6d ca 01 00       	call   c0028cb7 <__ltdf2>
c000c24a:	83 c4 10             	add    esp,0x10
c000c24d:	85 c0                	test   eax,eax
c000c24f:	79 4d                	jns    c000c29e <sinc_hex_vari_process+0x18a>
c000c251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c255:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c259:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c261:	eb 1b                	jmp    c000c27e <sinc_hex_vari_process+0x16a>
c000c263:	68 00 00 f0 3f       	push   0x3ff00000
c000c268:	6a 00                	push   0x0
c000c26a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c272:	e8 40 ca 01 00       	call   c0028cb7 <__ltdf2>
c000c277:	83 c4 10             	add    esp,0x10
c000c27a:	85 c0                	test   eax,eax
c000c27c:	79 20                	jns    c000c29e <sinc_hex_vari_process+0x18a>
c000c27e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c282:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 39 c4 01 00       	call   c00286cc <__divdf3>
c000c293:	83 c4 10             	add    esp,0x10
c000c296:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c29a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c29e:	50                   	push   eax
c000c29f:	50                   	push   eax
c000c2a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a8:	e8 c3 cb 01 00       	call   c0028e70 <lrint>
c000c2ad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2b0:	40                   	inc    eax
c000c2b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2b5:	0f af c7             	imul   eax,edi
c000c2b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c3:	58                   	pop    eax
c000c2c4:	5a                   	pop    edx
c000c2c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2cd:	e8 9e cb 01 00       	call   c0028e70 <lrint>
c000c2d2:	83 ec 0c             	sub    esp,0xc
c000c2d5:	50                   	push   eax
c000c2d6:	e8 70 c7 01 00       	call   c0028a4b <__floatsidf>
c000c2db:	83 c4 10             	add    esp,0x10
c000c2de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2e2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e6:	52                   	push   edx
c000c2e7:	50                   	push   eax
c000c2e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f0:	e8 c7 c0 01 00       	call   c00283bc <__subdf3>
c000c2f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2fd:	83 c4 20             	add    esp,0x20
c000c300:	6a 00                	push   0x0
c000c302:	6a 00                	push   0x0
c000c304:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c308:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30c:	e8 a6 c9 01 00       	call   c0028cb7 <__ltdf2>
c000c311:	83 c4 10             	add    esp,0x10
c000c314:	85 c0                	test   eax,eax
c000c316:	79 1f                	jns    c000c337 <sinc_hex_vari_process+0x223>
c000c318:	68 00 00 f0 3f       	push   0x3ff00000
c000c31d:	6a 00                	push   0x0
c000c31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c323:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c327:	e8 3f ba 01 00       	call   c0027d6b <__adddf3>
c000c32c:	83 c4 10             	add    esp,0x10
c000c32f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c333:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c337:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c33a:	83 ec 10             	sub    esp,0x10
c000c33d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c341:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c350:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c354:	e8 63 c0 01 00       	call   c00283bc <__subdf3>
c000c359:	83 c4 18             	add    esp,0x18
c000c35c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c360:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c364:	52                   	push   edx
c000c365:	50                   	push   eax
c000c366:	e8 05 cb 01 00       	call   c0028e70 <lrint>
c000c36b:	0f af f8             	imul   edi,eax
c000c36e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c372:	01 f8                	add    eax,edi
c000c374:	99                   	cdq    
c000c375:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c378:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c37b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c37f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c383:	68 00 00 f0 3f       	push   0x3ff00000
c000c388:	6a 00                	push   0x0
c000c38a:	e8 3d c3 01 00       	call   c00286cc <__divdf3>
c000c38f:	83 c4 10             	add    esp,0x10
c000c392:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c396:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c39a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c39f:	68 23 42 92 0c       	push   0xc924223
c000c3a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ac:	e8 ba b9 01 00       	call   c0027d6b <__adddf3>
c000c3b1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3b5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3b9:	83 c4 20             	add    esp,0x20
c000c3bc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3c4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3cf:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3d2:	7d 50                	jge    c000c424 <sinc_hex_vari_process+0x310>
c000c3d4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3d7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3da:	01 c8                	add    eax,ecx
c000c3dc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3df:	99                   	cdq    
c000c3e0:	f7 f9                	idiv   ecx
c000c3e2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3e6:	7d 0c                	jge    c000c3f4 <sinc_hex_vari_process+0x2e0>
c000c3e8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3eb:	85 ff                	test   edi,edi
c000c3ed:	79 6c                	jns    c000c45b <sinc_hex_vari_process+0x347>
c000c3ef:	e9 e7 00 00 00       	jmp    c000c4db <sinc_hex_vari_process+0x3c7>
c000c3f4:	50                   	push   eax
c000c3f5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3f9:	56                   	push   esi
c000c3fa:	53                   	push   ebx
c000c3fb:	e8 d6 f4 ff ff       	call   c000b8d6 <prepare_data>
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	89 c2                	mov    edx,eax
c000c405:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c408:	85 c0                	test   eax,eax
c000c40a:	0f 85 bf 03 00 00    	jne    c000c7cf <sinc_hex_vari_process+0x6bb>
c000c410:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c413:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c416:	01 c8                	add    eax,ecx
c000c418:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c41b:	99                   	cdq    
c000c41c:	f7 f9                	idiv   ecx
c000c41e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c422:	7c c4                	jl     c000c3e8 <sinc_hex_vari_process+0x2d4>
c000c424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c428:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c42c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c42f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c43a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c43d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c440:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c443:	99                   	cdq    
c000c444:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c447:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c44a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c44d:	99                   	cdq    
c000c44e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c451:	31 d2                	xor    edx,edx
c000c453:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c456:	e9 74 03 00 00       	jmp    c000c7cf <sinc_hex_vari_process+0x6bb>
c000c45b:	83 ec 0c             	sub    esp,0xc
c000c45e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c461:	e8 e5 c5 01 00       	call   c0028a4b <__floatsidf>
c000c466:	83 c4 10             	add    esp,0x10
c000c469:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c46d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c471:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c475:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c479:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c47d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c481:	e8 e5 b8 01 00       	call   c0027d6b <__adddf3>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c495:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 c5 b8 01 00       	call   c0027d6b <__adddf3>
c000c4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b1:	e8 95 c5 01 00       	call   c0028a4b <__floatsidf>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c1:	52                   	push   edx
c000c4c2:	50                   	push   eax
c000c4c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4cb:	e8 e5 c7 01 00       	call   c0028cb5 <__gedf2>
c000c4d0:	83 c4 10             	add    esp,0x10
c000c4d3:	85 c0                	test   eax,eax
c000c4d5:	0f 89 49 ff ff ff    	jns    c000c424 <sinc_hex_vari_process+0x310>
c000c4db:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4df:	0f 8e ef 00 00 00    	jle    c000c5d4 <sinc_hex_vari_process+0x4c0>
c000c4e5:	83 ec 10             	sub    esp,0x10
c000c4e8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4eb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4ee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4f1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4f4:	e8 c3 be 01 00       	call   c00283bc <__subdf3>
c000c4f9:	83 c4 18             	add    esp,0x18
c000c4fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c500:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c504:	52                   	push   edx
c000c505:	50                   	push   eax
c000c506:	e8 45 c9 01 00       	call   c0028e50 <fabs>
c000c50b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c50f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c51b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c520:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c524:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c528:	e8 6c c7 01 00       	call   c0028c99 <__gtdf2>
c000c52d:	83 c4 10             	add    esp,0x10
c000c530:	85 c0                	test   eax,eax
c000c532:	0f 8e 9c 00 00 00    	jle    c000c5d4 <sinc_hex_vari_process+0x4c0>
c000c538:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c53b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c53e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c542:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c546:	52                   	push   edx
c000c547:	50                   	push   eax
c000c548:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c54b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c54e:	e8 69 be 01 00       	call   c00283bc <__subdf3>
c000c553:	59                   	pop    ecx
c000c554:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c558:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c55c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c55f:	e8 e7 c4 01 00       	call   c0028a4b <__floatsidf>
c000c564:	83 c4 10             	add    esp,0x10
c000c567:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c56b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c56f:	52                   	push   edx
c000c570:	50                   	push   eax
c000c571:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c575:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c579:	e8 6a be 01 00       	call   c00283e8 <__muldf3>
c000c57e:	5f                   	pop    edi
c000c57f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c583:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c587:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c58a:	e8 bc c4 01 00       	call   c0028a4b <__floatsidf>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c596:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c59a:	52                   	push   edx
c000c59b:	50                   	push   eax
c000c59c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a4:	e8 23 c1 01 00       	call   c00286cc <__divdf3>
c000c5a9:	83 c4 10             	add    esp,0x10
c000c5ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 a2 b7 01 00       	call   c0027d6b <__adddf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5d4:	83 ec 0c             	sub    esp,0xc
c000c5d7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5da:	e8 6c c4 01 00       	call   c0028a4b <__floatsidf>
c000c5df:	83 c4 10             	add    esp,0x10
c000c5e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fa:	e8 b8 c6 01 00       	call   c0028cb7 <__ltdf2>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	85 c0                	test   eax,eax
c000c604:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c608:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c60c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c610:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c614:	78 10                	js     c000c626 <sinc_hex_vari_process+0x512>
c000c616:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c61a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c61e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c622:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c626:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c632:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c636:	e8 ad bd 01 00       	call   c00283e8 <__muldf3>
c000c63b:	59                   	pop    ecx
c000c63c:	5f                   	pop    edi
c000c63d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c641:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c645:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64d:	e8 5d f2 ff ff       	call   c000b8af <double_to_fp>
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	89 c7                	mov    edi,eax
c000c658:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c660:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c664:	e8 7f bd 01 00       	call   c00283e8 <__muldf3>
c000c669:	83 c4 18             	add    esp,0x18
c000c66c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c670:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c674:	52                   	push   edx
c000c675:	50                   	push   eax
c000c676:	e8 34 f2 ff ff       	call   c000b8af <double_to_fp>
c000c67b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c67e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c682:	83 c4 0c             	add    esp,0xc
c000c685:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c688:	8d 04 90             	lea    eax,[eax+edx*4]
c000c68b:	50                   	push   eax
c000c68c:	50                   	push   eax
c000c68d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c690:	e8 b6 c3 01 00       	call   c0028a4b <__floatsidf>
c000c695:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c699:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c69d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ad:	e8 1a c0 01 00       	call   c00286cc <__divdf3>
c000c6b2:	83 c4 18             	add    esp,0x18
c000c6b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6bd:	52                   	push   edx
c000c6be:	89 fa                	mov    edx,edi
c000c6c0:	50                   	push   eax
c000c6c1:	89 d8                	mov    eax,ebx
c000c6c3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6c7:	e8 50 de ff ff       	call   c000a51c <calc_output_hex>
c000c6cc:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6e0:	e8 e7 bf 01 00       	call   c00286cc <__divdf3>
c000c6e5:	83 c4 10             	add    esp,0x10
c000c6e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6ec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6fc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c700:	e8 66 b6 01 00       	call   c0027d6b <__adddf3>
c000c705:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c709:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c70d:	83 c4 18             	add    esp,0x18
c000c710:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c714:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c718:	e8 53 c7 01 00       	call   c0028e70 <lrint>
c000c71d:	83 ec 0c             	sub    esp,0xc
c000c720:	50                   	push   eax
c000c721:	e8 25 c3 01 00       	call   c0028a4b <__floatsidf>
c000c726:	83 c4 10             	add    esp,0x10
c000c729:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c731:	52                   	push   edx
c000c732:	50                   	push   eax
c000c733:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c737:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c73b:	e8 7c bc 01 00       	call   c00283bc <__subdf3>
c000c740:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c744:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c748:	83 c4 20             	add    esp,0x20
c000c74b:	6a 00                	push   0x0
c000c74d:	6a 00                	push   0x0
c000c74f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c753:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c757:	e8 5b c5 01 00       	call   c0028cb7 <__ltdf2>
c000c75c:	83 c4 10             	add    esp,0x10
c000c75f:	85 c0                	test   eax,eax
c000c761:	79 20                	jns    c000c783 <sinc_hex_vari_process+0x66f>
c000c763:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c76b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	e8 f3 b5 01 00       	call   c0027d6b <__adddf3>
c000c778:	83 c4 10             	add    esp,0x10
c000c77b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c77f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c783:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c786:	83 ec 10             	sub    esp,0x10
c000c789:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c78d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c794:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c798:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c79c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7a0:	e8 17 bc 01 00       	call   c00283bc <__subdf3>
c000c7a5:	83 c4 18             	add    esp,0x18
c000c7a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b0:	52                   	push   edx
c000c7b1:	50                   	push   eax
c000c7b2:	e8 b9 c6 01 00       	call   c0028e70 <lrint>
c000c7b7:	0f af f8             	imul   edi,eax
c000c7ba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7be:	83 c4 10             	add    esp,0x10
c000c7c1:	01 f8                	add    eax,edi
c000c7c3:	99                   	cdq    
c000c7c4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7c7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ca:	e9 fd fb ff ff       	jmp    c000c3cc <sinc_hex_vari_process+0x2b8>
c000c7cf:	83 c4 4c             	add    esp,0x4c
c000c7d2:	89 d0                	mov    eax,edx
c000c7d4:	5b                   	pop    ebx
c000c7d5:	5e                   	pop    esi
c000c7d6:	5f                   	pop    edi
c000c7d7:	5d                   	pop    ebp
c000c7d8:	c3                   	ret    

c000c7d9 <sinc_quad_vari_process>:
c000c7d9:	55                   	push   ebp
c000c7da:	ba 05 00 00 00       	mov    edx,0x5
c000c7df:	57                   	push   edi
c000c7e0:	56                   	push   esi
c000c7e1:	53                   	push   ebx
c000c7e2:	83 ec 4c             	sub    esp,0x4c
c000c7e5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7e9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7ed:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7f0:	85 db                	test   ebx,ebx
c000c7f2:	0f 84 9c 06 00 00    	je     c000ce94 <sinc_quad_vari_process+0x6bb>
c000c7f8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7fb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7fe:	0f af c7             	imul   eax,edi
c000c801:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c804:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c807:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c80e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c815:	0f af c7             	imul   eax,edi
c000c818:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c81b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c81e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c821:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c825:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c829:	68 00 00 70 3f       	push   0x3f700000
c000c82e:	6a 00                	push   0x0
c000c830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c838:	e8 7a c4 01 00       	call   c0028cb7 <__ltdf2>
c000c83d:	83 c4 10             	add    esp,0x10
c000c840:	ba 16 00 00 00       	mov    edx,0x16
c000c845:	85 c0                	test   eax,eax
c000c847:	0f 88 47 06 00 00    	js     c000ce94 <sinc_quad_vari_process+0x6bb>
c000c84d:	68 00 00 70 40       	push   0x40700000
c000c852:	6a 00                	push   0x0
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85c:	e8 38 c4 01 00       	call   c0028c99 <__gtdf2>
c000c861:	83 c4 10             	add    esp,0x10
c000c864:	ba 16 00 00 00       	mov    edx,0x16
c000c869:	85 c0                	test   eax,eax
c000c86b:	0f 8f 23 06 00 00    	jg     c000ce94 <sinc_quad_vari_process+0x6bb>
c000c871:	83 ec 0c             	sub    esp,0xc
c000c874:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c877:	e8 cf c1 01 00       	call   c0028a4b <__floatsidf>
c000c87c:	83 c4 10             	add    esp,0x10
c000c87f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c883:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c887:	68 00 00 00 40       	push   0x40000000
c000c88c:	6a 00                	push   0x0
c000c88e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c892:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c896:	e8 d0 b4 01 00       	call   c0027d6b <__adddf3>
c000c89b:	59                   	pop    ecx
c000c89c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8a0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8a4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8a7:	e8 9f c1 01 00       	call   c0028a4b <__floatsidf>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	52                   	push   edx
c000c8b8:	50                   	push   eax
c000c8b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c1:	e8 06 be 01 00       	call   c00286cc <__divdf3>
c000c8c6:	83 c4 10             	add    esp,0x10
c000c8c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8d4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ef:	e8 a5 c3 01 00       	call   c0028c99 <__gtdf2>
c000c8f4:	83 c4 10             	add    esp,0x10
c000c8f7:	85 c0                	test   eax,eax
c000c8f9:	7e 2d                	jle    c000c928 <sinc_quad_vari_process+0x14f>
c000c8fb:	68 00 00 f0 3f       	push   0x3ff00000
c000c900:	6a 00                	push   0x0
c000c902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c90a:	e8 a8 c3 01 00       	call   c0028cb7 <__ltdf2>
c000c90f:	83 c4 10             	add    esp,0x10
c000c912:	85 c0                	test   eax,eax
c000c914:	79 4d                	jns    c000c963 <sinc_quad_vari_process+0x18a>
c000c916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c91e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c922:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c926:	eb 1b                	jmp    c000c943 <sinc_quad_vari_process+0x16a>
c000c928:	68 00 00 f0 3f       	push   0x3ff00000
c000c92d:	6a 00                	push   0x0
c000c92f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c937:	e8 7b c3 01 00       	call   c0028cb7 <__ltdf2>
c000c93c:	83 c4 10             	add    esp,0x10
c000c93f:	85 c0                	test   eax,eax
c000c941:	79 20                	jns    c000c963 <sinc_quad_vari_process+0x18a>
c000c943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c947:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 74 bd 01 00       	call   c00286cc <__divdf3>
c000c958:	83 c4 10             	add    esp,0x10
c000c95b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c95f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c963:	50                   	push   eax
c000c964:	50                   	push   eax
c000c965:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c969:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96d:	e8 fe c4 01 00       	call   c0028e70 <lrint>
c000c972:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c975:	40                   	inc    eax
c000c976:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c97a:	0f af c7             	imul   eax,edi
c000c97d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c984:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c988:	58                   	pop    eax
c000c989:	5a                   	pop    edx
c000c98a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c992:	e8 d9 c4 01 00       	call   c0028e70 <lrint>
c000c997:	83 ec 0c             	sub    esp,0xc
c000c99a:	50                   	push   eax
c000c99b:	e8 ab c0 01 00       	call   c0028a4b <__floatsidf>
c000c9a0:	83 c4 10             	add    esp,0x10
c000c9a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9ab:	52                   	push   edx
c000c9ac:	50                   	push   eax
c000c9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b5:	e8 02 ba 01 00       	call   c00283bc <__subdf3>
c000c9ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c2:	83 c4 20             	add    esp,0x20
c000c9c5:	6a 00                	push   0x0
c000c9c7:	6a 00                	push   0x0
c000c9c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d1:	e8 e1 c2 01 00       	call   c0028cb7 <__ltdf2>
c000c9d6:	83 c4 10             	add    esp,0x10
c000c9d9:	85 c0                	test   eax,eax
c000c9db:	79 1f                	jns    c000c9fc <sinc_quad_vari_process+0x223>
c000c9dd:	68 00 00 f0 3f       	push   0x3ff00000
c000c9e2:	6a 00                	push   0x0
c000c9e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ec:	e8 7a b3 01 00       	call   c0027d6b <__adddf3>
c000c9f1:	83 c4 10             	add    esp,0x10
c000c9f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9fc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9ff:	83 ec 10             	sub    esp,0x10
c000ca02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca19:	e8 9e b9 01 00       	call   c00283bc <__subdf3>
c000ca1e:	83 c4 18             	add    esp,0x18
c000ca21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca29:	52                   	push   edx
c000ca2a:	50                   	push   eax
c000ca2b:	e8 40 c4 01 00       	call   c0028e70 <lrint>
c000ca30:	0f af f8             	imul   edi,eax
c000ca33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca37:	01 f8                	add    eax,edi
c000ca39:	99                   	cdq    
c000ca3a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca3d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca48:	68 00 00 f0 3f       	push   0x3ff00000
c000ca4d:	6a 00                	push   0x0
c000ca4f:	e8 78 bc 01 00       	call   c00286cc <__divdf3>
c000ca54:	83 c4 10             	add    esp,0x10
c000ca57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca5f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca64:	68 23 42 92 0c       	push   0xc924223
c000ca69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca71:	e8 f5 b2 01 00       	call   c0027d6b <__adddf3>
c000ca76:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca7a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca7e:	83 c4 20             	add    esp,0x20
c000ca81:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca89:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca91:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca94:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca97:	7d 50                	jge    c000cae9 <sinc_quad_vari_process+0x310>
c000ca99:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca9c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca9f:	01 c8                	add    eax,ecx
c000caa1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000caa4:	99                   	cdq    
c000caa5:	f7 f9                	idiv   ecx
c000caa7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caab:	7d 0c                	jge    c000cab9 <sinc_quad_vari_process+0x2e0>
c000caad:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cab0:	85 ff                	test   edi,edi
c000cab2:	79 6c                	jns    c000cb20 <sinc_quad_vari_process+0x347>
c000cab4:	e9 e7 00 00 00       	jmp    c000cba0 <sinc_quad_vari_process+0x3c7>
c000cab9:	50                   	push   eax
c000caba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cabe:	56                   	push   esi
c000cabf:	53                   	push   ebx
c000cac0:	e8 11 ee ff ff       	call   c000b8d6 <prepare_data>
c000cac5:	83 c4 10             	add    esp,0x10
c000cac8:	89 c2                	mov    edx,eax
c000caca:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cacd:	85 c0                	test   eax,eax
c000cacf:	0f 85 bf 03 00 00    	jne    c000ce94 <sinc_quad_vari_process+0x6bb>
c000cad5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cad8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cadb:	01 c8                	add    eax,ecx
c000cadd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cae0:	99                   	cdq    
c000cae1:	f7 f9                	idiv   ecx
c000cae3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cae7:	7c c4                	jl     c000caad <sinc_quad_vari_process+0x2d4>
c000cae9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caf1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000caf4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000caf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000caff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb02:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb05:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb08:	99                   	cdq    
c000cb09:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb0c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb0f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb12:	99                   	cdq    
c000cb13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb16:	31 d2                	xor    edx,edx
c000cb18:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb1b:	e9 74 03 00 00       	jmp    c000ce94 <sinc_quad_vari_process+0x6bb>
c000cb20:	83 ec 0c             	sub    esp,0xc
c000cb23:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb26:	e8 20 bf 01 00       	call   c0028a4b <__floatsidf>
c000cb2b:	83 c4 10             	add    esp,0x10
c000cb2e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb32:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb42:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb46:	e8 20 b2 01 00       	call   c0027d6b <__adddf3>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 00 b2 01 00       	call   c0027d6b <__adddf3>
c000cb6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb6e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb72:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb76:	e8 d0 be 01 00       	call   c0028a4b <__floatsidf>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb86:	52                   	push   edx
c000cb87:	50                   	push   eax
c000cb88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb90:	e8 20 c1 01 00       	call   c0028cb5 <__gedf2>
c000cb95:	83 c4 10             	add    esp,0x10
c000cb98:	85 c0                	test   eax,eax
c000cb9a:	0f 89 49 ff ff ff    	jns    c000cae9 <sinc_quad_vari_process+0x310>
c000cba0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cba4:	0f 8e ef 00 00 00    	jle    c000cc99 <sinc_quad_vari_process+0x4c0>
c000cbaa:	83 ec 10             	sub    esp,0x10
c000cbad:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbb0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbb3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbb9:	e8 fe b7 01 00       	call   c00283bc <__subdf3>
c000cbbe:	83 c4 18             	add    esp,0x18
c000cbc1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbc9:	52                   	push   edx
c000cbca:	50                   	push   eax
c000cbcb:	e8 80 c2 01 00       	call   c0028e50 <fabs>
c000cbd0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbd4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbe0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbe5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbed:	e8 a7 c0 01 00       	call   c0028c99 <__gtdf2>
c000cbf2:	83 c4 10             	add    esp,0x10
c000cbf5:	85 c0                	test   eax,eax
c000cbf7:	0f 8e 9c 00 00 00    	jle    c000cc99 <sinc_quad_vari_process+0x4c0>
c000cbfd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc07:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc0b:	52                   	push   edx
c000cc0c:	50                   	push   eax
c000cc0d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc10:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc13:	e8 a4 b7 01 00       	call   c00283bc <__subdf3>
c000cc18:	59                   	pop    ecx
c000cc19:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc1d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc21:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc24:	e8 22 be 01 00       	call   c0028a4b <__floatsidf>
c000cc29:	83 c4 10             	add    esp,0x10
c000cc2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc34:	52                   	push   edx
c000cc35:	50                   	push   eax
c000cc36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3e:	e8 a5 b7 01 00       	call   c00283e8 <__muldf3>
c000cc43:	5f                   	pop    edi
c000cc44:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc48:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc4c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc4f:	e8 f7 bd 01 00       	call   c0028a4b <__floatsidf>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc5f:	52                   	push   edx
c000cc60:	50                   	push   eax
c000cc61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc69:	e8 5e ba 01 00       	call   c00286cc <__divdf3>
c000cc6e:	83 c4 10             	add    esp,0x10
c000cc71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc75:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 dd b0 01 00       	call   c0027d6b <__adddf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc95:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc99:	83 ec 0c             	sub    esp,0xc
c000cc9c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc9f:	e8 a7 bd 01 00       	call   c0028a4b <__floatsidf>
c000cca4:	83 c4 10             	add    esp,0x10
c000cca7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbf:	e8 f3 bf 01 00       	call   c0028cb7 <__ltdf2>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	85 c0                	test   eax,eax
c000ccc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cccd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccd1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccd5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccd9:	78 10                	js     c000cceb <sinc_quad_vari_process+0x512>
c000ccdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cce3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cce7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cceb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccfb:	e8 e8 b6 01 00       	call   c00283e8 <__muldf3>
c000cd00:	59                   	pop    ecx
c000cd01:	5f                   	pop    edi
c000cd02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd06:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd12:	e8 98 eb ff ff       	call   c000b8af <double_to_fp>
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	89 c7                	mov    edi,eax
c000cd1d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd25:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd29:	e8 ba b6 01 00       	call   c00283e8 <__muldf3>
c000cd2e:	83 c4 18             	add    esp,0x18
c000cd31:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd35:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd39:	52                   	push   edx
c000cd3a:	50                   	push   eax
c000cd3b:	e8 6f eb ff ff       	call   c000b8af <double_to_fp>
c000cd40:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd43:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd47:	83 c4 0c             	add    esp,0xc
c000cd4a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd4d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd50:	50                   	push   eax
c000cd51:	50                   	push   eax
c000cd52:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd55:	e8 f1 bc 01 00       	call   c0028a4b <__floatsidf>
c000cd5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd5e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd72:	e8 55 b9 01 00       	call   c00286cc <__divdf3>
c000cd77:	83 c4 18             	add    esp,0x18
c000cd7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd82:	52                   	push   edx
c000cd83:	89 fa                	mov    edx,edi
c000cd85:	50                   	push   eax
c000cd86:	89 d8                	mov    eax,ebx
c000cd88:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd8c:	e8 a5 d1 ff ff       	call   c0009f36 <calc_output_quad>
c000cd91:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda5:	e8 22 b9 01 00       	call   c00286cc <__divdf3>
c000cdaa:	83 c4 10             	add    esp,0x10
c000cdad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdb1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc5:	e8 a1 af 01 00       	call   c0027d6b <__adddf3>
c000cdca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdd2:	83 c4 18             	add    esp,0x18
c000cdd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cddd:	e8 8e c0 01 00       	call   c0028e70 <lrint>
c000cde2:	83 ec 0c             	sub    esp,0xc
c000cde5:	50                   	push   eax
c000cde6:	e8 60 bc 01 00       	call   c0028a4b <__floatsidf>
c000cdeb:	83 c4 10             	add    esp,0x10
c000cdee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf6:	52                   	push   edx
c000cdf7:	50                   	push   eax
c000cdf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdfc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce00:	e8 b7 b5 01 00       	call   c00283bc <__subdf3>
c000ce05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0d:	83 c4 20             	add    esp,0x20
c000ce10:	6a 00                	push   0x0
c000ce12:	6a 00                	push   0x0
c000ce14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1c:	e8 96 be 01 00       	call   c0028cb7 <__ltdf2>
c000ce21:	83 c4 10             	add    esp,0x10
c000ce24:	85 c0                	test   eax,eax
c000ce26:	79 20                	jns    c000ce48 <sinc_quad_vari_process+0x66f>
c000ce28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	e8 2e af 01 00       	call   c0027d6b <__adddf3>
c000ce3d:	83 c4 10             	add    esp,0x10
c000ce40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce48:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce4b:	83 ec 10             	sub    esp,0x10
c000ce4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce52:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce61:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce65:	e8 52 b5 01 00       	call   c00283bc <__subdf3>
c000ce6a:	83 c4 18             	add    esp,0x18
c000ce6d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce71:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce75:	52                   	push   edx
c000ce76:	50                   	push   eax
c000ce77:	e8 f4 bf 01 00       	call   c0028e70 <lrint>
c000ce7c:	0f af f8             	imul   edi,eax
c000ce7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce83:	83 c4 10             	add    esp,0x10
c000ce86:	01 f8                	add    eax,edi
c000ce88:	99                   	cdq    
c000ce89:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce8c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce8f:	e9 fd fb ff ff       	jmp    c000ca91 <sinc_quad_vari_process+0x2b8>
c000ce94:	83 c4 4c             	add    esp,0x4c
c000ce97:	89 d0                	mov    eax,edx
c000ce99:	5b                   	pop    ebx
c000ce9a:	5e                   	pop    esi
c000ce9b:	5f                   	pop    edi
c000ce9c:	5d                   	pop    ebp
c000ce9d:	c3                   	ret    

c000ce9e <sinc_stereo_vari_process>:
c000ce9e:	55                   	push   ebp
c000ce9f:	ba 05 00 00 00       	mov    edx,0x5
c000cea4:	57                   	push   edi
c000cea5:	56                   	push   esi
c000cea6:	53                   	push   ebx
c000cea7:	83 ec 4c             	sub    esp,0x4c
c000ceaa:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ceae:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceb2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ceb5:	85 db                	test   ebx,ebx
c000ceb7:	0f 84 9c 06 00 00    	je     c000d559 <sinc_stereo_vari_process+0x6bb>
c000cebd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cec0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cec3:	0f af c7             	imul   eax,edi
c000cec6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cec9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cecc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ced3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ceda:	0f af c7             	imul   eax,edi
c000cedd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cee0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cee3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cee6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceee:	68 00 00 70 3f       	push   0x3f700000
c000cef3:	6a 00                	push   0x0
c000cef5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefd:	e8 b5 bd 01 00       	call   c0028cb7 <__ltdf2>
c000cf02:	83 c4 10             	add    esp,0x10
c000cf05:	ba 16 00 00 00       	mov    edx,0x16
c000cf0a:	85 c0                	test   eax,eax
c000cf0c:	0f 88 47 06 00 00    	js     c000d559 <sinc_stereo_vari_process+0x6bb>
c000cf12:	68 00 00 70 40       	push   0x40700000
c000cf17:	6a 00                	push   0x0
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf21:	e8 73 bd 01 00       	call   c0028c99 <__gtdf2>
c000cf26:	83 c4 10             	add    esp,0x10
c000cf29:	ba 16 00 00 00       	mov    edx,0x16
c000cf2e:	85 c0                	test   eax,eax
c000cf30:	0f 8f 23 06 00 00    	jg     c000d559 <sinc_stereo_vari_process+0x6bb>
c000cf36:	83 ec 0c             	sub    esp,0xc
c000cf39:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf3c:	e8 0a bb 01 00       	call   c0028a4b <__floatsidf>
c000cf41:	83 c4 10             	add    esp,0x10
c000cf44:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf4c:	68 00 00 00 40       	push   0x40000000
c000cf51:	6a 00                	push   0x0
c000cf53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf5b:	e8 0b ae 01 00       	call   c0027d6b <__adddf3>
c000cf60:	59                   	pop    ecx
c000cf61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf65:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf69:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf6c:	e8 da ba 01 00       	call   c0028a4b <__floatsidf>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	52                   	push   edx
c000cf7d:	50                   	push   eax
c000cf7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf86:	e8 41 b7 01 00       	call   c00286cc <__divdf3>
c000cf8b:	83 c4 10             	add    esp,0x10
c000cf8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf92:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf96:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf99:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb4:	e8 e0 bc 01 00       	call   c0028c99 <__gtdf2>
c000cfb9:	83 c4 10             	add    esp,0x10
c000cfbc:	85 c0                	test   eax,eax
c000cfbe:	7e 2d                	jle    c000cfed <sinc_stereo_vari_process+0x14f>
c000cfc0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfc5:	6a 00                	push   0x0
c000cfc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfcb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfcf:	e8 e3 bc 01 00       	call   c0028cb7 <__ltdf2>
c000cfd4:	83 c4 10             	add    esp,0x10
c000cfd7:	85 c0                	test   eax,eax
c000cfd9:	79 4d                	jns    c000d028 <sinc_stereo_vari_process+0x18a>
c000cfdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfeb:	eb 1b                	jmp    c000d008 <sinc_stereo_vari_process+0x16a>
c000cfed:	68 00 00 f0 3f       	push   0x3ff00000
c000cff2:	6a 00                	push   0x0
c000cff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffc:	e8 b6 bc 01 00       	call   c0028cb7 <__ltdf2>
c000d001:	83 c4 10             	add    esp,0x10
c000d004:	85 c0                	test   eax,eax
c000d006:	79 20                	jns    c000d028 <sinc_stereo_vari_process+0x18a>
c000d008:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 af b6 01 00       	call   c00286cc <__divdf3>
c000d01d:	83 c4 10             	add    esp,0x10
c000d020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d024:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d028:	50                   	push   eax
c000d029:	50                   	push   eax
c000d02a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d02e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d032:	e8 39 be 01 00       	call   c0028e70 <lrint>
c000d037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d03a:	40                   	inc    eax
c000d03b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d03f:	0f af c7             	imul   eax,edi
c000d042:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d049:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04d:	58                   	pop    eax
c000d04e:	5a                   	pop    edx
c000d04f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d053:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d057:	e8 14 be 01 00       	call   c0028e70 <lrint>
c000d05c:	83 ec 0c             	sub    esp,0xc
c000d05f:	50                   	push   eax
c000d060:	e8 e6 b9 01 00       	call   c0028a4b <__floatsidf>
c000d065:	83 c4 10             	add    esp,0x10
c000d068:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d06c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d070:	52                   	push   edx
c000d071:	50                   	push   eax
c000d072:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d076:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07a:	e8 3d b3 01 00       	call   c00283bc <__subdf3>
c000d07f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d083:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d087:	83 c4 20             	add    esp,0x20
c000d08a:	6a 00                	push   0x0
c000d08c:	6a 00                	push   0x0
c000d08e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d092:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d096:	e8 1c bc 01 00       	call   c0028cb7 <__ltdf2>
c000d09b:	83 c4 10             	add    esp,0x10
c000d09e:	85 c0                	test   eax,eax
c000d0a0:	79 1f                	jns    c000d0c1 <sinc_stereo_vari_process+0x223>
c000d0a2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0a7:	6a 00                	push   0x0
c000d0a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b1:	e8 b5 ac 01 00       	call   c0027d6b <__adddf3>
c000d0b6:	83 c4 10             	add    esp,0x10
c000d0b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0c1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0c4:	83 ec 10             	sub    esp,0x10
c000d0c7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0de:	e8 d9 b2 01 00       	call   c00283bc <__subdf3>
c000d0e3:	83 c4 18             	add    esp,0x18
c000d0e6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0ee:	52                   	push   edx
c000d0ef:	50                   	push   eax
c000d0f0:	e8 7b bd 01 00       	call   c0028e70 <lrint>
c000d0f5:	0f af f8             	imul   edi,eax
c000d0f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0fc:	01 f8                	add    eax,edi
c000d0fe:	99                   	cdq    
c000d0ff:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d102:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d105:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d109:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10d:	68 00 00 f0 3f       	push   0x3ff00000
c000d112:	6a 00                	push   0x0
c000d114:	e8 b3 b5 01 00       	call   c00286cc <__divdf3>
c000d119:	83 c4 10             	add    esp,0x10
c000d11c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d120:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d124:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d129:	68 23 42 92 0c       	push   0xc924223
c000d12e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d132:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d136:	e8 30 ac 01 00       	call   c0027d6b <__adddf3>
c000d13b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d13f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d143:	83 c4 20             	add    esp,0x20
c000d146:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d14e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d156:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d159:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d15c:	7d 50                	jge    c000d1ae <sinc_stereo_vari_process+0x310>
c000d15e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d161:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d164:	01 c8                	add    eax,ecx
c000d166:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d169:	99                   	cdq    
c000d16a:	f7 f9                	idiv   ecx
c000d16c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d170:	7d 0c                	jge    c000d17e <sinc_stereo_vari_process+0x2e0>
c000d172:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d175:	85 ff                	test   edi,edi
c000d177:	79 6c                	jns    c000d1e5 <sinc_stereo_vari_process+0x347>
c000d179:	e9 e7 00 00 00       	jmp    c000d265 <sinc_stereo_vari_process+0x3c7>
c000d17e:	50                   	push   eax
c000d17f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d183:	56                   	push   esi
c000d184:	53                   	push   ebx
c000d185:	e8 4c e7 ff ff       	call   c000b8d6 <prepare_data>
c000d18a:	83 c4 10             	add    esp,0x10
c000d18d:	89 c2                	mov    edx,eax
c000d18f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d192:	85 c0                	test   eax,eax
c000d194:	0f 85 bf 03 00 00    	jne    c000d559 <sinc_stereo_vari_process+0x6bb>
c000d19a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d19d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1a0:	01 c8                	add    eax,ecx
c000d1a2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1a5:	99                   	cdq    
c000d1a6:	f7 f9                	idiv   ecx
c000d1a8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1ac:	7c c4                	jl     c000d172 <sinc_stereo_vari_process+0x2d4>
c000d1ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1b6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1b9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1c4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1c7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ca:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1cd:	99                   	cdq    
c000d1ce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1d1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1d4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1d7:	99                   	cdq    
c000d1d8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1db:	31 d2                	xor    edx,edx
c000d1dd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1e0:	e9 74 03 00 00       	jmp    c000d559 <sinc_stereo_vari_process+0x6bb>
c000d1e5:	83 ec 0c             	sub    esp,0xc
c000d1e8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1eb:	e8 5b b8 01 00       	call   c0028a4b <__floatsidf>
c000d1f0:	83 c4 10             	add    esp,0x10
c000d1f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1f7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d203:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d207:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20b:	e8 5b ab 01 00       	call   c0027d6b <__adddf3>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d21f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 3b ab 01 00       	call   c0027d6b <__adddf3>
c000d230:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d233:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d237:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23b:	e8 0b b8 01 00       	call   c0028a4b <__floatsidf>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d247:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d24b:	52                   	push   edx
c000d24c:	50                   	push   eax
c000d24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d251:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d255:	e8 5b ba 01 00       	call   c0028cb5 <__gedf2>
c000d25a:	83 c4 10             	add    esp,0x10
c000d25d:	85 c0                	test   eax,eax
c000d25f:	0f 89 49 ff ff ff    	jns    c000d1ae <sinc_stereo_vari_process+0x310>
c000d265:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d269:	0f 8e ef 00 00 00    	jle    c000d35e <sinc_stereo_vari_process+0x4c0>
c000d26f:	83 ec 10             	sub    esp,0x10
c000d272:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d275:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d278:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d27b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d27e:	e8 39 b1 01 00       	call   c00283bc <__subdf3>
c000d283:	83 c4 18             	add    esp,0x18
c000d286:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d28e:	52                   	push   edx
c000d28f:	50                   	push   eax
c000d290:	e8 bb bb 01 00       	call   c0028e50 <fabs>
c000d295:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d299:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2a5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b2:	e8 e2 b9 01 00       	call   c0028c99 <__gtdf2>
c000d2b7:	83 c4 10             	add    esp,0x10
c000d2ba:	85 c0                	test   eax,eax
c000d2bc:	0f 8e 9c 00 00 00    	jle    c000d35e <sinc_stereo_vari_process+0x4c0>
c000d2c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2c5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2d0:	52                   	push   edx
c000d2d1:	50                   	push   eax
c000d2d2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2d5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2d8:	e8 df b0 01 00       	call   c00283bc <__subdf3>
c000d2dd:	59                   	pop    ecx
c000d2de:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2e2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2e6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2e9:	e8 5d b7 01 00       	call   c0028a4b <__floatsidf>
c000d2ee:	83 c4 10             	add    esp,0x10
c000d2f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2f9:	52                   	push   edx
c000d2fa:	50                   	push   eax
c000d2fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d303:	e8 e0 b0 01 00       	call   c00283e8 <__muldf3>
c000d308:	5f                   	pop    edi
c000d309:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d311:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d314:	e8 32 b7 01 00       	call   c0028a4b <__floatsidf>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d320:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d324:	52                   	push   edx
c000d325:	50                   	push   eax
c000d326:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32e:	e8 99 b3 01 00       	call   c00286cc <__divdf3>
c000d333:	83 c4 10             	add    esp,0x10
c000d336:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d33a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d33e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 18 aa 01 00       	call   c0027d6b <__adddf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d35a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d35e:	83 ec 0c             	sub    esp,0xc
c000d361:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d364:	e8 e2 b6 01 00       	call   c0028a4b <__floatsidf>
c000d369:	83 c4 10             	add    esp,0x10
c000d36c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d370:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d384:	e8 2e b9 01 00       	call   c0028cb7 <__ltdf2>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	85 c0                	test   eax,eax
c000d38e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d392:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d396:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d39a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d39e:	78 10                	js     c000d3b0 <sinc_stereo_vari_process+0x512>
c000d3a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3ac:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c0:	e8 23 b0 01 00       	call   c00283e8 <__muldf3>
c000d3c5:	59                   	pop    ecx
c000d3c6:	5f                   	pop    edi
c000d3c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d7:	e8 d3 e4 ff ff       	call   c000b8af <double_to_fp>
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	89 c7                	mov    edi,eax
c000d3e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ee:	e8 f5 af 01 00       	call   c00283e8 <__muldf3>
c000d3f3:	83 c4 18             	add    esp,0x18
c000d3f6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3fe:	52                   	push   edx
c000d3ff:	50                   	push   eax
c000d400:	e8 aa e4 ff ff       	call   c000b8af <double_to_fp>
c000d405:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d408:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d40c:	83 c4 0c             	add    esp,0xc
c000d40f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d412:	8d 04 90             	lea    eax,[eax+edx*4]
c000d415:	50                   	push   eax
c000d416:	50                   	push   eax
c000d417:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d41a:	e8 2c b6 01 00       	call   c0028a4b <__floatsidf>
c000d41f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d423:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d427:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d42b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d42f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d433:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d437:	e8 90 b2 01 00       	call   c00286cc <__divdf3>
c000d43c:	83 c4 18             	add    esp,0x18
c000d43f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d443:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d447:	52                   	push   edx
c000d448:	89 fa                	mov    edx,edi
c000d44a:	50                   	push   eax
c000d44b:	89 d8                	mov    eax,ebx
c000d44d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d451:	e8 02 c7 ff ff       	call   c0009b58 <calc_output_stereo>
c000d456:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d45a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d45e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d462:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d466:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d46a:	e8 5d b2 01 00       	call   c00286cc <__divdf3>
c000d46f:	83 c4 10             	add    esp,0x10
c000d472:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d476:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d482:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d486:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d48a:	e8 dc a8 01 00       	call   c0027d6b <__adddf3>
c000d48f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d493:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d497:	83 c4 18             	add    esp,0x18
c000d49a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d49e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a2:	e8 c9 b9 01 00       	call   c0028e70 <lrint>
c000d4a7:	83 ec 0c             	sub    esp,0xc
c000d4aa:	50                   	push   eax
c000d4ab:	e8 9b b5 01 00       	call   c0028a4b <__floatsidf>
c000d4b0:	83 c4 10             	add    esp,0x10
c000d4b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4bb:	52                   	push   edx
c000d4bc:	50                   	push   eax
c000d4bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c5:	e8 f2 ae 01 00       	call   c00283bc <__subdf3>
c000d4ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d2:	83 c4 20             	add    esp,0x20
c000d4d5:	6a 00                	push   0x0
c000d4d7:	6a 00                	push   0x0
c000d4d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e1:	e8 d1 b7 01 00       	call   c0028cb7 <__ltdf2>
c000d4e6:	83 c4 10             	add    esp,0x10
c000d4e9:	85 c0                	test   eax,eax
c000d4eb:	79 20                	jns    c000d50d <sinc_stereo_vari_process+0x66f>
c000d4ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	e8 69 a8 01 00       	call   c0027d6b <__adddf3>
c000d502:	83 c4 10             	add    esp,0x10
c000d505:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d509:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d50d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d510:	83 ec 10             	sub    esp,0x10
c000d513:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d517:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d522:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d526:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d52a:	e8 8d ae 01 00       	call   c00283bc <__subdf3>
c000d52f:	83 c4 18             	add    esp,0x18
c000d532:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d536:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53a:	52                   	push   edx
c000d53b:	50                   	push   eax
c000d53c:	e8 2f b9 01 00       	call   c0028e70 <lrint>
c000d541:	0f af f8             	imul   edi,eax
c000d544:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d548:	83 c4 10             	add    esp,0x10
c000d54b:	01 f8                	add    eax,edi
c000d54d:	99                   	cdq    
c000d54e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d551:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d554:	e9 fd fb ff ff       	jmp    c000d156 <sinc_stereo_vari_process+0x2b8>
c000d559:	83 c4 4c             	add    esp,0x4c
c000d55c:	89 d0                	mov    eax,edx
c000d55e:	5b                   	pop    ebx
c000d55f:	5e                   	pop    esi
c000d560:	5f                   	pop    edi
c000d561:	5d                   	pop    ebp
c000d562:	c3                   	ret    

c000d563 <sinc_mono_vari_process>:
c000d563:	55                   	push   ebp
c000d564:	ba 05 00 00 00       	mov    edx,0x5
c000d569:	57                   	push   edi
c000d56a:	56                   	push   esi
c000d56b:	53                   	push   ebx
c000d56c:	83 ec 4c             	sub    esp,0x4c
c000d56f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d573:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d577:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d57a:	85 db                	test   ebx,ebx
c000d57c:	0f 84 c1 06 00 00    	je     c000dc43 <sinc_mono_vari_process+0x6e0>
c000d582:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d585:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d588:	0f af c7             	imul   eax,edi
c000d58b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d58e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d591:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d598:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d59f:	0f af c7             	imul   eax,edi
c000d5a2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5a5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5a9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5b6:	68 00 00 70 3f       	push   0x3f700000
c000d5bb:	6a 00                	push   0x0
c000d5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c5:	e8 ed b6 01 00       	call   c0028cb7 <__ltdf2>
c000d5ca:	83 c4 10             	add    esp,0x10
c000d5cd:	ba 16 00 00 00       	mov    edx,0x16
c000d5d2:	85 c0                	test   eax,eax
c000d5d4:	0f 88 69 06 00 00    	js     c000dc43 <sinc_mono_vari_process+0x6e0>
c000d5da:	68 00 00 70 40       	push   0x40700000
c000d5df:	6a 00                	push   0x0
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e9:	e8 ab b6 01 00       	call   c0028c99 <__gtdf2>
c000d5ee:	83 c4 10             	add    esp,0x10
c000d5f1:	ba 16 00 00 00       	mov    edx,0x16
c000d5f6:	85 c0                	test   eax,eax
c000d5f8:	0f 8f 45 06 00 00    	jg     c000dc43 <sinc_mono_vari_process+0x6e0>
c000d5fe:	83 ec 0c             	sub    esp,0xc
c000d601:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d604:	e8 42 b4 01 00       	call   c0028a4b <__floatsidf>
c000d609:	83 c4 10             	add    esp,0x10
c000d60c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d610:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d614:	68 00 00 00 40       	push   0x40000000
c000d619:	6a 00                	push   0x0
c000d61b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d61f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d623:	e8 43 a7 01 00       	call   c0027d6b <__adddf3>
c000d628:	59                   	pop    ecx
c000d629:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d62d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d631:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d634:	e8 12 b4 01 00       	call   c0028a4b <__floatsidf>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	52                   	push   edx
c000d645:	50                   	push   eax
c000d646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64e:	e8 79 b0 01 00       	call   c00286cc <__divdf3>
c000d653:	83 c4 10             	add    esp,0x10
c000d656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d65a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d65e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d661:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d664:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d668:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d66c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d670:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d674:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d678:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67c:	e8 18 b6 01 00       	call   c0028c99 <__gtdf2>
c000d681:	83 c4 10             	add    esp,0x10
c000d684:	85 c0                	test   eax,eax
c000d686:	7e 2d                	jle    c000d6b5 <sinc_mono_vari_process+0x152>
c000d688:	68 00 00 f0 3f       	push   0x3ff00000
c000d68d:	6a 00                	push   0x0
c000d68f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d693:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d697:	e8 1b b6 01 00       	call   c0028cb7 <__ltdf2>
c000d69c:	83 c4 10             	add    esp,0x10
c000d69f:	85 c0                	test   eax,eax
c000d6a1:	79 4d                	jns    c000d6f0 <sinc_mono_vari_process+0x18d>
c000d6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b3:	eb 1b                	jmp    c000d6d0 <sinc_mono_vari_process+0x16d>
c000d6b5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ba:	6a 00                	push   0x0
c000d6bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c4:	e8 ee b5 01 00       	call   c0028cb7 <__ltdf2>
c000d6c9:	83 c4 10             	add    esp,0x10
c000d6cc:	85 c0                	test   eax,eax
c000d6ce:	79 20                	jns    c000d6f0 <sinc_mono_vari_process+0x18d>
c000d6d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 e7 af 01 00       	call   c00286cc <__divdf3>
c000d6e5:	83 c4 10             	add    esp,0x10
c000d6e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6f0:	50                   	push   eax
c000d6f1:	50                   	push   eax
c000d6f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fa:	e8 71 b7 01 00       	call   c0028e70 <lrint>
c000d6ff:	40                   	inc    eax
c000d700:	0f af c7             	imul   eax,edi
c000d703:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d707:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d70b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d70e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d711:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d715:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d719:	58                   	pop    eax
c000d71a:	5a                   	pop    edx
c000d71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d723:	e8 48 b7 01 00       	call   c0028e70 <lrint>
c000d728:	83 ec 0c             	sub    esp,0xc
c000d72b:	50                   	push   eax
c000d72c:	e8 1a b3 01 00       	call   c0028a4b <__floatsidf>
c000d731:	83 c4 10             	add    esp,0x10
c000d734:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d738:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d73c:	52                   	push   edx
c000d73d:	50                   	push   eax
c000d73e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d742:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d746:	e8 71 ac 01 00       	call   c00283bc <__subdf3>
c000d74b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d74f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d753:	83 c4 20             	add    esp,0x20
c000d756:	6a 00                	push   0x0
c000d758:	6a 00                	push   0x0
c000d75a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d762:	e8 50 b5 01 00       	call   c0028cb7 <__ltdf2>
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	85 c0                	test   eax,eax
c000d76c:	79 1f                	jns    c000d78d <sinc_mono_vari_process+0x22a>
c000d76e:	68 00 00 f0 3f       	push   0x3ff00000
c000d773:	6a 00                	push   0x0
c000d775:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77d:	e8 e9 a5 01 00       	call   c0027d6b <__adddf3>
c000d782:	83 c4 10             	add    esp,0x10
c000d785:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d789:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d78d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d790:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d793:	83 ec 10             	sub    esp,0x10
c000d796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a6:	e8 11 ac 01 00       	call   c00283bc <__subdf3>
c000d7ab:	83 c4 18             	add    esp,0x18
c000d7ae:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7b6:	52                   	push   edx
c000d7b7:	50                   	push   eax
c000d7b8:	e8 b3 b6 01 00       	call   c0028e70 <lrint>
c000d7bd:	0f af f8             	imul   edi,eax
c000d7c0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7c3:	31 ff                	xor    edi,edi
c000d7c5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ca:	99                   	cdq    
c000d7cb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ce:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7d9:	55                   	push   ebp
c000d7da:	57                   	push   edi
c000d7db:	e8 ec ae 01 00       	call   c00286cc <__divdf3>
c000d7e0:	83 c4 10             	add    esp,0x10
c000d7e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7eb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7f0:	68 23 42 92 0c       	push   0xc924223
c000d7f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fd:	e8 69 a5 01 00       	call   c0027d6b <__adddf3>
c000d802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d806:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d80a:	83 c4 20             	add    esp,0x20
c000d80d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d811:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d815:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d818:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d81b:	7d 54                	jge    c000d871 <sinc_mono_vari_process+0x30e>
c000d81d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d820:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d823:	01 c8                	add    eax,ecx
c000d825:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d828:	99                   	cdq    
c000d829:	f7 f9                	idiv   ecx
c000d82b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d82f:	7d 0c                	jge    c000d83d <sinc_mono_vari_process+0x2da>
c000d831:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d834:	85 ff                	test   edi,edi
c000d836:	79 73                	jns    c000d8ab <sinc_mono_vari_process+0x348>
c000d838:	e9 ee 00 00 00       	jmp    c000d92b <sinc_mono_vari_process+0x3c8>
c000d83d:	50                   	push   eax
c000d83e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d842:	56                   	push   esi
c000d843:	53                   	push   ebx
c000d844:	e8 8d e0 ff ff       	call   c000b8d6 <prepare_data>
c000d849:	89 c2                	mov    edx,eax
c000d84b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d84f:	83 c4 10             	add    esp,0x10
c000d852:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d855:	85 d2                	test   edx,edx
c000d857:	0f 85 e6 03 00 00    	jne    c000dc43 <sinc_mono_vari_process+0x6e0>
c000d85d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d860:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d863:	01 c8                	add    eax,ecx
c000d865:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d868:	99                   	cdq    
c000d869:	f7 f9                	idiv   ecx
c000d86b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d86f:	7c c0                	jl     c000d831 <sinc_mono_vari_process+0x2ce>
c000d871:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d875:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d879:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d87d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d880:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d887:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d88b:	89 01                	mov    DWORD PTR [ecx],eax
c000d88d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d890:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d893:	99                   	cdq    
c000d894:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d897:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d89a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d89d:	99                   	cdq    
c000d89e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8a1:	31 d2                	xor    edx,edx
c000d8a3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8a6:	e9 98 03 00 00       	jmp    c000dc43 <sinc_mono_vari_process+0x6e0>
c000d8ab:	83 ec 0c             	sub    esp,0xc
c000d8ae:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8b1:	e8 95 b1 01 00       	call   c0028a4b <__floatsidf>
c000d8b6:	83 c4 10             	add    esp,0x10
c000d8b9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8c5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d1:	e8 95 a4 01 00       	call   c0027d6b <__adddf3>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 75 a4 01 00       	call   c0027d6b <__adddf3>
c000d8f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8fd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d901:	e8 45 b1 01 00       	call   c0028a4b <__floatsidf>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d90d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d911:	52                   	push   edx
c000d912:	50                   	push   eax
c000d913:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d917:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91b:	e8 79 b3 01 00       	call   c0028c99 <__gtdf2>
c000d920:	83 c4 10             	add    esp,0x10
c000d923:	85 c0                	test   eax,eax
c000d925:	0f 8f 46 ff ff ff    	jg     c000d871 <sinc_mono_vari_process+0x30e>
c000d92b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d92f:	0f 8e f5 00 00 00    	jle    c000da2a <sinc_mono_vari_process+0x4c7>
c000d935:	83 ec 10             	sub    esp,0x10
c000d938:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d93b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d93e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d942:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d945:	ff 30                	push   DWORD PTR [eax]
c000d947:	e8 70 aa 01 00       	call   c00283bc <__subdf3>
c000d94c:	83 c4 18             	add    esp,0x18
c000d94f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d953:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d957:	52                   	push   edx
c000d958:	50                   	push   eax
c000d959:	e8 f2 b4 01 00       	call   c0028e50 <fabs>
c000d95e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d962:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d96e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d973:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d977:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d97b:	e8 19 b3 01 00       	call   c0028c99 <__gtdf2>
c000d980:	83 c4 10             	add    esp,0x10
c000d983:	85 c0                	test   eax,eax
c000d985:	0f 8e 9f 00 00 00    	jle    c000da2a <sinc_mono_vari_process+0x4c7>
c000d98b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d98f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d992:	8b 00                	mov    eax,DWORD PTR [eax]
c000d994:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d998:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d99c:	52                   	push   edx
c000d99d:	50                   	push   eax
c000d99e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9a1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9a4:	e8 13 aa 01 00       	call   c00283bc <__subdf3>
c000d9a9:	5f                   	pop    edi
c000d9aa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ae:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9b2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9b5:	e8 91 b0 01 00       	call   c0028a4b <__floatsidf>
c000d9ba:	83 c4 10             	add    esp,0x10
c000d9bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9c5:	52                   	push   edx
c000d9c6:	50                   	push   eax
c000d9c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9cf:	e8 14 aa 01 00       	call   c00283e8 <__muldf3>
c000d9d4:	5d                   	pop    ebp
c000d9d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9d9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9dd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9e0:	e8 66 b0 01 00       	call   c0028a4b <__floatsidf>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9ec:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f0:	52                   	push   edx
c000d9f1:	50                   	push   eax
c000d9f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fa:	e8 cd ac 01 00       	call   c00286cc <__divdf3>
c000d9ff:	83 c4 10             	add    esp,0x10
c000da02:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da06:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 4c a3 01 00       	call   c0027d6b <__adddf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da2a:	83 ec 0c             	sub    esp,0xc
c000da2d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da30:	e8 16 b0 01 00       	call   c0028a4b <__floatsidf>
c000da35:	83 c4 10             	add    esp,0x10
c000da38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da50:	e8 62 b2 01 00       	call   c0028cb7 <__ltdf2>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	85 c0                	test   eax,eax
c000da5a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da5e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da62:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da66:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da6a:	78 10                	js     c000da7c <sinc_mono_vari_process+0x519>
c000da6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da78:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da80:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8c:	e8 57 a9 01 00       	call   c00283e8 <__muldf3>
c000da91:	59                   	pop    ecx
c000da92:	5f                   	pop    edi
c000da93:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa3:	e8 07 de ff ff       	call   c000b8af <double_to_fp>
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	89 c7                	mov    edi,eax
c000daae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dab6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daba:	e8 29 a9 01 00       	call   c00283e8 <__muldf3>
c000dabf:	83 c4 18             	add    esp,0x18
c000dac2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dac6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daca:	52                   	push   edx
c000dacb:	50                   	push   eax
c000dacc:	e8 de dd ff ff       	call   c000b8af <double_to_fp>
c000dad1:	83 ec 0c             	sub    esp,0xc
c000dad4:	89 c5                	mov    ebp,eax
c000dad6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dad9:	e8 6d af 01 00       	call   c0028a4b <__floatsidf>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dae9:	52                   	push   edx
c000daea:	50                   	push   eax
c000daeb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf3:	e8 d4 ab 01 00       	call   c00286cc <__divdf3>
c000daf8:	83 c4 10             	add    esp,0x10
c000dafb:	89 e9                	mov    ecx,ebp
c000dafd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db01:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db05:	89 d8                	mov    eax,ebx
c000db07:	89 fa                	mov    edx,edi
c000db09:	e8 ee bd ff ff       	call   c00098fc <calc_output_single>
c000db0e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db11:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db14:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db18:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1c:	52                   	push   edx
c000db1d:	50                   	push   eax
c000db1e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db22:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db26:	e8 bd a8 01 00       	call   c00283e8 <__muldf3>
c000db2b:	59                   	pop    ecx
c000db2c:	59                   	pop    ecx
c000db2d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db31:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db35:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db39:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3d:	e8 79 b1 01 00       	call   c0028cbb <__truncdfsf2>
c000db42:	83 c4 10             	add    esp,0x10
c000db45:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db48:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db5b:	e8 6c ab 01 00       	call   c00286cc <__divdf3>
c000db60:	83 c4 10             	add    esp,0x10
c000db63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db77:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db7b:	e8 eb a1 01 00       	call   c0027d6b <__adddf3>
c000db80:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db84:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db88:	83 c4 18             	add    esp,0x18
c000db8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db93:	e8 d8 b2 01 00       	call   c0028e70 <lrint>
c000db98:	83 ec 0c             	sub    esp,0xc
c000db9b:	50                   	push   eax
c000db9c:	e8 aa ae 01 00       	call   c0028a4b <__floatsidf>
c000dba1:	83 c4 10             	add    esp,0x10
c000dba4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dba8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbac:	52                   	push   edx
c000dbad:	50                   	push   eax
c000dbae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb6:	e8 01 a8 01 00       	call   c00283bc <__subdf3>
c000dbbb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbbf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbc3:	83 c4 20             	add    esp,0x20
c000dbc6:	6a 00                	push   0x0
c000dbc8:	6a 00                	push   0x0
c000dbca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd2:	e8 e0 b0 01 00       	call   c0028cb7 <__ltdf2>
c000dbd7:	83 c4 10             	add    esp,0x10
c000dbda:	85 c0                	test   eax,eax
c000dbdc:	79 20                	jns    c000dbfe <sinc_mono_vari_process+0x69b>
c000dbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	e8 78 a1 01 00       	call   c0027d6b <__adddf3>
c000dbf3:	83 c4 10             	add    esp,0x10
c000dbf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbfa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbfe:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc01:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc04:	83 ec 10             	sub    esp,0x10
c000dc07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc17:	e8 a0 a7 01 00       	call   c00283bc <__subdf3>
c000dc1c:	83 c4 18             	add    esp,0x18
c000dc1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc23:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc27:	52                   	push   edx
c000dc28:	50                   	push   eax
c000dc29:	e8 42 b2 01 00       	call   c0028e70 <lrint>
c000dc2e:	83 c4 10             	add    esp,0x10
c000dc31:	0f af f8             	imul   edi,eax
c000dc34:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc37:	99                   	cdq    
c000dc38:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc3b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc3e:	e9 d2 fb ff ff       	jmp    c000d815 <sinc_mono_vari_process+0x2b2>
c000dc43:	83 c4 4c             	add    esp,0x4c
c000dc46:	89 d0                	mov    eax,edx
c000dc48:	5b                   	pop    ebx
c000dc49:	5e                   	pop    esi
c000dc4a:	5f                   	pop    edi
c000dc4b:	5d                   	pop    ebp
c000dc4c:	c3                   	ret    

c000dc4d <sinc_get_name>:
c000dc4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc51:	31 c0                	xor    eax,eax
c000dc53:	83 fa 02             	cmp    edx,0x2
c000dc56:	77 07                	ja     c000dc5f <sinc_get_name+0x12>
c000dc58:	8b 04 95 44 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58bc]
c000dc5f:	c3                   	ret    

c000dc60 <sinc_get_description>:
c000dc60:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc64:	31 c0                	xor    eax,eax
c000dc66:	83 fa 02             	cmp    edx,0x2
c000dc69:	77 07                	ja     c000dc72 <sinc_get_description+0x12>
c000dc6b:	8b 04 95 38 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58c8]
c000dc72:	c3                   	ret    

c000dc73 <sinc_set_converter>:
c000dc73:	53                   	push   ebx
c000dc74:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc7a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc84:	85 c0                	test   eax,eax
c000dc86:	74 13                	je     c000dc9b <sinc_set_converter+0x28>
c000dc88:	83 ec 0c             	sub    esp,0xc
c000dc8b:	50                   	push   eax
c000dc8c:	e8 25 1c 00 00       	call   c000f8b6 <free>
c000dc91:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc98:	83 c4 10             	add    esp,0x10
c000dc9b:	50                   	push   eax
c000dc9c:	68 44 08 00 00       	push   0x844
c000dca1:	6a 00                	push   0x0
c000dca3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dca7:	50                   	push   eax
c000dca8:	e8 bf 2a ff ff       	call   c000076c <memset>
c000dcad:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcb0:	83 c4 10             	add    esp,0x10
c000dcb3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcb8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcbe:	7f 6e                	jg     c000dd2e <sinc_set_converter+0xbb>
c000dcc0:	83 fa 01             	cmp    edx,0x1
c000dcc3:	75 10                	jne    c000dcd5 <sinc_set_converter+0x62>
c000dcc5:	c7 43 24 63 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d563
c000dccc:	c7 43 20 63 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d563
c000dcd3:	eb 4d                	jmp    c000dd22 <sinc_set_converter+0xaf>
c000dcd5:	83 fa 02             	cmp    edx,0x2
c000dcd8:	75 10                	jne    c000dcea <sinc_set_converter+0x77>
c000dcda:	c7 43 24 9e ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce9e
c000dce1:	c7 43 20 9e ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce9e
c000dce8:	eb 38                	jmp    c000dd22 <sinc_set_converter+0xaf>
c000dcea:	83 fa 04             	cmp    edx,0x4
c000dced:	75 10                	jne    c000dcff <sinc_set_converter+0x8c>
c000dcef:	c7 43 24 d9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7d9
c000dcf6:	c7 43 20 d9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7d9
c000dcfd:	eb 23                	jmp    c000dd22 <sinc_set_converter+0xaf>
c000dcff:	83 fa 06             	cmp    edx,0x6
c000dd02:	75 10                	jne    c000dd14 <sinc_set_converter+0xa1>
c000dd04:	c7 43 24 14 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c114
c000dd0b:	c7 43 20 14 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c114
c000dd12:	eb 0e                	jmp    c000dd22 <sinc_set_converter+0xaf>
c000dd14:	c7 43 24 50 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba50
c000dd1b:	c7 43 20 50 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba50
c000dd22:	c7 43 28 03 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad03
c000dd29:	b8 0a 00 00 00       	mov    eax,0xa
c000dd2e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd34:	5b                   	pop    ebx
c000dd35:	c3                   	ret    

c000dd36 <zoh_vari_process>:
c000dd36:	55                   	push   ebp
c000dd37:	31 d2                	xor    edx,edx
c000dd39:	57                   	push   edi
c000dd3a:	56                   	push   esi
c000dd3b:	53                   	push   ebx
c000dd3c:	83 ec 3c             	sub    esp,0x3c
c000dd3f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd43:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd47:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd4b:	0f 8e 80 06 00 00    	jle    c000e3d1 <zoh_vari_process+0x69b>
c000dd51:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd54:	ba 05 00 00 00       	mov    edx,0x5
c000dd59:	85 db                	test   ebx,ebx
c000dd5b:	0f 84 70 06 00 00    	je     c000e3d1 <zoh_vari_process+0x69b>
c000dd61:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd64:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd68:	74 19                	je     c000dd83 <zoh_vari_process+0x4d>
c000dd6a:	31 d2                	xor    edx,edx
c000dd6c:	39 c2                	cmp    edx,eax
c000dd6e:	7d 0c                	jge    c000dd7c <zoh_vari_process+0x46>
c000dd70:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd72:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd75:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd79:	42                   	inc    edx
c000dd7a:	eb f0                	jmp    c000dd6c <zoh_vari_process+0x36>
c000dd7c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd83:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd86:	0f af d0             	imul   edx,eax
c000dd89:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd8c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd90:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd97:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd9a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dda1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dda4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dda6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddae:	68 00 00 70 3f       	push   0x3f700000
c000ddb3:	6a 00                	push   0x0
c000ddb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbd:	e8 f5 ae 01 00       	call   c0028cb7 <__ltdf2>
c000ddc2:	83 c4 10             	add    esp,0x10
c000ddc5:	ba 16 00 00 00       	mov    edx,0x16
c000ddca:	85 c0                	test   eax,eax
c000ddcc:	0f 88 ff 05 00 00    	js     c000e3d1 <zoh_vari_process+0x69b>
c000ddd2:	68 00 00 70 40       	push   0x40700000
c000ddd7:	6a 00                	push   0x0
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde1:	e8 b3 ae 01 00       	call   c0028c99 <__gtdf2>
c000dde6:	83 c4 10             	add    esp,0x10
c000dde9:	ba 16 00 00 00       	mov    edx,0x16
c000ddee:	85 c0                	test   eax,eax
c000ddf0:	0f 8f db 05 00 00    	jg     c000e3d1 <zoh_vari_process+0x69b>
c000ddf6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddf9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000ddfc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de04:	68 00 00 f0 3f       	push   0x3ff00000
c000de09:	6a 00                	push   0x0
c000de0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de13:	e8 9f ae 01 00       	call   c0028cb7 <__ltdf2>
c000de18:	83 c4 10             	add    esp,0x10
c000de1b:	85 c0                	test   eax,eax
c000de1d:	0f 89 da 01 00 00    	jns    c000dffd <zoh_vari_process+0x2c7>
c000de23:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de26:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de29:	0f 8d ce 01 00 00    	jge    c000dffd <zoh_vari_process+0x2c7>
c000de2f:	83 ec 0c             	sub    esp,0xc
c000de32:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de35:	e8 11 ac 01 00       	call   c0028a4b <__floatsidf>
c000de3a:	83 c4 10             	add    esp,0x10
c000de3d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de40:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de54:	e8 8f a5 01 00       	call   c00283e8 <__muldf3>
c000de59:	59                   	pop    ecx
c000de5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de5e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de62:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de65:	e8 e1 ab 01 00       	call   c0028a4b <__floatsidf>
c000de6a:	83 c4 10             	add    esp,0x10
c000de6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de75:	52                   	push   edx
c000de76:	50                   	push   eax
c000de77:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7f:	e8 e7 9e 01 00       	call   c0027d6b <__adddf3>
c000de84:	59                   	pop    ecx
c000de85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de89:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de90:	e8 b6 ab 01 00       	call   c0028a4b <__floatsidf>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea0:	52                   	push   edx
c000dea1:	50                   	push   eax
c000dea2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deaa:	e8 06 ae 01 00       	call   c0028cb5 <__gedf2>
c000deaf:	83 c4 10             	add    esp,0x10
c000deb2:	85 c0                	test   eax,eax
c000deb4:	0f 89 43 01 00 00    	jns    c000dffd <zoh_vari_process+0x2c7>
c000deba:	85 ed                	test   ebp,ebp
c000debc:	0f 8e ec 00 00 00    	jle    c000dfae <zoh_vari_process+0x278>
c000dec2:	83 ec 10             	sub    esp,0x10
c000dec5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dec8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000decb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dece:	ff 37                	push   DWORD PTR [edi]
c000ded0:	e8 e7 a4 01 00       	call   c00283bc <__subdf3>
c000ded5:	83 c4 18             	add    esp,0x18
c000ded8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dedc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dee0:	52                   	push   edx
c000dee1:	50                   	push   eax
c000dee2:	e8 69 af 01 00       	call   c0028e50 <fabs>
c000dee7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deeb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000def7:	68 23 42 92 0c       	push   0xc924223
c000defc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df00:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df04:	e8 90 ad 01 00       	call   c0028c99 <__gtdf2>
c000df09:	83 c4 10             	add    esp,0x10
c000df0c:	85 c0                	test   eax,eax
c000df0e:	0f 8e 9a 00 00 00    	jle    c000dfae <zoh_vari_process+0x278>
c000df14:	8b 07                	mov    eax,DWORD PTR [edi]
c000df16:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df19:	89 04 24             	mov    DWORD PTR [esp],eax
c000df1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df20:	52                   	push   edx
c000df21:	50                   	push   eax
c000df22:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df25:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df28:	e8 8f a4 01 00       	call   c00283bc <__subdf3>
c000df2d:	59                   	pop    ecx
c000df2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df32:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df36:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df39:	e8 0d ab 01 00       	call   c0028a4b <__floatsidf>
c000df3e:	83 c4 10             	add    esp,0x10
c000df41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df45:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df49:	52                   	push   edx
c000df4a:	50                   	push   eax
c000df4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df53:	e8 90 a4 01 00       	call   c00283e8 <__muldf3>
c000df58:	5d                   	pop    ebp
c000df59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df61:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df64:	e8 e2 aa 01 00       	call   c0028a4b <__floatsidf>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df70:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df74:	52                   	push   edx
c000df75:	50                   	push   eax
c000df76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7e:	e8 49 a7 01 00       	call   c00286cc <__divdf3>
c000df83:	83 c4 10             	add    esp,0x10
c000df86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df8e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df92:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 c8 9d 01 00       	call   c0027d6b <__adddf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	31 c0                	xor    eax,eax
c000dfb0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfb3:	7e 13                	jle    c000dfc8 <zoh_vari_process+0x292>
c000dfb5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfb9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfbc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfbf:	40                   	inc    eax
c000dfc0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfc3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfc6:	eb e8                	jmp    c000dfb0 <zoh_vari_process+0x27a>
c000dfc8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfcc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfd0:	68 00 00 f0 3f       	push   0x3ff00000
c000dfd5:	6a 00                	push   0x0
c000dfd7:	e8 f0 a6 01 00       	call   c00286cc <__divdf3>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfe2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfe6:	52                   	push   edx
c000dfe7:	50                   	push   eax
c000dfe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff0:	e8 76 9d 01 00       	call   c0027d6b <__adddf3>
c000dff5:	83 c4 10             	add    esp,0x10
c000dff8:	e9 ff fd ff ff       	jmp    c000ddfc <zoh_vari_process+0xc6>
c000dffd:	55                   	push   ebp
c000dffe:	55                   	push   ebp
c000dfff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e007:	e8 64 ae 01 00       	call   c0028e70 <lrint>
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	50                   	push   eax
c000e010:	e8 36 aa 01 00       	call   c0028a4b <__floatsidf>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e020:	52                   	push   edx
c000e021:	50                   	push   eax
c000e022:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e026:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e02a:	e8 8d a3 01 00       	call   c00283bc <__subdf3>
c000e02f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e033:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e037:	83 c4 20             	add    esp,0x20
c000e03a:	6a 00                	push   0x0
c000e03c:	6a 00                	push   0x0
c000e03e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e042:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e046:	e8 6c ac 01 00       	call   c0028cb7 <__ltdf2>
c000e04b:	83 c4 10             	add    esp,0x10
c000e04e:	85 c0                	test   eax,eax
c000e050:	79 1e                	jns    c000e070 <zoh_vari_process+0x33a>
c000e052:	68 00 00 f0 3f       	push   0x3ff00000
c000e057:	6a 00                	push   0x0
c000e059:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e05d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e061:	e8 05 9d 01 00       	call   c0027d6b <__adddf3>
c000e066:	83 c4 10             	add    esp,0x10
c000e069:	89 04 24             	mov    DWORD PTR [esp],eax
c000e06c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e070:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e073:	83 ec 10             	sub    esp,0x10
c000e076:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e07a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e082:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e086:	e8 31 a3 01 00       	call   c00283bc <__subdf3>
c000e08b:	83 c4 18             	add    esp,0x18
c000e08e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e092:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e096:	52                   	push   edx
c000e097:	50                   	push   eax
c000e098:	e8 d3 ad 01 00       	call   c0028e70 <lrint>
c000e09d:	83 c4 10             	add    esp,0x10
c000e0a0:	0f af e8             	imul   ebp,eax
c000e0a3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0a6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0a9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0b0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0b7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0ba:	0f 8d 7a 02 00 00    	jge    c000e33a <zoh_vari_process+0x604>
c000e0c0:	83 ec 0c             	sub    esp,0xc
c000e0c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0c6:	e8 80 a9 01 00       	call   c0028a4b <__floatsidf>
c000e0cb:	83 c4 10             	add    esp,0x10
c000e0ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0d6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0da:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e6:	e8 fd a2 01 00       	call   c00283e8 <__muldf3>
c000e0eb:	59                   	pop    ecx
c000e0ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0f0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0f8:	e8 4e a9 01 00       	call   c0028a4b <__floatsidf>
c000e0fd:	83 c4 10             	add    esp,0x10
c000e100:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e104:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e108:	52                   	push   edx
c000e109:	50                   	push   eax
c000e10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e112:	e8 54 9c 01 00       	call   c0027d6b <__adddf3>
c000e117:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e11a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e11e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e122:	e8 24 a9 01 00       	call   c0028a4b <__floatsidf>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e132:	52                   	push   edx
c000e133:	50                   	push   eax
c000e134:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e138:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13c:	e8 78 ab 01 00       	call   c0028cb9 <__ledf2>
c000e141:	83 c4 10             	add    esp,0x10
c000e144:	85 c0                	test   eax,eax
c000e146:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e14a:	0f 8f ea 01 00 00    	jg     c000e33a <zoh_vari_process+0x604>
c000e150:	85 c9                	test   ecx,ecx
c000e152:	0f 8e ed 00 00 00    	jle    c000e245 <zoh_vari_process+0x50f>
c000e158:	83 ec 10             	sub    esp,0x10
c000e15b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e15e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e161:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e164:	ff 37                	push   DWORD PTR [edi]
c000e166:	e8 51 a2 01 00       	call   c00283bc <__subdf3>
c000e16b:	83 c4 18             	add    esp,0x18
c000e16e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e172:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e176:	52                   	push   edx
c000e177:	50                   	push   eax
c000e178:	e8 d3 ac 01 00       	call   c0028e50 <fabs>
c000e17d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e181:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e18d:	68 23 42 92 0c       	push   0xc924223
c000e192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e19a:	e8 fa aa 01 00       	call   c0028c99 <__gtdf2>
c000e19f:	83 c4 10             	add    esp,0x10
c000e1a2:	85 c0                	test   eax,eax
c000e1a4:	0f 8e 9b 00 00 00    	jle    c000e245 <zoh_vari_process+0x50f>
c000e1aa:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1ac:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1b7:	52                   	push   edx
c000e1b8:	50                   	push   eax
c000e1b9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1bc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1bf:	e8 f8 a1 01 00       	call   c00283bc <__subdf3>
c000e1c4:	5d                   	pop    ebp
c000e1c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1c9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1cd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1d0:	e8 76 a8 01 00       	call   c0028a4b <__floatsidf>
c000e1d5:	83 c4 10             	add    esp,0x10
c000e1d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1e0:	52                   	push   edx
c000e1e1:	50                   	push   eax
c000e1e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ea:	e8 f9 a1 01 00       	call   c00283e8 <__muldf3>
c000e1ef:	59                   	pop    ecx
c000e1f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1fb:	e8 4b a8 01 00       	call   c0028a4b <__floatsidf>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e207:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e20b:	52                   	push   edx
c000e20c:	50                   	push   eax
c000e20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e211:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e215:	e8 b2 a4 01 00       	call   c00286cc <__divdf3>
c000e21a:	83 c4 10             	add    esp,0x10
c000e21d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e221:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e225:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e229:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 31 9b 01 00       	call   c0027d6b <__adddf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e241:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e245:	31 d2                	xor    edx,edx
c000e247:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e24a:	39 d0                	cmp    eax,edx
c000e24c:	7e 1d                	jle    c000e26b <zoh_vari_process+0x535>
c000e24e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e251:	29 c1                	sub    ecx,eax
c000e253:	89 c8                	mov    eax,ecx
c000e255:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e257:	01 d0                	add    eax,edx
c000e259:	42                   	inc    edx
c000e25a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e25d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e260:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e263:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e266:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e269:	eb dc                	jmp    c000e247 <zoh_vari_process+0x511>
c000e26b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e26f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e273:	68 00 00 f0 3f       	push   0x3ff00000
c000e278:	6a 00                	push   0x0
c000e27a:	e8 4d a4 01 00       	call   c00286cc <__divdf3>
c000e27f:	83 c4 10             	add    esp,0x10
c000e282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e28a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e28e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e29a:	e8 cc 9a 01 00       	call   c0027d6b <__adddf3>
c000e29f:	5d                   	pop    ebp
c000e2a0:	59                   	pop    ecx
c000e2a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b1:	e8 ba ab 01 00       	call   c0028e70 <lrint>
c000e2b6:	83 ec 0c             	sub    esp,0xc
c000e2b9:	50                   	push   eax
c000e2ba:	e8 8c a7 01 00       	call   c0028a4b <__floatsidf>
c000e2bf:	83 c4 10             	add    esp,0x10
c000e2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ca:	52                   	push   edx
c000e2cb:	50                   	push   eax
c000e2cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d4:	e8 e3 a0 01 00       	call   c00283bc <__subdf3>
c000e2d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2e1:	83 c4 20             	add    esp,0x20
c000e2e4:	6a 00                	push   0x0
c000e2e6:	6a 00                	push   0x0
c000e2e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f0:	e8 c2 a9 01 00       	call   c0028cb7 <__ltdf2>
c000e2f5:	83 c4 10             	add    esp,0x10
c000e2f8:	85 c0                	test   eax,eax
c000e2fa:	79 1e                	jns    c000e31a <zoh_vari_process+0x5e4>
c000e2fc:	68 00 00 f0 3f       	push   0x3ff00000
c000e301:	6a 00                	push   0x0
c000e303:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e307:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30b:	e8 5b 9a 01 00       	call   c0027d6b <__adddf3>
c000e310:	83 c4 10             	add    esp,0x10
c000e313:	89 04 24             	mov    DWORD PTR [esp],eax
c000e316:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e31a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e31d:	83 ec 10             	sub    esp,0x10
c000e320:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e328:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e330:	e8 87 a0 01 00       	call   c00283bc <__subdf3>
c000e335:	e9 51 fd ff ff       	jmp    c000e08b <zoh_vari_process+0x355>
c000e33a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e33e:	7d 3a                	jge    c000e37a <zoh_vari_process+0x644>
c000e340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e344:	83 ec 0c             	sub    esp,0xc
c000e347:	29 e8                	sub    eax,ebp
c000e349:	99                   	cdq    
c000e34a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e34d:	50                   	push   eax
c000e34e:	e8 f8 a6 01 00       	call   c0028a4b <__floatsidf>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e35a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e35e:	52                   	push   edx
c000e35f:	50                   	push   eax
c000e360:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e364:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e368:	e8 fe 99 01 00       	call   c0027d6b <__adddf3>
c000e36d:	83 c4 10             	add    esp,0x10
c000e370:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e373:	89 04 24             	mov    DWORD PTR [esp],eax
c000e376:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e37a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e37d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e381:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e384:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e387:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e38a:	85 c0                	test   eax,eax
c000e38c:	7f 25                	jg     c000e3b3 <zoh_vari_process+0x67d>
c000e38e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e392:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e396:	89 07                	mov    DWORD PTR [edi],eax
c000e398:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e39b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e39e:	99                   	cdq    
c000e39f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3a2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3a5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3a8:	99                   	cdq    
c000e3a9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ac:	31 d2                	xor    edx,edx
c000e3ae:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3b1:	eb 1e                	jmp    c000e3d1 <zoh_vari_process+0x69b>
c000e3b3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3b6:	31 d2                	xor    edx,edx
c000e3b8:	29 c8                	sub    eax,ecx
c000e3ba:	c1 e0 02             	shl    eax,0x2
c000e3bd:	39 d1                	cmp    ecx,edx
c000e3bf:	7e cd                	jle    c000e38e <zoh_vari_process+0x658>
c000e3c1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3c3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3c7:	83 c0 04             	add    eax,0x4
c000e3ca:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ce:	42                   	inc    edx
c000e3cf:	eb ec                	jmp    c000e3bd <zoh_vari_process+0x687>
c000e3d1:	83 c4 3c             	add    esp,0x3c
c000e3d4:	89 d0                	mov    eax,edx
c000e3d6:	5b                   	pop    ebx
c000e3d7:	5e                   	pop    esi
c000e3d8:	5f                   	pop    edi
c000e3d9:	5d                   	pop    ebp
c000e3da:	c3                   	ret    

c000e3db <zoh_reset>:
c000e3db:	83 ec 0c             	sub    esp,0xc
c000e3de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3e2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3e5:	85 c0                	test   eax,eax
c000e3e7:	74 20                	je     c000e409 <zoh_reset+0x2e>
c000e3e9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3ec:	83 c0 1c             	add    eax,0x1c
c000e3ef:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3f2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3f9:	c1 e2 02             	shl    edx,0x2
c000e3fc:	51                   	push   ecx
c000e3fd:	52                   	push   edx
c000e3fe:	6a 00                	push   0x0
c000e400:	50                   	push   eax
c000e401:	e8 66 23 ff ff       	call   c000076c <memset>
c000e406:	83 c4 10             	add    esp,0x10
c000e409:	83 c4 0c             	add    esp,0xc
c000e40c:	c3                   	ret    

c000e40d <zoh_get_name>:
c000e40d:	31 c0                	xor    eax,eax
c000e40f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e414:	75 05                	jne    c000e41b <zoh_get_name+0xe>
c000e416:	b8 5e a8 02 c0       	mov    eax,0xc002a85e
c000e41b:	c3                   	ret    

c000e41c <zoh_get_description>:
c000e41c:	31 c0                	xor    eax,eax
c000e41e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e423:	75 05                	jne    c000e42a <zoh_get_description+0xe>
c000e425:	b8 6f a8 02 c0       	mov    eax,0xc002a86f
c000e42a:	c3                   	ret    

c000e42b <zoh_set_converter>:
c000e42b:	53                   	push   ebx
c000e42c:	b8 0a 00 00 00       	mov    eax,0xa
c000e431:	83 ec 08             	sub    esp,0x8
c000e434:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e438:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e43d:	75 6e                	jne    c000e4ad <zoh_set_converter+0x82>
c000e43f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e442:	85 c0                	test   eax,eax
c000e444:	74 13                	je     c000e459 <zoh_set_converter+0x2e>
c000e446:	83 ec 0c             	sub    esp,0xc
c000e449:	50                   	push   eax
c000e44a:	e8 67 14 00 00       	call   c000f8b6 <free>
c000e44f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e456:	83 c4 10             	add    esp,0x10
c000e459:	50                   	push   eax
c000e45a:	50                   	push   eax
c000e45b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e45e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e465:	50                   	push   eax
c000e466:	6a 01                	push   0x1
c000e468:	e8 69 14 00 00       	call   c000f8d6 <calloc>
c000e46d:	83 c4 10             	add    esp,0x10
c000e470:	89 c2                	mov    edx,eax
c000e472:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e475:	85 d2                	test   edx,edx
c000e477:	b8 01 00 00 00       	mov    eax,0x1
c000e47c:	74 2f                	je     c000e4ad <zoh_set_converter+0x82>
c000e47e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e481:	83 ec 0c             	sub    esp,0xc
c000e484:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e487:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e48d:	c7 43 24 36 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd36
c000e494:	c7 43 20 36 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd36
c000e49b:	c7 43 28 db e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3db
c000e4a2:	53                   	push   ebx
c000e4a3:	e8 33 ff ff ff       	call   c000e3db <zoh_reset>
c000e4a8:	83 c4 10             	add    esp,0x10
c000e4ab:	31 c0                	xor    eax,eax
c000e4ad:	83 c4 08             	add    esp,0x8
c000e4b0:	5b                   	pop    ebx
c000e4b1:	c3                   	ret    

c000e4b2 <CPU::current()>:
c000e4b2:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c000e4b7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4bd:	c3                   	ret    

c000e4be <operator new(unsigned long)>:
c000e4be:	e9 e3 13 00 00       	jmp    c000f8a6 <malloc>

c000e4c3 <operator delete(void*)>:
c000e4c3:	e9 fe 13 00 00       	jmp    c000f8c6 <rfree>

c000e4c8 <disableIRQs()>:
c000e4c8:	fa                   	cli    
c000e4c9:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c000e4cf:	c3                   	ret    

c000e4d0 <enableIRQs()>:
c000e4d0:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e4d5:	48                   	dec    eax
c000e4d6:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000e4db:	75 01                	jne    c000e4de <enableIRQs()+0xe>
c000e4dd:	fb                   	sti    
c000e4de:	c3                   	ret    

c000e4df <lockScheduler()>:
c000e4df:	fa                   	cli    
c000e4e0:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c000e4e6:	c3                   	ret    

c000e4e7 <unlockScheduler()>:
c000e4e7:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e4ec:	48                   	dec    eax
c000e4ed:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000e4f2:	75 01                	jne    c000e4f5 <unlockScheduler()+0xe>
c000e4f4:	fb                   	sti    
c000e4f5:	c3                   	ret    

c000e4f6 <lockStuff()>:
c000e4f6:	fa                   	cli    
c000e4f7:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c000e4fd:	ff 05 a4 23 03 c0    	inc    DWORD PTR ds:0xc00323a4
c000e503:	c3                   	ret    

c000e504 <unlockStuff()>:
c000e504:	83 ec 0c             	sub    esp,0xc
c000e507:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c000e50c:	48                   	dec    eax
c000e50d:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c000e512:	75 18                	jne    c000e52c <unlockStuff()+0x28>
c000e514:	83 3d a0 23 03 c0 00 	cmp    DWORD PTR ds:0xc00323a0,0x0
c000e51b:	74 0f                	je     c000e52c <unlockStuff()+0x28>
c000e51d:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c000e527:	e8 74 ff 00 00       	call   c001e4a0 <schedule()>
c000e52c:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000e531:	48                   	dec    eax
c000e532:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000e537:	75 01                	jne    c000e53a <unlockStuff()+0x36>
c000e539:	fb                   	sti    
c000e53a:	83 c4 0c             	add    esp,0xc
c000e53d:	c3                   	ret    

c000e53e <Virt::getAKernelVAS()>:
c000e53e:	a1 f0 ef 02 c0       	mov    eax,ds:0xc002eff0
c000e543:	c3                   	ret    

c000e544 <__not_memcpy>:
c000e544:	57                   	push   edi
c000e545:	56                   	push   esi
c000e546:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e54a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e54e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e552:	89 c7                	mov    edi,eax
c000e554:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e556:	5e                   	pop    esi
c000e557:	5f                   	pop    edi
c000e558:	c3                   	ret    

c000e559 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e559:	83 ec 0c             	sub    esp,0xc
c000e55c:	83 ec 08             	sub    esp,0x8
c000e55f:	68 a6 a8 02 c0       	push   0xc002a8a6
c000e564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e568:	e8 47 23 ff ff       	call   c00008b4 <strcmp>
c000e56d:	83 c4 10             	add    esp,0x10
c000e570:	85 c0                	test   eax,eax
c000e572:	0f 94 c0             	sete   al
c000e575:	84 c0                	test   al,al
c000e577:	74 0a                	je     c000e583 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e579:	b8 68 ee 02 c0       	mov    eax,0xc002ee68
c000e57e:	e9 e3 00 00 00       	jmp    c000e666 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e583:	83 ec 08             	sub    esp,0x8
c000e586:	68 af a8 02 c0       	push   0xc002a8af
c000e58b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e58f:	e8 20 23 ff ff       	call   c00008b4 <strcmp>
c000e594:	83 c4 10             	add    esp,0x10
c000e597:	85 c0                	test   eax,eax
c000e599:	0f 94 c0             	sete   al
c000e59c:	84 c0                	test   al,al
c000e59e:	74 0a                	je     c000e5aa <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e5a0:	b8 e4 71 02 c0       	mov    eax,0xc00271e4
c000e5a5:	e9 bc 00 00 00       	jmp    c000e666 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5aa:	83 ec 08             	sub    esp,0x8
c000e5ad:	68 b9 a8 02 c0       	push   0xc002a8b9
c000e5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5b6:	e8 f9 22 ff ff       	call   c00008b4 <strcmp>
c000e5bb:	83 c4 10             	add    esp,0x10
c000e5be:	85 c0                	test   eax,eax
c000e5c0:	0f 94 c0             	sete   al
c000e5c3:	84 c0                	test   al,al
c000e5c5:	74 0a                	je     c000e5d1 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5c7:	b8 18 6f 02 c0       	mov    eax,0xc0026f18
c000e5cc:	e9 95 00 00 00       	jmp    c000e666 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d1:	83 ec 08             	sub    esp,0x8
c000e5d4:	68 c2 a8 02 c0       	push   0xc002a8c2
c000e5d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5dd:	e8 d2 22 ff ff       	call   c00008b4 <strcmp>
c000e5e2:	83 c4 10             	add    esp,0x10
c000e5e5:	85 c0                	test   eax,eax
c000e5e7:	0f 94 c0             	sete   al
c000e5ea:	84 c0                	test   al,al
c000e5ec:	74 07                	je     c000e5f5 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5ee:	b8 e4 72 02 c0       	mov    eax,0xc00272e4
c000e5f3:	eb 71                	jmp    c000e666 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5f5:	83 ec 08             	sub    esp,0x8
c000e5f8:	68 cc a8 02 c0       	push   0xc002a8cc
c000e5fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e601:	e8 ae 22 ff ff       	call   c00008b4 <strcmp>
c000e606:	83 c4 10             	add    esp,0x10
c000e609:	85 c0                	test   eax,eax
c000e60b:	0f 94 c0             	sete   al
c000e60e:	84 c0                	test   al,al
c000e610:	74 07                	je     c000e619 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e612:	b8 64 70 02 c0       	mov    eax,0xc0027064
c000e617:	eb 4d                	jmp    c000e666 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e619:	83 ec 08             	sub    esp,0x8
c000e61c:	68 d5 a8 02 c0       	push   0xc002a8d5
c000e621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e625:	e8 8a 22 ff ff       	call   c00008b4 <strcmp>
c000e62a:	83 c4 10             	add    esp,0x10
c000e62d:	85 c0                	test   eax,eax
c000e62f:	0f 94 c0             	sete   al
c000e632:	84 c0                	test   al,al
c000e634:	74 07                	je     c000e63d <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e636:	b8 6c ee 02 c0       	mov    eax,0xc002ee6c
c000e63b:	eb 29                	jmp    c000e666 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e63d:	83 ec 08             	sub    esp,0x8
c000e640:	68 e2 a8 02 c0       	push   0xc002a8e2
c000e645:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e649:	e8 66 22 ff ff       	call   c00008b4 <strcmp>
c000e64e:	83 c4 10             	add    esp,0x10
c000e651:	85 c0                	test   eax,eax
c000e653:	0f 94 c0             	sete   al
c000e656:	84 c0                	test   al,al
c000e658:	74 07                	je     c000e661 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e65a:	b8 6d ee 02 c0       	mov    eax,0xc002ee6d
c000e65f:	eb 05                	jmp    c000e666 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e661:	b8 00 00 00 00       	mov    eax,0x0
c000e666:	83 c4 0c             	add    esp,0xc
c000e669:	c3                   	ret    

c000e66a <Computer::close(int, int, void*)>:
c000e66a:	57                   	push   edi
c000e66b:	56                   	push   esi
c000e66c:	53                   	push   ebx
c000e66d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e671:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e675:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e679:	83 ec 0c             	sub    esp,0xc
c000e67c:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e682:	e8 51 5d 00 00       	call   c00143d8 <Device::closeAll()>
c000e687:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e68d:	83 c4 10             	add    esp,0x10
c000e690:	8b 10                	mov    edx,DWORD PTR [eax]
c000e692:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e696:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e69e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e6a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6a6:	5b                   	pop    ebx
c000e6a7:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e6aa:	5e                   	pop    esi
c000e6ab:	5f                   	pop    edi
c000e6ac:	ff e0                	jmp    eax

c000e6ae <Krnl::firstTask()>:
c000e6ae:	53                   	push   ebx
c000e6af:	83 ec 14             	sub    esp,0x14
c000e6b2:	fb                   	sti    
c000e6b3:	68 3f 07 00 00       	push   0x73f
c000e6b8:	e8 e9 11 00 00       	call   c000f8a6 <malloc>
c000e6bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6c4:	89 c3                	mov    ebx,eax
c000e6c6:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c000e6cc:	68 ef a8 02 c0       	push   0xc002a8ef
c000e6d1:	6a 01                	push   0x1
c000e6d3:	50                   	push   eax
c000e6d4:	e8 8b f9 00 00       	call   c001e064 <Process::Process(bool, char const*, Process*, char**)>
c000e6d9:	83 c4 20             	add    esp,0x20
c000e6dc:	68 ff 00 00 00       	push   0xff
c000e6e1:	6a 00                	push   0x0
c000e6e3:	68 39 f2 00 c0       	push   0xc000f239
c000e6e8:	53                   	push   ebx
c000e6e9:	e8 6e fb 00 00       	call   c001e25c <Process::createThread(void (*)(void*), void*, int)>
c000e6ee:	6a 7a                	push   0x7a
c000e6f0:	6a 00                	push   0x0
c000e6f2:	68 da ec 01 c0       	push   0xc001ecda
c000e6f7:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c000e6fd:	e8 5a fb 00 00       	call   c001e25c <Process::createThread(void (*)(void*), void*, int)>
c000e702:	83 c4 20             	add    esp,0x20
c000e705:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e70a:	c6 05 6d ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee6d,0x1
c000e711:	e8 18 0a 01 00       	call   c001f12e <Vm::initialise8086()>
c000e716:	e8 b1 4a 00 00       	call   c00131cc <Fs::initVFS()>
c000e71b:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c000e720:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e726:	8b 10                	mov    edx,DWORD PTR [eax]
c000e728:	6a 00                	push   0x0
c000e72a:	6a 00                	push   0x0
c000e72c:	6a 00                	push   0x0
c000e72e:	50                   	push   eax
c000e72f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e732:	e8 bc e1 00 00       	call   c001c8f3 <Sys::loadSyscalls()>
c000e737:	e8 86 bf 00 00       	call   c001a6c2 <Krnl::loadSystemEnv()>
c000e73c:	83 c4 0c             	add    esp,0xc
c000e73f:	6a 3a                	push   0x3a
c000e741:	68 fc a8 02 c0       	push   0xc002a8fc
c000e746:	68 05 a9 02 c0       	push   0xc002a905
c000e74b:	e8 57 cd 00 00       	call   c001b4a7 <Reg::readIntWithDefault(char*, char*, int)>
c000e750:	89 04 24             	mov    DWORD PTR [esp],eax
c000e753:	e8 64 55 00 00       	call   c0013cbc <User::loadClockSettings(int)>
c000e758:	58                   	pop    eax
c000e759:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c000e75e:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e764:	e8 43 5c 00 00       	call   c00143ac <Device::loadDriversForAll()>
c000e769:	e8 a4 ba 00 00       	call   c001a212 <Krnl::startCPUs()>
c000e76e:	5a                   	pop    edx
c000e76f:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c000e775:	59                   	pop    ecx
c000e776:	6a 01                	push   0x1
c000e778:	68 0d a9 02 c0       	push   0xc002a90d
c000e77d:	e8 3f f3 00 00       	call   c001dac1 <Thr::loadDLL(char const*, bool)>
c000e782:	5a                   	pop    edx
c000e783:	59                   	pop    ecx
c000e784:	53                   	push   ebx
c000e785:	50                   	push   eax
c000e786:	e8 61 f5 00 00       	call   c001dcec <Thr::executeDLL(unsigned long, void*)>
c000e78b:	83 c4 10             	add    esp,0x10
c000e78e:	83 ec 0c             	sub    esp,0xc
c000e791:	6a 02                	push   0x2
c000e793:	e8 07 ff 00 00       	call   c001e69f <blockTask(TaskState)>
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	eb f1                	jmp    c000e78e <Krnl::firstTask()+0xe0>
c000e79d:	90                   	nop

c000e79e <Computer::Computer()>:
c000e79e:	83 ec 0c             	sub    esp,0xc
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	83 ec 08             	sub    esp,0x8
c000e7a8:	68 29 a9 02 c0       	push   0xc002a929
c000e7ad:	50                   	push   eax
c000e7ae:	e8 9f 5c 00 00       	call   c0014452 <Device::Device(char const*)>
c000e7b3:	83 c4 10             	add    esp,0x10
c000e7b6:	ba c8 aa 02 c0       	mov    edx,0xc002aac8
c000e7bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7bf:	89 10                	mov    DWORD PTR [eax],edx
c000e7c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c5:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d3:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7e7:	83 ca 04             	or     edx,0x4
c000e7ea:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7fa:	0f b6 d0             	movzx  edx,al
c000e7fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e801:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e812:	0f b6 d0             	movzx  edx,al
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e828:	8d 50 01             	lea    edx,[eax+0x1]
c000e82b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e82f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e835:	0f b6 d0             	movzx  edx,al
c000e838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e840:	83 e1 3f             	and    ecx,0x3f
c000e843:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e851:	0f b6 d0             	movzx  edx,al
c000e854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e858:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e869:	0f b6 d0             	movzx  edx,al
c000e86c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e870:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87f:	8d 50 01             	lea    edx,[eax+0x1]
c000e882:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e886:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e88c:	0f b6 d0             	movzx  edx,al
c000e88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e893:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e897:	83 e1 3f             	and    ecx,0x3f
c000e89a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a8:	0f b6 d0             	movzx  edx,al
c000e8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8af:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8c0:	0f b6 d0             	movzx  edx,al
c000e8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c7:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d6:	8d 50 01             	lea    edx,[eax+0x1]
c000e8d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8dd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8e3:	0f b6 d0             	movzx  edx,al
c000e8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ea:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8ee:	83 e1 3f             	and    ecx,0x3f
c000e8f1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8f5:	90                   	nop
c000e8f6:	83 c4 0c             	add    esp,0xc
c000e8f9:	c3                   	ret    

c000e8fa <Computer::setBootMessage(char const*)>:
c000e8fa:	c3                   	ret    
c000e8fb:	90                   	nop

c000e8fc <Computer::detectFeatures()>:
c000e8fc:	55                   	push   ebp
c000e8fd:	57                   	push   edi
c000e8fe:	56                   	push   esi
c000e8ff:	53                   	push   ebx
c000e900:	83 ec 1c             	sub    esp,0x1c
c000e903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e907:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e911:	e8 ce 19 ff ff       	call   c00002e4 <detectCPUID>
c000e916:	85 c0                	test   eax,eax
c000e918:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e91e:	0f 95 c2             	setne  dl
c000e921:	83 e0 fd             	and    eax,0xfffffffd
c000e924:	d1 e2                	shl    edx,1
c000e926:	09 d0                	or     eax,edx
c000e928:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e92e:	a8 02                	test   al,0x2
c000e930:	75 46                	jne    c000e978 <Computer::detectFeatures()+0x7c>
c000e932:	f6 05 81 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee81,0x4
c000e939:	74 07                	je     c000e942 <Computer::detectFeatures()+0x46>
c000e93b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e942:	e8 5f 85 01 00       	call   c0026ea6 <x87Detect>
c000e947:	83 e0 01             	and    eax,0x1
c000e94a:	c1 e0 04             	shl    eax,0x4
c000e94d:	88 c2                	mov    dl,al
c000e94f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e955:	83 e0 ef             	and    eax,0xffffffef
c000e958:	09 d0                	or     eax,edx
c000e95a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e960:	a8 10                	test   al,0x10
c000e962:	0f 85 2a 01 00 00    	jne    c000ea92 <Computer::detectFeatures()+0x196>
c000e968:	84 c0                	test   al,al
c000e96a:	0f 88 45 01 00 00    	js     c000eab5 <Computer::detectFeatures()+0x1b9>
c000e970:	83 c4 1c             	add    esp,0x1c
c000e973:	5b                   	pop    ebx
c000e974:	5e                   	pop    esi
c000e975:	5f                   	pop    edi
c000e976:	5d                   	pop    ebp
c000e977:	c3                   	ret    
c000e978:	83 ec 0c             	sub    esp,0xc
c000e97b:	6a 20                	push   0x20
c000e97d:	e8 b0 a5 00 00       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c000e982:	83 e0 01             	and    eax,0x1
c000e985:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e98c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e992:	83 e0 f7             	and    eax,0xfffffff7
c000e995:	09 d0                	or     eax,edx
c000e997:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e99d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9a4:	e8 89 a5 00 00       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c000e9a9:	83 e0 01             	and    eax,0x1
c000e9ac:	88 c2                	mov    dl,al
c000e9ae:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9b4:	83 e0 fe             	and    eax,0xfffffffe
c000e9b7:	09 d0                	or     eax,edx
c000e9b9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9bf:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9c6:	e8 67 a5 00 00       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c000e9cb:	c1 e0 07             	shl    eax,0x7
c000e9ce:	88 c2                	mov    dl,al
c000e9d0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9d6:	83 e0 7f             	and    eax,0x7f
c000e9d9:	09 d0                	or     eax,edx
c000e9db:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9e1:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9e8:	e8 45 a5 00 00       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ed:	83 c4 10             	add    esp,0x10
c000e9f0:	83 e0 01             	and    eax,0x1
c000e9f3:	c1 e0 05             	shl    eax,0x5
c000e9f6:	88 c2                	mov    dl,al
c000e9f8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9fe:	83 e0 df             	and    eax,0xffffffdf
c000ea01:	09 d0                	or     eax,edx
c000ea03:	f7 05 80 ee 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ee80,0x401
c000ea0d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea13:	0f 84 c2 00 00 00    	je     c000eadb <Computer::detectFeatures()+0x1df>
c000ea19:	83 e0 fe             	and    eax,0xfffffffe
c000ea1c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea22:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea28:	88 c2                	mov    dl,al
c000ea2a:	83 e2 09             	and    edx,0x9
c000ea2d:	fe ca                	dec    dl
c000ea2f:	75 09                	jne    c000ea3a <Computer::detectFeatures()+0x13e>
c000ea31:	83 e0 fe             	and    eax,0xfffffffe
c000ea34:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea3a:	83 ec 0c             	sub    esp,0xc
c000ea3d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea41:	50                   	push   eax
c000ea42:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea46:	55                   	push   ebp
c000ea47:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea4b:	57                   	push   edi
c000ea4c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea50:	56                   	push   esi
c000ea51:	68 00 00 00 80       	push   0x80000000
c000ea56:	e8 53 a4 00 00       	call   c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea5b:	83 c4 20             	add    esp,0x20
c000ea5e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea65:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea69:	0f 86 c3 fe ff ff    	jbe    c000e932 <Computer::detectFeatures()+0x36>
c000ea6f:	83 ec 0c             	sub    esp,0xc
c000ea72:	50                   	push   eax
c000ea73:	55                   	push   ebp
c000ea74:	57                   	push   edi
c000ea75:	56                   	push   esi
c000ea76:	68 01 00 00 80       	push   0x80000001
c000ea7b:	e8 2e a4 00 00       	call   c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea80:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea8a:	83 c4 20             	add    esp,0x20
c000ea8d:	e9 a0 fe ff ff       	jmp    c000e932 <Computer::detectFeatures()+0x36>
c000ea92:	e8 c9 83 01 00       	call   c0026e60 <absolutelyNoChanceInHell>
c000ea97:	88 c2                	mov    dl,al
c000ea99:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea9f:	c1 e2 07             	shl    edx,0x7
c000eaa2:	83 e0 7f             	and    eax,0x7f
c000eaa5:	09 d0                	or     eax,edx
c000eaa7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaad:	84 c0                	test   al,al
c000eaaf:	0f 89 bb fe ff ff    	jns    c000e970 <Computer::detectFeatures()+0x74>
c000eab5:	e8 86 83 01 00       	call   c0026e40 <avxDetect>
c000eaba:	83 e0 01             	and    eax,0x1
c000eabd:	c1 e0 05             	shl    eax,0x5
c000eac0:	88 c2                	mov    dl,al
c000eac2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eac8:	83 e0 df             	and    eax,0xffffffdf
c000eacb:	09 d0                	or     eax,edx
c000eacd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ead3:	83 c4 1c             	add    esp,0x1c
c000ead6:	5b                   	pop    ebx
c000ead7:	5e                   	pop    esi
c000ead8:	5f                   	pop    edi
c000ead9:	5d                   	pop    ebp
c000eada:	c3                   	ret    
c000eadb:	83 ec 0c             	sub    esp,0xc
c000eade:	68 00 02 00 00       	push   0x200
c000eae3:	e8 4a a4 00 00       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c000eae8:	83 c4 10             	add    esp,0x10
c000eaeb:	83 e0 01             	and    eax,0x1
c000eaee:	88 c2                	mov    dl,al
c000eaf0:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaf6:	83 e0 fe             	and    eax,0xfffffffe
c000eaf9:	09 d0                	or     eax,edx
c000eafb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb01:	e9 1c ff ff ff       	jmp    c000ea22 <Computer::detectFeatures()+0x126>

c000eb06 <Computer::displayFeatures()>:
c000eb06:	53                   	push   ebx
c000eb07:	83 ec 14             	sub    esp,0x14
c000eb0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb0e:	68 39 a9 02 c0       	push   0xc002a939
c000eb13:	e8 29 43 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000eb18:	83 c4 10             	add    esp,0x10
c000eb1b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb22:	0f 85 73 02 00 00    	jne    c000ed9b <Computer::displayFeatures()+0x295>
c000eb28:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000eb2d:	83 ec 08             	sub    esp,0x8
c000eb30:	50                   	push   eax
c000eb31:	68 4c a9 02 c0       	push   0xc002a94c
c000eb36:	e8 06 43 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb45:	0f 85 8c 02 00 00    	jne    c000edd7 <Computer::displayFeatures()+0x2d1>
c000eb4b:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000eb50:	83 ec 08             	sub    esp,0x8
c000eb53:	50                   	push   eax
c000eb54:	68 5d a9 02 c0       	push   0xc002a95d
c000eb59:	e8 e3 42 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000eb5e:	83 c4 10             	add    esp,0x10
c000eb61:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb68:	0f 85 5f 02 00 00    	jne    c000edcd <Computer::displayFeatures()+0x2c7>
c000eb6e:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000eb73:	83 ec 08             	sub    esp,0x8
c000eb76:	50                   	push   eax
c000eb77:	68 6e a9 02 c0       	push   0xc002a96e
c000eb7c:	e8 c0 42 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000eb81:	83 c4 10             	add    esp,0x10
c000eb84:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb8b:	0f 85 32 02 00 00    	jne    c000edc3 <Computer::displayFeatures()+0x2bd>
c000eb91:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000eb96:	83 ec 08             	sub    esp,0x8
c000eb99:	50                   	push   eax
c000eb9a:	68 7f a9 02 c0       	push   0xc002a97f
c000eb9f:	e8 9d 42 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000eba4:	83 c4 10             	add    esp,0x10
c000eba7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebae:	0f 85 05 02 00 00    	jne    c000edb9 <Computer::displayFeatures()+0x2b3>
c000ebb4:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ebb9:	83 ec 08             	sub    esp,0x8
c000ebbc:	50                   	push   eax
c000ebbd:	68 90 a9 02 c0       	push   0xc002a990
c000ebc2:	e8 7a 42 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ebc7:	83 c4 10             	add    esp,0x10
c000ebca:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebd1:	0f 85 d8 01 00 00    	jne    c000edaf <Computer::displayFeatures()+0x2a9>
c000ebd7:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ebdc:	83 ec 08             	sub    esp,0x8
c000ebdf:	50                   	push   eax
c000ebe0:	68 a1 a9 02 c0       	push   0xc002a9a1
c000ebe5:	e8 57 42 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ebea:	83 c4 10             	add    esp,0x10
c000ebed:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebf4:	0f 85 ab 01 00 00    	jne    c000eda5 <Computer::displayFeatures()+0x29f>
c000ebfa:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ebff:	83 ec 08             	sub    esp,0x8
c000ec02:	50                   	push   eax
c000ec03:	68 b2 a9 02 c0       	push   0xc002a9b2
c000ec08:	e8 34 42 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ec0d:	83 c4 10             	add    esp,0x10
c000ec10:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec17:	0f 88 1b 02 00 00    	js     c000ee38 <Computer::displayFeatures()+0x332>
c000ec1d:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ec22:	83 ec 08             	sub    esp,0x8
c000ec25:	50                   	push   eax
c000ec26:	68 c3 a9 02 c0       	push   0xc002a9c3
c000ec2b:	e8 11 42 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ec30:	83 c4 10             	add    esp,0x10
c000ec33:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec3a:	0f 85 a1 01 00 00    	jne    c000ede1 <Computer::displayFeatures()+0x2db>
c000ec40:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ec45:	83 ec 08             	sub    esp,0x8
c000ec48:	50                   	push   eax
c000ec49:	68 d4 a9 02 c0       	push   0xc002a9d4
c000ec4e:	e8 ee 41 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ec53:	83 c4 10             	add    esp,0x10
c000ec56:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec5d:	0f 85 cb 01 00 00    	jne    c000ee2e <Computer::displayFeatures()+0x328>
c000ec63:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ec68:	83 ec 08             	sub    esp,0x8
c000ec6b:	50                   	push   eax
c000ec6c:	68 e5 a9 02 c0       	push   0xc002a9e5
c000ec71:	e8 cb 41 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ec76:	83 c4 10             	add    esp,0x10
c000ec79:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec80:	0f 85 9e 01 00 00    	jne    c000ee24 <Computer::displayFeatures()+0x31e>
c000ec86:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ec8b:	83 ec 08             	sub    esp,0x8
c000ec8e:	50                   	push   eax
c000ec8f:	68 f6 a9 02 c0       	push   0xc002a9f6
c000ec94:	e8 a8 41 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ec99:	83 c4 10             	add    esp,0x10
c000ec9c:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000eca3:	0f 85 71 01 00 00    	jne    c000ee1a <Computer::displayFeatures()+0x314>
c000eca9:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ecae:	83 ec 08             	sub    esp,0x8
c000ecb1:	50                   	push   eax
c000ecb2:	68 07 aa 02 c0       	push   0xc002aa07
c000ecb7:	e8 85 41 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ecbc:	83 c4 10             	add    esp,0x10
c000ecbf:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecc6:	0f 85 44 01 00 00    	jne    c000ee10 <Computer::displayFeatures()+0x30a>
c000eccc:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ecd1:	83 ec 08             	sub    esp,0x8
c000ecd4:	50                   	push   eax
c000ecd5:	68 18 aa 02 c0       	push   0xc002aa18
c000ecda:	e8 62 41 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ecdf:	83 c4 10             	add    esp,0x10
c000ece2:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ece9:	0f 85 17 01 00 00    	jne    c000ee06 <Computer::displayFeatures()+0x300>
c000ecef:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ecf4:	83 ec 08             	sub    esp,0x8
c000ecf7:	50                   	push   eax
c000ecf8:	68 29 aa 02 c0       	push   0xc002aa29
c000ecfd:	e8 3f 41 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ed02:	83 c4 10             	add    esp,0x10
c000ed05:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed0c:	0f 85 ea 00 00 00    	jne    c000edfc <Computer::displayFeatures()+0x2f6>
c000ed12:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ed17:	83 ec 08             	sub    esp,0x8
c000ed1a:	50                   	push   eax
c000ed1b:	68 3a aa 02 c0       	push   0xc002aa3a
c000ed20:	e8 1c 41 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ed25:	83 c4 10             	add    esp,0x10
c000ed28:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed2f:	0f 88 0d 01 00 00    	js     c000ee42 <Computer::displayFeatures()+0x33c>
c000ed35:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ed3a:	83 ec 08             	sub    esp,0x8
c000ed3d:	50                   	push   eax
c000ed3e:	68 4b aa 02 c0       	push   0xc002aa4b
c000ed43:	e8 f9 40 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ed48:	83 c4 10             	add    esp,0x10
c000ed4b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed52:	0f 85 9a 00 00 00    	jne    c000edf2 <Computer::displayFeatures()+0x2ec>
c000ed58:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ed5d:	83 ec 08             	sub    esp,0x8
c000ed60:	50                   	push   eax
c000ed61:	68 5c aa 02 c0       	push   0xc002aa5c
c000ed66:	e8 d6 40 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ed6b:	83 c4 10             	add    esp,0x10
c000ed6e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed75:	75 74                	jne    c000edeb <Computer::displayFeatures()+0x2e5>
c000ed77:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c000ed7c:	83 ec 08             	sub    esp,0x8
c000ed7f:	50                   	push   eax
c000ed80:	68 6d aa 02 c0       	push   0xc002aa6d
c000ed85:	e8 b7 40 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ed8a:	c7 44 24 20 d4 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c4d4
c000ed92:	83 c4 18             	add    esp,0x18
c000ed95:	5b                   	pop    ebx
c000ed96:	e9 a6 40 00 00       	jmp    c0012e41 <Dbg::kprintf(char const*, ...)>
c000ed9b:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000eda0:	e9 88 fd ff ff       	jmp    c000eb2d <Computer::displayFeatures()+0x27>
c000eda5:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000edaa:	e9 50 fe ff ff       	jmp    c000ebff <Computer::displayFeatures()+0xf9>
c000edaf:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000edb4:	e9 23 fe ff ff       	jmp    c000ebdc <Computer::displayFeatures()+0xd6>
c000edb9:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000edbe:	e9 f6 fd ff ff       	jmp    c000ebb9 <Computer::displayFeatures()+0xb3>
c000edc3:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000edc8:	e9 c9 fd ff ff       	jmp    c000eb96 <Computer::displayFeatures()+0x90>
c000edcd:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000edd2:	e9 9c fd ff ff       	jmp    c000eb73 <Computer::displayFeatures()+0x6d>
c000edd7:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000eddc:	e9 6f fd ff ff       	jmp    c000eb50 <Computer::displayFeatures()+0x4a>
c000ede1:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ede6:	e9 5a fe ff ff       	jmp    c000ec45 <Computer::displayFeatures()+0x13f>
c000edeb:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000edf0:	eb 8a                	jmp    c000ed7c <Computer::displayFeatures()+0x276>
c000edf2:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000edf7:	e9 61 ff ff ff       	jmp    c000ed5d <Computer::displayFeatures()+0x257>
c000edfc:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee01:	e9 11 ff ff ff       	jmp    c000ed17 <Computer::displayFeatures()+0x211>
c000ee06:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee0b:	e9 e4 fe ff ff       	jmp    c000ecf4 <Computer::displayFeatures()+0x1ee>
c000ee10:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee15:	e9 b7 fe ff ff       	jmp    c000ecd1 <Computer::displayFeatures()+0x1cb>
c000ee1a:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee1f:	e9 8a fe ff ff       	jmp    c000ecae <Computer::displayFeatures()+0x1a8>
c000ee24:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee29:	e9 5d fe ff ff       	jmp    c000ec8b <Computer::displayFeatures()+0x185>
c000ee2e:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee33:	e9 30 fe ff ff       	jmp    c000ec68 <Computer::displayFeatures()+0x162>
c000ee38:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee3d:	e9 e0 fd ff ff       	jmp    c000ec22 <Computer::displayFeatures()+0x11c>
c000ee42:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c000ee47:	e9 ee fe ff ff       	jmp    c000ed3a <Computer::displayFeatures()+0x234>

c000ee4c <Computer::rdmsr(unsigned int)>:
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee53:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee5a:	74 0a                	je     c000ee66 <Computer::rdmsr(unsigned int)+0x1a>
c000ee5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee60:	0f 32                	rdmsr  
c000ee62:	83 c4 0c             	add    esp,0xc
c000ee65:	c3                   	ret    
c000ee66:	83 ec 0c             	sub    esp,0xc
c000ee69:	68 7e aa 02 c0       	push   0xc002aa7e
c000ee6e:	e8 88 b9 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000ee73:	83 c4 10             	add    esp,0x10
c000ee76:	eb e4                	jmp    c000ee5c <Computer::rdmsr(unsigned int)+0x10>

c000ee78 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee78:	57                   	push   edi
c000ee79:	56                   	push   esi
c000ee7a:	52                   	push   edx
c000ee7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee7f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee83:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee87:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8e:	74 0e                	je     c000ee9e <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee94:	89 f0                	mov    eax,esi
c000ee96:	89 fa                	mov    edx,edi
c000ee98:	0f 30                	wrmsr  
c000ee9a:	58                   	pop    eax
c000ee9b:	5e                   	pop    esi
c000ee9c:	5f                   	pop    edi
c000ee9d:	c3                   	ret    
c000ee9e:	83 ec 0c             	sub    esp,0xc
c000eea1:	68 84 aa 02 c0       	push   0xc002aa84
c000eea6:	e8 50 b9 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000eeab:	83 c4 10             	add    esp,0x10
c000eeae:	eb e0                	jmp    c000ee90 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eeb0 <Computer::nmiEnabled()>:
c000eeb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeb4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::readCMOS(unsigned char)>:
c000eebc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eec7:	19 c0                	sbb    eax,eax
c000eec9:	83 e0 80             	and    eax,0xffffff80
c000eecc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eed0:	e6 70                	out    0x70,al
c000eed2:	e4 71                	in     al,0x71
c000eed4:	c3                   	ret    
c000eed5:	90                   	nop

c000eed6 <Computer::enableNMI(bool)>:
c000eed6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eeda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eede:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eee4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eeec:	eb ce                	jmp    c000eebc <Computer::readCMOS(unsigned char)>

c000eeee <Computer::open(int, int, void*)>:
c000eeee:	56                   	push   esi
c000eeef:	53                   	push   ebx
c000eef0:	83 ec 10             	sub    esp,0x10
c000eef3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eef7:	f6 05 80 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee80,0x4
c000eefe:	68 68 12 00 00       	push   0x1268
c000ef03:	0f 94 05 a4 dd 02 c0 	sete   BYTE PTR ds:0xc002dda4
c000ef0a:	e8 97 09 00 00       	call   c000f8a6 <malloc>
c000ef0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef12:	89 c6                	mov    esi,eax
c000ef14:	e8 9d 93 00 00       	call   c00182b6 <ACPI::ACPI()>
c000ef19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef1f:	58                   	pop    eax
c000ef20:	5a                   	pop    edx
c000ef21:	56                   	push   esi
c000ef22:	53                   	push   ebx
c000ef23:	e8 3a 53 00 00       	call   c0014262 <Device::addChild(Device*)>
c000ef28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef2b:	e8 cc f9 ff ff       	call   c000e8fc <Computer::detectFeatures()>
c000ef30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef33:	e8 ce fb ff ff       	call   c000eb06 <Computer::displayFeatures()>
c000ef38:	59                   	pop    ecx
c000ef39:	5e                   	pop    esi
c000ef3a:	6a 01                	push   0x1
c000ef3c:	53                   	push   ebx
c000ef3d:	e8 94 ff ff ff       	call   c000eed6 <Computer::enableNMI(bool)>
c000ef42:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef49:	e8 58 09 00 00       	call   c000f8a6 <malloc>
c000ef4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef51:	89 c6                	mov    esi,eax
c000ef53:	e8 92 a0 00 00       	call   c0018fea <CPU::CPU()>
c000ef58:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef5e:	58                   	pop    eax
c000ef5f:	5a                   	pop    edx
c000ef60:	56                   	push   esi
c000ef61:	53                   	push   ebx
c000ef62:	e8 fb 52 00 00       	call   c0014262 <Device::addChild(Device*)>
c000ef67:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef6d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef73:	6a 00                	push   0x0
c000ef75:	6a 00                	push   0x0
c000ef77:	50                   	push   eax
c000ef78:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef7b:	83 c4 20             	add    esp,0x20
c000ef7e:	e8 73 58 00 00       	call   c00147f6 <setupFPU()>
c000ef83:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef89:	85 c0                	test   eax,eax
c000ef8b:	74 1f                	je     c000efac <Computer::open(int, int, void*)+0xbe>
c000ef8d:	83 ec 08             	sub    esp,0x8
c000ef90:	50                   	push   eax
c000ef91:	53                   	push   ebx
c000ef92:	e8 cb 52 00 00       	call   c0014262 <Device::addChild(Device*)>
c000ef97:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef9f:	6a 00                	push   0x0
c000efa1:	6a 00                	push   0x0
c000efa3:	6a 00                	push   0x0
c000efa5:	50                   	push   eax
c000efa6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efa9:	83 c4 20             	add    esp,0x20
c000efac:	83 ec 0c             	sub    esp,0xc
c000efaf:	68 ae e6 00 c0       	push   0xc000e6ae
c000efb4:	e8 c5 f3 00 00       	call   c001e37e <setupMultitasking(void (*)())>
c000efb9:	83 c4 14             	add    esp,0x14
c000efbc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efc1:	5b                   	pop    ebx
c000efc2:	5e                   	pop    esi
c000efc3:	c3                   	ret    

c000efc4 <Computer::disableNMI()>:
c000efc4:	6a 00                	push   0x0
c000efc6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efca:	e8 07 ff ff ff       	call   c000eed6 <Computer::enableNMI(bool)>
c000efcf:	58                   	pop    eax
c000efd0:	5a                   	pop    edx
c000efd1:	c3                   	ret    

c000efd2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efd6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efdd:	19 c0                	sbb    eax,eax
c000efdf:	83 e0 80             	and    eax,0xffffff80
c000efe2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efe6:	e6 70                	out    0x70,al
c000efe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efec:	e6 71                	out    0x71,al
c000efee:	c3                   	ret    
c000efef:	90                   	nop

c000eff0 <Computer::handleNMI()>:
c000eff0:	56                   	push   esi
c000eff1:	53                   	push   ebx
c000eff2:	83 ec 10             	sub    esp,0x10
c000eff5:	e4 92                	in     al,0x92
c000eff7:	89 c6                	mov    esi,eax
c000eff9:	e4 61                	in     al,0x61
c000effb:	68 8a aa 02 c0       	push   0xc002aa8a
c000f000:	88 c3                	mov    bl,al
c000f002:	e8 3a 3e 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000f007:	83 c4 10             	add    esp,0x10
c000f00a:	83 e6 10             	and    esi,0x10
c000f00d:	75 0d                	jne    c000f01c <Computer::handleNMI()+0x2c>
c000f00f:	f6 c3 40             	test   bl,0x40
c000f012:	75 1d                	jne    c000f031 <Computer::handleNMI()+0x41>
c000f014:	84 db                	test   bl,bl
c000f016:	78 2d                	js     c000f045 <Computer::handleNMI()+0x55>
c000f018:	58                   	pop    eax
c000f019:	5b                   	pop    ebx
c000f01a:	5e                   	pop    esi
c000f01b:	c3                   	ret    
c000f01c:	83 ec 0c             	sub    esp,0xc
c000f01f:	68 9b aa 02 c0       	push   0xc002aa9b
c000f024:	e8 d2 b7 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000f029:	83 c4 10             	add    esp,0x10
c000f02c:	f6 c3 40             	test   bl,0x40
c000f02f:	74 e3                	je     c000f014 <Computer::handleNMI()+0x24>
c000f031:	83 ec 0c             	sub    esp,0xc
c000f034:	68 a8 aa 02 c0       	push   0xc002aaa8
c000f039:	e8 bd b7 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000f03e:	83 c4 10             	add    esp,0x10
c000f041:	84 db                	test   bl,bl
c000f043:	79 d3                	jns    c000f018 <Computer::handleNMI()+0x28>
c000f045:	c7 44 24 10 b2 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aab2
c000f04d:	5a                   	pop    edx
c000f04e:	5b                   	pop    ebx
c000f04f:	5e                   	pop    esi
c000f050:	e9 a6 b7 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c000f055:	90                   	nop

c000f056 <Computer::setDiskActivityLight(int, bool)>:
c000f056:	56                   	push   esi
c000f057:	53                   	push   ebx
c000f058:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f05c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f061:	77 1b                	ja     c000f07e <Computer::setDiskActivityLight(int, bool)+0x28>
c000f063:	e4 92                	in     al,0x92
c000f065:	bb 40 00 00 00       	mov    ebx,0x40
c000f06a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f06e:	89 da                	mov    edx,ebx
c000f070:	d3 e2                	shl    edx,cl
c000f072:	89 f1                	mov    ecx,esi
c000f074:	f7 d2                	not    edx
c000f076:	d3 e3                	shl    ebx,cl
c000f078:	21 d0                	and    eax,edx
c000f07a:	09 d8                	or     eax,ebx
c000f07c:	e6 92                	out    0x92,al
c000f07e:	5b                   	pop    ebx
c000f07f:	5e                   	pop    esi
c000f080:	c3                   	ret    
c000f081:	90                   	nop

c000f082 <GDTEntry::setBase(unsigned int)>:
c000f082:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f086:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f08a:	89 c1                	mov    ecx,eax
c000f08c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f090:	c1 e9 10             	shr    ecx,0x10
c000f093:	c1 e8 18             	shr    eax,0x18
c000f096:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f099:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f09c:	c3                   	ret    
c000f09d:	90                   	nop

c000f09e <GDTEntry::setLimit(unsigned int)>:
c000f09e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0a9:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0ac:	83 e2 f0             	and    edx,0xfffffff0
c000f0af:	c1 e8 10             	shr    eax,0x10
c000f0b2:	83 e0 0f             	and    eax,0xf
c000f0b5:	09 d0                	or     eax,edx
c000f0b7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0ba:	c3                   	ret    
c000f0bb:	90                   	nop

c000f0bc <GDT::GDT()>:
c000f0bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0d0:	90                   	nop
c000f0d1:	c3                   	ret    

c000f0d2 <GDT::addEntry(GDTEntry)>:
c000f0d2:	53                   	push   ebx
c000f0d3:	83 ec 0c             	sub    esp,0xc
c000f0d6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0da:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0dc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0e3:	52                   	push   edx
c000f0e4:	50                   	push   eax
c000f0e5:	68 ec aa 02 c0       	push   0xc002aaec
c000f0ea:	e8 52 3d 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000f0ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0f1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0f5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0f9:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0fd:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f101:	8d 50 01             	lea    edx,[eax+0x1]
c000f104:	c1 e0 03             	shl    eax,0x3
c000f107:	89 13                	mov    DWORD PTR [ebx],edx
c000f109:	83 c4 18             	add    esp,0x18
c000f10c:	5b                   	pop    ebx
c000f10d:	c3                   	ret    

c000f10e <GDT::getNumberOfEntries()>:
c000f10e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f112:	8b 00                	mov    eax,DWORD PTR [eax]
c000f114:	c3                   	ret    
c000f115:	90                   	nop

c000f116 <GDT::flush()>:
c000f116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f11a:	8b 10                	mov    edx,DWORD PTR [eax]
c000f11c:	83 c0 04             	add    eax,0x4
c000f11f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f126:	a3 72 ee 02 c0       	mov    ds:0xc002ee72,eax
c000f12b:	66 89 15 70 ee 02 c0 	mov    WORD PTR ds:0xc002ee70,dx
c000f132:	e9 19 13 ff ff       	jmp    c0000450 <loadGDT>
c000f137:	90                   	nop

c000f138 <GDT::setup()>:
c000f138:	55                   	push   ebp
c000f139:	57                   	push   edi
c000f13a:	56                   	push   esi
c000f13b:	53                   	push   ebx
c000f13c:	83 ec 3c             	sub    esp,0x3c
c000f13f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f143:	6a 00                	push   0x0
c000f145:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f149:	53                   	push   ebx
c000f14a:	e8 33 ff ff ff       	call   c000f082 <GDTEntry::setBase(unsigned int)>
c000f14f:	6a 00                	push   0x0
c000f151:	53                   	push   ebx
c000f152:	e8 47 ff ff ff       	call   c000f09e <GDTEntry::setLimit(unsigned int)>
c000f157:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f15f:	6a 00                	push   0x0
c000f161:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f165:	53                   	push   ebx
c000f166:	e8 17 ff ff ff       	call   c000f082 <GDTEntry::setBase(unsigned int)>
c000f16b:	68 ff ff ff 00       	push   0xffffff
c000f170:	53                   	push   ebx
c000f171:	e8 28 ff ff ff       	call   c000f09e <GDTEntry::setLimit(unsigned int)>
c000f176:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f17a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f17f:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f184:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f188:	83 c4 20             	add    esp,0x20
c000f18b:	6a 00                	push   0x0
c000f18d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f191:	53                   	push   ebx
c000f192:	e8 eb fe ff ff       	call   c000f082 <GDTEntry::setBase(unsigned int)>
c000f197:	68 ff ff ff 00       	push   0xffffff
c000f19c:	53                   	push   ebx
c000f19d:	e8 fc fe ff ff       	call   c000f09e <GDTEntry::setLimit(unsigned int)>
c000f1a2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1a6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1aa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1ae:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1b2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1b6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1bb:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1c0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1c4:	89 d8                	mov    eax,ebx
c000f1c6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1ca:	80 cc 60             	or     ah,0x60
c000f1cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1d1:	83 c4 0c             	add    esp,0xc
c000f1d4:	89 f8                	mov    eax,edi
c000f1d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1da:	80 cc 60             	or     ah,0x60
c000f1dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1e1:	89 c7                	mov    edi,eax
c000f1e3:	55                   	push   ebp
c000f1e4:	e8 e9 fe ff ff       	call   c000f0d2 <GDT::addEntry(GDTEntry)>
c000f1e9:	83 c4 0c             	add    esp,0xc
c000f1ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1f4:	55                   	push   ebp
c000f1f5:	e8 d8 fe ff ff       	call   c000f0d2 <GDT::addEntry(GDTEntry)>
c000f1fa:	83 c4 0c             	add    esp,0xc
c000f1fd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f201:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f205:	55                   	push   ebp
c000f206:	e8 c7 fe ff ff       	call   c000f0d2 <GDT::addEntry(GDTEntry)>
c000f20b:	83 c4 0c             	add    esp,0xc
c000f20e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f212:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f216:	53                   	push   ebx
c000f217:	51                   	push   ecx
c000f218:	55                   	push   ebp
c000f219:	e8 b4 fe ff ff       	call   c000f0d2 <GDT::addEntry(GDTEntry)>
c000f21e:	83 c4 0c             	add    esp,0xc
c000f221:	57                   	push   edi
c000f222:	56                   	push   esi
c000f223:	55                   	push   ebp
c000f224:	e8 a9 fe ff ff       	call   c000f0d2 <GDT::addEntry(GDTEntry)>
c000f229:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f22c:	e8 e5 fe ff ff       	call   c000f116 <GDT::flush()>
c000f231:	83 c4 4c             	add    esp,0x4c
c000f234:	5b                   	pop    ebx
c000f235:	5e                   	pop    esi
c000f236:	5f                   	pop    edi
c000f237:	5d                   	pop    ebp
c000f238:	c3                   	ret    

c000f239 <idleFunction(void*)>:
c000f239:	53                   	push   ebx
c000f23a:	83 ec 08             	sub    esp,0x8
c000f23d:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000f242:	48                   	dec    eax
c000f243:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000f248:	75 01                	jne    c000f24b <idleFunction(void*)+0x12>
c000f24a:	fb                   	sti    
c000f24b:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c000f250:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f256:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f25d:	74 3c                	je     c000f29b <idleFunction(void*)+0x62>
c000f25f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f266:	74 33                	je     c000f29b <idleFunction(void*)+0x62>
c000f268:	31 db                	xor    ebx,ebx
c000f26a:	52                   	push   edx
c000f26b:	52                   	push   edx
c000f26c:	68 e1 00 00 00       	push   0xe1
c000f271:	50                   	push   eax
c000f272:	e8 d5 fb ff ff       	call   c000ee4c <Computer::rdmsr(unsigned int)>
c000f277:	53                   	push   ebx
c000f278:	83 e0 02             	and    eax,0x2
c000f27b:	50                   	push   eax
c000f27c:	68 e1 00 00 00       	push   0xe1
c000f281:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c000f287:	e8 ec fb ff ff       	call   c000ee78 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f28c:	83 c4 20             	add    esp,0x20
c000f28f:	e8 eb 0f ff ff       	call   c000027f <doTPAUSE>
c000f294:	e8 57 9c 01 00       	call   c0028ef0 <idleCommon()>
c000f299:	eb f4                	jmp    c000f28f <idleFunction(void*)+0x56>
c000f29b:	fb                   	sti    
c000f29c:	f4                   	hlt    
c000f29d:	e8 4e 9c 01 00       	call   c0028ef0 <idleCommon()>
c000f2a2:	eb f7                	jmp    c000f29b <idleFunction(void*)+0x62>

c000f2a4 <IDTEntry::IDTEntry(bool)>:
c000f2a4:	83 ec 04             	sub    esp,0x4
c000f2a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2ab:	88 04 24             	mov    BYTE PTR [esp],al
c000f2ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2bc:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2c7:	83 e2 f0             	and    edx,0xfffffff0
c000f2ca:	83 ca 0e             	or     edx,0xe
c000f2cd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2d7:	83 e2 ef             	and    edx,0xffffffef
c000f2da:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2dd:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2e1:	74 04                	je     c000f2e7 <IDTEntry::IDTEntry(bool)+0x43>
c000f2e3:	b2 03                	mov    dl,0x3
c000f2e5:	eb 02                	jmp    c000f2e9 <IDTEntry::IDTEntry(bool)+0x45>
c000f2e7:	b2 00                	mov    dl,0x0
c000f2e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ed:	83 e2 03             	and    edx,0x3
c000f2f0:	88 d1                	mov    cl,dl
c000f2f2:	c1 e1 05             	shl    ecx,0x5
c000f2f5:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2f8:	83 e2 9f             	and    edx,0xffffff9f
c000f2fb:	09 ca                	or     edx,ecx
c000f2fd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f300:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f304:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f307:	83 ca 80             	or     edx,0xffffff80
c000f30a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f30d:	90                   	nop
c000f30e:	83 c4 04             	add    esp,0x4
c000f311:	c3                   	ret    

c000f312 <IDTEntry::setOffset(unsigned int)>:
c000f312:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f316:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31a:	66 89 02             	mov    WORD PTR [edx],ax
c000f31d:	c1 e8 10             	shr    eax,0x10
c000f320:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f324:	c3                   	ret    
c000f325:	90                   	nop

c000f326 <IDT::IDT()>:
c000f326:	90                   	nop
c000f327:	c3                   	ret    

c000f328 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f32c:	83 c0 30             	add    eax,0x30
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(IDTEntry, int)>:
c000f330:	53                   	push   ebx
c000f331:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f335:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f339:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f33d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f341:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f344:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f348:	5b                   	pop    ebx
c000f349:	c3                   	ret    

c000f34a <IDT::addEntry(int, void (*)(), bool)>:
c000f34a:	53                   	push   ebx
c000f34b:	83 ec 10             	sub    esp,0x10
c000f34e:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f353:	50                   	push   eax
c000f354:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f358:	53                   	push   ebx
c000f359:	e8 46 ff ff ff       	call   c000f2a4 <IDTEntry::IDTEntry(bool)>
c000f35e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f362:	53                   	push   ebx
c000f363:	e8 aa ff ff ff       	call   c000f312 <IDTEntry::setOffset(unsigned int)>
c000f368:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f36c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f370:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f378:	e8 b3 ff ff ff       	call   c000f330 <IDT::addEntry(IDTEntry, int)>
c000f37d:	83 c4 30             	add    esp,0x30
c000f380:	5b                   	pop    ebx
c000f381:	c3                   	ret    

c000f382 <IDT::flush()>:
c000f382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f386:	66 c7 05 78 ee 02 c0 ff 07 	mov    WORD PTR ds:0xc002ee78,0x7ff
c000f38f:	a3 7a ee 02 c0       	mov    ds:0xc002ee7a,eax
c000f394:	0f 01 1d 78 ee 02 c0 	lidtd  ds:0xc002ee78
c000f39b:	c3                   	ret    

c000f39c <IDT::setup()>:
c000f39c:	57                   	push   edi
c000f39d:	56                   	push   esi
c000f39e:	53                   	push   ebx
c000f39f:	83 ec 10             	sub    esp,0x10
c000f3a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3a6:	6a 00                	push   0x0
c000f3a8:	68 70 04 00 c0       	push   0xc0000470
c000f3ad:	6a 00                	push   0x0
c000f3af:	53                   	push   ebx
c000f3b0:	e8 95 ff ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f3b5:	6a 00                	push   0x0
c000f3b7:	68 80 04 00 c0       	push   0xc0000480
c000f3bc:	6a 01                	push   0x1
c000f3be:	53                   	push   ebx
c000f3bf:	e8 86 ff ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f3c4:	83 c4 20             	add    esp,0x20
c000f3c7:	6a 00                	push   0x0
c000f3c9:	68 8a 04 00 c0       	push   0xc000048a
c000f3ce:	6a 02                	push   0x2
c000f3d0:	53                   	push   ebx
c000f3d1:	e8 74 ff ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f3d6:	6a 00                	push   0x0
c000f3d8:	68 94 04 00 c0       	push   0xc0000494
c000f3dd:	6a 03                	push   0x3
c000f3df:	53                   	push   ebx
c000f3e0:	e8 65 ff ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f3e5:	83 c4 20             	add    esp,0x20
c000f3e8:	6a 00                	push   0x0
c000f3ea:	68 9e 04 00 c0       	push   0xc000049e
c000f3ef:	6a 04                	push   0x4
c000f3f1:	53                   	push   ebx
c000f3f2:	e8 53 ff ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f3f7:	6a 00                	push   0x0
c000f3f9:	68 a8 04 00 c0       	push   0xc00004a8
c000f3fe:	6a 05                	push   0x5
c000f400:	53                   	push   ebx
c000f401:	e8 44 ff ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f406:	83 c4 20             	add    esp,0x20
c000f409:	6a 00                	push   0x0
c000f40b:	68 b2 04 00 c0       	push   0xc00004b2
c000f410:	6a 06                	push   0x6
c000f412:	53                   	push   ebx
c000f413:	e8 32 ff ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f418:	6a 00                	push   0x0
c000f41a:	68 bc 04 00 c0       	push   0xc00004bc
c000f41f:	6a 07                	push   0x7
c000f421:	53                   	push   ebx
c000f422:	e8 23 ff ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f427:	83 c4 20             	add    esp,0x20
c000f42a:	6a 00                	push   0x0
c000f42c:	68 c6 04 00 c0       	push   0xc00004c6
c000f431:	6a 08                	push   0x8
c000f433:	53                   	push   ebx
c000f434:	e8 11 ff ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f439:	6a 00                	push   0x0
c000f43b:	68 ce 04 00 c0       	push   0xc00004ce
c000f440:	6a 09                	push   0x9
c000f442:	53                   	push   ebx
c000f443:	e8 02 ff ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f448:	83 c4 20             	add    esp,0x20
c000f44b:	6a 00                	push   0x0
c000f44d:	68 d8 04 00 c0       	push   0xc00004d8
c000f452:	6a 0a                	push   0xa
c000f454:	53                   	push   ebx
c000f455:	e8 f0 fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f45a:	6a 00                	push   0x0
c000f45c:	68 e0 04 00 c0       	push   0xc00004e0
c000f461:	6a 0b                	push   0xb
c000f463:	53                   	push   ebx
c000f464:	e8 e1 fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f469:	83 c4 20             	add    esp,0x20
c000f46c:	6a 00                	push   0x0
c000f46e:	68 e8 04 00 c0       	push   0xc00004e8
c000f473:	6a 0c                	push   0xc
c000f475:	53                   	push   ebx
c000f476:	e8 cf fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f47b:	6a 00                	push   0x0
c000f47d:	68 f0 04 00 c0       	push   0xc00004f0
c000f482:	6a 0d                	push   0xd
c000f484:	53                   	push   ebx
c000f485:	e8 c0 fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f48a:	83 c4 20             	add    esp,0x20
c000f48d:	6a 00                	push   0x0
c000f48f:	68 f8 04 00 c0       	push   0xc00004f8
c000f494:	6a 0e                	push   0xe
c000f496:	53                   	push   ebx
c000f497:	e8 ae fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f49c:	6a 00                	push   0x0
c000f49e:	68 00 05 00 c0       	push   0xc0000500
c000f4a3:	6a 0f                	push   0xf
c000f4a5:	53                   	push   ebx
c000f4a6:	e8 9f fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f4ab:	83 c4 20             	add    esp,0x20
c000f4ae:	6a 00                	push   0x0
c000f4b0:	68 0a 05 00 c0       	push   0xc000050a
c000f4b5:	6a 10                	push   0x10
c000f4b7:	53                   	push   ebx
c000f4b8:	e8 8d fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f4bd:	6a 00                	push   0x0
c000f4bf:	68 14 05 00 c0       	push   0xc0000514
c000f4c4:	6a 11                	push   0x11
c000f4c6:	53                   	push   ebx
c000f4c7:	e8 7e fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f4cc:	83 c4 20             	add    esp,0x20
c000f4cf:	6a 00                	push   0x0
c000f4d1:	68 1e 05 00 c0       	push   0xc000051e
c000f4d6:	6a 12                	push   0x12
c000f4d8:	53                   	push   ebx
c000f4d9:	e8 6c fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f4de:	6a 01                	push   0x1
c000f4e0:	68 b8 05 00 c0       	push   0xc00005b8
c000f4e5:	6a 60                	push   0x60
c000f4e7:	53                   	push   ebx
c000f4e8:	e8 5d fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f4ed:	83 c4 20             	add    esp,0x20
c000f4f0:	6a 00                	push   0x0
c000f4f2:	68 bf 05 00 c0       	push   0xc00005bf
c000f4f7:	6a 20                	push   0x20
c000f4f9:	53                   	push   ebx
c000f4fa:	e8 4b fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f4ff:	6a 00                	push   0x0
c000f501:	68 aa 05 00 c0       	push   0xc00005aa
c000f506:	6a 21                	push   0x21
c000f508:	53                   	push   ebx
c000f509:	e8 3c fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f50e:	83 c4 20             	add    esp,0x20
c000f511:	6a 00                	push   0x0
c000f513:	68 b1 05 00 c0       	push   0xc00005b1
c000f518:	6a 22                	push   0x22
c000f51a:	53                   	push   ebx
c000f51b:	e8 2a fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f520:	6a 00                	push   0x0
c000f522:	68 28 05 00 c0       	push   0xc0000528
c000f527:	6a 23                	push   0x23
c000f529:	53                   	push   ebx
c000f52a:	e8 1b fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f52f:	83 c4 20             	add    esp,0x20
c000f532:	6a 00                	push   0x0
c000f534:	68 32 05 00 c0       	push   0xc0000532
c000f539:	6a 24                	push   0x24
c000f53b:	53                   	push   ebx
c000f53c:	e8 09 fe ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f541:	6a 00                	push   0x0
c000f543:	68 3c 05 00 c0       	push   0xc000053c
c000f548:	6a 25                	push   0x25
c000f54a:	53                   	push   ebx
c000f54b:	e8 fa fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f550:	83 c4 20             	add    esp,0x20
c000f553:	6a 00                	push   0x0
c000f555:	68 46 05 00 c0       	push   0xc0000546
c000f55a:	6a 26                	push   0x26
c000f55c:	53                   	push   ebx
c000f55d:	e8 e8 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f562:	6a 00                	push   0x0
c000f564:	68 50 05 00 c0       	push   0xc0000550
c000f569:	6a 27                	push   0x27
c000f56b:	53                   	push   ebx
c000f56c:	e8 d9 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f571:	83 c4 20             	add    esp,0x20
c000f574:	6a 00                	push   0x0
c000f576:	68 5a 05 00 c0       	push   0xc000055a
c000f57b:	6a 28                	push   0x28
c000f57d:	53                   	push   ebx
c000f57e:	e8 c7 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f583:	6a 00                	push   0x0
c000f585:	68 64 05 00 c0       	push   0xc0000564
c000f58a:	6a 29                	push   0x29
c000f58c:	53                   	push   ebx
c000f58d:	e8 b8 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f592:	83 c4 20             	add    esp,0x20
c000f595:	6a 00                	push   0x0
c000f597:	68 6e 05 00 c0       	push   0xc000056e
c000f59c:	6a 2a                	push   0x2a
c000f59e:	53                   	push   ebx
c000f59f:	e8 a6 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f5a4:	6a 00                	push   0x0
c000f5a6:	68 78 05 00 c0       	push   0xc0000578
c000f5ab:	6a 2b                	push   0x2b
c000f5ad:	53                   	push   ebx
c000f5ae:	e8 97 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f5b3:	83 c4 20             	add    esp,0x20
c000f5b6:	6a 00                	push   0x0
c000f5b8:	68 82 05 00 c0       	push   0xc0000582
c000f5bd:	6a 2c                	push   0x2c
c000f5bf:	53                   	push   ebx
c000f5c0:	e8 85 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f5c5:	6a 00                	push   0x0
c000f5c7:	68 8c 05 00 c0       	push   0xc000058c
c000f5cc:	6a 2d                	push   0x2d
c000f5ce:	53                   	push   ebx
c000f5cf:	e8 76 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f5d4:	83 c4 20             	add    esp,0x20
c000f5d7:	6a 00                	push   0x0
c000f5d9:	68 96 05 00 c0       	push   0xc0000596
c000f5de:	6a 2e                	push   0x2e
c000f5e0:	53                   	push   ebx
c000f5e1:	e8 64 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f5e6:	6a 00                	push   0x0
c000f5e8:	68 a0 05 00 c0       	push   0xc00005a0
c000f5ed:	6a 2f                	push   0x2f
c000f5ef:	53                   	push   ebx
c000f5f0:	e8 55 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f5f5:	83 c4 20             	add    esp,0x20
c000f5f8:	6a 00                	push   0x0
c000f5fa:	68 f6 05 00 c0       	push   0xc00005f6
c000f5ff:	6a 30                	push   0x30
c000f601:	53                   	push   ebx
c000f602:	e8 43 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f607:	6a 00                	push   0x0
c000f609:	68 00 06 00 c0       	push   0xc0000600
c000f60e:	6a 31                	push   0x31
c000f610:	53                   	push   ebx
c000f611:	e8 34 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f616:	83 c4 20             	add    esp,0x20
c000f619:	6a 00                	push   0x0
c000f61b:	68 0a 06 00 c0       	push   0xc000060a
c000f620:	6a 32                	push   0x32
c000f622:	53                   	push   ebx
c000f623:	e8 22 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f628:	6a 00                	push   0x0
c000f62a:	68 14 06 00 c0       	push   0xc0000614
c000f62f:	6a 33                	push   0x33
c000f631:	53                   	push   ebx
c000f632:	e8 13 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f637:	83 c4 20             	add    esp,0x20
c000f63a:	6a 00                	push   0x0
c000f63c:	68 1e 06 00 c0       	push   0xc000061e
c000f641:	6a 34                	push   0x34
c000f643:	53                   	push   ebx
c000f644:	e8 01 fd ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f649:	6a 00                	push   0x0
c000f64b:	68 28 06 00 c0       	push   0xc0000628
c000f650:	6a 35                	push   0x35
c000f652:	53                   	push   ebx
c000f653:	e8 f2 fc ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f658:	83 c4 20             	add    esp,0x20
c000f65b:	6a 00                	push   0x0
c000f65d:	68 32 06 00 c0       	push   0xc0000632
c000f662:	6a 36                	push   0x36
c000f664:	53                   	push   ebx
c000f665:	e8 e0 fc ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f66a:	6a 00                	push   0x0
c000f66c:	68 3c 06 00 c0       	push   0xc000063c
c000f671:	6a 37                	push   0x37
c000f673:	53                   	push   ebx
c000f674:	e8 d1 fc ff ff       	call   c000f34a <IDT::addEntry(int, void (*)(), bool)>
c000f679:	83 c4 1c             	add    esp,0x1c
c000f67c:	6a 03                	push   0x3
c000f67e:	6a 02                	push   0x2
c000f680:	ff 35 f0 ef 02 c0    	push   DWORD PTR ds:0xc002eff0
c000f686:	e8 e9 2c 00 00       	call   c0012374 <VAS::allocatePages(int, int)>
c000f68b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f692:	89 c6                	mov    esi,eax
c000f694:	e8 0d 02 00 00       	call   c000f8a6 <malloc>
c000f699:	81 c6 00 20 00 00    	add    esi,0x2000
c000f69f:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6a2:	89 c7                	mov    edi,eax
c000f6a4:	e8 c3 1c 00 00       	call   c001136c <TSS::TSS()>
c000f6a9:	83 c4 0c             	add    esp,0xc
c000f6ac:	68 c6 04 00 c0       	push   0xc00004c6
c000f6b1:	56                   	push   esi
c000f6b2:	57                   	push   edi
c000f6b3:	e8 f4 1c 00 00       	call   c00113ac <TSS::setup(unsigned long, unsigned long)>
c000f6b8:	89 c6                	mov    esi,eax
c000f6ba:	58                   	pop    eax
c000f6bb:	5a                   	pop    edx
c000f6bc:	6a 00                	push   0x0
c000f6be:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6c2:	50                   	push   eax
c000f6c3:	e8 dc fb ff ff       	call   c000f2a4 <IDTEntry::IDTEntry(bool)>
c000f6c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6cc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6d1:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6d8:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6e2:	80 ce 05             	or     dh,0x5
c000f6e5:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6f0:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6f6:	e8 87 fc ff ff       	call   c000f382 <IDT::flush()>
c000f6fb:	83 c4 20             	add    esp,0x20
c000f6fe:	5b                   	pop    ebx
c000f6ff:	5e                   	pop    esi
c000f700:	5f                   	pop    edi
c000f701:	c3                   	ret    

c000f702 <sbrk>:
c000f702:	55                   	push   ebp
c000f703:	57                   	push   edi
c000f704:	56                   	push   esi
c000f705:	53                   	push   ebx
c000f706:	83 ec 1c             	sub    esp,0x1c
c000f709:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f70d:	85 c0                	test   eax,eax
c000f70f:	74 3e                	je     c000f74f <sbrk+0x4d>
c000f711:	78 43                	js     c000f756 <sbrk+0x54>
c000f713:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c000f719:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f71f:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f725:	83 e2 01             	and    edx,0x1
c000f728:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f72c:	8b 0d 94 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dd94
c000f732:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f736:	05 ff 0f 00 00       	add    eax,0xfff
c000f73b:	89 c2                	mov    edx,eax
c000f73d:	78 2f                	js     c000f76e <sbrk+0x6c>
c000f73f:	c1 fa 0c             	sar    edx,0xc
c000f742:	89 d7                	mov    edi,edx
c000f744:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f748:	be 00 00 00 00       	mov    esi,0x0
c000f74d:	eb 36                	jmp    c000f785 <sbrk+0x83>
c000f74f:	a1 94 dd 02 c0       	mov    eax,ds:0xc002dd94
c000f754:	eb 73                	jmp    c000f7c9 <sbrk+0xc7>
c000f756:	83 ec 08             	sub    esp,0x8
c000f759:	50                   	push   eax
c000f75a:	68 08 ab 02 c0       	push   0xc002ab08
c000f75f:	e8 dd 36 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000f764:	83 c4 10             	add    esp,0x10
c000f767:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f76c:	eb 5b                	jmp    c000f7c9 <sbrk+0xc7>
c000f76e:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f774:	eb c9                	jmp    c000f73f <sbrk+0x3d>
c000f776:	81 05 94 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dd94,0x1000
c000f780:	46                   	inc    esi
c000f781:	39 f7                	cmp    edi,esi
c000f783:	74 33                	je     c000f7b8 <sbrk+0xb6>
c000f785:	8b 1d f0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff0
c000f78b:	8b 2d 94 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002dd94
c000f791:	e8 7c 07 00 00       	call   c000ff12 <Phys::allocatePage()>
c000f796:	68 01 0c 00 00       	push   0xc01
c000f79b:	55                   	push   ebp
c000f79c:	50                   	push   eax
c000f79d:	53                   	push   ebx
c000f79e:	e8 cf 2a 00 00       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7a3:	83 c4 10             	add    esp,0x10
c000f7a6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7ab:	74 c9                	je     c000f776 <sbrk+0x74>
c000f7ad:	8b 1d 94 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd94
c000f7b3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7b6:	eb be                	jmp    c000f776 <sbrk+0x74>
c000f7b8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7bd:	75 12                	jne    c000f7d1 <sbrk+0xcf>
c000f7bf:	0f 20 d8             	mov    eax,cr3
c000f7c2:	0f 22 d8             	mov    cr3,eax
c000f7c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7c9:	83 c4 1c             	add    esp,0x1c
c000f7cc:	5b                   	pop    ebx
c000f7cd:	5e                   	pop    esi
c000f7ce:	5f                   	pop    edi
c000f7cf:	5d                   	pop    ebp
c000f7d0:	c3                   	ret    
c000f7d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7d5:	89 cb                	mov    ebx,ecx
c000f7d7:	c1 eb 0a             	shr    ebx,0xa
c000f7da:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7e0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7ea:	c1 e0 0c             	shl    eax,0xc
c000f7ed:	01 c8                	add    eax,ecx
c000f7ef:	c1 e8 0a             	shr    eax,0xa
c000f7f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7f7:	2d 00 00 40 00       	sub    eax,0x400000
c000f7fc:	39 c3                	cmp    ebx,eax
c000f7fe:	77 c5                	ja     c000f7c5 <sbrk+0xc3>
c000f800:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f803:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f809:	39 d8                	cmp    eax,ebx
c000f80b:	73 f3                	jae    c000f800 <sbrk+0xfe>
c000f80d:	eb b6                	jmp    c000f7c5 <sbrk+0xc3>

c000f80f <mmap>:
c000f80f:	83 ec 18             	sub    esp,0x18
c000f812:	68 38 ab 02 c0       	push   0xc002ab38
c000f817:	e8 df af 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000f81c:	b8 00 00 00 00       	mov    eax,0x0
c000f821:	83 c4 1c             	add    esp,0x1c
c000f824:	c3                   	ret    

c000f825 <munmap>:
c000f825:	83 ec 18             	sub    esp,0x18
c000f828:	68 3d ab 02 c0       	push   0xc002ab3d
c000f82d:	e8 c9 af 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000f832:	b8 00 00 00 00       	mov    eax,0x0
c000f837:	83 c4 1c             	add    esp,0x1c
c000f83a:	c3                   	ret    

c000f83b <liballoc_lock()>:
c000f83b:	fa                   	cli    
c000f83c:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c000f842:	b8 00 00 00 00       	mov    eax,0x0
c000f847:	c3                   	ret    

c000f848 <liballoc_unlock()>:
c000f848:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c000f84d:	48                   	dec    eax
c000f84e:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c000f853:	75 01                	jne    c000f856 <liballoc_unlock()+0xe>
c000f855:	fb                   	sti    
c000f856:	b8 00 00 00 00       	mov    eax,0x0
c000f85b:	c3                   	ret    

c000f85c <liballoc_alloc(int)>:
c000f85c:	83 ec 10             	sub    esp,0x10
c000f85f:	68 01 08 00 00       	push   0x801
c000f864:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f868:	ff 35 f0 ef 02 c0    	push   DWORD PTR ds:0xc002eff0
c000f86e:	e8 01 2b 00 00       	call   c0012374 <VAS::allocatePages(int, int)>
c000f873:	83 c4 1c             	add    esp,0x1c
c000f876:	c3                   	ret    

c000f877 <liballoc_free(void*, int)>:
c000f877:	83 ec 14             	sub    esp,0x14
c000f87a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f87e:	ff 35 f0 ef 02 c0    	push   DWORD PTR ds:0xc002eff0
c000f884:	e8 95 27 00 00       	call   c001201e <VAS::freeAllocatedPages(unsigned long)>
c000f889:	b8 00 00 00 00       	mov    eax,0x0
c000f88e:	83 c4 1c             	add    esp,0x1c
c000f891:	c3                   	ret    

c000f892 <realloc>:
c000f892:	83 ec 14             	sub    esp,0x14
c000f895:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f89d:	e8 a6 1d ff ff       	call   c0001648 <dlrealloc>
c000f8a2:	83 c4 1c             	add    esp,0x1c
c000f8a5:	c3                   	ret    

c000f8a6 <malloc>:
c000f8a6:	83 ec 18             	sub    esp,0x18
c000f8a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8ad:	e8 59 18 ff ff       	call   c000110b <dlmalloc>
c000f8b2:	83 c4 1c             	add    esp,0x1c
c000f8b5:	c3                   	ret    

c000f8b6 <free>:
c000f8b6:	83 ec 18             	sub    esp,0x18
c000f8b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8bd:	e8 ee 14 ff ff       	call   c0000db0 <dlfree>
c000f8c2:	83 c4 1c             	add    esp,0x1c
c000f8c5:	c3                   	ret    

c000f8c6 <rfree>:
c000f8c6:	83 ec 18             	sub    esp,0x18
c000f8c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8cd:	e8 de 14 ff ff       	call   c0000db0 <dlfree>
c000f8d2:	83 c4 1c             	add    esp,0x1c
c000f8d5:	c3                   	ret    

c000f8d6 <calloc>:
c000f8d6:	56                   	push   esi
c000f8d7:	53                   	push   ebx
c000f8d8:	83 ec 10             	sub    esp,0x10
c000f8db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8df:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8e4:	53                   	push   ebx
c000f8e5:	e8 bc ff ff ff       	call   c000f8a6 <malloc>
c000f8ea:	89 c6                	mov    esi,eax
c000f8ec:	83 c4 0c             	add    esp,0xc
c000f8ef:	53                   	push   ebx
c000f8f0:	6a 00                	push   0x0
c000f8f2:	50                   	push   eax
c000f8f3:	e8 74 0e ff ff       	call   c000076c <memset>
c000f8f8:	89 f0                	mov    eax,esi
c000f8fa:	83 c4 14             	add    esp,0x14
c000f8fd:	5b                   	pop    ebx
c000f8fe:	5e                   	pop    esi
c000f8ff:	c3                   	ret    

c000f900 <hwTextMode_loadInData(VgaText*)>:
c000f900:	55                   	push   ebp
c000f901:	a1 a0 dd 02 c0       	mov    eax,ds:0xc002dda0
c000f906:	57                   	push   edi
c000f907:	56                   	push   esi
c000f908:	53                   	push   ebx
c000f909:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f90d:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f910:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f913:	85 d2                	test   edx,edx
c000f915:	7e 29                	jle    c000f940 <hwTextMode_loadInData(VgaText*)+0x40>
c000f917:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f91d:	31 f6                	xor    esi,esi
c000f91f:	29 cd                	sub    ebp,ecx
c000f921:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f924:	31 c0                	xor    eax,eax
c000f926:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f92a:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f92e:	40                   	inc    eax
c000f92f:	83 f8 50             	cmp    eax,0x50
c000f932:	75 f2                	jne    c000f926 <hwTextMode_loadInData(VgaText*)+0x26>
c000f934:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f93a:	46                   	inc    esi
c000f93b:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f93e:	7f e1                	jg     c000f921 <hwTextMode_loadInData(VgaText*)+0x21>
c000f940:	5b                   	pop    ebx
c000f941:	5e                   	pop    esi
c000f942:	5f                   	pop    edi
c000f943:	5d                   	pop    ebp
c000f944:	c3                   	ret    

c000f945 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f945:	55                   	push   ebp
c000f946:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000f94d:	57                   	push   edi
c000f94e:	56                   	push   esi
c000f94f:	53                   	push   ebx
c000f950:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f954:	75 44                	jne    c000f99a <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f956:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f959:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f95c:	8b 15 a0 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dda0
c000f962:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f966:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f96c:	eb 08                	jmp    c000f976 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f96e:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f971:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f974:	89 da                	mov    edx,ebx
c000f976:	83 e5 0f             	and    ebp,0xf
c000f979:	c1 e0 04             	shl    eax,0x4
c000f97c:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f97f:	0f b6 c0             	movzx  eax,al
c000f982:	41                   	inc    ecx
c000f983:	09 e8                	or     eax,ebp
c000f985:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f989:	c1 e0 08             	shl    eax,0x8
c000f98c:	09 e8                	or     eax,ebp
c000f98e:	39 fb                	cmp    ebx,edi
c000f990:	66 89 02             	mov    WORD PTR [edx],ax
c000f993:	75 d9                	jne    c000f96e <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f995:	5b                   	pop    ebx
c000f996:	5e                   	pop    esi
c000f997:	5f                   	pop    edi
c000f998:	5d                   	pop    ebp
c000f999:	c3                   	ret    
c000f99a:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f9a1:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f9a8:	31 c0                	xor    eax,eax
c000f9aa:	bd 02 00 00 00       	mov    ebp,0x2
c000f9af:	eb ab                	jmp    c000f95c <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f9b1 <hwTextMode_showCursor(VgaText*, bool)>:
c000f9b1:	56                   	push   esi
c000f9b2:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000f9b9:	53                   	push   ebx
c000f9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9be:	75 36                	jne    c000f9f6 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9c0:	84 c0                	test   al,al
c000f9c2:	74 35                	je     c000f9f9 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9c4:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9c9:	b0 0a                	mov    al,0xa
c000f9cb:	89 da                	mov    edx,ebx
c000f9cd:	ee                   	out    dx,al
c000f9ce:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9d3:	89 ca                	mov    edx,ecx
c000f9d5:	ec                   	in     al,dx
c000f9d6:	b2 0f                	mov    dl,0xf
c000f9d8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9dc:	83 e0 c0             	and    eax,0xffffffc0
c000f9df:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9e2:	09 d0                	or     eax,edx
c000f9e4:	89 ca                	mov    edx,ecx
c000f9e6:	ee                   	out    dx,al
c000f9e7:	b0 0b                	mov    al,0xb
c000f9e9:	89 da                	mov    edx,ebx
c000f9eb:	ee                   	out    dx,al
c000f9ec:	89 ca                	mov    edx,ecx
c000f9ee:	ec                   	in     al,dx
c000f9ef:	83 e0 e0             	and    eax,0xffffffe0
c000f9f2:	83 c8 0f             	or     eax,0xf
c000f9f5:	ee                   	out    dx,al
c000f9f6:	5b                   	pop    ebx
c000f9f7:	5e                   	pop    esi
c000f9f8:	c3                   	ret    
c000f9f9:	b0 0a                	mov    al,0xa
c000f9fb:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa00:	ee                   	out    dx,al
c000fa01:	b0 20                	mov    al,0x20
c000fa03:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa08:	ee                   	out    dx,al
c000fa09:	5b                   	pop    ebx
c000fa0a:	5e                   	pop    esi
c000fa0b:	c3                   	ret    

c000fa0c <hwTextMode_update(VgaText*)>:
c000fa0c:	c3                   	ret    

c000fa0d <hwTextMode_updateCursor(VgaText*)>:
c000fa0d:	56                   	push   esi
c000fa0e:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000fa15:	53                   	push   ebx
c000fa16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa1a:	75 36                	jne    c000fa52 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa1c:	be d4 03 00 00       	mov    esi,0x3d4
c000fa21:	b9 19 00 00 00       	mov    ecx,0x19
c000fa26:	89 f2                	mov    edx,esi
c000fa28:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa2b:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa2e:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa31:	c1 e1 04             	shl    ecx,0x4
c000fa34:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa37:	b0 0f                	mov    al,0xf
c000fa39:	ee                   	out    dx,al
c000fa3a:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa3f:	88 c8                	mov    al,cl
c000fa41:	89 da                	mov    edx,ebx
c000fa43:	ee                   	out    dx,al
c000fa44:	b0 0e                	mov    al,0xe
c000fa46:	89 f2                	mov    edx,esi
c000fa48:	ee                   	out    dx,al
c000fa49:	89 c8                	mov    eax,ecx
c000fa4b:	89 da                	mov    edx,ebx
c000fa4d:	66 c1 e8 08          	shr    ax,0x8
c000fa51:	ee                   	out    dx,al
c000fa52:	5b                   	pop    ebx
c000fa53:	5e                   	pop    esi
c000fa54:	c3                   	ret    

c000fa55 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa59:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000fa60:	75 38                	jne    c000fa9a <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa62:	ba da 03 00 00       	mov    edx,0x3da
c000fa67:	84 c0                	test   al,al
c000fa69:	75 18                	jne    c000fa83 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa6b:	ec                   	in     al,dx
c000fa6c:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa71:	b0 30                	mov    al,0x30
c000fa73:	89 ca                	mov    edx,ecx
c000fa75:	ee                   	out    dx,al
c000fa76:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa7b:	ec                   	in     al,dx
c000fa7c:	83 c8 08             	or     eax,0x8
c000fa7f:	89 ca                	mov    edx,ecx
c000fa81:	ee                   	out    dx,al
c000fa82:	c3                   	ret    
c000fa83:	ec                   	in     al,dx
c000fa84:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa89:	b0 30                	mov    al,0x30
c000fa8b:	89 ca                	mov    edx,ecx
c000fa8d:	ee                   	out    dx,al
c000fa8e:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa93:	ec                   	in     al,dx
c000fa94:	83 e0 f7             	and    eax,0xfffffff7
c000fa97:	89 ca                	mov    edx,ecx
c000fa99:	ee                   	out    dx,al
c000fa9a:	c3                   	ret    

c000fa9b <hwTextMode_scrollScreen(VgaText*)>:
c000fa9b:	55                   	push   ebp
c000fa9c:	57                   	push   edi
c000fa9d:	56                   	push   esi
c000fa9e:	53                   	push   ebx
c000fa9f:	83 ec 1c             	sub    esp,0x1c
c000faa2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faa6:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000faad:	74 0e                	je     c000fabd <hwTextMode_scrollScreen(VgaText*)+0x22>
c000faaf:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fab6:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fabd:	a1 a0 dd 02 c0       	mov    eax,ds:0xc002dda0
c000fac2:	bd 02 00 00 00       	mov    ebp,0x2
c000fac7:	05 a0 00 00 00       	add    eax,0xa0
c000facc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fad0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fad4:	31 c0                	xor    eax,eax
c000fad6:	eb 0b                	jmp    c000fae3 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fad8:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fade:	74 51                	je     c000fb31 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fae0:	43                   	inc    ebx
c000fae1:	89 f0                	mov    eax,esi
c000fae3:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fae9:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000faef:	88 13                	mov    BYTE PTR [ebx],dl
c000faf1:	8d 70 01             	lea    esi,[eax+0x1]
c000faf4:	83 fd 18             	cmp    ebp,0x18
c000faf7:	75 df                	jne    c000fad8 <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000faf9:	a8 01                	test   al,0x1
c000fafb:	75 13                	jne    c000fb10 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fafd:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb00:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb06:	75 d8                	jne    c000fae0 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb08:	83 c4 1c             	add    esp,0x1c
c000fb0b:	5b                   	pop    ebx
c000fb0c:	5e                   	pop    esi
c000fb0d:	5f                   	pop    edi
c000fb0e:	5d                   	pop    ebp
c000fb0f:	c3                   	ret    
c000fb10:	83 ec 08             	sub    esp,0x8
c000fb13:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb17:	50                   	push   eax
c000fb18:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb1c:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb20:	50                   	push   eax
c000fb21:	e8 fc 0b 00 00       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb26:	83 c4 10             	add    esp,0x10
c000fb29:	88 07                	mov    BYTE PTR [edi],al
c000fb2b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb2f:	eb cf                	jmp    c000fb00 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb31:	45                   	inc    ebp
c000fb32:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb3a:	eb 94                	jmp    c000fad0 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb3c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb3c:	57                   	push   edi
c000fb3d:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000fb44:	56                   	push   esi
c000fb45:	53                   	push   ebx
c000fb46:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb4a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb4e:	75 62                	jne    c000fbb2 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb50:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb55:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb5a:	83 ec 08             	sub    esp,0x8
c000fb5d:	52                   	push   edx
c000fb5e:	50                   	push   eax
c000fb5f:	e8 be 0b 00 00       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb64:	5a                   	pop    edx
c000fb65:	0f b6 c0             	movzx  eax,al
c000fb68:	59                   	pop    ecx
c000fb69:	50                   	push   eax
c000fb6a:	0f be c3             	movsx  eax,bl
c000fb6d:	50                   	push   eax
c000fb6e:	e8 55 0c 00 00       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb73:	83 c4 10             	add    esp,0x10
c000fb76:	8b 35 a0 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dda0
c000fb7c:	80 3d 00 ef 02 c0 00 	cmp    BYTE PTR ds:0xc002ef00,0x0
c000fb83:	74 07                	je     c000fb8c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb85:	66 0f be c3          	movsx  ax,bl
c000fb89:	80 cc 02             	or     ah,0x2
c000fb8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb90:	ba 19 00 00 00       	mov    edx,0x19
c000fb95:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb98:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb9b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb9e:	c1 e1 04             	shl    ecx,0x4
c000fba1:	c1 e2 04             	shl    edx,0x4
c000fba4:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fba8:	01 ca                	add    edx,ecx
c000fbaa:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fbae:	5b                   	pop    ebx
c000fbaf:	5e                   	pop    esi
c000fbb0:	5f                   	pop    edi
c000fbb1:	c3                   	ret    
c000fbb2:	b8 02 00 00 00       	mov    eax,0x2
c000fbb7:	31 d2                	xor    edx,edx
c000fbb9:	eb 9f                	jmp    c000fb5a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fbbb <setupTextMode()>:
c000fbbb:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fbc0:	83 e0 30             	and    eax,0x30
c000fbc3:	66 83 f8 30          	cmp    ax,0x30
c000fbc7:	75 11                	jne    c000fbda <setupTextMode()+0x1f>
c000fbc9:	81 2d a0 dd 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002dda0,0x8000
c000fbd3:	c6 05 00 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef00,0x1
c000fbda:	c7 05 38 ef 02 c0 55 fa 00 c0 	mov    DWORD PTR ds:0xc002ef38,0xc000fa55
c000fbe4:	c7 05 24 ef 02 c0 00 f9 00 c0 	mov    DWORD PTR ds:0xc002ef24,0xc000f900
c000fbee:	c7 05 20 ef 02 c0 45 f9 00 c0 	mov    DWORD PTR ds:0xc002ef20,0xc000f945
c000fbf8:	c7 05 2c ef 02 c0 9b fa 00 c0 	mov    DWORD PTR ds:0xc002ef2c,0xc000fa9b
c000fc02:	c7 05 34 ef 02 c0 b1 f9 00 c0 	mov    DWORD PTR ds:0xc002ef34,0xc000f9b1
c000fc0c:	c7 05 28 ef 02 c0 0c fa 00 c0 	mov    DWORD PTR ds:0xc002ef28,0xc000fa0c
c000fc16:	c7 05 30 ef 02 c0 0d fa 00 c0 	mov    DWORD PTR ds:0xc002ef30,0xc000fa0d
c000fc20:	c7 05 3c ef 02 c0 3c fb 00 c0 	mov    DWORD PTR ds:0xc002ef3c,0xc000fb3c
c000fc2a:	c3                   	ret    

c000fc2b <kernel_main>:
c000fc2b:	57                   	push   edi
c000fc2c:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc31:	56                   	push   esi
c000fc32:	89 fa                	mov    edx,edi
c000fc34:	53                   	push   ebx
c000fc35:	31 f6                	xor    esi,esi
c000fc37:	83 ec 2c             	sub    esp,0x2c
c000fc3a:	89 f0                	mov    eax,esi
c000fc3c:	ee                   	out    dx,al
c000fc3d:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc42:	b0 80                	mov    al,0x80
c000fc44:	89 da                	mov    edx,ebx
c000fc46:	ee                   	out    dx,al
c000fc47:	b1 03                	mov    cl,0x3
c000fc49:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc4e:	88 c8                	mov    al,cl
c000fc50:	ee                   	out    dx,al
c000fc51:	89 f0                	mov    eax,esi
c000fc53:	89 fa                	mov    edx,edi
c000fc55:	ee                   	out    dx,al
c000fc56:	88 c8                	mov    al,cl
c000fc58:	89 da                	mov    edx,ebx
c000fc5a:	ee                   	out    dx,al
c000fc5b:	b0 c7                	mov    al,0xc7
c000fc5d:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc62:	ee                   	out    dx,al
c000fc63:	b0 0b                	mov    al,0xb
c000fc65:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc6a:	ee                   	out    dx,al
c000fc6b:	68 44 ab 02 c0       	push   0xc002ab44
c000fc70:	e8 cc 31 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000fc75:	e8 3a 09 00 00       	call   c00105b4 <installVgaTextImplementation()>
c000fc7a:	e8 3c ff ff ff       	call   c000fbbb <setupTextMode()>
c000fc7f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc84:	05 ff 0f 00 00       	add    eax,0xfff
c000fc89:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc8e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc91:	e8 f5 03 00 00       	call   c001008b <Phys::physicalMemorySetup(unsigned int)>
c000fc96:	e8 5f 1f 00 00       	call   c0011bfa <Virt::virtualMemorySetup()>
c000fc9b:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fca1:	83 c4 10             	add    esp,0x10
c000fca4:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fcaa:	75 0e                	jne    c000fcba <kernel_main+0x8f>
c000fcac:	89 d8                	mov    eax,ebx
c000fcae:	25 48 03 00 00       	and    eax,0x348
c000fcb3:	3d 00 03 00 00       	cmp    eax,0x300
c000fcb8:	74 10                	je     c000fcca <kernel_main+0x9f>
c000fcba:	83 ec 0c             	sub    esp,0xc
c000fcbd:	68 d5 c4 02 c0       	push   0xc002c4d5
c000fcc2:	e8 34 ab 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000fcc7:	83 c4 10             	add    esp,0x10
c000fcca:	83 ec 0c             	sub    esp,0xc
c000fccd:	89 1d 80 ee 02 c0    	mov    DWORD PTR ds:0xc002ee80,ebx
c000fcd3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcd7:	53                   	push   ebx
c000fcd8:	e8 69 21 00 00       	call   c0011e46 <VAS::VAS()>
c000fcdd:	89 1d f0 ef 02 c0    	mov    DWORD PTR ds:0xc002eff0,ebx
c000fce3:	e8 38 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fce8:	c7 04 24 5b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab5b
c000fcef:	e8 4d 31 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000fcf4:	e8 80 1f 00 00       	call   c0011c79 <Virt::swappingSetup()>
c000fcf9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd00:	e8 a1 fb ff ff       	call   c000f8a6 <malloc>
c000fd05:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd08:	89 c6                	mov    esi,eax
c000fd0a:	e8 8f ea ff ff       	call   c000e79e <Computer::Computer()>
c000fd0f:	58                   	pop    eax
c000fd10:	89 35 68 ee 02 c0    	mov    DWORD PTR ds:0xc002ee68,esi
c000fd16:	5a                   	pop    edx
c000fd17:	56                   	push   esi
c000fd18:	68 78 ab 02 c0       	push   0xc002ab78
c000fd1d:	e8 1f 31 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000fd22:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c000fd27:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd29:	6a 00                	push   0x0
c000fd2b:	6a 00                	push   0x0
c000fd2d:	6a 00                	push   0x0
c000fd2f:	50                   	push   eax
c000fd30:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd33:	83 c4 14             	add    esp,0x14
c000fd36:	53                   	push   ebx
c000fd37:	e8 ba 23 00 00       	call   c00120f6 <VAS::~VAS()>
c000fd3c:	c7 04 24 8b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab8b
c000fd43:	e8 b3 aa 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000fd48:	83 c4 30             	add    esp,0x30
c000fd4b:	5b                   	pop    ebx
c000fd4c:	5e                   	pop    esi
c000fd4d:	5f                   	pop    edi
c000fd4e:	c3                   	ret    

c000fd4f <Phys::allocateDMA(unsigned long)>:
c000fd4f:	55                   	push   ebp
c000fd50:	31 d2                	xor    edx,edx
c000fd52:	57                   	push   edi
c000fd53:	31 ed                	xor    ebp,ebp
c000fd55:	56                   	push   esi
c000fd56:	31 c9                	xor    ecx,ecx
c000fd58:	53                   	push   ebx
c000fd59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd5d:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	c1 ee 0c             	shr    esi,0xc
c000fd68:	eb 17                	jmp    c000fd81 <Phys::allocateDMA(unsigned long)+0x32>
c000fd6a:	85 c9                	test   ecx,ecx
c000fd6c:	75 04                	jne    c000fd72 <Phys::allocateDMA(unsigned long)+0x23>
c000fd6e:	89 d5                	mov    ebp,edx
c000fd70:	89 d0                	mov    eax,edx
c000fd72:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd75:	39 de                	cmp    esi,ebx
c000fd77:	74 20                	je     c000fd99 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd79:	42                   	inc    edx
c000fd7a:	89 d9                	mov    ecx,ebx
c000fd7c:	83 fa 2f             	cmp    edx,0x2f
c000fd7f:	7f 11                	jg     c000fd92 <Phys::allocateDMA(unsigned long)+0x43>
c000fd81:	80 ba c0 ee 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1140],0x0
c000fd88:	74 e0                	je     c000fd6a <Phys::allocateDMA(unsigned long)+0x1b>
c000fd8a:	31 c9                	xor    ecx,ecx
c000fd8c:	42                   	inc    edx
c000fd8d:	83 fa 2f             	cmp    edx,0x2f
c000fd90:	7e ef                	jle    c000fd81 <Phys::allocateDMA(unsigned long)+0x32>
c000fd92:	5b                   	pop    ebx
c000fd93:	31 c0                	xor    eax,eax
c000fd95:	5e                   	pop    esi
c000fd96:	5f                   	pop    edi
c000fd97:	5d                   	pop    ebp
c000fd98:	c3                   	ret    
c000fd99:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd9c:	89 d7                	mov    edi,edx
c000fd9e:	4f                   	dec    edi
c000fd9f:	79 03                	jns    c000fda4 <Phys::allocateDMA(unsigned long)+0x55>
c000fda1:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fda4:	c1 ff 04             	sar    edi,0x4
c000fda7:	89 c2                	mov    edx,eax
c000fda9:	c1 fa 04             	sar    edx,0x4
c000fdac:	39 fa                	cmp    edx,edi
c000fdae:	75 2f                	jne    c000fddf <Phys::allocateDMA(unsigned long)+0x90>
c000fdb0:	85 db                	test   ebx,ebx
c000fdb2:	74 1a                	je     c000fdce <Phys::allocateDMA(unsigned long)+0x7f>
c000fdb4:	be c0 ee 02 c0       	mov    esi,0xc002eec0
c000fdb9:	8d 90 c0 ee 02 c0    	lea    edx,[eax-0x3ffd1140]
c000fdbf:	f7 d6                	not    esi
c000fdc1:	29 c6                	sub    esi,eax
c000fdc3:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fdc6:	42                   	inc    edx
c000fdc7:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fdca:	39 d9                	cmp    ecx,ebx
c000fdcc:	7f f5                	jg     c000fdc3 <Phys::allocateDMA(unsigned long)+0x74>
c000fdce:	85 ff                	test   edi,edi
c000fdd0:	74 13                	je     c000fde5 <Phys::allocateDMA(unsigned long)+0x96>
c000fdd2:	5b                   	pop    ebx
c000fdd3:	05 50 20 0c 00       	add    eax,0xc2050
c000fdd8:	5e                   	pop    esi
c000fdd9:	c1 e0 0c             	shl    eax,0xc
c000fddc:	5f                   	pop    edi
c000fddd:	5d                   	pop    ebp
c000fdde:	c3                   	ret    
c000fddf:	89 ea                	mov    edx,ebp
c000fde1:	31 c9                	xor    ecx,ecx
c000fde3:	eb a7                	jmp    c000fd8c <Phys::allocateDMA(unsigned long)+0x3d>
c000fde5:	5b                   	pop    ebx
c000fde6:	c1 e0 0c             	shl    eax,0xc
c000fde9:	5e                   	pop    esi
c000fdea:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdef:	5f                   	pop    edi
c000fdf0:	5d                   	pop    ebp
c000fdf1:	c3                   	ret    

c000fdf2 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdf6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdfa:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe00:	c1 e9 0c             	shr    ecx,0xc
c000fe03:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe08:	76 25                	jbe    c000fe2f <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe0a:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe0f:	c1 e8 0c             	shr    eax,0xc
c000fe12:	8d 50 10             	lea    edx,[eax+0x10]
c000fe15:	85 c9                	test   ecx,ecx
c000fe17:	74 15                	je     c000fe2e <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe19:	8d 82 c0 ee 02 c0    	lea    eax,[edx-0x3ffd1140]
c000fe1f:	8d 94 11 c0 ee 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1140]
c000fe26:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe29:	40                   	inc    eax
c000fe2a:	39 d0                	cmp    eax,edx
c000fe2c:	75 f8                	jne    c000fe26 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe2e:	c3                   	ret    
c000fe2f:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe35:	c1 ea 0c             	shr    edx,0xc
c000fe38:	eb db                	jmp    c000fe15 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe3a <Phys::setPageState(unsigned long, bool)>:
c000fe3a:	56                   	push   esi
c000fe3b:	ba 01 00 00 00       	mov    edx,0x1
c000fe40:	53                   	push   ebx
c000fe41:	8b 35 98 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd98
c000fe47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe4b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe4f:	89 c8                	mov    eax,ecx
c000fe51:	83 e1 07             	and    ecx,0x7
c000fe54:	c1 e8 03             	shr    eax,0x3
c000fe57:	d3 e3                	shl    ebx,cl
c000fe59:	01 c6                	add    esi,eax
c000fe5b:	d3 e2                	shl    edx,cl
c000fe5d:	f7 d2                	not    edx
c000fe5f:	20 16                	and    BYTE PTR [esi],dl
c000fe61:	03 05 98 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd98
c000fe67:	08 18                	or     BYTE PTR [eax],bl
c000fe69:	5b                   	pop    ebx
c000fe6a:	5e                   	pop    esi
c000fe6b:	c3                   	ret    

c000fe6c <Phys::getPageState(unsigned long)>:
c000fe6c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe70:	8b 15 98 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd98
c000fe76:	89 c8                	mov    eax,ecx
c000fe78:	83 e1 07             	and    ecx,0x7
c000fe7b:	c1 e8 03             	shr    eax,0x3
c000fe7e:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe82:	d3 f8                	sar    eax,cl
c000fe84:	83 e0 01             	and    eax,0x1
c000fe87:	c3                   	ret    

c000fe88 <Phys::freePage(unsigned long)>:
c000fe88:	53                   	push   ebx
c000fe89:	83 ec 08             	sub    esp,0x8
c000fe8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe90:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe96:	76 57                	jbe    c000feef <Phys::freePage(unsigned long)+0x67>
c000fe98:	c1 eb 0c             	shr    ebx,0xc
c000fe9b:	53                   	push   ebx
c000fe9c:	e8 cb ff ff ff       	call   c000fe6c <Phys::getPageState(unsigned long)>
c000fea1:	5a                   	pop    edx
c000fea2:	84 c0                	test   al,al
c000fea4:	74 5b                	je     c000ff01 <Phys::freePage(unsigned long)+0x79>
c000fea6:	a1 b0 ee 02 c0       	mov    eax,ds:0xc002eeb0
c000feab:	48                   	dec    eax
c000feac:	a3 b0 ee 02 c0       	mov    ds:0xc002eeb0,eax
c000feb1:	8d 04 80             	lea    eax,[eax+eax*4]
c000feb4:	8d 04 80             	lea    eax,[eax+eax*4]
c000feb7:	c1 e0 02             	shl    eax,0x2
c000feba:	99                   	cdq    
c000febb:	f7 3d b4 ee 02 c0    	idiv   DWORD PTR ds:0xc002eeb4
c000fec1:	39 05 ac ee 02 c0    	cmp    DWORD PTR ds:0xc002eeac,eax
c000fec7:	75 13                	jne    c000fedc <Phys::freePage(unsigned long)+0x54>
c000fec9:	83 ec 08             	sub    esp,0x8
c000fecc:	6a 00                	push   0x0
c000fece:	53                   	push   ebx
c000fecf:	e8 66 ff ff ff       	call   c000fe3a <Phys::setPageState(unsigned long, bool)>
c000fed4:	83 c4 10             	add    esp,0x10
c000fed7:	83 c4 08             	add    esp,0x8
c000feda:	5b                   	pop    ebx
c000fedb:	c3                   	ret    
c000fedc:	83 ec 0c             	sub    esp,0xc
c000fedf:	a3 ac ee 02 c0       	mov    ds:0xc002eeac,eax
c000fee4:	50                   	push   eax
c000fee5:	e8 f8 09 00 00       	call   c00108e2 <VgaText::updateRAMUsageDisplay(int)>
c000feea:	83 c4 10             	add    esp,0x10
c000feed:	eb da                	jmp    c000fec9 <Phys::freePage(unsigned long)+0x41>
c000feef:	68 00 10 00 00       	push   0x1000
c000fef4:	53                   	push   ebx
c000fef5:	e8 f8 fe ff ff       	call   c000fdf2 <Phys::freeDMA(unsigned long, unsigned long)>
c000fefa:	59                   	pop    ecx
c000fefb:	5b                   	pop    ebx
c000fefc:	83 c4 08             	add    esp,0x8
c000feff:	5b                   	pop    ebx
c000ff00:	c3                   	ret    
c000ff01:	c7 44 24 10 a6 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aba6
c000ff09:	83 c4 08             	add    esp,0x8
c000ff0c:	5b                   	pop    ebx
c000ff0d:	e9 e9 a8 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>

c000ff12 <Phys::allocatePage()>:
c000ff12:	56                   	push   esi
c000ff13:	53                   	push   ebx
c000ff14:	51                   	push   ecx
c000ff15:	8b 35 a4 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002eea4
c000ff1b:	89 f3                	mov    ebx,esi
c000ff1d:	eb 0a                	jmp    c000ff29 <Phys::allocatePage()+0x17>
c000ff1f:	89 1d a4 ee 02 c0    	mov    DWORD PTR ds:0xc002eea4,ebx
c000ff25:	39 de                	cmp    esi,ebx
c000ff27:	74 24                	je     c000ff4d <Phys::allocatePage()+0x3b>
c000ff29:	53                   	push   ebx
c000ff2a:	e8 3d ff ff ff       	call   c000fe6c <Phys::getPageState(unsigned long)>
c000ff2f:	5a                   	pop    edx
c000ff30:	84 c0                	test   al,al
c000ff32:	74 77                	je     c000ffab <Phys::allocatePage()+0x99>
c000ff34:	43                   	inc    ebx
c000ff35:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff3b:	75 e2                	jne    c000ff1f <Phys::allocatePage()+0xd>
c000ff3d:	31 db                	xor    ebx,ebx
c000ff3f:	c7 05 a4 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eea4,0x0
c000ff49:	39 de                	cmp    esi,ebx
c000ff4b:	75 dc                	jne    c000ff29 <Phys::allocatePage()+0x17>
c000ff4d:	83 ec 0c             	sub    esp,0xc
c000ff50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff55:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff58:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff5e:	e8 0b 2c 00 00       	call   c0012b6e <VAS::scanForEviction()>
c000ff63:	83 c4 10             	add    esp,0x10
c000ff66:	85 c0                	test   eax,eax
c000ff68:	75 76                	jne    c000ffe0 <Phys::allocatePage()+0xce>
c000ff6a:	83 ec 0c             	sub    esp,0xc
c000ff6d:	68 bc ab 02 c0       	push   0xc002abbc
c000ff72:	e8 ca 2e 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c000ff77:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff7e:	e8 cc fd ff ff       	call   c000fd4f <Phys::allocateDMA(unsigned long)>
c000ff83:	83 c4 10             	add    esp,0x10
c000ff86:	85 c0                	test   eax,eax
c000ff88:	75 56                	jne    c000ffe0 <Phys::allocatePage()+0xce>
c000ff8a:	83 ec 0c             	sub    esp,0xc
c000ff8d:	68 cd ab 02 c0       	push   0xc002abcd
c000ff92:	e8 64 a8 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c000ff97:	83 c4 10             	add    esp,0x10
c000ff9a:	8b 1d a4 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eea4
c000ffa0:	53                   	push   ebx
c000ffa1:	e8 c6 fe ff ff       	call   c000fe6c <Phys::getPageState(unsigned long)>
c000ffa6:	5a                   	pop    edx
c000ffa7:	84 c0                	test   al,al
c000ffa9:	75 89                	jne    c000ff34 <Phys::allocatePage()+0x22>
c000ffab:	6a 01                	push   0x1
c000ffad:	53                   	push   ebx
c000ffae:	e8 87 fe ff ff       	call   c000fe3a <Phys::setPageState(unsigned long, bool)>
c000ffb3:	a1 b0 ee 02 c0       	mov    eax,ds:0xc002eeb0
c000ffb8:	59                   	pop    ecx
c000ffb9:	40                   	inc    eax
c000ffba:	5b                   	pop    ebx
c000ffbb:	a3 b0 ee 02 c0       	mov    ds:0xc002eeb0,eax
c000ffc0:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc3:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc6:	c1 e0 02             	shl    eax,0x2
c000ffc9:	99                   	cdq    
c000ffca:	f7 3d b4 ee 02 c0    	idiv   DWORD PTR ds:0xc002eeb4
c000ffd0:	39 05 ac ee 02 c0    	cmp    DWORD PTR ds:0xc002eeac,eax
c000ffd6:	75 0c                	jne    c000ffe4 <Phys::allocatePage()+0xd2>
c000ffd8:	a1 a4 ee 02 c0       	mov    eax,ds:0xc002eea4
c000ffdd:	c1 e0 0c             	shl    eax,0xc
c000ffe0:	5a                   	pop    edx
c000ffe1:	5b                   	pop    ebx
c000ffe2:	5e                   	pop    esi
c000ffe3:	c3                   	ret    
c000ffe4:	83 ec 0c             	sub    esp,0xc
c000ffe7:	a3 ac ee 02 c0       	mov    ds:0xc002eeac,eax
c000ffec:	50                   	push   eax
c000ffed:	e8 f0 08 00 00       	call   c00108e2 <VgaText::updateRAMUsageDisplay(int)>
c000fff2:	83 c4 10             	add    esp,0x10
c000fff5:	eb e1                	jmp    c000ffd8 <Phys::allocatePage()+0xc6>

c000fff7 <Phys::allocateContiguousPages(int)>:
c000fff7:	57                   	push   edi
c000fff8:	56                   	push   esi
c000fff9:	53                   	push   ebx
c000fffa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fffe:	fa                   	cli    
c000ffff:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c0010005:	31 db                	xor    ebx,ebx
c0010007:	85 db                	test   ebx,ebx
c0010009:	75 11                	jne    c001001c <Phys::allocateContiguousPages(int)+0x25>
c001000b:	e8 02 ff ff ff       	call   c000ff12 <Phys::allocatePage()>
c0010010:	83 fe 01             	cmp    esi,0x1
c0010013:	89 c7                	mov    edi,eax
c0010015:	74 21                	je     c0010038 <Phys::allocateContiguousPages(int)+0x41>
c0010017:	bb 01 00 00 00       	mov    ebx,0x1
c001001c:	e8 f1 fe ff ff       	call   c000ff12 <Phys::allocatePage()>
c0010021:	89 da                	mov    edx,ebx
c0010023:	c1 e2 0c             	shl    edx,0xc
c0010026:	01 fa                	add    edx,edi
c0010028:	39 c2                	cmp    edx,eax
c001002a:	74 20                	je     c001004c <Phys::allocateContiguousPages(int)+0x55>
c001002c:	bb 01 00 00 00       	mov    ebx,0x1
c0010031:	89 c7                	mov    edi,eax
c0010033:	83 fe 01             	cmp    esi,0x1
c0010036:	75 e4                	jne    c001001c <Phys::allocateContiguousPages(int)+0x25>
c0010038:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001003d:	48                   	dec    eax
c001003e:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0010043:	75 01                	jne    c0010046 <Phys::allocateContiguousPages(int)+0x4f>
c0010045:	fb                   	sti    
c0010046:	89 f8                	mov    eax,edi
c0010048:	5b                   	pop    ebx
c0010049:	5e                   	pop    esi
c001004a:	5f                   	pop    edi
c001004b:	c3                   	ret    
c001004c:	43                   	inc    ebx
c001004d:	39 f3                	cmp    ebx,esi
c001004f:	75 b6                	jne    c0010007 <Phys::allocateContiguousPages(int)+0x10>
c0010051:	eb e5                	jmp    c0010038 <Phys::allocateContiguousPages(int)+0x41>

c0010053 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010053:	56                   	push   esi
c0010054:	53                   	push   ebx
c0010055:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010059:	39 1d a8 ee 02 c0    	cmp    DWORD PTR ds:0xc002eea8,ebx
c001005f:	73 06                	jae    c0010067 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010061:	89 1d a8 ee 02 c0    	mov    DWORD PTR ds:0xc002eea8,ebx
c0010067:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001006b:	c1 eb 0c             	shr    ebx,0xc
c001006e:	c1 e8 0c             	shr    eax,0xc
c0010071:	39 d8                	cmp    eax,ebx
c0010073:	73 13                	jae    c0010088 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010075:	6a 00                	push   0x0
c0010077:	8d 70 01             	lea    esi,[eax+0x1]
c001007a:	50                   	push   eax
c001007b:	e8 ba fd ff ff       	call   c000fe3a <Phys::setPageState(unsigned long, bool)>
c0010080:	5a                   	pop    edx
c0010081:	89 f0                	mov    eax,esi
c0010083:	59                   	pop    ecx
c0010084:	39 f3                	cmp    ebx,esi
c0010086:	75 ed                	jne    c0010075 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010088:	5b                   	pop    ebx
c0010089:	5e                   	pop    esi
c001008a:	c3                   	ret    

c001008b <Phys::physicalMemorySetup(unsigned int)>:
c001008b:	55                   	push   ebp
c001008c:	57                   	push   edi
c001008d:	56                   	push   esi
c001008e:	53                   	push   ebx
c001008f:	31 db                	xor    ebx,ebx
c0010091:	83 ec 40             	sub    esp,0x40
c0010094:	6a 30                	push   0x30
c0010096:	6a 00                	push   0x0
c0010098:	68 c0 ee 02 c0       	push   0xc002eec0
c001009d:	e8 ca 06 ff ff       	call   c000076c <memset>
c00100a2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100ab:	05 00 10 00 00       	add    eax,0x1000
c00100b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100b4:	83 c4 10             	add    esp,0x10
c00100b7:	83 ec 08             	sub    esp,0x8
c00100ba:	6a 01                	push   0x1
c00100bc:	53                   	push   ebx
c00100bd:	43                   	inc    ebx
c00100be:	e8 77 fd ff ff       	call   c000fe3a <Phys::setPageState(unsigned long, bool)>
c00100c3:	83 c4 10             	add    esp,0x10
c00100c6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100cc:	75 e9                	jne    c00100b7 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100ce:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100d5:	66 85 c0             	test   ax,ax
c00100d8:	0f 84 8e 01 00 00    	je     c001026c <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100e2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100ea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100ee:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100f7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00100ff:	eb 15                	jmp    c0010116 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010101:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010105:	83 c3 18             	add    ebx,0x18
c0010108:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001010c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010110:	0f 84 66 01 00 00    	je     c001027c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010116:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010119:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001011c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001011f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010123:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010127:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010129:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001012c:	01 f0                	add    eax,esi
c001012e:	55                   	push   ebp
c001012f:	11 fa                	adc    edx,edi
c0010131:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010135:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010139:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001013d:	56                   	push   esi
c001013e:	68 08 ac 02 c0       	push   0xc002ac08
c0010143:	e8 f9 2c 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0010148:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001014c:	83 c4 10             	add    esp,0x10
c001014f:	09 f8                	or     eax,edi
c0010151:	0f 85 25 01 00 00    	jne    c001027c <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010157:	4d                   	dec    ebp
c0010158:	75 a7                	jne    c0010101 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001015a:	ba 00 00 08 00       	mov    edx,0x80000
c001015f:	89 c1                	mov    ecx,eax
c0010161:	39 f2                	cmp    edx,esi
c0010163:	19 f9                	sbb    ecx,edi
c0010165:	0f 82 a7 00 00 00    	jb     c0010212 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001016b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001016f:	89 c1                	mov    ecx,eax
c0010171:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010175:	0f 83 97 00 00 00    	jae    c0010212 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001017b:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010180:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010184:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010188:	39 fa                	cmp    edx,edi
c001018a:	19 e8                	sbb    eax,ebp
c001018c:	0f 82 14 01 00 00    	jb     c00102a6 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010192:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010196:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001019a:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101a0:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101a5:	83 d5 ff             	adc    ebp,0xffffffff
c00101a8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101ac:	31 c0                	xor    eax,eax
c00101ae:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101b2:	39 fa                	cmp    edx,edi
c00101b4:	89 c1                	mov    ecx,eax
c00101b6:	19 e9                	sbb    ecx,ebp
c00101b8:	0f 83 43 ff ff ff    	jae    c0010101 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101be:	be 00 00 08 00       	mov    esi,0x80000
c00101c3:	50                   	push   eax
c00101c4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101c8:	57                   	push   edi
c00101c9:	56                   	push   esi
c00101ca:	68 2c ac 02 c0       	push   0xc002ac2c
c00101cf:	e8 6d 2c 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00101d4:	5a                   	pop    edx
c00101d5:	59                   	pop    ecx
c00101d6:	57                   	push   edi
c00101d7:	56                   	push   esi
c00101d8:	e8 76 fe ff ff       	call   c0010053 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101dd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101e5:	83 c4 0c             	add    esp,0xc
c00101e8:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101ec:	03 05 b4 ee 02 c0    	add    eax,DWORD PTR ds:0xc002eeb4
c00101f2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101f9:	a3 b4 ee 02 c0       	mov    ds:0xc002eeb4,eax
c00101fe:	52                   	push   edx
c00101ff:	50                   	push   eax
c0010200:	68 e9 ab 02 c0       	push   0xc002abe9
c0010205:	e8 37 2c 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001020a:	83 c4 10             	add    esp,0x10
c001020d:	e9 ef fe ff ff       	jmp    c0010101 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010212:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010216:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001021a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001021e:	39 ea                	cmp    edx,ebp
c0010220:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010224:	0f 82 d7 fe ff ff    	jb     c0010101 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022a:	ba ff 1f 00 00       	mov    edx,0x1fff
c001022f:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010233:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010237:	0f 83 c4 fe ff ff    	jae    c0010101 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001023d:	39 ee                	cmp    esi,ebp
c001023f:	89 f8                	mov    eax,edi
c0010241:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010245:	0f 83 78 ff ff ff    	jae    c00101c3 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001024b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001024f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010253:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010257:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001025b:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001025f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010263:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010267:	e9 57 ff ff ff       	jmp    c00101c3 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001026c:	83 ec 0c             	sub    esp,0xc
c001026f:	68 db ab 02 c0       	push   0xc002abdb
c0010274:	e8 82 a5 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0010279:	83 c4 10             	add    esp,0x10
c001027c:	bb 40 01 00 00       	mov    ebx,0x140
c0010281:	83 ec 08             	sub    esp,0x8
c0010284:	6a 00                	push   0x0
c0010286:	53                   	push   ebx
c0010287:	43                   	inc    ebx
c0010288:	e8 ad fb ff ff       	call   c000fe3a <Phys::setPageState(unsigned long, bool)>
c001028d:	ff 05 b4 ee 02 c0    	inc    DWORD PTR ds:0xc002eeb4
c0010293:	83 c4 10             	add    esp,0x10
c0010296:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001029c:	75 e3                	jne    c0010281 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c001029e:	83 c4 3c             	add    esp,0x3c
c00102a1:	5b                   	pop    ebx
c00102a2:	5e                   	pop    esi
c00102a3:	5f                   	pop    edi
c00102a4:	5d                   	pop    ebp
c00102a5:	c3                   	ret    
c00102a6:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102b6:	e9 d7 fe ff ff       	jmp    c0010192 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102bb:	90                   	nop

c00102bc <Pipe::isAtty()>:
c00102bc:	31 c0                	xor    eax,eax
c00102be:	c3                   	ret    
c00102bf:	90                   	nop

c00102c0 <Pipe::~Pipe()>:
c00102c0:	83 ec 0c             	sub    esp,0xc
c00102c3:	ba 98 ac 02 c0       	mov    edx,0xc002ac98
c00102c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102cc:	89 10                	mov    DWORD PTR [eax],edx
c00102ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d2:	83 ec 0c             	sub    esp,0xc
c00102d5:	50                   	push   eax
c00102d6:	e8 ff 14 00 00       	call   c00117da <UnixFile::~UnixFile()>
c00102db:	83 c4 10             	add    esp,0x10
c00102de:	90                   	nop
c00102df:	83 c4 0c             	add    esp,0xc
c00102e2:	c3                   	ret    
c00102e3:	90                   	nop

c00102e4 <Pipe::~Pipe()>:
c00102e4:	83 ec 0c             	sub    esp,0xc
c00102e7:	83 ec 0c             	sub    esp,0xc
c00102ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ee:	e8 cd ff ff ff       	call   c00102c0 <Pipe::~Pipe()>
c00102f3:	83 c4 10             	add    esp,0x10
c00102f6:	83 ec 08             	sub    esp,0x8
c00102f9:	6a 20                	push   0x20
c00102fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102ff:	e8 5d 2a 00 00       	call   c0012d61 <operator delete(void*, unsigned long)>
c0010304:	83 c4 10             	add    esp,0x10
c0010307:	83 c4 0c             	add    esp,0xc
c001030a:	c3                   	ret    
c001030b:	90                   	nop

c001030c <Pipe::read(unsigned long long, void*, int*)>:
c001030c:	55                   	push   ebp
c001030d:	57                   	push   edi
c001030e:	56                   	push   esi
c001030f:	53                   	push   ebx
c0010310:	83 ec 1c             	sub    esp,0x1c
c0010313:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010317:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001031b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001031f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010323:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010326:	89 c8                	mov    eax,ecx
c0010328:	99                   	cdq    
c0010329:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001032d:	74 24                	je     c0010353 <Pipe::read(unsigned long long, void*, int*)+0x47>
c001032f:	39 e9                	cmp    ecx,ebp
c0010331:	89 d1                	mov    ecx,edx
c0010333:	19 f1                	sbb    ecx,esi
c0010335:	73 1c                	jae    c0010353 <Pipe::read(unsigned long long, void*, int*)+0x47>
c0010337:	fa                   	cli    
c0010338:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001033e:	e8 5d e1 00 00       	call   c001e4a0 <schedule()>
c0010343:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0010348:	48                   	dec    eax
c0010349:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001034e:	75 d3                	jne    c0010323 <Pipe::read(unsigned long long, void*, int*)+0x17>
c0010350:	fb                   	sti    
c0010351:	eb d0                	jmp    c0010323 <Pipe::read(unsigned long long, void*, int*)+0x17>
c0010353:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010357:	39 e8                	cmp    eax,ebp
c0010359:	89 d6                	mov    esi,edx
c001035b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c001035f:	1b 74 24 0c          	sbb    esi,DWORD PTR [esp+0xc]
c0010363:	73 08                	jae    c001036d <Pipe::read(unsigned long long, void*, int*)+0x61>
c0010365:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010369:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001036d:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010370:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0010373:	29 f1                	sub    ecx,esi
c0010375:	89 c8                	mov    eax,ecx
c0010377:	99                   	cdq    
c0010378:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001037c:	89 d0                	mov    eax,edx
c001037e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010382:	19 c2                	sbb    edx,eax
c0010384:	73 04                	jae    c001038a <Pipe::read(unsigned long long, void*, int*)+0x7e>
c0010386:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001038a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001038e:	89 d0                	mov    eax,edx
c0010390:	29 c8                	sub    eax,ecx
c0010392:	85 c9                	test   ecx,ecx
c0010394:	74 05                	je     c001039b <Pipe::read(unsigned long long, void*, int*)+0x8f>
c0010396:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010399:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039b:	85 c0                	test   eax,eax
c001039d:	74 09                	je     c00103a8 <Pipe::read(unsigned long long, void*, int*)+0x9c>
c001039f:	01 cf                	add    edi,ecx
c00103a1:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00103a4:	89 c1                	mov    ecx,eax
c00103a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103a8:	29 53 14             	sub    DWORD PTR [ebx+0x14],edx
c00103ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103ae:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103b1:	99                   	cdq    
c00103b2:	89 f7                	mov    edi,esi
c00103b4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103b8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103bc:	c1 ff 1f             	sar    edi,0x1f
c00103bf:	57                   	push   edi
c00103c0:	56                   	push   esi
c00103c1:	52                   	push   edx
c00103c2:	50                   	push   eax
c00103c3:	e8 1c 6f 01 00       	call   c00272e4 <__umoddi3>
c00103c8:	83 c4 10             	add    esp,0x10
c00103cb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103ce:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103d3:	75 10                	jne    c00103e5 <Pipe::read(unsigned long long, void*, int*)+0xd9>
c00103d5:	83 ec 0c             	sub    esp,0xc
c00103d8:	68 55 ac 02 c0       	push   0xc002ac55
c00103dd:	e8 19 a4 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ed:	89 10                	mov    DWORD PTR [eax],edx
c00103ef:	83 c4 1c             	add    esp,0x1c
c00103f2:	31 c0                	xor    eax,eax
c00103f4:	5b                   	pop    ebx
c00103f5:	5e                   	pop    esi
c00103f6:	5f                   	pop    edi
c00103f7:	5d                   	pop    ebp
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <Pipe::write(unsigned long long, void*, int*)>:
c00103fa:	55                   	push   ebp
c00103fb:	57                   	push   edi
c00103fc:	56                   	push   esi
c00103fd:	53                   	push   ebx
c00103fe:	83 ec 1c             	sub    esp,0x1c
c0010401:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010405:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010409:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c001040c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010410:	89 04 24             	mov    DWORD PTR [esp],eax
c0010413:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010417:	89 c8                	mov    eax,ecx
c0010419:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001041c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010420:	89 d6                	mov    esi,edx
c0010422:	89 d7                	mov    edi,edx
c0010424:	c1 ff 1f             	sar    edi,0x1f
c0010427:	03 34 24             	add    esi,DWORD PTR [esp]
c001042a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001042e:	c1 f8 1f             	sar    eax,0x1f
c0010431:	39 f1                	cmp    ecx,esi
c0010433:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010437:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001043b:	19 f8                	sbb    eax,edi
c001043d:	b8 01 00 00 00       	mov    eax,0x1
c0010442:	72 6c                	jb     c00104b0 <Pipe::write(unsigned long long, void*, int*)+0xb6>
c0010444:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0010448:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001044b:	01 d0                	add    eax,edx
c001044d:	99                   	cdq    
c001044e:	f7 f9                	idiv   ecx
c0010450:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010453:	29 d1                	sub    ecx,edx
c0010455:	89 cf                	mov    edi,ecx
c0010457:	c1 ff 1f             	sar    edi,0x1f
c001045a:	39 c8                	cmp    eax,ecx
c001045c:	19 fd                	sbb    ebp,edi
c001045e:	bd 00 00 00 00       	mov    ebp,0x0
c0010463:	72 04                	jb     c0010469 <Pipe::write(unsigned long long, void*, int*)+0x6f>
c0010465:	89 c5                	mov    ebp,eax
c0010467:	29 cd                	sub    ebp,ecx
c0010469:	89 c1                	mov    ecx,eax
c001046b:	29 e9                	sub    ecx,ebp
c001046d:	74 0b                	je     c001047a <Pipe::write(unsigned long long, void*, int*)+0x80>
c001046f:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0010472:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010476:	01 d7                	add    edi,edx
c0010478:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001047a:	85 ed                	test   ebp,ebp
c001047c:	74 0d                	je     c001048b <Pipe::write(unsigned long long, void*, int*)+0x91>
c001047e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010482:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0010485:	01 ce                	add    esi,ecx
c0010487:	89 e9                	mov    ecx,ebp
c0010489:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001048b:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c001048e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010493:	75 10                	jne    c00104a5 <Pipe::write(unsigned long long, void*, int*)+0xab>
c0010495:	83 ec 0c             	sub    esp,0xc
c0010498:	68 71 ac 02 c0       	push   0xc002ac71
c001049d:	e8 59 a3 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00104a2:	83 c4 10             	add    esp,0x10
c00104a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104a9:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00104ac:	89 18                	mov    DWORD PTR [eax],ebx
c00104ae:	31 c0                	xor    eax,eax
c00104b0:	83 c4 1c             	add    esp,0x1c
c00104b3:	5b                   	pop    ebx
c00104b4:	5e                   	pop    esi
c00104b5:	5f                   	pop    edi
c00104b6:	5d                   	pop    ebp
c00104b7:	c3                   	ret    

c00104b8 <Pipe::Pipe(int)>:
c00104b8:	83 ec 0c             	sub    esp,0xc
c00104bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104bf:	83 ec 08             	sub    esp,0x8
c00104c2:	6a 00                	push   0x0
c00104c4:	50                   	push   eax
c00104c5:	e8 2e 11 00 00       	call   c00115f8 <UnixFile::UnixFile(int)>
c00104ca:	83 c4 10             	add    esp,0x10
c00104cd:	ba 98 ac 02 c0       	mov    edx,0xc002ac98
c00104d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104d6:	89 10                	mov    DWORD PTR [eax],edx
c00104d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104e0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104fd:	83 ec 0c             	sub    esp,0xc
c0010500:	50                   	push   eax
c0010501:	e8 a0 f3 ff ff       	call   c000f8a6 <malloc>
c0010506:	83 c4 10             	add    esp,0x10
c0010509:	89 c2                	mov    edx,eax
c001050b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010516:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001051a:	90                   	nop
c001051b:	83 c4 0c             	add    esp,0xc
c001051e:	c3                   	ret    
c001051f:	90                   	nop

c0010520 <VgaText::isAtty()>:
c0010520:	b0 01                	mov    al,0x1
c0010522:	c3                   	ret    
c0010523:	90                   	nop

c0010524 <VgaText::~VgaText()>:
c0010524:	83 ec 0c             	sub    esp,0xc
c0010527:	ba 54 ad 02 c0       	mov    edx,0xc002ad54
c001052c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010530:	89 10                	mov    DWORD PTR [eax],edx
c0010532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010536:	83 ec 0c             	sub    esp,0xc
c0010539:	50                   	push   eax
c001053a:	e8 9b 12 00 00       	call   c00117da <UnixFile::~UnixFile()>
c001053f:	83 c4 10             	add    esp,0x10
c0010542:	90                   	nop
c0010543:	83 c4 0c             	add    esp,0xc
c0010546:	c3                   	ret    
c0010547:	90                   	nop

c0010548 <VgaText::~VgaText()>:
c0010548:	83 ec 0c             	sub    esp,0xc
c001054b:	83 ec 0c             	sub    esp,0xc
c001054e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010552:	e8 cd ff ff ff       	call   c0010524 <VgaText::~VgaText()>
c0010557:	83 c4 10             	add    esp,0x10
c001055a:	83 ec 08             	sub    esp,0x8
c001055d:	68 c4 02 00 00       	push   0x2c4
c0010562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010566:	e8 f6 27 00 00       	call   c0012d61 <operator delete(void*, unsigned long)>
c001056b:	83 c4 10             	add    esp,0x10
c001056e:	83 c4 0c             	add    esp,0xc
c0010571:	c3                   	ret    

c0010572 <VgaText::read(unsigned long long, void*, int*)>:
c0010572:	83 ec 10             	sub    esp,0x10
c0010575:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010579:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001057d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010581:	e8 6a 5d 00 00       	call   c00162f0 <readKeyboard(VgaText*, char*, unsigned long)>
c0010586:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001058a:	89 02                	mov    DWORD PTR [edx],eax
c001058c:	31 c0                	xor    eax,eax
c001058e:	83 c4 1c             	add    esp,0x1c
c0010591:	c3                   	ret    

c0010592 <setTerminalScrollLock(bool)>:
c0010592:	c3                   	ret    

c0010593 <addToTerminalCycle(VgaText*)>:
c0010593:	8b 15 40 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef40
c0010599:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001059d:	85 d2                	test   edx,edx
c001059f:	75 09                	jne    c00105aa <addToTerminalCycle(VgaText*)+0x17>
c00105a1:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00105a4:	a3 40 ef 02 c0       	mov    ds:0xc002ef40,eax
c00105a9:	c3                   	ret    
c00105aa:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105ad:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105b0:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105b3:	c3                   	ret    

c00105b4 <installVgaTextImplementation()>:
c00105b4:	83 ec 10             	sub    esp,0x10
c00105b7:	6a 20                	push   0x20
c00105b9:	6a 00                	push   0x0
c00105bb:	68 20 ef 02 c0       	push   0xc002ef20
c00105c0:	e8 a7 01 ff ff       	call   c000076c <memset>
c00105c5:	83 c4 1c             	add    esp,0x1c
c00105c8:	c3                   	ret    

c00105c9 <scrollTerminalScrollLock(int)>:
c00105c9:	c3                   	ret    

c00105ca <VgaText::load()>:
c00105ca:	53                   	push   ebx
c00105cb:	31 c0                	xor    eax,eax
c00105cd:	83 ec 58             	sub    esp,0x58
c00105d0:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105d4:	89 e2                	mov    edx,esp
c00105d6:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105da:	40                   	inc    eax
c00105db:	83 f8 50             	cmp    eax,0x50
c00105de:	75 f6                	jne    c00105d6 <VgaText::load()+0xc>
c00105e0:	31 c0                	xor    eax,eax
c00105e2:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00105e9:	84 c9                	test   cl,cl
c00105eb:	74 06                	je     c00105f3 <VgaText::load()+0x29>
c00105ed:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105f0:	40                   	inc    eax
c00105f1:	eb ef                	jmp    c00105e2 <VgaText::load()+0x18>
c00105f3:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105f6:	85 c0                	test   eax,eax
c00105f8:	74 09                	je     c0010603 <VgaText::load()+0x39>
c00105fa:	51                   	push   ecx
c00105fb:	51                   	push   ecx
c00105fc:	52                   	push   edx
c00105fd:	53                   	push   ebx
c00105fe:	ff d0                	call   eax
c0010600:	83 c4 10             	add    esp,0x10
c0010603:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010606:	85 c0                	test   eax,eax
c0010608:	74 09                	je     c0010613 <VgaText::load()+0x49>
c001060a:	83 ec 0c             	sub    esp,0xc
c001060d:	53                   	push   ebx
c001060e:	ff d0                	call   eax
c0010610:	83 c4 10             	add    esp,0x10
c0010613:	83 c4 58             	add    esp,0x58
c0010616:	5b                   	pop    ebx
c0010617:	c3                   	ret    

c0010618 <VgaText::updateCursor()>:
c0010618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061c:	39 05 44 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef44,eax
c0010622:	75 09                	jne    c001062d <VgaText::updateCursor()+0x15>
c0010624:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010627:	85 c0                	test   eax,eax
c0010629:	74 02                	je     c001062d <VgaText::updateCursor()+0x15>
c001062b:	ff e0                	jmp    eax
c001062d:	c3                   	ret    

c001062e <VgaText::showCursor(bool)>:
c001062e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010632:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010636:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c0010639:	c3                   	ret    

c001063a <VgaText::disableBlink(bool)>:
c001063a:	56                   	push   esi
c001063b:	53                   	push   ebx
c001063c:	51                   	push   ecx
c001063d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010641:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010645:	39 1d 44 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef44,ebx
c001064b:	75 15                	jne    c0010662 <VgaText::disableBlink(bool)+0x28>
c001064d:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010650:	85 c0                	test   eax,eax
c0010652:	74 0e                	je     c0010662 <VgaText::disableBlink(bool)+0x28>
c0010654:	89 f1                	mov    ecx,esi
c0010656:	52                   	push   edx
c0010657:	52                   	push   edx
c0010658:	0f b6 d1             	movzx  edx,cl
c001065b:	52                   	push   edx
c001065c:	53                   	push   ebx
c001065d:	ff d0                	call   eax
c001065f:	83 c4 10             	add    esp,0x10
c0010662:	89 f0                	mov    eax,esi
c0010664:	83 f0 01             	xor    eax,0x1
c0010667:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001066a:	58                   	pop    eax
c001066b:	5b                   	pop    ebx
c001066c:	5e                   	pop    esi
c001066d:	c3                   	ret    

c001066e <VgaText::doANSI_SGR(int)>:
c001066e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010676:	85 d2                	test   edx,edx
c0010678:	75 0b                	jne    c0010685 <VgaText::doANSI_SGR(int)+0x17>
c001067a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001067d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010680:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010683:	eb 59                	jmp    c00106de <VgaText::doANSI_SGR(int)+0x70>
c0010685:	83 fa 07             	cmp    edx,0x7
c0010688:	75 0b                	jne    c0010695 <VgaText::doANSI_SGR(int)+0x27>
c001068a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001068d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010690:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010693:	eb 49                	jmp    c00106de <VgaText::doANSI_SGR(int)+0x70>
c0010695:	83 fa 1b             	cmp    edx,0x1b
c0010698:	74 e0                	je     c001067a <VgaText::doANSI_SGR(int)+0xc>
c001069a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001069d:	83 f9 07             	cmp    ecx,0x7
c00106a0:	77 09                	ja     c00106ab <VgaText::doANSI_SGR(int)+0x3d>
c00106a2:	8b 14 8d c0 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2240]
c00106a9:	eb 20                	jmp    c00106cb <VgaText::doANSI_SGR(int)+0x5d>
c00106ab:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106ae:	83 f9 07             	cmp    ecx,0x7
c00106b1:	77 09                	ja     c00106bc <VgaText::doANSI_SGR(int)+0x4e>
c00106b3:	8b 14 8d c0 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2240]
c00106ba:	eb 22                	jmp    c00106de <VgaText::doANSI_SGR(int)+0x70>
c00106bc:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106bf:	83 f9 07             	cmp    ecx,0x7
c00106c2:	77 0b                	ja     c00106cf <VgaText::doANSI_SGR(int)+0x61>
c00106c4:	8b 14 95 78 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2388]
c00106cb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106ce:	c3                   	ret    
c00106cf:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106d2:	83 f9 07             	cmp    ecx,0x7
c00106d5:	77 0a                	ja     c00106e1 <VgaText::doANSI_SGR(int)+0x73>
c00106d7:	8b 14 95 50 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23b0]
c00106de:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106e1:	c3                   	ret    

c00106e2 <VgaText::setDefaultBgColour(VgaColour)>:
c00106e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00106ed:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106f0:	c3                   	ret    
c00106f1:	90                   	nop

c00106f2 <VgaText::setDefaultFgColour(VgaColour)>:
c00106f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106fa:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00106fd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010700:	c3                   	ret    
c0010701:	90                   	nop

c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010702:	53                   	push   ebx
c0010703:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010707:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001070b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001070f:	51                   	push   ecx
c0010710:	e8 cd ff ff ff       	call   c00106e2 <VgaText::setDefaultBgColour(VgaColour)>
c0010715:	58                   	pop    eax
c0010716:	5a                   	pop    edx
c0010717:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001071b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001071f:	5b                   	pop    ebx
c0010720:	eb d0                	jmp    c00106f2 <VgaText::setDefaultFgColour(VgaColour)>

c0010722 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010722:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010726:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001072b:	83 e0 0f             	and    eax,0xf
c001072e:	c1 e2 04             	shl    edx,0x4
c0010731:	09 d0                	or     eax,edx
c0010733:	c3                   	ret    

c0010734 <VgaText::scrollScreen()>:
c0010734:	55                   	push   ebp
c0010735:	b9 01 00 00 00       	mov    ecx,0x1
c001073a:	57                   	push   edi
c001073b:	56                   	push   esi
c001073c:	53                   	push   ebx
c001073d:	83 ec 0c             	sub    esp,0xc
c0010740:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010744:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001074a:	31 ff                	xor    edi,edi
c001074c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001074f:	83 f9 17             	cmp    ecx,0x17
c0010752:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010755:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001075c:	75 27                	jne    c0010785 <VgaText::scrollScreen()+0x51>
c001075e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010761:	01 f5                	add    ebp,esi
c0010763:	f7 c7 01 00 00 00    	test   edi,0x1
c0010769:	74 16                	je     c0010781 <VgaText::scrollScreen()+0x4d>
c001076b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001076f:	50                   	push   eax
c0010770:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010774:	50                   	push   eax
c0010775:	e8 a8 ff ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c001077a:	5a                   	pop    edx
c001077b:	5a                   	pop    edx
c001077c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001077f:	eb 04                	jmp    c0010785 <VgaText::scrollScreen()+0x51>
c0010781:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010785:	47                   	inc    edi
c0010786:	46                   	inc    esi
c0010787:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001078d:	75 bd                	jne    c001074c <VgaText::scrollScreen()+0x18>
c001078f:	41                   	inc    ecx
c0010790:	83 f9 18             	cmp    ecx,0x18
c0010793:	75 af                	jne    c0010744 <VgaText::scrollScreen()+0x10>
c0010795:	39 1d 44 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef44,ebx
c001079b:	75 1b                	jne    c00107b8 <VgaText::scrollScreen()+0x84>
c001079d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107a1:	74 05                	je     c00107a8 <VgaText::scrollScreen()+0x74>
c00107a3:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00107a6:	eb 10                	jmp    c00107b8 <VgaText::scrollScreen()+0x84>
c00107a8:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107ab:	85 c0                	test   eax,eax
c00107ad:	74 09                	je     c00107b8 <VgaText::scrollScreen()+0x84>
c00107af:	83 ec 0c             	sub    esp,0xc
c00107b2:	53                   	push   ebx
c00107b3:	ff d0                	call   eax
c00107b5:	83 c4 10             	add    esp,0x10
c00107b8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107bc:	83 c4 0c             	add    esp,0xc
c00107bf:	5b                   	pop    ebx
c00107c0:	5e                   	pop    esi
c00107c1:	5f                   	pop    edi
c00107c2:	5d                   	pop    ebp
c00107c3:	e9 50 fe ff ff       	jmp    c0010618 <VgaText::updateCursor()>

c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107c8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107cd:	c1 e0 08             	shl    eax,0x8
c00107d0:	89 c2                	mov    edx,eax
c00107d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107d7:	09 d0                	or     eax,edx
c00107d9:	c3                   	ret    

c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107da:	56                   	push   esi
c00107db:	53                   	push   ebx
c00107dc:	51                   	push   ecx
c00107dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107e1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107e6:	50                   	push   eax
c00107e7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ec:	50                   	push   eax
c00107ed:	e8 30 ff ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f2:	5b                   	pop    ebx
c00107f3:	0f b6 c0             	movzx  eax,al
c00107f6:	5e                   	pop    esi
c00107f7:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00107fc:	50                   	push   eax
c00107fd:	53                   	push   ebx
c00107fe:	e8 c5 ff ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010803:	5a                   	pop    edx
c0010804:	5e                   	pop    esi
c0010805:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010808:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001080e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010812:	0f b7 d2             	movzx  edx,dx
c0010815:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010819:	39 0d 44 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef44,ecx
c001081f:	75 10                	jne    c0010831 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010821:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010824:	85 c0                	test   eax,eax
c0010826:	74 09                	je     c0010831 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010828:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001082c:	5a                   	pop    edx
c001082d:	5b                   	pop    ebx
c001082e:	5e                   	pop    esi
c001082f:	ff e0                	jmp    eax
c0010831:	58                   	pop    eax
c0010832:	5b                   	pop    ebx
c0010833:	5e                   	pop    esi
c0010834:	c3                   	ret    
c0010835:	90                   	nop

c0010836 <VgaText::getCursorX()>:
c0010836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001083a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001083d:	c3                   	ret    

c001083e <VgaText::getCursorY()>:
c001083e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010842:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010845:	c3                   	ret    

c0010846 <VgaText::setCursor(int, int)>:
c0010846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001084a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001084e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010851:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010855:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010858:	e9 bb fd ff ff       	jmp    c0010618 <VgaText::updateCursor()>
c001085d:	90                   	nop

c001085e <VgaText::setCursorX(int)>:
c001085e:	83 ec 10             	sub    esp,0x10
c0010861:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010865:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001086c:	50                   	push   eax
c001086d:	e8 d4 ff ff ff       	call   c0010846 <VgaText::setCursor(int, int)>
c0010872:	83 c4 1c             	add    esp,0x1c
c0010875:	c3                   	ret    

c0010876 <VgaText::setCursorY(int)>:
c0010876:	83 ec 10             	sub    esp,0x10
c0010879:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001087d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010881:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010884:	50                   	push   eax
c0010885:	e8 bc ff ff ff       	call   c0010846 <VgaText::setCursor(int, int)>
c001088a:	83 c4 1c             	add    esp,0x1c
c001088d:	c3                   	ret    

c001088e <VgaText::incrementCursor(bool)>:
c001088e:	56                   	push   esi
c001088f:	53                   	push   ebx
c0010890:	51                   	push   ecx
c0010891:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010895:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010899:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001089c:	40                   	inc    eax
c001089d:	83 f8 50             	cmp    eax,0x50
c00108a0:	74 05                	je     c00108a7 <VgaText::incrementCursor(bool)+0x19>
c00108a2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00108a5:	eb 24                	jmp    c00108cb <VgaText::incrementCursor(bool)+0x3d>
c00108a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108b1:	8d 50 01             	lea    edx,[eax+0x1]
c00108b4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108b7:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108ba:	75 0f                	jne    c00108cb <VgaText::incrementCursor(bool)+0x3d>
c00108bc:	83 ec 0c             	sub    esp,0xc
c00108bf:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108c2:	53                   	push   ebx
c00108c3:	e8 6c fe ff ff       	call   c0010734 <VgaText::scrollScreen()>
c00108c8:	83 c4 10             	add    esp,0x10
c00108cb:	89 f0                	mov    eax,esi
c00108cd:	84 c0                	test   al,al
c00108cf:	74 0c                	je     c00108dd <VgaText::incrementCursor(bool)+0x4f>
c00108d1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108d5:	5a                   	pop    edx
c00108d6:	5b                   	pop    ebx
c00108d7:	5e                   	pop    esi
c00108d8:	e9 3b fd ff ff       	jmp    c0010618 <VgaText::updateCursor()>
c00108dd:	58                   	pop    eax
c00108de:	5b                   	pop    ebx
c00108df:	5e                   	pop    esi
c00108e0:	c3                   	ret    
c00108e1:	90                   	nop

c00108e2 <VgaText::updateRAMUsageDisplay(int)>:
c00108e2:	56                   	push   esi
c00108e3:	8b 35 a0 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dda0
c00108e9:	53                   	push   ebx
c00108ea:	bb 0a 00 00 00       	mov    ebx,0xa
c00108ef:	6a 0f                	push   0xf
c00108f1:	6a 00                	push   0x0
c00108f3:	e8 2a fe ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c00108f8:	5a                   	pop    edx
c00108f9:	59                   	pop    ecx
c00108fa:	0f b6 c8             	movzx  ecx,al
c00108fd:	51                   	push   ecx
c00108fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010902:	99                   	cdq    
c0010903:	f7 fb                	idiv   ebx
c0010905:	89 d3                	mov    ebx,edx
c0010907:	83 c0 30             	add    eax,0x30
c001090a:	83 c3 30             	add    ebx,0x30
c001090d:	0f be c0             	movsx  eax,al
c0010910:	0f b6 db             	movzx  ebx,bl
c0010913:	50                   	push   eax
c0010914:	e8 af fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010919:	5a                   	pop    edx
c001091a:	5a                   	pop    edx
c001091b:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010922:	51                   	push   ecx
c0010923:	53                   	push   ebx
c0010924:	e8 9f fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010929:	5b                   	pop    ebx
c001092a:	5a                   	pop    edx
c001092b:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010932:	51                   	push   ecx
c0010933:	6a 25                	push   0x25
c0010935:	e8 8e fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c001093a:	59                   	pop    ecx
c001093b:	5b                   	pop    ebx
c001093c:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010943:	5b                   	pop    ebx
c0010944:	5e                   	pop    esi
c0010945:	c3                   	ret    

c0010946 <VgaText::updateDiskUsage()>:
c0010946:	55                   	push   ebp
c0010947:	bd 10 27 00 00       	mov    ebp,0x2710
c001094c:	57                   	push   edi
c001094d:	8b 3d a0 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dda0
c0010953:	56                   	push   esi
c0010954:	53                   	push   ebx
c0010955:	6a 0f                	push   0xf
c0010957:	6a 00                	push   0x0
c0010959:	e8 c4 fd ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c001095e:	5a                   	pop    edx
c001095f:	0f b6 d8             	movzx  ebx,al
c0010962:	59                   	pop    ecx
c0010963:	8b 35 c8 31 03 c0    	mov    esi,DWORD PTR ds:0xc00331c8
c0010969:	53                   	push   ebx
c001096a:	b9 0a 00 00 00       	mov    ecx,0xa
c001096f:	89 f0                	mov    eax,esi
c0010971:	99                   	cdq    
c0010972:	f7 fd                	idiv   ebp
c0010974:	99                   	cdq    
c0010975:	f7 f9                	idiv   ecx
c0010977:	8d 42 30             	lea    eax,[edx+0x30]
c001097a:	0f b6 c0             	movzx  eax,al
c001097d:	50                   	push   eax
c001097e:	e8 45 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010983:	5d                   	pop    ebp
c0010984:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010989:	5a                   	pop    edx
c001098a:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c001098e:	53                   	push   ebx
c001098f:	89 f0                	mov    eax,esi
c0010991:	99                   	cdq    
c0010992:	f7 fd                	idiv   ebp
c0010994:	99                   	cdq    
c0010995:	f7 f9                	idiv   ecx
c0010997:	8d 42 30             	lea    eax,[edx+0x30]
c001099a:	0f b6 c0             	movzx  eax,al
c001099d:	50                   	push   eax
c001099e:	e8 25 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109a3:	5d                   	pop    ebp
c00109a4:	bd 64 00 00 00       	mov    ebp,0x64
c00109a9:	5a                   	pop    edx
c00109aa:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109b1:	53                   	push   ebx
c00109b2:	89 f0                	mov    eax,esi
c00109b4:	99                   	cdq    
c00109b5:	f7 fd                	idiv   ebp
c00109b7:	99                   	cdq    
c00109b8:	f7 f9                	idiv   ecx
c00109ba:	8d 42 30             	lea    eax,[edx+0x30]
c00109bd:	0f b6 c0             	movzx  eax,al
c00109c0:	50                   	push   eax
c00109c1:	e8 02 fe ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c6:	5d                   	pop    ebp
c00109c7:	5a                   	pop    edx
c00109c8:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109cf:	53                   	push   ebx
c00109d0:	89 f0                	mov    eax,esi
c00109d2:	99                   	cdq    
c00109d3:	f7 f9                	idiv   ecx
c00109d5:	89 d6                	mov    esi,edx
c00109d7:	99                   	cdq    
c00109d8:	f7 f9                	idiv   ecx
c00109da:	8d 42 30             	lea    eax,[edx+0x30]
c00109dd:	0f b6 c0             	movzx  eax,al
c00109e0:	50                   	push   eax
c00109e1:	e8 e2 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e6:	5d                   	pop    ebp
c00109e7:	5a                   	pop    edx
c00109e8:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109ef:	53                   	push   ebx
c00109f0:	8d 46 30             	lea    eax,[esi+0x30]
c00109f3:	0f b6 f0             	movzx  esi,al
c00109f6:	56                   	push   esi
c00109f7:	e8 cc fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c00109fc:	5e                   	pop    esi
c00109fd:	8b 35 c4 31 03 c0    	mov    esi,DWORD PTR ds:0xc00331c4
c0010a03:	5d                   	pop    ebp
c0010a04:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a0b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a10:	53                   	push   ebx
c0010a11:	89 f0                	mov    eax,esi
c0010a13:	99                   	cdq    
c0010a14:	f7 fd                	idiv   ebp
c0010a16:	99                   	cdq    
c0010a17:	f7 f9                	idiv   ecx
c0010a19:	8d 42 30             	lea    eax,[edx+0x30]
c0010a1c:	0f b6 c0             	movzx  eax,al
c0010a1f:	50                   	push   eax
c0010a20:	e8 a3 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a25:	5a                   	pop    edx
c0010a26:	5d                   	pop    ebp
c0010a27:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a2e:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a33:	53                   	push   ebx
c0010a34:	89 f0                	mov    eax,esi
c0010a36:	99                   	cdq    
c0010a37:	f7 fd                	idiv   ebp
c0010a39:	99                   	cdq    
c0010a3a:	f7 f9                	idiv   ecx
c0010a3c:	8d 42 30             	lea    eax,[edx+0x30]
c0010a3f:	0f b6 c0             	movzx  eax,al
c0010a42:	50                   	push   eax
c0010a43:	e8 80 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a48:	5a                   	pop    edx
c0010a49:	5d                   	pop    ebp
c0010a4a:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a51:	bd 64 00 00 00       	mov    ebp,0x64
c0010a56:	53                   	push   ebx
c0010a57:	89 f0                	mov    eax,esi
c0010a59:	99                   	cdq    
c0010a5a:	f7 fd                	idiv   ebp
c0010a5c:	99                   	cdq    
c0010a5d:	f7 f9                	idiv   ecx
c0010a5f:	83 c2 30             	add    edx,0x30
c0010a62:	0f b6 d2             	movzx  edx,dl
c0010a65:	52                   	push   edx
c0010a66:	e8 5d fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a6b:	5a                   	pop    edx
c0010a6c:	5d                   	pop    ebp
c0010a6d:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a74:	53                   	push   ebx
c0010a75:	89 f0                	mov    eax,esi
c0010a77:	99                   	cdq    
c0010a78:	f7 f9                	idiv   ecx
c0010a7a:	89 d6                	mov    esi,edx
c0010a7c:	99                   	cdq    
c0010a7d:	f7 f9                	idiv   ecx
c0010a7f:	8d 42 30             	lea    eax,[edx+0x30]
c0010a82:	0f b6 c0             	movzx  eax,al
c0010a85:	50                   	push   eax
c0010a86:	e8 3d fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8b:	5a                   	pop    edx
c0010a8c:	59                   	pop    ecx
c0010a8d:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a94:	53                   	push   ebx
c0010a95:	8d 46 30             	lea    eax,[esi+0x30]
c0010a98:	0f b6 f0             	movzx  esi,al
c0010a9b:	56                   	push   esi
c0010a9c:	e8 27 fd ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa1:	5b                   	pop    ebx
c0010aa2:	5e                   	pop    esi
c0010aa3:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010aaa:	5b                   	pop    ebx
c0010aab:	5e                   	pop    esi
c0010aac:	5f                   	pop    edi
c0010aad:	5d                   	pop    ebp
c0010aae:	c3                   	ret    
c0010aaf:	90                   	nop

c0010ab0 <VgaText::updateTitle()>:
c0010ab0:	53                   	push   ebx
c0010ab1:	31 c0                	xor    eax,eax
c0010ab3:	83 ec 58             	sub    esp,0x58
c0010ab6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010aba:	89 e1                	mov    ecx,esp
c0010abc:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010ac0:	40                   	inc    eax
c0010ac1:	83 f8 50             	cmp    eax,0x50
c0010ac4:	75 f6                	jne    c0010abc <VgaText::updateTitle()+0xc>
c0010ac6:	31 c0                	xor    eax,eax
c0010ac8:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010acf:	84 db                	test   bl,bl
c0010ad1:	74 06                	je     c0010ad9 <VgaText::updateTitle()+0x29>
c0010ad3:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010ad6:	40                   	inc    eax
c0010ad7:	eb ef                	jmp    c0010ac8 <VgaText::updateTitle()+0x18>
c0010ad9:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010adc:	85 c0                	test   eax,eax
c0010ade:	74 09                	je     c0010ae9 <VgaText::updateTitle()+0x39>
c0010ae0:	53                   	push   ebx
c0010ae1:	53                   	push   ebx
c0010ae2:	51                   	push   ecx
c0010ae3:	52                   	push   edx
c0010ae4:	ff d0                	call   eax
c0010ae6:	83 c4 10             	add    esp,0x10
c0010ae9:	e8 58 fe ff ff       	call   c0010946 <VgaText::updateDiskUsage()>
c0010aee:	83 c4 58             	add    esp,0x58
c0010af1:	5b                   	pop    ebx
c0010af2:	c3                   	ret    
c0010af3:	90                   	nop

c0010af4 <VgaText::setTitleTextColour(VgaColour)>:
c0010af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010af8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010afc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010aff:	eb af                	jmp    c0010ab0 <VgaText::updateTitle()>
c0010b01:	90                   	nop

c0010b02 <VgaText::setTitleColour(VgaColour)>:
c0010b02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b0d:	eb a1                	jmp    c0010ab0 <VgaText::updateTitle()>
c0010b0f:	90                   	nop

c0010b10 <VgaText::setTitle(char*)>:
c0010b10:	53                   	push   ebx
c0010b11:	83 ec 10             	sub    esp,0x10
c0010b14:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b1c:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b22:	50                   	push   eax
c0010b23:	e8 00 fd fe ff       	call   c0000828 <strcpy>
c0010b28:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b2c:	83 c4 18             	add    esp,0x18
c0010b2f:	5b                   	pop    ebx
c0010b30:	e9 7b ff ff ff       	jmp    c0010ab0 <VgaText::updateTitle()>
c0010b35:	90                   	nop

c0010b36 <VgaText::decrementCursor(bool)>:
c0010b36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b3e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b41:	85 c0                	test   eax,eax
c0010b43:	74 04                	je     c0010b49 <VgaText::decrementCursor(bool)+0x13>
c0010b45:	48                   	dec    eax
c0010b46:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b49:	84 c9                	test   cl,cl
c0010b4b:	74 09                	je     c0010b56 <VgaText::decrementCursor(bool)+0x20>
c0010b4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b51:	e9 c2 fa ff ff       	jmp    c0010618 <VgaText::updateCursor()>
c0010b56:	c3                   	ret    
c0010b57:	90                   	nop

c0010b58 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b58:	53                   	push   ebx
c0010b59:	83 ec 08             	sub    esp,0x8
c0010b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b68:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b6c:	3c 07                	cmp    al,0x7
c0010b6e:	75 2a                	jne    c0010b9a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b70:	a1 f8 ef 02 c0       	mov    eax,ds:0xc002eff8
c0010b75:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b7d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b85:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b91:	83 c4 08             	add    esp,0x8
c0010b94:	5b                   	pop    ebx
c0010b95:	e9 b4 30 00 00       	jmp    c0013c4e <Buzzer::beep(int, int, bool)>
c0010b9a:	3c 0d                	cmp    al,0xd
c0010b9c:	75 09                	jne    c0010ba7 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010b9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010ba5:	eb 2c                	jmp    c0010bd3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010ba7:	3c 0a                	cmp    al,0xa
c0010ba9:	75 31                	jne    c0010bdc <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010bab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010bae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bb5:	8d 50 01             	lea    edx,[eax+0x1]
c0010bb8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bbb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010bbe:	75 0f                	jne    c0010bcf <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010bc0:	83 ec 0c             	sub    esp,0xc
c0010bc3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010bc6:	53                   	push   ebx
c0010bc7:	e8 68 fb ff ff       	call   c0010734 <VgaText::scrollScreen()>
c0010bcc:	83 c4 10             	add    esp,0x10
c0010bcf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010bd3:	83 c4 08             	add    esp,0x8
c0010bd6:	5b                   	pop    ebx
c0010bd7:	e9 3c fa ff ff       	jmp    c0010618 <VgaText::updateCursor()>
c0010bdc:	3c 08                	cmp    al,0x8
c0010bde:	75 25                	jne    c0010c05 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010be0:	50                   	push   eax
c0010be1:	50                   	push   eax
c0010be2:	6a 01                	push   0x1
c0010be4:	53                   	push   ebx
c0010be5:	e8 4c ff ff ff       	call   c0010b36 <VgaText::decrementCursor(bool)>
c0010bea:	5a                   	pop    edx
c0010beb:	59                   	pop    ecx
c0010bec:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010bef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010bf2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010bf5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010bf8:	6a 20                	push   0x20
c0010bfa:	53                   	push   ebx
c0010bfb:	e8 da fb ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c00:	83 c4 28             	add    esp,0x28
c0010c03:	5b                   	pop    ebx
c0010c04:	c3                   	ret    
c0010c05:	83 ec 08             	sub    esp,0x8
c0010c08:	0f be c0             	movsx  eax,al
c0010c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c11:	51                   	push   ecx
c0010c12:	52                   	push   edx
c0010c13:	50                   	push   eax
c0010c14:	53                   	push   ebx
c0010c15:	e8 c0 fb ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c1a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c1e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c26:	83 c4 28             	add    esp,0x28
c0010c29:	5b                   	pop    ebx
c0010c2a:	e9 5f fc ff ff       	jmp    c001088e <VgaText::incrementCursor(bool)>
c0010c2f:	90                   	nop

c0010c30 <VgaText::isShowingCursor()>:
c0010c30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c34:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c37:	c3                   	ret    

c0010c38 <VgaText::isBlinkDisabled()>:
c0010c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c3c:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c3f:	83 f0 01             	xor    eax,0x1
c0010c42:	c3                   	ret    
c0010c43:	90                   	nop

c0010c44 <VgaText::setCursorHeight(int)>:
c0010c44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c4c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c4f:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c57:	e9 d2 f9 ff ff       	jmp    c001062e <VgaText::showCursor(bool)>

c0010c5c <VgaText::getCursorHeight()>:
c0010c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c63:	c3                   	ret    

c0010c64 <setActiveTerminal(VgaText*)>:
c0010c64:	53                   	push   ebx
c0010c65:	83 ec 08             	sub    esp,0x8
c0010c68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c6c:	85 db                	test   ebx,ebx
c0010c6e:	75 11                	jne    c0010c81 <setActiveTerminal(VgaText*)+0x1d>
c0010c70:	c7 44 24 10 ac ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002acac
c0010c78:	83 c4 08             	add    esp,0x8
c0010c7b:	5b                   	pop    ebx
c0010c7c:	e9 7a 9b 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c0010c81:	50                   	push   eax
c0010c82:	50                   	push   eax
c0010c83:	53                   	push   ebx
c0010c84:	68 ba ac 02 c0       	push   0xc002acba
c0010c89:	e8 b3 21 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0010c8e:	a1 44 ef 02 c0       	mov    eax,ds:0xc002ef44
c0010c93:	83 c4 10             	add    esp,0x10
c0010c96:	85 c0                	test   eax,eax
c0010c98:	74 0c                	je     c0010ca6 <setActiveTerminal(VgaText*)+0x42>
c0010c9a:	83 ec 0c             	sub    esp,0xc
c0010c9d:	50                   	push   eax
c0010c9e:	e8 75 f9 ff ff       	call   c0010618 <VgaText::updateCursor()>
c0010ca3:	83 c4 10             	add    esp,0x10
c0010ca6:	89 1d 44 ef 02 c0    	mov    DWORD PTR ds:0xc002ef44,ebx
c0010cac:	51                   	push   ecx
c0010cad:	51                   	push   ecx
c0010cae:	53                   	push   ebx
c0010caf:	68 d2 ac 02 c0       	push   0xc002acd2
c0010cb4:	e8 88 21 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0010cb9:	83 c4 0c             	add    esp,0xc
c0010cbc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cbf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cc2:	53                   	push   ebx
c0010cc3:	e8 7e fb ff ff       	call   c0010846 <VgaText::setCursor(int, int)>
c0010cc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ccb:	e8 68 ff ff ff       	call   c0010c38 <VgaText::isBlinkDisabled()>
c0010cd0:	5a                   	pop    edx
c0010cd1:	0f b6 c0             	movzx  eax,al
c0010cd4:	59                   	pop    ecx
c0010cd5:	50                   	push   eax
c0010cd6:	53                   	push   ebx
c0010cd7:	e8 5e f9 ff ff       	call   c001063a <VgaText::disableBlink(bool)>
c0010cdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cdf:	e8 78 ff ff ff       	call   c0010c5c <VgaText::getCursorHeight()>
c0010ce4:	5a                   	pop    edx
c0010ce5:	59                   	pop    ecx
c0010ce6:	50                   	push   eax
c0010ce7:	53                   	push   ebx
c0010ce8:	e8 57 ff ff ff       	call   c0010c44 <VgaText::setCursorHeight(int)>
c0010ced:	83 c4 10             	add    esp,0x10
c0010cf0:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010cf4:	75 07                	jne    c0010cfd <setActiveTerminal(VgaText*)+0x99>
c0010cf6:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010cfd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d01:	83 c4 08             	add    esp,0x8
c0010d04:	5b                   	pop    ebx
c0010d05:	e9 c0 f8 ff ff       	jmp    c00105ca <VgaText::load()>

c0010d0a <doTerminalCycle()>:
c0010d0a:	83 ec 18             	sub    esp,0x18
c0010d0d:	a1 40 ef 02 c0       	mov    eax,ds:0xc002ef40
c0010d12:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d15:	50                   	push   eax
c0010d16:	a3 40 ef 02 c0       	mov    ds:0xc002ef40,eax
c0010d1b:	e8 44 ff ff ff       	call   c0010c64 <setActiveTerminal(VgaText*)>
c0010d20:	83 c4 1c             	add    esp,0x1c
c0010d23:	c3                   	ret    

c0010d24 <VgaText::doUpdate()>:
c0010d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d28:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d2b:	85 c0                	test   eax,eax
c0010d2d:	74 02                	je     c0010d31 <VgaText::doUpdate()+0xd>
c0010d2f:	ff e0                	jmp    eax
c0010d31:	c3                   	ret    

c0010d32 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d32:	55                   	push   ebp
c0010d33:	31 ed                	xor    ebp,ebp
c0010d35:	57                   	push   edi
c0010d36:	56                   	push   esi
c0010d37:	53                   	push   ebx
c0010d38:	83 ec 1c             	sub    esp,0x1c
c0010d3b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d3f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d44:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d4b:	50                   	push   eax
c0010d4c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d51:	50                   	push   eax
c0010d52:	e8 cb f9 ff ff       	call   c0010722 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d57:	59                   	pop    ecx
c0010d58:	0f b6 c0             	movzx  eax,al
c0010d5b:	5e                   	pop    esi
c0010d5c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d61:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d65:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d6c:	0f b7 f6             	movzx  esi,si
c0010d6f:	01 f6                	add    esi,esi
c0010d71:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d74:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d77:	84 c0                	test   al,al
c0010d79:	0f 84 fd 00 00 00    	je     c0010e7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d7f:	3c 0d                	cmp    al,0xd
c0010d81:	75 0c                	jne    c0010d8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d83:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d8a:	e9 e7 00 00 00       	jmp    c0010e76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d8f:	3c 0a                	cmp    al,0xa
c0010d91:	75 47                	jne    c0010dda <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d93:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d96:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d9d:	8d 48 01             	lea    ecx,[eax+0x1]
c0010da0:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010da3:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010da6:	75 0f                	jne    c0010db7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010da8:	83 ec 0c             	sub    esp,0xc
c0010dab:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010dae:	53                   	push   ebx
c0010daf:	e8 80 f9 ff ff       	call   c0010734 <VgaText::scrollScreen()>
c0010db4:	83 c4 10             	add    esp,0x10
c0010db7:	83 ec 0c             	sub    esp,0xc
c0010dba:	31 ed                	xor    ebp,ebp
c0010dbc:	53                   	push   ebx
c0010dbd:	e8 56 f8 ff ff       	call   c0010618 <VgaText::updateCursor()>
c0010dc2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dc7:	83 c4 10             	add    esp,0x10
c0010dca:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dcd:	0f b7 f6             	movzx  esi,si
c0010dd0:	01 f6                	add    esi,esi
c0010dd2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010dd5:	e9 9c 00 00 00       	jmp    c0010e76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dda:	3c 08                	cmp    al,0x8
c0010ddc:	75 35                	jne    c0010e13 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010dde:	56                   	push   esi
c0010ddf:	56                   	push   esi
c0010de0:	6a 01                	push   0x1
c0010de2:	53                   	push   ebx
c0010de3:	e8 4e fd ff ff       	call   c0010b36 <VgaText::decrementCursor(bool)>
c0010de8:	58                   	pop    eax
c0010de9:	5a                   	pop    edx
c0010dea:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ded:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010df0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010df3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010df6:	6a 20                	push   0x20
c0010df8:	53                   	push   ebx
c0010df9:	e8 dc f9 ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010dfe:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e03:	83 c4 20             	add    esp,0x20
c0010e06:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e09:	0f b7 f6             	movzx  esi,si
c0010e0c:	01 f6                	add    esi,esi
c0010e0e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e11:	eb 63                	jmp    c0010e76 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e13:	51                   	push   ecx
c0010e14:	51                   	push   ecx
c0010e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e19:	50                   	push   eax
c0010e1a:	e8 a9 f9 ff ff       	call   c00107c8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	66 89 06             	mov    WORD PTR [esi],ax
c0010e25:	39 1d 44 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef44,ebx
c0010e2b:	75 21                	jne    c0010e4e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e2d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e30:	85 c0                	test   eax,eax
c0010e32:	74 1a                	je     c0010e4e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e34:	52                   	push   edx
c0010e35:	52                   	push   edx
c0010e36:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e39:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e44:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e47:	51                   	push   ecx
c0010e48:	53                   	push   ebx
c0010e49:	ff d0                	call   eax
c0010e4b:	83 c4 20             	add    esp,0x20
c0010e4e:	83 c6 02             	add    esi,0x2
c0010e51:	50                   	push   eax
c0010e52:	50                   	push   eax
c0010e53:	6a 00                	push   0x0
c0010e55:	53                   	push   ebx
c0010e56:	e8 33 fa ff ff       	call   c001088e <VgaText::incrementCursor(bool)>
c0010e5b:	83 c4 10             	add    esp,0x10
c0010e5e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e62:	75 0d                	jne    c0010e71 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e64:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e69:	0f b7 f6             	movzx  esi,si
c0010e6c:	01 f6                	add    esi,esi
c0010e6e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e71:	bd 01 00 00 00       	mov    ebp,0x1
c0010e76:	47                   	inc    edi
c0010e77:	e9 f8 fe ff ff       	jmp    c0010d74 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e7c:	83 ec 0c             	sub    esp,0xc
c0010e7f:	53                   	push   ebx
c0010e80:	e8 93 f7 ff ff       	call   c0010618 <VgaText::updateCursor()>
c0010e85:	83 c4 10             	add    esp,0x10
c0010e88:	89 e8                	mov    eax,ebp
c0010e8a:	84 c0                	test   al,al
c0010e8c:	74 0c                	je     c0010e9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e8e:	83 ec 0c             	sub    esp,0xc
c0010e91:	53                   	push   ebx
c0010e92:	e8 8d fe ff ff       	call   c0010d24 <VgaText::doUpdate()>
c0010e97:	83 c4 10             	add    esp,0x10
c0010e9a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ea1:	83 c4 1c             	add    esp,0x1c
c0010ea4:	5b                   	pop    ebx
c0010ea5:	5e                   	pop    esi
c0010ea6:	5f                   	pop    edi
c0010ea7:	5d                   	pop    ebp
c0010ea8:	c3                   	ret    
c0010ea9:	90                   	nop

c0010eaa <VgaText::clearScreen()>:
c0010eaa:	57                   	push   edi
c0010eab:	56                   	push   esi
c0010eac:	31 f6                	xor    esi,esi
c0010eae:	53                   	push   ebx
c0010eaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010eb3:	52                   	push   edx
c0010eb4:	6a 00                	push   0x0
c0010eb6:	6a 00                	push   0x0
c0010eb8:	53                   	push   ebx
c0010eb9:	e8 88 f9 ff ff       	call   c0010846 <VgaText::setCursor(int, int)>
c0010ebe:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010ecb:	7e 20                	jle    c0010eed <VgaText::clearScreen()+0x43>
c0010ecd:	31 ff                	xor    edi,edi
c0010ecf:	50                   	push   eax
c0010ed0:	50                   	push   eax
c0010ed1:	56                   	push   esi
c0010ed2:	57                   	push   edi
c0010ed3:	47                   	inc    edi
c0010ed4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ed7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010eda:	6a 20                	push   0x20
c0010edc:	53                   	push   ebx
c0010edd:	e8 f8 f8 ff ff       	call   c00107da <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ee2:	83 c4 20             	add    esp,0x20
c0010ee5:	83 ff 50             	cmp    edi,0x50
c0010ee8:	75 e5                	jne    c0010ecf <VgaText::clearScreen()+0x25>
c0010eea:	46                   	inc    esi
c0010eeb:	eb db                	jmp    c0010ec8 <VgaText::clearScreen()+0x1e>
c0010eed:	83 ec 0c             	sub    esp,0xc
c0010ef0:	53                   	push   ebx
c0010ef1:	e8 2e fe ff ff       	call   c0010d24 <VgaText::doUpdate()>
c0010ef6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010efd:	83 c4 10             	add    esp,0x10
c0010f00:	5b                   	pop    ebx
c0010f01:	5e                   	pop    esi
c0010f02:	5f                   	pop    edi
c0010f03:	c3                   	ret    

c0010f04 <VgaText::putchar(char)>:
c0010f04:	56                   	push   esi
c0010f05:	53                   	push   ebx
c0010f06:	83 ec 14             	sub    esp,0x14
c0010f09:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f0d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f11:	3c 5b                	cmp    al,0x5b
c0010f13:	75 18                	jne    c0010f2d <VgaText::putchar(char)+0x29>
c0010f15:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f19:	74 1f                	je     c0010f3a <VgaText::putchar(char)+0x36>
c0010f1b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f21:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f28:	e9 bd 00 00 00       	jmp    c0010fea <VgaText::putchar(char)+0xe6>
c0010f2d:	3c 1b                	cmp    al,0x1b
c0010f2f:	75 09                	jne    c0010f3a <VgaText::putchar(char)+0x36>
c0010f31:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f35:	e9 b0 00 00 00       	jmp    c0010fea <VgaText::putchar(char)+0xe6>
c0010f3a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f3d:	84 c9                	test   cl,cl
c0010f3f:	0f 84 92 00 00 00    	je     c0010fd7 <VgaText::putchar(char)+0xd3>
c0010f45:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f48:	80 fa 3e             	cmp    dl,0x3e
c0010f4b:	77 76                	ja     c0010fc3 <VgaText::putchar(char)+0xbf>
c0010f4d:	3c 6d                	cmp    al,0x6d
c0010f4f:	75 47                	jne    c0010f98 <VgaText::putchar(char)+0x94>
c0010f51:	31 f6                	xor    esi,esi
c0010f53:	31 d2                	xor    edx,edx
c0010f55:	31 c0                	xor    eax,eax
c0010f57:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f5a:	7e 2d                	jle    c0010f89 <VgaText::putchar(char)+0x85>
c0010f5c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f61:	80 fa 3b             	cmp    dl,0x3b
c0010f64:	75 17                	jne    c0010f7d <VgaText::putchar(char)+0x79>
c0010f66:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f6a:	50                   	push   eax
c0010f6b:	53                   	push   ebx
c0010f6c:	e8 fd f6 ff ff       	call   c001066e <VgaText::doANSI_SGR(int)>
c0010f71:	59                   	pop    ecx
c0010f72:	31 d2                	xor    edx,edx
c0010f74:	58                   	pop    eax
c0010f75:	31 c0                	xor    eax,eax
c0010f77:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f7b:	eb 09                	jmp    c0010f86 <VgaText::putchar(char)+0x82>
c0010f7d:	6b c0 0a             	imul   eax,eax,0xa
c0010f80:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f84:	88 ca                	mov    dl,cl
c0010f86:	46                   	inc    esi
c0010f87:	eb ce                	jmp    c0010f57 <VgaText::putchar(char)+0x53>
c0010f89:	84 d2                	test   dl,dl
c0010f8b:	74 2e                	je     c0010fbb <VgaText::putchar(char)+0xb7>
c0010f8d:	50                   	push   eax
c0010f8e:	53                   	push   ebx
c0010f8f:	e8 da f6 ff ff       	call   c001066e <VgaText::doANSI_SGR(int)>
c0010f94:	58                   	pop    eax
c0010f95:	5a                   	pop    edx
c0010f96:	eb 23                	jmp    c0010fbb <VgaText::putchar(char)+0xb7>
c0010f98:	3c 4a                	cmp    al,0x4a
c0010f9a:	75 1f                	jne    c0010fbb <VgaText::putchar(char)+0xb7>
c0010f9c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010fa0:	75 19                	jne    c0010fbb <VgaText::putchar(char)+0xb7>
c0010fa2:	83 ec 0c             	sub    esp,0xc
c0010fa5:	53                   	push   ebx
c0010fa6:	e8 ff fe ff ff       	call   c0010eaa <VgaText::clearScreen()>
c0010fab:	83 c4 0c             	add    esp,0xc
c0010fae:	6a 00                	push   0x0
c0010fb0:	6a 00                	push   0x0
c0010fb2:	53                   	push   ebx
c0010fb3:	e8 8e f8 ff ff       	call   c0010846 <VgaText::setCursor(int, int)>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010fc1:	eb 27                	jmp    c0010fea <VgaText::putchar(char)+0xe6>
c0010fc3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010fc6:	83 fa 0e             	cmp    edx,0xe
c0010fc9:	7f 1f                	jg     c0010fea <VgaText::putchar(char)+0xe6>
c0010fcb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010fd1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010fd5:	eb 13                	jmp    c0010fea <VgaText::putchar(char)+0xe6>
c0010fd7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010fda:	0f be c0             	movsx  eax,al
c0010fdd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010fe0:	50                   	push   eax
c0010fe1:	53                   	push   ebx
c0010fe2:	e8 71 fb ff ff       	call   c0010b58 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010fe7:	83 c4 10             	add    esp,0x10
c0010fea:	83 c4 14             	add    esp,0x14
c0010fed:	5b                   	pop    ebx
c0010fee:	5e                   	pop    esi
c0010fef:	c3                   	ret    

c0010ff0 <VgaText::puts(char const*)>:
c0010ff0:	53                   	push   ebx
c0010ff1:	83 ec 08             	sub    esp,0x8
c0010ff4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ff8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ffb:	84 c0                	test   al,al
c0010ffd:	74 12                	je     c0011011 <VgaText::puts(char const*)+0x21>
c0010fff:	43                   	inc    ebx
c0011000:	51                   	push   ecx
c0011001:	51                   	push   ecx
c0011002:	50                   	push   eax
c0011003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011007:	e8 f8 fe ff ff       	call   c0010f04 <VgaText::putchar(char)>
c001100c:	83 c4 10             	add    esp,0x10
c001100f:	eb e7                	jmp    c0010ff8 <VgaText::puts(char const*)+0x8>
c0011011:	83 c4 08             	add    esp,0x8
c0011014:	5b                   	pop    ebx
c0011015:	c3                   	ret    

c0011016 <VgaText::putx(unsigned int)>:
c0011016:	57                   	push   edi
c0011017:	b9 11 00 00 00       	mov    ecx,0x11
c001101c:	56                   	push   esi
c001101d:	be ee ac 02 c0       	mov    esi,0xc002acee
c0011022:	53                   	push   ebx
c0011023:	83 ec 20             	sub    esp,0x20
c0011026:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001102a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001102e:	fc                   	cld    
c001102f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011031:	be 08 00 00 00       	mov    esi,0x8
c0011036:	50                   	push   eax
c0011037:	50                   	push   eax
c0011038:	89 d8                	mov    eax,ebx
c001103a:	c1 e3 04             	shl    ebx,0x4
c001103d:	c1 e8 1c             	shr    eax,0x1c
c0011040:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011045:	50                   	push   eax
c0011046:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001104a:	e8 b5 fe ff ff       	call   c0010f04 <VgaText::putchar(char)>
c001104f:	83 c4 10             	add    esp,0x10
c0011052:	4e                   	dec    esi
c0011053:	75 e1                	jne    c0011036 <VgaText::putx(unsigned int)+0x20>
c0011055:	83 c4 20             	add    esp,0x20
c0011058:	5b                   	pop    ebx
c0011059:	5e                   	pop    esi
c001105a:	5f                   	pop    edi
c001105b:	c3                   	ret    

c001105c <VgaText::VgaText(char const*)>:
c001105c:	57                   	push   edi
c001105d:	56                   	push   esi
c001105e:	53                   	push   ebx
c001105f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011063:	83 ec 08             	sub    esp,0x8
c0011066:	6a 00                	push   0x0
c0011068:	50                   	push   eax
c0011069:	e8 8a 05 00 00       	call   c00115f8 <UnixFile::UnixFile(int)>
c001106e:	83 c4 10             	add    esp,0x10
c0011071:	ba 54 ad 02 c0       	mov    edx,0xc002ad54
c0011076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107a:	89 10                	mov    DWORD PTR [eax],edx
c001107c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011080:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001108b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011096:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001109a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00110a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a6:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b1:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110bc:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00110c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00110ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d2:	8d 50 60             	lea    edx,[eax+0x60]
c00110d5:	bb 20 ef 02 c0       	mov    ebx,0xc002ef20
c00110da:	b8 08 00 00 00       	mov    eax,0x8
c00110df:	fc                   	cld    
c00110e0:	89 d7                	mov    edi,edx
c00110e2:	89 de                	mov    esi,ebx
c00110e4:	89 c1                	mov    ecx,eax
c00110e6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ec:	05 82 00 00 00       	add    eax,0x82
c00110f1:	83 ec 08             	sub    esp,0x8
c00110f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110f8:	50                   	push   eax
c00110f9:	e8 2a f7 fe ff       	call   c0000828 <strcpy>
c00110fe:	83 c4 10             	add    esp,0x10
c0011101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011105:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c001110c:	83 ec 0c             	sub    esp,0xc
c001110f:	6a 01                	push   0x1
c0011111:	e8 25 09 00 00       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c0011116:	83 c4 10             	add    esp,0x10
c0011119:	89 c2                	mov    edx,eax
c001111b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001111f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011122:	8b 1d f0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff0
c0011128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001112c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001112f:	89 c6                	mov    esi,eax
c0011131:	e8 dc ed ff ff       	call   c000ff12 <Phys::allocatePage()>
c0011136:	6a 05                	push   0x5
c0011138:	56                   	push   esi
c0011139:	50                   	push   eax
c001113a:	53                   	push   ebx
c001113b:	e8 32 11 00 00       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011140:	83 c4 10             	add    esp,0x10
c0011143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011147:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001114a:	83 ec 04             	sub    esp,0x4
c001114d:	68 00 0f 00 00       	push   0xf00
c0011152:	6a 00                	push   0x0
c0011154:	50                   	push   eax
c0011155:	e8 12 f6 fe ff       	call   c000076c <memset>
c001115a:	83 c4 10             	add    esp,0x10
c001115d:	83 ec 04             	sub    esp,0x4
c0011160:	6a 00                	push   0x0
c0011162:	6a 07                	push   0x7
c0011164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011168:	e8 95 f5 ff ff       	call   c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001116d:	83 c4 10             	add    esp,0x10
c0011170:	83 ec 08             	sub    esp,0x8
c0011173:	6a 02                	push   0x2
c0011175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011179:	e8 c6 fa ff ff       	call   c0010c44 <VgaText::setCursorHeight(int)>
c001117e:	83 c4 10             	add    esp,0x10
c0011181:	83 ec 04             	sub    esp,0x4
c0011184:	6a 00                	push   0x0
c0011186:	6a 00                	push   0x0
c0011188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001118c:	e8 b5 f6 ff ff       	call   c0010846 <VgaText::setCursor(int, int)>
c0011191:	83 c4 10             	add    esp,0x10
c0011194:	83 ec 08             	sub    esp,0x8
c0011197:	6a 01                	push   0x1
c0011199:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001119d:	e8 8c f4 ff ff       	call   c001062e <VgaText::showCursor(bool)>
c00111a2:	83 c4 10             	add    esp,0x10
c00111a5:	83 ec 08             	sub    esp,0x8
c00111a8:	6a 01                	push   0x1
c00111aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111ae:	e8 87 f4 ff ff       	call   c001063a <VgaText::disableBlink(bool)>
c00111b3:	83 c4 10             	add    esp,0x10
c00111b6:	83 ec 0c             	sub    esp,0xc
c00111b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111bd:	e8 e8 fc ff ff       	call   c0010eaa <VgaText::clearScreen()>
c00111c2:	83 c4 10             	add    esp,0x10
c00111c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c9:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00111cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d1:	05 02 01 00 00       	add    eax,0x102
c00111d6:	83 ec 04             	sub    esp,0x4
c00111d9:	68 96 00 00 00       	push   0x96
c00111de:	6a 00                	push   0x0
c00111e0:	50                   	push   eax
c00111e1:	e8 86 f5 fe ff       	call   c000076c <memset>
c00111e6:	83 c4 10             	add    esp,0x10
c00111e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ed:	05 98 01 00 00       	add    eax,0x198
c00111f2:	83 ec 04             	sub    esp,0x4
c00111f5:	68 2c 01 00 00       	push   0x12c
c00111fa:	6a 00                	push   0x0
c00111fc:	50                   	push   eax
c00111fd:	e8 6a f5 fe ff       	call   c000076c <memset>
c0011202:	83 c4 10             	add    esp,0x10
c0011205:	90                   	nop
c0011206:	5b                   	pop    ebx
c0011207:	5e                   	pop    esi
c0011208:	5f                   	pop    edi
c0011209:	c3                   	ret    

c001120a <VgaText::receiveKey(unsigned char)>:
c001120a:	55                   	push   ebp
c001120b:	57                   	push   edi
c001120c:	56                   	push   esi
c001120d:	53                   	push   ebx
c001120e:	83 ec 1c             	sub    esp,0x1c
c0011211:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011215:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011219:	84 db                	test   bl,bl
c001121b:	0f 84 c9 00 00 00    	je     c00112ea <VgaText::receiveKey(unsigned char)+0xe0>
c0011221:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0011227:	80 fb 08             	cmp    bl,0x8
c001122a:	75 2c                	jne    c0011258 <VgaText::receiveKey(unsigned char)+0x4e>
c001122c:	83 ec 0c             	sub    esp,0xc
c001122f:	57                   	push   edi
c0011230:	e8 53 f5 fe ff       	call   c0000788 <strlen>
c0011235:	83 c4 10             	add    esp,0x10
c0011238:	85 c0                	test   eax,eax
c001123a:	74 41                	je     c001127d <VgaText::receiveKey(unsigned char)+0x73>
c001123c:	50                   	push   eax
c001123d:	50                   	push   eax
c001123e:	6a 08                	push   0x8
c0011240:	56                   	push   esi
c0011241:	e8 be fc ff ff       	call   c0010f04 <VgaText::putchar(char)>
c0011246:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011249:	e8 3a f5 fe ff       	call   c0000788 <strlen>
c001124e:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0011256:	eb 22                	jmp    c001127a <VgaText::receiveKey(unsigned char)+0x70>
c0011258:	0f be c3             	movsx  eax,bl
c001125b:	52                   	push   edx
c001125c:	52                   	push   edx
c001125d:	50                   	push   eax
c001125e:	56                   	push   esi
c001125f:	e8 a0 fc ff ff       	call   c0010f04 <VgaText::putchar(char)>
c0011264:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011268:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001126d:	59                   	pop    ecx
c001126e:	5d                   	pop    ebp
c001126f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011273:	50                   	push   eax
c0011274:	57                   	push   edi
c0011275:	e8 ee f6 fe ff       	call   c0000968 <strcat>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011284:	75 05                	jne    c001128b <VgaText::receiveKey(unsigned char)+0x81>
c0011286:	80 fb 0a             	cmp    bl,0xa
c0011289:	75 53                	jne    c00112de <VgaText::receiveKey(unsigned char)+0xd4>
c001128b:	83 ec 0c             	sub    esp,0xc
c001128e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0011294:	53                   	push   ebx
c0011295:	e8 ee f4 fe ff       	call   c0000788 <strlen>
c001129a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001129d:	89 c5                	mov    ebp,eax
c001129f:	e8 e4 f4 fe ff       	call   c0000788 <strlen>
c00112a4:	83 c4 10             	add    esp,0x10
c00112a7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112ab:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112b0:	76 10                	jbe    c00112c2 <VgaText::receiveKey(unsigned char)+0xb8>
c00112b2:	83 ec 0c             	sub    esp,0xc
c00112b5:	68 ff ac 02 c0       	push   0xc002acff
c00112ba:	e8 3c 95 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	50                   	push   eax
c00112c3:	50                   	push   eax
c00112c4:	57                   	push   edi
c00112c5:	53                   	push   ebx
c00112c6:	e8 9d f6 fe ff       	call   c0000968 <strcat>
c00112cb:	83 c4 0c             	add    esp,0xc
c00112ce:	68 96 00 00 00       	push   0x96
c00112d3:	6a 00                	push   0x0
c00112d5:	57                   	push   edi
c00112d6:	e8 91 f4 fe ff       	call   c000076c <memset>
c00112db:	83 c4 10             	add    esp,0x10
c00112de:	83 ec 0c             	sub    esp,0xc
c00112e1:	56                   	push   esi
c00112e2:	e8 3d fa ff ff       	call   c0010d24 <VgaText::doUpdate()>
c00112e7:	83 c4 10             	add    esp,0x10
c00112ea:	83 c4 1c             	add    esp,0x1c
c00112ed:	5b                   	pop    ebx
c00112ee:	5e                   	pop    esi
c00112ef:	5f                   	pop    edi
c00112f0:	5d                   	pop    ebp
c00112f1:	c3                   	ret    

c00112f2 <VgaText::write(unsigned long long, void*, int*)>:
c00112f2:	55                   	push   ebp
c00112f3:	57                   	push   edi
c00112f4:	56                   	push   esi
c00112f5:	53                   	push   ebx
c00112f6:	83 ec 0c             	sub    esp,0xc
c00112f9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00112fd:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011301:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011305:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001130c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001130f:	39 eb                	cmp    ebx,ebp
c0011311:	74 13                	je     c0011326 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011313:	43                   	inc    ebx
c0011314:	50                   	push   eax
c0011315:	50                   	push   eax
c0011316:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001131a:	50                   	push   eax
c001131b:	56                   	push   esi
c001131c:	e8 e3 fb ff ff       	call   c0010f04 <VgaText::putchar(char)>
c0011321:	83 c4 10             	add    esp,0x10
c0011324:	eb e9                	jmp    c001130f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011326:	83 ec 0c             	sub    esp,0xc
c0011329:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011330:	56                   	push   esi
c0011331:	e8 ee f9 ff ff       	call   c0010d24 <VgaText::doUpdate()>
c0011336:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001133a:	89 38                	mov    DWORD PTR [eax],edi
c001133c:	83 c4 1c             	add    esp,0x1c
c001133f:	31 c0                	xor    eax,eax
c0011341:	5b                   	pop    ebx
c0011342:	5e                   	pop    esi
c0011343:	5f                   	pop    edi
c0011344:	5d                   	pop    ebp
c0011345:	c3                   	ret    

c0011346 <newTerminal(char*)>:
c0011346:	83 ec 28             	sub    esp,0x28
c0011349:	68 c4 02 00 00       	push   0x2c4
c001134e:	e8 53 e5 ff ff       	call   c000f8a6 <malloc>
c0011353:	5a                   	pop    edx
c0011354:	59                   	pop    ecx
c0011355:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011359:	50                   	push   eax
c001135a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001135e:	e8 f9 fc ff ff       	call   c001105c <VgaText::VgaText(char const*)>
c0011363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011367:	83 c4 2c             	add    esp,0x2c
c001136a:	c3                   	ret    
c001136b:	90                   	nop

c001136c <TSS::TSS()>:
c001136c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011370:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011377:	90                   	nop
c0011378:	c3                   	ret    
c0011379:	90                   	nop

c001137a <TSS::setESP(unsigned long)>:
c001137a:	55                   	push   ebp
c001137b:	89 e5                	mov    ebp,esp
c001137d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011380:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011383:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011386:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011389:	90                   	nop
c001138a:	5d                   	pop    ebp
c001138b:	c3                   	ret    

c001138c <TSS::flush()>:
c001138c:	55                   	push   ebp
c001138d:	89 e5                	mov    ebp,esp
c001138f:	83 ec 10             	sub    esp,0x10
c0011392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011395:	8b 00                	mov    eax,DWORD PTR [eax]
c0011397:	83 c8 03             	or     eax,0x3
c001139a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001139e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00113a2:	66 89 d0             	mov    ax,dx
c00113a5:	0f 00 d8             	ltr    ax
c00113a8:	90                   	nop
c00113a9:	c9                   	leave  
c00113aa:	c3                   	ret    
c00113ab:	90                   	nop

c00113ac <TSS::setup(unsigned long, unsigned long)>:
c00113ac:	55                   	push   ebp
c00113ad:	89 e5                	mov    ebp,esp
c00113af:	83 ec 18             	sub    esp,0x18
c00113b2:	83 ec 0c             	sub    esp,0xc
c00113b5:	6a 68                	push   0x68
c00113b7:	e8 ea e4 ff ff       	call   c000f8a6 <malloc>
c00113bc:	83 c4 10             	add    esp,0x10
c00113bf:	89 c2                	mov    edx,eax
c00113c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113cd:	83 ec 04             	sub    esp,0x4
c00113d0:	6a 68                	push   0x68
c00113d2:	6a 00                	push   0x0
c00113d4:	50                   	push   eax
c00113d5:	e8 92 f3 fe ff       	call   c000076c <memset>
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e3:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00113e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113ef:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00113f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113fe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011404:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011407:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001140d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011410:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011413:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001141c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001141f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011428:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001142b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011437:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001143d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011440:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011443:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001144c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001144f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011452:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011458:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001145b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001145e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011464:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011467:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001146e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011471:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011474:	0f 20 da             	mov    edx,cr3
c0011477:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001147a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001147d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011483:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011486:	83 ec 08             	sub    esp,0x8
c0011489:	50                   	push   eax
c001148a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001148d:	50                   	push   eax
c001148e:	e8 ef db ff ff       	call   c000f082 <GDTEntry::setBase(unsigned int)>
c0011493:	83 c4 10             	add    esp,0x10
c0011496:	83 ec 08             	sub    esp,0x8
c0011499:	6a 68                	push   0x68
c001149b:	8d 45 ec             	lea    eax,[ebp-0x14]
c001149e:	50                   	push   eax
c001149f:	e8 fa db ff ff       	call   c000f09e <GDTEntry::setLimit(unsigned int)>
c00114a4:	83 c4 10             	add    esp,0x10
c00114a7:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114ab:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114ae:	83 e0 0f             	and    eax,0xf
c00114b1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114b4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114b7:	83 c8 40             	or     eax,0x40
c00114ba:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114bd:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00114c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114c8:	05 78 01 00 00       	add    eax,0x178
c00114cd:	83 ec 04             	sub    esp,0x4
c00114d0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00114d3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00114d6:	50                   	push   eax
c00114d7:	e8 f6 db ff ff       	call   c000f0d2 <GDT::addEntry(GDTEntry)>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	89 c2                	mov    edx,eax
c00114e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e4:	89 10                	mov    DWORD PTR [eax],edx
c00114e6:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00114eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114f1:	05 78 01 00 00       	add    eax,0x178
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	50                   	push   eax
c00114fa:	e8 17 dc ff ff       	call   c000f116 <GDT::flush()>
c00114ff:	83 c4 10             	add    esp,0x10
c0011502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011505:	8b 00                	mov    eax,DWORD PTR [eax]
c0011507:	83 ec 08             	sub    esp,0x8
c001150a:	50                   	push   eax
c001150b:	68 68 ad 02 c0       	push   0xc002ad68
c0011510:	e8 2c 19 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0011515:	83 c4 10             	add    esp,0x10
c0011518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001151b:	8b 00                	mov    eax,DWORD PTR [eax]
c001151d:	c9                   	leave  
c001151e:	c3                   	ret    
c001151f:	90                   	nop

c0011520 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011524:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001152b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011530:	75 08                	jne    c001153a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011532:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011538:	eb 38                	jmp    c0011572 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001153a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001153f:	75 17                	jne    c0011558 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011541:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011546:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011549:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001154f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011551:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011555:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011558:	89 c1                	mov    ecx,eax
c001155a:	83 e1 fd             	and    ecx,0xfffffffd
c001155d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011563:	74 cd                	je     c0011532 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011565:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001156a:	83 e0 ef             	and    eax,0xffffffef
c001156d:	83 f8 08             	cmp    eax,0x8
c0011570:	76 c0                	jbe    c0011532 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011572:	31 c0                	xor    eax,eax
c0011574:	c3                   	ret    
c0011575:	90                   	nop

c0011576 <ReservedFilename::isAtty()>:
c0011576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001157a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001157d:	31 c0                	xor    eax,eax
c001157f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011585:	74 09                	je     c0011590 <ReservedFilename::isAtty()+0x1a>
c0011587:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001158d:	0f 94 c0             	sete   al
c0011590:	c3                   	ret    
c0011591:	90                   	nop

c0011592 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001159a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115a1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115a6:	75 08                	jne    c00115b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00115a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115ae:	eb 3d                	jmp    c00115ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115b5:	75 17                	jne    c00115ce <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115bf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00115c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115cb:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00115ce:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115d3:	75 04                	jne    c00115d9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00115d5:	89 0a                	mov    DWORD PTR [edx],ecx
c00115d7:	eb 14                	jmp    c00115ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115d9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00115de:	74 c8                	je     c00115a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115e0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115e5:	83 e0 ef             	and    eax,0xffffffef
c00115e8:	83 f8 08             	cmp    eax,0x8
c00115eb:	76 bb                	jbe    c00115a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115ed:	31 c0                	xor    eax,eax
c00115ef:	c3                   	ret    

c00115f0 <UnixFile::getFileDescriptor()>:
c00115f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115f7:	c3                   	ret    

c00115f8 <UnixFile::UnixFile(int)>:
c00115f8:	53                   	push   ebx
c00115f9:	83 ec 28             	sub    esp,0x28
c00115fc:	ba 54 ae 02 c0       	mov    edx,0xc002ae54
c0011601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011605:	89 10                	mov    DWORD PTR [eax],edx
c0011607:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001160f:	0f 8f 8c 01 00 00    	jg     c00117a1 <UnixFile::UnixFile(int)+0x1a9>
c0011615:	a1 00 de 02 c0       	mov    eax,ds:0xc002de00
c001161a:	8d 50 01             	lea    edx,[eax+0x1]
c001161d:	89 15 00 de 02 c0    	mov    DWORD PTR ds:0xc002de00,edx
c0011623:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011627:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001162a:	83 ec 08             	sub    esp,0x8
c001162d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011631:	68 d8 ef 02 c0       	push   0xc002efd8
c0011636:	e8 31 79 01 00       	call   c0028f6c <LinkedList<UnixFile>::addElement(UnixFile*)>
c001163b:	83 c4 10             	add    esp,0x10
c001163e:	a0 d4 ef 02 c0       	mov    al,ds:0xc002efd4
c0011643:	83 f0 01             	xor    eax,0x1
c0011646:	84 c0                	test   al,al
c0011648:	0f 84 54 01 00 00    	je     c00117a2 <UnixFile::UnixFile(int)+0x1aa>
c001164e:	c6 05 d4 ef 02 c0 01 	mov    BYTE PTR ds:0xc002efd4,0x1
c0011655:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001165d:	83 ec 0c             	sub    esp,0xc
c0011660:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011664:	e8 3d e2 ff ff       	call   c000f8a6 <malloc>
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	89 c3                	mov    ebx,eax
c001166e:	83 ec 08             	sub    esp,0x8
c0011671:	68 03 ff ff 0f       	push   0xfffff03
c0011676:	53                   	push   ebx
c0011677:	e8 2c 01 00 00       	call   c00117a8 <ReservedFilename::ReservedFilename(int)>
c001167c:	83 c4 10             	add    esp,0x10
c001167f:	89 1d cc ef 02 c0    	mov    DWORD PTR ds:0xc002efcc,ebx
c0011685:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001168d:	83 ec 0c             	sub    esp,0xc
c0011690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011694:	e8 0d e2 ff ff       	call   c000f8a6 <malloc>
c0011699:	83 c4 10             	add    esp,0x10
c001169c:	89 c3                	mov    ebx,eax
c001169e:	83 ec 08             	sub    esp,0x8
c00116a1:	68 01 ff ff 0f       	push   0xfffff01
c00116a6:	53                   	push   ebx
c00116a7:	e8 fc 00 00 00       	call   c00117a8 <ReservedFilename::ReservedFilename(int)>
c00116ac:	83 c4 10             	add    esp,0x10
c00116af:	89 1d d0 ef 02 c0    	mov    DWORD PTR ds:0xc002efd0,ebx
c00116b5:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00116bd:	83 ec 0c             	sub    esp,0xc
c00116c0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116c4:	e8 dd e1 ff ff       	call   c000f8a6 <malloc>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	89 c3                	mov    ebx,eax
c00116ce:	83 ec 08             	sub    esp,0x8
c00116d1:	68 00 ff ff 0f       	push   0xfffff00
c00116d6:	53                   	push   ebx
c00116d7:	e8 cc 00 00 00       	call   c00117a8 <ReservedFilename::ReservedFilename(int)>
c00116dc:	83 c4 10             	add    esp,0x10
c00116df:	89 1d c4 ef 02 c0    	mov    DWORD PTR ds:0xc002efc4,ebx
c00116e5:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116ed:	83 ec 0c             	sub    esp,0xc
c00116f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116f4:	e8 ad e1 ff ff       	call   c000f8a6 <malloc>
c00116f9:	83 c4 10             	add    esp,0x10
c00116fc:	89 c3                	mov    ebx,eax
c00116fe:	83 ec 08             	sub    esp,0x8
c0011701:	68 02 ff ff 0f       	push   0xfffff02
c0011706:	53                   	push   ebx
c0011707:	e8 9c 00 00 00       	call   c00117a8 <ReservedFilename::ReservedFilename(int)>
c001170c:	83 c4 10             	add    esp,0x10
c001170f:	89 1d c8 ef 02 c0    	mov    DWORD PTR ds:0xc002efc8,ebx
c0011715:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001171d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011722:	7f 7e                	jg     c00117a2 <UnixFile::UnixFile(int)+0x1aa>
c0011724:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001172c:	83 ec 0c             	sub    esp,0xc
c001172f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011733:	e8 6e e1 ff ff       	call   c000f8a6 <malloc>
c0011738:	83 c4 10             	add    esp,0x10
c001173b:	89 c3                	mov    ebx,eax
c001173d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011741:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011746:	83 ec 08             	sub    esp,0x8
c0011749:	50                   	push   eax
c001174a:	53                   	push   ebx
c001174b:	e8 58 00 00 00       	call   c00117a8 <ReservedFilename::ReservedFilename(int)>
c0011750:	83 c4 10             	add    esp,0x10
c0011753:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011757:	89 1c 85 a0 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1060],ebx
c001175e:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011766:	83 ec 0c             	sub    esp,0xc
c0011769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001176d:	e8 34 e1 ff ff       	call   c000f8a6 <malloc>
c0011772:	83 c4 10             	add    esp,0x10
c0011775:	89 c3                	mov    ebx,eax
c0011777:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001177b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011780:	83 ec 08             	sub    esp,0x8
c0011783:	50                   	push   eax
c0011784:	53                   	push   ebx
c0011785:	e8 1e 00 00 00       	call   c00117a8 <ReservedFilename::ReservedFilename(int)>
c001178a:	83 c4 10             	add    esp,0x10
c001178d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011791:	89 1c 85 60 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10a0],ebx
c0011798:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001179c:	e9 7c ff ff ff       	jmp    c001171d <UnixFile::UnixFile(int)+0x125>
c00117a1:	90                   	nop
c00117a2:	83 c4 28             	add    esp,0x28
c00117a5:	5b                   	pop    ebx
c00117a6:	c3                   	ret    
c00117a7:	90                   	nop

c00117a8 <ReservedFilename::ReservedFilename(int)>:
c00117a8:	83 ec 0c             	sub    esp,0xc
c00117ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117af:	83 ec 08             	sub    esp,0x8
c00117b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117b6:	50                   	push   eax
c00117b7:	e8 3c fe ff ff       	call   c00115f8 <UnixFile::UnixFile(int)>
c00117bc:	83 c4 10             	add    esp,0x10
c00117bf:	ba 70 ae 02 c0       	mov    edx,0xc002ae70
c00117c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c8:	89 10                	mov    DWORD PTR [eax],edx
c00117ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00117d5:	90                   	nop
c00117d6:	83 c4 0c             	add    esp,0xc
c00117d9:	c3                   	ret    

c00117da <UnixFile::~UnixFile()>:
c00117da:	83 ec 1c             	sub    esp,0x1c
c00117dd:	ba 54 ae 02 c0       	mov    edx,0xc002ae54
c00117e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117e6:	89 10                	mov    DWORD PTR [eax],edx
c00117e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117ef:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00117f4:	7f 73                	jg     c0011869 <UnixFile::~UnixFile()+0x8f>
c00117f6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117fe:	83 ec 0c             	sub    esp,0xc
c0011801:	68 d8 ef 02 c0       	push   0xc002efd8
c0011806:	e8 35 78 01 00       	call   c0029040 <LinkedList<UnixFile>::getFirstElement()>
c001180b:	83 c4 10             	add    esp,0x10
c001180e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011812:	83 ec 0c             	sub    esp,0xc
c0011815:	68 d8 ef 02 c0       	push   0xc002efd8
c001181a:	e8 29 78 01 00       	call   c0029048 <LinkedList<UnixFile>::removeFirst()>
c001181f:	83 c4 10             	add    esp,0x10
c0011822:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011826:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001182a:	74 40                	je     c001186c <UnixFile::~UnixFile()+0x92>
c001182c:	83 ec 08             	sub    esp,0x8
c001182f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011833:	68 d8 ef 02 c0       	push   0xc002efd8
c0011838:	e8 2f 77 01 00       	call   c0028f6c <LinkedList<UnixFile>::addElement(UnixFile*)>
c001183d:	83 c4 10             	add    esp,0x10
c0011840:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011844:	8d 50 01             	lea    edx,[eax+0x1]
c0011847:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001184b:	3d 88 13 00 00       	cmp    eax,0x1388
c0011850:	0f 94 c0             	sete   al
c0011853:	84 c0                	test   al,al
c0011855:	74 a7                	je     c00117fe <UnixFile::~UnixFile()+0x24>
c0011857:	83 ec 0c             	sub    esp,0xc
c001185a:	68 2c ae 02 c0       	push   0xc002ae2c
c001185f:	e8 97 8f 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0011864:	83 c4 10             	add    esp,0x10
c0011867:	eb 95                	jmp    c00117fe <UnixFile::~UnixFile()+0x24>
c0011869:	90                   	nop
c001186a:	eb 01                	jmp    c001186d <UnixFile::~UnixFile()+0x93>
c001186c:	90                   	nop
c001186d:	90                   	nop
c001186e:	83 c4 1c             	add    esp,0x1c
c0011871:	c3                   	ret    

c0011872 <UnixFile::~UnixFile()>:
c0011872:	83 ec 0c             	sub    esp,0xc
c0011875:	83 ec 0c             	sub    esp,0xc
c0011878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001187c:	e8 59 ff ff ff       	call   c00117da <UnixFile::~UnixFile()>
c0011881:	83 c4 10             	add    esp,0x10
c0011884:	83 ec 08             	sub    esp,0x8
c0011887:	6a 0c                	push   0xc
c0011889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001188d:	e8 cf 14 00 00       	call   c0012d61 <operator delete(void*, unsigned long)>
c0011892:	83 c4 10             	add    esp,0x10
c0011895:	83 c4 0c             	add    esp,0xc
c0011898:	c3                   	ret    
c0011899:	90                   	nop

c001189a <ReservedFilename::~ReservedFilename()>:
c001189a:	83 ec 0c             	sub    esp,0xc
c001189d:	ba 70 ae 02 c0       	mov    edx,0xc002ae70
c00118a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a6:	89 10                	mov    DWORD PTR [eax],edx
c00118a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ac:	83 ec 0c             	sub    esp,0xc
c00118af:	50                   	push   eax
c00118b0:	e8 25 ff ff ff       	call   c00117da <UnixFile::~UnixFile()>
c00118b5:	83 c4 10             	add    esp,0x10
c00118b8:	90                   	nop
c00118b9:	83 c4 0c             	add    esp,0xc
c00118bc:	c3                   	ret    
c00118bd:	90                   	nop

c00118be <ReservedFilename::~ReservedFilename()>:
c00118be:	83 ec 0c             	sub    esp,0xc
c00118c1:	83 ec 0c             	sub    esp,0xc
c00118c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118c8:	e8 cd ff ff ff       	call   c001189a <ReservedFilename::~ReservedFilename()>
c00118cd:	83 c4 10             	add    esp,0x10
c00118d0:	83 ec 08             	sub    esp,0x8
c00118d3:	6a 0c                	push   0xc
c00118d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118d9:	e8 83 14 00 00       	call   c0012d61 <operator delete(void*, unsigned long)>
c00118de:	83 c4 10             	add    esp,0x10
c00118e1:	83 c4 0c             	add    esp,0xc
c00118e4:	c3                   	ret    

c00118e5 <getFromFileDescriptor(int)>:
c00118e5:	53                   	push   ebx
c00118e6:	83 ec 08             	sub    esp,0x8
c00118e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118ed:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00118f3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00118f9:	7f 2c                	jg     c0011927 <getFromFileDescriptor(int)+0x42>
c00118fb:	83 ec 0c             	sub    esp,0xc
c00118fe:	68 d8 ef 02 c0       	push   0xc002efd8
c0011903:	e8 38 77 01 00       	call   c0029040 <LinkedList<UnixFile>::getFirstElement()>
c0011908:	83 c4 10             	add    esp,0x10
c001190b:	85 c0                	test   eax,eax
c001190d:	75 04                	jne    c0011913 <getFromFileDescriptor(int)+0x2e>
c001190f:	31 c0                	xor    eax,eax
c0011911:	eb 6e                	jmp    c0011981 <getFromFileDescriptor(int)+0x9c>
c0011913:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011916:	74 69                	je     c0011981 <getFromFileDescriptor(int)+0x9c>
c0011918:	52                   	push   edx
c0011919:	52                   	push   edx
c001191a:	50                   	push   eax
c001191b:	68 d8 ef 02 c0       	push   0xc002efd8
c0011920:	e8 c5 77 01 00       	call   c00290ea <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011925:	eb e1                	jmp    c0011908 <getFromFileDescriptor(int)+0x23>
c0011927:	a1 cc ef 02 c0       	mov    eax,ds:0xc002efcc
c001192c:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011932:	74 4d                	je     c0011981 <getFromFileDescriptor(int)+0x9c>
c0011934:	a1 d0 ef 02 c0       	mov    eax,ds:0xc002efd0
c0011939:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001193f:	74 40                	je     c0011981 <getFromFileDescriptor(int)+0x9c>
c0011941:	a1 c8 ef 02 c0       	mov    eax,ds:0xc002efc8
c0011946:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001194c:	74 33                	je     c0011981 <getFromFileDescriptor(int)+0x9c>
c001194e:	a1 c4 ef 02 c0       	mov    eax,ds:0xc002efc4
c0011953:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011959:	74 26                	je     c0011981 <getFromFileDescriptor(int)+0x9c>
c001195b:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011961:	83 f8 08             	cmp    eax,0x8
c0011964:	77 09                	ja     c001196f <getFromFileDescriptor(int)+0x8a>
c0011966:	8b 04 85 a0 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1060]
c001196d:	eb 12                	jmp    c0011981 <getFromFileDescriptor(int)+0x9c>
c001196f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011975:	83 fb 08             	cmp    ebx,0x8
c0011978:	77 95                	ja     c001190f <getFromFileDescriptor(int)+0x2a>
c001197a:	8b 04 9d 60 ef 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd10a0]
c0011981:	83 c4 08             	add    esp,0x8
c0011984:	5b                   	pop    ebx
c0011985:	c3                   	ret    

c0011986 <__static_initialization_and_destruction_0(int, int)>:
c0011986:	83 ec 0c             	sub    esp,0xc
c0011989:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001198e:	75 34                	jne    c00119c4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011990:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011998:	75 2a                	jne    c00119c4 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001199a:	83 ec 0c             	sub    esp,0xc
c001199d:	68 d8 ef 02 c0       	push   0xc002efd8
c00119a2:	e8 6d 75 01 00       	call   c0028f14 <LinkedList<UnixFile>::LinkedList()>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	83 ec 04             	sub    esp,0x4
c00119ad:	68 90 dd 02 c0       	push   0xc002dd90
c00119b2:	68 d8 ef 02 c0       	push   0xc002efd8
c00119b7:	68 12 8f 02 c0       	push   0xc0028f12
c00119bc:	e8 1a 13 00 00       	call   c0012cdb <__cxa_atexit>
c00119c1:	83 c4 10             	add    esp,0x10
c00119c4:	90                   	nop
c00119c5:	83 c4 0c             	add    esp,0xc
c00119c8:	c3                   	ret    

c00119c9 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00119c9:	83 ec 0c             	sub    esp,0xc
c00119cc:	83 ec 08             	sub    esp,0x8
c00119cf:	68 ff ff 00 00       	push   0xffff
c00119d4:	6a 01                	push   0x1
c00119d6:	e8 ab ff ff ff       	call   c0011986 <__static_initialization_and_destruction_0(int, int)>
c00119db:	83 c4 10             	add    esp,0x10
c00119de:	83 c4 0c             	add    esp,0xc
c00119e1:	c3                   	ret    

c00119e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00119e2:	53                   	push   ebx
c00119e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119eb:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00119f1:	89 c8                	mov    eax,ecx
c00119f3:	d1 e8                	shr    eax,1
c00119f5:	03 05 08 de 02 c0    	add    eax,DWORD PTR ds:0xc002de08
c00119fb:	83 e1 01             	and    ecx,0x1
c00119fe:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a00:	75 09                	jne    c0011a0b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a02:	83 e2 f0             	and    edx,0xfffffff0
c0011a05:	09 da                	or     edx,ebx
c0011a07:	88 10                	mov    BYTE PTR [eax],dl
c0011a09:	5b                   	pop    ebx
c0011a0a:	c3                   	ret    
c0011a0b:	c1 e3 04             	shl    ebx,0x4
c0011a0e:	83 e2 0f             	and    edx,0xf
c0011a11:	09 da                	or     edx,ebx
c0011a13:	88 10                	mov    BYTE PTR [eax],dl
c0011a15:	5b                   	pop    ebx
c0011a16:	c3                   	ret    

c0011a17 <Virt::getPageState(unsigned long)>:
c0011a17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a1b:	8b 0d 08 de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de08
c0011a21:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a27:	89 d0                	mov    eax,edx
c0011a29:	d1 e8                	shr    eax,1
c0011a2b:	83 e2 01             	and    edx,0x1
c0011a2e:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a31:	75 04                	jne    c0011a37 <Virt::getPageState(unsigned long)+0x20>
c0011a33:	83 e0 0f             	and    eax,0xf
c0011a36:	c3                   	ret    
c0011a37:	c0 e8 04             	shr    al,0x4
c0011a3a:	c3                   	ret    

c0011a3b <Virt::allocateKernelVirtualPages(int)>:
c0011a3b:	55                   	push   ebp
c0011a3c:	31 ed                	xor    ebp,ebp
c0011a3e:	57                   	push   edi
c0011a3f:	56                   	push   esi
c0011a40:	53                   	push   ebx
c0011a41:	31 db                	xor    ebx,ebx
c0011a43:	83 ec 1c             	sub    esp,0x1c
c0011a46:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a4a:	8b 3d 04 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de04
c0011a50:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a55:	57                   	push   edi
c0011a56:	e8 bc ff ff ff       	call   c0011a17 <Virt::getPageState(unsigned long)>
c0011a5b:	5a                   	pop    edx
c0011a5c:	84 c0                	test   al,al
c0011a5e:	75 3a                	jne    c0011a9a <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a60:	85 db                	test   ebx,ebx
c0011a62:	75 02                	jne    c0011a66 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a64:	89 fd                	mov    ebp,edi
c0011a66:	43                   	inc    ebx
c0011a67:	39 f3                	cmp    ebx,esi
c0011a69:	74 5a                	je     c0011ac5 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a6b:	47                   	inc    edi
c0011a6c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a72:	76 31                	jbe    c0011aa5 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a74:	c7 05 04 de 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002de04,0xc8000
c0011a7e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a83:	75 28                	jne    c0011aad <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a85:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a8a:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a8f:	57                   	push   edi
c0011a90:	e8 82 ff ff ff       	call   c0011a17 <Virt::getPageState(unsigned long)>
c0011a95:	5a                   	pop    edx
c0011a96:	84 c0                	test   al,al
c0011a98:	74 c6                	je     c0011a60 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011a9a:	31 db                	xor    ebx,ebx
c0011a9c:	47                   	inc    edi
c0011a9d:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011aa3:	77 cf                	ja     c0011a74 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011aa5:	89 3d 04 de 02 c0    	mov    DWORD PTR ds:0xc002de04,edi
c0011aab:	eb a8                	jmp    c0011a55 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011aad:	83 ec 0c             	sub    esp,0xc
c0011ab0:	68 84 ae 02 c0       	push   0xc002ae84
c0011ab5:	e8 41 8d 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0011aba:	8b 3d 04 de 02 c0    	mov    edi,DWORD PTR ds:0xc002de04
c0011ac0:	83 c4 10             	add    esp,0x10
c0011ac3:	eb 90                	jmp    c0011a55 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ac5:	89 2d 04 de 02 c0    	mov    DWORD PTR ds:0xc002de04,ebp
c0011acb:	4b                   	dec    ebx
c0011acc:	74 5f                	je     c0011b2d <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011ace:	85 f6                	test   esi,esi
c0011ad0:	74 3d                	je     c0011b0f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ad2:	89 e8                	mov    eax,ebp
c0011ad4:	31 db                	xor    ebx,ebx
c0011ad6:	8d 7e ff             	lea    edi,[esi-0x1]
c0011ad9:	eb 14                	jmp    c0011aef <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011adb:	6a 01                	push   0x1
c0011add:	43                   	inc    ebx
c0011ade:	50                   	push   eax
c0011adf:	e8 fe fe ff ff       	call   c00119e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ae4:	58                   	pop    eax
c0011ae5:	39 f3                	cmp    ebx,esi
c0011ae7:	5a                   	pop    edx
c0011ae8:	74 25                	je     c0011b0f <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011aea:	a1 04 de 02 c0       	mov    eax,ds:0xc002de04
c0011aef:	8d 50 01             	lea    edx,[eax+0x1]
c0011af2:	85 db                	test   ebx,ebx
c0011af4:	89 15 04 de 02 c0    	mov    DWORD PTR ds:0xc002de04,edx
c0011afa:	74 20                	je     c0011b1c <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011afc:	39 df                	cmp    edi,ebx
c0011afe:	75 db                	jne    c0011adb <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b00:	6a 03                	push   0x3
c0011b02:	43                   	inc    ebx
c0011b03:	50                   	push   eax
c0011b04:	e8 d9 fe ff ff       	call   c00119e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b09:	59                   	pop    ecx
c0011b0a:	39 f3                	cmp    ebx,esi
c0011b0c:	58                   	pop    eax
c0011b0d:	75 db                	jne    c0011aea <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b0f:	83 c4 1c             	add    esp,0x1c
c0011b12:	89 e8                	mov    eax,ebp
c0011b14:	5b                   	pop    ebx
c0011b15:	c1 e0 0c             	shl    eax,0xc
c0011b18:	5e                   	pop    esi
c0011b19:	5f                   	pop    edi
c0011b1a:	5d                   	pop    ebp
c0011b1b:	c3                   	ret    
c0011b1c:	6a 02                	push   0x2
c0011b1e:	bb 01 00 00 00       	mov    ebx,0x1
c0011b23:	50                   	push   eax
c0011b24:	e8 b9 fe ff ff       	call   c00119e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b29:	58                   	pop    eax
c0011b2a:	5a                   	pop    edx
c0011b2b:	eb bd                	jmp    c0011aea <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b2d:	6a 04                	push   0x4
c0011b2f:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b32:	55                   	push   ebp
c0011b33:	a3 04 de 02 c0       	mov    ds:0xc002de04,eax
c0011b38:	e8 a5 fe ff ff       	call   c00119e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b3d:	59                   	pop    ecx
c0011b3e:	89 e8                	mov    eax,ebp
c0011b40:	5b                   	pop    ebx
c0011b41:	c1 e0 0c             	shl    eax,0xc
c0011b44:	83 c4 1c             	add    esp,0x1c
c0011b47:	5b                   	pop    ebx
c0011b48:	5e                   	pop    esi
c0011b49:	5f                   	pop    edi
c0011b4a:	5d                   	pop    ebp
c0011b4b:	c3                   	ret    

c0011b4c <Virt::freeSwapfilePage(unsigned long)>:
c0011b4c:	53                   	push   ebx
c0011b4d:	8b 15 ec ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efec
c0011b53:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b57:	b8 01 00 00 00       	mov    eax,0x1
c0011b5c:	89 cb                	mov    ebx,ecx
c0011b5e:	d3 e0                	shl    eax,cl
c0011b60:	c1 eb 05             	shr    ebx,0x5
c0011b63:	f7 d0                	not    eax
c0011b65:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b68:	5b                   	pop    ebx
c0011b69:	c3                   	ret    

c0011b6a <Virt::swapIDToSector(unsigned long)>:
c0011b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6e:	0f af 05 0c de 02 c0 	imul   eax,DWORD PTR ds:0xc002de0c
c0011b75:	03 05 14 de 02 c0    	add    eax,DWORD PTR ds:0xc002de14
c0011b7b:	c3                   	ret    

c0011b7c <Virt::allocateSwapfilePage()>:
c0011b7c:	55                   	push   ebp
c0011b7d:	31 d2                	xor    edx,edx
c0011b7f:	57                   	push   edi
c0011b80:	56                   	push   esi
c0011b81:	53                   	push   ebx
c0011b82:	83 ec 0c             	sub    esp,0xc
c0011b85:	8b 0d 0c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de0c
c0011b8b:	a1 10 de 02 c0       	mov    eax,ds:0xc002de10
c0011b90:	f7 f1                	div    ecx
c0011b92:	39 0d 10 de 02 c0    	cmp    DWORD PTR ds:0xc002de10,ecx
c0011b98:	72 2d                	jb     c0011bc7 <Virt::allocateSwapfilePage()+0x4b>
c0011b9a:	8b 35 ec ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efec
c0011ba0:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ba2:	f6 c2 01             	test   dl,0x1
c0011ba5:	74 3c                	je     c0011be3 <Virt::allocateSwapfilePage()+0x67>
c0011ba7:	31 c9                	xor    ecx,ecx
c0011ba9:	bf 01 00 00 00       	mov    edi,0x1
c0011bae:	eb 12                	jmp    c0011bc2 <Virt::allocateSwapfilePage()+0x46>
c0011bb0:	89 fd                	mov    ebp,edi
c0011bb2:	89 ca                	mov    edx,ecx
c0011bb4:	d3 e5                	shl    ebp,cl
c0011bb6:	c1 ea 05             	shr    edx,0x5
c0011bb9:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011bbc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bbe:	85 ea                	test   edx,ebp
c0011bc0:	74 2a                	je     c0011bec <Virt::allocateSwapfilePage()+0x70>
c0011bc2:	41                   	inc    ecx
c0011bc3:	39 c8                	cmp    eax,ecx
c0011bc5:	77 e9                	ja     c0011bb0 <Virt::allocateSwapfilePage()+0x34>
c0011bc7:	83 ec 0c             	sub    esp,0xc
c0011bca:	68 0b b0 02 c0       	push   0xc002b00b
c0011bcf:	e8 27 8c 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0011bd4:	83 c4 10             	add    esp,0x10
c0011bd7:	31 c9                	xor    ecx,ecx
c0011bd9:	83 c4 0c             	add    esp,0xc
c0011bdc:	89 c8                	mov    eax,ecx
c0011bde:	5b                   	pop    ebx
c0011bdf:	5e                   	pop    esi
c0011be0:	5f                   	pop    edi
c0011be1:	5d                   	pop    ebp
c0011be2:	c3                   	ret    
c0011be3:	89 f3                	mov    ebx,esi
c0011be5:	bd 01 00 00 00       	mov    ebp,0x1
c0011bea:	31 c9                	xor    ecx,ecx
c0011bec:	09 ea                	or     edx,ebp
c0011bee:	89 c8                	mov    eax,ecx
c0011bf0:	89 13                	mov    DWORD PTR [ebx],edx
c0011bf2:	83 c4 0c             	add    esp,0xc
c0011bf5:	5b                   	pop    ebx
c0011bf6:	5e                   	pop    esi
c0011bf7:	5f                   	pop    edi
c0011bf8:	5d                   	pop    ebp
c0011bf9:	c3                   	ret    

c0011bfa <Virt::virtualMemorySetup()>:
c0011bfa:	53                   	push   ebx
c0011bfb:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c00:	83 ec 08             	sub    esp,0x8
c0011c03:	6a 0f                	push   0xf
c0011c05:	53                   	push   ebx
c0011c06:	43                   	inc    ebx
c0011c07:	e8 d6 fd ff ff       	call   c00119e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c0c:	59                   	pop    ecx
c0011c0d:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c13:	58                   	pop    eax
c0011c14:	75 ed                	jne    c0011c03 <Virt::virtualMemorySetup()+0x9>
c0011c16:	83 ec 08             	sub    esp,0x8
c0011c19:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c1e:	68 00 00 00 c8       	push   0xc8000000
c0011c23:	68 22 b0 02 c0       	push   0xc002b022
c0011c28:	e8 14 12 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0011c2d:	58                   	pop    eax
c0011c2e:	5a                   	pop    edx
c0011c2f:	68 00 f0 ff ef       	push   0xeffff000
c0011c34:	68 36 b0 02 c0       	push   0xc002b036
c0011c39:	e8 03 12 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0011c3e:	83 c4 10             	add    esp,0x10
c0011c41:	83 ec 08             	sub    esp,0x8
c0011c44:	6a 00                	push   0x0
c0011c46:	53                   	push   ebx
c0011c47:	43                   	inc    ebx
c0011c48:	e8 95 fd ff ff       	call   c00119e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4d:	83 c4 10             	add    esp,0x10
c0011c50:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c56:	75 e9                	jne    c0011c41 <Virt::virtualMemorySetup()+0x47>
c0011c58:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c5d:	83 ec 08             	sub    esp,0x8
c0011c60:	6a 0f                	push   0xf
c0011c62:	53                   	push   ebx
c0011c63:	43                   	inc    ebx
c0011c64:	e8 79 fd ff ff       	call   c00119e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c69:	83 c4 10             	add    esp,0x10
c0011c6c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c72:	75 e9                	jne    c0011c5d <Virt::virtualMemorySetup()+0x63>
c0011c74:	83 c4 08             	add    esp,0x8
c0011c77:	5b                   	pop    ebx
c0011c78:	c3                   	ret    

c0011c79 <Virt::swappingSetup()>:
c0011c79:	c3                   	ret    

c0011c7a <Virt::setupPageSwapping(int)>:
c0011c7a:	57                   	push   edi
c0011c7b:	56                   	push   esi
c0011c7c:	53                   	push   ebx
c0011c7d:	83 ec 1c             	sub    esp,0x1c
c0011c80:	68 4a b0 02 c0       	push   0xc002b04a
c0011c85:	e8 b7 11 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0011c8a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c91:	e8 10 dc ff ff       	call   c000f8a6 <malloc>
c0011c96:	83 c4 0c             	add    esp,0xc
c0011c99:	89 c6                	mov    esi,eax
c0011c9b:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c0011ca1:	68 5e b0 02 c0       	push   0xc002b05e
c0011ca6:	50                   	push   eax
c0011ca7:	e8 f4 16 00 00       	call   c00133a0 <File::File(char const*, Process*)>
c0011cac:	89 34 24             	mov    DWORD PTR [esp],esi
c0011caf:	e8 c8 18 00 00       	call   c001357c <File::unlink()>
c0011cb4:	59                   	pop    ecx
c0011cb5:	5b                   	pop    ebx
c0011cb6:	6a 12                	push   0x12
c0011cb8:	56                   	push   esi
c0011cb9:	e8 46 17 00 00       	call   c0013404 <File::open(FileOpenMode)>
c0011cbe:	83 c4 10             	add    esp,0x10
c0011cc1:	85 c0                	test   eax,eax
c0011cc3:	0f 85 5b 01 00 00    	jne    c0011e24 <Virt::setupPageSwapping(int)+0x1aa>
c0011cc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ccd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cd5:	c1 e3 08             	shl    ebx,0x8
c0011cd8:	83 ec 0c             	sub    esp,0xc
c0011cdb:	68 00 00 01 00       	push   0x10000
c0011ce0:	e8 c1 db ff ff       	call   c000f8a6 <malloc>
c0011ce5:	83 c4 0c             	add    esp,0xc
c0011ce8:	89 c7                	mov    edi,eax
c0011cea:	68 00 00 01 00       	push   0x10000
c0011cef:	68 ee 00 00 00       	push   0xee
c0011cf4:	50                   	push   eax
c0011cf5:	e8 72 ea fe ff       	call   c000076c <memset>
c0011cfa:	83 c4 10             	add    esp,0x10
c0011cfd:	85 db                	test   ebx,ebx
c0011cff:	79 03                	jns    c0011d04 <Virt::setupPageSwapping(int)+0x8a>
c0011d01:	83 c3 0f             	add    ebx,0xf
c0011d04:	c1 fb 04             	sar    ebx,0x4
c0011d07:	4b                   	dec    ebx
c0011d08:	83 fb ff             	cmp    ebx,0xffffffff
c0011d0b:	74 4f                	je     c0011d5c <Virt::setupPageSwapping(int)+0xe2>
c0011d0d:	83 ec 0c             	sub    esp,0xc
c0011d10:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d12:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d16:	52                   	push   edx
c0011d17:	57                   	push   edi
c0011d18:	6a 00                	push   0x0
c0011d1a:	68 00 00 01 00       	push   0x10000
c0011d1f:	56                   	push   esi
c0011d20:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d23:	83 c4 20             	add    esp,0x20
c0011d26:	85 c0                	test   eax,eax
c0011d28:	0f 85 e0 00 00 00    	jne    c0011e0e <Virt::setupPageSwapping(int)+0x194>
c0011d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d32:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d37:	74 ce                	je     c0011d07 <Virt::setupPageSwapping(int)+0x8d>
c0011d39:	83 ec 08             	sub    esp,0x8
c0011d3c:	4b                   	dec    ebx
c0011d3d:	50                   	push   eax
c0011d3e:	68 b1 b0 02 c0       	push   0xc002b0b1
c0011d43:	e8 f9 10 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0011d48:	c7 04 24 ba b0 02 c0 	mov    DWORD PTR [esp],0xc002b0ba
c0011d4f:	e8 a7 8a 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	83 fb ff             	cmp    ebx,0xffffffff
c0011d5a:	75 b1                	jne    c0011d0d <Virt::setupPageSwapping(int)+0x93>
c0011d5c:	83 ec 0c             	sub    esp,0xc
c0011d5f:	56                   	push   esi
c0011d60:	e8 fd 16 00 00       	call   c0013462 <File::close()>
c0011d65:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d68:	e8 59 db ff ff       	call   c000f8c6 <rfree>
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	85 f6                	test   esi,esi
c0011d72:	74 0c                	je     c0011d80 <Virt::setupPageSwapping(int)+0x106>
c0011d74:	83 ec 0c             	sub    esp,0xc
c0011d77:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d79:	56                   	push   esi
c0011d7a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d7d:	83 c4 10             	add    esp,0x10
c0011d80:	83 ec 08             	sub    esp,0x8
c0011d83:	a1 88 f4 02 c0       	mov    eax,ds:0xc002f488
c0011d88:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d90:	68 5e b0 02 c0       	push   0xc002b05e
c0011d95:	50                   	push   eax
c0011d96:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d99:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011d9d:	c6 05 18 de 02 c0 43 	mov    BYTE PTR ds:0xc002de18,0x43
c0011da4:	c1 e2 0b             	shl    edx,0xb
c0011da7:	a3 14 de 02 c0       	mov    ds:0xc002de14,eax
c0011dac:	89 15 10 de 02 c0    	mov    DWORD PTR ds:0xc002de10,edx
c0011db2:	c7 05 0c de 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002de0c,0x8
c0011dbc:	c1 ea 08             	shr    edx,0x8
c0011dbf:	89 14 24             	mov    DWORD PTR [esp],edx
c0011dc2:	e8 df da ff ff       	call   c000f8a6 <malloc>
c0011dc7:	83 c4 0c             	add    esp,0xc
c0011dca:	89 c1                	mov    ecx,eax
c0011dcc:	a3 ec ef 02 c0       	mov    ds:0xc002efec,eax
c0011dd1:	31 d2                	xor    edx,edx
c0011dd3:	a1 10 de 02 c0       	mov    eax,ds:0xc002de10
c0011dd8:	f7 35 0c de 02 c0    	div    DWORD PTR ds:0xc002de0c
c0011dde:	c1 e8 05             	shr    eax,0x5
c0011de1:	50                   	push   eax
c0011de2:	6a 00                	push   0x0
c0011de4:	51                   	push   ecx
c0011de5:	e8 82 e9 fe ff       	call   c000076c <memset>
c0011dea:	58                   	pop    eax
c0011deb:	a1 10 de 02 c0       	mov    eax,ds:0xc002de10
c0011df0:	5a                   	pop    edx
c0011df1:	31 d2                	xor    edx,edx
c0011df3:	f7 35 0c de 02 c0    	div    DWORD PTR ds:0xc002de0c
c0011df9:	c1 e8 05             	shr    eax,0x5
c0011dfc:	50                   	push   eax
c0011dfd:	68 c0 b0 02 c0       	push   0xc002b0c0
c0011e02:	e8 3a 10 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0011e07:	83 c4 20             	add    esp,0x20
c0011e0a:	5b                   	pop    ebx
c0011e0b:	5e                   	pop    esi
c0011e0c:	5f                   	pop    edi
c0011e0d:	c3                   	ret    
c0011e0e:	83 ec 08             	sub    esp,0x8
c0011e11:	50                   	push   eax
c0011e12:	68 99 b0 02 c0       	push   0xc002b099
c0011e17:	e8 25 10 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	e9 0a ff ff ff       	jmp    c0011d2e <Virt::setupPageSwapping(int)+0xb4>
c0011e24:	83 ec 08             	sub    esp,0x8
c0011e27:	50                   	push   eax
c0011e28:	68 75 b0 02 c0       	push   0xc002b075
c0011e2d:	e8 0f 10 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0011e32:	c7 04 24 7e b0 02 c0 	mov    DWORD PTR [esp],0xc002b07e
c0011e39:	e8 bd 89 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0011e3e:	83 c4 10             	add    esp,0x10
c0011e41:	e9 83 fe ff ff       	jmp    c0011cc9 <Virt::setupPageSwapping(int)+0x4f>

c0011e46 <VAS::VAS()>:
c0011e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e55:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e60:	a3 f0 ef 02 c0       	mov    ds:0xc002eff0,eax
c0011e65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e69:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e71:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e78:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e7f:	90                   	nop
c0011e80:	c3                   	ret    
c0011e81:	90                   	nop

c0011e82 <VAS::VAS(VAS*)>:
c0011e82:	83 ec 0c             	sub    esp,0xc
c0011e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e94:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e9b:	83 ec 0c             	sub    esp,0xc
c0011e9e:	68 a4 ae 02 c0       	push   0xc002aea4
c0011ea3:	e8 53 89 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	90                   	nop
c0011eac:	83 c4 0c             	add    esp,0xc
c0011eaf:	c3                   	ret    

c0011eb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011eb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eb4:	89 c2                	mov    edx,eax
c0011eb6:	c1 e8 0a             	shr    eax,0xa
c0011eb9:	c1 ea 16             	shr    edx,0x16
c0011ebc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ec1:	19 c9                	sbb    ecx,ecx
c0011ec3:	c1 e2 0c             	shl    edx,0xc
c0011ec6:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ecc:	25 fc 0f 00 00       	and    eax,0xffc
c0011ed1:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ed8:	01 d0                	add    eax,edx
c0011eda:	c3                   	ret    
c0011edb:	90                   	nop

c0011edc <VAS::getPageTableEntry(unsigned long)>:
c0011edc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ee0:	89 ca                	mov    edx,ecx
c0011ee2:	c1 e9 0a             	shr    ecx,0xa
c0011ee5:	c1 ea 16             	shr    edx,0x16
c0011ee8:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011eee:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ef4:	c1 e0 0c             	shl    eax,0xc
c0011ef7:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011efa:	c3                   	ret    

c0011efb <Virt::freeKernelVirtualPages(unsigned long)>:
c0011efb:	57                   	push   edi
c0011efc:	56                   	push   esi
c0011efd:	be 01 00 00 00       	mov    esi,0x1
c0011f02:	53                   	push   ebx
c0011f03:	83 ec 10             	sub    esp,0x10
c0011f06:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f0a:	c1 eb 0c             	shr    ebx,0xc
c0011f0d:	eb 3f                	jmp    c0011f4e <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f0f:	83 ec 08             	sub    esp,0x8
c0011f12:	57                   	push   edi
c0011f13:	ff 35 f0 ef 02 c0    	push   DWORD PTR ds:0xc002eff0
c0011f19:	e8 be ff ff ff       	call   c0011edc <VAS::getPageTableEntry(unsigned long)>
c0011f1e:	83 c4 10             	add    esp,0x10
c0011f21:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f23:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f27:	f6 c4 04             	test   ah,0x4
c0011f2a:	75 5f                	jne    c0011f8b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f2c:	80 fa 04             	cmp    dl,0x4
c0011f2f:	74 78                	je     c0011fa9 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f31:	80 fa 02             	cmp    dl,0x2
c0011f34:	0f 84 88 00 00 00    	je     c0011fc2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f3a:	80 fa 03             	cmp    dl,0x3
c0011f3d:	0f 84 ad 00 00 00    	je     c0011ff0 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f43:	fe ca                	dec    dl
c0011f45:	0f 84 92 00 00 00    	je     c0011fdd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f4b:	43                   	inc    ebx
c0011f4c:	31 f6                	xor    esi,esi
c0011f4e:	53                   	push   ebx
c0011f4f:	89 df                	mov    edi,ebx
c0011f51:	e8 c1 fa ff ff       	call   c0011a17 <Virt::getPageState(unsigned long)>
c0011f56:	c1 e7 0c             	shl    edi,0xc
c0011f59:	59                   	pop    ecx
c0011f5a:	84 c0                	test   al,al
c0011f5c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f60:	75 ad                	jne    c0011f0f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f62:	83 ec 0c             	sub    esp,0xc
c0011f65:	68 db b0 02 c0       	push   0xc002b0db
c0011f6a:	e8 8c 88 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0011f6f:	58                   	pop    eax
c0011f70:	5a                   	pop    edx
c0011f71:	57                   	push   edi
c0011f72:	ff 35 f0 ef 02 c0    	push   DWORD PTR ds:0xc002eff0
c0011f78:	e8 5f ff ff ff       	call   c0011edc <VAS::getPageTableEntry(unsigned long)>
c0011f7d:	83 c4 10             	add    esp,0x10
c0011f80:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f82:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f86:	f6 c4 04             	test   ah,0x4
c0011f89:	74 c0                	je     c0011f4b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f8b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f8f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f94:	83 ec 0c             	sub    esp,0xc
c0011f97:	50                   	push   eax
c0011f98:	e8 eb de ff ff       	call   c000fe88 <Phys::freePage(unsigned long)>
c0011f9d:	83 c4 10             	add    esp,0x10
c0011fa0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fa4:	80 fa 04             	cmp    dl,0x4
c0011fa7:	75 88                	jne    c0011f31 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011fa9:	89 f0                	mov    eax,esi
c0011fab:	84 c0                	test   al,al
c0011fad:	75 47                	jne    c0011ff6 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011faf:	c7 44 24 20 c8 ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aec8
c0011fb7:	83 c4 10             	add    esp,0x10
c0011fba:	5b                   	pop    ebx
c0011fbb:	5e                   	pop    esi
c0011fbc:	5f                   	pop    edi
c0011fbd:	e9 39 88 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c0011fc2:	89 f0                	mov    eax,esi
c0011fc4:	84 c0                	test   al,al
c0011fc6:	75 15                	jne    c0011fdd <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fc8:	83 ec 0c             	sub    esp,0xc
c0011fcb:	68 f7 b0 02 c0       	push   0xc002b0f7
c0011fd0:	e8 26 88 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0011fd5:	83 c4 10             	add    esp,0x10
c0011fd8:	e9 6e ff ff ff       	jmp    c0011f4b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fdd:	83 ec 08             	sub    esp,0x8
c0011fe0:	6a 00                	push   0x0
c0011fe2:	53                   	push   ebx
c0011fe3:	e8 fa f9 ff ff       	call   c00119e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fe8:	83 c4 10             	add    esp,0x10
c0011feb:	e9 5b ff ff ff       	jmp    c0011f4b <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ff0:	89 f0                	mov    eax,esi
c0011ff2:	84 c0                	test   al,al
c0011ff4:	75 15                	jne    c001200b <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011ff6:	83 ec 08             	sub    esp,0x8
c0011ff9:	6a 00                	push   0x0
c0011ffb:	53                   	push   ebx
c0011ffc:	e8 e1 f9 ff ff       	call   c00119e2 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012001:	83 c4 10             	add    esp,0x10
c0012004:	83 c4 10             	add    esp,0x10
c0012007:	5b                   	pop    ebx
c0012008:	5e                   	pop    esi
c0012009:	5f                   	pop    edi
c001200a:	c3                   	ret    
c001200b:	c7 44 24 20 13 b1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b113
c0012013:	83 c4 10             	add    esp,0x10
c0012016:	5b                   	pop    ebx
c0012017:	5e                   	pop    esi
c0012018:	5f                   	pop    edi
c0012019:	e9 dd 87 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>

c001201e <VAS::freeAllocatedPages(unsigned long)>:
c001201e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012022:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012026:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001202a:	74 09                	je     c0012035 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001202c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012030:	e9 c6 fe ff ff       	jmp    c0011efb <Virt::freeKernelVirtualPages(unsigned long)>
c0012035:	c7 44 24 04 ec ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aeec
c001203d:	e9 ff 0d 00 00       	jmp    c0012e41 <Dbg::kprintf(char const*, ...)>

c0012042 <VAS::virtualToPhysical(unsigned long)>:
c0012042:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012046:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001204a:	e8 8d fe ff ff       	call   c0011edc <VAS::getPageTableEntry(unsigned long)>
c001204f:	5a                   	pop    edx
c0012050:	8b 00                	mov    eax,DWORD PTR [eax]
c0012052:	59                   	pop    ecx
c0012053:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012058:	c3                   	ret    
c0012059:	90                   	nop

c001205a <VAS::reflagRange(unsigned long, int, int, int)>:
c001205a:	55                   	push   ebp
c001205b:	57                   	push   edi
c001205c:	56                   	push   esi
c001205d:	53                   	push   ebx
c001205e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012062:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012066:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001206a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001206e:	85 db                	test   ebx,ebx
c0012070:	7e 22                	jle    c0012094 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012072:	c1 e3 0c             	shl    ebx,0xc
c0012075:	01 f3                	add    ebx,esi
c0012077:	56                   	push   esi
c0012078:	81 c6 00 10 00 00    	add    esi,0x1000
c001207e:	55                   	push   ebp
c001207f:	e8 58 fe ff ff       	call   c0011edc <VAS::getPageTableEntry(unsigned long)>
c0012084:	5a                   	pop    edx
c0012085:	59                   	pop    ecx
c0012086:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012088:	21 f9                	and    ecx,edi
c001208a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001208e:	39 f3                	cmp    ebx,esi
c0012090:	89 08                	mov    DWORD PTR [eax],ecx
c0012092:	75 e3                	jne    c0012077 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012094:	5b                   	pop    ebx
c0012095:	5e                   	pop    esi
c0012096:	5f                   	pop    edi
c0012097:	5d                   	pop    ebp
c0012098:	c3                   	ret    
c0012099:	90                   	nop

c001209a <VAS::setToWriteCombining(unsigned long, int)>:
c001209a:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001209f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120a5:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120ac:	75 01                	jne    c00120af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120ae:	c3                   	ret    
c00120af:	68 80 00 00 00       	push   0x80
c00120b4:	6a ff                	push   0xffffffff
c00120b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120c2:	e8 93 ff ff ff       	call   c001205a <VAS::reflagRange(unsigned long, int, int, int)>
c00120c7:	83 c4 14             	add    esp,0x14
c00120ca:	c3                   	ret    
c00120cb:	90                   	nop

c00120cc <VAS::mapOtherVASIn(bool, VAS*)>:
c00120cc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120d5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120dc:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00120df:	19 c0                	sbb    eax,eax
c00120e1:	83 ca 03             	or     edx,0x3
c00120e4:	83 e0 fc             	and    eax,0xfffffffc
c00120e7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120ee:	0f 20 d8             	mov    eax,cr3
c00120f1:	0f 22 d8             	mov    cr3,eax
c00120f4:	c3                   	ret    
c00120f5:	90                   	nop

c00120f6 <VAS::~VAS()>:
c00120f6:	83 ec 2c             	sub    esp,0x2c
c00120f9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012101:	fa                   	cli    
c0012102:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0012107:	40                   	inc    eax
c0012108:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001210d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012112:	8b 00                	mov    eax,DWORD PTR [eax]
c0012114:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012117:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001211d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012121:	6a 01                	push   0x1
c0012123:	50                   	push   eax
c0012124:	e8 a3 ff ff ff       	call   c00120cc <VAS::mapOtherVASIn(bool, VAS*)>
c0012129:	83 c4 0c             	add    esp,0xc
c001212c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012134:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001213c:	0f 8f d4 00 00 00    	jg     c0012216 <VAS::~VAS()+0x120>
c0012142:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012146:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012149:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001214d:	c1 e2 02             	shl    edx,0x2
c0012150:	01 d0                	add    eax,edx
c0012152:	8b 00                	mov    eax,DWORD PTR [eax]
c0012154:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001215c:	83 e0 01             	and    eax,0x1
c001215f:	0f 84 a8 00 00 00    	je     c001220d <VAS::~VAS()+0x117>
c0012165:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001216d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012175:	7f 72                	jg     c00121e9 <VAS::~VAS()+0xf3>
c0012177:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001217b:	c1 e0 0a             	shl    eax,0xa
c001217e:	89 c2                	mov    edx,eax
c0012180:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012184:	01 d0                	add    eax,edx
c0012186:	c1 e0 0c             	shl    eax,0xc
c0012189:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001218d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012192:	8b 00                	mov    eax,DWORD PTR [eax]
c0012194:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012197:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001219d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121a1:	6a 01                	push   0x1
c00121a3:	50                   	push   eax
c00121a4:	e8 07 fd ff ff       	call   c0011eb0 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00121a9:	83 c4 0c             	add    esp,0xc
c00121ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00121b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121be:	25 01 04 00 00       	and    eax,0x401
c00121c3:	3d 01 04 00 00       	cmp    eax,0x401
c00121c8:	75 19                	jne    c00121e3 <VAS::~VAS()+0xed>
c00121ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121ce:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121d3:	83 ec 0c             	sub    esp,0xc
c00121d6:	50                   	push   eax
c00121d7:	e8 ac dc ff ff       	call   c000fe88 <Phys::freePage(unsigned long)>
c00121dc:	83 c4 10             	add    esp,0x10
c00121df:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121e3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121e7:	eb 84                	jmp    c001216d <VAS::~VAS()+0x77>
c00121e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121ed:	25 00 04 00 00       	and    eax,0x400
c00121f2:	74 19                	je     c001220d <VAS::~VAS()+0x117>
c00121f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121f8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121fd:	83 ec 0c             	sub    esp,0xc
c0012200:	50                   	push   eax
c0012201:	e8 82 dc ff ff       	call   c000fe88 <Phys::freePage(unsigned long)>
c0012206:	83 c4 10             	add    esp,0x10
c0012209:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001220d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012211:	e9 1e ff ff ff       	jmp    c0012134 <VAS::~VAS()+0x3e>
c0012216:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001221a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001221d:	83 ec 0c             	sub    esp,0xc
c0012220:	50                   	push   eax
c0012221:	e8 d5 fc ff ff       	call   c0011efb <Virt::freeKernelVirtualPages(unsigned long)>
c0012226:	83 c4 10             	add    esp,0x10
c0012229:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012230:	83 ec 0c             	sub    esp,0xc
c0012233:	50                   	push   eax
c0012234:	e8 4f dc ff ff       	call   c000fe88 <Phys::freePage(unsigned long)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012240:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012244:	c1 e0 02             	shl    eax,0x2
c0012247:	83 ec 08             	sub    esp,0x8
c001224a:	50                   	push   eax
c001224b:	68 10 af 02 c0       	push   0xc002af10
c0012250:	e8 ec 0b 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0012255:	83 c4 10             	add    esp,0x10
c0012258:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001225d:	48                   	dec    eax
c001225e:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0012263:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0012268:	85 c0                	test   eax,eax
c001226a:	75 01                	jne    c001226d <VAS::~VAS()+0x177>
c001226c:	fb                   	sti    
c001226d:	90                   	nop
c001226e:	83 c4 2c             	add    esp,0x2c
c0012271:	c3                   	ret    

c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012272:	55                   	push   ebp
c0012273:	57                   	push   edi
c0012274:	56                   	push   esi
c0012275:	53                   	push   ebx
c0012276:	83 ec 1c             	sub    esp,0x1c
c0012279:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001227d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012281:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012287:	77 08                	ja     c0012291 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012289:	0f 20 d8             	mov    eax,cr3
c001228c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001228f:	75 47                	jne    c00122d8 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012291:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012295:	09 d8                	or     eax,ebx
c0012297:	a9 ff 0f 00 00       	test   eax,0xfff
c001229c:	75 57                	jne    c00122f5 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001229e:	89 de                	mov    esi,ebx
c00122a0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122a3:	c1 ee 16             	shr    esi,0x16
c00122a6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122ad:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122b1:	74 54                	je     c0012307 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122b7:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122bd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122c1:	c1 e6 0c             	shl    esi,0xc
c00122c4:	c1 eb 0a             	shr    ebx,0xa
c00122c7:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122cd:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00122d0:	83 c4 1c             	add    esp,0x1c
c00122d3:	5b                   	pop    ebx
c00122d4:	5e                   	pop    esi
c00122d5:	5f                   	pop    edi
c00122d6:	5d                   	pop    ebp
c00122d7:	c3                   	ret    
c00122d8:	83 ec 0c             	sub    esp,0xc
c00122db:	68 30 af 02 c0       	push   0xc002af30
c00122e0:	e8 5c 0b 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00122e5:	83 c4 10             	add    esp,0x10
c00122e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122ec:	09 d8                	or     eax,ebx
c00122ee:	a9 ff 0f 00 00       	test   eax,0xfff
c00122f3:	74 a9                	je     c001229e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122f5:	83 ec 0c             	sub    esp,0xc
c00122f8:	68 98 af 02 c0       	push   0xc002af98
c00122fd:	e8 f9 84 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0012302:	83 c4 10             	add    esp,0x10
c0012305:	eb 97                	jmp    c001229e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012307:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001230b:	e8 02 dc ff ff       	call   c000ff12 <Phys::allocatePage()>
c0012310:	83 ec 0c             	sub    esp,0xc
c0012313:	89 c5                	mov    ebp,eax
c0012315:	8b 0d f0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002eff0
c001231b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001231f:	6a 01                	push   0x1
c0012321:	e8 15 f7 ff ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c0012326:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001232d:	6a 01                	push   0x1
c001232f:	50                   	push   eax
c0012330:	55                   	push   ebp
c0012331:	81 cd 07 04 00 00    	or     ebp,0x407
c0012337:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001233b:	51                   	push   ecx
c001233c:	e8 27 02 00 00       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012341:	83 c4 1c             	add    esp,0x1c
c0012344:	68 00 10 00 00       	push   0x1000
c0012349:	6a 00                	push   0x0
c001234b:	50                   	push   eax
c001234c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012350:	e8 17 e4 fe ff       	call   c000076c <memset>
c0012355:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012359:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001235c:	e8 9a fb ff ff       	call   c0011efb <Virt::freeKernelVirtualPages(unsigned long)>
c0012361:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012365:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001236e:	e9 40 ff ff ff       	jmp    c00122b3 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012373:	90                   	nop

c0012374 <VAS::allocatePages(int, int)>:
c0012374:	55                   	push   ebp
c0012375:	57                   	push   edi
c0012376:	56                   	push   esi
c0012377:	53                   	push   ebx
c0012378:	83 ec 1c             	sub    esp,0x1c
c001237b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001237f:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0012384:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001238a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012390:	83 e0 01             	and    eax,0x1
c0012393:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012397:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001239b:	0f 85 cc 00 00 00    	jne    c001246d <VAS::allocatePages(int, int)+0xf9>
c00123a1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123a8:	85 c0                	test   eax,eax
c00123aa:	0f 84 a1 00 00 00    	je     c0012451 <VAS::allocatePages(int, int)+0xdd>
c00123b0:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123b8:	c1 e6 0c             	shl    esi,0xc
c00123bb:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123bf:	85 c0                	test   eax,eax
c00123c1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123c4:	7e 33                	jle    c00123f9 <VAS::allocatePages(int, int)+0x85>
c00123c6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123ca:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123ce:	81 cd 00 04 00 00    	or     ebp,0x400
c00123d4:	e8 39 db ff ff       	call   c000ff12 <Phys::allocatePage()>
c00123d9:	55                   	push   ebp
c00123da:	53                   	push   ebx
c00123db:	50                   	push   eax
c00123dc:	57                   	push   edi
c00123dd:	e8 90 fe ff ff       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123e2:	83 c4 10             	add    esp,0x10
c00123e5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123ea:	74 03                	je     c00123ef <VAS::allocatePages(int, int)+0x7b>
c00123ec:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123ef:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123f5:	39 de                	cmp    esi,ebx
c00123f7:	75 db                	jne    c00123d4 <VAS::allocatePages(int, int)+0x60>
c00123f9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123fe:	75 12                	jne    c0012412 <VAS::allocatePages(int, int)+0x9e>
c0012400:	0f 20 d8             	mov    eax,cr3
c0012403:	0f 22 d8             	mov    cr3,eax
c0012406:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001240a:	83 c4 1c             	add    esp,0x1c
c001240d:	5b                   	pop    ebx
c001240e:	5e                   	pop    esi
c001240f:	5f                   	pop    edi
c0012410:	5d                   	pop    ebp
c0012411:	c3                   	ret    
c0012412:	c1 ee 0a             	shr    esi,0xa
c0012415:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012419:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001241f:	c1 eb 0a             	shr    ebx,0xa
c0012422:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012428:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001242e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012434:	39 c3                	cmp    ebx,eax
c0012436:	77 ce                	ja     c0012406 <VAS::allocatePages(int, int)+0x92>
c0012438:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001243b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012441:	39 d8                	cmp    eax,ebx
c0012443:	73 f3                	jae    c0012438 <VAS::allocatePages(int, int)+0xc4>
c0012445:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012449:	83 c4 1c             	add    esp,0x1c
c001244c:	5b                   	pop    ebx
c001244d:	5e                   	pop    esi
c001244e:	5f                   	pop    edi
c001244f:	5d                   	pop    ebp
c0012450:	c3                   	ret    
c0012451:	83 ec 0c             	sub    esp,0xc
c0012454:	68 bc af 02 c0       	push   0xc002afbc
c0012459:	e8 9d 83 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001245e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012461:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012465:	83 c4 10             	add    esp,0x10
c0012468:	e9 43 ff ff ff       	jmp    c00123b0 <VAS::allocatePages(int, int)+0x3c>
c001246d:	83 ec 0c             	sub    esp,0xc
c0012470:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012474:	e8 c2 f5 ff ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c0012479:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001247d:	83 c4 10             	add    esp,0x10
c0012480:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012485:	0f 87 9b 00 00 00    	ja     c0012526 <VAS::allocatePages(int, int)+0x1b2>
c001248b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001248f:	85 d2                	test   edx,edx
c0012491:	7e 3c                	jle    c00124cf <VAS::allocatePages(int, int)+0x15b>
c0012493:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012497:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001249b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001249f:	c1 e5 0c             	shl    ebp,0xc
c00124a2:	81 ce 00 04 00 00    	or     esi,0x400
c00124a8:	01 dd                	add    ebp,ebx
c00124aa:	e8 63 da ff ff       	call   c000ff12 <Phys::allocatePage()>
c00124af:	56                   	push   esi
c00124b0:	53                   	push   ebx
c00124b1:	50                   	push   eax
c00124b2:	57                   	push   edi
c00124b3:	e8 ba fd ff ff       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124b8:	83 c4 10             	add    esp,0x10
c00124bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124c0:	74 03                	je     c00124c5 <VAS::allocatePages(int, int)+0x151>
c00124c2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124c5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124cb:	39 dd                	cmp    ebp,ebx
c00124cd:	75 db                	jne    c00124aa <VAS::allocatePages(int, int)+0x136>
c00124cf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124d4:	0f 84 26 ff ff ff    	je     c0012400 <VAS::allocatePages(int, int)+0x8c>
c00124da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124e2:	89 d3                	mov    ebx,edx
c00124e4:	c1 e0 0c             	shl    eax,0xc
c00124e7:	c1 eb 0a             	shr    ebx,0xa
c00124ea:	01 d0                	add    eax,edx
c00124ec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124f2:	c1 e8 0a             	shr    eax,0xa
c00124f5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012500:	2d 00 00 40 00       	sub    eax,0x400000
c0012505:	39 c3                	cmp    ebx,eax
c0012507:	0f 87 f9 fe ff ff    	ja     c0012406 <VAS::allocatePages(int, int)+0x92>
c001250d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012510:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012516:	39 d8                	cmp    eax,ebx
c0012518:	73 f3                	jae    c001250d <VAS::allocatePages(int, int)+0x199>
c001251a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001251e:	83 c4 1c             	add    esp,0x1c
c0012521:	5b                   	pop    ebx
c0012522:	5e                   	pop    esi
c0012523:	5f                   	pop    edi
c0012524:	5d                   	pop    ebp
c0012525:	c3                   	ret    
c0012526:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001252b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012531:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012538:	0f 84 4d ff ff ff    	je     c001248b <VAS::allocatePages(int, int)+0x117>
c001253e:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012546:	e9 40 ff ff ff       	jmp    c001248b <VAS::allocatePages(int, int)+0x117>
c001254b:	90                   	nop

c001254c <VAS::setCPUSpecific(unsigned long)>:
c001254c:	83 ec 0c             	sub    esp,0xc
c001254f:	6a 05                	push   0x5
c0012551:	68 00 00 40 c2       	push   0xc2400000
c0012556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001255a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001255e:	e8 0f fd ff ff       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012563:	83 c4 1c             	add    esp,0x1c
c0012566:	c3                   	ret    
c0012567:	90                   	nop

c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012568:	55                   	push   ebp
c0012569:	57                   	push   edi
c001256a:	56                   	push   esi
c001256b:	53                   	push   ebx
c001256c:	83 ec 1c             	sub    esp,0x1c
c001256f:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0012574:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012578:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001257e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012582:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012588:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001258c:	83 e0 01             	and    eax,0x1
c001258f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012593:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012597:	85 c0                	test   eax,eax
c0012599:	7e 39                	jle    c00125d4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001259b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001259f:	89 f3                	mov    ebx,esi
c00125a1:	c1 e0 0c             	shl    eax,0xc
c00125a4:	01 f0                	add    eax,esi
c00125a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125aa:	55                   	push   ebp
c00125ab:	53                   	push   ebx
c00125ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125b0:	29 f0                	sub    eax,esi
c00125b2:	01 d8                	add    eax,ebx
c00125b4:	50                   	push   eax
c00125b5:	57                   	push   edi
c00125b6:	e8 b7 fc ff ff       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125bb:	83 c4 10             	add    esp,0x10
c00125be:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c3:	74 03                	je     c00125c8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125c5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125c8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125ce:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00125d2:	75 d6                	jne    c00125aa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125d4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125d9:	75 10                	jne    c00125eb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125db:	0f 20 d8             	mov    eax,cr3
c00125de:	0f 22 d8             	mov    cr3,eax
c00125e1:	83 c4 1c             	add    esp,0x1c
c00125e4:	89 f0                	mov    eax,esi
c00125e6:	5b                   	pop    ebx
c00125e7:	5e                   	pop    esi
c00125e8:	5f                   	pop    edi
c00125e9:	5d                   	pop    ebp
c00125ea:	c3                   	ret    
c00125eb:	89 f3                	mov    ebx,esi
c00125ed:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125f1:	c1 eb 0a             	shr    ebx,0xa
c00125f4:	c1 e0 0c             	shl    eax,0xc
c00125f7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125fd:	01 f0                	add    eax,esi
c00125ff:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012605:	c1 e8 0a             	shr    eax,0xa
c0012608:	25 00 f0 ff ff       	and    eax,0xfffff000
c001260d:	2d 00 00 40 00       	sub    eax,0x400000
c0012612:	39 c3                	cmp    ebx,eax
c0012614:	77 cb                	ja     c00125e1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012616:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012619:	81 c3 00 10 00 00    	add    ebx,0x1000
c001261f:	39 d8                	cmp    eax,ebx
c0012621:	73 f3                	jae    c0012616 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012623:	83 c4 1c             	add    esp,0x1c
c0012626:	89 f0                	mov    eax,esi
c0012628:	5b                   	pop    ebx
c0012629:	5e                   	pop    esi
c001262a:	5f                   	pop    edi
c001262b:	5d                   	pop    ebp
c001262c:	c3                   	ret    
c001262d:	90                   	nop

c001262e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001262e:	55                   	push   ebp
c001262f:	57                   	push   edi
c0012630:	56                   	push   esi
c0012631:	53                   	push   ebx
c0012632:	83 ec 1c             	sub    esp,0x1c
c0012635:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012639:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001263d:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012641:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012645:	a9 ff 0f 00 00       	test   eax,0xfff
c001264a:	75 4a                	jne    c0012696 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001264c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012650:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012653:	c1 eb 16             	shr    ebx,0x16
c0012656:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001265d:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012661:	74 4d                	je     c00126b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012663:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012667:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001266b:	c1 e8 0a             	shr    eax,0xa
c001266e:	80 fa 01             	cmp    dl,0x1
c0012671:	19 d2                	sbb    edx,edx
c0012673:	c1 e3 0c             	shl    ebx,0xc
c0012676:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001267a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012680:	25 fc 0f 00 00       	and    eax,0xffc
c0012685:	01 d8                	add    eax,ebx
c0012687:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001268e:	83 c4 1c             	add    esp,0x1c
c0012691:	5b                   	pop    ebx
c0012692:	5e                   	pop    esi
c0012693:	5f                   	pop    edi
c0012694:	5d                   	pop    ebp
c0012695:	c3                   	ret    
c0012696:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001269a:	83 ec 0c             	sub    esp,0xc
c001269d:	68 e8 af 02 c0       	push   0xc002afe8
c00126a2:	e8 54 81 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00126a7:	83 c4 10             	add    esp,0x10
c00126aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126ae:	eb 9c                	jmp    c001264c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126b4:	e8 59 d8 ff ff       	call   c000ff12 <Phys::allocatePage()>
c00126b9:	83 ec 0c             	sub    esp,0xc
c00126bc:	89 c5                	mov    ebp,eax
c00126be:	8b 0d f0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002eff0
c00126c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126c8:	6a 01                	push   0x1
c00126ca:	e8 6c f3 ff ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c00126cf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126d6:	6a 01                	push   0x1
c00126d8:	50                   	push   eax
c00126d9:	55                   	push   ebp
c00126da:	81 cd 07 04 00 00    	or     ebp,0x407
c00126e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126e4:	51                   	push   ecx
c00126e5:	e8 7e fe ff ff       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126ea:	83 c4 1c             	add    esp,0x1c
c00126ed:	68 00 10 00 00       	push   0x1000
c00126f2:	6a 00                	push   0x0
c00126f4:	50                   	push   eax
c00126f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126f9:	e8 6e e0 fe ff       	call   c000076c <memset>
c00126fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012702:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012705:	e8 f1 f7 ff ff       	call   c0011efb <Virt::freeKernelVirtualPages(unsigned long)>
c001270a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001270d:	83 c4 10             	add    esp,0x10
c0012710:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012713:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012717:	e9 47 ff ff ff       	jmp    c0012663 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c001271c <VAS::VAS(bool)>:
c001271c:	53                   	push   ebx
c001271d:	83 ec 28             	sub    esp,0x28
c0012720:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012724:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012728:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001272c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012733:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012737:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001273e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012742:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012746:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012749:	e8 c4 d7 ff ff       	call   c000ff12 <Phys::allocatePage()>
c001274e:	89 c2                	mov    edx,eax
c0012750:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012754:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012757:	8b 1d f0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff0
c001275d:	83 ec 0c             	sub    esp,0xc
c0012760:	6a 01                	push   0x1
c0012762:	e8 d4 f2 ff ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c0012767:	83 c4 10             	add    esp,0x10
c001276a:	89 c2                	mov    edx,eax
c001276c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012770:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012773:	83 ec 0c             	sub    esp,0xc
c0012776:	6a 03                	push   0x3
c0012778:	6a 01                	push   0x1
c001277a:	52                   	push   edx
c001277b:	50                   	push   eax
c001277c:	53                   	push   ebx
c001277d:	e8 e6 fd ff ff       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012782:	83 c4 20             	add    esp,0x20
c0012785:	89 c2                	mov    edx,eax
c0012787:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001278b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001278e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012796:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001279e:	7f 1c                	jg     c00127bc <VAS::VAS(bool)+0xa0>
c00127a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127ab:	c1 e2 02             	shl    edx,0x2
c00127ae:	01 d0                	add    eax,edx
c00127b0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127b6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127ba:	eb da                	jmp    c0012796 <VAS::VAS(bool)+0x7a>
c00127bc:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127c4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00127cc:	7f 7a                	jg     c0012848 <VAS::VAS(bool)+0x12c>
c00127ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127d2:	2d 00 02 00 00       	sub    eax,0x200
c00127d7:	c1 e0 0c             	shl    eax,0xc
c00127da:	83 c8 03             	or     eax,0x3
c00127dd:	89 c2                	mov    edx,eax
c00127df:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00127e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127ea:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127f0:	83 e0 10             	and    eax,0x10
c00127f3:	84 c0                	test   al,al
c00127f5:	74 07                	je     c00127fe <VAS::VAS(bool)+0xe2>
c00127f7:	b8 00 01 00 00       	mov    eax,0x100
c00127fc:	eb 05                	jmp    c0012803 <VAS::VAS(bool)+0xe7>
c00127fe:	b8 00 00 00 00       	mov    eax,0x0
c0012803:	09 d0                	or     eax,edx
c0012805:	89 c1                	mov    ecx,eax
c0012807:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001280b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001280e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012812:	c1 e2 02             	shl    edx,0x2
c0012815:	01 d0                	add    eax,edx
c0012817:	89 ca                	mov    edx,ecx
c0012819:	89 10                	mov    DWORD PTR [eax],edx
c001281b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001281f:	2d 40 03 00 00       	sub    eax,0x340
c0012824:	83 f8 7f             	cmp    eax,0x7f
c0012827:	77 16                	ja     c001283f <VAS::VAS(bool)+0x123>
c0012829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012830:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012834:	c1 e2 02             	shl    edx,0x2
c0012837:	01 d0                	add    eax,edx
c0012839:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001283f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012843:	e9 7c ff ff ff       	jmp    c00127c4 <VAS::VAS(bool)+0xa8>
c0012848:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001284d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012853:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012859:	83 e0 10             	and    eax,0x10
c001285c:	84 c0                	test   al,al
c001285e:	74 07                	je     c0012867 <VAS::VAS(bool)+0x14b>
c0012860:	b8 03 41 00 00       	mov    eax,0x4103
c0012865:	eb 05                	jmp    c001286c <VAS::VAS(bool)+0x150>
c0012867:	b8 03 40 00 00       	mov    eax,0x4003
c001286c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012870:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012873:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012879:	89 02                	mov    DWORD PTR [edx],eax
c001287b:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0012880:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012886:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001288c:	83 ec 08             	sub    esp,0x8
c001288f:	50                   	push   eax
c0012890:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012894:	e8 b3 fc ff ff       	call   c001254c <VAS::setCPUSpecific(unsigned long)>
c0012899:	83 c4 10             	add    esp,0x10
c001289c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128a0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00128a3:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00128a8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128ae:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128b4:	83 e0 10             	and    eax,0x10
c00128b7:	84 c0                	test   al,al
c00128b9:	74 07                	je     c00128c2 <VAS::VAS(bool)+0x1a6>
c00128bb:	b8 00 01 00 00       	mov    eax,0x100
c00128c0:	eb 05                	jmp    c00128c7 <VAS::VAS(bool)+0x1ab>
c00128c2:	b8 00 00 00 00       	mov    eax,0x0
c00128c7:	09 c2                	or     edx,eax
c00128c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128d0:	05 fc 0f 00 00       	add    eax,0xffc
c00128d5:	83 ca 03             	or     edx,0x3
c00128d8:	89 10                	mov    DWORD PTR [eax],edx
c00128da:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00128df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e5:	83 ec 0c             	sub    esp,0xc
c00128e8:	50                   	push   eax
c00128e9:	e8 60 1c 00 00       	call   c001454e <Device::getName()>
c00128ee:	83 c4 10             	add    esp,0x10
c00128f1:	83 ec 08             	sub    esp,0x8
c00128f4:	68 2d b1 02 c0       	push   0xc002b12d
c00128f9:	50                   	push   eax
c00128fa:	e8 b5 df fe ff       	call   c00008b4 <strcmp>
c00128ff:	83 c4 10             	add    esp,0x10
c0012902:	85 c0                	test   eax,eax
c0012904:	0f 94 c0             	sete   al
c0012907:	84 c0                	test   al,al
c0012909:	0f 84 87 00 00 00    	je     c0012996 <VAS::VAS(bool)+0x27a>
c001290f:	fa                   	cli    
c0012910:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0012915:	40                   	inc    eax
c0012916:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001291b:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0012920:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012926:	05 7c 09 00 00       	add    eax,0x97c
c001292b:	83 ec 0c             	sub    esp,0xc
c001292e:	50                   	push   eax
c001292f:	e8 f4 c9 ff ff       	call   c000f328 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012934:	83 c4 10             	add    esp,0x10
c0012937:	25 00 f0 ff ff       	and    eax,0xfffff000
c001293c:	89 c3                	mov    ebx,eax
c001293e:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0012943:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012949:	05 7c 09 00 00       	add    eax,0x97c
c001294e:	83 ec 0c             	sub    esp,0xc
c0012951:	50                   	push   eax
c0012952:	e8 d1 c9 ff ff       	call   c000f328 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	83 ec 08             	sub    esp,0x8
c001295d:	50                   	push   eax
c001295e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012962:	e8 75 f5 ff ff       	call   c0011edc <VAS::getPageTableEntry(unsigned long)>
c0012967:	83 c4 10             	add    esp,0x10
c001296a:	8b 00                	mov    eax,DWORD PTR [eax]
c001296c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012971:	6a 11                	push   0x11
c0012973:	53                   	push   ebx
c0012974:	50                   	push   eax
c0012975:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012979:	e8 f4 f8 ff ff       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c001297e:	83 c4 10             	add    esp,0x10
c0012981:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0012986:	48                   	dec    eax
c0012987:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001298c:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0012991:	85 c0                	test   eax,eax
c0012993:	75 01                	jne    c0012996 <VAS::VAS(bool)+0x27a>
c0012995:	fb                   	sti    
c0012996:	90                   	nop
c0012997:	83 c4 28             	add    esp,0x28
c001299a:	5b                   	pop    ebx
c001299b:	c3                   	ret    

c001299c <VAS::evict(unsigned long)>:
c001299c:	55                   	push   ebp
c001299d:	57                   	push   edi
c001299e:	56                   	push   esi
c001299f:	53                   	push   ebx
c00129a0:	83 ec 1c             	sub    esp,0x1c
c00129a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129af:	e8 c8 f1 ff ff       	call   c0011b7c <Virt::allocateSwapfilePage()>
c00129b4:	89 c7                	mov    edi,eax
c00129b6:	a1 0c de 02 c0       	mov    eax,ds:0xc002de0c
c00129bb:	85 c0                	test   eax,eax
c00129bd:	7e 3d                	jle    c00129fc <VAS::evict(unsigned long)+0x60>
c00129bf:	89 ee                	mov    esi,ebp
c00129c1:	31 db                	xor    ebx,ebx
c00129c3:	83 ec 0c             	sub    esp,0xc
c00129c6:	57                   	push   edi
c00129c7:	e8 9e f1 ff ff       	call   c0011b6a <Virt::swapIDToSector(unsigned long)>
c00129cc:	89 34 24             	mov    DWORD PTR [esp],esi
c00129cf:	01 d8                	add    eax,ebx
c00129d1:	6a 01                	push   0x1
c00129d3:	31 d2                	xor    edx,edx
c00129d5:	43                   	inc    ebx
c00129d6:	52                   	push   edx
c00129d7:	81 c6 00 02 00 00    	add    esi,0x200
c00129dd:	50                   	push   eax
c00129de:	0f be 05 18 de 02 c0 	movsx  eax,BYTE PTR ds:0xc002de18
c00129e5:	ff 34 85 7c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c84]
c00129ec:	e8 33 3e 00 00       	call   c0016824 <LogicalDisk::write(unsigned long long, int, void*)>
c00129f1:	83 c4 20             	add    esp,0x20
c00129f4:	39 1d 0c de 02 c0    	cmp    DWORD PTR ds:0xc002de0c,ebx
c00129fa:	7f c7                	jg     c00129c3 <VAS::evict(unsigned long)+0x27>
c00129fc:	83 ec 08             	sub    esp,0x8
c00129ff:	c1 e7 0b             	shl    edi,0xb
c0012a02:	55                   	push   ebp
c0012a03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a07:	e8 d0 f4 ff ff       	call   c0011edc <VAS::getPageTableEntry(unsigned long)>
c0012a0c:	83 c4 0c             	add    esp,0xc
c0012a0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a11:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a17:	09 d7                	or     edi,edx
c0012a19:	89 38                	mov    DWORD PTR [eax],edi
c0012a1b:	a1 e8 ef 02 c0       	mov    eax,ds:0xc002efe8
c0012a20:	40                   	inc    eax
c0012a21:	a3 e8 ef 02 c0       	mov    ds:0xc002efe8,eax
c0012a26:	0f 20 da             	mov    edx,cr3
c0012a29:	0f 22 da             	mov    cr3,edx
c0012a2c:	50                   	push   eax
c0012a2d:	55                   	push   ebp
c0012a2e:	68 3b b1 02 c0       	push   0xc002b13b
c0012a33:	e8 09 04 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0012a38:	a1 e4 ef 02 c0       	mov    eax,ds:0xc002efe4
c0012a3d:	c7 44 24 40 50 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b150
c0012a45:	8d 50 01             	lea    edx,[eax+0x1]
c0012a48:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a4c:	89 15 e4 ef 02 c0    	mov    DWORD PTR ds:0xc002efe4,edx
c0012a52:	83 c4 2c             	add    esp,0x2c
c0012a55:	5b                   	pop    ebx
c0012a56:	5e                   	pop    esi
c0012a57:	5f                   	pop    edi
c0012a58:	5d                   	pop    ebp
c0012a59:	e9 e3 03 00 00       	jmp    c0012e41 <Dbg::kprintf(char const*, ...)>

c0012a5e <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a5e:	55                   	push   ebp
c0012a5f:	57                   	push   edi
c0012a60:	56                   	push   esi
c0012a61:	53                   	push   ebx
c0012a62:	83 ec 0c             	sub    esp,0xc
c0012a65:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012a69:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012a6f:	0f 84 dc 00 00 00    	je     c0012b51 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a75:	56                   	push   esi
c0012a76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a7a:	e8 5d f4 ff ff       	call   c0011edc <VAS::getPageTableEntry(unsigned long)>
c0012a7f:	5b                   	pop    ebx
c0012a80:	85 c0                	test   eax,eax
c0012a82:	5f                   	pop    edi
c0012a83:	89 c3                	mov    ebx,eax
c0012a85:	0f 84 c6 00 00 00    	je     c0012b51 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a8b:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a8d:	31 c0                	xor    eax,eax
c0012a8f:	89 fa                	mov    edx,edi
c0012a91:	81 e2 01 04 00 00    	and    edx,0x401
c0012a97:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012a9d:	0f 85 b0 00 00 00    	jne    c0012b53 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012aa3:	e8 6a d4 ff ff       	call   c000ff12 <Phys::allocatePage()>
c0012aa8:	c1 ef 0b             	shr    edi,0xb
c0012aab:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012aad:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012ab3:	09 c2                	or     edx,eax
c0012ab5:	81 ca 01 08 00 00    	or     edx,0x801
c0012abb:	89 13                	mov    DWORD PTR [ebx],edx
c0012abd:	8b 0d 0c de 02 c0    	mov    ecx,DWORD PTR ds:0xc002de0c
c0012ac3:	85 c9                	test   ecx,ecx
c0012ac5:	7e 3d                	jle    c0012b04 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012ac7:	89 f5                	mov    ebp,esi
c0012ac9:	31 db                	xor    ebx,ebx
c0012acb:	83 ec 0c             	sub    esp,0xc
c0012ace:	57                   	push   edi
c0012acf:	e8 96 f0 ff ff       	call   c0011b6a <Virt::swapIDToSector(unsigned long)>
c0012ad4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ad7:	01 d8                	add    eax,ebx
c0012ad9:	6a 01                	push   0x1
c0012adb:	31 d2                	xor    edx,edx
c0012add:	43                   	inc    ebx
c0012ade:	52                   	push   edx
c0012adf:	81 c5 00 02 00 00    	add    ebp,0x200
c0012ae5:	50                   	push   eax
c0012ae6:	0f be 05 18 de 02 c0 	movsx  eax,BYTE PTR ds:0xc002de18
c0012aed:	ff 34 85 7c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c84]
c0012af4:	e8 bf 3c 00 00       	call   c00167b8 <LogicalDisk::read(unsigned long long, int, void*)>
c0012af9:	83 c4 20             	add    esp,0x20
c0012afc:	39 1d 0c de 02 c0    	cmp    DWORD PTR ds:0xc002de0c,ebx
c0012b02:	7f c7                	jg     c0012acb <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b04:	a1 e8 ef 02 c0       	mov    eax,ds:0xc002efe8
c0012b09:	48                   	dec    eax
c0012b0a:	52                   	push   edx
c0012b0b:	a3 e8 ef 02 c0       	mov    ds:0xc002efe8,eax
c0012b10:	50                   	push   eax
c0012b11:	56                   	push   esi
c0012b12:	68 61 b1 02 c0       	push   0xc002b161
c0012b17:	e8 25 03 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0012b1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b1f:	e8 28 f0 ff ff       	call   c0011b4c <Virt::freeSwapfilePage(unsigned long)>
c0012b24:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0012b29:	83 c4 10             	add    esp,0x10
c0012b2c:	48                   	dec    eax
c0012b2d:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0012b32:	85 c0                	test   eax,eax
c0012b34:	75 01                	jne    c0012b37 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b36:	fb                   	sti    
c0012b37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b3b:	25 ff 0f 00 00       	and    eax,0xfff
c0012b40:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b45:	77 14                	ja     c0012b5b <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b47:	0f 20 d8             	mov    eax,cr3
c0012b4a:	0f 22 d8             	mov    cr3,eax
c0012b4d:	b0 01                	mov    al,0x1
c0012b4f:	eb 02                	jmp    c0012b53 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b51:	31 c0                	xor    eax,eax
c0012b53:	83 c4 0c             	add    esp,0xc
c0012b56:	5b                   	pop    ebx
c0012b57:	5e                   	pop    esi
c0012b58:	5f                   	pop    edi
c0012b59:	5d                   	pop    ebp
c0012b5a:	c3                   	ret    
c0012b5b:	83 ec 0c             	sub    esp,0xc
c0012b5e:	68 76 b1 02 c0       	push   0xc002b176
c0012b63:	e8 d9 02 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0012b68:	83 c4 10             	add    esp,0x10
c0012b6b:	eb da                	jmp    c0012b47 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012b6d:	90                   	nop

c0012b6e <VAS::scanForEviction()>:
c0012b6e:	57                   	push   edi
c0012b6f:	56                   	push   esi
c0012b70:	53                   	push   ebx
c0012b71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b75:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b78:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b7e:	75 0e                	jne    c0012b8e <VAS::scanForEviction()+0x20>
c0012b80:	89 da                	mov    edx,ebx
c0012b82:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b85:	c1 ea 16             	shr    edx,0x16
c0012b88:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b8c:	74 48                	je     c0012bd6 <VAS::scanForEviction()+0x68>
c0012b8e:	53                   	push   ebx
c0012b8f:	56                   	push   esi
c0012b90:	e8 47 f3 ff ff       	call   c0011edc <VAS::getPageTableEntry(unsigned long)>
c0012b95:	5a                   	pop    edx
c0012b96:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b98:	59                   	pop    ecx
c0012b99:	89 fa                	mov    edx,edi
c0012b9b:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012ba1:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012ba7:	74 3d                	je     c0012be6 <VAS::scanForEviction()+0x78>
c0012ba9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012baf:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012bb5:	76 2a                	jbe    c0012be1 <VAS::scanForEviction()+0x73>
c0012bb7:	31 db                	xor    ebx,ebx
c0012bb9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012bc0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bc6:	75 c6                	jne    c0012b8e <VAS::scanForEviction()+0x20>
c0012bc8:	89 da                	mov    edx,ebx
c0012bca:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bcd:	c1 ea 16             	shr    edx,0x16
c0012bd0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bd4:	75 b8                	jne    c0012b8e <VAS::scanForEviction()+0x20>
c0012bd6:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012bdc:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bdf:	eb 97                	jmp    c0012b78 <VAS::scanForEviction()+0xa>
c0012be1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012be4:	eb 92                	jmp    c0012b78 <VAS::scanForEviction()+0xa>
c0012be6:	f7 c7 01 00 00 00    	test   edi,0x1
c0012bec:	74 bb                	je     c0012ba9 <VAS::scanForEviction()+0x3b>
c0012bee:	f7 c7 20 00 00 00    	test   edi,0x20
c0012bf4:	74 0a                	je     c0012c00 <VAS::scanForEviction()+0x92>
c0012bf6:	83 e7 df             	and    edi,0xffffffdf
c0012bf9:	89 38                	mov    DWORD PTR [eax],edi
c0012bfb:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012bfe:	eb a9                	jmp    c0012ba9 <VAS::scanForEviction()+0x3b>
c0012c00:	83 ec 08             	sub    esp,0x8
c0012c03:	53                   	push   ebx
c0012c04:	56                   	push   esi
c0012c05:	e8 92 fd ff ff       	call   c001299c <VAS::evict(unsigned long)>
c0012c0a:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c11:	83 c4 10             	add    esp,0x10
c0012c14:	89 f8                	mov    eax,edi
c0012c16:	5b                   	pop    ebx
c0012c17:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c1c:	5e                   	pop    esi
c0012c1d:	5f                   	pop    edi
c0012c1e:	c3                   	ret    

c0012c1f <mapVASFirstTime>:
c0012c1f:	55                   	push   ebp
c0012c20:	57                   	push   edi
c0012c21:	56                   	push   esi
c0012c22:	53                   	push   ebx
c0012c23:	83 ec 0c             	sub    esp,0xc
c0012c26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c2b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c2e:	4a                   	dec    edx
c0012c2f:	0f 84 8e 00 00 00    	je     c0012cc3 <mapVASFirstTime+0xa4>
c0012c35:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c38:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c3b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c40:	c1 e5 15             	shl    ebp,0x15
c0012c43:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c48:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c4e:	29 eb                	sub    ebx,ebp
c0012c50:	29 ee                	sub    esi,ebp
c0012c52:	e8 bb d2 ff ff       	call   c000ff12 <Phys::allocatePage()>
c0012c57:	83 ec 0c             	sub    esp,0xc
c0012c5a:	68 03 04 00 00       	push   0x403
c0012c5f:	6a 01                	push   0x1
c0012c61:	53                   	push   ebx
c0012c62:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c68:	50                   	push   eax
c0012c69:	57                   	push   edi
c0012c6a:	e8 f9 f8 ff ff       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c6f:	83 c4 20             	add    esp,0x20
c0012c72:	39 f3                	cmp    ebx,esi
c0012c74:	75 dc                	jne    c0012c52 <mapVASFirstTime+0x33>
c0012c76:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c7b:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c80:	29 ee                	sub    esi,ebp
c0012c82:	29 e8                	sub    eax,ebp
c0012c84:	89 c5                	mov    ebp,eax
c0012c86:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c8a:	19 db                	sbb    ebx,ebx
c0012c8c:	e8 81 d2 ff ff       	call   c000ff12 <Phys::allocatePage()>
c0012c91:	83 e3 04             	and    ebx,0x4
c0012c94:	83 ec 0c             	sub    esp,0xc
c0012c97:	81 c3 03 04 00 00    	add    ebx,0x403
c0012c9d:	53                   	push   ebx
c0012c9e:	6a 01                	push   0x1
c0012ca0:	56                   	push   esi
c0012ca1:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012ca7:	50                   	push   eax
c0012ca8:	57                   	push   edi
c0012ca9:	e8 ba f8 ff ff       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cae:	83 c4 20             	add    esp,0x20
c0012cb1:	39 f5                	cmp    ebp,esi
c0012cb3:	75 d1                	jne    c0012c86 <mapVASFirstTime+0x67>
c0012cb5:	0f 20 d8             	mov    eax,cr3
c0012cb8:	0f 22 d8             	mov    cr3,eax
c0012cbb:	83 c4 0c             	add    esp,0xc
c0012cbe:	5b                   	pop    ebx
c0012cbf:	5e                   	pop    esi
c0012cc0:	5f                   	pop    edi
c0012cc1:	5d                   	pop    ebp
c0012cc2:	c3                   	ret    
c0012cc3:	83 ec 0c             	sub    esp,0xc
c0012cc6:	68 86 b1 02 c0       	push   0xc002b186
c0012ccb:	e8 71 01 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0012cd0:	83 c4 10             	add    esp,0x10
c0012cd3:	83 c4 0c             	add    esp,0xc
c0012cd6:	5b                   	pop    ebx
c0012cd7:	5e                   	pop    esi
c0012cd8:	5f                   	pop    edi
c0012cd9:	5d                   	pop    ebp
c0012cda:	c3                   	ret    

c0012cdb <__cxa_atexit>:
c0012cdb:	31 c0                	xor    eax,eax
c0012cdd:	c3                   	ret    

c0012cde <__cxa_finalize>:
c0012cde:	c3                   	ret    

c0012cdf <__stack_chk_fail>:
c0012cdf:	55                   	push   ebp
c0012ce0:	89 e5                	mov    ebp,esp
c0012ce2:	83 ec 14             	sub    esp,0x14
c0012ce5:	68 9f b1 02 c0       	push   0xc002b19f
c0012cea:	e8 52 01 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0012cef:	58                   	pop    eax
c0012cf0:	5a                   	pop    edx
c0012cf1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012cf4:	68 ef b1 02 c0       	push   0xc002b1ef
c0012cf9:	e8 43 01 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0012cfe:	59                   	pop    ecx
c0012cff:	58                   	pop    eax
c0012d00:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d03:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d06:	68 ef b1 02 c0       	push   0xc002b1ef
c0012d0b:	e8 31 01 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0012d10:	5a                   	pop    edx
c0012d11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d14:	59                   	pop    ecx
c0012d15:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d17:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d1a:	68 ef b1 02 c0       	push   0xc002b1ef
c0012d1f:	e8 1d 01 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0012d24:	5a                   	pop    edx
c0012d25:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d28:	59                   	pop    ecx
c0012d29:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d2d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d30:	68 ef b1 02 c0       	push   0xc002b1ef
c0012d35:	e8 07 01 00 00       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0012d3a:	c7 04 24 f7 b1 02 c0 	mov    DWORD PTR [esp],0xc002b1f7
c0012d41:	e8 b5 7a 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0012d46:	83 c4 10             	add    esp,0x10
c0012d49:	c9                   	leave  
c0012d4a:	c3                   	ret    

c0012d4b <__cxa_pure_virtual>:
c0012d4b:	83 ec 18             	sub    esp,0x18
c0012d4e:	68 0f b2 02 c0       	push   0xc002b20f
c0012d53:	e8 a3 7a 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0012d58:	83 c4 1c             	add    esp,0x1c
c0012d5b:	c3                   	ret    

c0012d5c <operator new[](unsigned long)>:
c0012d5c:	e9 45 cb ff ff       	jmp    c000f8a6 <malloc>

c0012d61 <operator delete(void*, unsigned long)>:
c0012d61:	e9 60 cb ff ff       	jmp    c000f8c6 <rfree>

c0012d66 <operator delete[](void*)>:
c0012d66:	e9 5b cb ff ff       	jmp    c000f8c6 <rfree>

c0012d6b <operator delete[](void*, unsigned long)>:
c0012d6b:	e9 56 cb ff ff       	jmp    c000f8c6 <rfree>

c0012d70 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d70:	57                   	push   edi
c0012d71:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d76:	56                   	push   esi
c0012d77:	be 24 b2 02 c0       	mov    esi,0xc002b224
c0012d7c:	53                   	push   ebx
c0012d7d:	83 ec 40             	sub    esp,0x40
c0012d80:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d84:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d88:	fc                   	cld    
c0012d89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d8b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d8f:	83 f9 3e             	cmp    ecx,0x3e
c0012d92:	7e 05                	jle    c0012d99 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d94:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d99:	89 df                	mov    edi,ebx
c0012d9b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012d9f:	eb 02                	jmp    c0012da3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012da1:	89 c7                	mov    edi,eax
c0012da3:	31 d2                	xor    edx,edx
c0012da5:	46                   	inc    esi
c0012da6:	89 f8                	mov    eax,edi
c0012da8:	f7 f1                	div    ecx
c0012daa:	39 cf                	cmp    edi,ecx
c0012dac:	73 f3                	jae    c0012da1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012dae:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012db1:	eb 02                	jmp    c0012db5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012db3:	89 c3                	mov    ebx,eax
c0012db5:	31 d2                	xor    edx,edx
c0012db7:	4e                   	dec    esi
c0012db8:	89 d8                	mov    eax,ebx
c0012dba:	f7 f1                	div    ecx
c0012dbc:	39 cb                	cmp    ebx,ecx
c0012dbe:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012dc2:	88 16                	mov    BYTE PTR [esi],dl
c0012dc4:	73 ed                	jae    c0012db3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012dc6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012dca:	83 c4 40             	add    esp,0x40
c0012dcd:	5b                   	pop    ebx
c0012dce:	5e                   	pop    esi
c0012dcf:	5f                   	pop    edi
c0012dd0:	c3                   	ret    

c0012dd1 <Dbg::logc(char)>:
c0012dd1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012dd5:	ba fd 03 00 00       	mov    edx,0x3fd
c0012dda:	ec                   	in     al,dx
c0012ddb:	a8 20                	test   al,0x20
c0012ddd:	74 fb                	je     c0012dda <Dbg::logc(char)+0x9>
c0012ddf:	ba f8 03 00 00       	mov    edx,0x3f8
c0012de4:	88 c8                	mov    al,cl
c0012de6:	ee                   	out    dx,al
c0012de7:	c3                   	ret    

c0012de8 <Dbg::logs(char*)>:
c0012de8:	53                   	push   ebx
c0012de9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012ded:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012df0:	84 c0                	test   al,al
c0012df2:	74 0f                	je     c0012e03 <Dbg::logs(char*)+0x1b>
c0012df4:	50                   	push   eax
c0012df5:	43                   	inc    ebx
c0012df6:	e8 d6 ff ff ff       	call   c0012dd1 <Dbg::logc(char)>
c0012dfb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012dfe:	5a                   	pop    edx
c0012dff:	84 c0                	test   al,al
c0012e01:	75 f1                	jne    c0012df4 <Dbg::logs(char*)+0xc>
c0012e03:	5b                   	pop    ebx
c0012e04:	c3                   	ret    

c0012e05 <Dbg::logWriteInt(unsigned int)>:
c0012e05:	83 ec 10             	sub    esp,0x10
c0012e08:	6a 0a                	push   0xa
c0012e0a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e0e:	50                   	push   eax
c0012e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e13:	e8 58 ff ff ff       	call   c0012d70 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e18:	50                   	push   eax
c0012e19:	e8 ca ff ff ff       	call   c0012de8 <Dbg::logs(char*)>
c0012e1e:	83 c4 20             	add    esp,0x20
c0012e21:	c3                   	ret    

c0012e22 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e22:	83 ec 10             	sub    esp,0x10
c0012e25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e29:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e2d:	50                   	push   eax
c0012e2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e32:	e8 39 ff ff ff       	call   c0012d70 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e37:	50                   	push   eax
c0012e38:	e8 ab ff ff ff       	call   c0012de8 <Dbg::logs(char*)>
c0012e3d:	83 c4 20             	add    esp,0x20
c0012e40:	c3                   	ret    

c0012e41 <Dbg::kprintf(char const*, ...)>:
c0012e41:	55                   	push   ebp
c0012e42:	57                   	push   edi
c0012e43:	56                   	push   esi
c0012e44:	53                   	push   ebx
c0012e45:	83 ec 0c             	sub    esp,0xc
c0012e48:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e4c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e54:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e57:	84 c0                	test   al,al
c0012e59:	74 4a                	je     c0012ea5 <Dbg::kprintf(char const*, ...)+0x64>
c0012e5b:	31 db                	xor    ebx,ebx
c0012e5d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e60:	3c 25                	cmp    al,0x25
c0012e62:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e65:	0f 85 e4 00 00 00    	jne    c0012f4f <Dbg::kprintf(char const*, ...)+0x10e>
c0012e6b:	83 c3 02             	add    ebx,0x2
c0012e6e:	8a 07                	mov    al,BYTE PTR [edi]
c0012e70:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e73:	83 e8 25             	sub    eax,0x25
c0012e76:	3c 53                	cmp    al,0x53
c0012e78:	0f 87 ba 00 00 00    	ja     c0012f38 <Dbg::kprintf(char const*, ...)+0xf7>
c0012e7e:	0f b6 c0             	movzx  eax,al
c0012e81:	ff 24 85 64 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4d9c]
c0012e88:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e8c:	89 c8                	mov    eax,ecx
c0012e8e:	83 c1 04             	add    ecx,0x4
c0012e91:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e95:	ff 30                	push   DWORD PTR [eax]
c0012e97:	e8 4c ff ff ff       	call   c0012de8 <Dbg::logs(char*)>
c0012e9c:	58                   	pop    eax
c0012e9d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012ea1:	84 c0                	test   al,al
c0012ea3:	75 b8                	jne    c0012e5d <Dbg::kprintf(char const*, ...)+0x1c>
c0012ea5:	83 c4 0c             	add    esp,0xc
c0012ea8:	5b                   	pop    ebx
c0012ea9:	5e                   	pop    esi
c0012eaa:	5f                   	pop    edi
c0012eab:	5d                   	pop    ebp
c0012eac:	c3                   	ret    
c0012ead:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012eb1:	89 d0                	mov    eax,edx
c0012eb3:	83 c2 04             	add    edx,0x4
c0012eb6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eba:	ff 30                	push   DWORD PTR [eax]
c0012ebc:	e8 44 ff ff ff       	call   c0012e05 <Dbg::logWriteInt(unsigned int)>
c0012ec1:	58                   	pop    eax
c0012ec2:	eb d9                	jmp    c0012e9d <Dbg::kprintf(char const*, ...)+0x5c>
c0012ec4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ec8:	89 d0                	mov    eax,edx
c0012eca:	83 c2 04             	add    edx,0x4
c0012ecd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ed0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ed4:	50                   	push   eax
c0012ed5:	e8 f7 fe ff ff       	call   c0012dd1 <Dbg::logc(char)>
c0012eda:	58                   	pop    eax
c0012edb:	eb c0                	jmp    c0012e9d <Dbg::kprintf(char const*, ...)+0x5c>
c0012edd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ee1:	89 c8                	mov    eax,ecx
c0012ee3:	83 c1 04             	add    ecx,0x4
c0012ee6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012eea:	ff 30                	push   DWORD PTR [eax]
c0012eec:	e8 14 ff ff ff       	call   c0012e05 <Dbg::logWriteInt(unsigned int)>
c0012ef1:	5f                   	pop    edi
c0012ef2:	eb a9                	jmp    c0012e9d <Dbg::kprintf(char const*, ...)+0x5c>
c0012ef4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ef8:	89 c8                	mov    eax,ecx
c0012efa:	83 c1 04             	add    ecx,0x4
c0012efd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f01:	6a 10                	push   0x10
c0012f03:	ff 30                	push   DWORD PTR [eax]
c0012f05:	e8 18 ff ff ff       	call   c0012e22 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f0a:	59                   	pop    ecx
c0012f0b:	5f                   	pop    edi
c0012f0c:	eb 8f                	jmp    c0012e9d <Dbg::kprintf(char const*, ...)+0x5c>
c0012f0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f12:	89 d0                	mov    eax,edx
c0012f14:	83 c2 08             	add    edx,0x8
c0012f17:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f1b:	6a 10                	push   0x10
c0012f1d:	ff 30                	push   DWORD PTR [eax]
c0012f1f:	e8 fe fe ff ff       	call   c0012e22 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f24:	58                   	pop    eax
c0012f25:	5a                   	pop    edx
c0012f26:	e9 72 ff ff ff       	jmp    c0012e9d <Dbg::kprintf(char const*, ...)+0x5c>
c0012f2b:	6a 25                	push   0x25
c0012f2d:	e8 9f fe ff ff       	call   c0012dd1 <Dbg::logc(char)>
c0012f32:	58                   	pop    eax
c0012f33:	e9 65 ff ff ff       	jmp    c0012e9d <Dbg::kprintf(char const*, ...)+0x5c>
c0012f38:	6a 25                	push   0x25
c0012f3a:	e8 92 fe ff ff       	call   c0012dd1 <Dbg::logc(char)>
c0012f3f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f42:	50                   	push   eax
c0012f43:	e8 89 fe ff ff       	call   c0012dd1 <Dbg::logc(char)>
c0012f48:	5a                   	pop    edx
c0012f49:	59                   	pop    ecx
c0012f4a:	e9 4e ff ff ff       	jmp    c0012e9d <Dbg::kprintf(char const*, ...)+0x5c>
c0012f4f:	50                   	push   eax
c0012f50:	89 eb                	mov    ebx,ebp
c0012f52:	e8 7a fe ff ff       	call   c0012dd1 <Dbg::logc(char)>
c0012f57:	89 fd                	mov    ebp,edi
c0012f59:	58                   	pop    eax
c0012f5a:	e9 3e ff ff ff       	jmp    c0012e9d <Dbg::kprintf(char const*, ...)+0x5c>
c0012f5f:	90                   	nop

c0012f60 <File::read(unsigned long long, void*, int*)>:
c0012f60:	53                   	push   ebx
c0012f61:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f65:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f69:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f70:	3c 19                	cmp    al,0x19
c0012f72:	77 35                	ja     c0012fa9 <File::read(unsigned long long, void*, int*)+0x49>
c0012f74:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c0012f7b:	85 c0                	test   eax,eax
c0012f7d:	74 2a                	je     c0012fa9 <File::read(unsigned long long, void*, int*)+0x49>
c0012f7f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f85:	85 c0                	test   eax,eax
c0012f87:	74 20                	je     c0012fa9 <File::read(unsigned long long, void*, int*)+0x49>
c0012f89:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f8d:	74 21                	je     c0012fb0 <File::read(unsigned long long, void*, int*)+0x50>
c0012f8f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f91:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f95:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012f9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fa3:	5b                   	pop    ebx
c0012fa4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012fa7:	ff e0                	jmp    eax
c0012fa9:	b8 0b 00 00 00       	mov    eax,0xb
c0012fae:	eb 05                	jmp    c0012fb5 <File::read(unsigned long long, void*, int*)+0x55>
c0012fb0:	b8 05 00 00 00       	mov    eax,0x5
c0012fb5:	5b                   	pop    ebx
c0012fb6:	c3                   	ret    
c0012fb7:	90                   	nop

c0012fb8 <File::write(unsigned long long, void*, int*)>:
c0012fb8:	53                   	push   ebx
c0012fb9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fbd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fc1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fc8:	3c 19                	cmp    al,0x19
c0012fca:	77 35                	ja     c0013001 <File::write(unsigned long long, void*, int*)+0x49>
c0012fcc:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c0012fd3:	85 c0                	test   eax,eax
c0012fd5:	74 2a                	je     c0013001 <File::write(unsigned long long, void*, int*)+0x49>
c0012fd7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fdd:	85 c0                	test   eax,eax
c0012fdf:	74 20                	je     c0013001 <File::write(unsigned long long, void*, int*)+0x49>
c0012fe1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fe5:	74 21                	je     c0013008 <File::write(unsigned long long, void*, int*)+0x50>
c0012fe7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fe9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fed:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ff3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ff7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ffb:	5b                   	pop    ebx
c0012ffc:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012fff:	ff e0                	jmp    eax
c0013001:	b8 0b 00 00 00       	mov    eax,0xb
c0013006:	eb 05                	jmp    c001300d <File::write(unsigned long long, void*, int*)+0x55>
c0013008:	b8 05 00 00 00       	mov    eax,0x5
c001300d:	5b                   	pop    ebx
c001300e:	c3                   	ret    
c001300f:	90                   	nop

c0013010 <Directory::read(unsigned long long, void*, int*)>:
c0013010:	53                   	push   ebx
c0013011:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013015:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013019:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013020:	3c 19                	cmp    al,0x19
c0013022:	77 35                	ja     c0013059 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013024:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c001302b:	85 c0                	test   eax,eax
c001302d:	74 2a                	je     c0013059 <Directory::read(unsigned long long, void*, int*)+0x49>
c001302f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013035:	85 c0                	test   eax,eax
c0013037:	74 20                	je     c0013059 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013039:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001303d:	74 21                	je     c0013060 <Directory::read(unsigned long long, void*, int*)+0x50>
c001303f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013041:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013045:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001304b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001304f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013053:	5b                   	pop    ebx
c0013054:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013057:	ff e0                	jmp    eax
c0013059:	b8 0b 00 00 00       	mov    eax,0xb
c001305e:	eb 05                	jmp    c0013065 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013060:	b8 05 00 00 00       	mov    eax,0x5
c0013065:	5b                   	pop    ebx
c0013066:	c3                   	ret    
c0013067:	90                   	nop

c0013068 <Directory::write(unsigned long long, void*, int*)>:
c0013068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001306c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013073:	b8 0b 00 00 00       	mov    eax,0xb
c0013078:	80 fa 19             	cmp    dl,0x19
c001307b:	77 18                	ja     c0013095 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001307d:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c0013084:	85 d2                	test   edx,edx
c0013086:	74 0d                	je     c0013095 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013088:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001308f:	19 c0                	sbb    eax,eax
c0013091:	83 e0 0a             	and    eax,0xa
c0013094:	40                   	inc    eax
c0013095:	c3                   	ret    

c0013096 <File::isAtty()>:
c0013096:	31 c0                	xor    eax,eax
c0013098:	c3                   	ret    
c0013099:	90                   	nop

c001309a <Directory::isAtty()>:
c001309a:	31 c0                	xor    eax,eax
c001309c:	c3                   	ret    
c001309d:	90                   	nop

c001309e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001309e:	b8 0a 00 00 00       	mov    eax,0xa
c00130a3:	c3                   	ret    

c00130a4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130a4:	b8 0a 00 00 00       	mov    eax,0xa
c00130a9:	c3                   	ret    

c00130aa <Filesystem::getFileFirstSector(char const*)>:
c00130aa:	31 c0                	xor    eax,eax
c00130ac:	31 d2                	xor    edx,edx
c00130ae:	c3                   	ret    
c00130af:	90                   	nop

c00130b0 <File::~File()>:
c00130b0:	83 ec 0c             	sub    esp,0xc
c00130b3:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c00130b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130bc:	89 10                	mov    DWORD PTR [eax],edx
c00130be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c2:	83 ec 0c             	sub    esp,0xc
c00130c5:	50                   	push   eax
c00130c6:	e8 0f e7 ff ff       	call   c00117da <UnixFile::~UnixFile()>
c00130cb:	83 c4 10             	add    esp,0x10
c00130ce:	90                   	nop
c00130cf:	83 c4 0c             	add    esp,0xc
c00130d2:	c3                   	ret    
c00130d3:	90                   	nop

c00130d4 <File::~File()>:
c00130d4:	83 ec 0c             	sub    esp,0xc
c00130d7:	83 ec 0c             	sub    esp,0xc
c00130da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130de:	e8 cd ff ff ff       	call   c00130b0 <File::~File()>
c00130e3:	83 c4 10             	add    esp,0x10
c00130e6:	83 ec 08             	sub    esp,0x8
c00130e9:	68 14 01 00 00       	push   0x114
c00130ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f2:	e8 6a fc ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c00130f7:	83 c4 10             	add    esp,0x10
c00130fa:	83 c4 0c             	add    esp,0xc
c00130fd:	c3                   	ret    

c00130fe <Directory::~Directory()>:
c00130fe:	83 ec 0c             	sub    esp,0xc
c0013101:	ba 40 b4 02 c0       	mov    edx,0xc002b440
c0013106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310a:	89 10                	mov    DWORD PTR [eax],edx
c001310c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013110:	83 ec 0c             	sub    esp,0xc
c0013113:	50                   	push   eax
c0013114:	e8 c1 e6 ff ff       	call   c00117da <UnixFile::~UnixFile()>
c0013119:	83 c4 10             	add    esp,0x10
c001311c:	90                   	nop
c001311d:	83 c4 0c             	add    esp,0xc
c0013120:	c3                   	ret    
c0013121:	90                   	nop

c0013122 <Directory::~Directory()>:
c0013122:	83 ec 0c             	sub    esp,0xc
c0013125:	83 ec 0c             	sub    esp,0xc
c0013128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001312c:	e8 cd ff ff ff       	call   c00130fe <Directory::~Directory()>
c0013131:	83 c4 10             	add    esp,0x10
c0013134:	83 ec 08             	sub    esp,0x8
c0013137:	68 14 01 00 00       	push   0x114
c001313c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013140:	e8 1c fc ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0013145:	83 c4 10             	add    esp,0x10
c0013148:	83 c4 0c             	add    esp,0xc
c001314b:	c3                   	ret    

c001314c <Filesystem::Filesystem()>:
c001314c:	ba bc b3 02 c0       	mov    edx,0xc002b3bc
c0013151:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013155:	89 10                	mov    DWORD PTR [eax],edx
c0013157:	8b 15 f4 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002eff4
c001315d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013161:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013168:	a3 f4 ef 02 c0       	mov    ds:0xc002eff4,eax
c001316d:	90                   	nop
c001316e:	c3                   	ret    
c001316f:	90                   	nop

c0013170 <Filesystem::~Filesystem()>:
c0013170:	ba bc b3 02 c0       	mov    edx,0xc002b3bc
c0013175:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013179:	89 10                	mov    DWORD PTR [eax],edx
c001317b:	90                   	nop
c001317c:	c3                   	ret    
c001317d:	90                   	nop

c001317e <Filesystem::~Filesystem()>:
c001317e:	83 ec 0c             	sub    esp,0xc
c0013181:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013185:	e8 e6 ff ff ff       	call   c0013170 <Filesystem::~Filesystem()>
c001318a:	83 c4 04             	add    esp,0x4
c001318d:	83 ec 08             	sub    esp,0x8
c0013190:	6a 08                	push   0x8
c0013192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013196:	e8 c6 fb ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c001319b:	83 c4 10             	add    esp,0x10
c001319e:	83 c4 0c             	add    esp,0xc
c00131a1:	c3                   	ret    

c00131a2 <Fs::getcwd(Process*, char*, int)>:
c00131a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131a6:	31 c0                	xor    eax,eax
c00131a8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131af:	7d 15                	jge    c00131c6 <Fs::getcwd(Process*, char*, int)+0x24>
c00131b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131b5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131bc:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131bf:	84 c9                	test   cl,cl
c00131c1:	74 06                	je     c00131c9 <Fs::getcwd(Process*, char*, int)+0x27>
c00131c3:	40                   	inc    eax
c00131c4:	eb e2                	jmp    c00131a8 <Fs::getcwd(Process*, char*, int)+0x6>
c00131c6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00131c9:	31 c0                	xor    eax,eax
c00131cb:	c3                   	ret    

c00131cc <Fs::initVFS()>:
c00131cc:	83 ec 18             	sub    esp,0x18
c00131cf:	6a 08                	push   0x8
c00131d1:	e8 d0 c6 ff ff       	call   c000f8a6 <malloc>
c00131d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00131d9:	e8 e2 e4 00 00       	call   c00216c0 <FAT::FAT()>
c00131de:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00131e5:	e8 bc c6 ff ff       	call   c000f8a6 <malloc>
c00131ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00131ed:	e8 0a f7 00 00       	call   c00228fc <ISO9660::ISO9660()>
c00131f2:	83 c4 1c             	add    esp,0x1c
c00131f5:	c3                   	ret    

c00131f6 <Fs::standardiseFiles(char*, char const*, char const*)>:
c00131f6:	55                   	push   ebp
c00131f7:	57                   	push   edi
c00131f8:	56                   	push   esi
c00131f9:	53                   	push   ebx
c00131fa:	81 ec 10 04 00 00    	sub    esp,0x410
c0013200:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013207:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001320e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013215:	68 00 04 00 00       	push   0x400
c001321a:	6a 00                	push   0x0
c001321c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013220:	56                   	push   esi
c0013221:	e8 46 d5 fe ff       	call   c000076c <memset>
c0013226:	83 c4 10             	add    esp,0x10
c0013229:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001322d:	75 0b                	jne    c001323a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001322f:	50                   	push   eax
c0013230:	50                   	push   eax
c0013231:	57                   	push   edi
c0013232:	56                   	push   esi
c0013233:	e8 f0 d5 fe ff       	call   c0000828 <strcpy>
c0013238:	eb 41                	jmp    c001327b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001323a:	8a 07                	mov    al,BYTE PTR [edi]
c001323c:	3c 5c                	cmp    al,0x5c
c001323e:	74 04                	je     c0013244 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013240:	3c 2f                	cmp    al,0x2f
c0013242:	75 18                	jne    c001325c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013244:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013247:	3c 60                	cmp    al,0x60
c0013249:	7e 03                	jle    c001324e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001324b:	83 e8 20             	sub    eax,0x20
c001324e:	88 04 24             	mov    BYTE PTR [esp],al
c0013251:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013258:	50                   	push   eax
c0013259:	50                   	push   eax
c001325a:	eb 18                	jmp    c0013274 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001325c:	50                   	push   eax
c001325d:	50                   	push   eax
c001325e:	55                   	push   ebp
c001325f:	56                   	push   esi
c0013260:	e8 c3 d5 fe ff       	call   c0000828 <strcpy>
c0013265:	5a                   	pop    edx
c0013266:	59                   	pop    ecx
c0013267:	68 d1 cb 02 c0       	push   0xc002cbd1
c001326c:	56                   	push   esi
c001326d:	e8 f6 d6 fe ff       	call   c0000968 <strcat>
c0013272:	5d                   	pop    ebp
c0013273:	58                   	pop    eax
c0013274:	57                   	push   edi
c0013275:	56                   	push   esi
c0013276:	e8 ed d6 fe ff       	call   c0000968 <strcat>
c001327b:	83 c4 10             	add    esp,0x10
c001327e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013281:	3c 60                	cmp    al,0x60
c0013283:	7e 03                	jle    c0013288 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013285:	83 e8 20             	sub    eax,0x20
c0013288:	88 04 24             	mov    BYTE PTR [esp],al
c001328b:	88 03                	mov    BYTE PTR [ebx],al
c001328d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013294:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001329a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001329e:	bf 03 00 00 00       	mov    edi,0x3
c00132a3:	b8 03 00 00 00       	mov    eax,0x3
c00132a8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132ab:	84 d2                	test   dl,dl
c00132ad:	0f 84 91 00 00 00    	je     c0013344 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132b3:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132b6:	80 fa 5c             	cmp    dl,0x5c
c00132b9:	74 05                	je     c00132c0 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132bb:	80 fa 2f             	cmp    dl,0x2f
c00132be:	75 12                	jne    c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132c0:	89 c5                	mov    ebp,eax
c00132c2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132c7:	74 09                	je     c00132d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132c9:	40                   	inc    eax
c00132ca:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00132ce:	89 cf                	mov    edi,ecx
c00132d0:	eb d6                	jmp    c00132a8 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00132d2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00132d7:	75 5b                	jne    c0013334 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132d9:	80 fa 2e             	cmp    dl,0x2e
c00132dc:	75 56                	jne    c0013334 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132de:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00132e2:	74 19                	je     c00132fd <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00132e4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132e9:	74 53                	je     c001333e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132eb:	89 f9                	mov    ecx,edi
c00132ed:	41                   	inc    ecx
c00132ee:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00132f1:	80 fa 2f             	cmp    dl,0x2f
c00132f4:	74 f7                	je     c00132ed <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132f6:	80 fa 5c             	cmp    dl,0x5c
c00132f9:	74 f2                	je     c00132ed <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132fb:	eb d1                	jmp    c00132ce <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00132fd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013302:	74 3a                	je     c001333e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013304:	83 f8 03             	cmp    eax,0x3
c0013307:	74 c5                	je     c00132ce <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013309:	41                   	inc    ecx
c001330a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001330d:	80 fa 2f             	cmp    dl,0x2f
c0013310:	74 f7                	je     c0013309 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013312:	80 fa 5c             	cmp    dl,0x5c
c0013315:	74 f2                	je     c0013309 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013317:	48                   	dec    eax
c0013318:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001331c:	75 06                	jne    c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001331e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013322:	eb f3                	jmp    c0013317 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013324:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013328:	74 07                	je     c0013331 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c001332a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001332e:	48                   	dec    eax
c001332f:	eb f3                	jmp    c0013324 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013331:	40                   	inc    eax
c0013332:	eb 9a                	jmp    c00132ce <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013334:	80 fa 2f             	cmp    dl,0x2f
c0013337:	74 95                	je     c00132ce <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013339:	80 fa 5c             	cmp    dl,0x5c
c001333c:	74 90                	je     c00132ce <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001333e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013341:	40                   	inc    eax
c0013342:	eb 8a                	jmp    c00132ce <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013344:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013348:	83 ec 0c             	sub    esp,0xc
c001334b:	53                   	push   ebx
c001334c:	e8 37 d4 fe ff       	call   c0000788 <strlen>
c0013351:	83 c4 10             	add    esp,0x10
c0013354:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013359:	75 26                	jne    c0013381 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c001335b:	83 ec 0c             	sub    esp,0xc
c001335e:	53                   	push   ebx
c001335f:	e8 24 d4 fe ff       	call   c0000788 <strlen>
c0013364:	83 c4 10             	add    esp,0x10
c0013367:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001336c:	74 26                	je     c0013394 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001336e:	83 ec 0c             	sub    esp,0xc
c0013371:	53                   	push   ebx
c0013372:	e8 11 d4 fe ff       	call   c0000788 <strlen>
c0013377:	83 c4 10             	add    esp,0x10
c001337a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001337f:	eb c7                	jmp    c0013348 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013381:	83 ec 0c             	sub    esp,0xc
c0013384:	53                   	push   ebx
c0013385:	e8 fe d3 fe ff       	call   c0000788 <strlen>
c001338a:	83 c4 10             	add    esp,0x10
c001338d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013392:	74 c7                	je     c001335b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013394:	81 c4 0c 04 00 00    	add    esp,0x40c
c001339a:	5b                   	pop    ebx
c001339b:	5e                   	pop    esi
c001339c:	5f                   	pop    edi
c001339d:	5d                   	pop    ebp
c001339e:	c3                   	ret    
c001339f:	90                   	nop

c00133a0 <File::File(char const*, Process*)>:
c00133a0:	83 ec 0c             	sub    esp,0xc
c00133a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a7:	83 ec 08             	sub    esp,0x8
c00133aa:	6a 00                	push   0x0
c00133ac:	50                   	push   eax
c00133ad:	e8 46 e2 ff ff       	call   c00115f8 <UnixFile::UnixFile(int)>
c00133b2:	83 c4 10             	add    esp,0x10
c00133b5:	ba 24 b4 02 c0       	mov    edx,0xc002b424
c00133ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133be:	89 10                	mov    DWORD PTR [eax],edx
c00133c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ce:	83 c0 0d             	add    eax,0xd
c00133d1:	83 ec 04             	sub    esp,0x4
c00133d4:	52                   	push   edx
c00133d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d9:	50                   	push   eax
c00133da:	e8 17 fe ff ff       	call   c00131f6 <Fs::standardiseFiles(char*, char const*, char const*)>
c00133df:	83 c4 10             	add    esp,0x10
c00133e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00133e9:	8d 50 bf             	lea    edx,[eax-0x41]
c00133ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00133f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fa:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00133fe:	90                   	nop
c00133ff:	83 c4 0c             	add    esp,0xc
c0013402:	c3                   	ret    
c0013403:	90                   	nop

c0013404 <File::open(FileOpenMode)>:
c0013404:	53                   	push   ebx
c0013405:	b8 0b 00 00 00       	mov    eax,0xb
c001340a:	83 ec 08             	sub    esp,0x8
c001340d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013411:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013418:	80 fa 19             	cmp    dl,0x19
c001341b:	77 40                	ja     c001345d <File::open(FileOpenMode)+0x59>
c001341d:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c0013424:	85 d2                	test   edx,edx
c0013426:	74 35                	je     c001345d <File::open(FileOpenMode)+0x59>
c0013428:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001342e:	85 d2                	test   edx,edx
c0013430:	74 2b                	je     c001345d <File::open(FileOpenMode)+0x59>
c0013432:	b8 06 00 00 00       	mov    eax,0x6
c0013437:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001343b:	75 20                	jne    c001345d <File::open(FileOpenMode)+0x59>
c001343d:	8b 02                	mov    eax,DWORD PTR [edx]
c001343f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013445:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013449:	51                   	push   ecx
c001344a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001344d:	51                   	push   ecx
c001344e:	52                   	push   edx
c001344f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	85 c0                	test   eax,eax
c0013457:	75 04                	jne    c001345d <File::open(FileOpenMode)+0x59>
c0013459:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001345d:	83 c4 08             	add    esp,0x8
c0013460:	5b                   	pop    ebx
c0013461:	c3                   	ret    

c0013462 <File::close()>:
c0013462:	53                   	push   ebx
c0013463:	b8 0b 00 00 00       	mov    eax,0xb
c0013468:	83 ec 08             	sub    esp,0x8
c001346b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001346f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013476:	80 fa 19             	cmp    dl,0x19
c0013479:	77 41                	ja     c00134bc <File::close()+0x5a>
c001347b:	8b 1c 95 80 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0b80]
c0013482:	85 db                	test   ebx,ebx
c0013484:	74 36                	je     c00134bc <File::close()+0x5a>
c0013486:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001348d:	74 2d                	je     c00134bc <File::close()+0x5a>
c001348f:	b8 05 00 00 00       	mov    eax,0x5
c0013494:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013498:	74 22                	je     c00134bc <File::close()+0x5a>
c001349a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001349e:	8b 04 95 80 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b80]
c00134a5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134ab:	53                   	push   ebx
c00134ac:	53                   	push   ebx
c00134ad:	8b 10                	mov    edx,DWORD PTR [eax]
c00134af:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134b5:	50                   	push   eax
c00134b6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134b9:	83 c4 10             	add    esp,0x10
c00134bc:	83 c4 08             	add    esp,0x8
c00134bf:	5b                   	pop    ebx
c00134c0:	c3                   	ret    
c00134c1:	90                   	nop

c00134c2 <File::seek(unsigned long long)>:
c00134c2:	56                   	push   esi
c00134c3:	53                   	push   ebx
c00134c4:	b8 0b 00 00 00       	mov    eax,0xb
c00134c9:	51                   	push   ecx
c00134ca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00134d2:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00134d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134dd:	80 fa 19             	cmp    dl,0x19
c00134e0:	77 31                	ja     c0013513 <File::seek(unsigned long long)+0x51>
c00134e2:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c00134e9:	85 d2                	test   edx,edx
c00134eb:	74 26                	je     c0013513 <File::seek(unsigned long long)+0x51>
c00134ed:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134f3:	85 d2                	test   edx,edx
c00134f5:	74 1c                	je     c0013513 <File::seek(unsigned long long)+0x51>
c00134f7:	b8 05 00 00 00       	mov    eax,0x5
c00134fc:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013500:	74 11                	je     c0013513 <File::seek(unsigned long long)+0x51>
c0013502:	8b 02                	mov    eax,DWORD PTR [edx]
c0013504:	53                   	push   ebx
c0013505:	51                   	push   ecx
c0013506:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001350c:	52                   	push   edx
c001350d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013510:	83 c4 10             	add    esp,0x10
c0013513:	5a                   	pop    edx
c0013514:	5b                   	pop    ebx
c0013515:	5e                   	pop    esi
c0013516:	c3                   	ret    
c0013517:	90                   	nop

c0013518 <File::tell(unsigned long long*)>:
c0013518:	83 ec 0c             	sub    esp,0xc
c001351b:	b8 0b 00 00 00       	mov    eax,0xb
c0013520:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013524:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001352b:	80 fa 19             	cmp    dl,0x19
c001352e:	77 34                	ja     c0013564 <File::tell(unsigned long long*)+0x4c>
c0013530:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c0013537:	85 d2                	test   edx,edx
c0013539:	74 29                	je     c0013564 <File::tell(unsigned long long*)+0x4c>
c001353b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013541:	85 d2                	test   edx,edx
c0013543:	74 1f                	je     c0013564 <File::tell(unsigned long long*)+0x4c>
c0013545:	b8 05 00 00 00       	mov    eax,0x5
c001354a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001354e:	74 14                	je     c0013564 <File::tell(unsigned long long*)+0x4c>
c0013550:	50                   	push   eax
c0013551:	8b 02                	mov    eax,DWORD PTR [edx]
c0013553:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013557:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001355d:	52                   	push   edx
c001355e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013561:	83 c4 10             	add    esp,0x10
c0013564:	83 c4 0c             	add    esp,0xc
c0013567:	c3                   	ret    

c0013568 <File::rewind()>:
c0013568:	83 ec 10             	sub    esp,0x10
c001356b:	6a 00                	push   0x0
c001356d:	6a 00                	push   0x0
c001356f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013573:	e8 4a ff ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c0013578:	83 c4 1c             	add    esp,0x1c
c001357b:	c3                   	ret    

c001357c <File::unlink()>:
c001357c:	83 ec 0c             	sub    esp,0xc
c001357f:	b8 0b 00 00 00       	mov    eax,0xb
c0013584:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013588:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001358f:	80 f9 19             	cmp    cl,0x19
c0013592:	77 2f                	ja     c00135c3 <File::unlink()+0x47>
c0013594:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c001359b:	85 c9                	test   ecx,ecx
c001359d:	74 24                	je     c00135c3 <File::unlink()+0x47>
c001359f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135a5:	85 c9                	test   ecx,ecx
c00135a7:	74 1a                	je     c00135c3 <File::unlink()+0x47>
c00135a9:	b8 06 00 00 00       	mov    eax,0x6
c00135ae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135b2:	75 0f                	jne    c00135c3 <File::unlink()+0x47>
c00135b4:	83 c2 0d             	add    edx,0xd
c00135b7:	50                   	push   eax
c00135b8:	50                   	push   eax
c00135b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135bb:	52                   	push   edx
c00135bc:	51                   	push   ecx
c00135bd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135c0:	83 c4 10             	add    esp,0x10
c00135c3:	83 c4 0c             	add    esp,0xc
c00135c6:	c3                   	ret    
c00135c7:	90                   	nop

c00135c8 <File::rename(char const*)>:
c00135c8:	83 ec 0c             	sub    esp,0xc
c00135cb:	b8 0b 00 00 00       	mov    eax,0xb
c00135d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135d4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135db:	80 f9 19             	cmp    cl,0x19
c00135de:	77 32                	ja     c0013612 <File::rename(char const*)+0x4a>
c00135e0:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c00135e7:	85 c9                	test   ecx,ecx
c00135e9:	74 27                	je     c0013612 <File::rename(char const*)+0x4a>
c00135eb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135f1:	85 c9                	test   ecx,ecx
c00135f3:	74 1d                	je     c0013612 <File::rename(char const*)+0x4a>
c00135f5:	b8 06 00 00 00       	mov    eax,0x6
c00135fa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135fe:	75 12                	jne    c0013612 <File::rename(char const*)+0x4a>
c0013600:	83 c2 0d             	add    edx,0xd
c0013603:	50                   	push   eax
c0013604:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013606:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001360a:	52                   	push   edx
c001360b:	51                   	push   ecx
c001360c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001360f:	83 c4 10             	add    esp,0x10
c0013612:	83 c4 0c             	add    esp,0xc
c0013615:	c3                   	ret    

c0013616 <File::chfatattr(unsigned char, unsigned char)>:
c0013616:	57                   	push   edi
c0013617:	b8 0b 00 00 00       	mov    eax,0xb
c001361c:	56                   	push   esi
c001361d:	53                   	push   ebx
c001361e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013622:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013626:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001362d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013631:	80 f9 19             	cmp    cl,0x19
c0013634:	77 37                	ja     c001366d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013636:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c001363d:	85 c9                	test   ecx,ecx
c001363f:	74 2c                	je     c001366d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013641:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013647:	85 c9                	test   ecx,ecx
c0013649:	74 22                	je     c001366d <File::chfatattr(unsigned char, unsigned char)+0x57>
c001364b:	b8 06 00 00 00       	mov    eax,0x6
c0013650:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013654:	75 17                	jne    c001366d <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013656:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013658:	89 f0                	mov    eax,esi
c001365a:	83 c2 0d             	add    edx,0xd
c001365d:	0f b6 f0             	movzx  esi,al
c0013660:	0f b6 db             	movzx  ebx,bl
c0013663:	56                   	push   esi
c0013664:	53                   	push   ebx
c0013665:	52                   	push   edx
c0013666:	51                   	push   ecx
c0013667:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001366a:	83 c4 10             	add    esp,0x10
c001366d:	5b                   	pop    ebx
c001366e:	5e                   	pop    esi
c001366f:	5f                   	pop    edi
c0013670:	c3                   	ret    
c0013671:	90                   	nop

c0013672 <File::exists()>:
c0013672:	83 ec 0c             	sub    esp,0xc
c0013675:	31 c0                	xor    eax,eax
c0013677:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001367b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013682:	80 f9 19             	cmp    cl,0x19
c0013685:	77 24                	ja     c00136ab <File::exists()+0x39>
c0013687:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c001368e:	85 c9                	test   ecx,ecx
c0013690:	74 19                	je     c00136ab <File::exists()+0x39>
c0013692:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013698:	85 c9                	test   ecx,ecx
c001369a:	74 0f                	je     c00136ab <File::exists()+0x39>
c001369c:	83 c2 0d             	add    edx,0xd
c001369f:	50                   	push   eax
c00136a0:	50                   	push   eax
c00136a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136a3:	52                   	push   edx
c00136a4:	51                   	push   ecx
c00136a5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136a8:	83 c4 10             	add    esp,0x10
c00136ab:	83 c4 0c             	add    esp,0xc
c00136ae:	c3                   	ret    
c00136af:	90                   	nop

c00136b0 <File::stat(unsigned long long*, bool*)>:
c00136b0:	56                   	push   esi
c00136b1:	53                   	push   ebx
c00136b2:	50                   	push   eax
c00136b3:	b8 0b 00 00 00       	mov    eax,0xb
c00136b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136c0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136cb:	80 f9 19             	cmp    cl,0x19
c00136ce:	77 3d                	ja     c001370d <File::stat(unsigned long long*, bool*)+0x5d>
c00136d0:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c00136d7:	85 c9                	test   ecx,ecx
c00136d9:	74 32                	je     c001370d <File::stat(unsigned long long*, bool*)+0x5d>
c00136db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136e1:	85 c9                	test   ecx,ecx
c00136e3:	74 28                	je     c001370d <File::stat(unsigned long long*, bool*)+0x5d>
c00136e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136eb:	74 13                	je     c0013700 <File::stat(unsigned long long*, bool*)+0x50>
c00136ed:	83 ec 04             	sub    esp,0x4
c00136f0:	56                   	push   esi
c00136f1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00136f7:	51                   	push   ecx
c00136f8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00136fb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00136fe:	eb 0a                	jmp    c001370a <File::stat(unsigned long long*, bool*)+0x5a>
c0013700:	53                   	push   ebx
c0013701:	83 c2 0d             	add    edx,0xd
c0013704:	56                   	push   esi
c0013705:	52                   	push   edx
c0013706:	51                   	push   ecx
c0013707:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001370a:	83 c4 10             	add    esp,0x10
c001370d:	5a                   	pop    edx
c001370e:	5b                   	pop    ebx
c001370f:	5e                   	pop    esi
c0013710:	c3                   	ret    

c0013711 <Fs::setcwd(Process*, char*)>:
c0013711:	55                   	push   ebp
c0013712:	57                   	push   edi
c0013713:	56                   	push   esi
c0013714:	53                   	push   ebx
c0013715:	81 ec 20 02 00 00    	sub    esp,0x220
c001371b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013722:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013728:	57                   	push   edi
c0013729:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013730:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013734:	56                   	push   esi
c0013735:	e8 bc fa ff ff       	call   c00131f6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001373a:	89 34 24             	mov    DWORD PTR [esp],esi
c001373d:	e8 46 d0 fe ff       	call   c0000788 <strlen>
c0013742:	83 c4 10             	add    esp,0x10
c0013745:	83 f8 02             	cmp    eax,0x2
c0013748:	77 17                	ja     c0013761 <Fs::setcwd(Process*, char*)+0x50>
c001374a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001374f:	83 e8 41             	sub    eax,0x41
c0013752:	83 f8 19             	cmp    eax,0x19
c0013755:	76 24                	jbe    c001377b <Fs::setcwd(Process*, char*)+0x6a>
c0013757:	b8 03 00 00 00       	mov    eax,0x3
c001375c:	e9 e0 00 00 00       	jmp    c0013841 <Fs::setcwd(Process*, char*)+0x130>
c0013761:	83 ec 0c             	sub    esp,0xc
c0013764:	56                   	push   esi
c0013765:	e8 1e d0 fe ff       	call   c0000788 <strlen>
c001376a:	83 c4 10             	add    esp,0x10
c001376d:	83 f8 03             	cmp    eax,0x3
c0013770:	75 34                	jne    c00137a6 <Fs::setcwd(Process*, char*)+0x95>
c0013772:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013777:	75 2d                	jne    c00137a6 <Fs::setcwd(Process*, char*)+0x95>
c0013779:	eb cf                	jmp    c001374a <Fs::setcwd(Process*, char*)+0x39>
c001377b:	8b 14 85 80 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0b80]
c0013782:	b8 05 00 00 00       	mov    eax,0x5
c0013787:	85 d2                	test   edx,edx
c0013789:	0f 84 b2 00 00 00    	je     c0013841 <Fs::setcwd(Process*, char*)+0x130>
c001378f:	b8 06 00 00 00       	mov    eax,0x6
c0013794:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001379b:	0f 85 92 00 00 00    	jne    c0013833 <Fs::setcwd(Process*, char*)+0x122>
c00137a1:	e9 9b 00 00 00       	jmp    c0013841 <Fs::setcwd(Process*, char*)+0x130>
c00137a6:	83 ec 0c             	sub    esp,0xc
c00137a9:	68 14 01 00 00       	push   0x114
c00137ae:	e8 f3 c0 ff ff       	call   c000f8a6 <malloc>
c00137b3:	83 c4 0c             	add    esp,0xc
c00137b6:	89 c3                	mov    ebx,eax
c00137b8:	55                   	push   ebp
c00137b9:	56                   	push   esi
c00137ba:	50                   	push   eax
c00137bb:	e8 e0 fb ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c00137c0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00137c5:	83 c4 0c             	add    esp,0xc
c00137c8:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00137cc:	50                   	push   eax
c00137cd:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137d1:	50                   	push   eax
c00137d2:	53                   	push   ebx
c00137d3:	e8 d8 fe ff ff       	call   c00136b0 <File::stat(unsigned long long*, bool*)>
c00137d8:	83 c4 10             	add    esp,0x10
c00137db:	83 f8 02             	cmp    eax,0x2
c00137de:	74 04                	je     c00137e4 <Fs::setcwd(Process*, char*)+0xd3>
c00137e0:	85 c0                	test   eax,eax
c00137e2:	74 1c                	je     c0013800 <Fs::setcwd(Process*, char*)+0xef>
c00137e4:	b8 01 00 00 00       	mov    eax,0x1
c00137e9:	85 db                	test   ebx,ebx
c00137eb:	74 54                	je     c0013841 <Fs::setcwd(Process*, char*)+0x130>
c00137ed:	83 ec 0c             	sub    esp,0xc
c00137f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137f2:	53                   	push   ebx
c00137f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	b8 01 00 00 00       	mov    eax,0x1
c00137fe:	eb 41                	jmp    c0013841 <Fs::setcwd(Process*, char*)+0x130>
c0013800:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013805:	75 1c                	jne    c0013823 <Fs::setcwd(Process*, char*)+0x112>
c0013807:	b8 02 00 00 00       	mov    eax,0x2
c001380c:	85 db                	test   ebx,ebx
c001380e:	74 31                	je     c0013841 <Fs::setcwd(Process*, char*)+0x130>
c0013810:	83 ec 0c             	sub    esp,0xc
c0013813:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013815:	53                   	push   ebx
c0013816:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013819:	83 c4 10             	add    esp,0x10
c001381c:	b8 02 00 00 00       	mov    eax,0x2
c0013821:	eb 1e                	jmp    c0013841 <Fs::setcwd(Process*, char*)+0x130>
c0013823:	85 db                	test   ebx,ebx
c0013825:	74 0c                	je     c0013833 <Fs::setcwd(Process*, char*)+0x122>
c0013827:	83 ec 0c             	sub    esp,0xc
c001382a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001382c:	53                   	push   ebx
c001382d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013830:	83 c4 10             	add    esp,0x10
c0013833:	50                   	push   eax
c0013834:	50                   	push   eax
c0013835:	56                   	push   esi
c0013836:	57                   	push   edi
c0013837:	e8 ec cf fe ff       	call   c0000828 <strcpy>
c001383c:	83 c4 10             	add    esp,0x10
c001383f:	31 c0                	xor    eax,eax
c0013841:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013847:	5b                   	pop    ebx
c0013848:	5e                   	pop    esi
c0013849:	5f                   	pop    edi
c001384a:	5d                   	pop    ebp
c001384b:	c3                   	ret    

c001384c <Directory::Directory(char const*, Process*)>:
c001384c:	83 ec 0c             	sub    esp,0xc
c001384f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013853:	83 ec 08             	sub    esp,0x8
c0013856:	6a 00                	push   0x0
c0013858:	50                   	push   eax
c0013859:	e8 9a dd ff ff       	call   c00115f8 <UnixFile::UnixFile(int)>
c001385e:	83 c4 10             	add    esp,0x10
c0013861:	ba 40 b4 02 c0       	mov    edx,0xc002b440
c0013866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386a:	89 10                	mov    DWORD PTR [eax],edx
c001386c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013870:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001387a:	83 c0 0d             	add    eax,0xd
c001387d:	83 ec 04             	sub    esp,0x4
c0013880:	52                   	push   edx
c0013881:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013885:	50                   	push   eax
c0013886:	e8 6b f9 ff ff       	call   c00131f6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001388b:	83 c4 10             	add    esp,0x10
c001388e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013892:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013895:	8d 50 bf             	lea    edx,[eax-0x41]
c0013898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001389c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138aa:	90                   	nop
c00138ab:	83 c4 0c             	add    esp,0xc
c00138ae:	c3                   	ret    
c00138af:	90                   	nop

c00138b0 <Directory::open()>:
c00138b0:	53                   	push   ebx
c00138b1:	b8 0b 00 00 00       	mov    eax,0xb
c00138b6:	83 ec 08             	sub    esp,0x8
c00138b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138bd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00138c4:	80 fa 19             	cmp    dl,0x19
c00138c7:	77 3d                	ja     c0013906 <Directory::open()+0x56>
c00138c9:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c00138d0:	85 d2                	test   edx,edx
c00138d2:	74 32                	je     c0013906 <Directory::open()+0x56>
c00138d4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00138da:	85 d2                	test   edx,edx
c00138dc:	74 28                	je     c0013906 <Directory::open()+0x56>
c00138de:	b8 06 00 00 00       	mov    eax,0x6
c00138e3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00138e7:	75 1d                	jne    c0013906 <Directory::open()+0x56>
c00138e9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00138ef:	50                   	push   eax
c00138f0:	8b 02                	mov    eax,DWORD PTR [edx]
c00138f2:	51                   	push   ecx
c00138f3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00138f6:	51                   	push   ecx
c00138f7:	52                   	push   edx
c00138f8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c00138fb:	83 c4 10             	add    esp,0x10
c00138fe:	85 c0                	test   eax,eax
c0013900:	75 04                	jne    c0013906 <Directory::open()+0x56>
c0013902:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013906:	83 c4 08             	add    esp,0x8
c0013909:	5b                   	pop    ebx
c001390a:	c3                   	ret    
c001390b:	90                   	nop

c001390c <Directory::close()>:
c001390c:	53                   	push   ebx
c001390d:	b8 0b 00 00 00       	mov    eax,0xb
c0013912:	83 ec 08             	sub    esp,0x8
c0013915:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013919:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013920:	80 fa 19             	cmp    dl,0x19
c0013923:	77 41                	ja     c0013966 <Directory::close()+0x5a>
c0013925:	8b 1c 95 80 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0b80]
c001392c:	85 db                	test   ebx,ebx
c001392e:	74 36                	je     c0013966 <Directory::close()+0x5a>
c0013930:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013937:	74 2d                	je     c0013966 <Directory::close()+0x5a>
c0013939:	b8 05 00 00 00       	mov    eax,0x5
c001393e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013942:	74 22                	je     c0013966 <Directory::close()+0x5a>
c0013944:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013948:	8b 04 95 80 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0b80]
c001394f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013955:	53                   	push   ebx
c0013956:	53                   	push   ebx
c0013957:	8b 10                	mov    edx,DWORD PTR [eax]
c0013959:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001395f:	50                   	push   eax
c0013960:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013963:	83 c4 10             	add    esp,0x10
c0013966:	83 c4 08             	add    esp,0x8
c0013969:	5b                   	pop    ebx
c001396a:	c3                   	ret    
c001396b:	90                   	nop

c001396c <Directory::unlink()>:
c001396c:	83 ec 0c             	sub    esp,0xc
c001396f:	b8 0b 00 00 00       	mov    eax,0xb
c0013974:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013978:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001397f:	80 f9 19             	cmp    cl,0x19
c0013982:	77 2f                	ja     c00139b3 <Directory::unlink()+0x47>
c0013984:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c001398b:	85 c9                	test   ecx,ecx
c001398d:	74 24                	je     c00139b3 <Directory::unlink()+0x47>
c001398f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013995:	85 c9                	test   ecx,ecx
c0013997:	74 1a                	je     c00139b3 <Directory::unlink()+0x47>
c0013999:	b8 06 00 00 00       	mov    eax,0x6
c001399e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139a2:	75 0f                	jne    c00139b3 <Directory::unlink()+0x47>
c00139a4:	83 c2 0d             	add    edx,0xd
c00139a7:	50                   	push   eax
c00139a8:	50                   	push   eax
c00139a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139ab:	52                   	push   edx
c00139ac:	51                   	push   ecx
c00139ad:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139b0:	83 c4 10             	add    esp,0x10
c00139b3:	83 c4 0c             	add    esp,0xc
c00139b6:	c3                   	ret    
c00139b7:	90                   	nop

c00139b8 <Directory::rename(char const*)>:
c00139b8:	83 ec 0c             	sub    esp,0xc
c00139bb:	b8 0b 00 00 00       	mov    eax,0xb
c00139c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139cb:	80 f9 19             	cmp    cl,0x19
c00139ce:	77 32                	ja     c0013a02 <Directory::rename(char const*)+0x4a>
c00139d0:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c00139d7:	85 c9                	test   ecx,ecx
c00139d9:	74 27                	je     c0013a02 <Directory::rename(char const*)+0x4a>
c00139db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139e1:	85 c9                	test   ecx,ecx
c00139e3:	74 1d                	je     c0013a02 <Directory::rename(char const*)+0x4a>
c00139e5:	b8 06 00 00 00       	mov    eax,0x6
c00139ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139ee:	75 12                	jne    c0013a02 <Directory::rename(char const*)+0x4a>
c00139f0:	83 c2 0d             	add    edx,0xd
c00139f3:	50                   	push   eax
c00139f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139fa:	52                   	push   edx
c00139fb:	51                   	push   ecx
c00139fc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00139ff:	83 c4 10             	add    esp,0x10
c0013a02:	83 c4 0c             	add    esp,0xc
c0013a05:	c3                   	ret    

c0013a06 <Directory::exists()>:
c0013a06:	83 ec 0c             	sub    esp,0xc
c0013a09:	31 c0                	xor    eax,eax
c0013a0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a0f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a16:	80 f9 19             	cmp    cl,0x19
c0013a19:	77 24                	ja     c0013a3f <Directory::exists()+0x39>
c0013a1b:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c0013a22:	85 c9                	test   ecx,ecx
c0013a24:	74 19                	je     c0013a3f <Directory::exists()+0x39>
c0013a26:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a2c:	85 c9                	test   ecx,ecx
c0013a2e:	74 0f                	je     c0013a3f <Directory::exists()+0x39>
c0013a30:	83 c2 0d             	add    edx,0xd
c0013a33:	50                   	push   eax
c0013a34:	50                   	push   eax
c0013a35:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a37:	52                   	push   edx
c0013a38:	51                   	push   ecx
c0013a39:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a3c:	83 c4 10             	add    esp,0x10
c0013a3f:	83 c4 0c             	add    esp,0xc
c0013a42:	c3                   	ret    
c0013a43:	90                   	nop

c0013a44 <Directory::read(dirent*)>:
c0013a44:	83 ec 1c             	sub    esp,0x1c
c0013a47:	b8 0b 00 00 00       	mov    eax,0xb
c0013a4c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a50:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a57:	80 fa 19             	cmp    dl,0x19
c0013a5a:	77 30                	ja     c0013a8c <Directory::read(dirent*)+0x48>
c0013a5c:	8b 14 95 80 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0b80]
c0013a63:	85 d2                	test   edx,edx
c0013a65:	74 25                	je     c0013a8c <Directory::read(dirent*)+0x48>
c0013a67:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a6e:	74 1c                	je     c0013a8c <Directory::read(dirent*)+0x48>
c0013a70:	83 ec 0c             	sub    esp,0xc
c0013a73:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a75:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a79:	52                   	push   edx
c0013a7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a7e:	6a 00                	push   0x0
c0013a80:	68 10 01 00 00       	push   0x110
c0013a85:	51                   	push   ecx
c0013a86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a89:	83 c4 20             	add    esp,0x20
c0013a8c:	83 c4 1c             	add    esp,0x1c
c0013a8f:	c3                   	ret    

c0013a90 <Directory::create()>:
c0013a90:	83 ec 0c             	sub    esp,0xc
c0013a93:	b8 0b 00 00 00       	mov    eax,0xb
c0013a98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa3:	80 f9 19             	cmp    cl,0x19
c0013aa6:	77 2f                	ja     c0013ad7 <Directory::create()+0x47>
c0013aa8:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c0013aaf:	85 c9                	test   ecx,ecx
c0013ab1:	74 24                	je     c0013ad7 <Directory::create()+0x47>
c0013ab3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ab9:	85 c9                	test   ecx,ecx
c0013abb:	74 1a                	je     c0013ad7 <Directory::create()+0x47>
c0013abd:	b8 06 00 00 00       	mov    eax,0x6
c0013ac2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ac6:	75 0f                	jne    c0013ad7 <Directory::create()+0x47>
c0013ac8:	83 c2 0d             	add    edx,0xd
c0013acb:	50                   	push   eax
c0013acc:	50                   	push   eax
c0013acd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013acf:	52                   	push   edx
c0013ad0:	51                   	push   ecx
c0013ad1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013ad4:	83 c4 10             	add    esp,0x10
c0013ad7:	83 c4 0c             	add    esp,0xc
c0013ada:	c3                   	ret    
c0013adb:	90                   	nop

c0013adc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013adc:	b8 0a 00 00 00       	mov    eax,0xa
c0013ae1:	c3                   	ret    

c0013ae2 <Bus::Bus(char const*)>:
c0013ae2:	83 ec 0c             	sub    esp,0xc
c0013ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae9:	83 ec 08             	sub    esp,0x8
c0013aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af0:	50                   	push   eax
c0013af1:	e8 5c 09 00 00       	call   c0014452 <Device::Device(char const*)>
c0013af6:	83 c4 10             	add    esp,0x10
c0013af9:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0013afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b02:	89 10                	mov    DWORD PTR [eax],edx
c0013b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b08:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b12:	90                   	nop
c0013b13:	83 c4 0c             	add    esp,0xc
c0013b16:	c3                   	ret    
c0013b17:	90                   	nop

c0013b18 <Bus::~Bus()>:
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0013b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b24:	89 10                	mov    DWORD PTR [eax],edx
c0013b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2a:	83 ec 0c             	sub    esp,0xc
c0013b2d:	50                   	push   eax
c0013b2e:	e8 15 06 00 00       	call   c0014148 <Device::~Device()>
c0013b33:	83 c4 10             	add    esp,0x10
c0013b36:	90                   	nop
c0013b37:	83 c4 0c             	add    esp,0xc
c0013b3a:	c3                   	ret    
c0013b3b:	90                   	nop

c0013b3c <Bus::~Bus()>:
c0013b3c:	83 ec 0c             	sub    esp,0xc
c0013b3f:	83 ec 0c             	sub    esp,0xc
c0013b42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b46:	e8 cd ff ff ff       	call   c0013b18 <Bus::~Bus()>
c0013b4b:	83 c4 10             	add    esp,0x10
c0013b4e:	83 ec 08             	sub    esp,0x8
c0013b51:	68 58 01 00 00       	push   0x158
c0013b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b5a:	e8 02 f2 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0013b5f:	83 c4 10             	add    esp,0x10
c0013b62:	83 c4 0c             	add    esp,0xc
c0013b65:	c3                   	ret    

c0013b66 <Buzzer::Buzzer(char const*)>:
c0013b66:	83 ec 0c             	sub    esp,0xc
c0013b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b6d:	83 ec 08             	sub    esp,0x8
c0013b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b74:	50                   	push   eax
c0013b75:	e8 d8 08 00 00       	call   c0014452 <Device::Device(char const*)>
c0013b7a:	83 c4 10             	add    esp,0x10
c0013b7d:	ba 88 b4 02 c0       	mov    edx,0xc002b488
c0013b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b86:	89 10                	mov    DWORD PTR [eax],edx
c0013b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b9a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013ba4:	90                   	nop
c0013ba5:	83 c4 0c             	add    esp,0xc
c0013ba8:	c3                   	ret    
c0013ba9:	90                   	nop

c0013baa <Buzzer::~Buzzer()>:
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	ba 88 b4 02 c0       	mov    edx,0xc002b488
c0013bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb6:	89 10                	mov    DWORD PTR [eax],edx
c0013bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbc:	83 ec 0c             	sub    esp,0xc
c0013bbf:	50                   	push   eax
c0013bc0:	e8 83 05 00 00       	call   c0014148 <Device::~Device()>
c0013bc5:	83 c4 10             	add    esp,0x10
c0013bc8:	90                   	nop
c0013bc9:	83 c4 0c             	add    esp,0xc
c0013bcc:	c3                   	ret    
c0013bcd:	90                   	nop

c0013bce <Buzzer::~Buzzer()>:
c0013bce:	83 ec 0c             	sub    esp,0xc
c0013bd1:	83 ec 0c             	sub    esp,0xc
c0013bd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd8:	e8 cd ff ff ff       	call   c0013baa <Buzzer::~Buzzer()>
c0013bdd:	83 c4 10             	add    esp,0x10
c0013be0:	83 ec 08             	sub    esp,0x8
c0013be3:	68 5c 01 00 00       	push   0x15c
c0013be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bec:	e8 70 f1 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0013bf1:	83 c4 10             	add    esp,0x10
c0013bf4:	83 c4 0c             	add    esp,0xc
c0013bf7:	c3                   	ret    

c0013bf8 <Buzzer::stop()>:
c0013bf8:	83 ec 14             	sub    esp,0x14
c0013bfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013bff:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c01:	6a 00                	push   0x0
c0013c03:	50                   	push   eax
c0013c04:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c07:	83 c4 1c             	add    esp,0x1c
c0013c0a:	c3                   	ret    

c0013c0b <beepThread(void*)>:
c0013c0b:	53                   	push   ebx
c0013c0c:	83 ec 08             	sub    esp,0x8
c0013c0f:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0013c14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c18:	48                   	dec    eax
c0013c19:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0013c1e:	75 01                	jne    c0013c21 <beepThread(void*)+0x16>
c0013c20:	fb                   	sti    
c0013c21:	50                   	push   eax
c0013c22:	50                   	push   eax
c0013c23:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c28:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c2e:	52                   	push   edx
c0013c2f:	50                   	push   eax
c0013c30:	e8 6e ab 00 00       	call   c001e7a3 <nanoSleep(unsigned long long)>
c0013c35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c38:	e8 bb ff ff ff       	call   c0013bf8 <Buzzer::stop()>
c0013c3d:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c45:	83 c4 18             	add    esp,0x18
c0013c48:	5b                   	pop    ebx
c0013c49:	e9 51 aa 00 00       	jmp    c001e69f <blockTask(TaskState)>

c0013c4e <Buzzer::beep(int, int, bool)>:
c0013c4e:	57                   	push   edi
c0013c4f:	56                   	push   esi
c0013c50:	53                   	push   ebx
c0013c51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c55:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c59:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c5d:	52                   	push   edx
c0013c5e:	52                   	push   edx
c0013c5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c65:	56                   	push   esi
c0013c66:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c69:	83 c4 10             	add    esp,0x10
c0013c6c:	89 f8                	mov    eax,edi
c0013c6e:	84 c0                	test   al,al
c0013c70:	74 1f                	je     c0013c91 <Buzzer::beep(int, int, bool)+0x43>
c0013c72:	50                   	push   eax
c0013c73:	50                   	push   eax
c0013c74:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c7a:	99                   	cdq    
c0013c7b:	52                   	push   edx
c0013c7c:	50                   	push   eax
c0013c7d:	e8 21 ab 00 00       	call   c001e7a3 <nanoSleep(unsigned long long)>
c0013c82:	83 c4 10             	add    esp,0x10
c0013c85:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c89:	5b                   	pop    ebx
c0013c8a:	5e                   	pop    esi
c0013c8b:	5f                   	pop    edi
c0013c8c:	e9 67 ff ff ff       	jmp    c0013bf8 <Buzzer::stop()>
c0013c91:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c97:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0013c9c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013ca4:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013ca8:	c7 44 24 14 0b 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c0b
c0013cb0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cb4:	5b                   	pop    ebx
c0013cb5:	5e                   	pop    esi
c0013cb6:	5f                   	pop    edi
c0013cb7:	e9 a0 a5 00 00       	jmp    c001e25c <Process::createThread(void (*)(void*), void*, int)>

c0013cbc <User::loadClockSettings(int)>:
c0013cbc:	53                   	push   ebx
c0013cbd:	83 ec 14             	sub    esp,0x14
c0013cc0:	68 14 01 00 00       	push   0x114
c0013cc5:	e8 dc bb ff ff       	call   c000f8a6 <malloc>
c0013cca:	83 c4 0c             	add    esp,0xc
c0013ccd:	89 c3                	mov    ebx,eax
c0013ccf:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c0013cd5:	68 b0 b4 02 c0       	push   0xc002b4b0
c0013cda:	50                   	push   eax
c0013cdb:	e8 c0 f6 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c0013ce0:	58                   	pop    eax
c0013ce1:	5a                   	pop    edx
c0013ce2:	6a 01                	push   0x1
c0013ce4:	53                   	push   ebx
c0013ce5:	e8 1a f7 ff ff       	call   c0013404 <File::open(FileOpenMode)>
c0013cea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ced:	e8 70 f7 ff ff       	call   c0013462 <File::close()>
c0013cf2:	83 c4 10             	add    esp,0x10
c0013cf5:	85 db                	test   ebx,ebx
c0013cf7:	74 0f                	je     c0013d08 <User::loadClockSettings(int)+0x4c>
c0013cf9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cfb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013cff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d02:	83 c4 08             	add    esp,0x8
c0013d05:	5b                   	pop    ebx
c0013d06:	ff e0                	jmp    eax
c0013d08:	83 c4 08             	add    esp,0x8
c0013d0b:	5b                   	pop    ebx
c0013d0c:	c3                   	ret    
c0013d0d:	90                   	nop

c0013d0e <Clock::Clock(char const*)>:
c0013d0e:	83 ec 0c             	sub    esp,0xc
c0013d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d15:	83 ec 08             	sub    esp,0x8
c0013d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d1c:	50                   	push   eax
c0013d1d:	e8 30 07 00 00       	call   c0014452 <Device::Device(char const*)>
c0013d22:	83 c4 10             	add    esp,0x10
c0013d25:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c0013d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2e:	89 10                	mov    DWORD PTR [eax],edx
c0013d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d34:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d3e:	90                   	nop
c0013d3f:	83 c4 0c             	add    esp,0xc
c0013d42:	c3                   	ret    
c0013d43:	90                   	nop

c0013d44 <Clock::~Clock()>:
c0013d44:	83 ec 0c             	sub    esp,0xc
c0013d47:	ba d8 b4 02 c0       	mov    edx,0xc002b4d8
c0013d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d50:	89 10                	mov    DWORD PTR [eax],edx
c0013d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d56:	83 ec 0c             	sub    esp,0xc
c0013d59:	50                   	push   eax
c0013d5a:	e8 e9 03 00 00       	call   c0014148 <Device::~Device()>
c0013d5f:	83 c4 10             	add    esp,0x10
c0013d62:	90                   	nop
c0013d63:	83 c4 0c             	add    esp,0xc
c0013d66:	c3                   	ret    
c0013d67:	90                   	nop

c0013d68 <Clock::~Clock()>:
c0013d68:	83 ec 0c             	sub    esp,0xc
c0013d6b:	83 ec 0c             	sub    esp,0xc
c0013d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d72:	e8 cd ff ff ff       	call   c0013d44 <Clock::~Clock()>
c0013d77:	83 c4 10             	add    esp,0x10
c0013d7a:	83 ec 08             	sub    esp,0x8
c0013d7d:	68 58 01 00 00       	push   0x158
c0013d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d86:	e8 d6 ef ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0013d8b:	83 c4 10             	add    esp,0x10
c0013d8e:	83 c4 0c             	add    esp,0xc
c0013d91:	c3                   	ret    

c0013d92 <Clock::timeInSecondsLocal()>:
c0013d92:	53                   	push   ebx
c0013d93:	83 ec 14             	sub    esp,0x14
c0013d96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d9c:	50                   	push   eax
c0013d9d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013da0:	0f b6 0d fc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002effc
c0013da7:	03 0d 00 f0 02 c0    	add    ecx,DWORD PTR ds:0xc002f000
c0013dad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013db3:	89 cb                	mov    ebx,ecx
c0013db5:	c1 fb 1f             	sar    ebx,0x1f
c0013db8:	01 c8                	add    eax,ecx
c0013dba:	11 da                	adc    edx,ebx
c0013dbc:	83 c4 10             	add    esp,0x10
c0013dbf:	31 c9                	xor    ecx,ecx
c0013dc1:	80 3d fd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002effd,0x0
c0013dc8:	74 05                	je     c0013dcf <Clock::timeInSecondsLocal()+0x3d>
c0013dca:	b9 08 07 00 00       	mov    ecx,0x708
c0013dcf:	31 db                	xor    ebx,ebx
c0013dd1:	01 c8                	add    eax,ecx
c0013dd3:	11 da                	adc    edx,ebx
c0013dd5:	83 c4 08             	add    esp,0x8
c0013dd8:	5b                   	pop    ebx
c0013dd9:	c3                   	ret    

c0013dda <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013dda:	57                   	push   edi
c0013ddb:	56                   	push   esi
c0013ddc:	53                   	push   ebx
c0013ddd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013de1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013de5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013de7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013deb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013dee:	0f b6 05 fc ef 02 c0 	movzx  eax,BYTE PTR ds:0xc002effc
c0013df5:	03 05 00 f0 02 c0    	add    eax,DWORD PTR ds:0xc002f000
c0013dfb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e01:	99                   	cdq    
c0013e02:	29 c6                	sub    esi,eax
c0013e04:	19 d7                	sbb    edi,edx
c0013e06:	89 f0                	mov    eax,esi
c0013e08:	89 fa                	mov    edx,edi
c0013e0a:	31 f6                	xor    esi,esi
c0013e0c:	80 3d fd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002effd,0x0
c0013e13:	74 05                	je     c0013e1a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e15:	be 08 07 00 00       	mov    esi,0x708
c0013e1a:	31 ff                	xor    edi,edi
c0013e1c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e20:	29 f0                	sub    eax,esi
c0013e22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e26:	19 fa                	sbb    edx,edi
c0013e28:	89 d8                	mov    eax,ebx
c0013e2a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e2e:	5b                   	pop    ebx
c0013e2f:	5e                   	pop    esi
c0013e30:	5f                   	pop    edi
c0013e31:	ff e0                	jmp    eax

c0013e33 <datetimeToSeconds(datetime_t)>:
c0013e33:	55                   	push   ebp
c0013e34:	57                   	push   edi
c0013e35:	56                   	push   esi
c0013e36:	53                   	push   ebx
c0013e37:	83 ec 14             	sub    esp,0x14
c0013e3a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e3e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e42:	89 d3                	mov    ebx,edx
c0013e44:	0f b6 c6             	movzx  eax,dh
c0013e47:	c1 eb 10             	shr    ebx,0x10
c0013e4a:	48                   	dec    eax
c0013e4b:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e50:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e54:	0f b6 f5             	movzx  esi,ch
c0013e57:	89 cf                	mov    edi,ecx
c0013e59:	6b f6 3c             	imul   esi,esi,0x3c
c0013e5c:	c1 ef 10             	shr    edi,0x10
c0013e5f:	0f b6 c9             	movzx  ecx,cl
c0013e62:	89 f8                	mov    eax,edi
c0013e64:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e6a:	0f b6 f8             	movzx  edi,al
c0013e6d:	0f b6 d2             	movzx  edx,dl
c0013e70:	01 fe                	add    esi,edi
c0013e72:	01 f1                	add    ecx,esi
c0013e74:	0f b7 f3             	movzx  esi,bx
c0013e77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e7b:	c1 f9 1f             	sar    ecx,0x1f
c0013e7e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e83:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e87:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e8c:	8b 0c 8d 20 b5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4ae0]
c0013e93:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e97:	76 29                	jbe    c0013ec2 <datetimeToSeconds(datetime_t)+0x8f>
c0013e99:	f6 c3 03             	test   bl,0x3
c0013e9c:	75 24                	jne    c0013ec2 <datetimeToSeconds(datetime_t)+0x8f>
c0013e9e:	31 d2                	xor    edx,edx
c0013ea0:	bf 64 00 00 00       	mov    edi,0x64
c0013ea5:	89 d8                	mov    eax,ebx
c0013ea7:	66 f7 f7             	div    di
c0013eaa:	66 85 d2             	test   dx,dx
c0013ead:	75 12                	jne    c0013ec1 <datetimeToSeconds(datetime_t)+0x8e>
c0013eaf:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013eb5:	bf 90 01 00 00       	mov    edi,0x190
c0013eba:	99                   	cdq    
c0013ebb:	f7 ff                	idiv   edi
c0013ebd:	85 d2                	test   edx,edx
c0013ebf:	75 01                	jne    c0013ec2 <datetimeToSeconds(datetime_t)+0x8f>
c0013ec1:	41                   	inc    ecx
c0013ec2:	66 83 fb 46          	cmp    bx,0x46
c0013ec6:	76 45                	jbe    c0013f0d <datetimeToSeconds(datetime_t)+0xda>
c0013ec8:	bb 46 00 00 00       	mov    ebx,0x46
c0013ecd:	bf 64 00 00 00       	mov    edi,0x64
c0013ed2:	bd 90 01 00 00       	mov    ebp,0x190
c0013ed7:	b8 6d 01 00 00       	mov    eax,0x16d
c0013edc:	f6 c3 03             	test   bl,0x3
c0013edf:	75 23                	jne    c0013f04 <datetimeToSeconds(datetime_t)+0xd1>
c0013ee1:	89 d8                	mov    eax,ebx
c0013ee3:	99                   	cdq    
c0013ee4:	f7 ff                	idiv   edi
c0013ee6:	b8 6e 01 00 00       	mov    eax,0x16e
c0013eeb:	85 d2                	test   edx,edx
c0013eed:	75 15                	jne    c0013f04 <datetimeToSeconds(datetime_t)+0xd1>
c0013eef:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013ef5:	99                   	cdq    
c0013ef6:	f7 fd                	idiv   ebp
c0013ef8:	83 fa 01             	cmp    edx,0x1
c0013efb:	19 c0                	sbb    eax,eax
c0013efd:	f7 d0                	not    eax
c0013eff:	05 6e 01 00 00       	add    eax,0x16e
c0013f04:	01 c1                	add    ecx,eax
c0013f06:	43                   	inc    ebx
c0013f07:	39 f3                	cmp    ebx,esi
c0013f09:	7c cc                	jl     c0013ed7 <datetimeToSeconds(datetime_t)+0xa4>
c0013f0b:	eb 35                	jmp    c0013f42 <datetimeToSeconds(datetime_t)+0x10f>
c0013f0d:	74 33                	je     c0013f42 <datetimeToSeconds(datetime_t)+0x10f>
c0013f0f:	b8 45 00 00 00       	mov    eax,0x45
c0013f14:	89 c2                	mov    edx,eax
c0013f16:	83 e2 03             	and    edx,0x3
c0013f19:	39 f0                	cmp    eax,esi
c0013f1b:	7e 0f                	jle    c0013f2c <datetimeToSeconds(datetime_t)+0xf9>
c0013f1d:	83 fa 01             	cmp    edx,0x1
c0013f20:	19 d2                	sbb    edx,edx
c0013f22:	48                   	dec    eax
c0013f23:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f2a:	eb e8                	jmp    c0013f14 <datetimeToSeconds(datetime_t)+0xe1>
c0013f2c:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f31:	85 d2                	test   edx,edx
c0013f33:	75 0b                	jne    c0013f40 <datetimeToSeconds(datetime_t)+0x10d>
c0013f35:	66 83 fb 01          	cmp    bx,0x1
c0013f39:	19 c0                	sbb    eax,eax
c0013f3b:	05 6e 01 00 00       	add    eax,0x16e
c0013f40:	29 c1                	sub    ecx,eax
c0013f42:	b8 80 51 01 00       	mov    eax,0x15180
c0013f47:	f7 e9                	imul   ecx
c0013f49:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f4d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f51:	83 c4 14             	add    esp,0x14
c0013f54:	5b                   	pop    ebx
c0013f55:	5e                   	pop    esi
c0013f56:	5f                   	pop    edi
c0013f57:	5d                   	pop    ebp
c0013f58:	c3                   	ret    
c0013f59:	90                   	nop

c0013f5a <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f5a:	57                   	push   edi
c0013f5b:	56                   	push   esi
c0013f5c:	53                   	push   ebx
c0013f5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f61:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f63:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f6e:	e8 c0 fe ff ff       	call   c0013e33 <datetimeToSeconds(datetime_t)>
c0013f73:	59                   	pop    ecx
c0013f74:	0f b6 0d fc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002effc
c0013f7b:	5b                   	pop    ebx
c0013f7c:	03 0d 00 f0 02 c0    	add    ecx,DWORD PTR ds:0xc002f000
c0013f82:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f88:	89 cb                	mov    ebx,ecx
c0013f8a:	c1 fb 1f             	sar    ebx,0x1f
c0013f8d:	29 c8                	sub    eax,ecx
c0013f8f:	19 da                	sbb    edx,ebx
c0013f91:	31 c9                	xor    ecx,ecx
c0013f93:	80 3d fd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002effd,0x0
c0013f9a:	74 05                	je     c0013fa1 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013f9c:	b9 08 07 00 00       	mov    ecx,0x708
c0013fa1:	31 db                	xor    ebx,ebx
c0013fa3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013fa7:	29 c8                	sub    eax,ecx
c0013fa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fad:	19 da                	sbb    edx,ebx
c0013faf:	89 f8                	mov    eax,edi
c0013fb1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fb5:	5b                   	pop    ebx
c0013fb6:	5e                   	pop    esi
c0013fb7:	5f                   	pop    edi
c0013fb8:	ff e0                	jmp    eax

c0013fba <secondsToDatetime(unsigned long long)>:
c0013fba:	55                   	push   ebp
c0013fbb:	57                   	push   edi
c0013fbc:	56                   	push   esi
c0013fbd:	53                   	push   ebx
c0013fbe:	83 ec 1c             	sub    esp,0x1c
c0013fc1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013fc5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fc9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013fcd:	6a 00                	push   0x0
c0013fcf:	68 80 51 01 00       	push   0x15180
c0013fd4:	55                   	push   ebp
c0013fd5:	57                   	push   edi
c0013fd6:	e8 09 32 01 00       	call   c00271e4 <__udivdi3>
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fe8:	6a 00                	push   0x0
c0013fea:	68 80 51 01 00       	push   0x15180
c0013fef:	55                   	push   ebp
c0013ff0:	57                   	push   edi
c0013ff1:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ff6:	e8 e9 32 01 00       	call   c00272e4 <__umoddi3>
c0013ffb:	83 c4 10             	add    esp,0x10
c0013ffe:	99                   	cdq    
c0013fff:	f7 ff                	idiv   edi
c0014001:	bf 3c 00 00 00       	mov    edi,0x3c
c0014006:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014009:	89 d0                	mov    eax,edx
c001400b:	99                   	cdq    
c001400c:	f7 ff                	idiv   edi
c001400e:	85 db                	test   ebx,ebx
c0014010:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014013:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014016:	79 11                	jns    c0014029 <secondsToDatetime(unsigned long long)+0x6f>
c0014018:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001401c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014022:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014027:	eb 07                	jmp    c0014030 <secondsToDatetime(unsigned long long)+0x76>
c0014029:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001402e:	89 d8                	mov    eax,ebx
c0014030:	bf b4 05 00 00       	mov    edi,0x5b4
c0014035:	99                   	cdq    
c0014036:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001403b:	f7 f9                	idiv   ecx
c001403d:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014042:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014046:	31 d2                	xor    edx,edx
c0014048:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014050:	01 c3                	add    ebx,eax
c0014052:	89 d8                	mov    eax,ebx
c0014054:	f7 f1                	div    ecx
c0014056:	31 d2                	xor    edx,edx
c0014058:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001405b:	89 d8                	mov    eax,ebx
c001405d:	f7 f7                	div    edi
c001405f:	31 d2                	xor    edx,edx
c0014061:	29 c1                	sub    ecx,eax
c0014063:	89 d8                	mov    eax,ebx
c0014065:	f7 f5                	div    ebp
c0014067:	bd 6d 01 00 00       	mov    ebp,0x16d
c001406c:	29 c1                	sub    ecx,eax
c001406e:	31 d2                	xor    edx,edx
c0014070:	89 c8                	mov    eax,ecx
c0014072:	f7 f5                	div    ebp
c0014074:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014079:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001407d:	31 d2                	xor    edx,edx
c001407f:	89 c8                	mov    eax,ecx
c0014081:	f7 f5                	div    ebp
c0014083:	31 d2                	xor    edx,edx
c0014085:	01 c3                	add    ebx,eax
c0014087:	89 c8                	mov    eax,ecx
c0014089:	f7 f7                	div    edi
c001408b:	bf 99 00 00 00       	mov    edi,0x99
c0014090:	29 c3                	sub    ebx,eax
c0014092:	31 d2                	xor    edx,edx
c0014094:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001409c:	29 c3                	sub    ebx,eax
c001409e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140a1:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140a4:	bb 05 00 00 00       	mov    ebx,0x5
c00140a9:	83 c1 02             	add    ecx,0x2
c00140ac:	89 c8                	mov    eax,ecx
c00140ae:	f7 f7                	div    edi
c00140b0:	31 d2                	xor    edx,edx
c00140b2:	89 c7                	mov    edi,eax
c00140b4:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140ba:	83 c0 02             	add    eax,0x2
c00140bd:	f7 f3                	div    ebx
c00140bf:	89 eb                	mov    ebx,ebp
c00140c1:	29 c3                	sub    ebx,eax
c00140c3:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140c9:	88 1e                	mov    BYTE PTR [esi],bl
c00140cb:	19 c0                	sbb    eax,eax
c00140cd:	31 d2                	xor    edx,edx
c00140cf:	83 e0 0c             	and    eax,0xc
c00140d2:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00140d6:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00140de:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00140e2:	83 f9 01             	cmp    ecx,0x1
c00140e5:	0f 96 c2             	setbe  dl
c00140e8:	41                   	inc    ecx
c00140e9:	01 d0                	add    eax,edx
c00140eb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00140ee:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00140f2:	83 c4 1c             	add    esp,0x1c
c00140f5:	89 f0                	mov    eax,esi
c00140f7:	5b                   	pop    ebx
c00140f8:	5e                   	pop    esi
c00140f9:	5f                   	pop    edi
c00140fa:	5d                   	pop    ebp
c00140fb:	c2 04 00             	ret    0x4

c00140fe <Clock::timeInDatetimeLocal()>:
c00140fe:	53                   	push   ebx
c00140ff:	83 ec 14             	sub    esp,0x14
c0014102:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014106:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001410a:	e8 83 fc ff ff       	call   c0013d92 <Clock::timeInSecondsLocal()>
c001410f:	83 c4 0c             	add    esp,0xc
c0014112:	52                   	push   edx
c0014113:	50                   	push   eax
c0014114:	53                   	push   ebx
c0014115:	e8 a0 fe ff ff       	call   c0013fba <secondsToDatetime(unsigned long long)>
c001411a:	89 d8                	mov    eax,ebx
c001411c:	83 c4 14             	add    esp,0x14
c001411f:	5b                   	pop    ebx
c0014120:	c2 04 00             	ret    0x4
c0014123:	90                   	nop

c0014124 <Device::hibernate()>:
c0014124:	c3                   	ret    
c0014125:	90                   	nop

c0014126 <Device::wake()>:
c0014126:	c3                   	ret    
c0014127:	90                   	nop

c0014128 <Device::detect()>:
c0014128:	c3                   	ret    
c0014129:	90                   	nop

c001412a <Device::disableLegacy()>:
c001412a:	c3                   	ret    
c001412b:	90                   	nop

c001412c <Device::powerSaving(PowerSavingLevel)>:
c001412c:	c3                   	ret    
c001412d:	90                   	nop

c001412e <DriverlessDevice::close(int, int, void*)>:
c001412e:	31 c0                	xor    eax,eax
c0014130:	c3                   	ret    
c0014131:	90                   	nop

c0014132 <DriverlessDevice::detect()>:
c0014132:	c3                   	ret    
c0014133:	90                   	nop

c0014134 <DriverlessDevice::open(int, int, void*)>:
c0014134:	83 ec 18             	sub    esp,0x18
c0014137:	68 50 b5 02 c0       	push   0xc002b550
c001413c:	e8 ba 66 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0014141:	83 c8 ff             	or     eax,0xffffffff
c0014144:	83 c4 1c             	add    esp,0x1c
c0014147:	c3                   	ret    

c0014148 <Device::~Device()>:
c0014148:	ba 78 b5 02 c0       	mov    edx,0xc002b578
c001414d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014151:	89 10                	mov    DWORD PTR [eax],edx
c0014153:	90                   	nop
c0014154:	c3                   	ret    
c0014155:	90                   	nop

c0014156 <Device::~Device()>:
c0014156:	83 ec 0c             	sub    esp,0xc
c0014159:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001415d:	e8 e6 ff ff ff       	call   c0014148 <Device::~Device()>
c0014162:	83 c4 04             	add    esp,0x4
c0014165:	83 ec 08             	sub    esp,0x8
c0014168:	68 58 01 00 00       	push   0x158
c001416d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014171:	e8 eb eb ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0014176:	83 c4 10             	add    esp,0x10
c0014179:	83 c4 0c             	add    esp,0xc
c001417c:	c3                   	ret    
c001417d:	90                   	nop

c001417e <Device::findAndLoadDriver()>:
c001417e:	c3                   	ret    
c001417f:	90                   	nop

c0014180 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014180:	57                   	push   edi
c0014181:	b9 09 00 00 00       	mov    ecx,0x9
c0014186:	56                   	push   esi
c0014187:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001418b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001418f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014199:	81 c7 18 01 00 00    	add    edi,0x118
c001419f:	fc                   	cld    
c00141a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141a2:	5e                   	pop    esi
c00141a3:	5f                   	pop    edi
c00141a4:	c3                   	ret    
c00141a5:	90                   	nop

c00141a6 <Device::preOpenACPI(void*, char*, char*)>:
c00141a6:	57                   	push   edi
c00141a7:	b9 1e 00 00 00       	mov    ecx,0x1e
c00141ac:	56                   	push   esi
c00141ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141b5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00141bf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00141c5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00141cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141d1:	b9 0e 00 00 00       	mov    ecx,0xe
c00141d6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00141dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141e2:	5e                   	pop    esi
c00141e3:	5f                   	pop    edi
c00141e4:	c3                   	ret    
c00141e5:	90                   	nop

c00141e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141ea:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141ef:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141f6:	75 0b                	jne    c0014203 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00141f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00141fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00141fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014201:	eb 1e                	jmp    c0014221 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014203:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0014208:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001420e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014214:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014216:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001421a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001421e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014221:	ff e0                	jmp    eax
c0014223:	90                   	nop

c0014224 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014224:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014228:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001422d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014234:	75 0b                	jne    c0014241 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014236:	8b 00                	mov    eax,DWORD PTR [eax]
c0014238:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001423c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001423f:	eb 1e                	jmp    c001425f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014241:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0014246:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001424c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014252:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014254:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014258:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001425c:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001425f:	ff e0                	jmp    eax
c0014261:	90                   	nop

c0014262 <Device::addChild(Device*)>:
c0014262:	53                   	push   ebx
c0014263:	83 ec 08             	sub    esp,0x8
c0014266:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001426a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001426e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014274:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001427a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001427c:	85 d2                	test   edx,edx
c001427e:	74 04                	je     c0014284 <Device::addChild(Device*)+0x22>
c0014280:	89 d3                	mov    ebx,edx
c0014282:	eb f6                	jmp    c001427a <Device::addChild(Device*)+0x18>
c0014284:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014287:	83 ec 0c             	sub    esp,0xc
c001428a:	6a 08                	push   0x8
c001428c:	e8 15 b6 ff ff       	call   c000f8a6 <malloc>
c0014291:	89 03                	mov    DWORD PTR [ebx],eax
c0014293:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014299:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142a0:	83 c4 18             	add    esp,0x18
c00142a3:	5b                   	pop    ebx
c00142a4:	c3                   	ret    
c00142a5:	90                   	nop

c00142a6 <Device::removeAllChildren()>:
c00142a6:	56                   	push   esi
c00142a7:	53                   	push   ebx
c00142a8:	52                   	push   edx
c00142a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142ad:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142b6:	74 17                	je     c00142cf <Device::removeAllChildren()+0x29>
c00142b8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142bb:	85 c0                	test   eax,eax
c00142bd:	74 0c                	je     c00142cb <Device::removeAllChildren()+0x25>
c00142bf:	83 ec 0c             	sub    esp,0xc
c00142c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00142c4:	50                   	push   eax
c00142c5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00142c8:	83 c4 10             	add    esp,0x10
c00142cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142cd:	eb e4                	jmp    c00142b3 <Device::removeAllChildren()+0xd>
c00142cf:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142e8:	58                   	pop    eax
c00142e9:	5b                   	pop    ebx
c00142ea:	5e                   	pop    esi
c00142eb:	c3                   	ret    

c00142ec <Device::hibernateAll()>:
c00142ec:	53                   	push   ebx
c00142ed:	83 ec 14             	sub    esp,0x14
c00142f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142f6:	53                   	push   ebx
c00142f7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00142fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014300:	83 c4 10             	add    esp,0x10
c0014303:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014306:	74 0f                	je     c0014317 <Device::hibernateAll()+0x2b>
c0014308:	83 ec 0c             	sub    esp,0xc
c001430b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001430e:	e8 d9 ff ff ff       	call   c00142ec <Device::hibernateAll()>
c0014313:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014315:	eb e9                	jmp    c0014300 <Device::hibernateAll()+0x14>
c0014317:	83 c4 08             	add    esp,0x8
c001431a:	5b                   	pop    ebx
c001431b:	c3                   	ret    

c001431c <Device::wakeAll()>:
c001431c:	53                   	push   ebx
c001431d:	83 ec 14             	sub    esp,0x14
c0014320:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014324:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014326:	53                   	push   ebx
c0014327:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001432a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014330:	83 c4 10             	add    esp,0x10
c0014333:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014336:	74 0f                	je     c0014347 <Device::wakeAll()+0x2b>
c0014338:	83 ec 0c             	sub    esp,0xc
c001433b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001433e:	e8 d9 ff ff ff       	call   c001431c <Device::wakeAll()>
c0014343:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014345:	eb e9                	jmp    c0014330 <Device::wakeAll()+0x14>
c0014347:	83 c4 08             	add    esp,0x8
c001434a:	5b                   	pop    ebx
c001434b:	c3                   	ret    

c001434c <Device::detectAll()>:
c001434c:	53                   	push   ebx
c001434d:	83 ec 14             	sub    esp,0x14
c0014350:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014354:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014356:	53                   	push   ebx
c0014357:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001435a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014360:	83 c4 10             	add    esp,0x10
c0014363:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014366:	74 0f                	je     c0014377 <Device::detectAll()+0x2b>
c0014368:	83 ec 0c             	sub    esp,0xc
c001436b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001436e:	e8 d9 ff ff ff       	call   c001434c <Device::detectAll()>
c0014373:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014375:	eb e9                	jmp    c0014360 <Device::detectAll()+0x14>
c0014377:	83 c4 08             	add    esp,0x8
c001437a:	5b                   	pop    ebx
c001437b:	c3                   	ret    

c001437c <Device::disableLegacyAll()>:
c001437c:	53                   	push   ebx
c001437d:	83 ec 14             	sub    esp,0x14
c0014380:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014384:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014386:	53                   	push   ebx
c0014387:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001438a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014390:	83 c4 10             	add    esp,0x10
c0014393:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014396:	74 0f                	je     c00143a7 <Device::disableLegacyAll()+0x2b>
c0014398:	83 ec 0c             	sub    esp,0xc
c001439b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001439e:	e8 d9 ff ff ff       	call   c001437c <Device::disableLegacyAll()>
c00143a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143a5:	eb e9                	jmp    c0014390 <Device::disableLegacyAll()+0x14>
c00143a7:	83 c4 08             	add    esp,0x8
c00143aa:	5b                   	pop    ebx
c00143ab:	c3                   	ret    

c00143ac <Device::loadDriversForAll()>:
c00143ac:	53                   	push   ebx
c00143ad:	83 ec 08             	sub    esp,0x8
c00143b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b4:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00143ba:	8b 18                	mov    ebx,DWORD PTR [eax]
c00143bc:	85 db                	test   ebx,ebx
c00143be:	74 12                	je     c00143d2 <Device::loadDriversForAll()+0x26>
c00143c0:	83 ec 0c             	sub    esp,0xc
c00143c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00143c6:	e8 e1 ff ff ff       	call   c00143ac <Device::loadDriversForAll()>
c00143cb:	83 c4 10             	add    esp,0x10
c00143ce:	89 d8                	mov    eax,ebx
c00143d0:	eb e8                	jmp    c00143ba <Device::loadDriversForAll()+0xe>
c00143d2:	83 c4 08             	add    esp,0x8
c00143d5:	5b                   	pop    ebx
c00143d6:	c3                   	ret    
c00143d7:	90                   	nop

c00143d8 <Device::closeAll()>:
c00143d8:	53                   	push   ebx
c00143d9:	83 ec 08             	sub    esp,0x8
c00143dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143e2:	6a 00                	push   0x0
c00143e4:	6a 00                	push   0x0
c00143e6:	6a 00                	push   0x0
c00143e8:	53                   	push   ebx
c00143e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143ec:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143f2:	83 c4 10             	add    esp,0x10
c00143f5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143f8:	74 0f                	je     c0014409 <Device::closeAll()+0x31>
c00143fa:	83 ec 0c             	sub    esp,0xc
c00143fd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014400:	e8 d3 ff ff ff       	call   c00143d8 <Device::closeAll()>
c0014405:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014407:	eb e9                	jmp    c00143f2 <Device::closeAll()+0x1a>
c0014409:	83 c4 08             	add    esp,0x8
c001440c:	5b                   	pop    ebx
c001440d:	c3                   	ret    

c001440e <Device::powerSavingAll(PowerSavingLevel)>:
c001440e:	56                   	push   esi
c001440f:	53                   	push   ebx
c0014410:	83 ec 0c             	sub    esp,0xc
c0014413:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014417:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001441b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001441d:	56                   	push   esi
c001441e:	53                   	push   ebx
c001441f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014422:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014428:	83 c4 10             	add    esp,0x10
c001442b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001442e:	74 0f                	je     c001443f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014430:	52                   	push   edx
c0014431:	52                   	push   edx
c0014432:	56                   	push   esi
c0014433:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014436:	e8 d3 ff ff ff       	call   c001440e <Device::powerSavingAll(PowerSavingLevel)>
c001443b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001443d:	eb e9                	jmp    c0014428 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001443f:	58                   	pop    eax
c0014440:	5b                   	pop    ebx
c0014441:	5e                   	pop    esi
c0014442:	c3                   	ret    
c0014443:	90                   	nop

c0014444 <Device::setName(char const*)>:
c0014444:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001444c:	e9 d7 c3 fe ff       	jmp    c0000828 <strcpy>
c0014451:	90                   	nop

c0014452 <Device::Device(char const*)>:
c0014452:	83 ec 1c             	sub    esp,0x1c
c0014455:	ba 78 b5 02 c0       	mov    edx,0xc002b578
c001445a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001445e:	89 10                	mov    DWORD PTR [eax],edx
c0014460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014464:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001446e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014472:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001447c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014480:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001448a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001448e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014498:	83 ec 08             	sub    esp,0x8
c001449b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001449f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144a3:	e8 9c ff ff ff       	call   c0014444 <Device::setName(char const*)>
c00144a8:	83 c4 10             	add    esp,0x10
c00144ab:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144b3:	83 ec 0c             	sub    esp,0xc
c00144b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144ba:	e8 e7 b3 ff ff       	call   c000f8a6 <malloc>
c00144bf:	83 c4 10             	add    esp,0x10
c00144c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144c8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144d3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00144d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144dd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ed:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144fe:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014509:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014514:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001451e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014522:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001452c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014530:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001453a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001453e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014548:	90                   	nop
c0014549:	83 c4 1c             	add    esp,0x1c
c001454c:	c3                   	ret    
c001454d:	90                   	nop

c001454e <Device::getName()>:
c001454e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014552:	05 d0 00 00 00       	add    eax,0xd0
c0014557:	c3                   	ret    

c0014558 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014558:	83 ec 0c             	sub    esp,0xc
c001455b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001455f:	83 ec 08             	sub    esp,0x8
c0014562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014566:	50                   	push   eax
c0014567:	e8 e6 fe ff ff       	call   c0014452 <Device::Device(char const*)>
c001456c:	83 c4 10             	add    esp,0x10
c001456f:	ba a4 b5 02 c0       	mov    edx,0xc002b5a4
c0014574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014578:	89 10                	mov    DWORD PTR [eax],edx
c001457a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001457e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014588:	90                   	nop
c0014589:	83 c4 0c             	add    esp,0xc
c001458c:	c3                   	ret    
c001458d:	90                   	nop

c001458e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001458e:	57                   	push   edi
c001458f:	56                   	push   esi
c0014590:	53                   	push   ebx
c0014591:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014595:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014599:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001459d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145a3:	75 0c                	jne    c00145b1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145a5:	52                   	push   edx
c00145a6:	52                   	push   edx
c00145a7:	53                   	push   ebx
c00145a8:	56                   	push   esi
c00145a9:	e8 88 4b 01 00       	call   c0029136 <LinkedList<Device>::addElement(Device*)>
c00145ae:	83 c4 10             	add    esp,0x10
c00145b1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145ba:	74 12                	je     c00145ce <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00145bc:	50                   	push   eax
c00145bd:	57                   	push   edi
c00145be:	56                   	push   esi
c00145bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145c2:	e8 c7 ff ff ff       	call   c001458e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	eb e9                	jmp    c00145b7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00145ce:	5b                   	pop    ebx
c00145cf:	5e                   	pop    esi
c00145d0:	5f                   	pop    edi
c00145d1:	c3                   	ret    

c00145d2 <getDevicesOfType(DeviceType)>:
c00145d2:	53                   	push   ebx
c00145d3:	83 ec 14             	sub    esp,0x14
c00145d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145da:	53                   	push   ebx
c00145db:	e8 32 4c 01 00       	call   c0029212 <LinkedList<Device>::LinkedList()>
c00145e0:	83 c4 0c             	add    esp,0xc
c00145e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145e7:	53                   	push   ebx
c00145e8:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c00145ee:	e8 9b ff ff ff       	call   c001458e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145f3:	89 d8                	mov    eax,ebx
c00145f5:	83 c4 18             	add    esp,0x18
c00145f8:	5b                   	pop    ebx
c00145f9:	c2 04 00             	ret    0x4

c00145fc <HardDiskController::HardDiskController(char const*)>:
c00145fc:	83 ec 0c             	sub    esp,0xc
c00145ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014603:	83 ec 08             	sub    esp,0x8
c0014606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001460a:	50                   	push   eax
c001460b:	e8 42 fe ff ff       	call   c0014452 <Device::Device(char const*)>
c0014610:	83 c4 10             	add    esp,0x10
c0014613:	ba d0 b5 02 c0       	mov    edx,0xc002b5d0
c0014618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001461c:	89 10                	mov    DWORD PTR [eax],edx
c001461e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014622:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001462c:	90                   	nop
c001462d:	83 c4 0c             	add    esp,0xc
c0014630:	c3                   	ret    
c0014631:	90                   	nop

c0014632 <HardDiskController::~HardDiskController()>:
c0014632:	83 ec 0c             	sub    esp,0xc
c0014635:	ba d0 b5 02 c0       	mov    edx,0xc002b5d0
c001463a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463e:	89 10                	mov    DWORD PTR [eax],edx
c0014640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014644:	83 ec 0c             	sub    esp,0xc
c0014647:	50                   	push   eax
c0014648:	e8 fb fa ff ff       	call   c0014148 <Device::~Device()>
c001464d:	83 c4 10             	add    esp,0x10
c0014650:	90                   	nop
c0014651:	83 c4 0c             	add    esp,0xc
c0014654:	c3                   	ret    
c0014655:	90                   	nop

c0014656 <HardDiskController::~HardDiskController()>:
c0014656:	83 ec 0c             	sub    esp,0xc
c0014659:	83 ec 0c             	sub    esp,0xc
c001465c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014660:	e8 cd ff ff ff       	call   c0014632 <HardDiskController::~HardDiskController()>
c0014665:	83 c4 10             	add    esp,0x10
c0014668:	83 ec 08             	sub    esp,0x8
c001466b:	68 58 01 00 00       	push   0x158
c0014670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014674:	e8 e8 e6 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0014679:	83 c4 10             	add    esp,0x10
c001467c:	83 c4 0c             	add    esp,0xc
c001467f:	c3                   	ret    

c0014680 <PhysicalDisk::eject()>:
c0014680:	83 ec 18             	sub    esp,0x18
c0014683:	68 f4 b5 02 c0       	push   0xc002b5f4
c0014688:	e8 b4 e7 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001468d:	83 c8 ff             	or     eax,0xffffffff
c0014690:	83 c4 1c             	add    esp,0x1c
c0014693:	c3                   	ret    

c0014694 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014694:	83 ec 0c             	sub    esp,0xc
c0014697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001469b:	83 ec 08             	sub    esp,0x8
c001469e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146a2:	50                   	push   eax
c00146a3:	e8 aa fd ff ff       	call   c0014452 <Device::Device(char const*)>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	ba 24 b6 02 c0       	mov    edx,0xc002b624
c00146b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b4:	89 10                	mov    DWORD PTR [eax],edx
c00146b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ba:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00146c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00146cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00146da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146e2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00146e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ec:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00146f6:	90                   	nop
c00146f7:	83 c4 0c             	add    esp,0xc
c00146fa:	c3                   	ret    
c00146fb:	90                   	nop

c00146fc <PhysicalDisk::startCache()>:
c00146fc:	56                   	push   esi
c00146fd:	53                   	push   ebx
c00146fe:	83 ec 10             	sub    esp,0x10
c0014701:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014705:	6a 44                	push   0x44
c0014707:	e8 9a b1 ff ff       	call   c000f8a6 <malloc>
c001470c:	89 c6                	mov    esi,eax
c001470e:	58                   	pop    eax
c001470f:	5a                   	pop    edx
c0014710:	53                   	push   ebx
c0014711:	56                   	push   esi
c0014712:	e8 cf 28 00 00       	call   c0016fe6 <VCache::VCache(PhysicalDisk*)>
c0014717:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001471d:	83 c4 14             	add    esp,0x14
c0014720:	5b                   	pop    ebx
c0014721:	5e                   	pop    esi
c0014722:	c3                   	ret    
c0014723:	90                   	nop

c0014724 <PhysicalDisk::~PhysicalDisk()>:
c0014724:	83 ec 0c             	sub    esp,0xc
c0014727:	ba 24 b6 02 c0       	mov    edx,0xc002b624
c001472c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014730:	89 10                	mov    DWORD PTR [eax],edx
c0014732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014736:	83 ec 0c             	sub    esp,0xc
c0014739:	50                   	push   eax
c001473a:	e8 09 fa ff ff       	call   c0014148 <Device::~Device()>
c001473f:	83 c4 10             	add    esp,0x10
c0014742:	90                   	nop
c0014743:	83 c4 0c             	add    esp,0xc
c0014746:	c3                   	ret    
c0014747:	90                   	nop

c0014748 <PhysicalDisk::~PhysicalDisk()>:
c0014748:	83 ec 0c             	sub    esp,0xc
c001474b:	83 ec 0c             	sub    esp,0xc
c001474e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014752:	e8 cd ff ff ff       	call   c0014724 <PhysicalDisk::~PhysicalDisk()>
c0014757:	83 c4 10             	add    esp,0x10
c001475a:	83 ec 08             	sub    esp,0x8
c001475d:	68 6c 01 00 00       	push   0x16c
c0014762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014766:	e8 f6 e5 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c001476b:	83 c4 10             	add    esp,0x10
c001476e:	83 c4 0c             	add    esp,0xc
c0014771:	c3                   	ret    

c0014772 <FPU::FPU(char const*)>:
c0014772:	83 ec 0c             	sub    esp,0xc
c0014775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014779:	83 ec 08             	sub    esp,0x8
c001477c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014780:	50                   	push   eax
c0014781:	e8 cc fc ff ff       	call   c0014452 <Device::Device(char const*)>
c0014786:	83 c4 10             	add    esp,0x10
c0014789:	ba 68 b6 02 c0       	mov    edx,0xc002b668
c001478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014792:	89 10                	mov    DWORD PTR [eax],edx
c0014794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014798:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147a2:	90                   	nop
c00147a3:	83 c4 0c             	add    esp,0xc
c00147a6:	c3                   	ret    
c00147a7:	90                   	nop

c00147a8 <FPU::~FPU()>:
c00147a8:	83 ec 0c             	sub    esp,0xc
c00147ab:	ba 68 b6 02 c0       	mov    edx,0xc002b668
c00147b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b4:	89 10                	mov    DWORD PTR [eax],edx
c00147b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ba:	83 ec 0c             	sub    esp,0xc
c00147bd:	50                   	push   eax
c00147be:	e8 85 f9 ff ff       	call   c0014148 <Device::~Device()>
c00147c3:	83 c4 10             	add    esp,0x10
c00147c6:	90                   	nop
c00147c7:	83 c4 0c             	add    esp,0xc
c00147ca:	c3                   	ret    
c00147cb:	90                   	nop

c00147cc <FPU::~FPU()>:
c00147cc:	83 ec 0c             	sub    esp,0xc
c00147cf:	83 ec 0c             	sub    esp,0xc
c00147d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147d6:	e8 cd ff ff ff       	call   c00147a8 <FPU::~FPU()>
c00147db:	83 c4 10             	add    esp,0x10
c00147de:	83 ec 08             	sub    esp,0x8
c00147e1:	68 58 01 00 00       	push   0x158
c00147e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147ea:	e8 72 e5 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c00147ef:	83 c4 10             	add    esp,0x10
c00147f2:	83 c4 0c             	add    esp,0xc
c00147f5:	c3                   	ret    

c00147f6 <setupFPU()>:
c00147f6:	53                   	push   ebx
c00147f7:	83 ec 08             	sub    esp,0x8
c00147fa:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c0014800:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014807:	74 19                	je     c0014822 <setupFPU()+0x2c>
c0014809:	83 ec 0c             	sub    esp,0xc
c001480c:	68 58 01 00 00       	push   0x158
c0014811:	e8 90 b0 ff ff       	call   c000f8a6 <malloc>
c0014816:	89 c3                	mov    ebx,eax
c0014818:	89 04 24             	mov    DWORD PTR [esp],eax
c001481b:	e8 42 15 01 00       	call   c0025d62 <AVX::AVX()>
c0014820:	eb 5b                	jmp    c001487d <setupFPU()+0x87>
c0014822:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014828:	84 c0                	test   al,al
c001482a:	79 19                	jns    c0014845 <setupFPU()+0x4f>
c001482c:	83 ec 0c             	sub    esp,0xc
c001482f:	68 58 01 00 00       	push   0x158
c0014834:	e8 6d b0 ff ff       	call   c000f8a6 <malloc>
c0014839:	89 c3                	mov    ebx,eax
c001483b:	89 04 24             	mov    DWORD PTR [esp],eax
c001483e:	e8 45 16 01 00       	call   c0025e88 <SSE::SSE()>
c0014843:	eb 38                	jmp    c001487d <setupFPU()+0x87>
c0014845:	a8 20                	test   al,0x20
c0014847:	74 19                	je     c0014862 <setupFPU()+0x6c>
c0014849:	83 ec 0c             	sub    esp,0xc
c001484c:	68 58 01 00 00       	push   0x158
c0014851:	e8 50 b0 ff ff       	call   c000f8a6 <malloc>
c0014856:	89 c3                	mov    ebx,eax
c0014858:	89 04 24             	mov    DWORD PTR [esp],eax
c001485b:	e8 92 15 01 00       	call   c0025df2 <MMX::MMX()>
c0014860:	eb 1b                	jmp    c001487d <setupFPU()+0x87>
c0014862:	a8 10                	test   al,0x10
c0014864:	74 1c                	je     c0014882 <setupFPU()+0x8c>
c0014866:	83 ec 0c             	sub    esp,0xc
c0014869:	68 58 01 00 00       	push   0x158
c001486e:	e8 33 b0 ff ff       	call   c000f8a6 <malloc>
c0014873:	89 c3                	mov    ebx,eax
c0014875:	89 04 24             	mov    DWORD PTR [esp],eax
c0014878:	e8 99 16 01 00       	call   c0025f16 <x87::x87()>
c001487d:	83 c4 10             	add    esp,0x10
c0014880:	eb 24                	jmp    c00148a6 <setupFPU()+0xb0>
c0014882:	83 e0 ef             	and    eax,0xffffffef
c0014885:	83 ec 0c             	sub    esp,0xc
c0014888:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001488e:	68 54 b6 02 c0       	push   0xc002b654
c0014893:	e8 a9 e5 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014898:	0f 20 c0             	mov    eax,cr0
c001489b:	83 c8 04             	or     eax,0x4
c001489e:	0f 22 c0             	mov    cr0,eax
c00148a1:	31 db                	xor    ebx,ebx
c00148a3:	83 c4 10             	add    esp,0x10
c00148a6:	89 d8                	mov    eax,ebx
c00148a8:	83 c4 08             	add    esp,0x8
c00148ab:	5b                   	pop    ebx
c00148ac:	c3                   	ret    
c00148ad:	90                   	nop

c00148ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148b6:	c1 e0 04             	shl    eax,0x4
c00148b9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00148bd:	8d 50 10             	lea    edx,[eax+0x10]
c00148c0:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00148c6:	74 08                	je     c00148d0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00148c8:	83 c0 04             	add    eax,0x4
c00148cb:	39 d0                	cmp    eax,edx
c00148cd:	75 f1                	jne    c00148c0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00148cf:	c3                   	ret    
c00148d0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148da:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00148e4:	eb e2                	jmp    c00148c8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00148e6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00148e6:	57                   	push   edi
c00148e7:	31 c0                	xor    eax,eax
c00148e9:	56                   	push   esi
c00148ea:	53                   	push   ebx
c00148eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00148ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148f3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00148f7:	89 da                	mov    edx,ebx
c00148f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00148fd:	c1 e2 04             	shl    edx,0x4
c0014900:	01 ca                	add    edx,ecx
c0014902:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001490a:	74 16                	je     c0014922 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001490c:	40                   	inc    eax
c001490d:	83 f8 04             	cmp    eax,0x4
c0014910:	75 f0                	jne    c0014902 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014912:	c7 44 24 10 98 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b698
c001491a:	5b                   	pop    ebx
c001491b:	5e                   	pop    esi
c001491c:	5f                   	pop    edi
c001491d:	e9 d9 5e 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c0014922:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014925:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014928:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001492e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014934:	5b                   	pop    ebx
c0014935:	5e                   	pop    esi
c0014936:	5f                   	pop    edi
c0014937:	c3                   	ret    

c0014938 <doubleFault(regs*, void*)>:
c0014938:	55                   	push   ebp
c0014939:	89 e5                	mov    ebp,esp
c001493b:	83 ec 08             	sub    esp,0x8
c001493e:	83 ec 0c             	sub    esp,0xc
c0014941:	68 d3 b6 02 c0       	push   0xc002b6d3
c0014946:	e8 b0 5e 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001494b:	83 c4 10             	add    esp,0x10
c001494e:	90                   	nop
c001494f:	c9                   	leave  
c0014950:	c3                   	ret    
c0014951:	90                   	nop

c0014952 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014952:	56                   	push   esi
c0014953:	53                   	push   ebx
c0014954:	50                   	push   eax
c0014955:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014959:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001495d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014962:	75 35                	jne    c0014999 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014964:	8d 43 20             	lea    eax,[ebx+0x20]
c0014967:	31 d2                	xor    edx,edx
c0014969:	89 c1                	mov    ecx,eax
c001496b:	c1 e1 04             	shl    ecx,0x4
c001496e:	01 f1                	add    ecx,esi
c0014970:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014978:	74 3e                	je     c00149b8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001497a:	42                   	inc    edx
c001497b:	83 fa 04             	cmp    edx,0x4
c001497e:	75 f0                	jne    c0014970 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014980:	83 ec 0c             	sub    esp,0xc
c0014983:	68 18 b7 02 c0       	push   0xc002b718
c0014988:	e8 6e 5e 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001498d:	83 c4 10             	add    esp,0x10
c0014990:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014995:	5a                   	pop    edx
c0014996:	5b                   	pop    ebx
c0014997:	5e                   	pop    esi
c0014998:	c3                   	ret    
c0014999:	83 ec 0c             	sub    esp,0xc
c001499c:	56                   	push   esi
c001499d:	e8 ac fb ff ff       	call   c001454e <Device::getName()>
c00149a2:	83 c4 10             	add    esp,0x10
c00149a5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149a8:	75 ba                	jne    c0014964 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149aa:	83 fb 0f             	cmp    ebx,0xf
c00149ad:	7f 29                	jg     c00149d8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149af:	0f b6 9b c0 e0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1f40]
c00149b6:	eb ac                	jmp    c0014964 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149b8:	8d 04 82             	lea    eax,[edx+eax*4]
c00149bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00149bf:	8d 04 86             	lea    eax,[esi+eax*4]
c00149c2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00149c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149cc:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00149d2:	89 d8                	mov    eax,ebx
c00149d4:	5a                   	pop    edx
c00149d5:	5b                   	pop    ebx
c00149d6:	5e                   	pop    esi
c00149d7:	c3                   	ret    
c00149d8:	83 ec 0c             	sub    esp,0xc
c00149db:	68 e0 b6 02 c0       	push   0xc002b6e0
c00149e0:	e8 16 5e 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00149e5:	83 c4 10             	add    esp,0x10
c00149e8:	e9 77 ff ff ff       	jmp    c0014964 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149ed:	90                   	nop

c00149ee <InterruptController::clearAllHandlers(int, bool)>:
c00149ee:	56                   	push   esi
c00149ef:	53                   	push   ebx
c00149f0:	52                   	push   edx
c00149f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00149f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00149f9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00149fe:	75 61                	jne    c0014a61 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a00:	8d 46 20             	lea    eax,[esi+0x20]
c0014a03:	c1 e6 04             	shl    esi,0x4
c0014a06:	c1 e0 04             	shl    eax,0x4
c0014a09:	01 de                	add    esi,ebx
c0014a0b:	01 d8                	add    eax,ebx
c0014a0d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a17:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a21:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a2b:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a35:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a3f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a49:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a53:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a5d:	58                   	pop    eax
c0014a5e:	5b                   	pop    ebx
c0014a5f:	5e                   	pop    esi
c0014a60:	c3                   	ret    
c0014a61:	83 ec 0c             	sub    esp,0xc
c0014a64:	53                   	push   ebx
c0014a65:	e8 e4 fa ff ff       	call   c001454e <Device::getName()>
c0014a6a:	83 c4 10             	add    esp,0x10
c0014a6d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a70:	75 8e                	jne    c0014a00 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a72:	83 fe 0f             	cmp    esi,0xf
c0014a75:	7f 09                	jg     c0014a80 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a77:	0f b6 b6 c0 e0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1f40]
c0014a7e:	eb 80                	jmp    c0014a00 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a80:	83 ec 0c             	sub    esp,0xc
c0014a83:	68 54 b7 02 c0       	push   0xc002b754
c0014a88:	e8 6e 5d 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0014a8d:	83 c4 10             	add    esp,0x10
c0014a90:	e9 6b ff ff ff       	jmp    c0014a00 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a95:	90                   	nop

c0014a96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a96:	56                   	push   esi
c0014a97:	53                   	push   ebx
c0014a98:	52                   	push   edx
c0014a99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014aa1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014aa6:	75 3a                	jne    c0014ae2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014aa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014aac:	8d 50 20             	lea    edx,[eax+0x20]
c0014aaf:	c1 e2 04             	shl    edx,0x4
c0014ab2:	8d 04 16             	lea    eax,[esi+edx*1]
c0014ab5:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014ab9:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014abf:	74 0b                	je     c0014acc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014ac1:	83 c0 04             	add    eax,0x4
c0014ac4:	39 d0                	cmp    eax,edx
c0014ac6:	75 f1                	jne    c0014ab9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014ac8:	58                   	pop    eax
c0014ac9:	5b                   	pop    ebx
c0014aca:	5e                   	pop    esi
c0014acb:	c3                   	ret    
c0014acc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014ad6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ae0:	eb df                	jmp    c0014ac1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014ae2:	83 ec 0c             	sub    esp,0xc
c0014ae5:	56                   	push   esi
c0014ae6:	e8 63 fa ff ff       	call   c001454e <Device::getName()>
c0014aeb:	83 c4 10             	add    esp,0x10
c0014aee:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014af1:	75 b5                	jne    c0014aa8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014af3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014af8:	7f 11                	jg     c0014b0b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014afa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014afe:	0f b6 80 c0 e0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1f40]
c0014b05:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b09:	eb 9d                	jmp    c0014aa8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b0b:	83 ec 0c             	sub    esp,0xc
c0014b0e:	68 54 b7 02 c0       	push   0xc002b754
c0014b13:	e8 e3 5c 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0014b18:	83 c4 10             	add    esp,0x10
c0014b1b:	eb 8b                	jmp    c0014aa8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b1d <nmiHandler(regs*, void*)>:
c0014b1d:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0014b22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b26:	e9 c5 a4 ff ff       	jmp    c000eff0 <Computer::handleNMI()>

c0014b2b <int_handler>:
c0014b2b:	55                   	push   ebp
c0014b2c:	57                   	push   edi
c0014b2d:	56                   	push   esi
c0014b2e:	53                   	push   ebx
c0014b2f:	83 ec 0c             	sub    esp,0xc
c0014b32:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b36:	80 3d c4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319c4,0x0
c0014b3d:	74 0b                	je     c0014b4a <int_handler+0x1f>
c0014b3f:	fa                   	cli    
c0014b40:	f4                   	hlt    
c0014b41:	80 3d c4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319c4,0x0
c0014b48:	75 f5                	jne    c0014b3f <int_handler+0x14>
c0014b4a:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0014b4f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b58:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b5e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b61:	83 f8 17             	cmp    eax,0x17
c0014b64:	77 13                	ja     c0014b79 <int_handler+0x4e>
c0014b66:	83 ec 08             	sub    esp,0x8
c0014b69:	8b 17                	mov    edx,DWORD PTR [edi]
c0014b6b:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b6e:	0f b6 c0             	movzx  eax,al
c0014b71:	50                   	push   eax
c0014b72:	57                   	push   edi
c0014b73:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b76:	83 c4 10             	add    esp,0x10
c0014b79:	83 c3 15             	add    ebx,0x15
c0014b7c:	c1 e3 04             	shl    ebx,0x4
c0014b7f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b83:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b8a:	31 db                	xor    ebx,ebx
c0014b8c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b90:	85 c0                	test   eax,eax
c0014b92:	74 13                	je     c0014ba7 <int_handler+0x7c>
c0014b94:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b97:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014b9b:	74 1c                	je     c0014bb9 <int_handler+0x8e>
c0014b9d:	83 ec 08             	sub    esp,0x8
c0014ba0:	52                   	push   edx
c0014ba1:	56                   	push   esi
c0014ba2:	ff d0                	call   eax
c0014ba4:	83 c4 10             	add    esp,0x10
c0014ba7:	43                   	inc    ebx
c0014ba8:	83 fb 04             	cmp    ebx,0x4
c0014bab:	75 df                	jne    c0014b8c <int_handler+0x61>
c0014bad:	83 c4 0c             	add    esp,0xc
c0014bb0:	31 c0                	xor    eax,eax
c0014bb2:	5b                   	pop    ebx
c0014bb3:	31 d2                	xor    edx,edx
c0014bb5:	5e                   	pop    esi
c0014bb6:	5f                   	pop    edi
c0014bb7:	5d                   	pop    ebp
c0014bb8:	c3                   	ret    
c0014bb9:	83 ec 08             	sub    esp,0x8
c0014bbc:	52                   	push   edx
c0014bbd:	56                   	push   esi
c0014bbe:	ff d0                	call   eax
c0014bc0:	83 c4 10             	add    esp,0x10
c0014bc3:	83 c4 0c             	add    esp,0xc
c0014bc6:	5b                   	pop    ebx
c0014bc7:	5e                   	pop    esi
c0014bc8:	5f                   	pop    edi
c0014bc9:	5d                   	pop    ebp
c0014bca:	c3                   	ret    
c0014bcb:	90                   	nop

c0014bcc <InterruptController::InterruptController(char const*)>:
c0014bcc:	83 ec 1c             	sub    esp,0x1c
c0014bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bd3:	83 ec 08             	sub    esp,0x8
c0014bd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bda:	50                   	push   eax
c0014bdb:	e8 72 f8 ff ff       	call   c0014452 <Device::Device(char const*)>
c0014be0:	83 c4 10             	add    esp,0x10
c0014be3:	ba 14 ba 02 c0       	mov    edx,0xc002ba14
c0014be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bec:	89 10                	mov    DWORD PTR [eax],edx
c0014bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bf2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014bfc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c04:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c0c:	7f 5e                	jg     c0014c6c <InterruptController::InterruptController(char const*)+0xa0>
c0014c0e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c16:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c1b:	7f 49                	jg     c0014c66 <InterruptController::InterruptController(char const*)+0x9a>
c0014c1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c25:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c30:	01 ca                	add    edx,ecx
c0014c32:	83 c2 54             	add    edx,0x54
c0014c35:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c45:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c50:	01 ca                	add    edx,ecx
c0014c52:	81 c2 54 04 00 00    	add    edx,0x454
c0014c58:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c60:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014c64:	eb b0                	jmp    c0014c16 <InterruptController::InterruptController(char const*)+0x4a>
c0014c66:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c6a:	eb 98                	jmp    c0014c04 <InterruptController::InterruptController(char const*)+0x38>
c0014c6c:	90                   	nop
c0014c6d:	83 c4 1c             	add    esp,0x1c
c0014c70:	c3                   	ret    
c0014c71:	90                   	nop

c0014c72 <InterruptController::~InterruptController()>:
c0014c72:	83 ec 0c             	sub    esp,0xc
c0014c75:	ba 14 ba 02 c0       	mov    edx,0xc002ba14
c0014c7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c7e:	89 10                	mov    DWORD PTR [eax],edx
c0014c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c84:	83 ec 0c             	sub    esp,0xc
c0014c87:	50                   	push   eax
c0014c88:	e8 bb f4 ff ff       	call   c0014148 <Device::~Device()>
c0014c8d:	83 c4 10             	add    esp,0x10
c0014c90:	90                   	nop
c0014c91:	83 c4 0c             	add    esp,0xc
c0014c94:	c3                   	ret    
c0014c95:	90                   	nop

c0014c96 <InterruptController::~InterruptController()>:
c0014c96:	83 ec 0c             	sub    esp,0xc
c0014c99:	83 ec 0c             	sub    esp,0xc
c0014c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ca0:	e8 cd ff ff ff       	call   c0014c72 <InterruptController::~InterruptController()>
c0014ca5:	83 c4 10             	add    esp,0x10
c0014ca8:	83 ec 08             	sub    esp,0x8
c0014cab:	68 58 21 00 00       	push   0x2158
c0014cb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cb4:	e8 a8 e0 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0014cb9:	83 c4 10             	add    esp,0x10
c0014cbc:	83 c4 0c             	add    esp,0xc
c0014cbf:	c3                   	ret    

c0014cc0 <displayDebugInfo(regs*)>:
c0014cc0:	55                   	push   ebp
c0014cc1:	57                   	push   edi
c0014cc2:	56                   	push   esi
c0014cc3:	53                   	push   ebx
c0014cc4:	83 ec 24             	sub    esp,0x24
c0014cc7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014ccb:	0f 20 c2             	mov    edx,cr0
c0014cce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014cd2:	0f 20 d7             	mov    edi,cr2
c0014cd5:	0f 20 de             	mov    esi,cr3
c0014cd8:	0f 20 e5             	mov    ebp,cr4
c0014cdb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014cde:	68 8e b7 02 c0       	push   0xc002b78e
c0014ce3:	e8 59 e1 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014ce8:	59                   	pop    ecx
c0014ce9:	58                   	pop    eax
c0014cea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014ced:	68 99 b7 02 c0       	push   0xc002b799
c0014cf2:	e8 4a e1 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014cf7:	58                   	pop    eax
c0014cf8:	5a                   	pop    edx
c0014cf9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014cfc:	68 a4 b7 02 c0       	push   0xc002b7a4
c0014d01:	e8 3b e1 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d06:	59                   	pop    ecx
c0014d07:	58                   	pop    eax
c0014d08:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d0b:	68 af b7 02 c0       	push   0xc002b7af
c0014d10:	e8 2c e1 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d15:	58                   	pop    eax
c0014d16:	5a                   	pop    edx
c0014d17:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d1a:	68 ba b7 02 c0       	push   0xc002b7ba
c0014d1f:	e8 1d e1 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d24:	59                   	pop    ecx
c0014d25:	58                   	pop    eax
c0014d26:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d29:	68 c5 b7 02 c0       	push   0xc002b7c5
c0014d2e:	e8 0e e1 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d33:	58                   	pop    eax
c0014d34:	5a                   	pop    edx
c0014d35:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d38:	68 d0 b7 02 c0       	push   0xc002b7d0
c0014d3d:	e8 ff e0 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d42:	59                   	pop    ecx
c0014d43:	58                   	pop    eax
c0014d44:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d47:	68 db b7 02 c0       	push   0xc002b7db
c0014d4c:	e8 f0 e0 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d51:	58                   	pop    eax
c0014d52:	5a                   	pop    edx
c0014d53:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d56:	68 e6 b7 02 c0       	push   0xc002b7e6
c0014d5b:	e8 e1 e0 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d60:	59                   	pop    ecx
c0014d61:	58                   	pop    eax
c0014d62:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d65:	68 f5 b7 02 c0       	push   0xc002b7f5
c0014d6a:	e8 d2 e0 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d6f:	58                   	pop    eax
c0014d70:	5a                   	pop    edx
c0014d71:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d74:	68 00 b8 02 c0       	push   0xc002b800
c0014d79:	e8 c3 e0 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d7e:	59                   	pop    ecx
c0014d7f:	58                   	pop    eax
c0014d80:	57                   	push   edi
c0014d81:	68 0b b8 02 c0       	push   0xc002b80b
c0014d86:	e8 b6 e0 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d8b:	58                   	pop    eax
c0014d8c:	5a                   	pop    edx
c0014d8d:	56                   	push   esi
c0014d8e:	68 16 b8 02 c0       	push   0xc002b816
c0014d93:	e8 a9 e0 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0014d98:	59                   	pop    ecx
c0014d99:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014d9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014da4:	e8 bb be ff ff       	call   c0010c64 <setActiveTerminal(VgaText*)>
c0014da9:	58                   	pop    eax
c0014daa:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014dad:	5a                   	pop    edx
c0014dae:	c1 e0 05             	shl    eax,0x5
c0014db1:	05 20 de 02 c0       	add    eax,0xc002de20
c0014db6:	50                   	push   eax
c0014db7:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014dbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc2:	e8 29 c2 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014dc7:	59                   	pop    ecx
c0014dc8:	58                   	pop    eax
c0014dc9:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014dce:	68 21 b8 02 c0       	push   0xc002b821
c0014dd3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dd9:	e8 12 c2 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014dde:	58                   	pop    eax
c0014ddf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014de4:	5a                   	pop    edx
c0014de5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014de8:	83 c0 0c             	add    eax,0xc
c0014deb:	50                   	push   eax
c0014dec:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014df1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df7:	e8 f4 c1 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014dfc:	59                   	pop    ecx
c0014dfd:	58                   	pop    eax
c0014dfe:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e03:	68 2a b8 02 c0       	push   0xc002b82a
c0014e08:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e0e:	e8 dd c1 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014e13:	58                   	pop    eax
c0014e14:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e19:	5a                   	pop    edx
c0014e1a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e23:	e8 ee c1 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014e28:	59                   	pop    ecx
c0014e29:	58                   	pop    eax
c0014e2a:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e2f:	68 32 b8 02 c0       	push   0xc002b832
c0014e34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e3a:	e8 b1 c1 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014e3f:	58                   	pop    eax
c0014e40:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e45:	5a                   	pop    edx
c0014e46:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e4f:	e8 c2 c1 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014e54:	59                   	pop    ecx
c0014e55:	58                   	pop    eax
c0014e56:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e5b:	68 3a b8 02 c0       	push   0xc002b83a
c0014e60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e66:	e8 85 c1 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014e6b:	58                   	pop    eax
c0014e6c:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e71:	5a                   	pop    edx
c0014e72:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e7b:	e8 96 c1 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014e80:	59                   	pop    ecx
c0014e81:	58                   	pop    eax
c0014e82:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e87:	68 42 b8 02 c0       	push   0xc002b842
c0014e8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e92:	e8 59 c1 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014e97:	58                   	pop    eax
c0014e98:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014e9d:	5a                   	pop    edx
c0014e9e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014ea1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ea7:	e8 6a c1 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014eac:	59                   	pop    ecx
c0014ead:	58                   	pop    eax
c0014eae:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014eb3:	68 4a b8 02 c0       	push   0xc002b84a
c0014eb8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ebe:	e8 2d c1 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014ec3:	58                   	pop    eax
c0014ec4:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014ec9:	5a                   	pop    edx
c0014eca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ecd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed3:	e8 3e c1 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014ed8:	59                   	pop    ecx
c0014ed9:	58                   	pop    eax
c0014eda:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014edf:	68 52 b8 02 c0       	push   0xc002b852
c0014ee4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eea:	e8 01 c1 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014eef:	58                   	pop    eax
c0014ef0:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014ef5:	5a                   	pop    edx
c0014ef6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014ef9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eff:	e8 12 c1 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014f04:	59                   	pop    ecx
c0014f05:	58                   	pop    eax
c0014f06:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f0b:	68 5a b8 02 c0       	push   0xc002b85a
c0014f10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f16:	e8 d5 c0 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014f1b:	58                   	pop    eax
c0014f1c:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f21:	5a                   	pop    edx
c0014f22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f26:	52                   	push   edx
c0014f27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2d:	e8 e4 c0 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014f32:	59                   	pop    ecx
c0014f33:	58                   	pop    eax
c0014f34:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f39:	68 63 b8 02 c0       	push   0xc002b863
c0014f3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f44:	e8 a7 c0 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014f49:	58                   	pop    eax
c0014f4a:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f4f:	5a                   	pop    edx
c0014f50:	57                   	push   edi
c0014f51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f57:	e8 ba c0 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014f5c:	59                   	pop    ecx
c0014f5d:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f62:	5f                   	pop    edi
c0014f63:	68 6b b8 02 c0       	push   0xc002b86b
c0014f68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f6e:	e8 7d c0 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014f73:	58                   	pop    eax
c0014f74:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f79:	5a                   	pop    edx
c0014f7a:	56                   	push   esi
c0014f7b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f81:	e8 90 c0 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014f86:	59                   	pop    ecx
c0014f87:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014f8c:	5e                   	pop    esi
c0014f8d:	68 73 b8 02 c0       	push   0xc002b873
c0014f92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f98:	e8 53 c0 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014f9d:	5f                   	pop    edi
c0014f9e:	58                   	pop    eax
c0014f9f:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014fa4:	55                   	push   ebp
c0014fa5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fab:	e8 66 c0 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014fb0:	58                   	pop    eax
c0014fb1:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014fb6:	5a                   	pop    edx
c0014fb7:	68 7b b8 02 c0       	push   0xc002b87b
c0014fbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc2:	e8 29 c0 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014fc7:	0f 21 c0             	mov    eax,db0
c0014fca:	59                   	pop    ecx
c0014fcb:	5e                   	pop    esi
c0014fcc:	50                   	push   eax
c0014fcd:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014fd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fd8:	e8 39 c0 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0014fdd:	5f                   	pop    edi
c0014fde:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014fe3:	5d                   	pop    ebp
c0014fe4:	68 84 b8 02 c0       	push   0xc002b884
c0014fe9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fef:	e8 fc bf ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0014ff4:	0f 21 c8             	mov    eax,db1
c0014ff7:	5a                   	pop    edx
c0014ff8:	59                   	pop    ecx
c0014ff9:	50                   	push   eax
c0014ffa:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0014fff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015005:	e8 0c c0 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c001500a:	5e                   	pop    esi
c001500b:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015010:	5f                   	pop    edi
c0015011:	68 8c b8 02 c0       	push   0xc002b88c
c0015016:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001501c:	e8 cf bf ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0015021:	0f 21 d0             	mov    eax,db2
c0015024:	5d                   	pop    ebp
c0015025:	5a                   	pop    edx
c0015026:	50                   	push   eax
c0015027:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001502c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015032:	e8 df bf ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0015037:	59                   	pop    ecx
c0015038:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001503d:	5e                   	pop    esi
c001503e:	68 94 b8 02 c0       	push   0xc002b894
c0015043:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015049:	e8 a2 bf ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001504e:	0f 21 d8             	mov    eax,db3
c0015051:	5f                   	pop    edi
c0015052:	5d                   	pop    ebp
c0015053:	50                   	push   eax
c0015054:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015059:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505f:	e8 b2 bf ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0015064:	58                   	pop    eax
c0015065:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001506a:	5a                   	pop    edx
c001506b:	68 9c b8 02 c0       	push   0xc002b89c
c0015070:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015076:	e8 75 bf ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001507b:	0f 21 f0             	mov    eax,db6
c001507e:	59                   	pop    ecx
c001507f:	5e                   	pop    esi
c0015080:	50                   	push   eax
c0015081:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015086:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508c:	e8 85 bf ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c0015091:	5f                   	pop    edi
c0015092:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015097:	5d                   	pop    ebp
c0015098:	68 a4 b8 02 c0       	push   0xc002b8a4
c001509d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a3:	e8 48 bf ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c00150a8:	0f 21 f8             	mov    eax,db7
c00150ab:	5a                   	pop    edx
c00150ac:	59                   	pop    ecx
c00150ad:	50                   	push   eax
c00150ae:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00150b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b9:	e8 58 bf ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c00150be:	5e                   	pop    esi
c00150bf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150c2:	e8 a9 89 00 00       	call   c001da70 <Thr::getDriverNameFromAddress(unsigned long)>
c00150c7:	83 c4 10             	add    esp,0x10
c00150ca:	85 c0                	test   eax,eax
c00150cc:	74 7d                	je     c001514b <displayDebugInfo(regs*)+0x48b>
c00150ce:	89 c6                	mov    esi,eax
c00150d0:	50                   	push   eax
c00150d1:	50                   	push   eax
c00150d2:	56                   	push   esi
c00150d3:	68 ac b8 02 c0       	push   0xc002b8ac
c00150d8:	e8 64 dd ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00150dd:	5a                   	pop    edx
c00150de:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00150e3:	59                   	pop    ecx
c00150e4:	68 ba b8 02 c0       	push   0xc002b8ba
c00150e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ef:	e8 fc be ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c00150f4:	5f                   	pop    edi
c00150f5:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00150fa:	5d                   	pop    ebp
c00150fb:	56                   	push   esi
c00150fc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015102:	e8 e9 be ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c0015107:	58                   	pop    eax
c0015108:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001510d:	5a                   	pop    edx
c001510e:	68 c6 b8 02 c0       	push   0xc002b8c6
c0015113:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015119:	e8 d2 be ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001511e:	59                   	pop    ecx
c001511f:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0015124:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001512a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001512d:	e8 75 89 00 00       	call   c001daa7 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015132:	5b                   	pop    ebx
c0015133:	5d                   	pop    ebp
c0015134:	50                   	push   eax
c0015135:	57                   	push   edi
c0015136:	e8 db be ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c001513b:	58                   	pop    eax
c001513c:	5a                   	pop    edx
c001513d:	56                   	push   esi
c001513e:	68 d2 b8 02 c0       	push   0xc002b8d2
c0015143:	e8 f9 dc ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0015148:	83 c4 10             	add    esp,0x10
c001514b:	fa                   	cli    
c001514c:	f4                   	hlt    
c001514d:	eb fe                	jmp    c001514d <displayDebugInfo(regs*)+0x48d>

c001514f <x87EmulHandler(regs*, void*)>:
c001514f:	83 ec 0c             	sub    esp,0xc
c0015152:	0f 20 c2             	mov    edx,cr0
c0015155:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001515a:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001515e:	75 4b                	jne    c00151ab <x87EmulHandler(regs*, void*)+0x5c>
c0015160:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0015165:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001516b:	85 c0                	test   eax,eax
c001516d:	74 05                	je     c0015174 <x87EmulHandler(regs*, void*)+0x25>
c001516f:	83 e2 08             	and    edx,0x8
c0015172:	75 17                	jne    c001518b <x87EmulHandler(regs*, void*)+0x3c>
c0015174:	83 ec 0c             	sub    esp,0xc
c0015177:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001517b:	e8 60 af 00 00       	call   c00200e0 <Vm::x87Handler(regs*)>
c0015180:	83 c4 10             	add    esp,0x10
c0015183:	84 c0                	test   al,al
c0015185:	74 24                	je     c00151ab <x87EmulHandler(regs*, void*)+0x5c>
c0015187:	83 c4 0c             	add    esp,0xc
c001518a:	c3                   	ret    
c001518b:	83 ec 0c             	sub    esp,0xc
c001518e:	68 f8 b8 02 c0       	push   0xc002b8f8
c0015193:	e8 a9 dc ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0015198:	0f 06                	clts   
c001519a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001519f:	83 c4 10             	add    esp,0x10
c00151a2:	a3 08 f0 02 c0       	mov    ds:0xc002f008,eax
c00151a7:	83 c4 0c             	add    esp,0xc
c00151aa:	c3                   	ret    
c00151ab:	83 ec 0c             	sub    esp,0xc
c00151ae:	68 e2 b8 02 c0       	push   0xc002b8e2
c00151b3:	e8 89 dc ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00151b8:	5a                   	pop    edx
c00151b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151bd:	e8 fe fa ff ff       	call   c0014cc0 <displayDebugInfo(regs*)>

c00151c2 <gpFault(regs*, void*)>:
c00151c2:	53                   	push   ebx
c00151c3:	83 ec 14             	sub    esp,0x14
c00151c6:	c7 05 04 f0 02 c0 5d f4 01 c0 	mov    DWORD PTR ds:0xc002f004,0xc001f45d
c00151d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151d4:	53                   	push   ebx
c00151d5:	e8 83 a2 00 00       	call   c001f45d <Vm::faultHandler(regs*)>
c00151da:	83 c4 10             	add    esp,0x10
c00151dd:	84 c0                	test   al,al
c00151df:	74 05                	je     c00151e6 <gpFault(regs*, void*)+0x24>
c00151e1:	83 c4 08             	add    esp,0x8
c00151e4:	5b                   	pop    ebx
c00151e5:	c3                   	ret    
c00151e6:	83 ec 0c             	sub    esp,0xc
c00151e9:	68 05 b9 02 c0       	push   0xc002b905
c00151ee:	e8 4e dc ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00151f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151f6:	e8 c5 fa ff ff       	call   c0014cc0 <displayDebugInfo(regs*)>

c00151fb <pgFault(regs*, void*)>:
c00151fb:	83 ec 14             	sub    esp,0x14
c00151fe:	0f 20 d0             	mov    eax,cr2
c0015201:	50                   	push   eax
c0015202:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015207:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001520a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015210:	e8 49 d8 ff ff       	call   c0012a5e <VAS::tryLoadBackOffDisk(unsigned long)>
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	84 c0                	test   al,al
c001521a:	74 04                	je     c0015220 <pgFault(regs*, void*)+0x25>
c001521c:	83 c4 0c             	add    esp,0xc
c001521f:	c3                   	ret    
c0015220:	83 ec 0c             	sub    esp,0xc
c0015223:	68 20 b9 02 c0       	push   0xc002b920
c0015228:	e8 14 dc ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001522d:	58                   	pop    eax
c001522e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015232:	e8 89 fa ff ff       	call   c0014cc0 <displayDebugInfo(regs*)>

c0015237 <otherISRHandler(regs*, void*)>:
c0015237:	53                   	push   ebx
c0015238:	83 ec 0c             	sub    esp,0xc
c001523b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001523f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015242:	50                   	push   eax
c0015243:	50                   	push   eax
c0015244:	68 2d b9 02 c0       	push   0xc002b92d
c0015249:	e8 f3 db ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001524e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015251:	e8 6a fa ff ff       	call   c0014cc0 <displayDebugInfo(regs*)>

c0015256 <opcodeFault(regs*, void*)>:
c0015256:	55                   	push   ebp
c0015257:	89 e5                	mov    ebp,esp
c0015259:	56                   	push   esi
c001525a:	53                   	push   ebx
c001525b:	83 ec 40             	sub    esp,0x40
c001525e:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0015263:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015269:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001526f:	84 c0                	test   al,al
c0015271:	74 24                	je     c0015297 <opcodeFault(regs*, void*)+0x41>
c0015273:	83 ec 0c             	sub    esp,0xc
c0015276:	68 4c b9 02 c0       	push   0xc002b94c
c001527b:	e8 c1 db ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0015280:	83 c4 10             	add    esp,0x10
c0015283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015286:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015289:	8d 50 19             	lea    edx,[eax+0x19]
c001528c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015292:	e9 d5 05 00 00       	jmp    c001586c <opcodeFault(regs*, void*)+0x616>
c0015297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001529a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001529d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152a0:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152a4:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ae:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b4:	8a 00                	mov    al,BYTE PTR [eax]
c00152b6:	3c f0                	cmp    al,0xf0
c00152b8:	75 17                	jne    c00152d1 <opcodeFault(regs*, void*)+0x7b>
c00152ba:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c3:	8d 50 01             	lea    edx,[eax+0x1]
c00152c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152cc:	e9 da 00 00 00       	jmp    c00153ab <opcodeFault(regs*, void*)+0x155>
c00152d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d4:	8a 00                	mov    al,BYTE PTR [eax]
c00152d6:	3c f2                	cmp    al,0xf2
c00152d8:	74 09                	je     c00152e3 <opcodeFault(regs*, void*)+0x8d>
c00152da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152dd:	8a 00                	mov    al,BYTE PTR [eax]
c00152df:	3c f3                	cmp    al,0xf3
c00152e1:	75 1b                	jne    c00152fe <opcodeFault(regs*, void*)+0xa8>
c00152e3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f0:	8d 50 01             	lea    edx,[eax+0x1]
c00152f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152f9:	e9 ad 00 00 00       	jmp    c00153ab <opcodeFault(regs*, void*)+0x155>
c00152fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015301:	8a 00                	mov    al,BYTE PTR [eax]
c0015303:	3c 66                	cmp    al,0x66
c0015305:	75 1f                	jne    c0015326 <opcodeFault(regs*, void*)+0xd0>
c0015307:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001530b:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001530f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015315:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015318:	8d 50 01             	lea    edx,[eax+0x1]
c001531b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015321:	e9 85 00 00 00       	jmp    c00153ab <opcodeFault(regs*, void*)+0x155>
c0015326:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015329:	8a 00                	mov    al,BYTE PTR [eax]
c001532b:	3c 67                	cmp    al,0x67
c001532d:	75 18                	jne    c0015347 <opcodeFault(regs*, void*)+0xf1>
c001532f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015333:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015339:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533c:	8d 50 01             	lea    edx,[eax+0x1]
c001533f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015342:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015345:	eb 64                	jmp    c00153ab <opcodeFault(regs*, void*)+0x155>
c0015347:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534a:	8a 00                	mov    al,BYTE PTR [eax]
c001534c:	3c 2e                	cmp    al,0x2e
c001534e:	74 09                	je     c0015359 <opcodeFault(regs*, void*)+0x103>
c0015350:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015353:	8a 00                	mov    al,BYTE PTR [eax]
c0015355:	3c 3e                	cmp    al,0x3e
c0015357:	75 18                	jne    c0015371 <opcodeFault(regs*, void*)+0x11b>
c0015359:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001535d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015363:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015366:	8d 50 01             	lea    edx,[eax+0x1]
c0015369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001536f:	eb 3a                	jmp    c00153ab <opcodeFault(regs*, void*)+0x155>
c0015371:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015374:	8a 00                	mov    al,BYTE PTR [eax]
c0015376:	3c 36                	cmp    al,0x36
c0015378:	74 1b                	je     c0015395 <opcodeFault(regs*, void*)+0x13f>
c001537a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537d:	8a 00                	mov    al,BYTE PTR [eax]
c001537f:	3c 26                	cmp    al,0x26
c0015381:	74 12                	je     c0015395 <opcodeFault(regs*, void*)+0x13f>
c0015383:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015386:	8a 00                	mov    al,BYTE PTR [eax]
c0015388:	3c 64                	cmp    al,0x64
c001538a:	74 09                	je     c0015395 <opcodeFault(regs*, void*)+0x13f>
c001538c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538f:	8a 00                	mov    al,BYTE PTR [eax]
c0015391:	3c 65                	cmp    al,0x65
c0015393:	75 16                	jne    c00153ab <opcodeFault(regs*, void*)+0x155>
c0015395:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015399:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001539c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a2:	8d 50 01             	lea    edx,[eax+0x1]
c00153a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ae:	8a 00                	mov    al,BYTE PTR [eax]
c00153b0:	3c 0f                	cmp    al,0xf
c00153b2:	0f 85 ad 00 00 00    	jne    c0015465 <opcodeFault(regs*, void*)+0x20f>
c00153b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bb:	40                   	inc    eax
c00153bc:	8a 00                	mov    al,BYTE PTR [eax]
c00153be:	3c c2                	cmp    al,0xc2
c00153c0:	74 0e                	je     c00153d0 <opcodeFault(regs*, void*)+0x17a>
c00153c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c5:	40                   	inc    eax
c00153c6:	8a 00                	mov    al,BYTE PTR [eax]
c00153c8:	3c c3                	cmp    al,0xc3
c00153ca:	0f 85 95 00 00 00    	jne    c0015465 <opcodeFault(regs*, void*)+0x20f>
c00153d0:	83 ec 0c             	sub    esp,0xc
c00153d3:	68 6f b9 02 c0       	push   0xc002b96f
c00153d8:	e8 64 da ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00153dd:	83 c4 10             	add    esp,0x10
c00153e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e6:	8d 50 01             	lea    edx,[eax+0x1]
c00153e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f5:	8a 00                	mov    al,BYTE PTR [eax]
c00153f7:	8d 50 fe             	lea    edx,[eax-0x2]
c00153fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fd:	88 10                	mov    BYTE PTR [eax],dl
c00153ff:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015402:	50                   	push   eax
c0015403:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015406:	50                   	push   eax
c0015407:	8d 45 c4             	lea    eax,[ebp-0x3c]
c001540a:	50                   	push   eax
c001540b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001540e:	e8 b9 4a 00 00       	call   c0019ecc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015413:	83 c4 10             	add    esp,0x10
c0015416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015419:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001541f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015422:	01 d0                	add    eax,edx
c0015424:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001542d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015430:	48                   	dec    eax
c0015431:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015437:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001543a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001543d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015440:	83 ec 04             	sub    esp,0x4
c0015443:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015446:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015449:	50                   	push   eax
c001544a:	e8 65 ad fe ff       	call   c00001b4 <voodooXADD>
c001544f:	83 c4 10             	add    esp,0x10
c0015452:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015455:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015458:	01 c2                	add    edx,eax
c001545a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015460:	e9 07 04 00 00       	jmp    c001586c <opcodeFault(regs*, void*)+0x616>
c0015465:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015468:	8a 00                	mov    al,BYTE PTR [eax]
c001546a:	3c 0f                	cmp    al,0xf
c001546c:	0f 85 8b 01 00 00    	jne    c00155fd <opcodeFault(regs*, void*)+0x3a7>
c0015472:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015475:	40                   	inc    eax
c0015476:	8a 00                	mov    al,BYTE PTR [eax]
c0015478:	3c c7                	cmp    al,0xc7
c001547a:	0f 86 7d 01 00 00    	jbe    c00155fd <opcodeFault(regs*, void*)+0x3a7>
c0015480:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015483:	40                   	inc    eax
c0015484:	8a 00                	mov    al,BYTE PTR [eax]
c0015486:	3c cf                	cmp    al,0xcf
c0015488:	0f 87 6f 01 00 00    	ja     c00155fd <opcodeFault(regs*, void*)+0x3a7>
c001548e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015491:	40                   	inc    eax
c0015492:	8a 00                	mov    al,BYTE PTR [eax]
c0015494:	83 c0 38             	add    eax,0x38
c0015497:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001549a:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001549e:	75 0b                	jne    c00154ab <opcodeFault(regs*, void*)+0x255>
c00154a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154a6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154a9:	eb 75                	jmp    c0015520 <opcodeFault(regs*, void*)+0x2ca>
c00154ab:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154af:	75 0b                	jne    c00154bc <opcodeFault(regs*, void*)+0x266>
c00154b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ba:	eb 64                	jmp    c0015520 <opcodeFault(regs*, void*)+0x2ca>
c00154bc:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154c0:	75 0b                	jne    c00154cd <opcodeFault(regs*, void*)+0x277>
c00154c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154c8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154cb:	eb 53                	jmp    c0015520 <opcodeFault(regs*, void*)+0x2ca>
c00154cd:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154d1:	75 0b                	jne    c00154de <opcodeFault(regs*, void*)+0x288>
c00154d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154dc:	eb 42                	jmp    c0015520 <opcodeFault(regs*, void*)+0x2ca>
c00154de:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154e2:	75 0b                	jne    c00154ef <opcodeFault(regs*, void*)+0x299>
c00154e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00154ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154ed:	eb 31                	jmp    c0015520 <opcodeFault(regs*, void*)+0x2ca>
c00154ef:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154f3:	75 0b                	jne    c0015500 <opcodeFault(regs*, void*)+0x2aa>
c00154f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00154fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154fe:	eb 20                	jmp    c0015520 <opcodeFault(regs*, void*)+0x2ca>
c0015500:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015504:	75 0b                	jne    c0015511 <opcodeFault(regs*, void*)+0x2bb>
c0015506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015509:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001550c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001550f:	eb 0f                	jmp    c0015520 <opcodeFault(regs*, void*)+0x2ca>
c0015511:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015515:	75 09                	jne    c0015520 <opcodeFault(regs*, void*)+0x2ca>
c0015517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001551a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001551d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015520:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015524:	74 10                	je     c0015536 <opcodeFault(regs*, void*)+0x2e0>
c0015526:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001552d:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015534:	eb 2d                	jmp    c0015563 <opcodeFault(regs*, void*)+0x30d>
c0015536:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015539:	c1 e0 18             	shl    eax,0x18
c001553c:	89 c2                	mov    edx,eax
c001553e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015541:	c1 e0 08             	shl    eax,0x8
c0015544:	25 00 00 ff 00       	and    eax,0xff0000
c0015549:	09 c2                	or     edx,eax
c001554b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001554e:	c1 e8 08             	shr    eax,0x8
c0015551:	25 00 ff 00 00       	and    eax,0xff00
c0015556:	09 c2                	or     edx,eax
c0015558:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001555b:	c1 e8 18             	shr    eax,0x18
c001555e:	09 d0                	or     eax,edx
c0015560:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015563:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015567:	75 0b                	jne    c0015574 <opcodeFault(regs*, void*)+0x31e>
c0015569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001556c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001556f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015572:	eb 75                	jmp    c00155e9 <opcodeFault(regs*, void*)+0x393>
c0015574:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015578:	75 0b                	jne    c0015585 <opcodeFault(regs*, void*)+0x32f>
c001557a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001557d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015580:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015583:	eb 64                	jmp    c00155e9 <opcodeFault(regs*, void*)+0x393>
c0015585:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015589:	75 0b                	jne    c0015596 <opcodeFault(regs*, void*)+0x340>
c001558b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015591:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015594:	eb 53                	jmp    c00155e9 <opcodeFault(regs*, void*)+0x393>
c0015596:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001559a:	75 0b                	jne    c00155a7 <opcodeFault(regs*, void*)+0x351>
c001559c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155a2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155a5:	eb 42                	jmp    c00155e9 <opcodeFault(regs*, void*)+0x393>
c00155a7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155ab:	75 0b                	jne    c00155b8 <opcodeFault(regs*, void*)+0x362>
c00155ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155b3:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155b6:	eb 31                	jmp    c00155e9 <opcodeFault(regs*, void*)+0x393>
c00155b8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155bc:	75 0b                	jne    c00155c9 <opcodeFault(regs*, void*)+0x373>
c00155be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155c7:	eb 20                	jmp    c00155e9 <opcodeFault(regs*, void*)+0x393>
c00155c9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155cd:	75 0b                	jne    c00155da <opcodeFault(regs*, void*)+0x384>
c00155cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155d2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155d5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155d8:	eb 0f                	jmp    c00155e9 <opcodeFault(regs*, void*)+0x393>
c00155da:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155de:	75 09                	jne    c00155e9 <opcodeFault(regs*, void*)+0x393>
c00155e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155e3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155e6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00155e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155ef:	8d 50 02             	lea    edx,[eax+0x2]
c00155f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155f8:	e9 6f 02 00 00       	jmp    c001586c <opcodeFault(regs*, void*)+0x616>
c00155fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015600:	8a 00                	mov    al,BYTE PTR [eax]
c0015602:	3c 0f                	cmp    al,0xf
c0015604:	0f 85 8d 01 00 00    	jne    c0015797 <opcodeFault(regs*, void*)+0x541>
c001560a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001560d:	40                   	inc    eax
c001560e:	8a 00                	mov    al,BYTE PTR [eax]
c0015610:	3c c7                	cmp    al,0xc7
c0015612:	0f 85 7f 01 00 00    	jne    c0015797 <opcodeFault(regs*, void*)+0x541>
c0015618:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001561b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015621:	8d 50 01             	lea    edx,[eax+0x1]
c0015624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015627:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001562a:	8d 45 ba             	lea    eax,[ebp-0x46]
c001562d:	50                   	push   eax
c001562e:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015631:	50                   	push   eax
c0015632:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015635:	50                   	push   eax
c0015636:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015639:	e8 8e 48 00 00       	call   c0019ecc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001563e:	83 c4 10             	add    esp,0x10
c0015641:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015644:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015647:	83 f0 01             	xor    eax,0x1
c001564a:	84 c0                	test   al,al
c001564c:	0f 84 45 01 00 00    	je     c0015797 <opcodeFault(regs*, void*)+0x541>
c0015652:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015655:	3c 01                	cmp    al,0x1
c0015657:	0f 85 3a 01 00 00    	jne    c0015797 <opcodeFault(regs*, void*)+0x541>
c001565d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015660:	83 f0 01             	xor    eax,0x1
c0015663:	84 c0                	test   al,al
c0015665:	0f 84 2c 01 00 00    	je     c0015797 <opcodeFault(regs*, void*)+0x541>
c001566b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015671:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015674:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001567b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001567e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015681:	89 c2                	mov    edx,eax
c0015683:	b8 00 00 00 00       	mov    eax,0x0
c0015688:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001568b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001568e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015691:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015694:	ba 00 00 00 00       	mov    edx,0x0
c0015699:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001569c:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001569f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156a5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156a8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156af:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156b2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156b5:	89 c2                	mov    edx,eax
c00156b7:	b8 00 00 00 00       	mov    eax,0x0
c00156bc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156bf:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156c8:	ba 00 00 00 00       	mov    edx,0x0
c00156cd:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156d0:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156d3:	fa                   	cli    
c00156d4:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c00156d9:	40                   	inc    eax
c00156da:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c00156df:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e7:	89 c1                	mov    ecx,eax
c00156e9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00156ec:	89 cb                	mov    ebx,ecx
c00156ee:	89 d0                	mov    eax,edx
c00156f0:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00156f3:	89 c6                	mov    esi,eax
c00156f5:	89 f0                	mov    eax,esi
c00156f7:	09 d8                	or     eax,ebx
c00156f9:	85 c0                	test   eax,eax
c00156fb:	75 21                	jne    c001571e <opcodeFault(regs*, void*)+0x4c8>
c00156fd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015700:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015703:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015706:	89 01                	mov    DWORD PTR [ecx],eax
c0015708:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001570b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015711:	83 c8 40             	or     eax,0x40
c0015714:	89 c2                	mov    edx,eax
c0015716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015719:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001571c:	eb 3e                	jmp    c001575c <opcodeFault(regs*, void*)+0x506>
c001571e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015721:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015724:	8b 00                	mov    eax,DWORD PTR [eax]
c0015726:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015729:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001572c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001572f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015732:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015735:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015738:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001573b:	89 d0                	mov    eax,edx
c001573d:	31 d2                	xor    edx,edx
c001573f:	89 c3                	mov    ebx,eax
c0015741:	89 d6                	mov    esi,edx
c0015743:	89 da                	mov    edx,ebx
c0015745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015748:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001574b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001574e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015751:	83 e0 bf             	and    eax,0xffffffbf
c0015754:	89 c2                	mov    edx,eax
c0015756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015759:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001575c:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015761:	48                   	dec    eax
c0015762:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0015767:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001576c:	85 c0                	test   eax,eax
c001576e:	75 01                	jne    c0015771 <opcodeFault(regs*, void*)+0x51b>
c0015770:	fb                   	sti    
c0015771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015774:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015777:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001577a:	01 c2                	add    edx,eax
c001577c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015782:	83 ec 0c             	sub    esp,0xc
c0015785:	68 7e b9 02 c0       	push   0xc002b97e
c001578a:	e8 b2 d6 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001578f:	83 c4 10             	add    esp,0x10
c0015792:	e9 d5 00 00 00       	jmp    c001586c <opcodeFault(regs*, void*)+0x616>
c0015797:	83 ec 0c             	sub    esp,0xc
c001579a:	68 91 b9 02 c0       	push   0xc002b991
c001579f:	e8 9d d6 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00157a4:	83 c4 10             	add    esp,0x10
c00157a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157aa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157b3:	c1 e0 04             	shl    eax,0x4
c00157b6:	01 d0                	add    eax,edx
c00157b8:	83 c0 03             	add    eax,0x3
c00157bb:	8a 00                	mov    al,BYTE PTR [eax]
c00157bd:	0f b6 d8             	movzx  ebx,al
c00157c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157cc:	c1 e0 04             	shl    eax,0x4
c00157cf:	01 d0                	add    eax,edx
c00157d1:	83 c0 02             	add    eax,0x2
c00157d4:	8a 00                	mov    al,BYTE PTR [eax]
c00157d6:	0f b6 c8             	movzx  ecx,al
c00157d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157e5:	c1 e0 04             	shl    eax,0x4
c00157e8:	01 d0                	add    eax,edx
c00157ea:	40                   	inc    eax
c00157eb:	8a 00                	mov    al,BYTE PTR [eax]
c00157ed:	0f b6 d0             	movzx  edx,al
c00157f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f3:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00157f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157fc:	c1 e0 04             	shl    eax,0x4
c00157ff:	01 f0                	add    eax,esi
c0015801:	8a 00                	mov    al,BYTE PTR [eax]
c0015803:	0f b6 c0             	movzx  eax,al
c0015806:	83 ec 0c             	sub    esp,0xc
c0015809:	53                   	push   ebx
c001580a:	51                   	push   ecx
c001580b:	52                   	push   edx
c001580c:	50                   	push   eax
c001580d:	68 a4 b9 02 c0       	push   0xc002b9a4
c0015812:	e8 2a d6 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0015817:	83 c4 20             	add    esp,0x20
c001581a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015820:	83 c0 03             	add    eax,0x3
c0015823:	8a 00                	mov    al,BYTE PTR [eax]
c0015825:	0f b6 d8             	movzx  ebx,al
c0015828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001582e:	83 c0 02             	add    eax,0x2
c0015831:	8a 00                	mov    al,BYTE PTR [eax]
c0015833:	0f b6 c8             	movzx  ecx,al
c0015836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015839:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001583c:	40                   	inc    eax
c001583d:	8a 00                	mov    al,BYTE PTR [eax]
c001583f:	0f b6 d0             	movzx  edx,al
c0015842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015845:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015848:	8a 00                	mov    al,BYTE PTR [eax]
c001584a:	0f b6 c0             	movzx  eax,al
c001584d:	83 ec 0c             	sub    esp,0xc
c0015850:	53                   	push   ebx
c0015851:	51                   	push   ecx
c0015852:	52                   	push   edx
c0015853:	50                   	push   eax
c0015854:	68 cc b9 02 c0       	push   0xc002b9cc
c0015859:	e8 e3 d5 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001585e:	83 c4 20             	add    esp,0x20
c0015861:	83 ec 0c             	sub    esp,0xc
c0015864:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015867:	e8 54 f4 ff ff       	call   c0014cc0 <displayDebugInfo(regs*)>
c001586c:	8d 65 f8             	lea    esp,[ebp-0x8]
c001586f:	5b                   	pop    ebx
c0015870:	5e                   	pop    esi
c0015871:	5d                   	pop    ebp
c0015872:	c3                   	ret    

c0015873 <displayProgramFault(char const*)>:
c0015873:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015878:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001587b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015881:	85 c0                	test   eax,eax
c0015883:	74 15                	je     c001589a <displayProgramFault(char const*)+0x27>
c0015885:	83 ec 0c             	sub    esp,0xc
c0015888:	6a 04                	push   0x4
c001588a:	6a 0f                	push   0xf
c001588c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015890:	50                   	push   eax
c0015891:	e8 9c b4 ff ff       	call   c0010d32 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015896:	83 c4 1c             	add    esp,0x1c
c0015899:	c3                   	ret    
c001589a:	c3                   	ret    

c001589b <setupInterruptController()>:
c001589b:	55                   	push   ebp
c001589c:	89 e5                	mov    ebp,esp
c001589e:	53                   	push   ebx
c001589f:	83 ec 24             	sub    esp,0x24
c00158a2:	b8 00 00 00 00       	mov    eax,0x0
c00158a7:	85 c0                	test   eax,eax
c00158a9:	0f 95 c0             	setne  al
c00158ac:	84 c0                	test   al,al
c00158ae:	74 5b                	je     c001590b <setupInterruptController()+0x70>
c00158b0:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158b7:	83 ec 0c             	sub    esp,0xc
c00158ba:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158bd:	e8 e4 9f ff ff       	call   c000f8a6 <malloc>
c00158c2:	83 c4 10             	add    esp,0x10
c00158c5:	89 c3                	mov    ebx,eax
c00158c7:	83 ec 0c             	sub    esp,0xc
c00158ca:	53                   	push   ebx
c00158cb:	e8 84 08 01 00       	call   c0026154 <APIC::APIC()>
c00158d0:	83 c4 10             	add    esp,0x10
c00158d3:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158d6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00158de:	83 c0 08             	add    eax,0x8
c00158e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e3:	6a 00                	push   0x0
c00158e5:	6a 00                	push   0x0
c00158e7:	6a 00                	push   0x0
c00158e9:	52                   	push   edx
c00158ea:	ff d0                	call   eax
c00158ec:	83 c4 10             	add    esp,0x10
c00158ef:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00158f4:	83 ec 08             	sub    esp,0x8
c00158f7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158fa:	50                   	push   eax
c00158fb:	e8 62 e9 ff ff       	call   c0014262 <Device::addChild(Device*)>
c0015900:	83 c4 10             	add    esp,0x10
c0015903:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015906:	e9 89 03 00 00       	jmp    c0015c94 <setupInterruptController()+0x3f9>
c001590b:	a0 00 18 03 c0       	mov    al,ds:0xc0031800
c0015910:	84 c0                	test   al,al
c0015912:	75 24                	jne    c0015938 <setupInterruptController()+0x9d>
c0015914:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0015919:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001591f:	83 e2 fe             	and    edx,0xfffffffe
c0015922:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015928:	83 ec 0c             	sub    esp,0xc
c001592b:	68 f1 b9 02 c0       	push   0xc002b9f1
c0015930:	e8 0c d5 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0015935:	83 c4 10             	add    esp,0x10
c0015938:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001593d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015943:	83 e0 01             	and    eax,0x1
c0015946:	84 c0                	test   al,al
c0015948:	0f 95 c0             	setne  al
c001594b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001594e:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015955:	83 ec 0c             	sub    esp,0xc
c0015958:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001595b:	e8 46 9f ff ff       	call   c000f8a6 <malloc>
c0015960:	83 c4 10             	add    esp,0x10
c0015963:	89 c3                	mov    ebx,eax
c0015965:	83 ec 0c             	sub    esp,0xc
c0015968:	53                   	push   ebx
c0015969:	e8 3e 0d 01 00       	call   c00266ac <PIC::PIC()>
c001596e:	83 c4 10             	add    esp,0x10
c0015971:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015974:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015977:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001597a:	8b 00                	mov    eax,DWORD PTR [eax]
c001597c:	83 c0 08             	add    eax,0x8
c001597f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015981:	6a 00                	push   0x0
c0015983:	6a 00                	push   0x0
c0015985:	6a 00                	push   0x0
c0015987:	52                   	push   edx
c0015988:	ff d0                	call   eax
c001598a:	83 c4 10             	add    esp,0x10
c001598d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015991:	74 73                	je     c0015a06 <setupInterruptController()+0x16b>
c0015993:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015996:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015999:	8b 00                	mov    eax,DWORD PTR [eax]
c001599b:	83 c0 0c             	add    eax,0xc
c001599e:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a0:	6a 00                	push   0x0
c00159a2:	6a 00                	push   0x0
c00159a4:	6a 00                	push   0x0
c00159a6:	52                   	push   edx
c00159a7:	ff d0                	call   eax
c00159a9:	83 c4 10             	add    esp,0x10
c00159ac:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159b0:	74 15                	je     c00159c7 <setupInterruptController()+0x12c>
c00159b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b7:	83 c0 04             	add    eax,0x4
c00159ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bc:	83 ec 0c             	sub    esp,0xc
c00159bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159c2:	ff d0                	call   eax
c00159c4:	83 c4 10             	add    esp,0x10
c00159c7:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159ce:	83 ec 0c             	sub    esp,0xc
c00159d1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159d4:	e8 cd 9e ff ff       	call   c000f8a6 <malloc>
c00159d9:	83 c4 10             	add    esp,0x10
c00159dc:	89 c3                	mov    ebx,eax
c00159de:	83 ec 0c             	sub    esp,0xc
c00159e1:	53                   	push   ebx
c00159e2:	e8 6d 07 01 00       	call   c0026154 <APIC::APIC()>
c00159e7:	83 c4 10             	add    esp,0x10
c00159ea:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159ed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00159f5:	83 c0 08             	add    eax,0x8
c00159f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fa:	6a 00                	push   0x0
c00159fc:	6a 00                	push   0x0
c00159fe:	6a 00                	push   0x0
c0015a00:	52                   	push   edx
c0015a01:	ff d0                	call   eax
c0015a03:	83 c4 10             	add    esp,0x10
c0015a06:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0015a0b:	83 ec 08             	sub    esp,0x8
c0015a0e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a11:	50                   	push   eax
c0015a12:	e8 4b e8 ff ff       	call   c0014262 <Device::addChild(Device*)>
c0015a17:	83 c4 10             	add    esp,0x10
c0015a1a:	c7 05 08 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f008,0x0
c0015a24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a29:	83 c0 24             	add    eax,0x24
c0015a2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a2e:	6a 00                	push   0x0
c0015a30:	68 37 52 01 c0       	push   0xc0015237
c0015a35:	6a 00                	push   0x0
c0015a37:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a3a:	ff d0                	call   eax
c0015a3c:	83 c4 10             	add    esp,0x10
c0015a3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a44:	83 c0 24             	add    eax,0x24
c0015a47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a49:	6a 00                	push   0x0
c0015a4b:	68 37 52 01 c0       	push   0xc0015237
c0015a50:	6a 01                	push   0x1
c0015a52:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a55:	ff d0                	call   eax
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a5f:	83 c0 24             	add    eax,0x24
c0015a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a64:	6a 00                	push   0x0
c0015a66:	68 1d 4b 01 c0       	push   0xc0014b1d
c0015a6b:	6a 02                	push   0x2
c0015a6d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a70:	ff d0                	call   eax
c0015a72:	83 c4 10             	add    esp,0x10
c0015a75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7a:	83 c0 24             	add    eax,0x24
c0015a7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7f:	6a 00                	push   0x0
c0015a81:	68 37 52 01 c0       	push   0xc0015237
c0015a86:	6a 03                	push   0x3
c0015a88:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a8b:	ff d0                	call   eax
c0015a8d:	83 c4 10             	add    esp,0x10
c0015a90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a95:	83 c0 24             	add    eax,0x24
c0015a98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9a:	6a 00                	push   0x0
c0015a9c:	68 37 52 01 c0       	push   0xc0015237
c0015aa1:	6a 04                	push   0x4
c0015aa3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa6:	ff d0                	call   eax
c0015aa8:	83 c4 10             	add    esp,0x10
c0015aab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab0:	83 c0 24             	add    eax,0x24
c0015ab3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab5:	6a 00                	push   0x0
c0015ab7:	68 37 52 01 c0       	push   0xc0015237
c0015abc:	6a 05                	push   0x5
c0015abe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac1:	ff d0                	call   eax
c0015ac3:	83 c4 10             	add    esp,0x10
c0015ac6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015acb:	83 c0 24             	add    eax,0x24
c0015ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad0:	6a 00                	push   0x0
c0015ad2:	68 56 52 01 c0       	push   0xc0015256
c0015ad7:	6a 06                	push   0x6
c0015ad9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015adc:	ff d0                	call   eax
c0015ade:	83 c4 10             	add    esp,0x10
c0015ae1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae6:	83 c0 24             	add    eax,0x24
c0015ae9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aeb:	6a 00                	push   0x0
c0015aed:	68 4f 51 01 c0       	push   0xc001514f
c0015af2:	6a 07                	push   0x7
c0015af4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015af7:	ff d0                	call   eax
c0015af9:	83 c4 10             	add    esp,0x10
c0015afc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b01:	83 c0 24             	add    eax,0x24
c0015b04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b06:	6a 00                	push   0x0
c0015b08:	68 38 49 01 c0       	push   0xc0014938
c0015b0d:	6a 08                	push   0x8
c0015b0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b12:	ff d0                	call   eax
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1c:	83 c0 24             	add    eax,0x24
c0015b1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b21:	6a 00                	push   0x0
c0015b23:	68 37 52 01 c0       	push   0xc0015237
c0015b28:	6a 09                	push   0x9
c0015b2a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b2d:	ff d0                	call   eax
c0015b2f:	83 c4 10             	add    esp,0x10
c0015b32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b37:	83 c0 24             	add    eax,0x24
c0015b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3c:	6a 00                	push   0x0
c0015b3e:	68 37 52 01 c0       	push   0xc0015237
c0015b43:	6a 0a                	push   0xa
c0015b45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b48:	ff d0                	call   eax
c0015b4a:	83 c4 10             	add    esp,0x10
c0015b4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b52:	83 c0 24             	add    eax,0x24
c0015b55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b57:	6a 00                	push   0x0
c0015b59:	68 37 52 01 c0       	push   0xc0015237
c0015b5e:	6a 0b                	push   0xb
c0015b60:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b63:	ff d0                	call   eax
c0015b65:	83 c4 10             	add    esp,0x10
c0015b68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b6d:	83 c0 24             	add    eax,0x24
c0015b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b72:	6a 00                	push   0x0
c0015b74:	68 37 52 01 c0       	push   0xc0015237
c0015b79:	6a 0c                	push   0xc
c0015b7b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b7e:	ff d0                	call   eax
c0015b80:	83 c4 10             	add    esp,0x10
c0015b83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b88:	83 c0 24             	add    eax,0x24
c0015b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8d:	6a 00                	push   0x0
c0015b8f:	68 c2 51 01 c0       	push   0xc00151c2
c0015b94:	6a 0d                	push   0xd
c0015b96:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b99:	ff d0                	call   eax
c0015b9b:	83 c4 10             	add    esp,0x10
c0015b9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba3:	83 c0 24             	add    eax,0x24
c0015ba6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba8:	6a 00                	push   0x0
c0015baa:	68 fb 51 01 c0       	push   0xc00151fb
c0015baf:	6a 0e                	push   0xe
c0015bb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb4:	ff d0                	call   eax
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bbe:	83 c0 24             	add    eax,0x24
c0015bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc3:	6a 00                	push   0x0
c0015bc5:	68 37 52 01 c0       	push   0xc0015237
c0015bca:	6a 0f                	push   0xf
c0015bcc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bcf:	ff d0                	call   eax
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd9:	83 c0 24             	add    eax,0x24
c0015bdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bde:	6a 00                	push   0x0
c0015be0:	68 37 52 01 c0       	push   0xc0015237
c0015be5:	6a 10                	push   0x10
c0015be7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bea:	ff d0                	call   eax
c0015bec:	83 c4 10             	add    esp,0x10
c0015bef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf2:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf4:	83 c0 24             	add    eax,0x24
c0015bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf9:	6a 00                	push   0x0
c0015bfb:	68 37 52 01 c0       	push   0xc0015237
c0015c00:	6a 11                	push   0x11
c0015c02:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c05:	ff d0                	call   eax
c0015c07:	83 c4 10             	add    esp,0x10
c0015c0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0f:	83 c0 24             	add    eax,0x24
c0015c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c14:	6a 00                	push   0x0
c0015c16:	68 37 52 01 c0       	push   0xc0015237
c0015c1b:	6a 12                	push   0x12
c0015c1d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c20:	ff d0                	call   eax
c0015c22:	83 c4 10             	add    esp,0x10
c0015c25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c28:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2a:	83 c0 24             	add    eax,0x24
c0015c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2f:	6a 00                	push   0x0
c0015c31:	68 37 52 01 c0       	push   0xc0015237
c0015c36:	6a 13                	push   0x13
c0015c38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3b:	ff d0                	call   eax
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c45:	83 c0 24             	add    eax,0x24
c0015c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4a:	6a 00                	push   0x0
c0015c4c:	68 37 52 01 c0       	push   0xc0015237
c0015c51:	6a 14                	push   0x14
c0015c53:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c56:	ff d0                	call   eax
c0015c58:	83 c4 10             	add    esp,0x10
c0015c5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c60:	83 c0 24             	add    eax,0x24
c0015c63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c65:	6a 00                	push   0x0
c0015c67:	68 37 52 01 c0       	push   0xc0015237
c0015c6c:	6a 1e                	push   0x1e
c0015c6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c71:	ff d0                	call   eax
c0015c73:	83 c4 10             	add    esp,0x10
c0015c76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c79:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7b:	83 c0 24             	add    eax,0x24
c0015c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c80:	6a 00                	push   0x0
c0015c82:	68 e8 ca 01 c0       	push   0xc001cae8
c0015c87:	6a 60                	push   0x60
c0015c89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8c:	ff d0                	call   eax
c0015c8e:	83 c4 10             	add    esp,0x10
c0015c91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c97:	c9                   	leave  
c0015c98:	c3                   	ret    
c0015c99:	90                   	nop

c0015c9a <InterruptController::convertLegacyIRQNumber(int)>:
c0015c9a:	55                   	push   ebp
c0015c9b:	89 e5                	mov    ebp,esp
c0015c9d:	83 ec 08             	sub    esp,0x8
c0015ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca3:	83 ec 0c             	sub    esp,0xc
c0015ca6:	50                   	push   eax
c0015ca7:	e8 a2 e8 ff ff       	call   c001454e <Device::getName()>
c0015cac:	83 c4 10             	add    esp,0x10
c0015caf:	8a 00                	mov    al,BYTE PTR [eax]
c0015cb1:	3c 41                	cmp    al,0x41
c0015cb3:	0f 94 c0             	sete   al
c0015cb6:	84 c0                	test   al,al
c0015cb8:	74 28                	je     c0015ce2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cba:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cbe:	7f 12                	jg     c0015cd2 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015cc3:	05 c0 e0 02 c0       	add    eax,0xc002e0c0
c0015cc8:	8a 00                	mov    al,BYTE PTR [eax]
c0015cca:	0f b6 c0             	movzx  eax,al
c0015ccd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015cd0:	eb 10                	jmp    c0015ce2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cd2:	83 ec 0c             	sub    esp,0xc
c0015cd5:	68 e0 b6 02 c0       	push   0xc002b6e0
c0015cda:	e8 1c 4b 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0015cdf:	83 c4 10             	add    esp,0x10
c0015ce2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ce5:	c9                   	leave  
c0015ce6:	c3                   	ret    
c0015ce7:	90                   	nop

c0015ce8 <startGUI(void*)>:
c0015ce8:	55                   	push   ebp
c0015ce9:	89 e5                	mov    ebp,esp
c0015ceb:	53                   	push   ebx
c0015cec:	83 ec 04             	sub    esp,0x4
c0015cef:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015cf4:	48                   	dec    eax
c0015cf5:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0015cfa:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015cff:	85 c0                	test   eax,eax
c0015d01:	75 01                	jne    c0015d04 <startGUI(void*)+0x1c>
c0015d03:	fb                   	sti    
c0015d04:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0015d0a:	83 ec 08             	sub    esp,0x8
c0015d0d:	6a 01                	push   0x1
c0015d0f:	68 54 ba 02 c0       	push   0xc002ba54
c0015d14:	e8 a8 7d 00 00       	call   c001dac1 <Thr::loadDLL(char const*, bool)>
c0015d19:	83 c4 10             	add    esp,0x10
c0015d1c:	83 ec 08             	sub    esp,0x8
c0015d1f:	53                   	push   ebx
c0015d20:	50                   	push   eax
c0015d21:	e8 c6 7f 00 00       	call   c001dcec <Thr::executeDLL(unsigned long, void*)>
c0015d26:	83 c4 10             	add    esp,0x10
c0015d29:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0015d2f:	83 ec 08             	sub    esp,0x8
c0015d32:	6a 01                	push   0x1
c0015d34:	68 6e ba 02 c0       	push   0xc002ba6e
c0015d39:	e8 83 7d 00 00       	call   c001dac1 <Thr::loadDLL(char const*, bool)>
c0015d3e:	83 c4 10             	add    esp,0x10
c0015d41:	83 ec 08             	sub    esp,0x8
c0015d44:	53                   	push   ebx
c0015d45:	50                   	push   eax
c0015d46:	e8 a1 7f 00 00       	call   c001dcec <Thr::executeDLL(unsigned long, void*)>
c0015d4b:	83 c4 10             	add    esp,0x10
c0015d4e:	90                   	nop
c0015d4f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d52:	c9                   	leave  
c0015d53:	c3                   	ret    

c0015d54 <startGUIVESA(void*)>:
c0015d54:	55                   	push   ebp
c0015d55:	89 e5                	mov    ebp,esp
c0015d57:	53                   	push   ebx
c0015d58:	83 ec 04             	sub    esp,0x4
c0015d5b:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015d60:	48                   	dec    eax
c0015d61:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0015d66:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015d6b:	85 c0                	test   eax,eax
c0015d6d:	75 01                	jne    c0015d70 <startGUIVESA(void*)+0x1c>
c0015d6f:	fb                   	sti    
c0015d70:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0015d76:	83 ec 08             	sub    esp,0x8
c0015d79:	6a 01                	push   0x1
c0015d7b:	68 88 ba 02 c0       	push   0xc002ba88
c0015d80:	e8 3c 7d 00 00       	call   c001dac1 <Thr::loadDLL(char const*, bool)>
c0015d85:	83 c4 10             	add    esp,0x10
c0015d88:	83 ec 08             	sub    esp,0x8
c0015d8b:	53                   	push   ebx
c0015d8c:	50                   	push   eax
c0015d8d:	e8 5a 7f 00 00       	call   c001dcec <Thr::executeDLL(unsigned long, void*)>
c0015d92:	83 c4 10             	add    esp,0x10
c0015d95:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0015d9b:	83 ec 08             	sub    esp,0x8
c0015d9e:	6a 01                	push   0x1
c0015da0:	68 6e ba 02 c0       	push   0xc002ba6e
c0015da5:	e8 17 7d 00 00       	call   c001dac1 <Thr::loadDLL(char const*, bool)>
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	83 ec 08             	sub    esp,0x8
c0015db0:	53                   	push   ebx
c0015db1:	50                   	push   eax
c0015db2:	e8 35 7f 00 00       	call   c001dcec <Thr::executeDLL(unsigned long, void*)>
c0015db7:	83 c4 10             	add    esp,0x10
c0015dba:	90                   	nop
c0015dbb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dbe:	c9                   	leave  
c0015dbf:	c3                   	ret    

c0015dc0 <sendKeyToTerminal(unsigned char)>:
c0015dc0:	55                   	push   ebp
c0015dc1:	89 e5                	mov    ebp,esp
c0015dc3:	83 ec 28             	sub    esp,0x28
c0015dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015dcc:	a1 44 ef 02 c0       	mov    eax,ds:0xc002ef44
c0015dd1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015dd5:	83 ec 08             	sub    esp,0x8
c0015dd8:	52                   	push   edx
c0015dd9:	50                   	push   eax
c0015dda:	e8 2b b4 ff ff       	call   c001120a <VgaText::receiveKey(unsigned char)>
c0015ddf:	83 c4 10             	add    esp,0x10
c0015de2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015de6:	0f 85 8f 00 00 00    	jne    c0015e7b <sendKeyToTerminal(unsigned char)+0xbb>
c0015dec:	fa                   	cli    
c0015ded:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015df2:	40                   	inc    eax
c0015df3:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0015df8:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c0015dfd:	40                   	inc    eax
c0015dfe:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c0015e03:	a1 20 f0 02 c0       	mov    eax,ds:0xc002f020
c0015e08:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e0b:	c7 05 20 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f020,0x0
c0015e15:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e19:	74 1f                	je     c0015e3a <sendKeyToTerminal(unsigned char)+0x7a>
c0015e1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e1e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e24:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e27:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e2a:	83 ec 0c             	sub    esp,0xc
c0015e2d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e30:	e8 2f 8b 00 00       	call   c001e964 <unblockTask(ThreadControlBlock*)>
c0015e35:	83 c4 10             	add    esp,0x10
c0015e38:	eb db                	jmp    c0015e15 <sendKeyToTerminal(unsigned char)+0x55>
c0015e3a:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c0015e3f:	48                   	dec    eax
c0015e40:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c0015e45:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c0015e4a:	85 c0                	test   eax,eax
c0015e4c:	75 18                	jne    c0015e66 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e4e:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c0015e53:	85 c0                	test   eax,eax
c0015e55:	74 0f                	je     c0015e66 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e57:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c0015e61:	e8 3a 86 00 00       	call   c001e4a0 <schedule()>
c0015e66:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015e6b:	48                   	dec    eax
c0015e6c:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0015e71:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0015e76:	85 c0                	test   eax,eax
c0015e78:	75 01                	jne    c0015e7b <sendKeyToTerminal(unsigned char)+0xbb>
c0015e7a:	fb                   	sti    
c0015e7b:	90                   	nop
c0015e7c:	c9                   	leave  
c0015e7d:	c3                   	ret    

c0015e7e <sendKeyboardToken(KeyboardToken)>:
c0015e7e:	55                   	push   ebp
c0015e7f:	89 e5                	mov    ebp,esp
c0015e81:	83 ec 18             	sub    esp,0x18
c0015e84:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e8a:	0f b7 c0             	movzx  eax,ax
c0015e8d:	83 f2 01             	xor    edx,0x1
c0015e90:	88 90 40 f0 02 c0    	mov    BYTE PTR [eax-0x3ffd0fc0],dl
c0015e96:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c0015e9b:	85 c0                	test   eax,eax
c0015e9d:	74 24                	je     c0015ec3 <sendKeyboardToken(KeyboardToken)+0x45>
c0015e9f:	8b 0d 28 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f028
c0015ea5:	83 ec 04             	sub    esp,0x4
c0015ea8:	68 40 f0 02 c0       	push   0xc002f040
c0015ead:	83 ec 08             	sub    esp,0x8
c0015eb0:	89 e2                	mov    edx,esp
c0015eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015eb5:	89 02                	mov    DWORD PTR [edx],eax
c0015eb7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015eba:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ebe:	ff d1                	call   ecx
c0015ec0:	83 c4 10             	add    esp,0x10
c0015ec3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec6:	66 3d 03 02          	cmp    ax,0x203
c0015eca:	75 07                	jne    c0015ed3 <sendKeyboardToken(KeyboardToken)+0x55>
c0015ecc:	a0 40 f1 02 c0       	mov    al,ds:0xc002f140
c0015ed1:	84 c0                	test   al,al
c0015ed3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ed7:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015eda:	a0 48 f4 02 c0       	mov    al,ds:0xc002f448
c0015edf:	38 c2                	cmp    dl,al
c0015ee1:	74 1c                	je     c0015eff <sendKeyboardToken(KeyboardToken)+0x81>
c0015ee3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ee6:	a2 48 f4 02 c0       	mov    ds:0xc002f448,al
c0015eeb:	a0 48 f4 02 c0       	mov    al,ds:0xc002f448
c0015ef0:	0f b6 c0             	movzx  eax,al
c0015ef3:	83 ec 0c             	sub    esp,0xc
c0015ef6:	50                   	push   eax
c0015ef7:	e8 96 a6 ff ff       	call   c0010592 <setTerminalScrollLock(bool)>
c0015efc:	83 c4 10             	add    esp,0x10
c0015eff:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f02:	84 c0                	test   al,al
c0015f04:	0f 84 ae 00 00 00    	je     c0015fb8 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f0d:	66 3d 10 03          	cmp    ax,0x310
c0015f11:	75 06                	jne    c0015f19 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f13:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f1c:	66 3d 11 03          	cmp    ax,0x311
c0015f20:	75 06                	jne    c0015f28 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f22:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2b:	66 3d 12 03          	cmp    ax,0x312
c0015f2f:	75 06                	jne    c0015f37 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f31:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3a:	66 3d 13 03          	cmp    ax,0x313
c0015f3e:	75 06                	jne    c0015f46 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f40:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f49:	66 3d 14 03          	cmp    ax,0x314
c0015f4d:	75 06                	jne    c0015f55 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f4f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f58:	66 3d 15 03          	cmp    ax,0x315
c0015f5c:	75 06                	jne    c0015f64 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f5e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f67:	66 3d 16 03          	cmp    ax,0x316
c0015f6b:	75 06                	jne    c0015f73 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f6d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f76:	66 3d 17 03          	cmp    ax,0x317
c0015f7a:	75 06                	jne    c0015f82 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f7c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f85:	66 3d 18 03          	cmp    ax,0x318
c0015f89:	75 06                	jne    c0015f91 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f8b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f94:	66 3d 19 03          	cmp    ax,0x319
c0015f98:	75 06                	jne    c0015fa0 <sendKeyboardToken(KeyboardToken)+0x122>
c0015f9a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa3:	66 3d 1a 03          	cmp    ax,0x31a
c0015fa7:	0f 85 c9 00 00 00    	jne    c0016076 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fad:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fb3:	e9 be 00 00 00       	jmp    c0016076 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbb:	66 3d 10 03          	cmp    ax,0x310
c0015fbf:	75 0a                	jne    c0015fcb <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fc1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fc7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fce:	66 3d 11 03          	cmp    ax,0x311
c0015fd2:	75 0a                	jne    c0015fde <sendKeyboardToken(KeyboardToken)+0x160>
c0015fd4:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fda:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe1:	66 3d 12 03          	cmp    ax,0x312
c0015fe5:	75 0a                	jne    c0015ff1 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fe7:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015fed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff4:	66 3d 13 03          	cmp    ax,0x313
c0015ff8:	75 0a                	jne    c0016004 <sendKeyboardToken(KeyboardToken)+0x186>
c0015ffa:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016000:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016007:	66 3d 14 03          	cmp    ax,0x314
c001600b:	75 0a                	jne    c0016017 <sendKeyboardToken(KeyboardToken)+0x199>
c001600d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016013:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016017:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601a:	66 3d 15 03          	cmp    ax,0x315
c001601e:	75 0a                	jne    c001602a <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016020:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016026:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001602a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602d:	66 3d 16 03          	cmp    ax,0x316
c0016031:	75 0a                	jne    c001603d <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016033:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016039:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001603d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016040:	66 3d 17 03          	cmp    ax,0x317
c0016044:	75 0a                	jne    c0016050 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016046:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001604c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016050:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016053:	66 3d 18 03          	cmp    ax,0x318
c0016057:	75 0a                	jne    c0016063 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016059:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001605f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016063:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016066:	66 3d 19 03          	cmp    ax,0x319
c001606a:	75 0a                	jne    c0016076 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001606c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016072:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016079:	66 3d 00 02          	cmp    ax,0x200
c001607d:	75 2c                	jne    c00160ab <sendKeyboardToken(KeyboardToken)+0x22d>
c001607f:	a0 40 f4 02 c0       	mov    al,ds:0xc002f440
c0016084:	83 f0 01             	xor    eax,0x1
c0016087:	84 c0                	test   al,al
c0016089:	74 20                	je     c00160ab <sendKeyboardToken(KeyboardToken)+0x22d>
c001608b:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c0016090:	6a 01                	push   0x1
c0016092:	6a 00                	push   0x0
c0016094:	68 e8 5c 01 c0       	push   0xc0015ce8
c0016099:	50                   	push   eax
c001609a:	e8 bd 81 00 00       	call   c001e25c <Process::createThread(void (*)(void*), void*, int)>
c001609f:	83 c4 10             	add    esp,0x10
c00160a2:	c6 05 40 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f440,0x1
c00160a9:	eb 33                	jmp    c00160de <sendKeyboardToken(KeyboardToken)+0x260>
c00160ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ae:	66 3d 01 02          	cmp    ax,0x201
c00160b2:	75 2a                	jne    c00160de <sendKeyboardToken(KeyboardToken)+0x260>
c00160b4:	a0 40 f4 02 c0       	mov    al,ds:0xc002f440
c00160b9:	83 f0 01             	xor    eax,0x1
c00160bc:	84 c0                	test   al,al
c00160be:	74 1e                	je     c00160de <sendKeyboardToken(KeyboardToken)+0x260>
c00160c0:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00160c5:	6a 01                	push   0x1
c00160c7:	6a 00                	push   0x0
c00160c9:	68 54 5d 01 c0       	push   0xc0015d54
c00160ce:	50                   	push   eax
c00160cf:	e8 88 81 00 00       	call   c001e25c <Process::createThread(void (*)(void*), void*, int)>
c00160d4:	83 c4 10             	add    esp,0x10
c00160d7:	c6 05 40 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f440,0x1
c00160de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e1:	66 3d 1d 03          	cmp    ax,0x31d
c00160e5:	75 06                	jne    c00160ed <sendKeyboardToken(KeyboardToken)+0x26f>
c00160e7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f0:	66 3d 1c 03          	cmp    ax,0x31c
c00160f4:	75 06                	jne    c00160fc <sendKeyboardToken(KeyboardToken)+0x27e>
c00160f6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00160fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ff:	66 3d 1b 03          	cmp    ax,0x31b
c0016103:	75 06                	jne    c001610b <sendKeyboardToken(KeyboardToken)+0x28d>
c0016105:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001610b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610e:	66 3d 1e 03          	cmp    ax,0x31e
c0016112:	75 06                	jne    c001611a <sendKeyboardToken(KeyboardToken)+0x29c>
c0016114:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001611a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611d:	66 3d 1f 03          	cmp    ax,0x31f
c0016121:	75 06                	jne    c0016129 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016123:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612c:	66 3d 1a 03          	cmp    ax,0x31a
c0016130:	75 06                	jne    c0016138 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016132:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016138:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001613c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001613f:	83 f0 01             	xor    eax,0x1
c0016142:	84 c0                	test   al,al
c0016144:	74 77                	je     c00161bd <sendKeyboardToken(KeyboardToken)+0x33f>
c0016146:	a0 41 f1 02 c0       	mov    al,ds:0xc002f141
c001614b:	84 c0                	test   al,al
c001614d:	74 41                	je     c0016190 <sendKeyboardToken(KeyboardToken)+0x312>
c001614f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016153:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016157:	74 2b                	je     c0016184 <sendKeyboardToken(KeyboardToken)+0x306>
c0016159:	8b 15 44 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f444
c001615f:	89 d0                	mov    eax,edx
c0016161:	c1 e0 02             	shl    eax,0x2
c0016164:	01 d0                	add    eax,edx
c0016166:	01 c0                	add    eax,eax
c0016168:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c001616d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016170:	0f b7 c0             	movzx  eax,ax
c0016173:	8d 50 d0             	lea    edx,[eax-0x30]
c0016176:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c001617b:	01 d0                	add    eax,edx
c001617d:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c0016182:	eb 6d                	jmp    c00161f1 <sendKeyboardToken(KeyboardToken)+0x373>
c0016184:	c7 05 44 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f444,0x0
c001618e:	eb 61                	jmp    c00161f1 <sendKeyboardToken(KeyboardToken)+0x373>
c0016190:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c0016195:	85 c0                	test   eax,eax
c0016197:	74 18                	je     c00161b1 <sendKeyboardToken(KeyboardToken)+0x333>
c0016199:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c001619e:	0f b6 c0             	movzx  eax,al
c00161a1:	83 ec 0c             	sub    esp,0xc
c00161a4:	50                   	push   eax
c00161a5:	e8 16 fc ff ff       	call   c0015dc0 <sendKeyToTerminal(unsigned char)>
c00161aa:	83 c4 10             	add    esp,0x10
c00161ad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161b1:	c7 05 44 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f444,0x0
c00161bb:	eb 34                	jmp    c00161f1 <sendKeyboardToken(KeyboardToken)+0x373>
c00161bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c0:	66 3d 01 01          	cmp    ax,0x101
c00161c4:	75 2b                	jne    c00161f1 <sendKeyboardToken(KeyboardToken)+0x373>
c00161c6:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c00161cb:	85 c0                	test   eax,eax
c00161cd:	74 18                	je     c00161e7 <sendKeyboardToken(KeyboardToken)+0x369>
c00161cf:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c00161d4:	0f b6 c0             	movzx  eax,al
c00161d7:	83 ec 0c             	sub    esp,0xc
c00161da:	50                   	push   eax
c00161db:	e8 e0 fb ff ff       	call   c0015dc0 <sendKeyToTerminal(unsigned char)>
c00161e0:	83 c4 10             	add    esp,0x10
c00161e3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161e7:	c7 05 44 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f444,0x0
c00161f1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161f4:	83 f0 01             	xor    eax,0x1
c00161f7:	84 c0                	test   al,al
c00161f9:	74 4c                	je     c0016247 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00161fb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161fe:	83 f0 01             	xor    eax,0x1
c0016201:	84 c0                	test   al,al
c0016203:	74 42                	je     c0016247 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016205:	a0 40 f1 02 c0       	mov    al,ds:0xc002f140
c001620a:	83 f0 01             	xor    eax,0x1
c001620d:	84 c0                	test   al,al
c001620f:	74 36                	je     c0016247 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016214:	66 83 f8 1f          	cmp    ax,0x1f
c0016218:	76 09                	jbe    c0016223 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001621a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621d:	66 83 f8 7e          	cmp    ax,0x7e
c0016221:	76 12                	jbe    c0016235 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016226:	66 83 f8 0a          	cmp    ax,0xa
c001622a:	74 09                	je     c0016235 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001622c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622f:	66 83 f8 08          	cmp    ax,0x8
c0016233:	75 12                	jne    c0016247 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016238:	0f b6 c0             	movzx  eax,al
c001623b:	83 ec 0c             	sub    esp,0xc
c001623e:	50                   	push   eax
c001623f:	e8 7c fb ff ff       	call   c0015dc0 <sendKeyToTerminal(unsigned char)>
c0016244:	83 c4 10             	add    esp,0x10
c0016247:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001624a:	83 f0 01             	xor    eax,0x1
c001624d:	84 c0                	test   al,al
c001624f:	74 4f                	je     c00162a0 <sendKeyboardToken(KeyboardToken)+0x422>
c0016251:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016254:	83 f0 01             	xor    eax,0x1
c0016257:	84 c0                	test   al,al
c0016259:	74 45                	je     c00162a0 <sendKeyboardToken(KeyboardToken)+0x422>
c001625b:	a0 40 f1 02 c0       	mov    al,ds:0xc002f140
c0016260:	84 c0                	test   al,al
c0016262:	74 3c                	je     c00162a0 <sendKeyboardToken(KeyboardToken)+0x422>
c0016264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016267:	66 83 f8 3f          	cmp    ax,0x3f
c001626b:	76 33                	jbe    c00162a0 <sendKeyboardToken(KeyboardToken)+0x422>
c001626d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016270:	66 83 f8 7f          	cmp    ax,0x7f
c0016274:	77 2a                	ja     c00162a0 <sendKeyboardToken(KeyboardToken)+0x422>
c0016276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016279:	88 c2                	mov    dl,al
c001627b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001627e:	66 83 f8 5f          	cmp    ax,0x5f
c0016282:	76 04                	jbe    c0016288 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016284:	b0 20                	mov    al,0x20
c0016286:	eb 02                	jmp    c001628a <sendKeyboardToken(KeyboardToken)+0x40c>
c0016288:	b0 00                	mov    al,0x0
c001628a:	29 c2                	sub    edx,eax
c001628c:	88 d0                	mov    al,dl
c001628e:	83 e8 40             	sub    eax,0x40
c0016291:	0f b6 c0             	movzx  eax,al
c0016294:	83 ec 0c             	sub    esp,0xc
c0016297:	50                   	push   eax
c0016298:	e8 23 fb ff ff       	call   c0015dc0 <sendKeyToTerminal(unsigned char)>
c001629d:	83 c4 10             	add    esp,0x10
c00162a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162a3:	66 3d 00 03          	cmp    ax,0x300
c00162a7:	75 0f                	jne    c00162b8 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162a9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162ac:	83 f0 01             	xor    eax,0x1
c00162af:	84 c0                	test   al,al
c00162b1:	74 05                	je     c00162b8 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162b3:	e8 52 aa ff ff       	call   c0010d0a <doTerminalCycle()>
c00162b8:	90                   	nop
c00162b9:	c9                   	leave  
c00162ba:	c3                   	ret    

c00162bb <clearInternalKeybuffer(VgaText*)>:
c00162bb:	55                   	push   ebp
c00162bc:	89 e5                	mov    ebp,esp
c00162be:	83 ec 08             	sub    esp,0x8
c00162c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c4:	05 98 01 00 00       	add    eax,0x198
c00162c9:	83 ec 0c             	sub    esp,0xc
c00162cc:	50                   	push   eax
c00162cd:	e8 b6 a4 fe ff       	call   c0000788 <strlen>
c00162d2:	83 c4 10             	add    esp,0x10
c00162d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162d8:	81 c2 98 01 00 00    	add    edx,0x198
c00162de:	83 ec 04             	sub    esp,0x4
c00162e1:	50                   	push   eax
c00162e2:	6a 00                	push   0x0
c00162e4:	52                   	push   edx
c00162e5:	e8 82 a4 fe ff       	call   c000076c <memset>
c00162ea:	83 c4 10             	add    esp,0x10
c00162ed:	90                   	nop
c00162ee:	c9                   	leave  
c00162ef:	c3                   	ret    

c00162f0 <readKeyboard(VgaText*, char*, unsigned long)>:
c00162f0:	55                   	push   ebp
c00162f1:	89 e5                	mov    ebp,esp
c00162f3:	83 ec 18             	sub    esp,0x18
c00162f6:	a1 28 f0 02 c0       	mov    eax,ds:0xc002f028
c00162fb:	85 c0                	test   eax,eax
c00162fd:	74 2a                	je     c0016329 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00162ff:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0016305:	8b 0d 28 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f028
c001630b:	83 ec 04             	sub    esp,0x4
c001630e:	68 40 f0 02 c0       	push   0xc002f040
c0016313:	83 ec 08             	sub    esp,0x8
c0016316:	89 e2                	mov    edx,esp
c0016318:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001631b:	89 02                	mov    DWORD PTR [edx],eax
c001631d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016320:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0016324:	ff d1                	call   ecx
c0016326:	83 c4 10             	add    esp,0x10
c0016329:	83 ec 0c             	sub    esp,0xc
c001632c:	68 a3 ba 02 c0       	push   0xc002baa3
c0016331:	e8 0b cb ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0016336:	83 c4 10             	add    esp,0x10
c0016339:	fb                   	sti    
c001633a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016341:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016345:	0f 84 a1 00 00 00    	je     c00163ec <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c001634b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001634e:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016354:	84 c0                	test   al,al
c0016356:	75 28                	jne    c0016380 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0016358:	fa                   	cli    
c0016359:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001635e:	40                   	inc    eax
c001635f:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0016364:	e8 37 81 00 00       	call   c001e4a0 <schedule()>
c0016369:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001636e:	48                   	dec    eax
c001636f:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0016374:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0016379:	85 c0                	test   eax,eax
c001637b:	75 ce                	jne    c001634b <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001637d:	fb                   	sti    
c001637e:	eb cb                	jmp    c001634b <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016380:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016383:	8d 50 01             	lea    edx,[eax+0x1]
c0016386:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016389:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001638c:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0016392:	88 10                	mov    BYTE PTR [eax],dl
c0016394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016397:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001639d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163a3:	05 98 01 00 00       	add    eax,0x198
c00163a8:	83 ec 0c             	sub    esp,0xc
c00163ab:	50                   	push   eax
c00163ac:	e8 d7 a3 fe ff       	call   c0000788 <strlen>
c00163b1:	83 c4 10             	add    esp,0x10
c00163b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163b7:	81 c2 98 01 00 00    	add    edx,0x198
c00163bd:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163c3:	81 c2 98 01 00 00    	add    edx,0x198
c00163c9:	83 ec 04             	sub    esp,0x4
c00163cc:	50                   	push   eax
c00163cd:	51                   	push   ecx
c00163ce:	52                   	push   edx
c00163cf:	e8 d0 a2 fe ff       	call   c00006a4 <memmove>
c00163d4:	83 c4 10             	add    esp,0x10
c00163d7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163da:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163dd:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163e1:	0f 85 5a ff ff ff    	jne    c0016341 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00163e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163ea:	eb 03                	jmp    c00163ef <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c00163ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163ef:	c9                   	leave  
c00163f0:	c3                   	ret    
c00163f1:	90                   	nop

c00163f2 <Keyboard::Keyboard(char const*)>:
c00163f2:	83 ec 0c             	sub    esp,0xc
c00163f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f9:	83 ec 08             	sub    esp,0x8
c00163fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016400:	50                   	push   eax
c0016401:	e8 4c e0 ff ff       	call   c0014452 <Device::Device(char const*)>
c0016406:	83 c4 10             	add    esp,0x10
c0016409:	ba c4 ba 02 c0       	mov    edx,0xc002bac4
c001640e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016412:	89 10                	mov    DWORD PTR [eax],edx
c0016414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016418:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016422:	c6 05 24 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f024,0x1
c0016429:	90                   	nop
c001642a:	83 c4 0c             	add    esp,0xc
c001642d:	c3                   	ret    

c001642e <Keyboard::~Keyboard()>:
c001642e:	83 ec 0c             	sub    esp,0xc
c0016431:	ba c4 ba 02 c0       	mov    edx,0xc002bac4
c0016436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643a:	89 10                	mov    DWORD PTR [eax],edx
c001643c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016440:	83 ec 0c             	sub    esp,0xc
c0016443:	50                   	push   eax
c0016444:	e8 ff dc ff ff       	call   c0014148 <Device::~Device()>
c0016449:	83 c4 10             	add    esp,0x10
c001644c:	90                   	nop
c001644d:	83 c4 0c             	add    esp,0xc
c0016450:	c3                   	ret    
c0016451:	90                   	nop

c0016452 <Keyboard::~Keyboard()>:
c0016452:	83 ec 0c             	sub    esp,0xc
c0016455:	83 ec 0c             	sub    esp,0xc
c0016458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001645c:	e8 cd ff ff ff       	call   c001642e <Keyboard::~Keyboard()>
c0016461:	83 c4 10             	add    esp,0x10
c0016464:	83 ec 08             	sub    esp,0x8
c0016467:	68 5c 01 00 00       	push   0x15c
c001646c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016470:	e8 ec c8 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0016475:	83 c4 10             	add    esp,0x10
c0016478:	83 c4 0c             	add    esp,0xc
c001647b:	c3                   	ret    

c001647c <LogicalDisk::close(int, int, void*)>:
c001647c:	83 c8 ff             	or     eax,0xffffffff
c001647f:	c3                   	ret    

c0016480 <LogicalDisk::~LogicalDisk()>:
c0016480:	83 ec 0c             	sub    esp,0xc
c0016483:	ba 74 bb 02 c0       	mov    edx,0xc002bb74
c0016488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648c:	89 10                	mov    DWORD PTR [eax],edx
c001648e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	50                   	push   eax
c0016496:	e8 ad dc ff ff       	call   c0014148 <Device::~Device()>
c001649b:	83 c4 10             	add    esp,0x10
c001649e:	90                   	nop
c001649f:	83 c4 0c             	add    esp,0xc
c00164a2:	c3                   	ret    
c00164a3:	90                   	nop

c00164a4 <LogicalDisk::~LogicalDisk()>:
c00164a4:	83 ec 0c             	sub    esp,0xc
c00164a7:	83 ec 0c             	sub    esp,0xc
c00164aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ae:	e8 cd ff ff ff       	call   c0016480 <LogicalDisk::~LogicalDisk()>
c00164b3:	83 c4 10             	add    esp,0x10
c00164b6:	83 ec 08             	sub    esp,0x8
c00164b9:	68 74 01 00 00       	push   0x174
c00164be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c2:	e8 9a c8 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c00164c7:	83 c4 10             	add    esp,0x10
c00164ca:	83 c4 0c             	add    esp,0xc
c00164cd:	c3                   	ret    

c00164ce <LogicalDisk::open(int, int, void*)>:
c00164ce:	83 ec 18             	sub    esp,0x18
c00164d1:	68 f0 ba 02 c0       	push   0xc002baf0
c00164d6:	e8 20 43 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00164db:	83 c8 ff             	or     eax,0xffffffff
c00164de:	83 c4 1c             	add    esp,0x1c
c00164e1:	c3                   	ret    

c00164e2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164e2:	53                   	push   ebx
c00164e3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164eb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164ef:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164f5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00164fb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016501:	77 10                	ja     c0016513 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016503:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016509:	89 d3                	mov    ebx,edx
c001650b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016511:	72 05                	jb     c0016518 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016513:	83 c8 ff             	or     eax,0xffffffff
c0016516:	89 c2                	mov    edx,eax
c0016518:	5b                   	pop    ebx
c0016519:	c3                   	ret    

c001651a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001651a:	56                   	push   esi
c001651b:	83 c8 ff             	or     eax,0xffffffff
c001651e:	53                   	push   ebx
c001651f:	89 c2                	mov    edx,eax
c0016521:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016525:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016529:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001652d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016533:	77 27                	ja     c001655c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016535:	89 d8                	mov    eax,ebx
c0016537:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001653d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016543:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016548:	89 c2                	mov    edx,eax
c001654a:	73 10                	jae    c001655c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001654c:	89 c8                	mov    eax,ecx
c001654e:	89 da                	mov    edx,ebx
c0016550:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016556:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001655c:	5b                   	pop    ebx
c001655d:	5e                   	pop    esi
c001655e:	c3                   	ret    
c001655f:	90                   	nop

c0016560 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016560:	83 ec 1c             	sub    esp,0x1c
c0016563:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016567:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001656b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001656f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016573:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016577:	89 04 24             	mov    DWORD PTR [esp],eax
c001657a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001657e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016586:	83 ec 08             	sub    esp,0x8
c0016589:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001658d:	50                   	push   eax
c001658e:	e8 bf de ff ff       	call   c0014452 <Device::Device(char const*)>
c0016593:	83 c4 10             	add    esp,0x10
c0016596:	ba 74 bb 02 c0       	mov    edx,0xc002bb74
c001659b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001659f:	89 10                	mov    DWORD PTR [eax],edx
c00165a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165bb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165c5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165d1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165d7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165dd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165e8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165ee:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165fc:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016606:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016610:	90                   	nop
c0016611:	83 c4 1c             	add    esp,0x1c
c0016614:	c3                   	ret    
c0016615:	90                   	nop

c0016616 <LogicalDisk::assignDriveLetter()>:
c0016616:	55                   	push   ebp
c0016617:	57                   	push   edi
c0016618:	56                   	push   esi
c0016619:	53                   	push   ebx
c001661a:	83 ec 14             	sub    esp,0x14
c001661d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016621:	8b 3d 60 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f460
c0016627:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001662d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016631:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016637:	8b 3d 64 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f464
c001663d:	3c 01                	cmp    al,0x1
c001663f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016643:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016647:	19 c0                	sbb    eax,eax
c0016649:	83 e0 02             	and    eax,0x2
c001664c:	83 c0 41             	add    eax,0x41
c001664f:	0f be e8             	movsx  ebp,al
c0016652:	3c 43                	cmp    al,0x43
c0016654:	75 10                	jne    c0016666 <LogicalDisk::assignDriveLetter()+0x50>
c0016656:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001665d:	75 5d                	jne    c00166bc <LogicalDisk::assignDriveLetter()+0xa6>
c001665f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016664:	75 56                	jne    c00166bc <LogicalDisk::assignDriveLetter()+0xa6>
c0016666:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016669:	ba 01 00 00 00       	mov    edx,0x1
c001666e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016672:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016676:	d3 e2                	shl    edx,cl
c0016678:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001667c:	89 d7                	mov    edi,edx
c001667e:	89 d6                	mov    esi,edx
c0016680:	c1 ff 1f             	sar    edi,0x1f
c0016683:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016687:	21 f9                	and    ecx,edi
c0016689:	09 d1                	or     ecx,edx
c001668b:	75 2f                	jne    c00166bc <LogicalDisk::assignDriveLetter()+0xa6>
c001668d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016691:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016695:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001669b:	09 f2                	or     edx,esi
c001669d:	89 15 60 f4 02 c0    	mov    DWORD PTR ds:0xc002f460,edx
c00166a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166a7:	09 fa                	or     edx,edi
c00166a9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166ad:	89 15 64 f4 02 c0    	mov    DWORD PTR ds:0xc002f464,edx
c00166b3:	89 1c bd 80 f4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0b80],ebx
c00166ba:	eb 08                	jmp    c00166c4 <LogicalDisk::assignDriveLetter()+0xae>
c00166bc:	45                   	inc    ebp
c00166bd:	40                   	inc    eax
c00166be:	3c 5b                	cmp    al,0x5b
c00166c0:	75 90                	jne    c0016652 <LogicalDisk::assignDriveLetter()+0x3c>
c00166c2:	31 c0                	xor    eax,eax
c00166c4:	83 c4 14             	add    esp,0x14
c00166c7:	5b                   	pop    ebx
c00166c8:	5e                   	pop    esi
c00166c9:	5f                   	pop    edi
c00166ca:	5d                   	pop    ebp
c00166cb:	c3                   	ret    

c00166cc <LogicalDisk::mount()>:
c00166cc:	56                   	push   esi
c00166cd:	53                   	push   ebx
c00166ce:	50                   	push   eax
c00166cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166d3:	8b 1d f4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff4
c00166d9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166e3:	85 db                	test   ebx,ebx
c00166e5:	74 50                	je     c0016737 <LogicalDisk::mount()+0x6b>
c00166e7:	50                   	push   eax
c00166e8:	50                   	push   eax
c00166e9:	ff 35 a8 23 03 c0    	push   DWORD PTR ds:0xc00323a8
c00166ef:	68 14 bb 02 c0       	push   0xc002bb14
c00166f4:	e8 48 c7 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00166f9:	83 c4 0c             	add    esp,0xc
c00166fc:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016703:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016705:	83 e8 41             	sub    eax,0x41
c0016708:	50                   	push   eax
c0016709:	56                   	push   esi
c001670a:	53                   	push   ebx
c001670b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001670e:	83 c4 10             	add    esp,0x10
c0016711:	84 c0                	test   al,al
c0016713:	74 08                	je     c001671d <LogicalDisk::mount()+0x51>
c0016715:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001671b:	eb 1c                	jmp    c0016739 <LogicalDisk::mount()+0x6d>
c001671d:	51                   	push   ecx
c001671e:	51                   	push   ecx
c001671f:	ff 35 a8 23 03 c0    	push   DWORD PTR ds:0xc00323a8
c0016725:	68 2f bb 02 c0       	push   0xc002bb2f
c001672a:	e8 12 c7 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001672f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016732:	83 c4 10             	add    esp,0x10
c0016735:	eb ac                	jmp    c00166e3 <LogicalDisk::mount()+0x17>
c0016737:	31 c0                	xor    eax,eax
c0016739:	5a                   	pop    edx
c001673a:	5b                   	pop    ebx
c001673b:	5e                   	pop    esi
c001673c:	c3                   	ret    
c001673d:	90                   	nop

c001673e <LogicalDisk::unmount()>:
c001673e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016742:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001674c:	c3                   	ret    
c001674d:	90                   	nop

c001674e <LogicalDisk::eject()>:
c001674e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016752:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016758:	8b 10                	mov    edx,DWORD PTR [eax]
c001675a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001675e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016761:	90                   	nop

c0016762 <LogicalDisk::unassignDriveLetter()>:
c0016762:	57                   	push   edi
c0016763:	56                   	push   esi
c0016764:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016768:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001676f:	84 c9                	test   cl,cl
c0016771:	75 0f                	jne    c0016782 <LogicalDisk::unassignDriveLetter()+0x20>
c0016773:	c7 44 24 0c 4a bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb4a
c001677b:	5e                   	pop    esi
c001677c:	5f                   	pop    edi
c001677d:	e9 79 40 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c0016782:	83 e9 41             	sub    ecx,0x41
c0016785:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001678c:	b8 01 00 00 00       	mov    eax,0x1
c0016791:	c7 04 8d 80 f4 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0b80],0x0
c001679c:	d3 e0                	shl    eax,cl
c001679e:	89 c7                	mov    edi,eax
c00167a0:	f7 d0                	not    eax
c00167a2:	c1 ff 1f             	sar    edi,0x1f
c00167a5:	21 05 60 f4 02 c0    	and    DWORD PTR ds:0xc002f460,eax
c00167ab:	89 fe                	mov    esi,edi
c00167ad:	f7 d6                	not    esi
c00167af:	21 35 64 f4 02 c0    	and    DWORD PTR ds:0xc002f464,esi
c00167b5:	5e                   	pop    esi
c00167b6:	5f                   	pop    edi
c00167b7:	c3                   	ret    

c00167b8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00167b8:	57                   	push   edi
c00167b9:	56                   	push   esi
c00167ba:	53                   	push   ebx
c00167bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167cb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167d1:	77 41                	ja     c0016814 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167d3:	99                   	cdq    
c00167d4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167da:	01 c8                	add    eax,ecx
c00167dc:	11 da                	adc    edx,ebx
c00167de:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167e4:	19 d7                	sbb    edi,edx
c00167e6:	72 33                	jb     c001681b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167e8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167ee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00167f8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00167fc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016802:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016808:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001680c:	5b                   	pop    ebx
c001680d:	5e                   	pop    esi
c001680e:	5f                   	pop    edi
c001680f:	e9 ec 0a 00 00       	jmp    c0017300 <VCache::read(unsigned long long, int, void*)>
c0016814:	b8 05 00 00 00       	mov    eax,0x5
c0016819:	eb 05                	jmp    c0016820 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001681b:	b8 07 00 00 00       	mov    eax,0x7
c0016820:	5b                   	pop    ebx
c0016821:	5e                   	pop    esi
c0016822:	5f                   	pop    edi
c0016823:	c3                   	ret    

c0016824 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016824:	57                   	push   edi
c0016825:	56                   	push   esi
c0016826:	53                   	push   ebx
c0016827:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001682b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001682f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016833:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016837:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001683d:	77 41                	ja     c0016880 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001683f:	99                   	cdq    
c0016840:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016846:	01 c8                	add    eax,ecx
c0016848:	11 da                	adc    edx,ebx
c001684a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016850:	19 d7                	sbb    edi,edx
c0016852:	72 33                	jb     c0016887 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016854:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001685a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016860:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016864:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016868:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001686e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016874:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016878:	5b                   	pop    ebx
c0016879:	5e                   	pop    esi
c001687a:	5f                   	pop    edi
c001687b:	e9 96 09 00 00       	jmp    c0017216 <VCache::write(unsigned long long, int, void*)>
c0016880:	b8 05 00 00 00       	mov    eax,0x5
c0016885:	eb 05                	jmp    c001688c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016887:	b8 07 00 00 00       	mov    eax,0x7
c001688c:	5b                   	pop    ebx
c001688d:	5e                   	pop    esi
c001688e:	5f                   	pop    edi
c001688f:	c3                   	ret    

c0016890 <Mouse::Mouse(char const*)>:
c0016890:	83 ec 0c             	sub    esp,0xc
c0016893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016897:	83 ec 08             	sub    esp,0x8
c001689a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001689e:	50                   	push   eax
c001689f:	e8 ae db ff ff       	call   c0014452 <Device::Device(char const*)>
c00168a4:	83 c4 10             	add    esp,0x10
c00168a7:	ba a0 bb 02 c0       	mov    edx,0xc002bba0
c00168ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b0:	89 10                	mov    DWORD PTR [eax],edx
c00168b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168c0:	90                   	nop
c00168c1:	83 c4 0c             	add    esp,0xc
c00168c4:	c3                   	ret    
c00168c5:	90                   	nop

c00168c6 <Mouse::~Mouse()>:
c00168c6:	83 ec 0c             	sub    esp,0xc
c00168c9:	ba a0 bb 02 c0       	mov    edx,0xc002bba0
c00168ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d2:	89 10                	mov    DWORD PTR [eax],edx
c00168d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d8:	83 ec 0c             	sub    esp,0xc
c00168db:	50                   	push   eax
c00168dc:	e8 67 d8 ff ff       	call   c0014148 <Device::~Device()>
c00168e1:	83 c4 10             	add    esp,0x10
c00168e4:	90                   	nop
c00168e5:	83 c4 0c             	add    esp,0xc
c00168e8:	c3                   	ret    
c00168e9:	90                   	nop

c00168ea <Mouse::~Mouse()>:
c00168ea:	83 ec 0c             	sub    esp,0xc
c00168ed:	83 ec 0c             	sub    esp,0xc
c00168f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168f4:	e8 cd ff ff ff       	call   c00168c6 <Mouse::~Mouse()>
c00168f9:	83 c4 10             	add    esp,0x10
c00168fc:	83 ec 08             	sub    esp,0x8
c00168ff:	68 58 01 00 00       	push   0x158
c0016904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016908:	e8 54 c4 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c001690d:	83 c4 10             	add    esp,0x10
c0016910:	83 c4 0c             	add    esp,0xc
c0016913:	c3                   	ret    

c0016914 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016914:	55                   	push   ebp
c0016915:	57                   	push   edi
c0016916:	56                   	push   esi
c0016917:	53                   	push   ebx
c0016918:	81 ec 20 01 00 00    	sub    esp,0x120
c001691e:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016925:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001692c:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016933:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001693a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001693e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016942:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016946:	56                   	push   esi
c0016947:	68 c4 bb 02 c0       	push   0xc002bbc4
c001694c:	e8 f0 c4 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0016951:	58                   	pop    eax
c0016952:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016959:	e8 f0 db ff ff       	call   c001454e <Device::getName()>
c001695e:	5a                   	pop    edx
c001695f:	59                   	pop    ecx
c0016960:	50                   	push   eax
c0016961:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016965:	53                   	push   ebx
c0016966:	e8 bd 9e fe ff       	call   c0000828 <strcpy>
c001696b:	5d                   	pop    ebp
c001696c:	58                   	pop    eax
c001696d:	68 f5 bb 02 c0       	push   0xc002bbf5
c0016972:	53                   	push   ebx
c0016973:	e8 f0 9f fe ff       	call   c0000968 <strcat>
c0016978:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001697f:	e8 22 8f ff ff       	call   c000f8a6 <malloc>
c0016984:	83 c4 0c             	add    esp,0xc
c0016987:	89 c5                	mov    ebp,eax
c0016989:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001698d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016991:	57                   	push   edi
c0016992:	56                   	push   esi
c0016993:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001699a:	53                   	push   ebx
c001699b:	50                   	push   eax
c001699c:	e8 bf fb ff ff       	call   c0016560 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169a1:	83 c4 14             	add    esp,0x14
c00169a4:	55                   	push   ebp
c00169a5:	e8 6c fc ff ff       	call   c0016616 <LogicalDisk::assignDriveLetter()>
c00169aa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169ad:	0f be d8             	movsx  ebx,al
c00169b0:	e8 17 fd ff ff       	call   c00166cc <LogicalDisk::mount()>
c00169b5:	58                   	pop    eax
c00169b6:	5a                   	pop    edx
c00169b7:	55                   	push   ebp
c00169b8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169bf:	e8 9e d8 ff ff       	call   c0014262 <Device::addChild(Device*)>
c00169c4:	59                   	pop    ecx
c00169c5:	5e                   	pop    esi
c00169c6:	53                   	push   ebx
c00169c7:	68 00 bc 02 c0       	push   0xc002bc00
c00169cc:	e8 70 c4 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00169d1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169d7:	5b                   	pop    ebx
c00169d8:	5e                   	pop    esi
c00169d9:	5f                   	pop    edi
c00169da:	5d                   	pop    ebp
c00169db:	c3                   	ret    

c00169dc <createPartitionsForDisk(PhysicalDisk*)>:
c00169dc:	55                   	push   ebp
c00169dd:	57                   	push   edi
c00169de:	56                   	push   esi
c00169df:	53                   	push   ebx
c00169e0:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169e6:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169ed:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169f3:	3d 00 02 00 00       	cmp    eax,0x200
c00169f8:	74 27                	je     c0016a21 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00169fa:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a00:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a06:	83 ec 10             	sub    esp,0x10
c0016a09:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a0d:	99                   	cdq    
c0016a0e:	c1 e6 0a             	shl    esi,0xa
c0016a11:	52                   	push   edx
c0016a12:	89 fd                	mov    ebp,edi
c0016a14:	50                   	push   eax
c0016a15:	55                   	push   ebp
c0016a16:	56                   	push   esi
c0016a17:	e8 c8 07 01 00       	call   c00271e4 <__udivdi3>
c0016a1c:	e9 b1 00 00 00       	jmp    c0016ad2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a21:	83 ec 0c             	sub    esp,0xc
c0016a24:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a26:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a2a:	56                   	push   esi
c0016a2b:	6a 01                	push   0x1
c0016a2d:	6a 00                	push   0x0
c0016a2f:	6a 00                	push   0x0
c0016a31:	53                   	push   ebx
c0016a32:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a35:	83 c4 20             	add    esp,0x20
c0016a38:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a40:	75 0a                	jne    c0016a4c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a42:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a4a:	74 2c                	je     c0016a78 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a4c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a52:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a58:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a5e:	83 ec 10             	sub    esp,0x10
c0016a61:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a65:	89 f7                	mov    edi,esi
c0016a67:	c1 e0 0a             	shl    eax,0xa
c0016a6a:	c1 ff 1f             	sar    edi,0x1f
c0016a6d:	57                   	push   edi
c0016a6e:	56                   	push   esi
c0016a6f:	52                   	push   edx
c0016a70:	50                   	push   eax
c0016a71:	e8 6e 07 01 00       	call   c00271e4 <__udivdi3>
c0016a76:	eb 5a                	jmp    c0016ad2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a78:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a7f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a86:	83 e1 7f             	and    ecx,0x7f
c0016a89:	83 e0 7f             	and    eax,0x7f
c0016a8c:	01 c1                	add    ecx,eax
c0016a8e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a95:	83 e0 7f             	and    eax,0x7f
c0016a98:	01 c1                	add    ecx,eax
c0016a9a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016aa1:	83 e0 7f             	and    eax,0x7f
c0016aa4:	00 c1                	add    cl,al
c0016aa6:	74 41                	je     c0016ae9 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016aa8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016aae:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ab4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016aba:	83 ec 10             	sub    esp,0x10
c0016abd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ac1:	89 f7                	mov    edi,esi
c0016ac3:	c1 e0 0a             	shl    eax,0xa
c0016ac6:	c1 ff 1f             	sar    edi,0x1f
c0016ac9:	57                   	push   edi
c0016aca:	56                   	push   esi
c0016acb:	52                   	push   edx
c0016acc:	50                   	push   eax
c0016acd:	e8 12 07 01 00       	call   c00271e4 <__udivdi3>
c0016ad2:	83 c4 14             	add    esp,0x14
c0016ad5:	52                   	push   edx
c0016ad6:	50                   	push   eax
c0016ad7:	6a 00                	push   0x0
c0016ad9:	6a 00                	push   0x0
c0016adb:	53                   	push   ebx
c0016adc:	e8 33 fe ff ff       	call   c0016914 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ae1:	83 c4 20             	add    esp,0x20
c0016ae4:	e9 79 01 00 00       	jmp    c0016c62 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016ae9:	89 f0                	mov    eax,esi
c0016aeb:	31 f6                	xor    esi,esi
c0016aed:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016af4:	75 02                	jne    c0016af8 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016af6:	89 f1                	mov    ecx,esi
c0016af8:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016aff:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b06:	c1 e2 08             	shl    edx,0x8
c0016b09:	c1 e7 10             	shl    edi,0x10
c0016b0c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b14:	09 fa                	or     edx,edi
c0016b16:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b1e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b25:	83 c0 10             	add    eax,0x10
c0016b28:	09 fa                	or     edx,edi
c0016b2a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b31:	c1 e7 18             	shl    edi,0x18
c0016b34:	09 fa                	or     edx,edi
c0016b36:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b3d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b41:	c1 e7 10             	shl    edi,0x10
c0016b44:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b4b:	c1 e2 08             	shl    edx,0x8
c0016b4e:	09 fa                	or     edx,edi
c0016b50:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b57:	09 fa                	or     edx,edi
c0016b59:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b60:	c1 e7 18             	shl    edi,0x18
c0016b63:	09 fa                	or     edx,edi
c0016b65:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b69:	46                   	inc    esi
c0016b6a:	83 fe 04             	cmp    esi,0x4
c0016b6d:	0f 85 7a ff ff ff    	jne    c0016aed <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b77:	83 f0 01             	xor    eax,0x1
c0016b7a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b7e:	75 57                	jne    c0016bd7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b84:	83 f0 01             	xor    eax,0x1
c0016b87:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b8b:	75 4a                	jne    c0016bd7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b8d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b91:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016b99:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ba1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ba7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bad:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bb3:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bb7:	89 f7                	mov    edi,esi
c0016bb9:	c1 e0 0a             	shl    eax,0xa
c0016bbc:	c1 ff 1f             	sar    edi,0x1f
c0016bbf:	57                   	push   edi
c0016bc0:	56                   	push   esi
c0016bc1:	52                   	push   edx
c0016bc2:	50                   	push   eax
c0016bc3:	e8 1c 06 01 00       	call   c00271e4 <__udivdi3>
c0016bc8:	83 c4 10             	add    esp,0x10
c0016bcb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bcf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bd3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bd7:	84 c9                	test   cl,cl
c0016bd9:	74 53                	je     c0016c2e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bdb:	0f b6 c9             	movzx  ecx,cl
c0016bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016be6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016bee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bf2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bf6:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016bfa:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016bfe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c0a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c0e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c12:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c16:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c1a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c26:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c2a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c2e:	31 ed                	xor    ebp,ebp
c0016c30:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c34:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c38:	89 f8                	mov    eax,edi
c0016c3a:	09 f0                	or     eax,esi
c0016c3c:	74 1e                	je     c0016c5c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c3e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c42:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c46:	89 d1                	mov    ecx,edx
c0016c48:	09 c1                	or     ecx,eax
c0016c4a:	74 10                	je     c0016c5c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	57                   	push   edi
c0016c50:	56                   	push   esi
c0016c51:	52                   	push   edx
c0016c52:	50                   	push   eax
c0016c53:	53                   	push   ebx
c0016c54:	e8 bb fc ff ff       	call   c0016914 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c59:	83 c4 20             	add    esp,0x20
c0016c5c:	45                   	inc    ebp
c0016c5d:	83 fd 04             	cmp    ebp,0x4
c0016c60:	75 ce                	jne    c0016c30 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c62:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c68:	5b                   	pop    ebx
c0016c69:	5e                   	pop    esi
c0016c6a:	5f                   	pop    edi
c0016c6b:	5d                   	pop    ebp
c0016c6c:	c3                   	ret    
c0016c6d:	90                   	nop

c0016c6e <Serial::Serial(char const*)>:
c0016c6e:	83 ec 0c             	sub    esp,0xc
c0016c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c75:	83 ec 08             	sub    esp,0x8
c0016c78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c7c:	50                   	push   eax
c0016c7d:	e8 d0 d7 ff ff       	call   c0014452 <Device::Device(char const*)>
c0016c82:	83 c4 10             	add    esp,0x10
c0016c85:	ba 2c bc 02 c0       	mov    edx,0xc002bc2c
c0016c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8e:	89 10                	mov    DWORD PTR [eax],edx
c0016c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c94:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016c9e:	90                   	nop
c0016c9f:	83 c4 0c             	add    esp,0xc
c0016ca2:	c3                   	ret    
c0016ca3:	90                   	nop

c0016ca4 <Serial::~Serial()>:
c0016ca4:	83 ec 0c             	sub    esp,0xc
c0016ca7:	ba 2c bc 02 c0       	mov    edx,0xc002bc2c
c0016cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb0:	89 10                	mov    DWORD PTR [eax],edx
c0016cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb6:	83 ec 0c             	sub    esp,0xc
c0016cb9:	50                   	push   eax
c0016cba:	e8 89 d4 ff ff       	call   c0014148 <Device::~Device()>
c0016cbf:	83 c4 10             	add    esp,0x10
c0016cc2:	90                   	nop
c0016cc3:	83 c4 0c             	add    esp,0xc
c0016cc6:	c3                   	ret    
c0016cc7:	90                   	nop

c0016cc8 <Serial::~Serial()>:
c0016cc8:	83 ec 0c             	sub    esp,0xc
c0016ccb:	83 ec 0c             	sub    esp,0xc
c0016cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cd2:	e8 cd ff ff ff       	call   c0016ca4 <Serial::~Serial()>
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	83 ec 08             	sub    esp,0x8
c0016cdd:	68 58 01 00 00       	push   0x158
c0016ce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ce6:	e8 76 c0 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0016ceb:	83 c4 10             	add    esp,0x10
c0016cee:	83 c4 0c             	add    esp,0xc
c0016cf1:	c3                   	ret    

c0016cf2 <Timer::Timer(char const*)>:
c0016cf2:	83 ec 0c             	sub    esp,0xc
c0016cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf9:	83 ec 08             	sub    esp,0x8
c0016cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d00:	50                   	push   eax
c0016d01:	e8 4c d7 ff ff       	call   c0014452 <Device::Device(char const*)>
c0016d06:	83 c4 10             	add    esp,0x10
c0016d09:	ba 70 bc 02 c0       	mov    edx,0xc002bc70
c0016d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d12:	89 10                	mov    DWORD PTR [eax],edx
c0016d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d18:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d22:	90                   	nop
c0016d23:	83 c4 0c             	add    esp,0xc
c0016d26:	c3                   	ret    
c0016d27:	90                   	nop

c0016d28 <Timer::~Timer()>:
c0016d28:	83 ec 0c             	sub    esp,0xc
c0016d2b:	ba 70 bc 02 c0       	mov    edx,0xc002bc70
c0016d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d34:	89 10                	mov    DWORD PTR [eax],edx
c0016d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	50                   	push   eax
c0016d3e:	e8 05 d4 ff ff       	call   c0014148 <Device::~Device()>
c0016d43:	83 c4 10             	add    esp,0x10
c0016d46:	90                   	nop
c0016d47:	83 c4 0c             	add    esp,0xc
c0016d4a:	c3                   	ret    
c0016d4b:	90                   	nop

c0016d4c <Timer::~Timer()>:
c0016d4c:	83 ec 0c             	sub    esp,0xc
c0016d4f:	83 ec 0c             	sub    esp,0xc
c0016d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d56:	e8 cd ff ff ff       	call   c0016d28 <Timer::~Timer()>
c0016d5b:	83 c4 10             	add    esp,0x10
c0016d5e:	83 ec 08             	sub    esp,0x8
c0016d61:	68 5c 01 00 00       	push   0x15c
c0016d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d6a:	e8 f2 bf ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0016d6f:	83 c4 10             	add    esp,0x10
c0016d72:	83 c4 0c             	add    esp,0xc
c0016d75:	c3                   	ret    

c0016d76 <Timer::read()>:
c0016d76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d7a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d80:	c3                   	ret    

c0016d81 <timerHandler(unsigned long long)>:
c0016d81:	55                   	push   ebp
c0016d82:	57                   	push   edi
c0016d83:	56                   	push   esi
c0016d84:	53                   	push   ebx
c0016d85:	83 ec 0c             	sub    esp,0xc
c0016d88:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d8c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d90:	01 35 f0 f4 02 c0    	add    DWORD PTR ds:0xc002f4f0,esi
c0016d96:	11 3d f4 f4 02 c0    	adc    DWORD PTR ds:0xc002f4f4,edi
c0016d9c:	80 3d 6d ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee6d,0x0
c0016da3:	0f 84 42 01 00 00    	je     c0016eeb <timerHandler(unsigned long long)+0x16a>
c0016da9:	fa                   	cli    
c0016daa:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c0016db0:	83 ec 0c             	sub    esp,0xc
c0016db3:	ff 05 a4 23 03 c0    	inc    DWORD PTR ds:0xc00323a4
c0016db9:	68 b8 23 03 c0       	push   0xc00323b8
c0016dbe:	e8 a7 24 01 00       	call   c002926a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dc3:	83 c4 10             	add    esp,0x10
c0016dc6:	84 c0                	test   al,al
c0016dc8:	0f 85 a2 00 00 00    	jne    c0016e70 <timerHandler(unsigned long long)+0xef>
c0016dce:	83 ec 0c             	sub    esp,0xc
c0016dd1:	68 b8 23 03 c0       	push   0xc00323b8
c0016dd6:	e8 ab 24 01 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ddb:	83 c4 10             	add    esp,0x10
c0016dde:	89 c3                	mov    ebx,eax
c0016de0:	83 ec 0c             	sub    esp,0xc
c0016de3:	68 b8 23 03 c0       	push   0xc00323b8
c0016de8:	e8 99 24 01 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ded:	c7 04 24 b8 23 03 c0 	mov    DWORD PTR [esp],0xc00323b8
c0016df4:	89 c5                	mov    ebp,eax
c0016df6:	e8 93 24 01 00       	call   c002928e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016dfb:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016dfe:	83 c4 10             	add    esp,0x10
c0016e01:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e04:	39 15 f0 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4f0,edx
c0016e0a:	a1 f4 f4 02 c0       	mov    eax,ds:0xc002f4f4
c0016e0f:	19 c8                	sbb    eax,ecx
c0016e11:	72 21                	jb     c0016e34 <timerHandler(unsigned long long)+0xb3>
c0016e13:	83 ec 0c             	sub    esp,0xc
c0016e16:	55                   	push   ebp
c0016e17:	e8 48 7b 00 00       	call   c001e964 <unblockTask(ThreadControlBlock*)>
c0016e1c:	83 c4 10             	add    esp,0x10
c0016e1f:	39 eb                	cmp    ebx,ebp
c0016e21:	75 21                	jne    c0016e44 <timerHandler(unsigned long long)+0xc3>
c0016e23:	83 ec 0c             	sub    esp,0xc
c0016e26:	68 b8 23 03 c0       	push   0xc00323b8
c0016e2b:	e8 56 24 01 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e30:	89 c3                	mov    ebx,eax
c0016e32:	eb 0d                	jmp    c0016e41 <timerHandler(unsigned long long)+0xc0>
c0016e34:	50                   	push   eax
c0016e35:	50                   	push   eax
c0016e36:	55                   	push   ebp
c0016e37:	68 b8 23 03 c0       	push   0xc00323b8
c0016e3c:	e8 fb 24 01 00       	call   c002933c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e41:	83 c4 10             	add    esp,0x10
c0016e44:	83 ec 0c             	sub    esp,0xc
c0016e47:	68 b8 23 03 c0       	push   0xc00323b8
c0016e4c:	e8 19 24 01 00       	call   c002926a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e51:	83 c4 10             	add    esp,0x10
c0016e54:	84 c0                	test   al,al
c0016e56:	75 18                	jne    c0016e70 <timerHandler(unsigned long long)+0xef>
c0016e58:	83 ec 0c             	sub    esp,0xc
c0016e5b:	68 b8 23 03 c0       	push   0xc00323b8
c0016e60:	e8 21 24 01 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e65:	83 c4 10             	add    esp,0x10
c0016e68:	39 d8                	cmp    eax,ebx
c0016e6a:	0f 85 70 ff ff ff    	jne    c0016de0 <timerHandler(unsigned long long)+0x5f>
c0016e70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e75:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016e79:	74 3d                	je     c0016eb8 <timerHandler(unsigned long long)+0x137>
c0016e7b:	80 3d 6c ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee6c,0x0
c0016e82:	74 34                	je     c0016eb8 <timerHandler(unsigned long long)+0x137>
c0016e84:	fa                   	cli    
c0016e85:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c0016e8b:	31 d2                	xor    edx,edx
c0016e8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e92:	89 f9                	mov    ecx,edi
c0016e94:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016e9f:	39 c6                	cmp    esi,eax
c0016ea1:	19 d1                	sbb    ecx,edx
c0016ea3:	72 05                	jb     c0016eaa <timerHandler(unsigned long long)+0x129>
c0016ea5:	e8 f6 75 00 00       	call   c001e4a0 <schedule()>
c0016eaa:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0016eaf:	48                   	dec    eax
c0016eb0:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0016eb5:	75 01                	jne    c0016eb8 <timerHandler(unsigned long long)+0x137>
c0016eb7:	fb                   	sti    
c0016eb8:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c0016ebd:	48                   	dec    eax
c0016ebe:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c0016ec3:	75 18                	jne    c0016edd <timerHandler(unsigned long long)+0x15c>
c0016ec5:	83 3d a0 23 03 c0 00 	cmp    DWORD PTR ds:0xc00323a0,0x0
c0016ecc:	74 0f                	je     c0016edd <timerHandler(unsigned long long)+0x15c>
c0016ece:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c0016ed8:	e8 c3 75 00 00       	call   c001e4a0 <schedule()>
c0016edd:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0016ee2:	48                   	dec    eax
c0016ee3:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0016ee8:	75 01                	jne    c0016eeb <timerHandler(unsigned long long)+0x16a>
c0016eea:	fb                   	sti    
c0016eeb:	83 c4 0c             	add    esp,0xc
c0016eee:	5b                   	pop    ebx
c0016eef:	5e                   	pop    esi
c0016ef0:	5f                   	pop    edi
c0016ef1:	5d                   	pop    ebp
c0016ef2:	c3                   	ret    

c0016ef3 <setupTimer(int)>:
c0016ef3:	57                   	push   edi
c0016ef4:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0016ef9:	56                   	push   esi
c0016efa:	53                   	push   ebx
c0016efb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016eff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f05:	83 ec 0c             	sub    esp,0xc
c0016f08:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f0e:	e8 3b d6 ff ff       	call   c001454e <Device::getName()>
c0016f13:	83 c4 10             	add    esp,0x10
c0016f16:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f19:	0f 85 8d 00 00 00    	jne    c0016fac <setupTimer(int)+0xb9>
c0016f1f:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0016f24:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f2b:	74 7f                	je     c0016fac <setupTimer(int)+0xb9>
c0016f2d:	83 ec 0c             	sub    esp,0xc
c0016f30:	68 5c 01 00 00       	push   0x15c
c0016f35:	e8 6c 89 ff ff       	call   c000f8a6 <malloc>
c0016f3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f3d:	89 c3                	mov    ebx,eax
c0016f3f:	e8 72 fe 00 00       	call   c0026db6 <PIT::PIT()>
c0016f44:	59                   	pop    ecx
c0016f45:	5f                   	pop    edi
c0016f46:	53                   	push   ebx
c0016f47:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c0016f4d:	e8 10 d3 ff ff       	call   c0014262 <Device::addChild(Device*)>
c0016f52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f54:	6a 00                	push   0x0
c0016f56:	6a 00                	push   0x0
c0016f58:	56                   	push   esi
c0016f59:	53                   	push   ebx
c0016f5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f5d:	83 c4 14             	add    esp,0x14
c0016f60:	68 60 01 00 00       	push   0x160
c0016f65:	e8 3c 89 ff ff       	call   c000f8a6 <malloc>
c0016f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f6d:	89 c7                	mov    edi,eax
c0016f6f:	e8 f2 fc 00 00       	call   c0026c66 <APICTimer::APICTimer()>
c0016f74:	6a 00                	push   0x0
c0016f76:	6a 00                	push   0x0
c0016f78:	56                   	push   esi
c0016f79:	57                   	push   edi
c0016f7a:	e8 e9 fb 00 00       	call   c0026b68 <APICTimer::open(int, int, void*)>
c0016f7f:	83 c4 20             	add    esp,0x20
c0016f82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f84:	6a 00                	push   0x0
c0016f86:	6a 00                	push   0x0
c0016f88:	6a 00                	push   0x0
c0016f8a:	53                   	push   ebx
c0016f8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f8e:	58                   	pop    eax
c0016f8f:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0016f94:	5a                   	pop    edx
c0016f95:	57                   	push   edi
c0016f96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f9c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fa2:	e8 bb d2 ff ff       	call   c0014262 <Device::addChild(Device*)>
c0016fa7:	83 c4 10             	add    esp,0x10
c0016faa:	eb 33                	jmp    c0016fdf <setupTimer(int)+0xec>
c0016fac:	83 ec 0c             	sub    esp,0xc
c0016faf:	68 5c 01 00 00       	push   0x15c
c0016fb4:	e8 ed 88 ff ff       	call   c000f8a6 <malloc>
c0016fb9:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fbc:	89 c3                	mov    ebx,eax
c0016fbe:	e8 f3 fd 00 00       	call   c0026db6 <PIT::PIT()>
c0016fc3:	58                   	pop    eax
c0016fc4:	5a                   	pop    edx
c0016fc5:	53                   	push   ebx
c0016fc6:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c0016fcc:	e8 91 d2 ff ff       	call   c0014262 <Device::addChild(Device*)>
c0016fd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fd3:	6a 00                	push   0x0
c0016fd5:	6a 00                	push   0x0
c0016fd7:	56                   	push   esi
c0016fd8:	53                   	push   ebx
c0016fd9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fdc:	83 c4 20             	add    esp,0x20
c0016fdf:	89 d8                	mov    eax,ebx
c0016fe1:	5b                   	pop    ebx
c0016fe2:	5e                   	pop    esi
c0016fe3:	5f                   	pop    edi
c0016fe4:	c3                   	ret    
c0016fe5:	90                   	nop

c0016fe6 <VCache::VCache(PhysicalDisk*)>:
c0016fe6:	53                   	push   ebx
c0016fe7:	83 ec 18             	sub    esp,0x18
c0016fea:	ba a0 bc 02 c0       	mov    edx,0xc002bca0
c0016fef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff3:	89 10                	mov    DWORD PTR [eax],edx
c0016ff5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017004:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001700b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017016:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001701d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017021:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017028:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001702f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017033:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001703a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017046:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001704d:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017054:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017058:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001705c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017060:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017068:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001706c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017070:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017077:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001707f:	83 ec 0c             	sub    esp,0xc
c0017082:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017086:	e8 1b 88 ff ff       	call   c000f8a6 <malloc>
c001708b:	83 c4 10             	add    esp,0x10
c001708e:	89 c3                	mov    ebx,eax
c0017090:	83 ec 0c             	sub    esp,0xc
c0017093:	53                   	push   ebx
c0017094:	e8 b1 71 00 00       	call   c001e24a <Mutex::Mutex()>
c0017099:	83 c4 10             	add    esp,0x10
c001709c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b2:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170bd:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170ce:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170d4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170da:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170de:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170e1:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e8:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170f0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170f6:	05 00 01 00 00       	add    eax,0x100
c00170fb:	c1 e0 04             	shl    eax,0x4
c00170fe:	83 ec 0c             	sub    esp,0xc
c0017101:	50                   	push   eax
c0017102:	e8 9f 87 ff ff       	call   c000f8a6 <malloc>
c0017107:	83 c4 10             	add    esp,0x10
c001710a:	89 c2                	mov    edx,eax
c001710c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017110:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017113:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017117:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001711e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017122:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017126:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001712a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017130:	c1 e0 07             	shl    eax,0x7
c0017133:	83 ec 0c             	sub    esp,0xc
c0017136:	50                   	push   eax
c0017137:	e8 6a 87 ff ff       	call   c000f8a6 <malloc>
c001713c:	83 c4 10             	add    esp,0x10
c001713f:	89 c2                	mov    edx,eax
c0017141:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017145:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017148:	90                   	nop
c0017149:	83 c4 18             	add    esp,0x18
c001714c:	5b                   	pop    ebx
c001714d:	c3                   	ret    

c001714e <VCache::invalidateReadBuffer()>:
c001714e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017152:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017158:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001715c:	c3                   	ret    
c001715d:	90                   	nop

c001715e <VCache::writeWriteBuffer()>:
c001715e:	53                   	push   ebx
c001715f:	83 ec 14             	sub    esp,0x14
c0017162:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017166:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017169:	8b 10                	mov    edx,DWORD PTR [eax]
c001716b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001716e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017171:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017174:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017177:	50                   	push   eax
c0017178:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001717b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017182:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017189:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001718d:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017194:	83 c4 28             	add    esp,0x28
c0017197:	5b                   	pop    ebx
c0017198:	c3                   	ret    
c0017199:	90                   	nop

c001719a <VCache::~VCache()>:
c001719a:	83 ec 0c             	sub    esp,0xc
c001719d:	ba a0 bc 02 c0       	mov    edx,0xc002bca0
c00171a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171a6:	89 10                	mov    DWORD PTR [eax],edx
c00171a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ac:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171af:	84 c0                	test   al,al
c00171b1:	74 0f                	je     c00171c2 <VCache::~VCache()+0x28>
c00171b3:	83 ec 0c             	sub    esp,0xc
c00171b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171ba:	e8 9f ff ff ff       	call   c001715e <VCache::writeWriteBuffer()>
c00171bf:	83 c4 10             	add    esp,0x10
c00171c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171c9:	83 ec 0c             	sub    esp,0xc
c00171cc:	50                   	push   eax
c00171cd:	e8 e4 86 ff ff       	call   c000f8b6 <free>
c00171d2:	83 c4 10             	add    esp,0x10
c00171d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171dc:	83 ec 0c             	sub    esp,0xc
c00171df:	50                   	push   eax
c00171e0:	e8 d1 86 ff ff       	call   c000f8b6 <free>
c00171e5:	83 c4 10             	add    esp,0x10
c00171e8:	90                   	nop
c00171e9:	83 c4 0c             	add    esp,0xc
c00171ec:	c3                   	ret    
c00171ed:	90                   	nop

c00171ee <VCache::~VCache()>:
c00171ee:	83 ec 0c             	sub    esp,0xc
c00171f1:	83 ec 0c             	sub    esp,0xc
c00171f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171f8:	e8 9d ff ff ff       	call   c001719a <VCache::~VCache()>
c00171fd:	83 c4 10             	add    esp,0x10
c0017200:	83 ec 08             	sub    esp,0x8
c0017203:	6a 44                	push   0x44
c0017205:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017209:	e8 53 bb ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c001720e:	83 c4 10             	add    esp,0x10
c0017211:	83 c4 0c             	add    esp,0xc
c0017214:	c3                   	ret    
c0017215:	90                   	nop

c0017216 <VCache::write(unsigned long long, int, void*)>:
c0017216:	55                   	push   ebp
c0017217:	57                   	push   edi
c0017218:	56                   	push   esi
c0017219:	53                   	push   ebx
c001721a:	83 ec 18             	sub    esp,0x18
c001721d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017221:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017225:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0017229:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001722c:	e8 a7 75 00 00       	call   c001e7d8 <Semaphore::acquire()>
c0017231:	83 c4 10             	add    esp,0x10
c0017234:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017238:	74 0c                	je     c0017246 <VCache::write(unsigned long long, int, void*)+0x30>
c001723a:	83 ec 0c             	sub    esp,0xc
c001723d:	53                   	push   ebx
c001723e:	e8 0b ff ff ff       	call   c001714e <VCache::invalidateReadBuffer()>
c0017243:	83 c4 10             	add    esp,0x10
c0017246:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001724a:	74 5c                	je     c00172a8 <VCache::write(unsigned long long, int, void*)+0x92>
c001724c:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001724f:	89 e8                	mov    eax,ebp
c0017251:	99                   	cdq    
c0017252:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017255:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017258:	89 c1                	mov    ecx,eax
c001725a:	89 d0                	mov    eax,edx
c001725c:	31 f1                	xor    ecx,esi
c001725e:	31 f8                	xor    eax,edi
c0017260:	09 c1                	or     ecx,eax
c0017262:	75 38                	jne    c001729c <VCache::write(unsigned long long, int, void*)+0x86>
c0017264:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0017269:	75 31                	jne    c001729c <VCache::write(unsigned long long, int, void*)+0x86>
c001726b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001726e:	89 ef                	mov    edi,ebp
c0017270:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017276:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001727a:	0f af f9             	imul   edi,ecx
c001727d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0017280:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017282:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017285:	40                   	inc    eax
c0017286:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017289:	83 c0 80             	add    eax,0xffffff80
c001728c:	75 5c                	jne    c00172ea <VCache::write(unsigned long long, int, void*)+0xd4>
c001728e:	83 ec 0c             	sub    esp,0xc
c0017291:	53                   	push   ebx
c0017292:	e8 c7 fe ff ff       	call   c001715e <VCache::writeWriteBuffer()>
c0017297:	83 c4 10             	add    esp,0x10
c001729a:	eb 4e                	jmp    c00172ea <VCache::write(unsigned long long, int, void*)+0xd4>
c001729c:	83 ec 0c             	sub    esp,0xc
c001729f:	53                   	push   ebx
c00172a0:	e8 b9 fe ff ff       	call   c001715e <VCache::writeWriteBuffer()>
c00172a5:	83 c4 10             	add    esp,0x10
c00172a8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172ab:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00172b0:	7f 22                	jg     c00172d4 <VCache::write(unsigned long long, int, void*)+0xbe>
c00172b2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172b5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172b8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172bc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172c0:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00172c3:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00172c6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00172cc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172d2:	eb 16                	jmp    c00172ea <VCache::write(unsigned long long, int, void*)+0xd4>
c00172d4:	83 ec 0c             	sub    esp,0xc
c00172d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00172d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172e1:	57                   	push   edi
c00172e2:	56                   	push   esi
c00172e3:	50                   	push   eax
c00172e4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172e7:	83 c4 20             	add    esp,0x20
c00172ea:	83 ec 0c             	sub    esp,0xc
c00172ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172f0:	e8 1d 7c 00 00       	call   c001ef12 <Semaphore::release()>
c00172f5:	83 c4 1c             	add    esp,0x1c
c00172f8:	31 c0                	xor    eax,eax
c00172fa:	5b                   	pop    ebx
c00172fb:	5e                   	pop    esi
c00172fc:	5f                   	pop    edi
c00172fd:	5d                   	pop    ebp
c00172fe:	c3                   	ret    
c00172ff:	90                   	nop

c0017300 <VCache::read(unsigned long long, int, void*)>:
c0017300:	55                   	push   ebp
c0017301:	57                   	push   edi
c0017302:	56                   	push   esi
c0017303:	53                   	push   ebx
c0017304:	83 ec 28             	sub    esp,0x28
c0017307:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001730b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001730f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017313:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017317:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001731a:	e8 b9 74 00 00       	call   c001e7d8 <Semaphore::acquire()>
c001731f:	83 c4 10             	add    esp,0x10
c0017322:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017326:	74 0c                	je     c0017334 <VCache::read(unsigned long long, int, void*)+0x34>
c0017328:	83 ec 0c             	sub    esp,0xc
c001732b:	53                   	push   ebx
c001732c:	e8 2d fe ff ff       	call   c001715e <VCache::writeWriteBuffer()>
c0017331:	83 c4 10             	add    esp,0x10
c0017334:	83 fd 01             	cmp    ebp,0x1
c0017337:	0f 85 80 00 00 00    	jne    c00173bd <VCache::read(unsigned long long, int, void*)+0xbd>
c001733d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017340:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017344:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001734b:	75 70                	jne    c00173bd <VCache::read(unsigned long long, int, void*)+0xbd>
c001734d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0017350:	89 e9                	mov    ecx,ebp
c0017352:	f7 d9                	neg    ecx
c0017354:	89 c8                	mov    eax,ecx
c0017356:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001735a:	c1 f8 1f             	sar    eax,0x1f
c001735d:	21 f1                	and    ecx,esi
c001735f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017363:	89 c8                	mov    eax,ecx
c0017365:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017369:	21 f9                	and    ecx,edi
c001736b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001736f:	89 ca                	mov    edx,ecx
c0017371:	74 0a                	je     c001737d <VCache::read(unsigned long long, int, void*)+0x7d>
c0017373:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017376:	75 05                	jne    c001737d <VCache::read(unsigned long long, int, void*)+0x7d>
c0017378:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001737b:	74 23                	je     c00173a0 <VCache::read(unsigned long long, int, void*)+0xa0>
c001737d:	83 ec 0c             	sub    esp,0xc
c0017380:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0017384:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017388:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001738b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001738e:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017390:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0017393:	55                   	push   ebp
c0017394:	52                   	push   edx
c0017395:	50                   	push   eax
c0017396:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001739a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001739d:	83 c4 20             	add    esp,0x20
c00173a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173a3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173a7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00173ad:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173b0:	48                   	dec    eax
c00173b1:	21 c6                	and    esi,eax
c00173b3:	0f af f1             	imul   esi,ecx
c00173b6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00173b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173bb:	eb 1d                	jmp    c00173da <VCache::read(unsigned long long, int, void*)+0xda>
c00173bd:	83 ec 0c             	sub    esp,0xc
c00173c0:	53                   	push   ebx
c00173c1:	e8 88 fd ff ff       	call   c001714e <VCache::invalidateReadBuffer()>
c00173c6:	5a                   	pop    edx
c00173c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00173cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173d0:	55                   	push   ebp
c00173d1:	57                   	push   edi
c00173d2:	56                   	push   esi
c00173d3:	50                   	push   eax
c00173d4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173d7:	83 c4 20             	add    esp,0x20
c00173da:	83 ec 0c             	sub    esp,0xc
c00173dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173e0:	e8 2d 7b 00 00       	call   c001ef12 <Semaphore::release()>
c00173e5:	83 c4 2c             	add    esp,0x2c
c00173e8:	31 c0                	xor    eax,eax
c00173ea:	5b                   	pop    ebx
c00173eb:	5e                   	pop    esi
c00173ec:	5f                   	pop    edi
c00173ed:	5d                   	pop    ebp
c00173ee:	c3                   	ret    
c00173ef:	90                   	nop

c00173f0 <Video::putrect(int, int, int, int, unsigned int)>:
c00173f0:	55                   	push   ebp
c00173f1:	57                   	push   edi
c00173f2:	56                   	push   esi
c00173f3:	53                   	push   ebx
c00173f4:	83 ec 1c             	sub    esp,0x1c
c00173f7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173ff:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017403:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017407:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001740b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001740f:	01 df                	add    edi,ebx
c0017411:	39 fb                	cmp    ebx,edi
c0017413:	7d 1f                	jge    c0017434 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017415:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017419:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001741d:	7d 12                	jge    c0017431 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001741f:	8b 16                	mov    edx,DWORD PTR [esi]
c0017421:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017425:	53                   	push   ebx
c0017426:	55                   	push   ebp
c0017427:	45                   	inc    ebp
c0017428:	56                   	push   esi
c0017429:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001742c:	83 c4 10             	add    esp,0x10
c001742f:	eb e8                	jmp    c0017419 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017431:	43                   	inc    ebx
c0017432:	eb dd                	jmp    c0017411 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017434:	83 c4 1c             	add    esp,0x1c
c0017437:	5b                   	pop    ebx
c0017438:	5e                   	pop    esi
c0017439:	5f                   	pop    edi
c001743a:	5d                   	pop    ebp
c001743b:	c3                   	ret    

c001743c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001743c:	55                   	push   ebp
c001743d:	57                   	push   edi
c001743e:	31 ff                	xor    edi,edi
c0017440:	56                   	push   esi
c0017441:	53                   	push   ebx
c0017442:	83 ec 1c             	sub    esp,0x1c
c0017445:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017449:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001744d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017454:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001745d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017461:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017465:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017468:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001746c:	01 f9                	add    ecx,edi
c001746e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017472:	7d 2f                	jge    c00174a3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017474:	31 f6                	xor    esi,esi
c0017476:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001747a:	01 f2                	add    edx,esi
c001747c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017480:	7d 1a                	jge    c001749c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017482:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017485:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017488:	46                   	inc    esi
c0017489:	51                   	push   ecx
c001748a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001748e:	52                   	push   edx
c001748f:	55                   	push   ebp
c0017490:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017493:	83 c4 10             	add    esp,0x10
c0017496:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001749a:	eb da                	jmp    c0017476 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001749c:	47                   	inc    edi
c001749d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174a1:	eb c5                	jmp    c0017468 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174a3:	83 c4 1c             	add    esp,0x1c
c00174a6:	5b                   	pop    ebx
c00174a7:	5e                   	pop    esi
c00174a8:	5f                   	pop    edi
c00174a9:	5d                   	pop    ebp
c00174aa:	c3                   	ret    
c00174ab:	90                   	nop

c00174ac <Video::blit(unsigned int*, int, int, int, int)>:
c00174ac:	55                   	push   ebp
c00174ad:	57                   	push   edi
c00174ae:	56                   	push   esi
c00174af:	53                   	push   ebx
c00174b0:	83 ec 1c             	sub    esp,0x1c
c00174b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174bb:	85 c0                	test   eax,eax
c00174bd:	79 02                	jns    c00174c1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174bf:	31 c0                	xor    eax,eax
c00174c1:	c1 e0 02             	shl    eax,0x2
c00174c4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174d0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174d4:	39 d8                	cmp    eax,ebx
c00174d6:	7e 49                	jle    c0017521 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174d8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174de:	7c 41                	jl     c0017521 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174e0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174e4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174e8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174ec:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174f0:	39 f9                	cmp    ecx,edi
c00174f2:	7e 22                	jle    c0017516 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174f4:	83 c5 04             	add    ebp,0x4
c00174f7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00174fd:	7c 14                	jl     c0017513 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00174ff:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017501:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017504:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017508:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001750c:	56                   	push   esi
c001750d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017510:	83 c4 10             	add    esp,0x10
c0017513:	47                   	inc    edi
c0017514:	eb d2                	jmp    c00174e8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017516:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001751a:	43                   	inc    ebx
c001751b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001751f:	eb ab                	jmp    c00174cc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017521:	83 c4 1c             	add    esp,0x1c
c0017524:	5b                   	pop    ebx
c0017525:	5e                   	pop    esi
c0017526:	5f                   	pop    edi
c0017527:	5d                   	pop    ebp
c0017528:	c3                   	ret    
c0017529:	90                   	nop

c001752a <Video::clearScreen(unsigned int)>:
c001752a:	57                   	push   edi
c001752b:	56                   	push   esi
c001752c:	53                   	push   ebx
c001752d:	31 db                	xor    ebx,ebx
c001752f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017533:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017539:	7e 1f                	jle    c001755a <Video::clearScreen(unsigned int)+0x30>
c001753b:	31 ff                	xor    edi,edi
c001753d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017543:	7e 12                	jle    c0017557 <Video::clearScreen(unsigned int)+0x2d>
c0017545:	8b 06                	mov    eax,DWORD PTR [esi]
c0017547:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001754b:	53                   	push   ebx
c001754c:	57                   	push   edi
c001754d:	47                   	inc    edi
c001754e:	56                   	push   esi
c001754f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	eb e6                	jmp    c001753d <Video::clearScreen(unsigned int)+0x13>
c0017557:	43                   	inc    ebx
c0017558:	eb d9                	jmp    c0017533 <Video::clearScreen(unsigned int)+0x9>
c001755a:	5b                   	pop    ebx
c001755b:	5e                   	pop    esi
c001755c:	5f                   	pop    edi
c001755d:	c3                   	ret    

c001755e <Video::putpixel(int, int, unsigned int)>:
c001755e:	c7 44 24 04 a8 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bca8
c0017566:	e9 90 32 00 00       	jmp    c001a7fb <Krnl::panic(char const*)>
c001756b:	90                   	nop

c001756c <Video::Video(char const*)>:
c001756c:	83 ec 0c             	sub    esp,0xc
c001756f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017573:	83 ec 08             	sub    esp,0x8
c0017576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001757a:	50                   	push   eax
c001757b:	e8 d2 ce ff ff       	call   c0014452 <Device::Device(char const*)>
c0017580:	83 c4 10             	add    esp,0x10
c0017583:	ba 2c bd 02 c0       	mov    edx,0xc002bd2c
c0017588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001758c:	89 10                	mov    DWORD PTR [eax],edx
c001758e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017592:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001759c:	90                   	nop
c001759d:	83 c4 0c             	add    esp,0xc
c00175a0:	c3                   	ret    
c00175a1:	90                   	nop

c00175a2 <Video::~Video()>:
c00175a2:	83 ec 0c             	sub    esp,0xc
c00175a5:	ba 2c bd 02 c0       	mov    edx,0xc002bd2c
c00175aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ae:	89 10                	mov    DWORD PTR [eax],edx
c00175b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b4:	83 ec 0c             	sub    esp,0xc
c00175b7:	50                   	push   eax
c00175b8:	e8 8b cb ff ff       	call   c0014148 <Device::~Device()>
c00175bd:	83 c4 10             	add    esp,0x10
c00175c0:	90                   	nop
c00175c1:	83 c4 0c             	add    esp,0xc
c00175c4:	c3                   	ret    
c00175c5:	90                   	nop

c00175c6 <Video::~Video()>:
c00175c6:	83 ec 0c             	sub    esp,0xc
c00175c9:	83 ec 0c             	sub    esp,0xc
c00175cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175d0:	e8 cd ff ff ff       	call   c00175a2 <Video::~Video()>
c00175d5:	83 c4 10             	add    esp,0x10
c00175d8:	83 ec 08             	sub    esp,0x8
c00175db:	68 64 01 00 00       	push   0x164
c00175e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175e4:	e8 78 b7 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c00175e9:	83 c4 10             	add    esp,0x10
c00175ec:	83 c4 0c             	add    esp,0xc
c00175ef:	c3                   	ret    

c00175f0 <Video::isMonochrome()>:
c00175f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175f4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00175fa:	c3                   	ret    
c00175fb:	90                   	nop

c00175fc <Video::getWidth()>:
c00175fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017600:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017606:	c3                   	ret    
c0017607:	90                   	nop

c0017608 <Video::getHeight()>:
c0017608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001760c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017612:	c3                   	ret    
c0017613:	90                   	nop

c0017614 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017614:	55                   	push   ebp
c0017615:	57                   	push   edi
c0017616:	56                   	push   esi
c0017617:	53                   	push   ebx
c0017618:	83 ec 2c             	sub    esp,0x2c
c001761b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001761f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017623:	83 f8 01             	cmp    eax,0x1
c0017626:	19 c9                	sbb    ecx,ecx
c0017628:	31 db                	xor    ebx,ebx
c001762a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001762e:	89 cd                	mov    ebp,ecx
c0017630:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017638:	f7 d5                	not    ebp
c001763a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017640:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017644:	01 d8                	add    eax,ebx
c0017646:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001764a:	56                   	push   esi
c001764b:	e8 b8 ff ff ff       	call   c0017608 <Video::getHeight()>
c0017650:	59                   	pop    ecx
c0017651:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017655:	7e 70                	jle    c00176c7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017657:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001765b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001765f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017662:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017666:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001766a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017671:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017675:	89 f8                	mov    eax,edi
c0017677:	83 c0 20             	add    eax,0x20
c001767a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001767e:	56                   	push   esi
c001767f:	e8 78 ff ff ff       	call   c00175fc <Video::getWidth()>
c0017684:	5a                   	pop    edx
c0017685:	39 c7                	cmp    edi,eax
c0017687:	7d 34                	jge    c00176bd <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017689:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001768e:	74 05                	je     c0017695 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017690:	8b 06                	mov    eax,DWORD PTR [esi]
c0017692:	55                   	push   ebp
c0017693:	eb 0d                	jmp    c00176a2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017695:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001769a:	74 12                	je     c00176ae <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001769c:	8b 06                	mov    eax,DWORD PTR [esi]
c001769e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176a6:	57                   	push   edi
c00176a7:	56                   	push   esi
c00176a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176ab:	83 c4 10             	add    esp,0x10
c00176ae:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176b2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176b6:	47                   	inc    edi
c00176b7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176bb:	75 c1                	jne    c001767e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176bd:	43                   	inc    ebx
c00176be:	83 fb 20             	cmp    ebx,0x20
c00176c1:	0f 85 79 ff ff ff    	jne    c0017640 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176c7:	83 c4 2c             	add    esp,0x2c
c00176ca:	5b                   	pop    ebx
c00176cb:	5e                   	pop    esi
c00176cc:	5f                   	pop    edi
c00176cd:	5d                   	pop    ebp
c00176ce:	c3                   	ret    
c00176cf:	90                   	nop

c00176d0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176d0:	55                   	push   ebp
c00176d1:	57                   	push   edi
c00176d2:	56                   	push   esi
c00176d3:	53                   	push   ebx
c00176d4:	83 ec 28             	sub    esp,0x28
c00176d7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176db:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176df:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176e3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176e7:	c1 e7 08             	shl    edi,0x8
c00176ea:	01 c7                	add    edi,eax
c00176ec:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176f0:	c1 e0 08             	shl    eax,0x8
c00176f3:	01 d0                	add    eax,edx
c00176f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00176fd:	0f af c7             	imul   eax,edi
c0017700:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017707:	50                   	push   eax
c0017708:	e8 99 81 ff ff       	call   c000f8a6 <malloc>
c001770d:	83 c4 10             	add    esp,0x10
c0017710:	89 c5                	mov    ebp,eax
c0017712:	85 c0                	test   eax,eax
c0017714:	75 15                	jne    c001772b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017716:	83 ec 0c             	sub    esp,0xc
c0017719:	68 c9 bc 02 c0       	push   0xc002bcc9
c001771e:	e8 1e b7 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	e9 1c 01 00 00       	jmp    c0017847 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001772b:	be 12 00 00 00       	mov    esi,0x12
c0017730:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017734:	74 11                	je     c0017747 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017736:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001773a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001773e:	c1 fe 03             	sar    esi,0x3
c0017741:	0f af f0             	imul   esi,eax
c0017744:	83 c6 12             	add    esi,0x12
c0017747:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001774b:	74 04                	je     c0017751 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001774d:	85 ff                	test   edi,edi
c001774f:	75 12                	jne    c0017763 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017751:	83 ec 0c             	sub    esp,0xc
c0017754:	68 e0 bc 02 c0       	push   0xc002bce0
c0017759:	e8 e3 b6 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001775e:	e9 ce 00 00 00       	jmp    c0017831 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017763:	52                   	push   edx
c0017764:	52                   	push   edx
c0017765:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017769:	50                   	push   eax
c001776a:	68 f5 bc 02 c0       	push   0xc002bcf5
c001776f:	e8 cd b6 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0017774:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017778:	83 c4 10             	add    esp,0x10
c001777b:	80 fa 02             	cmp    dl,0x2
c001777e:	0f 85 98 00 00 00    	jne    c001781c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017784:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017789:	75 10                	jne    c001779b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001778b:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001778f:	75 0a                	jne    c001779b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017791:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017794:	83 e8 18             	sub    eax,0x18
c0017797:	a8 f7                	test   al,0xf7
c0017799:	74 0a                	je     c00177a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001779b:	83 ec 0c             	sub    esp,0xc
c001779e:	68 02 bd 02 c0       	push   0xc002bd02
c00177a3:	eb 7f                	jmp    c0017824 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177a5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177ad:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177b5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177b9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177c1:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177c5:	75 0c                	jne    c00177d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177c7:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177cc:	c1 e0 18             	shl    eax,0x18
c00177cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177d3:	41                   	inc    ecx
c00177d4:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177d9:	c1 e2 10             	shl    edx,0x10
c00177dc:	89 d0                	mov    eax,edx
c00177de:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177e3:	c1 e2 08             	shl    edx,0x8
c00177e6:	09 c2                	or     edx,eax
c00177e8:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177ec:	09 c2                	or     edx,eax
c00177ee:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177f2:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00177f6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00177fa:	c1 f8 03             	sar    eax,0x3
c00177fd:	01 c6                	add    esi,eax
c00177ff:	89 c8                	mov    eax,ecx
c0017801:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017805:	39 c7                	cmp    edi,eax
c0017807:	7f b0                	jg     c00177b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017809:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001780d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017811:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017814:	7e 22                	jle    c0017838 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017816:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001781a:	eb 99                	jmp    c00177b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001781c:	50                   	push   eax
c001781d:	50                   	push   eax
c001781e:	52                   	push   edx
c001781f:	68 10 bd 02 c0       	push   0xc002bd10
c0017824:	e8 18 b6 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0017829:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001782c:	e8 85 80 ff ff       	call   c000f8b6 <free>
c0017831:	83 c4 10             	add    esp,0x10
c0017834:	31 ed                	xor    ebp,ebp
c0017836:	eb 0f                	jmp    c0017847 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017838:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001783c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001783f:	89 38                	mov    DWORD PTR [eax],edi
c0017841:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017845:	89 08                	mov    DWORD PTR [eax],ecx
c0017847:	83 c4 1c             	add    esp,0x1c
c001784a:	89 e8                	mov    eax,ebp
c001784c:	5b                   	pop    ebx
c001784d:	5e                   	pop    esi
c001784e:	5f                   	pop    edi
c001784f:	5d                   	pop    ebp
c0017850:	c3                   	ret    
c0017851:	90                   	nop

c0017852 <Video::putTGA(int, int, unsigned char*, int)>:
c0017852:	55                   	push   ebp
c0017853:	57                   	push   edi
c0017854:	56                   	push   esi
c0017855:	53                   	push   ebx
c0017856:	83 ec 28             	sub    esp,0x28
c0017859:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001785d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017861:	50                   	push   eax
c0017862:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017866:	50                   	push   eax
c0017867:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001786b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001786f:	56                   	push   esi
c0017870:	e8 5b fe ff ff       	call   c00176d0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017875:	83 c4 20             	add    esp,0x20
c0017878:	85 c0                	test   eax,eax
c001787a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001787e:	74 35                	je     c00178b5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017880:	89 c7                	mov    edi,eax
c0017882:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017886:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001788a:	39 d8                	cmp    eax,ebx
c001788c:	7e 27                	jle    c00178b5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001788e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017892:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017896:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001789a:	39 e8                	cmp    eax,ebp
c001789c:	7e 14                	jle    c00178b2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001789e:	8b 06                	mov    eax,DWORD PTR [esi]
c00178a0:	83 c7 04             	add    edi,0x4
c00178a3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178a6:	53                   	push   ebx
c00178a7:	55                   	push   ebp
c00178a8:	45                   	inc    ebp
c00178a9:	56                   	push   esi
c00178aa:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178ad:	83 c4 10             	add    esp,0x10
c00178b0:	eb e0                	jmp    c0017892 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178b2:	43                   	inc    ebx
c00178b3:	eb cd                	jmp    c0017882 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178b5:	83 c4 1c             	add    esp,0x1c
c00178b8:	5b                   	pop    ebx
c00178b9:	5e                   	pop    esi
c00178ba:	5f                   	pop    edi
c00178bb:	5d                   	pop    ebp
c00178bc:	c3                   	ret    
c00178bd:	90                   	nop

c00178be <ACPI::close(int, int, void*)>:
c00178be:	83 ec 1c             	sub    esp,0x1c
c00178c1:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178c9:	74 0a                	je     c00178d5 <ACPI::close(int, int, void*)+0x17>
c00178cb:	b8 00 00 00 00       	mov    eax,0x0
c00178d0:	e9 9a 00 00 00       	jmp    c001796f <ACPI::close(int, int, void*)+0xb1>
c00178d5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178da:	75 37                	jne    c0017913 <ACPI::close(int, int, void*)+0x55>
c00178dc:	83 ec 0c             	sub    esp,0xc
c00178df:	68 6c bd 02 c0       	push   0xc002bd6c
c00178e4:	e8 58 b5 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00178e9:	83 c4 10             	add    esp,0x10
c00178ec:	a1 28 15 03 c0       	mov    eax,ds:0xc0031528
c00178f1:	85 c0                	test   eax,eax
c00178f3:	74 07                	je     c00178fc <ACPI::close(int, int, void*)+0x3e>
c00178f5:	a1 28 15 03 c0       	mov    eax,ds:0xc0031528
c00178fa:	ff d0                	call   eax
c00178fc:	83 ec 0c             	sub    esp,0xc
c00178ff:	68 e0 be 02 c0       	push   0xc002bee0
c0017904:	e8 f2 2e 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c0017909:	83 c4 10             	add    esp,0x10
c001790c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017911:	eb 5c                	jmp    c001796f <ACPI::close(int, int, void*)+0xb1>
c0017913:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017918:	75 50                	jne    c001796a <ACPI::close(int, int, void*)+0xac>
c001791a:	a1 24 15 03 c0       	mov    eax,ds:0xc0031524
c001791f:	85 c0                	test   eax,eax
c0017921:	74 07                	je     c001792a <ACPI::close(int, int, void*)+0x6c>
c0017923:	a1 24 15 03 c0       	mov    eax,ds:0xc0031524
c0017928:	ff d0                	call   eax
c001792a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001792f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017934:	83 e0 02             	and    eax,0x2
c0017937:	74 1c                	je     c0017955 <ACPI::close(int, int, void*)+0x97>
c0017939:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017940:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017944:	89 c2                	mov    edx,eax
c0017946:	ec                   	in     al,dx
c0017947:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001794b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001794f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017953:	eb da                	jmp    c001792f <ACPI::close(int, int, void*)+0x71>
c0017955:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001795c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017961:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017965:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017969:	ee                   	out    dx,al
c001796a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001796f:	83 c4 1c             	add    esp,0x1c
c0017972:	c3                   	ret    

c0017973 <findRSDP()>:
c0017973:	83 ec 1c             	sub    esp,0x1c
c0017976:	83 ec 0c             	sub    esp,0xc
c0017979:	68 79 bd 02 c0       	push   0xc002bd79
c001797e:	e8 be b4 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0017983:	83 c4 10             	add    esp,0x10
c0017986:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001798b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017991:	83 e0 04             	and    eax,0x4
c0017994:	84 c0                	test   al,al
c0017996:	75 07                	jne    c001799f <findRSDP()+0x2c>
c0017998:	b8 00 00 00 00       	mov    eax,0x0
c001799d:	eb 6a                	jmp    c0017a09 <findRSDP()+0x96>
c001799f:	a1 b4 ee 02 c0       	mov    eax,ds:0xc002eeb4
c00179a4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179a9:	7f 1b                	jg     c00179c6 <findRSDP()+0x53>
c00179ab:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00179b0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179b6:	83 e2 fb             	and    edx,0xfffffffb
c00179b9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179bf:	b8 00 00 00 00       	mov    eax,0x0
c00179c4:	eb 43                	jmp    c0017a09 <findRSDP()+0x96>
c00179c6:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179ce:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179d6:	77 2c                	ja     c0017a04 <findRSDP()+0x91>
c00179d8:	83 ec 04             	sub    esp,0x4
c00179db:	6a 08                	push   0x8
c00179dd:	68 87 bd 02 c0       	push   0xc002bd87
c00179e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179e6:	e8 7d 8c fe ff       	call   c0000668 <memcmp>
c00179eb:	83 c4 10             	add    esp,0x10
c00179ee:	85 c0                	test   eax,eax
c00179f0:	0f 94 c0             	sete   al
c00179f3:	84 c0                	test   al,al
c00179f5:	74 06                	je     c00179fd <findRSDP()+0x8a>
c00179f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179fb:	eb 0c                	jmp    c0017a09 <findRSDP()+0x96>
c00179fd:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a02:	eb ca                	jmp    c00179ce <findRSDP()+0x5b>
c0017a04:	b8 00 00 00 00       	mov    eax,0x0
c0017a09:	83 c4 1c             	add    esp,0x1c
c0017a0c:	c3                   	ret    

c0017a0d <loadACPITables(unsigned char*)>:
c0017a0d:	57                   	push   edi
c0017a0e:	56                   	push   esi
c0017a0f:	53                   	push   ebx
c0017a10:	83 ec 60             	sub    esp,0x60
c0017a13:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017a18:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a1e:	83 e0 04             	and    eax,0x4
c0017a21:	84 c0                	test   al,al
c0017a23:	0f 84 25 02 00 00    	je     c0017c4e <loadACPITables(unsigned char*)+0x241>
c0017a29:	a0 40 17 03 c0       	mov    al,ds:0xc0031740
c0017a2e:	84 c0                	test   al,al
c0017a30:	74 75                	je     c0017aa7 <loadACPITables(unsigned char*)+0x9a>
c0017a32:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a36:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017a3a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a41:	83 e8 24             	sub    eax,0x24
c0017a44:	c1 e8 03             	shr    eax,0x3
c0017a47:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a4b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017a53:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a57:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017a5b:	0f 8d b2 00 00 00    	jge    c0017b13 <loadACPITables(unsigned char*)+0x106>
c0017a61:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a65:	83 c0 24             	add    eax,0x24
c0017a68:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017a6c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017a70:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017a74:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a78:	c1 e0 03             	shl    eax,0x3
c0017a7b:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017a7f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017a83:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a88:	89 c1                	mov    ecx,eax
c0017a8a:	a1 2c 15 03 c0       	mov    eax,ds:0xc003152c
c0017a8f:	8d 50 01             	lea    edx,[eax+0x1]
c0017a92:	89 15 2c 15 03 c0    	mov    DWORD PTR ds:0xc003152c,edx
c0017a98:	89 ca                	mov    edx,ecx
c0017a9a:	89 14 c5 44 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceabc],edx
c0017aa1:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017aa5:	eb ac                	jmp    c0017a53 <loadACPITables(unsigned char*)+0x46>
c0017aa7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017aab:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017aaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ab3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ab6:	83 e8 24             	sub    eax,0x24
c0017ab9:	c1 e8 02             	shr    eax,0x2
c0017abc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ac0:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017ac8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017acc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017ad0:	7d 41                	jge    c0017b13 <loadACPITables(unsigned char*)+0x106>
c0017ad2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017ad6:	83 c0 24             	add    eax,0x24
c0017ad9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017add:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ae1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ae5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017ae9:	c1 e0 02             	shl    eax,0x2
c0017aec:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017af0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017af4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017af6:	a1 2c 15 03 c0       	mov    eax,ds:0xc003152c
c0017afb:	8d 50 01             	lea    edx,[eax+0x1]
c0017afe:	89 15 2c 15 03 c0    	mov    DWORD PTR ds:0xc003152c,edx
c0017b04:	89 ca                	mov    edx,ecx
c0017b06:	89 14 c5 44 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceabc],edx
c0017b0d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017b11:	eb b5                	jmp    c0017ac8 <loadACPITables(unsigned char*)+0xbb>
c0017b13:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017b1b:	a1 2c 15 03 c0       	mov    eax,ds:0xc003152c
c0017b20:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017b24:	0f 8d 25 01 00 00    	jge    c0017c4f <loadACPITables(unsigned char*)+0x242>
c0017b2a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b2e:	8b 04 c5 44 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceabc]
c0017b35:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b3d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b45:	25 ff 0f 00 00       	and    eax,0xfff
c0017b4a:	89 c6                	mov    esi,eax
c0017b4c:	8b 1d f0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff0
c0017b52:	83 ec 0c             	sub    esp,0xc
c0017b55:	6a 01                	push   0x1
c0017b57:	e8 df 9e ff ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c0017b5c:	83 c4 10             	add    esp,0x10
c0017b5f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b63:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b69:	83 ec 0c             	sub    esp,0xc
c0017b6c:	6a 01                	push   0x1
c0017b6e:	6a 01                	push   0x1
c0017b70:	50                   	push   eax
c0017b71:	52                   	push   edx
c0017b72:	53                   	push   ebx
c0017b73:	e8 f0 a9 ff ff       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b78:	83 c4 20             	add    esp,0x20
c0017b7b:	09 f0                	or     eax,esi
c0017b7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b81:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b85:	c1 e0 03             	shl    eax,0x3
c0017b88:	05 40 15 03 c0       	add    eax,0xc0031540
c0017b8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b99:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017ba1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ba5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ba9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bb1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bb5:	89 c6                	mov    esi,eax
c0017bb7:	89 d7                	mov    edi,edx
c0017bb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bc6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017bca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bce:	05 00 10 00 00       	add    eax,0x1000
c0017bd3:	c1 e8 0c             	shr    eax,0xc
c0017bd6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017bda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bde:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be6:	25 ff 0f 00 00       	and    eax,0xfff
c0017beb:	89 c6                	mov    esi,eax
c0017bed:	8b 1d f0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff0
c0017bf3:	83 ec 0c             	sub    esp,0xc
c0017bf6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017bfa:	e8 3c 9e ff ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c0017bff:	83 c4 10             	add    esp,0x10
c0017c02:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c06:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c0c:	83 ec 0c             	sub    esp,0xc
c0017c0f:	6a 01                	push   0x1
c0017c11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c15:	50                   	push   eax
c0017c16:	52                   	push   edx
c0017c17:	53                   	push   ebx
c0017c18:	e8 4b a9 ff ff       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c1d:	83 c4 20             	add    esp,0x20
c0017c20:	09 f0                	or     eax,esi
c0017c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c2a:	83 ec 0c             	sub    esp,0xc
c0017c2d:	50                   	push   eax
c0017c2e:	e8 c8 a2 ff ff       	call   c0011efb <Virt::freeKernelVirtualPages(unsigned long)>
c0017c33:	83 c4 10             	add    esp,0x10
c0017c36:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017c3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c3e:	89 14 c5 44 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceabc],edx
c0017c45:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017c49:	e9 cd fe ff ff       	jmp    c0017b1b <loadACPITables(unsigned char*)+0x10e>
c0017c4e:	90                   	nop
c0017c4f:	83 c4 60             	add    esp,0x60
c0017c52:	5b                   	pop    ebx
c0017c53:	5e                   	pop    esi
c0017c54:	5f                   	pop    edi
c0017c55:	c3                   	ret    

c0017c56 <findRSDT(unsigned char*)>:
c0017c56:	57                   	push   edi
c0017c57:	56                   	push   esi
c0017c58:	53                   	push   ebx
c0017c59:	83 ec 50             	sub    esp,0x50
c0017c5c:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017c61:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c67:	83 e0 04             	and    eax,0x4
c0017c6a:	84 c0                	test   al,al
c0017c6c:	75 0a                	jne    c0017c78 <findRSDT(unsigned char*)+0x22>
c0017c6e:	b8 00 00 00 00       	mov    eax,0x0
c0017c73:	e9 15 01 00 00       	jmp    c0017d8d <findRSDT(unsigned char*)+0x137>
c0017c78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c7c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c80:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017c84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017c88:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017c90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c94:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017c9c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017ca0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017ca4:	89 c6                	mov    esi,eax
c0017ca6:	89 d7                	mov    edi,edx
c0017ca8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017caa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017cae:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017cb2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017cb6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017cbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cc2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017cc6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017cca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017cd2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017cd6:	25 ff 0f 00 00       	and    eax,0xfff
c0017cdb:	89 c6                	mov    esi,eax
c0017cdd:	8b 1d f0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff0
c0017ce3:	83 ec 0c             	sub    esp,0xc
c0017ce6:	6a 02                	push   0x2
c0017ce8:	e8 4e 9d ff ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c0017ced:	83 c4 10             	add    esp,0x10
c0017cf0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017cf4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cfa:	83 ec 0c             	sub    esp,0xc
c0017cfd:	6a 01                	push   0x1
c0017cff:	6a 02                	push   0x2
c0017d01:	50                   	push   eax
c0017d02:	52                   	push   edx
c0017d03:	53                   	push   ebx
c0017d04:	e8 5f a8 ff ff       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d09:	83 c4 20             	add    esp,0x20
c0017d0c:	09 f0                	or     eax,esi
c0017d0e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d16:	25 ff 0f 00 00       	and    eax,0xfff
c0017d1b:	89 c6                	mov    esi,eax
c0017d1d:	8b 1d f0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff0
c0017d23:	83 ec 0c             	sub    esp,0xc
c0017d26:	6a 02                	push   0x2
c0017d28:	e8 0e 9d ff ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c0017d2d:	83 c4 10             	add    esp,0x10
c0017d30:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d34:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d3a:	83 ec 0c             	sub    esp,0xc
c0017d3d:	6a 01                	push   0x1
c0017d3f:	6a 02                	push   0x2
c0017d41:	50                   	push   eax
c0017d42:	52                   	push   edx
c0017d43:	53                   	push   ebx
c0017d44:	e8 1f a8 ff ff       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d49:	83 c4 20             	add    esp,0x20
c0017d4c:	09 f0                	or     eax,esi
c0017d4e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d52:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017d57:	75 11                	jne    c0017d6a <findRSDT(unsigned char*)+0x114>
c0017d59:	c6 05 40 17 03 c0 00 	mov    BYTE PTR ds:0xc0031740,0x0
c0017d60:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d64:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d68:	eb 1f                	jmp    c0017d89 <findRSDT(unsigned char*)+0x133>
c0017d6a:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017d6f:	75 11                	jne    c0017d82 <findRSDT(unsigned char*)+0x12c>
c0017d71:	c6 05 40 17 03 c0 01 	mov    BYTE PTR ds:0xc0031740,0x1
c0017d78:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d7c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d80:	eb 07                	jmp    c0017d89 <findRSDT(unsigned char*)+0x133>
c0017d82:	b8 00 00 00 00       	mov    eax,0x0
c0017d87:	eb 04                	jmp    c0017d8d <findRSDT(unsigned char*)+0x137>
c0017d89:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017d8d:	83 c4 50             	add    esp,0x50
c0017d90:	5b                   	pop    ebx
c0017d91:	5e                   	pop    esi
c0017d92:	5f                   	pop    edi
c0017d93:	c3                   	ret    

c0017d94 <findDataTable(unsigned char*, char*)>:
c0017d94:	83 ec 1c             	sub    esp,0x1c
c0017d97:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017d9c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017da2:	83 e0 04             	and    eax,0x4
c0017da5:	84 c0                	test   al,al
c0017da7:	75 07                	jne    c0017db0 <findDataTable(unsigned char*, char*)+0x1c>
c0017da9:	b8 00 00 00 00       	mov    eax,0x0
c0017dae:	eb 7c                	jmp    c0017e2c <findDataTable(unsigned char*, char*)+0x98>
c0017db0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017db8:	a1 2c 15 03 c0       	mov    eax,ds:0xc003152c
c0017dbd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017dc1:	7d 3a                	jge    c0017dfd <findDataTable(unsigned char*, char*)+0x69>
c0017dc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dc7:	c1 e0 03             	shl    eax,0x3
c0017dca:	05 40 15 03 c0       	add    eax,0xc0031540
c0017dcf:	83 ec 04             	sub    esp,0x4
c0017dd2:	6a 04                	push   0x4
c0017dd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dd8:	50                   	push   eax
c0017dd9:	e8 8a 88 fe ff       	call   c0000668 <memcmp>
c0017dde:	83 c4 10             	add    esp,0x10
c0017de1:	85 c0                	test   eax,eax
c0017de3:	0f 94 c0             	sete   al
c0017de6:	84 c0                	test   al,al
c0017de8:	74 0d                	je     c0017df7 <findDataTable(unsigned char*, char*)+0x63>
c0017dea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dee:	8b 04 c5 44 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceabc]
c0017df5:	eb 35                	jmp    c0017e2c <findDataTable(unsigned char*, char*)+0x98>
c0017df7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017dfb:	eb bb                	jmp    c0017db8 <findDataTable(unsigned char*, char*)+0x24>
c0017dfd:	a0 40 17 03 c0       	mov    al,ds:0xc0031740
c0017e02:	84 c0                	test   al,al
c0017e04:	74 07                	je     c0017e0d <findDataTable(unsigned char*, char*)+0x79>
c0017e06:	b8 58 00 00 00       	mov    eax,0x58
c0017e0b:	eb 05                	jmp    c0017e12 <findDataTable(unsigned char*, char*)+0x7e>
c0017e0d:	b8 52 00 00 00       	mov    eax,0x52
c0017e12:	83 ec 04             	sub    esp,0x4
c0017e15:	50                   	push   eax
c0017e16:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e1a:	68 04 bf 02 c0       	push   0xc002bf04
c0017e1f:	e8 1d b0 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0017e24:	83 c4 10             	add    esp,0x10
c0017e27:	b8 00 00 00 00       	mov    eax,0x0
c0017e2c:	83 c4 1c             	add    esp,0x1c
c0017e2f:	c3                   	ret    

c0017e30 <scanMADT()>:
c0017e30:	53                   	push   ebx
c0017e31:	83 ec 38             	sub    esp,0x38
c0017e34:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017e39:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e3f:	83 e0 04             	and    eax,0x4
c0017e42:	84 c0                	test   al,al
c0017e44:	0f 84 63 04 00 00    	je     c00182ad <scanMADT()+0x47d>
c0017e4a:	e8 24 fb ff ff       	call   c0017973 <findRSDP()>
c0017e4f:	a3 4c 17 03 c0       	mov    ds:0xc003174c,eax
c0017e54:	a1 4c 17 03 c0       	mov    eax,ds:0xc003174c
c0017e59:	85 c0                	test   eax,eax
c0017e5b:	75 19                	jne    c0017e76 <scanMADT()+0x46>
c0017e5d:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017e62:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e68:	83 e2 fb             	and    edx,0xfffffffb
c0017e6b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e71:	e9 3b 04 00 00       	jmp    c00182b1 <scanMADT()+0x481>
c0017e76:	a1 4c 17 03 c0       	mov    eax,ds:0xc003174c
c0017e7b:	83 ec 0c             	sub    esp,0xc
c0017e7e:	50                   	push   eax
c0017e7f:	e8 d2 fd ff ff       	call   c0017c56 <findRSDT(unsigned char*)>
c0017e84:	83 c4 10             	add    esp,0x10
c0017e87:	a3 48 17 03 c0       	mov    ds:0xc0031748,eax
c0017e8c:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c0017e91:	85 c0                	test   eax,eax
c0017e93:	75 19                	jne    c0017eae <scanMADT()+0x7e>
c0017e95:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017e9a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ea0:	83 e2 fb             	and    edx,0xfffffffb
c0017ea3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ea9:	e9 03 04 00 00       	jmp    c00182b1 <scanMADT()+0x481>
c0017eae:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c0017eb3:	83 ec 0c             	sub    esp,0xc
c0017eb6:	50                   	push   eax
c0017eb7:	e8 51 fb ff ff       	call   c0017a0d <loadACPITables(unsigned char*)>
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c0017ec4:	83 ec 08             	sub    esp,0x8
c0017ec7:	68 90 bd 02 c0       	push   0xc002bd90
c0017ecc:	50                   	push   eax
c0017ecd:	e8 c2 fe ff ff       	call   c0017d94 <findDataTable(unsigned char*, char*)>
c0017ed2:	83 c4 10             	add    esp,0x10
c0017ed5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ed9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017ede:	75 19                	jne    c0017ef9 <scanMADT()+0xc9>
c0017ee0:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0017ee5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017eeb:	83 e2 fe             	and    edx,0xfffffffe
c0017eee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ef4:	e9 b8 03 00 00       	jmp    c00182b1 <scanMADT()+0x481>
c0017ef9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f08:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f0c:	0f 87 9f 03 00 00    	ja     c00182b1 <scanMADT()+0x481>
c0017f12:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f1a:	0f 87 91 03 00 00    	ja     c00182b1 <scanMADT()+0x481>
c0017f20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f24:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f2f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f33:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f37:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f3b:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f3f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f43:	8d 50 01             	lea    edx,[eax+0x1]
c0017f46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f4e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f52:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f56:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f5b:	0f 86 4f 03 00 00    	jbe    c00182b0 <scanMADT()+0x480>
c0017f61:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f66:	75 57                	jne    c0017fbf <scanMADT()+0x18f>
c0017f68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f6f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f73:	8a 15 40 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031940
c0017f79:	0f b6 d2             	movzx  edx,dl
c0017f7c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f80:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f84:	88 82 80 19 03 c0    	mov    BYTE PTR [edx-0x3ffce680],al
c0017f8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f8e:	8d 50 01             	lea    edx,[eax+0x1]
c0017f91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f95:	8a 15 40 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031940
c0017f9b:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f9e:	88 0d 40 19 03 c0    	mov    BYTE PTR ds:0xc0031940,cl
c0017fa4:	0f b6 d2             	movzx  edx,dl
c0017fa7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fab:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017faf:	88 82 60 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6a0],al
c0017fb5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fba:	e9 da 02 00 00       	jmp    c0018299 <scanMADT()+0x469>
c0017fbf:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017fc4:	0f 85 14 01 00 00    	jne    c00180de <scanMADT()+0x2ae>
c0017fca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fce:	8d 50 01             	lea    edx,[eax+0x1]
c0017fd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fd5:	8a 15 00 18 03 c0    	mov    dl,BYTE PTR ds:0xc0031800
c0017fdb:	0f b6 d2             	movzx  edx,dl
c0017fde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fe2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fe6:	88 82 20 18 03 c0    	mov    BYTE PTR [edx-0x3ffce7e0],al
c0017fec:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017ff0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ff4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff8:	01 d0                	add    eax,edx
c0017ffa:	83 c0 2c             	add    eax,0x2c
c0017ffd:	8a 00                	mov    al,BYTE PTR [eax]
c0017fff:	0f b6 d0             	movzx  edx,al
c0018002:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018006:	8d 48 01             	lea    ecx,[eax+0x1]
c0018009:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001800d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018011:	0f b6 c0             	movzx  eax,al
c0018014:	c1 e0 08             	shl    eax,0x8
c0018017:	89 d1                	mov    ecx,edx
c0018019:	09 c1                	or     ecx,eax
c001801b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001801f:	8d 50 02             	lea    edx,[eax+0x2]
c0018022:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018026:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001802a:	0f b6 c0             	movzx  eax,al
c001802d:	c1 e0 10             	shl    eax,0x10
c0018030:	09 c1                	or     ecx,eax
c0018032:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018036:	8d 50 03             	lea    edx,[eax+0x3]
c0018039:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001803d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018041:	0f b6 c0             	movzx  eax,al
c0018044:	c1 e0 18             	shl    eax,0x18
c0018047:	09 c1                	or     ecx,eax
c0018049:	89 ca                	mov    edx,ecx
c001804b:	a0 00 18 03 c0       	mov    al,ds:0xc0031800
c0018050:	0f b6 c0             	movzx  eax,al
c0018053:	89 14 85 40 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7c0],edx
c001805a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001805f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018063:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018067:	01 d0                	add    eax,edx
c0018069:	83 c0 2c             	add    eax,0x2c
c001806c:	8a 00                	mov    al,BYTE PTR [eax]
c001806e:	0f b6 d0             	movzx  edx,al
c0018071:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018075:	8d 48 01             	lea    ecx,[eax+0x1]
c0018078:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001807c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018080:	0f b6 c0             	movzx  eax,al
c0018083:	c1 e0 08             	shl    eax,0x8
c0018086:	89 d1                	mov    ecx,edx
c0018088:	09 c1                	or     ecx,eax
c001808a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001808e:	8d 50 02             	lea    edx,[eax+0x2]
c0018091:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018095:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018099:	0f b6 c0             	movzx  eax,al
c001809c:	c1 e0 10             	shl    eax,0x10
c001809f:	09 c1                	or     ecx,eax
c00180a1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a5:	8d 50 03             	lea    edx,[eax+0x3]
c00180a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180ac:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b0:	0f b6 c0             	movzx  eax,al
c00180b3:	c1 e0 18             	shl    eax,0x18
c00180b6:	09 c1                	or     ecx,eax
c00180b8:	89 ca                	mov    edx,ecx
c00180ba:	a0 00 18 03 c0       	mov    al,ds:0xc0031800
c00180bf:	0f b6 c0             	movzx  eax,al
c00180c2:	89 14 85 c0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce740],edx
c00180c9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180ce:	a0 00 18 03 c0       	mov    al,ds:0xc0031800
c00180d3:	40                   	inc    eax
c00180d4:	a2 00 18 03 c0       	mov    ds:0xc0031800,al
c00180d9:	e9 bb 01 00 00       	jmp    c0018299 <scanMADT()+0x469>
c00180de:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180e3:	0f 85 e9 00 00 00    	jne    c00181d2 <scanMADT()+0x3a2>
c00180e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ed:	8d 50 01             	lea    edx,[eax+0x1]
c00180f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180f8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180fc:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018100:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018104:	8d 50 01             	lea    edx,[eax+0x1]
c0018107:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001810b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001810f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018113:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018117:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001811b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811f:	01 d0                	add    eax,edx
c0018121:	83 c0 2c             	add    eax,0x2c
c0018124:	8a 00                	mov    al,BYTE PTR [eax]
c0018126:	0f b6 d0             	movzx  edx,al
c0018129:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018130:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018134:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018138:	0f b6 c0             	movzx  eax,al
c001813b:	c1 e0 08             	shl    eax,0x8
c001813e:	89 d1                	mov    ecx,edx
c0018140:	09 c1                	or     ecx,eax
c0018142:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018146:	8d 50 02             	lea    edx,[eax+0x2]
c0018149:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001814d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018151:	0f b6 c0             	movzx  eax,al
c0018154:	c1 e0 10             	shl    eax,0x10
c0018157:	09 c1                	or     ecx,eax
c0018159:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001815d:	8d 50 03             	lea    edx,[eax+0x3]
c0018160:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018164:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018168:	0f b6 c0             	movzx  eax,al
c001816b:	c1 e0 18             	shl    eax,0x18
c001816e:	09 c8                	or     eax,ecx
c0018170:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018174:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018179:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001817d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018181:	01 d0                	add    eax,edx
c0018183:	83 c0 2c             	add    eax,0x2c
c0018186:	8a 00                	mov    al,BYTE PTR [eax]
c0018188:	0f b6 c0             	movzx  eax,al
c001818b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001818f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018192:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018196:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001819a:	0f b6 d2             	movzx  edx,dl
c001819d:	c1 e2 08             	shl    edx,0x8
c00181a0:	09 d0                	or     eax,edx
c00181a2:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181a7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181ac:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181b5:	88 90 c0 e0 02 c0    	mov    BYTE PTR [eax-0x3ffd1f40],dl
c00181bb:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181c0:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181c5:	66 89 84 12 e0 17 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce820],ax
c00181cd:	e9 c7 00 00 00       	jmp    c0018299 <scanMADT()+0x469>
c00181d2:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181d7:	0f 85 b0 00 00 00    	jne    c001828d <scanMADT()+0x45d>
c00181dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e1:	8d 50 01             	lea    edx,[eax+0x1]
c00181e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181e8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ec:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181f0:	0f b6 c0             	movzx  eax,al
c00181f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181ff:	01 d0                	add    eax,edx
c0018201:	83 c0 2c             	add    eax,0x2c
c0018204:	8a 00                	mov    al,BYTE PTR [eax]
c0018206:	0f b6 d0             	movzx  edx,al
c0018209:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001820d:	8d 48 01             	lea    ecx,[eax+0x1]
c0018210:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018214:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018218:	0f b6 c0             	movzx  eax,al
c001821b:	c1 e0 08             	shl    eax,0x8
c001821e:	09 d0                	or     eax,edx
c0018220:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018224:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018229:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001822d:	8d 50 01             	lea    edx,[eax+0x1]
c0018230:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018234:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018238:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001823c:	0f b6 c0             	movzx  eax,al
c001823f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018247:	c1 e0 08             	shl    eax,0x8
c001824a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001824e:	89 c1                	mov    ecx,eax
c0018250:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018254:	c1 e0 18             	shl    eax,0x18
c0018257:	89 c3                	mov    ebx,eax
c0018259:	a1 50 17 03 c0       	mov    eax,ds:0xc0031750
c001825e:	8d 50 01             	lea    edx,[eax+0x1]
c0018261:	89 15 50 17 03 c0    	mov    DWORD PTR ds:0xc0031750,edx
c0018267:	09 d9                	or     ecx,ebx
c0018269:	89 ca                	mov    edx,ecx
c001826b:	89 14 85 60 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8a0],edx
c0018272:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001827a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001827e:	68 34 bf 02 c0       	push   0xc002bf34
c0018283:	e8 b9 ab ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0018288:	83 c4 10             	add    esp,0x10
c001828b:	eb 0c                	jmp    c0018299 <scanMADT()+0x469>
c001828d:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018292:	75 05                	jne    c0018299 <scanMADT()+0x469>
c0018294:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018299:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001829e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182a2:	01 d0                	add    eax,edx
c00182a4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182a8:	e9 54 fc ff ff       	jmp    c0017f01 <scanMADT()+0xd1>
c00182ad:	90                   	nop
c00182ae:	eb 01                	jmp    c00182b1 <scanMADT()+0x481>
c00182b0:	90                   	nop
c00182b1:	83 c4 38             	add    esp,0x38
c00182b4:	5b                   	pop    ebx
c00182b5:	c3                   	ret    

c00182b6 <ACPI::ACPI()>:
c00182b6:	83 ec 0c             	sub    esp,0xc
c00182b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182bd:	83 ec 08             	sub    esp,0x8
c00182c0:	68 95 bd 02 c0       	push   0xc002bd95
c00182c5:	50                   	push   eax
c00182c6:	e8 87 c1 ff ff       	call   c0014452 <Device::Device(char const*)>
c00182cb:	83 c4 10             	add    esp,0x10
c00182ce:	ba d0 bf 02 c0       	mov    edx,0xc002bfd0
c00182d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d7:	89 10                	mov    DWORD PTR [eax],edx
c00182d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182dd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e8:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182f6:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018304:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001830b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001830f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018316:	e8 15 fb ff ff       	call   c0017e30 <scanMADT()>
c001831b:	90                   	nop
c001831c:	83 c4 0c             	add    esp,0xc
c001831f:	c3                   	ret    

c0018320 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018320:	83 ec 2c             	sub    esp,0x2c
c0018323:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0018327:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001832b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001832f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018333:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018338:	88 d0                	mov    al,dl
c001833a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001833e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018343:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001834b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001834f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018355:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018359:	0f 8d 97 00 00 00    	jge    c00183f6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001835f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018367:	83 c2 2a             	add    edx,0x2a
c001836a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001836e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018373:	75 78                	jne    c00183ed <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018375:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018379:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001837d:	83 c2 2a             	add    edx,0x2a
c0018380:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018384:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018388:	75 63                	jne    c00183ed <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001838a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001838f:	74 3a                	je     c00183cb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018391:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018395:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018399:	83 c2 2a             	add    edx,0x2a
c001839c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183a7:	39 c2                	cmp    edx,eax
c00183a9:	74 10                	je     c00183bb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183ab:	83 ec 0c             	sub    esp,0xc
c00183ae:	68 70 bf 02 c0       	push   0xc002bf70
c00183b3:	e8 43 24 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00183b8:	83 c4 10             	add    esp,0x10
c00183bb:	83 ec 0c             	sub    esp,0xc
c00183be:	68 9a bd 02 c0       	push   0xc002bd9a
c00183c3:	e8 33 24 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00183c8:	83 c4 10             	add    esp,0x10
c00183cb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183d7:	83 c2 2a             	add    edx,0x2a
c00183da:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183de:	8b 02                	mov    eax,DWORD PTR [edx]
c00183e0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183e3:	89 01                	mov    DWORD PTR [ecx],eax
c00183e5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183e8:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183ed:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183f1:	e9 55 ff ff ff       	jmp    c001834b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183f6:	90                   	nop
c00183f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183fb:	83 c4 2c             	add    esp,0x2c
c00183fe:	c2 04 00             	ret    0x4
c0018401:	90                   	nop

c0018402 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018402:	83 ec 1c             	sub    esp,0x1c
c0018405:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018409:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001840d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018411:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018416:	88 c8                	mov    al,cl
c0018418:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001841c:	88 d0                	mov    al,dl
c001841e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018422:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018426:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001842c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018430:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018433:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0018437:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001843b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001843f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018445:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018449:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001844c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018450:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018459:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001845f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018463:	8d 48 01             	lea    ecx,[eax+0x1]
c0018466:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001846a:	83 c2 2a             	add    edx,0x2a
c001846d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018475:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001847b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001847f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018482:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018486:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001848a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001848e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018494:	8d 50 01             	lea    edx,[eax+0x1]
c0018497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001849b:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184ab:	3d 00 02 00 00       	cmp    eax,0x200
c00184b0:	75 10                	jne    c00184c2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184b2:	83 ec 0c             	sub    esp,0xc
c00184b5:	68 a9 bd 02 c0       	push   0xc002bda9
c00184ba:	e8 3c 23 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c00184bf:	83 c4 10             	add    esp,0x10
c00184c2:	90                   	nop
c00184c3:	83 c4 1c             	add    esp,0x1c
c00184c6:	c3                   	ret    
c00184c7:	90                   	nop

c00184c8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184c8:	b8 00 00 00 00       	mov    eax,0x0
c00184cd:	c3                   	ret    

c00184ce <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184ce:	83 ec 1c             	sub    esp,0x1c
c00184d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184d5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184d8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184dc:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00184e1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184e6:	83 ec 08             	sub    esp,0x8
c00184e9:	52                   	push   edx
c00184ea:	50                   	push   eax
c00184eb:	e8 cc 69 ff ff       	call   c000eebc <Computer::readCMOS(unsigned char)>
c00184f0:	83 c4 10             	add    esp,0x10
c00184f3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184f7:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00184fc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018501:	83 ec 04             	sub    esp,0x4
c0018504:	6a 01                	push   0x1
c0018506:	52                   	push   edx
c0018507:	50                   	push   eax
c0018508:	e8 c5 6a ff ff       	call   c000efd2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001850d:	83 c4 10             	add    esp,0x10
c0018510:	90                   	nop
c0018511:	83 c4 1c             	add    esp,0x1c
c0018514:	c3                   	ret    
c0018515:	90                   	nop

c0018516 <ACPI::sleep()>:
c0018516:	83 ec 0c             	sub    esp,0xc
c0018519:	a1 20 15 03 c0       	mov    eax,ds:0xc0031520
c001851e:	85 c0                	test   eax,eax
c0018520:	74 07                	je     c0018529 <ACPI::sleep()+0x13>
c0018522:	a1 20 15 03 c0       	mov    eax,ds:0xc0031520
c0018527:	ff d0                	call   eax
c0018529:	90                   	nop
c001852a:	83 c4 0c             	add    esp,0xc
c001852d:	c3                   	ret    

c001852e <ACPI::open(int, int, void*)>:
c001852e:	57                   	push   edi
c001852f:	56                   	push   esi
c0018530:	53                   	push   ebx
c0018531:	83 ec 60             	sub    esp,0x60
c0018534:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018538:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001853f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018543:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001854a:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001854f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018555:	83 e0 04             	and    eax,0x4
c0018558:	84 c0                	test   al,al
c001855a:	74 47                	je     c00185a3 <ACPI::open(int, int, void*)+0x75>
c001855c:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c0018561:	83 ec 08             	sub    esp,0x8
c0018564:	68 c6 bd 02 c0       	push   0xc002bdc6
c0018569:	50                   	push   eax
c001856a:	e8 25 f8 ff ff       	call   c0017d94 <findDataTable(unsigned char*, char*)>
c001856f:	83 c4 10             	add    esp,0x10
c0018572:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0018576:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c001857b:	74 26                	je     c00185a3 <ACPI::open(int, int, void*)+0x75>
c001857d:	83 ec 0c             	sub    esp,0xc
c0018580:	68 cb bd 02 c0       	push   0xc002bdcb
c0018585:	e8 b7 a8 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001858a:	83 c4 10             	add    esp,0x10
c001858d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018591:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018598:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001859c:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185a3:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c00185ab:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00185af:	8a 00                	mov    al,BYTE PTR [eax]
c00185b1:	3c 01                	cmp    al,0x1
c00185b3:	75 28                	jne    c00185dd <ACPI::open(int, int, void*)+0xaf>
c00185b5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185b9:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185c0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185c4:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185cb:	83 ec 0c             	sub    esp,0xc
c00185ce:	68 dc bd 02 c0       	push   0xc002bddc
c00185d3:	e8 69 a8 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00185d8:	83 c4 10             	add    esp,0x10
c00185db:	eb 25                	jmp    c0018602 <ACPI::open(int, int, void*)+0xd4>
c00185dd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00185e1:	8a 00                	mov    al,BYTE PTR [eax]
c00185e3:	3c 02                	cmp    al,0x2
c00185e5:	75 1b                	jne    c0018602 <ACPI::open(int, int, void*)+0xd4>
c00185e7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185eb:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185f2:	83 ec 0c             	sub    esp,0xc
c00185f5:	68 e4 bd 02 c0       	push   0xc002bde4
c00185fa:	e8 42 a8 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00185ff:	83 c4 10             	add    esp,0x10
c0018602:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018606:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001860c:	83 f0 01             	xor    eax,0x1
c001860f:	84 c0                	test   al,al
c0018611:	74 6a                	je     c001867d <ACPI::open(int, int, void*)+0x14f>
c0018613:	83 ec 0c             	sub    esp,0xc
c0018616:	68 ec bd 02 c0       	push   0xc002bdec
c001861b:	e8 21 a8 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0018620:	83 c4 10             	add    esp,0x10
c0018623:	e8 28 7b fe ff       	call   c0000150 <manualPCIProbe>
c0018628:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001862c:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c0018631:	75 28                	jne    c001865b <ACPI::open(int, int, void*)+0x12d>
c0018633:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018637:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001863e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018642:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018649:	83 ec 0c             	sub    esp,0xc
c001864c:	68 fa bd 02 c0       	push   0xc002bdfa
c0018651:	e8 eb a7 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0018656:	83 c4 10             	add    esp,0x10
c0018659:	eb 22                	jmp    c001867d <ACPI::open(int, int, void*)+0x14f>
c001865b:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c0018660:	75 1b                	jne    c001867d <ACPI::open(int, int, void*)+0x14f>
c0018662:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018666:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001866d:	83 ec 0c             	sub    esp,0xc
c0018670:	68 04 be 02 c0       	push   0xc002be04
c0018675:	e8 c7 a7 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001867a:	83 c4 10             	add    esp,0x10
c001867d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018681:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018687:	84 c0                	test   al,al
c0018689:	74 13                	je     c001869e <ACPI::open(int, int, void*)+0x170>
c001868b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001868f:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018695:	83 f0 01             	xor    eax,0x1
c0018698:	0f b6 c0             	movzx  eax,al
c001869b:	40                   	inc    eax
c001869c:	eb 05                	jmp    c00186a3 <ACPI::open(int, int, void*)+0x175>
c001869e:	b8 00 00 00 00       	mov    eax,0x0
c00186a3:	83 ec 08             	sub    esp,0x8
c00186a6:	50                   	push   eax
c00186a7:	68 0e be 02 c0       	push   0xc002be0e
c00186ac:	e8 90 a7 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00186b1:	83 c4 10             	add    esp,0x10
c00186b4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186b8:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186be:	84 c0                	test   al,al
c00186c0:	74 67                	je     c0018729 <ACPI::open(int, int, void*)+0x1fb>
c00186c2:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c00186ca:	83 ec 0c             	sub    esp,0xc
c00186cd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00186d1:	e8 d0 71 ff ff       	call   c000f8a6 <malloc>
c00186d6:	83 c4 10             	add    esp,0x10
c00186d9:	89 c3                	mov    ebx,eax
c00186db:	83 ec 0c             	sub    esp,0xc
c00186de:	53                   	push   ebx
c00186df:	e8 50 a9 00 00       	call   c0023034 <PCI::PCI()>
c00186e4:	83 c4 10             	add    esp,0x10
c00186e7:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c00186eb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186ef:	83 ec 08             	sub    esp,0x8
c00186f2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00186f6:	50                   	push   eax
c00186f7:	e8 66 bb ff ff       	call   c0014262 <Device::addChild(Device*)>
c00186fc:	83 c4 10             	add    esp,0x10
c00186ff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018703:	8b 00                	mov    eax,DWORD PTR [eax]
c0018705:	83 c0 08             	add    eax,0x8
c0018708:	8b 00                	mov    eax,DWORD PTR [eax]
c001870a:	6a 00                	push   0x0
c001870c:	6a 00                	push   0x0
c001870e:	6a 00                	push   0x0
c0018710:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018714:	ff d0                	call   eax
c0018716:	83 c4 10             	add    esp,0x10
c0018719:	83 ec 0c             	sub    esp,0xc
c001871c:	68 17 be 02 c0       	push   0xc002be17
c0018721:	e8 1b a7 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0018726:	83 c4 10             	add    esp,0x10
c0018729:	83 ec 0c             	sub    esp,0xc
c001872c:	68 22 be 02 c0       	push   0xc002be22
c0018731:	e8 14 49 00 00       	call   c001d04a <Thr::loadKernelSymbolTable(char const*)>
c0018736:	83 c4 10             	add    esp,0x10
c0018739:	83 ec 0c             	sub    esp,0xc
c001873c:	6a 0c                	push   0xc
c001873e:	e8 37 95 ff ff       	call   c0011c7a <Virt::setupPageSwapping(int)>
c0018743:	83 c4 10             	add    esp,0x10
c0018746:	8d 44 24 28          	lea    eax,[esp+0x28]
c001874a:	83 ec 08             	sub    esp,0x8
c001874d:	6a 12                	push   0x12
c001874f:	50                   	push   eax
c0018750:	e8 7d be ff ff       	call   c00145d2 <getDevicesOfType(DeviceType)>
c0018755:	83 c4 0c             	add    esp,0xc
c0018758:	83 ec 0c             	sub    esp,0xc
c001875b:	8d 44 24 34          	lea    eax,[esp+0x34]
c001875f:	50                   	push   eax
c0018760:	e8 fb 0c 01 00       	call   c0029460 <LinkedList<Device>::isEmpty()>
c0018765:	83 c4 10             	add    esp,0x10
c0018768:	83 f0 01             	xor    eax,0x1
c001876b:	84 c0                	test   al,al
c001876d:	0f 84 fd 00 00 00    	je     c0018870 <ACPI::open(int, int, void*)+0x342>
c0018773:	83 ec 0c             	sub    esp,0xc
c0018776:	8d 44 24 34          	lea    eax,[esp+0x34]
c001877a:	50                   	push   eax
c001877b:	e8 fc 0c 01 00       	call   c002947c <LinkedList<Device>::getFirstElement()>
c0018780:	83 c4 10             	add    esp,0x10
c0018783:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018787:	83 ec 0c             	sub    esp,0xc
c001878a:	8d 44 24 34          	lea    eax,[esp+0x34]
c001878e:	50                   	push   eax
c001878f:	e8 f0 0c 01 00       	call   c0029484 <LinkedList<Device>::removeFirst()>
c0018794:	83 c4 10             	add    esp,0x10
c0018797:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001879b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001879f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00187a3:	83 ec 0c             	sub    esp,0xc
c00187a6:	50                   	push   eax
c00187a7:	e8 a2 bd ff ff       	call   c001454e <Device::getName()>
c00187ac:	83 c4 10             	add    esp,0x10
c00187af:	83 ec 08             	sub    esp,0x8
c00187b2:	50                   	push   eax
c00187b3:	68 a0 bf 02 c0       	push   0xc002bfa0
c00187b8:	e8 84 a6 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00187bd:	83 c4 10             	add    esp,0x10
c00187c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00187c4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00187c8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00187ce:	ba 09 00 00 00       	mov    edx,0x9
c00187d3:	fc                   	cld    
c00187d4:	89 c7                	mov    edi,eax
c00187d6:	89 de                	mov    esi,ebx
c00187d8:	89 d1                	mov    ecx,edx
c00187da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00187dc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00187e0:	0f b6 c0             	movzx  eax,al
c00187e3:	83 ec 08             	sub    esp,0x8
c00187e6:	50                   	push   eax
c00187e7:	68 40 be 02 c0       	push   0xc002be40
c00187ec:	e8 50 a6 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00187f1:	83 c4 10             	add    esp,0x10
c00187f4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00187f8:	0f b6 c0             	movzx  eax,al
c00187fb:	83 ec 08             	sub    esp,0x8
c00187fe:	50                   	push   eax
c00187ff:	68 52 be 02 c0       	push   0xc002be52
c0018804:	e8 38 a6 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0018809:	83 c4 10             	add    esp,0x10
c001880c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0018811:	0f b7 c0             	movzx  eax,ax
c0018814:	83 ec 08             	sub    esp,0x8
c0018817:	50                   	push   eax
c0018818:	68 64 be 02 c0       	push   0xc002be64
c001881d:	e8 1f a6 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0018822:	83 c4 10             	add    esp,0x10
c0018825:	83 ec 0c             	sub    esp,0xc
c0018828:	83 ec 24             	sub    esp,0x24
c001882b:	89 e0                	mov    eax,esp
c001882d:	89 c3                	mov    ebx,eax
c001882f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018833:	ba 09 00 00 00       	mov    edx,0x9
c0018838:	89 df                	mov    edi,ebx
c001883a:	89 c6                	mov    esi,eax
c001883c:	89 d1                	mov    ecx,edx
c001883e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018840:	e8 51 ab 00 00       	call   c0023396 <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c0018845:	83 c4 30             	add    esp,0x30
c0018848:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001884c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018851:	0f 84 01 ff ff ff    	je     c0018758 <ACPI::open(int, int, void*)+0x22a>
c0018857:	83 ec 08             	sub    esp,0x8
c001885a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001885e:	68 76 be 02 c0       	push   0xc002be76
c0018863:	e8 d9 a5 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0018868:	83 c4 10             	add    esp,0x10
c001886b:	e9 e8 fe ff ff       	jmp    c0018758 <ACPI::open(int, int, void*)+0x22a>
c0018870:	83 ec 0c             	sub    esp,0xc
c0018873:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018877:	50                   	push   eax
c0018878:	e8 e1 0b 01 00       	call   c002945e <LinkedList<Device>::~LinkedList()>
c001887d:	83 c4 10             	add    esp,0x10
c0018880:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c0018886:	83 ec 08             	sub    esp,0x8
c0018889:	6a 01                	push   0x1
c001888b:	68 82 be 02 c0       	push   0xc002be82
c0018890:	e8 2c 52 00 00       	call   c001dac1 <Thr::loadDLL(char const*, bool)>
c0018895:	83 c4 10             	add    esp,0x10
c0018898:	83 ec 08             	sub    esp,0x8
c001889b:	53                   	push   ebx
c001889c:	50                   	push   eax
c001889d:	e8 4a 54 00 00       	call   c001dcec <Thr::executeDLL(unsigned long, void*)>
c00188a2:	83 c4 10             	add    esp,0x10
c00188a5:	8b 1d 68 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee68
c00188ab:	83 ec 08             	sub    esp,0x8
c00188ae:	6a 01                	push   0x1
c00188b0:	68 9f be 02 c0       	push   0xc002be9f
c00188b5:	e8 07 52 00 00       	call   c001dac1 <Thr::loadDLL(char const*, bool)>
c00188ba:	83 c4 10             	add    esp,0x10
c00188bd:	83 ec 08             	sub    esp,0x8
c00188c0:	53                   	push   ebx
c00188c1:	50                   	push   eax
c00188c2:	e8 25 54 00 00       	call   c001dcec <Thr::executeDLL(unsigned long, void*)>
c00188c7:	83 c4 10             	add    esp,0x10
c00188ca:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00188cf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00188d5:	83 e0 04             	and    eax,0x4
c00188d8:	84 c0                	test   al,al
c00188da:	0f 84 d3 00 00 00    	je     c00189b3 <ACPI::open(int, int, void*)+0x485>
c00188e0:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c00188e8:	83 ec 0c             	sub    esp,0xc
c00188eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00188ef:	e8 b2 6f ff ff       	call   c000f8a6 <malloc>
c00188f4:	83 c4 10             	add    esp,0x10
c00188f7:	89 c3                	mov    ebx,eax
c00188f9:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00188fe:	83 ec 04             	sub    esp,0x4
c0018901:	50                   	push   eax
c0018902:	68 bc be 02 c0       	push   0xc002bebc
c0018907:	53                   	push   ebx
c0018908:	e8 93 aa ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001890d:	83 c4 10             	add    esp,0x10
c0018910:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0018914:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018919:	74 17                	je     c0018932 <ACPI::open(int, int, void*)+0x404>
c001891b:	83 ec 0c             	sub    esp,0xc
c001891e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018922:	e8 4b ad ff ff       	call   c0013672 <File::exists()>
c0018927:	83 c4 10             	add    esp,0x10
c001892a:	84 c0                	test   al,al
c001892c:	74 04                	je     c0018932 <ACPI::open(int, int, void*)+0x404>
c001892e:	b0 01                	mov    al,0x1
c0018930:	eb 02                	jmp    c0018934 <ACPI::open(int, int, void*)+0x406>
c0018932:	b0 00                	mov    al,0x0
c0018934:	84 c0                	test   al,al
c0018936:	74 22                	je     c001895a <ACPI::open(int, int, void*)+0x42c>
c0018938:	83 ec 08             	sub    esp,0x8
c001893b:	6a 01                	push   0x1
c001893d:	68 bc be 02 c0       	push   0xc002bebc
c0018942:	e8 7a 51 00 00       	call   c001dac1 <Thr::loadDLL(char const*, bool)>
c0018947:	83 c4 10             	add    esp,0x10
c001894a:	83 ec 08             	sub    esp,0x8
c001894d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0018951:	50                   	push   eax
c0018952:	e8 95 53 00 00       	call   c001dcec <Thr::executeDLL(unsigned long, void*)>
c0018957:	83 c4 10             	add    esp,0x10
c001895a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001895f:	74 1e                	je     c001897f <ACPI::open(int, int, void*)+0x451>
c0018961:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018966:	74 17                	je     c001897f <ACPI::open(int, int, void*)+0x451>
c0018968:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001896c:	8b 00                	mov    eax,DWORD PTR [eax]
c001896e:	83 c0 08             	add    eax,0x8
c0018971:	8b 00                	mov    eax,DWORD PTR [eax]
c0018973:	83 ec 0c             	sub    esp,0xc
c0018976:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001897a:	ff d0                	call   eax
c001897c:	83 c4 10             	add    esp,0x10
c001897f:	a1 48 17 03 c0       	mov    eax,ds:0xc0031748
c0018984:	83 ec 08             	sub    esp,0x8
c0018987:	68 d9 be 02 c0       	push   0xc002bed9
c001898c:	50                   	push   eax
c001898d:	e8 02 f4 ff ff       	call   c0017d94 <findDataTable(unsigned char*, char*)>
c0018992:	83 c4 10             	add    esp,0x10
c0018995:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018999:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c001899e:	74 13                	je     c00189b3 <ACPI::open(int, int, void*)+0x485>
c00189a0:	83 ec 08             	sub    esp,0x8
c00189a3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00189a7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00189ab:	e8 1e fb ff ff       	call   c00184ce <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00189b0:	83 c4 10             	add    esp,0x10
c00189b3:	b8 00 00 00 00       	mov    eax,0x0
c00189b8:	83 c4 60             	add    esp,0x60
c00189bb:	5b                   	pop    ebx
c00189bc:	5e                   	pop    esi
c00189bd:	5f                   	pop    edi
c00189be:	c3                   	ret    
c00189bf:	90                   	nop

c00189c0 <CPU::close(int, int, void*)>:
c00189c0:	31 c0                	xor    eax,eax
c00189c2:	c3                   	ret    
c00189c3:	90                   	nop

c00189c4 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00189c4:	55                   	push   ebp
c00189c5:	57                   	push   edi
c00189c6:	56                   	push   esi
c00189c7:	53                   	push   ebx
c00189c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00189cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189d0:	89 ce                	mov    esi,ecx
c00189d2:	89 d5                	mov    ebp,edx
c00189d4:	80 f9 04             	cmp    cl,0x4
c00189d7:	75 28                	jne    c0018a01 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00189d9:	8d 42 f9             	lea    eax,[edx-0x7]
c00189dc:	3c 03                	cmp    al,0x3
c00189de:	0f 86 63 01 00 00    	jbe    c0018b47 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00189e4:	80 fa 03             	cmp    dl,0x3
c00189e7:	0f 84 5a 01 00 00    	je     c0018b47 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00189ed:	8d 7a f2             	lea    edi,[edx-0xe]
c00189f0:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c00189f5:	89 fb                	mov    ebx,edi
c00189f7:	80 fb 01             	cmp    bl,0x1
c00189fa:	77 4e                	ja     c0018a4a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00189fc:	e9 52 01 00 00       	jmp    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a01:	80 f9 05             	cmp    cl,0x5
c0018a04:	75 4d                	jne    c0018a53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018a06:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018a0b:	80 fa 03             	cmp    dl,0x3
c0018a0e:	0f 86 3f 01 00 00    	jbe    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a14:	8d 7a fa             	lea    edi,[edx-0x6]
c0018a17:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018a1c:	89 fb                	mov    ebx,edi
c0018a1e:	80 fb 01             	cmp    bl,0x1
c0018a21:	0f 86 2c 01 00 00    	jbe    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a27:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018a2c:	80 fa 08             	cmp    dl,0x8
c0018a2f:	0f 84 1e 01 00 00    	je     c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a35:	89 d7                	mov    edi,edx
c0018a37:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c0018a3c:	83 e7 fb             	and    edi,0xfffffffb
c0018a3f:	89 fb                	mov    ebx,edi
c0018a41:	80 fb 09             	cmp    bl,0x9
c0018a44:	0f 84 09 01 00 00    	je     c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a4a:	31 c0                	xor    eax,eax
c0018a4c:	89 eb                	mov    ebx,ebp
c0018a4e:	0f b6 fb             	movzx  edi,bl
c0018a51:	eb 30                	jmp    c0018a83 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018a53:	31 c0                	xor    eax,eax
c0018a55:	80 f9 06             	cmp    cl,0x6
c0018a58:	75 f2                	jne    c0018a4c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a5a:	80 fa 0a             	cmp    dl,0xa
c0018a5d:	77 ed                	ja     c0018a4c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a5f:	bf de 05 00 00       	mov    edi,0x5de
c0018a64:	0f a3 d7             	bt     edi,edx
c0018a67:	73 e3                	jae    c0018a4c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a69:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018a6e:	e9 e0 00 00 00       	jmp    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a73:	39 c7                	cmp    edi,eax
c0018a75:	0f 84 d3 00 00 00    	je     c0018b4e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018a7b:	40                   	inc    eax
c0018a7c:	3d d0 00 00 00       	cmp    eax,0xd0
c0018a81:	74 09                	je     c0018a8c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018a83:	89 f3                	mov    ebx,esi
c0018a85:	80 fb 0f             	cmp    bl,0xf
c0018a88:	75 f1                	jne    c0018a7b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018a8a:	eb e7                	jmp    c0018a73 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018a8c:	80 f9 10             	cmp    cl,0x10
c0018a8f:	75 14                	jne    c0018aa5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018a91:	8d 42 fc             	lea    eax,[edx-0x4]
c0018a94:	83 e0 fb             	and    eax,0xfffffffb
c0018a97:	3c 02                	cmp    al,0x2
c0018a99:	76 34                	jbe    c0018acf <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018a9b:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018aa0:	80 fa 02             	cmp    dl,0x2
c0018aa3:	eb 24                	jmp    c0018ac9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018aa5:	80 f9 11             	cmp    cl,0x11
c0018aa8:	75 13                	jne    c0018abd <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018aaa:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018aaf:	80 fa 03             	cmp    dl,0x3
c0018ab2:	0f 85 9b 00 00 00    	jne    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ab8:	e9 91 00 00 00       	jmp    c0018b4e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018abd:	80 f9 12             	cmp    cl,0x12
c0018ac0:	75 14                	jne    c0018ad6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018ac2:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018ac7:	fe ca                	dec    dl
c0018ac9:	0f 85 84 00 00 00    	jne    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018acf:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018ad4:	eb 7d                	jmp    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ad6:	80 f9 14             	cmp    cl,0x14
c0018ad9:	75 12                	jne    c0018aed <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018adb:	4a                   	dec    edx
c0018adc:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018ae1:	80 fa 01             	cmp    dl,0x1
c0018ae4:	77 6d                	ja     c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ae6:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018aeb:	eb 66                	jmp    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aed:	80 f9 15             	cmp    cl,0x15
c0018af0:	75 31                	jne    c0018b23 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018af2:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018af7:	80 fa 01             	cmp    dl,0x1
c0018afa:	74 57                	je     c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018afc:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018b01:	80 fa 13             	cmp    dl,0x13
c0018b04:	76 0c                	jbe    c0018b12 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018b06:	80 fa 30             	cmp    dl,0x30
c0018b09:	75 48                	jne    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b0b:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018b10:	eb 41                	jmp    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b12:	b9 04 00 09 00       	mov    ecx,0x90004
c0018b17:	0f a3 d1             	bt     ecx,edx
c0018b1a:	73 37                	jae    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b1c:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018b21:	eb 30                	jmp    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b23:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018b28:	80 f9 16             	cmp    cl,0x16
c0018b2b:	75 26                	jne    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b2d:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c0018b32:	84 d2                	test   dl,dl
c0018b34:	74 1d                	je     c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b36:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018b3b:	80 fa 30             	cmp    dl,0x30
c0018b3e:	75 13                	jne    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b40:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018b45:	eb 0c                	jmp    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b47:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018b4c:	eb 05                	jmp    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b4e:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018b53:	5b                   	pop    ebx
c0018b54:	5e                   	pop    esi
c0018b55:	5f                   	pop    edi
c0018b56:	5d                   	pop    ebp
c0018b57:	c3                   	ret    

c0018b58 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018b58:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b60:	80 f9 04             	cmp    cl,0x4
c0018b63:	75 6b                	jne    c0018bd0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018b65:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018b6a:	80 fa 01             	cmp    dl,0x1
c0018b6d:	0f 86 92 02 00 00    	jbe    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b73:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c0018b78:	80 fa 02             	cmp    dl,0x2
c0018b7b:	0f 84 84 02 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b81:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018b86:	80 fa 03             	cmp    dl,0x3
c0018b89:	0f 84 76 02 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b8f:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018b94:	80 fa 04             	cmp    dl,0x4
c0018b97:	0f 84 68 02 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b9d:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0018ba2:	80 fa 05             	cmp    dl,0x5
c0018ba5:	0f 84 5a 02 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bab:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018bb0:	80 fa 07             	cmp    dl,0x7
c0018bb3:	0f 84 4c 02 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb9:	83 ea 08             	sub    edx,0x8
c0018bbc:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018bc1:	80 fa 01             	cmp    dl,0x1
c0018bc4:	0f 87 3b 02 00 00    	ja     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bca:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018bcf:	c3                   	ret    
c0018bd0:	80 f9 05             	cmp    cl,0x5
c0018bd3:	75 45                	jne    c0018c1a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018bd5:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018bd8:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018bdd:	80 f9 02             	cmp    cl,0x2
c0018be0:	0f 86 1f 02 00 00    	jbe    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018be6:	80 fa 04             	cmp    dl,0x4
c0018be9:	0f 84 f3 01 00 00    	je     c0018de2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018bef:	80 fa 07             	cmp    dl,0x7
c0018bf2:	0f 84 0d 02 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf8:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018bfd:	80 fa 08             	cmp    dl,0x8
c0018c00:	0f 84 ff 01 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c06:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018c0b:	80 fa 09             	cmp    dl,0x9
c0018c0e:	0f 85 f1 01 00 00    	jne    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c14:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018c19:	c3                   	ret    
c0018c1a:	80 f9 06             	cmp    cl,0x6
c0018c1d:	0f 85 85 01 00 00    	jne    c0018da8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018c23:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018c28:	80 fa 01             	cmp    dl,0x1
c0018c2b:	0f 84 d4 01 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c31:	8d 42 fb             	lea    eax,[edx-0x5]
c0018c34:	3c 01                	cmp    al,0x1
c0018c36:	0f 86 ac 01 00 00    	jbe    c0018de8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c3c:	80 fa 03             	cmp    dl,0x3
c0018c3f:	0f 84 a3 01 00 00    	je     c0018de8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c45:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018c48:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018c4d:	80 f9 01             	cmp    cl,0x1
c0018c50:	0f 86 af 01 00 00    	jbe    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c56:	80 fa 09             	cmp    dl,0x9
c0018c59:	0f 84 8f 01 00 00    	je     c0018dee <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018c5f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018c62:	80 f9 01             	cmp    cl,0x1
c0018c65:	0f 86 9a 01 00 00    	jbe    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c6b:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018c70:	80 fa 0d             	cmp    dl,0xd
c0018c73:	0f 84 8c 01 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c79:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018c7e:	80 fa 0e             	cmp    dl,0xe
c0018c81:	0f 84 7e 01 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c87:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018c8c:	80 fa 0f             	cmp    dl,0xf
c0018c8f:	0f 84 70 01 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c95:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018c9a:	80 fa 15             	cmp    dl,0x15
c0018c9d:	0f 84 62 01 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca3:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018ca6:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018cab:	80 f9 01             	cmp    cl,0x1
c0018cae:	0f 86 51 01 00 00    	jbe    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cb4:	80 fa 1a             	cmp    dl,0x1a
c0018cb7:	0f 84 37 01 00 00    	je     c0018df4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018cbd:	80 fa 1c             	cmp    dl,0x1c
c0018cc0:	0f 84 34 01 00 00    	je     c0018dfa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018cc6:	80 fa 1d             	cmp    dl,0x1d
c0018cc9:	0f 84 36 01 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ccf:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018cd4:	80 fa 25             	cmp    dl,0x25
c0018cd7:	0f 84 28 01 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cdd:	8d 4a da             	lea    ecx,[edx-0x26]
c0018ce0:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018ce5:	80 f9 01             	cmp    cl,0x1
c0018ce8:	0f 86 17 01 00 00    	jbe    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cee:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018cf3:	80 fa 2a             	cmp    dl,0x2a
c0018cf6:	0f 84 09 01 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cfc:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018d01:	80 fa 2c             	cmp    dl,0x2c
c0018d04:	0f 84 fb 00 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d0a:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018d0f:	80 fa 2d             	cmp    dl,0x2d
c0018d12:	0f 84 ed 00 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d18:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018d1d:	80 fa 2e             	cmp    dl,0x2e
c0018d20:	0f 84 df 00 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d26:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018d2b:	80 fa 2f             	cmp    dl,0x2f
c0018d2e:	0f 84 d1 00 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d34:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018d37:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018d3c:	80 f9 01             	cmp    cl,0x1
c0018d3f:	0f 86 c0 00 00 00    	jbe    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d45:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018d4a:	80 fa 37             	cmp    dl,0x37
c0018d4d:	0f 84 b2 00 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d53:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018d58:	80 fa 3a             	cmp    dl,0x3a
c0018d5b:	0f 84 a4 00 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d61:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018d66:	80 fa 3c             	cmp    dl,0x3c
c0018d69:	0f 84 96 00 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d6f:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018d74:	80 fa 3d             	cmp    dl,0x3d
c0018d77:	0f 84 88 00 00 00    	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d7d:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018d82:	80 fa 3e             	cmp    dl,0x3e
c0018d85:	74 7e                	je     c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d87:	8d 42 bb             	lea    eax,[edx-0x45]
c0018d8a:	3c 01                	cmp    al,0x1
c0018d8c:	76 72                	jbe    c0018e00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018d8e:	80 fa 3f             	cmp    dl,0x3f
c0018d91:	74 6d                	je     c0018e00 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018d93:	80 fa 4a             	cmp    dl,0x4a
c0018d96:	74 0a                	je     c0018da2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018d98:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018d9d:	80 fa 4d             	cmp    dl,0x4d
c0018da0:	75 63                	jne    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da2:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018da7:	c3                   	ret    
c0018da8:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018dad:	80 f9 0b             	cmp    cl,0xb
c0018db0:	75 0a                	jne    c0018dbc <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018db2:	fe ca                	dec    dl
c0018db4:	75 4f                	jne    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db6:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018dbb:	c3                   	ret    
c0018dbc:	80 f9 0f             	cmp    cl,0xf
c0018dbf:	75 44                	jne    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc1:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018dc6:	80 fa 02             	cmp    dl,0x2
c0018dc9:	76 3a                	jbe    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcb:	8d 42 fd             	lea    eax,[edx-0x3]
c0018dce:	3c 01                	cmp    al,0x1
c0018dd0:	76 0a                	jbe    c0018ddc <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018dd2:	b8 e6 c2 02 c0       	mov    eax,0xc002c2e6
c0018dd7:	80 fa 06             	cmp    dl,0x6
c0018dda:	75 29                	jne    c0018e05 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ddc:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018de1:	c3                   	ret    
c0018de2:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018de7:	c3                   	ret    
c0018de8:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018ded:	c3                   	ret    
c0018dee:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018df3:	c3                   	ret    
c0018df4:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018df9:	c3                   	ret    
c0018dfa:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018dff:	c3                   	ret    
c0018e00:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018e05:	c3                   	ret    

c0018e06 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018e06:	60                   	pusha  
c0018e07:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e13:	9c                   	pushf  
c0018e14:	fa                   	cli    
c0018e15:	0f 09                	wbinvd 
c0018e17:	0f 30                	wrmsr  
c0018e19:	9d                   	popf   
c0018e1a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e1e:	89 02                	mov    DWORD PTR [edx],eax
c0018e20:	61                   	popa   
c0018e21:	c3                   	ret    

c0018e22 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018e22:	60                   	pusha  
c0018e23:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e27:	9c                   	pushf  
c0018e28:	fa                   	cli    
c0018e29:	0f 09                	wbinvd 
c0018e2b:	31 c0                	xor    eax,eax
c0018e2d:	31 d2                	xor    edx,edx
c0018e2f:	0f 32                	rdmsr  
c0018e31:	9d                   	popf   
c0018e32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018e36:	89 02                	mov    DWORD PTR [edx],eax
c0018e38:	61                   	popa   
c0018e39:	c3                   	ret    

c0018e3a <CPU::AMD_K6_writeback(int, int, int)>:
c0018e3a:	56                   	push   esi
c0018e3b:	53                   	push   ebx
c0018e3c:	83 ec 10             	sub    esp,0x10
c0018e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e43:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018e48:	75 5d                	jne    c0018ea7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e4a:	83 f8 08             	cmp    eax,0x8
c0018e4d:	75 09                	jne    c0018e58 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018e4f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018e54:	7e 13                	jle    c0018e69 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018e56:	eb 30                	jmp    c0018e88 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018e58:	83 f8 06             	cmp    eax,0x6
c0018e5b:	7c 4a                	jl     c0018ea7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e5d:	83 f8 07             	cmp    eax,0x7
c0018e60:	7e 07                	jle    c0018e69 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018e62:	83 f8 09             	cmp    eax,0x9
c0018e65:	74 21                	je     c0018e88 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018e67:	eb 3e                	jmp    c0018ea7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e69:	89 e6                	mov    esi,esp
c0018e6b:	8b 1d a8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eea8
c0018e71:	56                   	push   esi
c0018e72:	c1 eb 15             	shr    ebx,0x15
c0018e75:	68 82 00 00 c0       	push   0xc0000082
c0018e7a:	83 e3 7e             	and    ebx,0x7e
c0018e7d:	e8 a0 ff ff ff       	call   c0018e22 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018e82:	56                   	push   esi
c0018e83:	6a 00                	push   0x0
c0018e85:	53                   	push   ebx
c0018e86:	eb 12                	jmp    c0018e9a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018e88:	89 e3                	mov    ebx,esp
c0018e8a:	53                   	push   ebx
c0018e8b:	68 82 00 00 c0       	push   0xc0000082
c0018e90:	e8 8d ff ff ff       	call   c0018e22 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018e95:	53                   	push   ebx
c0018e96:	6a 00                	push   0x0
c0018e98:	6a 00                	push   0x0
c0018e9a:	68 82 00 00 c0       	push   0xc0000082
c0018e9f:	e8 62 ff ff ff       	call   c0018e06 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018ea4:	83 c4 18             	add    esp,0x18
c0018ea7:	83 c4 10             	add    esp,0x10
c0018eaa:	5b                   	pop    ebx
c0018eab:	5e                   	pop    esi
c0018eac:	c3                   	ret    
c0018ead:	90                   	nop

c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018eae:	55                   	push   ebp
c0018eaf:	57                   	push   edi
c0018eb0:	56                   	push   esi
c0018eb1:	53                   	push   ebx
c0018eb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018eb6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018eba:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018ebe:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ec2:	39 05 80 e3 02 c0    	cmp    DWORD PTR ds:0xc002e380,eax
c0018ec8:	75 23                	jne    c0018eed <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018eca:	a1 ac 19 03 c0       	mov    eax,ds:0xc00319ac
c0018ecf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ed3:	89 06                	mov    DWORD PTR [esi],eax
c0018ed5:	a1 a8 19 03 c0       	mov    eax,ds:0xc00319a8
c0018eda:	89 07                	mov    DWORD PTR [edi],eax
c0018edc:	a1 a4 19 03 c0       	mov    eax,ds:0xc00319a4
c0018ee1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018ee4:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c0018ee9:	89 02                	mov    DWORD PTR [edx],eax
c0018eeb:	eb 3f                	jmp    c0018f2c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018eed:	31 c9                	xor    ecx,ecx
c0018eef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ef3:	0f a2                	cpuid  
c0018ef5:	89 06                	mov    DWORD PTR [esi],eax
c0018ef7:	89 1f                	mov    DWORD PTR [edi],ebx
c0018ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018efd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f00:	89 10                	mov    DWORD PTR [eax],edx
c0018f02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f06:	a3 80 e3 02 c0       	mov    ds:0xc002e380,eax
c0018f0b:	8b 06                	mov    eax,DWORD PTR [esi]
c0018f0d:	a3 ac 19 03 c0       	mov    ds:0xc00319ac,eax
c0018f12:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f14:	a3 a8 19 03 c0       	mov    ds:0xc00319a8,eax
c0018f19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f1c:	a3 a4 19 03 c0       	mov    ds:0xc00319a4,eax
c0018f21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f25:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f27:	a3 a0 19 03 c0       	mov    ds:0xc00319a0,eax
c0018f2c:	5b                   	pop    ebx
c0018f2d:	5e                   	pop    esi
c0018f2e:	5f                   	pop    edi
c0018f2f:	5d                   	pop    ebp
c0018f30:	c3                   	ret    
c0018f31:	90                   	nop

c0018f32 <CPU::cpuidCheckEDX(unsigned int)>:
c0018f32:	83 ec 10             	sub    esp,0x10
c0018f35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f39:	50                   	push   eax
c0018f3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f3e:	50                   	push   eax
c0018f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f43:	50                   	push   eax
c0018f44:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f48:	50                   	push   eax
c0018f49:	6a 01                	push   0x1
c0018f4b:	e8 5e ff ff ff       	call   c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f50:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f54:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018f58:	0f 95 c0             	setne  al
c0018f5b:	83 c4 24             	add    esp,0x24
c0018f5e:	c3                   	ret    
c0018f5f:	90                   	nop

c0018f60 <CPU::cpuidCheckECX(unsigned int)>:
c0018f60:	83 ec 10             	sub    esp,0x10
c0018f63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f67:	50                   	push   eax
c0018f68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f6c:	50                   	push   eax
c0018f6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f71:	50                   	push   eax
c0018f72:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f76:	50                   	push   eax
c0018f77:	6a 01                	push   0x1
c0018f79:	e8 30 ff ff ff       	call   c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f7e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f82:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018f86:	0f 95 c0             	setne  al
c0018f89:	83 c4 24             	add    esp,0x24
c0018f8c:	c3                   	ret    
c0018f8d:	90                   	nop

c0018f8e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018f8e:	83 ec 10             	sub    esp,0x10
c0018f91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f95:	50                   	push   eax
c0018f96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f9a:	50                   	push   eax
c0018f9b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f9f:	50                   	push   eax
c0018fa0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fa4:	50                   	push   eax
c0018fa5:	6a 07                	push   0x7
c0018fa7:	e8 02 ff ff ff       	call   c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fb0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018fb4:	0f 95 c0             	setne  al
c0018fb7:	83 c4 24             	add    esp,0x24
c0018fba:	c3                   	ret    
c0018fbb:	90                   	nop

c0018fbc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018fbc:	83 ec 10             	sub    esp,0x10
c0018fbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc3:	50                   	push   eax
c0018fc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc8:	50                   	push   eax
c0018fc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fcd:	50                   	push   eax
c0018fce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fd2:	50                   	push   eax
c0018fd3:	6a 07                	push   0x7
c0018fd5:	e8 d4 fe ff ff       	call   c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fde:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018fe2:	0f 95 c0             	setne  al
c0018fe5:	83 c4 24             	add    esp,0x24
c0018fe8:	c3                   	ret    
c0018fe9:	90                   	nop

c0018fea <CPU::CPU()>:
c0018fea:	83 ec 0c             	sub    esp,0xc
c0018fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ff1:	83 ec 08             	sub    esp,0x8
c0018ff4:	68 e6 c2 02 c0       	push   0xc002c2e6
c0018ff9:	50                   	push   eax
c0018ffa:	e8 53 b4 ff ff       	call   c0014452 <Device::Device(char const*)>
c0018fff:	83 c4 10             	add    esp,0x10
c0019002:	ba c0 c3 02 c0       	mov    edx,0xc002c3c0
c0019007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001900b:	89 10                	mov    DWORD PTR [eax],edx
c001900d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019011:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001901b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001901f:	05 78 01 00 00       	add    eax,0x178
c0019024:	83 ec 0c             	sub    esp,0xc
c0019027:	50                   	push   eax
c0019028:	e8 8f 60 ff ff       	call   c000f0bc <GDT::GDT()>
c001902d:	83 c4 10             	add    esp,0x10
c0019030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019034:	05 7c 09 00 00       	add    eax,0x97c
c0019039:	83 ec 0c             	sub    esp,0xc
c001903c:	50                   	push   eax
c001903d:	e8 e4 62 ff ff       	call   c000f326 <IDT::IDT()>
c0019042:	83 c4 10             	add    esp,0x10
c0019045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019049:	05 7c 11 00 00       	add    eax,0x117c
c001904e:	83 ec 0c             	sub    esp,0xc
c0019051:	50                   	push   eax
c0019052:	e8 15 83 ff ff       	call   c001136c <TSS::TSS()>
c0019057:	83 c4 10             	add    esp,0x10
c001905a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001905e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0019065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019069:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0019073:	90                   	nop
c0019074:	83 c4 0c             	add    esp,0xc
c0019077:	c3                   	ret    

c0019078 <CPU::displayFeatures()>:
c0019078:	53                   	push   ebx
c0019079:	83 ec 10             	sub    esp,0x10
c001907c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019080:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019086:	68 f4 bf 02 c0       	push   0xc002bff4
c001908b:	e8 b1 9d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0019090:	59                   	pop    ecx
c0019091:	58                   	pop    eax
c0019092:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0019098:	50                   	push   eax
c0019099:	68 05 c0 02 c0       	push   0xc002c005
c001909e:	e8 9e 9d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00190a3:	58                   	pop    eax
c00190a4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190aa:	5a                   	pop    edx
c00190ab:	c1 e8 0e             	shr    eax,0xe
c00190ae:	0f b6 c0             	movzx  eax,al
c00190b1:	50                   	push   eax
c00190b2:	68 16 c0 02 c0       	push   0xc002c016
c00190b7:	e8 85 9d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00190bc:	59                   	pop    ecx
c00190bd:	58                   	pop    eax
c00190be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190c4:	66 c1 e8 06          	shr    ax,0x6
c00190c8:	0f b6 c0             	movzx  eax,al
c00190cb:	50                   	push   eax
c00190cc:	68 27 c0 02 c0       	push   0xc002c027
c00190d1:	e8 6b 9d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00190d6:	c7 04 24 d4 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4d4
c00190dd:	e8 5f 9d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00190e2:	83 c4 10             	add    esp,0x10
c00190e5:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00190ea:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00190f1:	74 05                	je     c00190f8 <CPU::displayFeatures()+0x80>
c00190f3:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00190f8:	52                   	push   edx
c00190f9:	52                   	push   edx
c00190fa:	50                   	push   eax
c00190fb:	68 38 c0 02 c0       	push   0xc002c038
c0019100:	e8 3c 9d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0019105:	83 c4 10             	add    esp,0x10
c0019108:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c001910d:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0019114:	78 05                	js     c001911b <CPU::displayFeatures()+0xa3>
c0019116:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c001911b:	51                   	push   ecx
c001911c:	51                   	push   ecx
c001911d:	50                   	push   eax
c001911e:	68 4f c0 02 c0       	push   0xc002c04f
c0019123:	e8 19 9d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0019128:	83 c4 10             	add    esp,0x10
c001912b:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019130:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0019137:	75 05                	jne    c001913e <CPU::displayFeatures()+0xc6>
c0019139:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c001913e:	52                   	push   edx
c001913f:	52                   	push   edx
c0019140:	50                   	push   eax
c0019141:	68 66 c0 02 c0       	push   0xc002c066
c0019146:	e8 f6 9c ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001914b:	83 c4 10             	add    esp,0x10
c001914e:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019153:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001915a:	75 05                	jne    c0019161 <CPU::displayFeatures()+0xe9>
c001915c:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019161:	51                   	push   ecx
c0019162:	51                   	push   ecx
c0019163:	50                   	push   eax
c0019164:	68 7d c0 02 c0       	push   0xc002c07d
c0019169:	e8 d3 9c ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001916e:	83 c4 10             	add    esp,0x10
c0019171:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019176:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001917d:	75 05                	jne    c0019184 <CPU::displayFeatures()+0x10c>
c001917f:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019184:	52                   	push   edx
c0019185:	52                   	push   edx
c0019186:	50                   	push   eax
c0019187:	68 94 c0 02 c0       	push   0xc002c094
c001918c:	e8 b0 9c ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0019191:	83 c4 10             	add    esp,0x10
c0019194:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019199:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00191a0:	75 05                	jne    c00191a7 <CPU::displayFeatures()+0x12f>
c00191a2:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00191a7:	51                   	push   ecx
c00191a8:	51                   	push   ecx
c00191a9:	50                   	push   eax
c00191aa:	68 ab c0 02 c0       	push   0xc002c0ab
c00191af:	e8 8d 9c ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00191b4:	83 c4 10             	add    esp,0x10
c00191b7:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00191bc:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00191c3:	75 05                	jne    c00191ca <CPU::displayFeatures()+0x152>
c00191c5:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00191ca:	52                   	push   edx
c00191cb:	52                   	push   edx
c00191cc:	50                   	push   eax
c00191cd:	68 c2 c0 02 c0       	push   0xc002c0c2
c00191d2:	e8 6a 9c ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00191d7:	83 c4 10             	add    esp,0x10
c00191da:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00191df:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00191e6:	75 05                	jne    c00191ed <CPU::displayFeatures()+0x175>
c00191e8:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00191ed:	51                   	push   ecx
c00191ee:	51                   	push   ecx
c00191ef:	50                   	push   eax
c00191f0:	68 d9 c0 02 c0       	push   0xc002c0d9
c00191f5:	e8 47 9c ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00191fa:	83 c4 10             	add    esp,0x10
c00191fd:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019202:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019209:	75 05                	jne    c0019210 <CPU::displayFeatures()+0x198>
c001920b:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019210:	52                   	push   edx
c0019211:	52                   	push   edx
c0019212:	50                   	push   eax
c0019213:	68 f0 c0 02 c0       	push   0xc002c0f0
c0019218:	e8 24 9c ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001921d:	83 c4 10             	add    esp,0x10
c0019220:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019225:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001922c:	75 05                	jne    c0019233 <CPU::displayFeatures()+0x1bb>
c001922e:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019233:	51                   	push   ecx
c0019234:	51                   	push   ecx
c0019235:	50                   	push   eax
c0019236:	68 07 c1 02 c0       	push   0xc002c107
c001923b:	e8 01 9c ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0019240:	83 c4 10             	add    esp,0x10
c0019243:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c0019248:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001924f:	75 05                	jne    c0019256 <CPU::displayFeatures()+0x1de>
c0019251:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019256:	52                   	push   edx
c0019257:	52                   	push   edx
c0019258:	50                   	push   eax
c0019259:	68 1e c1 02 c0       	push   0xc002c11e
c001925e:	e8 de 9b ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0019263:	83 c4 10             	add    esp,0x10
c0019266:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c001926b:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019272:	75 05                	jne    c0019279 <CPU::displayFeatures()+0x201>
c0019274:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c0019279:	51                   	push   ecx
c001927a:	51                   	push   ecx
c001927b:	50                   	push   eax
c001927c:	68 35 c1 02 c0       	push   0xc002c135
c0019281:	e8 bb 9b ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0019286:	83 c4 10             	add    esp,0x10
c0019289:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c001928e:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019295:	75 05                	jne    c001929c <CPU::displayFeatures()+0x224>
c0019297:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c001929c:	52                   	push   edx
c001929d:	52                   	push   edx
c001929e:	50                   	push   eax
c001929f:	68 4c c1 02 c0       	push   0xc002c14c
c00192a4:	e8 98 9b ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00192a9:	83 c4 10             	add    esp,0x10
c00192ac:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00192b1:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00192b8:	78 05                	js     c00192bf <CPU::displayFeatures()+0x247>
c00192ba:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00192bf:	51                   	push   ecx
c00192c0:	51                   	push   ecx
c00192c1:	50                   	push   eax
c00192c2:	68 63 c1 02 c0       	push   0xc002c163
c00192c7:	e8 75 9b ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00192cc:	83 c4 10             	add    esp,0x10
c00192cf:	b8 32 a9 02 c0       	mov    eax,0xc002a932
c00192d4:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00192db:	75 05                	jne    c00192e2 <CPU::displayFeatures()+0x26a>
c00192dd:	b8 36 a9 02 c0       	mov    eax,0xc002a936
c00192e2:	52                   	push   edx
c00192e3:	52                   	push   edx
c00192e4:	50                   	push   eax
c00192e5:	68 7a c1 02 c0       	push   0xc002c17a
c00192ea:	e8 52 9b ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00192ef:	83 c4 18             	add    esp,0x18
c00192f2:	5b                   	pop    ebx
c00192f3:	c3                   	ret    

c00192f4 <CPU::detectFeatures()>:
c00192f4:	55                   	push   ebp
c00192f5:	57                   	push   edi
c00192f6:	56                   	push   esi
c00192f7:	53                   	push   ebx
c00192f8:	83 ec 40             	sub    esp,0x40
c00192fb:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c00192ff:	81 a5 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebp+0x1190],0xfff80700
c0019309:	c6 85 94 11 00 00 01 	mov    BYTE PTR [ebp+0x1194],0x1
c0019310:	8d 9d 5f 01 00 00    	lea    ebx,[ebp+0x15f]
c0019316:	6a 0d                	push   0xd
c0019318:	6a 00                	push   0x0
c001931a:	53                   	push   ebx
c001931b:	e8 4c 74 fe ff       	call   c000076c <memset>
c0019320:	83 c4 10             	add    esp,0x10
c0019323:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0019328:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001932f:	0f 84 11 09 00 00    	je     c0019c46 <CPU::detectFeatures()+0x952>
c0019335:	83 ec 0c             	sub    esp,0xc
c0019338:	89 df                	mov    edi,ebx
c001933a:	6a 10                	push   0x10
c001933c:	e8 f1 fb ff ff       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c0019341:	83 e0 01             	and    eax,0x1
c0019344:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019347:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c001934d:	83 e0 fd             	and    eax,0xfffffffd
c0019350:	09 c8                	or     eax,ecx
c0019352:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019358:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001935f:	e8 ce fb ff ff       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c0019364:	83 e0 01             	and    eax,0x1
c0019367:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001936e:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c0019374:	83 e0 fb             	and    eax,0xfffffffb
c0019377:	09 c8                	or     eax,ecx
c0019379:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c001937f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019386:	e8 a7 fb ff ff       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c001938b:	83 e0 01             	and    eax,0x1
c001938e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019395:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c001939b:	83 e0 f7             	and    eax,0xfffffff7
c001939e:	09 c8                	or     eax,ecx
c00193a0:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00193a6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00193ad:	e8 80 fb ff ff       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c00193b2:	83 e0 01             	and    eax,0x1
c00193b5:	c1 e0 04             	shl    eax,0x4
c00193b8:	88 c1                	mov    cl,al
c00193ba:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00193c0:	83 e0 ef             	and    eax,0xffffffef
c00193c3:	09 c8                	or     eax,ecx
c00193c5:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00193cb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00193d2:	e8 5b fb ff ff       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c00193d7:	83 e0 01             	and    eax,0x1
c00193da:	c1 e0 05             	shl    eax,0x5
c00193dd:	88 c1                	mov    cl,al
c00193df:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00193e5:	83 e0 df             	and    eax,0xffffffdf
c00193e8:	09 c8                	or     eax,ecx
c00193ea:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00193f0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00193f7:	e8 36 fb ff ff       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c00193fc:	83 e0 01             	and    eax,0x1
c00193ff:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019402:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c0019408:	83 e0 fd             	and    eax,0xfffffffd
c001940b:	09 c8                	or     eax,ecx
c001940d:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c0019413:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001941a:	e8 13 fb ff ff       	call   c0018f32 <CPU::cpuidCheckEDX(unsigned int)>
c001941f:	83 e0 01             	and    eax,0x1
c0019422:	c1 e0 06             	shl    eax,0x6
c0019425:	88 c1                	mov    cl,al
c0019427:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c001942d:	83 e0 bf             	and    eax,0xffffffbf
c0019430:	09 c8                	or     eax,ecx
c0019432:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c0019438:	58                   	pop    eax
c0019439:	8d 44 24 18          	lea    eax,[esp+0x18]
c001943d:	50                   	push   eax
c001943e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019442:	50                   	push   eax
c0019443:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019447:	56                   	push   esi
c0019448:	8d 44 24 18          	lea    eax,[esp+0x18]
c001944c:	50                   	push   eax
c001944d:	6a 00                	push   0x0
c001944f:	e8 5a fa ff ff       	call   c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019454:	b9 04 00 00 00       	mov    ecx,0x4
c0019459:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001945b:	8d bd 63 01 00 00    	lea    edi,[ebp+0x163]
c0019461:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019465:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019467:	8d bd 67 01 00 00    	lea    edi,[ebp+0x167]
c001946d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019471:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019473:	83 c4 18             	add    esp,0x18
c0019476:	68 91 c1 02 c0       	push   0xc002c191
c001947b:	53                   	push   ebx
c001947c:	e8 33 74 fe ff       	call   c00008b4 <strcmp>
c0019481:	83 c4 10             	add    esp,0x10
c0019484:	85 c0                	test   eax,eax
c0019486:	75 0f                	jne    c0019497 <CPU::detectFeatures()+0x1a3>
c0019488:	c7 85 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebp+0x158],0x2
c0019492:	e9 22 02 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c0019497:	50                   	push   eax
c0019498:	50                   	push   eax
c0019499:	68 9e c1 02 c0       	push   0xc002c19e
c001949e:	53                   	push   ebx
c001949f:	e8 10 74 fe ff       	call   c00008b4 <strcmp>
c00194a4:	83 c4 10             	add    esp,0x10
c00194a7:	85 c0                	test   eax,eax
c00194a9:	74 dd                	je     c0019488 <CPU::detectFeatures()+0x194>
c00194ab:	50                   	push   eax
c00194ac:	50                   	push   eax
c00194ad:	68 ab c1 02 c0       	push   0xc002c1ab
c00194b2:	53                   	push   ebx
c00194b3:	e8 fc 73 fe ff       	call   c00008b4 <strcmp>
c00194b8:	83 c4 10             	add    esp,0x10
c00194bb:	85 c0                	test   eax,eax
c00194bd:	74 2a                	je     c00194e9 <CPU::detectFeatures()+0x1f5>
c00194bf:	50                   	push   eax
c00194c0:	50                   	push   eax
c00194c1:	68 b8 c1 02 c0       	push   0xc002c1b8
c00194c6:	53                   	push   ebx
c00194c7:	e8 e8 73 fe ff       	call   c00008b4 <strcmp>
c00194cc:	83 c4 10             	add    esp,0x10
c00194cf:	85 c0                	test   eax,eax
c00194d1:	74 16                	je     c00194e9 <CPU::detectFeatures()+0x1f5>
c00194d3:	50                   	push   eax
c00194d4:	50                   	push   eax
c00194d5:	68 c5 c1 02 c0       	push   0xc002c1c5
c00194da:	53                   	push   ebx
c00194db:	e8 d4 73 fe ff       	call   c00008b4 <strcmp>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	85 c0                	test   eax,eax
c00194e5:	74 48                	je     c001952f <CPU::detectFeatures()+0x23b>
c00194e7:	eb 0f                	jmp    c00194f8 <CPU::detectFeatures()+0x204>
c00194e9:	c7 85 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebp+0x158],0x4
c00194f3:	e9 c1 01 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c00194f8:	50                   	push   eax
c00194f9:	50                   	push   eax
c00194fa:	68 d2 c1 02 c0       	push   0xc002c1d2
c00194ff:	53                   	push   ebx
c0019500:	e8 af 73 fe ff       	call   c00008b4 <strcmp>
c0019505:	83 c4 10             	add    esp,0x10
c0019508:	85 c0                	test   eax,eax
c001950a:	74 23                	je     c001952f <CPU::detectFeatures()+0x23b>
c001950c:	57                   	push   edi
c001950d:	57                   	push   edi
c001950e:	68 df c1 02 c0       	push   0xc002c1df
c0019513:	53                   	push   ebx
c0019514:	e8 9b 73 fe ff       	call   c00008b4 <strcmp>
c0019519:	83 c4 10             	add    esp,0x10
c001951c:	85 c0                	test   eax,eax
c001951e:	75 1e                	jne    c001953e <CPU::detectFeatures()+0x24a>
c0019520:	c7 85 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebp+0x158],0x1
c001952a:	e9 8a 01 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c001952f:	c7 85 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebp+0x158],0x5
c0019539:	e9 7b 01 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c001953e:	56                   	push   esi
c001953f:	56                   	push   esi
c0019540:	68 ec c1 02 c0       	push   0xc002c1ec
c0019545:	53                   	push   ebx
c0019546:	e8 69 73 fe ff       	call   c00008b4 <strcmp>
c001954b:	83 c4 10             	add    esp,0x10
c001954e:	85 c0                	test   eax,eax
c0019550:	75 0f                	jne    c0019561 <CPU::detectFeatures()+0x26d>
c0019552:	c7 85 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebp+0x158],0x3
c001955c:	e9 58 01 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c0019561:	51                   	push   ecx
c0019562:	51                   	push   ecx
c0019563:	68 ab c1 02 c0       	push   0xc002c1ab
c0019568:	53                   	push   ebx
c0019569:	e8 46 73 fe ff       	call   c00008b4 <strcmp>
c001956e:	83 c4 10             	add    esp,0x10
c0019571:	85 c0                	test   eax,eax
c0019573:	75 0f                	jne    c0019584 <CPU::detectFeatures()+0x290>
c0019575:	c7 85 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebp+0x158],0x6
c001957f:	e9 35 01 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c0019584:	52                   	push   edx
c0019585:	52                   	push   edx
c0019586:	68 f9 c1 02 c0       	push   0xc002c1f9
c001958b:	53                   	push   ebx
c001958c:	e8 23 73 fe ff       	call   c00008b4 <strcmp>
c0019591:	83 c4 10             	add    esp,0x10
c0019594:	85 c0                	test   eax,eax
c0019596:	75 0f                	jne    c00195a7 <CPU::detectFeatures()+0x2b3>
c0019598:	c7 85 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebp+0x158],0x7
c00195a2:	e9 12 01 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c00195a7:	50                   	push   eax
c00195a8:	50                   	push   eax
c00195a9:	68 06 c2 02 c0       	push   0xc002c206
c00195ae:	53                   	push   ebx
c00195af:	e8 00 73 fe ff       	call   c00008b4 <strcmp>
c00195b4:	83 c4 10             	add    esp,0x10
c00195b7:	85 c0                	test   eax,eax
c00195b9:	75 0f                	jne    c00195ca <CPU::detectFeatures()+0x2d6>
c00195bb:	c7 85 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebp+0x158],0x8
c00195c5:	e9 ef 00 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c00195ca:	50                   	push   eax
c00195cb:	50                   	push   eax
c00195cc:	68 13 c2 02 c0       	push   0xc002c213
c00195d1:	53                   	push   ebx
c00195d2:	e8 dd 72 fe ff       	call   c00008b4 <strcmp>
c00195d7:	83 c4 10             	add    esp,0x10
c00195da:	85 c0                	test   eax,eax
c00195dc:	75 0f                	jne    c00195ed <CPU::detectFeatures()+0x2f9>
c00195de:	c7 85 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebp+0x158],0x9
c00195e8:	e9 cc 00 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c00195ed:	50                   	push   eax
c00195ee:	50                   	push   eax
c00195ef:	68 20 c2 02 c0       	push   0xc002c220
c00195f4:	53                   	push   ebx
c00195f5:	e8 ba 72 fe ff       	call   c00008b4 <strcmp>
c00195fa:	83 c4 10             	add    esp,0x10
c00195fd:	85 c0                	test   eax,eax
c00195ff:	75 0f                	jne    c0019610 <CPU::detectFeatures()+0x31c>
c0019601:	c7 85 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebp+0x158],0xa
c001960b:	e9 a9 00 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c0019610:	50                   	push   eax
c0019611:	50                   	push   eax
c0019612:	68 2d c2 02 c0       	push   0xc002c22d
c0019617:	53                   	push   ebx
c0019618:	e8 97 72 fe ff       	call   c00008b4 <strcmp>
c001961d:	83 c4 10             	add    esp,0x10
c0019620:	85 c0                	test   eax,eax
c0019622:	75 0f                	jne    c0019633 <CPU::detectFeatures()+0x33f>
c0019624:	c7 85 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebp+0x158],0xb
c001962e:	e9 86 00 00 00       	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c0019633:	50                   	push   eax
c0019634:	50                   	push   eax
c0019635:	68 3a c2 02 c0       	push   0xc002c23a
c001963a:	53                   	push   ebx
c001963b:	e8 74 72 fe ff       	call   c00008b4 <strcmp>
c0019640:	83 c4 10             	add    esp,0x10
c0019643:	85 c0                	test   eax,eax
c0019645:	75 0c                	jne    c0019653 <CPU::detectFeatures()+0x35f>
c0019647:	c7 85 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebp+0x158],0xc
c0019651:	eb 66                	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c0019653:	50                   	push   eax
c0019654:	50                   	push   eax
c0019655:	68 47 c2 02 c0       	push   0xc002c247
c001965a:	53                   	push   ebx
c001965b:	e8 54 72 fe ff       	call   c00008b4 <strcmp>
c0019660:	83 c4 10             	add    esp,0x10
c0019663:	85 c0                	test   eax,eax
c0019665:	75 0c                	jne    c0019673 <CPU::detectFeatures()+0x37f>
c0019667:	c7 85 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebp+0x158],0xd
c0019671:	eb 46                	jmp    c00196b9 <CPU::detectFeatures()+0x3c5>
c0019673:	57                   	push   edi
c0019674:	57                   	push   edi
c0019675:	68 54 c2 02 c0       	push   0xc002c254
c001967a:	53                   	push   ebx
c001967b:	e8 34 72 fe ff       	call   c00008b4 <strcmp>
c0019680:	83 c4 10             	add    esp,0x10
c0019683:	85 c0                	test   eax,eax
c0019685:	74 e0                	je     c0019667 <CPU::detectFeatures()+0x373>
c0019687:	56                   	push   esi
c0019688:	56                   	push   esi
c0019689:	68 61 c2 02 c0       	push   0xc002c261
c001968e:	53                   	push   ebx
c001968f:	e8 20 72 fe ff       	call   c00008b4 <strcmp>
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	85 c0                	test   eax,eax
c0019699:	74 cc                	je     c0019667 <CPU::detectFeatures()+0x373>
c001969b:	51                   	push   ecx
c001969c:	51                   	push   ecx
c001969d:	68 6e c2 02 c0       	push   0xc002c26e
c00196a2:	53                   	push   ebx
c00196a3:	e8 0c 72 fe ff       	call   c00008b4 <strcmp>
c00196a8:	83 c4 10             	add    esp,0x10
c00196ab:	85 c0                	test   eax,eax
c00196ad:	74 b8                	je     c0019667 <CPU::detectFeatures()+0x373>
c00196af:	c7 85 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x158],0x0
c00196b9:	83 3c 24 06          	cmp    DWORD PTR [esp],0x6
c00196bd:	0f 86 be 00 00 00    	jbe    c0019781 <CPU::detectFeatures()+0x48d>
c00196c3:	83 ec 0c             	sub    esp,0xc
c00196c6:	68 80 00 00 00       	push   0x80
c00196cb:	e8 be f8 ff ff       	call   c0018f8e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00196d0:	83 e0 01             	and    eax,0x1
c00196d3:	c1 e0 06             	shl    eax,0x6
c00196d6:	88 c1                	mov    cl,al
c00196d8:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00196de:	83 e0 bf             	and    eax,0xffffffbf
c00196e1:	09 c8                	or     eax,ecx
c00196e3:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00196e9:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00196f0:	e8 99 f8 ff ff       	call   c0018f8e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00196f5:	83 e0 01             	and    eax,0x1
c00196f8:	c1 e0 04             	shl    eax,0x4
c00196fb:	88 c1                	mov    cl,al
c00196fd:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c0019703:	83 e0 ef             	and    eax,0xffffffef
c0019706:	09 c8                	or     eax,ecx
c0019708:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c001970e:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019715:	e8 74 f8 ff ff       	call   c0018f8e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001971a:	c1 e0 07             	shl    eax,0x7
c001971d:	88 c1                	mov    cl,al
c001971f:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c0019725:	83 e0 7f             	and    eax,0x7f
c0019728:	09 c8                	or     eax,ecx
c001972a:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019730:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019737:	e8 80 f8 ff ff       	call   c0018fbc <CPU::cpuidCheckExtendedECX(unsigned int)>
c001973c:	83 e0 01             	and    eax,0x1
c001973f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019746:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c001974c:	83 e0 f7             	and    eax,0xfffffff7
c001974f:	09 c8                	or     eax,ecx
c0019751:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c0019757:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001975e:	e8 59 f8 ff ff       	call   c0018fbc <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019763:	83 c4 10             	add    esp,0x10
c0019766:	83 e0 01             	and    eax,0x1
c0019769:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019770:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c0019776:	83 e0 fb             	and    eax,0xfffffffb
c0019779:	09 c8                	or     eax,ecx
c001977b:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c0019781:	83 ec 0c             	sub    esp,0xc
c0019784:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019788:	50                   	push   eax
c0019789:	8d 44 24 18          	lea    eax,[esp+0x18]
c001978d:	50                   	push   eax
c001978e:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019792:	57                   	push   edi
c0019793:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019797:	50                   	push   eax
c0019798:	6a 01                	push   0x1
c001979a:	e8 0f f7 ff ff       	call   c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001979f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00197a3:	8a 85 5c 01 00 00    	mov    al,BYTE PTR [ebp+0x15c]
c00197a9:	88 d9                	mov    cl,bl
c00197ab:	83 e0 f0             	and    eax,0xfffffff0
c00197ae:	83 e1 0f             	and    ecx,0xf
c00197b1:	83 c4 20             	add    esp,0x20
c00197b4:	09 c8                	or     eax,ecx
c00197b6:	88 d9                	mov    cl,bl
c00197b8:	88 85 5c 01 00 00    	mov    BYTE PTR [ebp+0x15c],al
c00197be:	c0 e9 04             	shr    cl,0x4
c00197c1:	0f b6 c1             	movzx  eax,cl
c00197c4:	c1 e0 06             	shl    eax,0x6
c00197c7:	89 c6                	mov    esi,eax
c00197c9:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c00197cf:	66 25 3f c0          	and    ax,0xc03f
c00197d3:	09 f0                	or     eax,esi
c00197d5:	66 89 85 5c 01 00 00 	mov    WORD PTR [ebp+0x15c],ax
c00197dc:	89 d8                	mov    eax,ebx
c00197de:	8a 95 5d 01 00 00    	mov    dl,BYTE PTR [ebp+0x15d]
c00197e4:	c1 e8 08             	shr    eax,0x8
c00197e7:	83 e2 3f             	and    edx,0x3f
c00197ea:	83 e0 0f             	and    eax,0xf
c00197ed:	89 c6                	mov    esi,eax
c00197ef:	c1 e6 06             	shl    esi,0x6
c00197f2:	09 d6                	or     esi,edx
c00197f4:	89 f2                	mov    edx,esi
c00197f6:	88 95 5d 01 00 00    	mov    BYTE PTR [ebp+0x15d],dl
c00197fc:	88 c2                	mov    dl,al
c00197fe:	c0 ea 02             	shr    dl,0x2
c0019801:	89 d6                	mov    esi,edx
c0019803:	8a 95 5e 01 00 00    	mov    dl,BYTE PTR [ebp+0x15e]
c0019809:	83 e2 c0             	and    edx,0xffffffc0
c001980c:	09 d6                	or     esi,edx
c001980e:	89 f2                	mov    edx,esi
c0019810:	89 de                	mov    esi,ebx
c0019812:	88 95 5e 01 00 00    	mov    BYTE PTR [ebp+0x15e],dl
c0019818:	c1 ee 0c             	shr    esi,0xc
c001981b:	8a 95 5c 01 00 00    	mov    dl,BYTE PTR [ebp+0x15c]
c0019821:	83 e6 03             	and    esi,0x3
c0019824:	83 e2 cf             	and    edx,0xffffffcf
c0019827:	c1 e6 04             	shl    esi,0x4
c001982a:	09 d6                	or     esi,edx
c001982c:	3c 06                	cmp    al,0x6
c001982e:	89 f2                	mov    edx,esi
c0019830:	88 95 5c 01 00 00    	mov    BYTE PTR [ebp+0x15c],dl
c0019836:	74 04                	je     c001983c <CPU::detectFeatures()+0x548>
c0019838:	3c 0f                	cmp    al,0xf
c001983a:	75 58                	jne    c0019894 <CPU::detectFeatures()+0x5a0>
c001983c:	89 de                	mov    esi,ebx
c001983e:	c1 ee 10             	shr    esi,0x10
c0019841:	c1 e6 04             	shl    esi,0x4
c0019844:	09 f1                	or     ecx,esi
c0019846:	8b b5 5c 01 00 00    	mov    esi,DWORD PTR [ebp+0x15c]
c001984c:	0f b6 c9             	movzx  ecx,cl
c001984f:	66 81 e6 3f c0       	and    si,0xc03f
c0019854:	c1 e1 06             	shl    ecx,0x6
c0019857:	09 f1                	or     ecx,esi
c0019859:	3c 0f                	cmp    al,0xf
c001985b:	66 89 8d 5c 01 00 00 	mov    WORD PTR [ebp+0x15c],cx
c0019862:	75 30                	jne    c0019894 <CPU::detectFeatures()+0x5a0>
c0019864:	8a 85 5d 01 00 00    	mov    al,BYTE PTR [ebp+0x15d]
c001986a:	c1 eb 14             	shr    ebx,0x14
c001986d:	83 e0 3f             	and    eax,0x3f
c0019870:	83 c3 0f             	add    ebx,0xf
c0019873:	88 d9                	mov    cl,bl
c0019875:	c0 eb 02             	shr    bl,0x2
c0019878:	c1 e1 06             	shl    ecx,0x6
c001987b:	09 c8                	or     eax,ecx
c001987d:	88 85 5d 01 00 00    	mov    BYTE PTR [ebp+0x15d],al
c0019883:	8a 85 5e 01 00 00    	mov    al,BYTE PTR [ebp+0x15e]
c0019889:	83 e0 c0             	and    eax,0xffffffc0
c001988c:	09 c3                	or     ebx,eax
c001988e:	88 9d 5e 01 00 00    	mov    BYTE PTR [ebp+0x15e],bl
c0019894:	83 ec 0c             	sub    esp,0xc
c0019897:	80 8d 91 11 00 00 07 	or     BYTE PTR [ebp+0x1191],0x7
c001989e:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198a2:	50                   	push   eax
c00198a3:	8d 74 24 18          	lea    esi,[esp+0x18]
c00198a7:	56                   	push   esi
c00198a8:	57                   	push   edi
c00198a9:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00198ad:	53                   	push   ebx
c00198ae:	68 00 00 00 80       	push   0x80000000
c00198b3:	e8 f6 f5 ff ff       	call   c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198b8:	83 c4 20             	add    esp,0x20
c00198bb:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00198c2:	76 22                	jbe    c00198e6 <CPU::detectFeatures()+0x5f2>
c00198c4:	83 ec 0c             	sub    esp,0xc
c00198c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198cb:	50                   	push   eax
c00198cc:	56                   	push   esi
c00198cd:	57                   	push   edi
c00198ce:	53                   	push   ebx
c00198cf:	68 01 00 00 80       	push   0x80000001
c00198d4:	e8 d5 f5 ff ff       	call   c0018eae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198d9:	81 a5 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebp+0x1190],0xfffe5fff
c00198e3:	83 c4 20             	add    esp,0x20
c00198e6:	8b 85 58 01 00 00    	mov    eax,DWORD PTR [ebp+0x158]
c00198ec:	83 f8 01             	cmp    eax,0x1
c00198ef:	75 6f                	jne    c0019960 <CPU::detectFeatures()+0x66c>
c00198f1:	51                   	push   ecx
c00198f2:	51                   	push   ecx
c00198f3:	68 7a c2 02 c0       	push   0xc002c27a
c00198f8:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00198fc:	53                   	push   ebx
c00198fd:	e8 26 6f fe ff       	call   c0000828 <strcpy>
c0019902:	5e                   	pop    esi
c0019903:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019909:	5f                   	pop    edi
c001990a:	66 c1 e8 06          	shr    ax,0x6
c001990e:	0f b6 c0             	movzx  eax,al
c0019911:	50                   	push   eax
c0019912:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019918:	c1 e8 0e             	shr    eax,0xe
c001991b:	0f b6 c0             	movzx  eax,al
c001991e:	50                   	push   eax
c001991f:	e8 34 f2 ff ff       	call   c0018b58 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019924:	5a                   	pop    edx
c0019925:	59                   	pop    ecx
c0019926:	50                   	push   eax
c0019927:	53                   	push   ebx
c0019928:	e8 3b 70 fe ff       	call   c0000968 <strcat>
c001992d:	5e                   	pop    esi
c001992e:	5f                   	pop    edi
c001992f:	53                   	push   ebx
c0019930:	55                   	push   ebp
c0019931:	e8 0e ab ff ff       	call   c0014444 <Device::setName(char const*)>
c0019936:	58                   	pop    eax
c0019937:	8d 85 d0 00 00 00    	lea    eax,[ebp+0xd0]
c001993d:	5a                   	pop    edx
c001993e:	68 81 c2 02 c0       	push   0xc002c281
c0019943:	50                   	push   eax
c0019944:	e8 6b 6f fe ff       	call   c00008b4 <strcmp>
c0019949:	83 c4 10             	add    esp,0x10
c001994c:	85 c0                	test   eax,eax
c001994e:	0f 85 72 03 00 00    	jne    c0019cc6 <CPU::detectFeatures()+0x9d2>
c0019954:	80 a5 91 11 00 00 3f 	and    BYTE PTR [ebp+0x1191],0x3f
c001995b:	e9 66 03 00 00       	jmp    c0019cc6 <CPU::detectFeatures()+0x9d2>
c0019960:	83 f8 02             	cmp    eax,0x2
c0019963:	0f 85 b5 00 00 00    	jne    c0019a1e <CPU::detectFeatures()+0x72a>
c0019969:	56                   	push   esi
c001996a:	56                   	push   esi
c001996b:	68 93 c2 02 c0       	push   0xc002c293
c0019970:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0019974:	53                   	push   ebx
c0019975:	e8 ae 6e fe ff       	call   c0000828 <strcpy>
c001997a:	5f                   	pop    edi
c001997b:	58                   	pop    eax
c001997c:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019982:	66 c1 e8 06          	shr    ax,0x6
c0019986:	0f b6 c0             	movzx  eax,al
c0019989:	50                   	push   eax
c001998a:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019990:	c1 e8 0e             	shr    eax,0xe
c0019993:	0f b6 c0             	movzx  eax,al
c0019996:	50                   	push   eax
c0019997:	e8 28 f0 ff ff       	call   c00189c4 <CPU::lookupAMDName(unsigned char, unsigned char)>
c001999c:	5a                   	pop    edx
c001999d:	59                   	pop    ecx
c001999e:	50                   	push   eax
c001999f:	53                   	push   ebx
c00199a0:	e8 c3 6f fe ff       	call   c0000968 <strcat>
c00199a5:	5e                   	pop    esi
c00199a6:	5f                   	pop    edi
c00199a7:	53                   	push   ebx
c00199a8:	55                   	push   ebp
c00199a9:	e8 96 aa ff ff       	call   c0014444 <Device::setName(char const*)>
c00199ae:	58                   	pop    eax
c00199af:	8d 85 d0 00 00 00    	lea    eax,[ebp+0xd0]
c00199b5:	5a                   	pop    edx
c00199b6:	68 98 c2 02 c0       	push   0xc002c298
c00199bb:	50                   	push   eax
c00199bc:	e8 f3 6e fe ff       	call   c00008b4 <strcmp>
c00199c1:	83 c4 10             	add    esp,0x10
c00199c4:	85 c0                	test   eax,eax
c00199c6:	75 20                	jne    c00199e8 <CPU::detectFeatures()+0x6f4>
c00199c8:	8b 0d 68 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee68
c00199ce:	8a 81 e8 01 00 00    	mov    al,BYTE PTR [ecx+0x1e8]
c00199d4:	a8 01                	test   al,0x1
c00199d6:	74 10                	je     c00199e8 <CPU::detectFeatures()+0x6f4>
c00199d8:	83 e0 fe             	and    eax,0xfffffffe
c00199db:	88 81 e8 01 00 00    	mov    BYTE PTR [ecx+0x1e8],al
c00199e1:	80 8d 90 11 00 00 10 	or     BYTE PTR [ebp+0x1190],0x10
c00199e8:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c00199ee:	c1 e8 0e             	shr    eax,0xe
c00199f1:	3c 05                	cmp    al,0x5
c00199f3:	0f 85 cd 02 00 00    	jne    c0019cc6 <CPU::detectFeatures()+0x9d2>
c00199f9:	53                   	push   ebx
c00199fa:	8a 85 5c 01 00 00    	mov    al,BYTE PTR [ebp+0x15c]
c0019a00:	83 e0 0f             	and    eax,0xf
c0019a03:	50                   	push   eax
c0019a04:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019a0a:	66 c1 e8 06          	shr    ax,0x6
c0019a0e:	0f b6 c0             	movzx  eax,al
c0019a11:	50                   	push   eax
c0019a12:	6a 05                	push   0x5
c0019a14:	e8 21 f4 ff ff       	call   c0018e3a <CPU::AMD_K6_writeback(int, int, int)>
c0019a19:	e9 20 02 00 00       	jmp    c0019c3e <CPU::detectFeatures()+0x94a>
c0019a1e:	8d 48 fd             	lea    ecx,[eax-0x3]
c0019a21:	83 f9 01             	cmp    ecx,0x1
c0019a24:	76 09                	jbe    c0019a2f <CPU::detectFeatures()+0x73b>
c0019a26:	83 f8 06             	cmp    eax,0x6
c0019a29:	0f 85 92 01 00 00    	jne    c0019bc1 <CPU::detectFeatures()+0x8cd>
c0019a2f:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019a35:	c1 e9 0e             	shr    ecx,0xe
c0019a38:	80 f9 05             	cmp    cl,0x5
c0019a3b:	75 7b                	jne    c0019ab8 <CPU::detectFeatures()+0x7c4>
c0019a3d:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019a43:	66 81 e1 c0 3f       	and    cx,0x3fc0
c0019a48:	66 81 f9 00 01       	cmp    cx,0x100
c0019a4d:	75 0c                	jne    c0019a5b <CPU::detectFeatures()+0x767>
c0019a4f:	51                   	push   ecx
c0019a50:	51                   	push   ecx
c0019a51:	68 9f c2 02 c0       	push   0xc002c29f
c0019a56:	e9 dd 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019a5b:	66 81 f9 00 02       	cmp    cx,0x200
c0019a60:	75 0c                	jne    c0019a6e <CPU::detectFeatures()+0x77a>
c0019a62:	52                   	push   edx
c0019a63:	52                   	push   edx
c0019a64:	68 b2 c2 02 c0       	push   0xc002c2b2
c0019a69:	e9 ca 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019a6e:	66 81 f9 40 02       	cmp    cx,0x240
c0019a73:	75 0c                	jne    c0019a81 <CPU::detectFeatures()+0x78d>
c0019a75:	50                   	push   eax
c0019a76:	50                   	push   eax
c0019a77:	68 c4 c2 02 c0       	push   0xc002c2c4
c0019a7c:	e9 b7 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019a81:	83 f8 06             	cmp    eax,0x6
c0019a84:	75 0c                	jne    c0019a92 <CPU::detectFeatures()+0x79e>
c0019a86:	50                   	push   eax
c0019a87:	50                   	push   eax
c0019a88:	68 d6 c2 02 c0       	push   0xc002c2d6
c0019a8d:	e9 a6 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019a92:	83 f8 04             	cmp    eax,0x4
c0019a95:	75 0c                	jne    c0019aa3 <CPU::detectFeatures()+0x7af>
c0019a97:	50                   	push   eax
c0019a98:	50                   	push   eax
c0019a99:	68 e2 c2 02 c0       	push   0xc002c2e2
c0019a9e:	e9 95 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019aa3:	83 f8 03             	cmp    eax,0x3
c0019aa6:	0f 85 1a 02 00 00    	jne    c0019cc6 <CPU::detectFeatures()+0x9d2>
c0019aac:	50                   	push   eax
c0019aad:	50                   	push   eax
c0019aae:	68 ea c2 02 c0       	push   0xc002c2ea
c0019ab3:	e9 80 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019ab8:	80 f9 06             	cmp    cl,0x6
c0019abb:	0f 85 dc 00 00 00    	jne    c0019b9d <CPU::detectFeatures()+0x8a9>
c0019ac1:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019ac7:	66 81 e1 c0 3f       	and    cx,0x3fc0
c0019acc:	66 81 f9 80 01       	cmp    cx,0x180
c0019ad1:	75 0c                	jne    c0019adf <CPU::detectFeatures()+0x7eb>
c0019ad3:	50                   	push   eax
c0019ad4:	50                   	push   eax
c0019ad5:	68 f5 c2 02 c0       	push   0xc002c2f5
c0019ada:	e9 59 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019adf:	8d 99 40 fe ff ff    	lea    ebx,[ecx-0x1c0]
c0019ae5:	66 f7 c3 80 ff       	test   bx,0xff80
c0019aea:	75 0c                	jne    c0019af8 <CPU::detectFeatures()+0x804>
c0019aec:	50                   	push   eax
c0019aed:	50                   	push   eax
c0019aee:	68 05 c3 02 c0       	push   0xc002c305
c0019af3:	e9 40 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019af8:	66 81 f9 40 02       	cmp    cx,0x240
c0019afd:	75 0c                	jne    c0019b0b <CPU::detectFeatures()+0x817>
c0019aff:	57                   	push   edi
c0019b00:	57                   	push   edi
c0019b01:	68 0c c3 02 c0       	push   0xc002c30c
c0019b06:	e9 2d 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019b0b:	66 81 f9 80 02       	cmp    cx,0x280
c0019b10:	75 0c                	jne    c0019b1e <CPU::detectFeatures()+0x82a>
c0019b12:	56                   	push   esi
c0019b13:	56                   	push   esi
c0019b14:	68 15 c3 02 c0       	push   0xc002c315
c0019b19:	e9 1a 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019b1e:	66 81 f9 40 03       	cmp    cx,0x340
c0019b23:	74 ed                	je     c0019b12 <CPU::detectFeatures()+0x81e>
c0019b25:	66 81 f9 c0 03       	cmp    cx,0x3c0
c0019b2a:	75 0c                	jne    c0019b38 <CPU::detectFeatures()+0x844>
c0019b2c:	53                   	push   ebx
c0019b2d:	53                   	push   ebx
c0019b2e:	68 1c c3 02 c0       	push   0xc002c31c
c0019b33:	e9 00 01 00 00       	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019b38:	83 f8 06             	cmp    eax,0x6
c0019b3b:	0f 84 45 ff ff ff    	je     c0019a86 <CPU::detectFeatures()+0x792>
c0019b41:	83 f8 04             	cmp    eax,0x4
c0019b44:	0f 84 4d ff ff ff    	je     c0019a97 <CPU::detectFeatures()+0x7a3>
c0019b4a:	83 f8 03             	cmp    eax,0x3
c0019b4d:	0f 85 73 01 00 00    	jne    c0019cc6 <CPU::detectFeatures()+0x9d2>
c0019b53:	b3 c1                	mov    bl,0xc1
c0019b55:	51                   	push   ecx
c0019b56:	51                   	push   ecx
c0019b57:	68 25 c3 02 c0       	push   0xc002c325
c0019b5c:	55                   	push   ebp
c0019b5d:	e8 e2 a8 ff ff       	call   c0014444 <Device::setName(char const*)>
c0019b62:	88 d8                	mov    al,bl
c0019b64:	e6 22                	out    0x22,al
c0019b66:	e4 23                	in     al,0x23
c0019b68:	88 c1                	mov    cl,al
c0019b6a:	88 d8                	mov    al,bl
c0019b6c:	e6 22                	out    0x22,al
c0019b6e:	88 c8                	mov    al,cl
c0019b70:	83 c8 10             	or     eax,0x10
c0019b73:	e6 23                	out    0x23,al
c0019b75:	0f b6 8d c4 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc4]
c0019b7c:	8d 5c 8d 00          	lea    ebx,[ebp+ecx*4+0x0]
c0019b80:	89 c8                	mov    eax,ecx
c0019b82:	66 c7 43 04 22 00    	mov    WORD PTR [ebx+0x4],0x22
c0019b88:	c6 43 06 02          	mov    BYTE PTR [ebx+0x6],0x2
c0019b8c:	40                   	inc    eax
c0019b8d:	88 85 c4 00 00 00    	mov    BYTE PTR [ebp+0xc4],al
c0019b93:	80 64 8d 07 3f       	and    BYTE PTR [ebp+ecx*4+0x7],0x3f
c0019b98:	e9 a1 00 00 00       	jmp    c0019c3e <CPU::detectFeatures()+0x94a>
c0019b9d:	83 f8 06             	cmp    eax,0x6
c0019ba0:	0f 84 e0 fe ff ff    	je     c0019a86 <CPU::detectFeatures()+0x792>
c0019ba6:	83 f8 04             	cmp    eax,0x4
c0019ba9:	0f 84 e8 fe ff ff    	je     c0019a97 <CPU::detectFeatures()+0x7a3>
c0019baf:	83 f8 03             	cmp    eax,0x3
c0019bb2:	0f 85 0e 01 00 00    	jne    c0019cc6 <CPU::detectFeatures()+0x9d2>
c0019bb8:	52                   	push   edx
c0019bb9:	52                   	push   edx
c0019bba:	68 30 c3 02 c0       	push   0xc002c330
c0019bbf:	eb 77                	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019bc1:	83 f8 07             	cmp    eax,0x7
c0019bc4:	75 09                	jne    c0019bcf <CPU::detectFeatures()+0x8db>
c0019bc6:	50                   	push   eax
c0019bc7:	50                   	push   eax
c0019bc8:	68 3a c3 02 c0       	push   0xc002c33a
c0019bcd:	eb 69                	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019bcf:	83 f8 0a             	cmp    eax,0xa
c0019bd2:	75 09                	jne    c0019bdd <CPU::detectFeatures()+0x8e9>
c0019bd4:	50                   	push   eax
c0019bd5:	50                   	push   eax
c0019bd6:	68 45 c3 02 c0       	push   0xc002c345
c0019bdb:	eb 5b                	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019bdd:	83 f8 0b             	cmp    eax,0xb
c0019be0:	75 09                	jne    c0019beb <CPU::detectFeatures()+0x8f7>
c0019be2:	50                   	push   eax
c0019be3:	50                   	push   eax
c0019be4:	68 4d c3 02 c0       	push   0xc002c34d
c0019be9:	eb 4d                	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019beb:	83 f8 08             	cmp    eax,0x8
c0019bee:	75 09                	jne    c0019bf9 <CPU::detectFeatures()+0x905>
c0019bf0:	50                   	push   eax
c0019bf1:	50                   	push   eax
c0019bf2:	68 56 c3 02 c0       	push   0xc002c356
c0019bf7:	eb 3f                	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019bf9:	83 f8 09             	cmp    eax,0x9
c0019bfc:	75 09                	jne    c0019c07 <CPU::detectFeatures()+0x913>
c0019bfe:	50                   	push   eax
c0019bff:	50                   	push   eax
c0019c00:	68 5e c3 02 c0       	push   0xc002c35e
c0019c05:	eb 31                	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019c07:	83 f8 05             	cmp    eax,0x5
c0019c0a:	75 09                	jne    c0019c15 <CPU::detectFeatures()+0x921>
c0019c0c:	50                   	push   eax
c0019c0d:	50                   	push   eax
c0019c0e:	68 66 c3 02 c0       	push   0xc002c366
c0019c13:	eb 23                	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019c15:	83 f8 0c             	cmp    eax,0xc
c0019c18:	75 09                	jne    c0019c23 <CPU::detectFeatures()+0x92f>
c0019c1a:	57                   	push   edi
c0019c1b:	57                   	push   edi
c0019c1c:	68 74 c3 02 c0       	push   0xc002c374
c0019c21:	eb 15                	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019c23:	83 f8 0d             	cmp    eax,0xd
c0019c26:	75 09                	jne    c0019c31 <CPU::detectFeatures()+0x93d>
c0019c28:	56                   	push   esi
c0019c29:	56                   	push   esi
c0019c2a:	68 7f c3 02 c0       	push   0xc002c37f
c0019c2f:	eb 07                	jmp    c0019c38 <CPU::detectFeatures()+0x944>
c0019c31:	53                   	push   ebx
c0019c32:	53                   	push   ebx
c0019c33:	68 93 c3 02 c0       	push   0xc002c393
c0019c38:	55                   	push   ebp
c0019c39:	e8 06 a8 ff ff       	call   c0014444 <Device::setName(char const*)>
c0019c3e:	83 c4 10             	add    esp,0x10
c0019c41:	e9 80 00 00 00       	jmp    c0019cc6 <CPU::detectFeatures()+0x9d2>
c0019c46:	51                   	push   ecx
c0019c47:	51                   	push   ecx
c0019c48:	68 df c1 02 c0       	push   0xc002c1df
c0019c4d:	53                   	push   ebx
c0019c4e:	e8 d5 6b fe ff       	call   c0000828 <strcpy>
c0019c53:	c7 85 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebp+0x158],0x1
c0019c5d:	e8 4c 66 fe ff       	call   c00002ae <is486>
c0019c62:	83 c4 10             	add    esp,0x10
c0019c65:	85 c0                	test   eax,eax
c0019c67:	74 2b                	je     c0019c94 <CPU::detectFeatures()+0x9a0>
c0019c69:	52                   	push   edx
c0019c6a:	52                   	push   edx
c0019c6b:	68 9f c3 02 c0       	push   0xc002c39f
c0019c70:	55                   	push   ebp
c0019c71:	e8 ce a7 ff ff       	call   c0014444 <Device::setName(char const*)>
c0019c76:	80 8d 91 11 00 00 07 	or     BYTE PTR [ebp+0x1191],0x7
c0019c7d:	0f 20 c0             	mov    eax,cr0
c0019c80:	83 e0 14             	and    eax,0x14
c0019c83:	83 c4 10             	add    esp,0x10
c0019c86:	83 f8 04             	cmp    eax,0x4
c0019c89:	75 1f                	jne    c0019caa <CPU::detectFeatures()+0x9b6>
c0019c8b:	80 a5 92 11 00 00 fd 	and    BYTE PTR [ebp+0x1192],0xfd
c0019c92:	eb 32                	jmp    c0019cc6 <CPU::detectFeatures()+0x9d2>
c0019c94:	50                   	push   eax
c0019c95:	50                   	push   eax
c0019c96:	68 aa c3 02 c0       	push   0xc002c3aa
c0019c9b:	55                   	push   ebp
c0019c9c:	e8 a3 a7 ff ff       	call   c0014444 <Device::setName(char const*)>
c0019ca1:	80 a5 91 11 00 00 f8 	and    BYTE PTR [ebp+0x1191],0xf8
c0019ca8:	eb d3                	jmp    c0019c7d <CPU::detectFeatures()+0x989>
c0019caa:	e8 da 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019caf:	83 e0 01             	and    eax,0x1
c0019cb2:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019cb5:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c0019cbb:	83 e0 fd             	and    eax,0xfffffffd
c0019cbe:	09 c8                	or     eax,ecx
c0019cc0:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c0019cc6:	c6 85 94 11 00 00 00 	mov    BYTE PTR [ebp+0x1194],0x0
c0019ccd:	83 c4 3c             	add    esp,0x3c
c0019cd0:	5b                   	pop    ebx
c0019cd1:	5e                   	pop    esi
c0019cd2:	5f                   	pop    edi
c0019cd3:	5d                   	pop    ebp
c0019cd4:	c3                   	ret    
c0019cd5:	90                   	nop

c0019cd6 <CPU::setupSMEP()>:
c0019cd6:	0f 20 e0             	mov    eax,cr4
c0019cd9:	0d 00 00 10 00       	or     eax,0x100000
c0019cde:	0f 22 e0             	mov    cr4,eax
c0019ce1:	c3                   	ret    

c0019ce2 <CPU::setupUMIP()>:
c0019ce2:	0f 20 e0             	mov    eax,cr4
c0019ce5:	80 cc 08             	or     ah,0x8
c0019ce8:	0f 22 e0             	mov    cr4,eax
c0019ceb:	c3                   	ret    

c0019cec <CPU::setupTSC()>:
c0019cec:	0f 20 e0             	mov    eax,cr4
c0019cef:	83 c8 04             	or     eax,0x4
c0019cf2:	0f 22 e0             	mov    cr4,eax
c0019cf5:	c3                   	ret    

c0019cf6 <CPU::setupLargePages()>:
c0019cf6:	0f 20 e0             	mov    eax,cr4
c0019cf9:	83 c8 10             	or     eax,0x10
c0019cfc:	0f 22 e0             	mov    cr4,eax
c0019cff:	c3                   	ret    

c0019d00 <CPU::setupPAT()>:
c0019d00:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0019d05:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d0c:	74 2c                	je     c0019d3a <CPU::setupPAT()+0x3a>
c0019d0e:	53                   	push   ebx
c0019d0f:	83 ec 10             	sub    esp,0x10
c0019d12:	68 77 02 00 00       	push   0x277
c0019d17:	50                   	push   eax
c0019d18:	e8 2f 51 ff ff       	call   c000ee4c <Computer::rdmsr(unsigned int)>
c0019d1d:	83 e2 f8             	and    edx,0xfffffff8
c0019d20:	83 ca 01             	or     edx,0x1
c0019d23:	52                   	push   edx
c0019d24:	50                   	push   eax
c0019d25:	68 77 02 00 00       	push   0x277
c0019d2a:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c0019d30:	e8 43 51 ff ff       	call   c000ee78 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019d35:	83 c4 28             	add    esp,0x28
c0019d38:	5b                   	pop    ebx
c0019d39:	c3                   	ret    
c0019d3a:	c3                   	ret    
c0019d3b:	90                   	nop

c0019d3c <CPU::setupMTRR()>:
c0019d3c:	c3                   	ret    
c0019d3d:	90                   	nop

c0019d3e <CPU::setupGlobalPages()>:
c0019d3e:	0f 20 e0             	mov    eax,cr4
c0019d41:	0c 80                	or     al,0x80
c0019d43:	0f 22 e0             	mov    cr4,eax
c0019d46:	c3                   	ret    
c0019d47:	90                   	nop

c0019d48 <CPU::allowUsermodeDataAccess()>:
c0019d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d4c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019d53:	74 03                	je     c0019d58 <CPU::allowUsermodeDataAccess()+0x10>
c0019d55:	0f 01 cb             	stac   
c0019d58:	c3                   	ret    
c0019d59:	90                   	nop

c0019d5a <CPU::prohibitUsermodeDataAccess()>:
c0019d5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d5e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019d65:	74 03                	je     c0019d6a <CPU::prohibitUsermodeDataAccess()+0x10>
c0019d67:	0f 01 ca             	clac   
c0019d6a:	c3                   	ret    
c0019d6b:	90                   	nop

c0019d6c <CPU::setupSMAP()>:
c0019d6c:	0f 20 e0             	mov    eax,cr4
c0019d6f:	0d 00 00 20 00       	or     eax,0x200000
c0019d74:	0f 22 e0             	mov    cr4,eax
c0019d77:	eb e1                	jmp    c0019d5a <CPU::prohibitUsermodeDataAccess()>
c0019d79:	90                   	nop

c0019d7a <CPU::setupFeatures()>:
c0019d7a:	83 ec 0c             	sub    esp,0xc
c0019d7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d81:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019d88:	74 07                	je     c0019d91 <CPU::setupFeatures()+0x17>
c0019d8a:	52                   	push   edx
c0019d8b:	e8 46 ff ff ff       	call   c0019cd6 <CPU::setupSMEP()>
c0019d90:	58                   	pop    eax
c0019d91:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019d98:	74 07                	je     c0019da1 <CPU::setupFeatures()+0x27>
c0019d9a:	52                   	push   edx
c0019d9b:	e8 cc ff ff ff       	call   c0019d6c <CPU::setupSMAP()>
c0019da0:	58                   	pop    eax
c0019da1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019da8:	74 07                	je     c0019db1 <CPU::setupFeatures()+0x37>
c0019daa:	52                   	push   edx
c0019dab:	e8 32 ff ff ff       	call   c0019ce2 <CPU::setupUMIP()>
c0019db0:	58                   	pop    eax
c0019db1:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019db8:	74 07                	je     c0019dc1 <CPU::setupFeatures()+0x47>
c0019dba:	52                   	push   edx
c0019dbb:	e8 2c ff ff ff       	call   c0019cec <CPU::setupTSC()>
c0019dc0:	58                   	pop    eax
c0019dc1:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019dc8:	74 07                	je     c0019dd1 <CPU::setupFeatures()+0x57>
c0019dca:	52                   	push   edx
c0019dcb:	e8 26 ff ff ff       	call   c0019cf6 <CPU::setupLargePages()>
c0019dd0:	59                   	pop    ecx
c0019dd1:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019dd8:	74 07                	je     c0019de1 <CPU::setupFeatures()+0x67>
c0019dda:	52                   	push   edx
c0019ddb:	e8 5e ff ff ff       	call   c0019d3e <CPU::setupGlobalPages()>
c0019de0:	58                   	pop    eax
c0019de1:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019de8:	74 0c                	je     c0019df6 <CPU::setupFeatures()+0x7c>
c0019dea:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019dee:	83 c4 0c             	add    esp,0xc
c0019df1:	e9 0a ff ff ff       	jmp    c0019d00 <CPU::setupPAT()>
c0019df6:	83 c4 0c             	add    esp,0xc
c0019df9:	c3                   	ret    

c0019dfa <CPU::open(int, int, void*)>:
c0019dfa:	57                   	push   edi
c0019dfb:	56                   	push   esi
c0019dfc:	53                   	push   ebx
c0019dfd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e05:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019e0b:	83 ec 0c             	sub    esp,0xc
c0019e0e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019e14:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019e1a:	50                   	push   eax
c0019e1b:	e8 18 53 ff ff       	call   c000f138 <GDT::setup()>
c0019e20:	83 c4 0c             	add    esp,0xc
c0019e23:	6a 00                	push   0x0
c0019e25:	68 ef be ad de       	push   0xdeadbeef
c0019e2a:	57                   	push   edi
c0019e2b:	e8 7c 75 ff ff       	call   c00113ac <TSS::setup(unsigned long, unsigned long)>
c0019e30:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019e33:	e8 54 75 ff ff       	call   c001138c <TSS::flush()>
c0019e38:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019e3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e41:	e8 56 55 ff ff       	call   c000f39c <IDT::setup()>
c0019e46:	b8 00 04 00 00       	mov    eax,0x400
c0019e4b:	0f 23 f8             	mov    db7,eax
c0019e4e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019e58:	e8 b5 60 ff ff       	call   c000ff12 <Phys::allocatePage()>
c0019e5d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019e63:	89 30                	mov    DWORD PTR [eax],esi
c0019e65:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019e6b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019e6e:	58                   	pop    eax
c0019e6f:	5a                   	pop    edx
c0019e70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e7a:	e8 cd 86 ff ff       	call   c001254c <VAS::setCPUSpecific(unsigned long)>
c0019e7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e82:	e8 6d f4 ff ff       	call   c00192f4 <CPU::detectFeatures()>
c0019e87:	e8 0f ba ff ff       	call   c001589b <setupInterruptController()>
c0019e8c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019e92:	a1 80 ee 02 c0       	mov    eax,ds:0xc002ee80
c0019e97:	83 e0 10             	and    eax,0x10
c0019e9a:	83 f8 01             	cmp    eax,0x1
c0019e9d:	19 c0                	sbb    eax,eax
c0019e9f:	83 e0 46             	and    eax,0x46
c0019ea2:	83 c0 1e             	add    eax,0x1e
c0019ea5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ea8:	e8 46 d0 ff ff       	call   c0016ef3 <setupTimer(int)>
c0019ead:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019eb3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eb6:	e8 bf fe ff ff       	call   c0019d7a <CPU::setupFeatures()>
c0019ebb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ebe:	e8 b5 f1 ff ff       	call   c0019078 <CPU::displayFeatures()>
c0019ec3:	83 c4 10             	add    esp,0x10
c0019ec6:	31 c0                	xor    eax,eax
c0019ec8:	5b                   	pop    ebx
c0019ec9:	5e                   	pop    esi
c0019eca:	5f                   	pop    edi
c0019ecb:	c3                   	ret    

c0019ecc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ecc:	57                   	push   edi
c0019ecd:	56                   	push   esi
c0019ece:	53                   	push   ebx
c0019ecf:	51                   	push   ecx
c0019ed0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ed4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019ed7:	0f 02 c0             	lar    eax,ax
c0019eda:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019edd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ee1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019ee4:	88 ca                	mov    dl,cl
c0019ee6:	c0 ea 06             	shr    dl,0x6
c0019ee9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019eed:	89 ca                	mov    edx,ecx
c0019eef:	66 c1 ea 03          	shr    dx,0x3
c0019ef3:	83 e2 07             	and    edx,0x7
c0019ef6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019efb:	88 17                	mov    BYTE PTR [edi],dl
c0019efd:	0f 84 a6 01 00 00    	je     c001a0a9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f03:	83 e1 07             	and    ecx,0x7
c0019f06:	80 f9 04             	cmp    cl,0x4
c0019f09:	0f 84 98 00 00 00    	je     c0019fa7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019f0f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f14:	0f 95 c0             	setne  al
c0019f17:	80 f9 05             	cmp    cl,0x5
c0019f1a:	0f 95 c2             	setne  dl
c0019f1d:	08 c2                	or     dl,al
c0019f1f:	74 79                	je     c0019f9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019f21:	84 c9                	test   cl,cl
c0019f23:	75 05                	jne    c0019f2a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019f25:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019f28:	eb 3c                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f2a:	80 f9 01             	cmp    cl,0x1
c0019f2d:	75 05                	jne    c0019f34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019f2f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019f32:	eb 32                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f34:	80 f9 02             	cmp    cl,0x2
c0019f37:	75 05                	jne    c0019f3e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019f39:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019f3c:	eb 28                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f3e:	31 c0                	xor    eax,eax
c0019f40:	80 f9 03             	cmp    cl,0x3
c0019f43:	75 05                	jne    c0019f4a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019f45:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019f48:	eb 1c                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f4a:	80 f9 05             	cmp    cl,0x5
c0019f4d:	75 05                	jne    c0019f54 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019f4f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019f52:	eb 12                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f54:	80 f9 06             	cmp    cl,0x6
c0019f57:	75 05                	jne    c0019f5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019f59:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019f5c:	eb 08                	jmp    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f5e:	80 f9 07             	cmp    cl,0x7
c0019f61:	75 03                	jne    c0019f66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f63:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019f66:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f6b:	75 10                	jne    c0019f7d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019f6d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019f71:	b9 03 00 00 00       	mov    ecx,0x3
c0019f76:	01 d0                	add    eax,edx
c0019f78:	e9 37 01 00 00       	jmp    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f7d:	b9 02 00 00 00       	mov    ecx,0x2
c0019f82:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019f87:	0f 85 27 01 00 00    	jne    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f8d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019f90:	b9 06 00 00 00       	mov    ecx,0x6
c0019f95:	e9 1a 01 00 00       	jmp    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f9a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019f9d:	b9 06 00 00 00       	mov    ecx,0x6
c0019fa2:	e9 0f 01 00 00       	jmp    c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019fa7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019faa:	88 ca                	mov    dl,cl
c0019fac:	c0 ea 06             	shr    dl,0x6
c0019faf:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019fb3:	89 ca                	mov    edx,ecx
c0019fb5:	66 c1 ea 03          	shr    dx,0x3
c0019fb9:	83 e2 07             	and    edx,0x7
c0019fbc:	80 e1 07             	and    cl,0x7
c0019fbf:	75 05                	jne    c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019fc1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019fc4:	eb 4c                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fc6:	80 f9 01             	cmp    cl,0x1
c0019fc9:	75 05                	jne    c0019fd0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019fcb:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019fce:	eb 42                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fd0:	80 f9 02             	cmp    cl,0x2
c0019fd3:	75 05                	jne    c0019fda <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019fd5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019fd8:	eb 38                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fda:	80 f9 03             	cmp    cl,0x3
c0019fdd:	75 05                	jne    c0019fe4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019fdf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019fe2:	eb 2e                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fe4:	80 f9 04             	cmp    cl,0x4
c0019fe7:	75 12                	jne    c0019ffb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019fe9:	f6 c4 60             	test   ah,0x60
c0019fec:	75 08                	jne    c0019ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019fee:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019ff1:	8d 78 14             	lea    edi,[eax+0x14]
c0019ff4:	eb 1c                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ff6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019ff9:	eb 17                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ffb:	80 f9 05             	cmp    cl,0x5
c0019ffe:	75 05                	jne    c001a005 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a000:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a003:	eb 0d                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a005:	80 f9 06             	cmp    cl,0x6
c001a008:	75 05                	jne    c001a00f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a00a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a00d:	eb 03                	jmp    c001a012 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a00f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a012:	84 d2                	test   dl,dl
c001a014:	75 05                	jne    c001a01b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a016:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a019:	eb 3c                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a01b:	80 fa 01             	cmp    dl,0x1
c001a01e:	75 05                	jne    c001a025 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a020:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a023:	eb 32                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a025:	80 fa 02             	cmp    dl,0x2
c001a028:	75 05                	jne    c001a02f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a02a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a02d:	eb 28                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a02f:	80 fa 03             	cmp    dl,0x3
c001a032:	75 05                	jne    c001a039 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a034:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a037:	eb 1e                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a039:	31 c0                	xor    eax,eax
c001a03b:	80 fa 04             	cmp    dl,0x4
c001a03e:	74 17                	je     c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a040:	80 fa 05             	cmp    dl,0x5
c001a043:	75 05                	jne    c001a04a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a045:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a048:	eb 0d                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a04a:	80 fa 06             	cmp    dl,0x6
c001a04d:	75 05                	jne    c001a054 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a04f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a052:	eb 03                	jmp    c001a057 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a054:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a057:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a05c:	0f 94 c2             	sete   dl
c001a05f:	80 f9 05             	cmp    cl,0x5
c001a062:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a066:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a06b:	d3 e0                	shl    eax,cl
c001a06d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a071:	74 0a                	je     c001a07d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a073:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a076:	b9 07 00 00 00       	mov    ecx,0x7
c001a07b:	eb 37                	jmp    c001a0b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a07d:	01 f8                	add    eax,edi
c001a07f:	b9 03 00 00 00       	mov    ecx,0x3
c001a084:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a089:	74 2b                	je     c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a08b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a090:	75 0d                	jne    c001a09f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a092:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a096:	01 c8                	add    eax,ecx
c001a098:	b9 04 00 00 00       	mov    ecx,0x4
c001a09d:	eb 17                	jmp    c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a09f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a0a2:	b9 07 00 00 00       	mov    ecx,0x7
c001a0a7:	eb 0d                	jmp    c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0a9:	b9 02 00 00 00       	mov    ecx,0x2
c001a0ae:	b2 01                	mov    dl,0x1
c001a0b0:	31 c0                	xor    eax,eax
c001a0b2:	eb 02                	jmp    c001a0b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0b4:	31 d2                	xor    edx,edx
c001a0b6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a0ba:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a0bc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a0c0:	88 11                	mov    BYTE PTR [ecx],dl
c001a0c2:	5a                   	pop    edx
c001a0c3:	5b                   	pop    ebx
c001a0c4:	5e                   	pop    esi
c001a0c5:	5f                   	pop    edi
c001a0c6:	c3                   	ret    

c001a0c7 <Krnl::smpEntry()>:
c001a0c7:	eb fe                	jmp    c001a0c7 <Krnl::smpEntry()>

c001a0c9 <Krnl::startCPU(int)>:
c001a0c9:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001a0ce:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a0d5:	0f 84 36 01 00 00    	je     c001a211 <Krnl::startCPU(int)+0x148>
c001a0db:	53                   	push   ebx
c001a0dc:	83 ec 10             	sub    esp,0x10
c001a0df:	fa                   	cli    
c001a0e0:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001a0e6:	6a 1b                	push   0x1b
c001a0e8:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c001a0ee:	e8 59 4d ff ff       	call   c000ee4c <Computer::rdmsr(unsigned int)>
c001a0f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a0f8:	89 c3                	mov    ebx,eax
c001a0fa:	58                   	pop    eax
c001a0fb:	5a                   	pop    edx
c001a0fc:	53                   	push   ebx
c001a0fd:	68 e4 c3 02 c0       	push   0xc002c3e4
c001a102:	e8 3a 8d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001a107:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a111:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a115:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a11f:	c1 e0 18             	shl    eax,0x18
c001a122:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a128:	83 c4 10             	add    esp,0x10
c001a12b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a131:	09 c2                	or     edx,eax
c001a133:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a139:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a13f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a145:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a14b:	80 cd c5             	or     ch,0xc5
c001a14e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a154:	f3 90                	pause  
c001a156:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a158:	0f ba e1 0c          	bt     ecx,0xc
c001a15c:	72 f6                	jb     c001a154 <Krnl::startCPU(int)+0x8b>
c001a15e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a164:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a16a:	09 c1                	or     ecx,eax
c001a16c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a172:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a178:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a17e:	80 cd 85             	or     ch,0x85
c001a181:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a187:	f3 90                	pause  
c001a189:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a18b:	0f ba e1 0c          	bt     ecx,0xc
c001a18f:	72 f6                	jb     c001a187 <Krnl::startCPU(int)+0xbe>
c001a191:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a19b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1a1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1a7:	09 c1                	or     ecx,eax
c001a1a9:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a1af:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1b5:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a1bb:	81 c9 02 06 00 00    	or     ecx,0x602
c001a1c1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1c7:	f3 90                	pause  
c001a1c9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1cb:	0f ba e1 0c          	bt     ecx,0xc
c001a1cf:	72 f6                	jb     c001a1c7 <Krnl::startCPU(int)+0xfe>
c001a1d1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1db:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1e1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1e7:	09 c8                	or     eax,ecx
c001a1e9:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a1ef:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a1f5:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a1fa:	0d 02 06 00 00       	or     eax,0x602
c001a1ff:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a205:	f3 90                	pause  
c001a207:	8b 02                	mov    eax,DWORD PTR [edx]
c001a209:	0f ba e0 0c          	bt     eax,0xc
c001a20d:	72 f6                	jb     c001a205 <Krnl::startCPU(int)+0x13c>
c001a20f:	eb fe                	jmp    c001a20f <Krnl::startCPU(int)+0x146>
c001a211:	c3                   	ret    

c001a212 <Krnl::startCPUs()>:
c001a212:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001a217:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a21d:	88 c2                	mov    dl,al
c001a21f:	83 e2 0a             	and    edx,0xa
c001a222:	80 fa 0a             	cmp    dl,0xa
c001a225:	75 09                	jne    c001a230 <Krnl::startCPUs()+0x1e>
c001a227:	a8 01                	test   al,0x1
c001a229:	74 05                	je     c001a230 <Krnl::startCPUs()+0x1e>
c001a22b:	e9 6b 5f fe ff       	jmp    c000019b <prepareTramp>
c001a230:	c3                   	ret    
c001a231:	90                   	nop

c001a232 <EnvVarContainer::getEnv(char const*)>:
c001a232:	57                   	push   edi
c001a233:	56                   	push   esi
c001a234:	53                   	push   ebx
c001a235:	31 db                	xor    ebx,ebx
c001a237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a23b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a23d:	7e 2b                	jle    c001a26a <EnvVarContainer::getEnv(char const*)+0x38>
c001a23f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a246:	50                   	push   eax
c001a247:	50                   	push   eax
c001a248:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a24b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a24e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a252:	e8 5d 66 fe ff       	call   c00008b4 <strcmp>
c001a257:	83 c4 10             	add    esp,0x10
c001a25a:	85 c0                	test   eax,eax
c001a25c:	75 09                	jne    c001a267 <EnvVarContainer::getEnv(char const*)+0x35>
c001a25e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a261:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a265:	eb 05                	jmp    c001a26c <EnvVarContainer::getEnv(char const*)+0x3a>
c001a267:	43                   	inc    ebx
c001a268:	eb d1                	jmp    c001a23b <EnvVarContainer::getEnv(char const*)+0x9>
c001a26a:	31 c0                	xor    eax,eax
c001a26c:	5b                   	pop    ebx
c001a26d:	5e                   	pop    esi
c001a26e:	5f                   	pop    edi
c001a26f:	c3                   	ret    

c001a270 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a270:	55                   	push   ebp
c001a271:	57                   	push   edi
c001a272:	56                   	push   esi
c001a273:	53                   	push   ebx
c001a274:	83 ec 28             	sub    esp,0x28
c001a277:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a27b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a27f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a283:	56                   	push   esi
c001a284:	e8 ff 64 fe ff       	call   c0000788 <strlen>
c001a289:	40                   	inc    eax
c001a28a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a28d:	e8 14 56 ff ff       	call   c000f8a6 <malloc>
c001a292:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a295:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a299:	e8 ea 64 fe ff       	call   c0000788 <strlen>
c001a29e:	40                   	inc    eax
c001a29f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2a2:	e8 ff 55 ff ff       	call   c000f8a6 <malloc>
c001a2a7:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2ae:	e8 d5 64 fe ff       	call   c0000788 <strlen>
c001a2b3:	83 c4 0c             	add    esp,0xc
c001a2b6:	40                   	inc    eax
c001a2b7:	50                   	push   eax
c001a2b8:	6a 00                	push   0x0
c001a2ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a2be:	e8 a9 64 fe ff       	call   c000076c <memset>
c001a2c3:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2c6:	e8 bd 64 fe ff       	call   c0000788 <strlen>
c001a2cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a2cf:	8d 48 01             	lea    ecx,[eax+0x1]
c001a2d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2d4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a2d7:	89 ee                	mov    esi,ebp
c001a2d9:	e8 aa 64 fe ff       	call   c0000788 <strlen>
c001a2de:	83 c4 0c             	add    esp,0xc
c001a2e1:	40                   	inc    eax
c001a2e2:	50                   	push   eax
c001a2e3:	6a 00                	push   0x0
c001a2e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2e9:	e8 7e 64 fe ff       	call   c000076c <memset>
c001a2ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a2f1:	e8 92 64 fe ff       	call   c0000788 <strlen>
c001a2f6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a2fa:	8d 48 01             	lea    ecx,[eax+0x1]
c001a2fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a301:	40                   	inc    eax
c001a302:	89 03                	mov    DWORD PTR [ebx],eax
c001a304:	c1 e0 03             	shl    eax,0x3
c001a307:	5a                   	pop    edx
c001a308:	59                   	pop    ecx
c001a309:	50                   	push   eax
c001a30a:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a30d:	e8 80 55 ff ff       	call   c000f892 <realloc>
c001a312:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a316:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a318:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a31b:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a31f:	b9 08 00 00 00       	mov    ecx,0x8
c001a324:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a326:	83 c4 2c             	add    esp,0x2c
c001a329:	5b                   	pop    ebx
c001a32a:	5e                   	pop    esi
c001a32b:	5f                   	pop    edi
c001a32c:	5d                   	pop    ebp
c001a32d:	c3                   	ret    

c001a32e <EnvVarContainer::deleteEnv(char const*)>:
c001a32e:	c3                   	ret    
c001a32f:	90                   	nop

c001a330 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a330:	55                   	push   ebp
c001a331:	57                   	push   edi
c001a332:	56                   	push   esi
c001a333:	53                   	push   ebx
c001a334:	81 ec 38 01 00 00    	sub    esp,0x138
c001a33a:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a341:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a348:	68 14 01 00 00       	push   0x114
c001a34d:	e8 54 55 ff ff       	call   c000f8a6 <malloc>
c001a352:	83 c4 0c             	add    esp,0xc
c001a355:	89 c5                	mov    ebp,eax
c001a357:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a35a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a361:	50                   	push   eax
c001a362:	e8 39 90 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001a367:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a36a:	e8 03 93 ff ff       	call   c0013672 <File::exists()>
c001a36f:	83 c4 10             	add    esp,0x10
c001a372:	84 c0                	test   al,al
c001a374:	75 32                	jne    c001a3a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a376:	51                   	push   ecx
c001a377:	51                   	push   ecx
c001a378:	6a 12                	push   0x12
c001a37a:	55                   	push   ebp
c001a37b:	e8 84 90 ff ff       	call   c0013404 <File::open(FileOpenMode)>
c001a380:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a383:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a386:	89 34 24             	mov    DWORD PTR [esp],esi
c001a389:	e8 fa 63 fe ff       	call   c0000788 <strlen>
c001a38e:	5a                   	pop    edx
c001a38f:	31 d2                	xor    edx,edx
c001a391:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a395:	51                   	push   ecx
c001a396:	56                   	push   esi
c001a397:	52                   	push   edx
c001a398:	50                   	push   eax
c001a399:	55                   	push   ebp
c001a39a:	ff d7                	call   edi
c001a39c:	83 c4 14             	add    esp,0x14
c001a39f:	55                   	push   ebp
c001a3a0:	e8 bd 90 ff ff       	call   c0013462 <File::close()>
c001a3a5:	83 c4 10             	add    esp,0x10
c001a3a8:	31 f6                	xor    esi,esi
c001a3aa:	50                   	push   eax
c001a3ab:	68 00 01 00 00       	push   0x100
c001a3b0:	6a 00                	push   0x0
c001a3b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a3b6:	50                   	push   eax
c001a3b7:	e8 b0 63 fe ff       	call   c000076c <memset>
c001a3bc:	58                   	pop    eax
c001a3bd:	5a                   	pop    edx
c001a3be:	6a 01                	push   0x1
c001a3c0:	55                   	push   ebp
c001a3c1:	e8 3e 90 ff ff       	call   c0013404 <File::open(FileOpenMode)>
c001a3c6:	83 c4 10             	add    esp,0x10
c001a3c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a3d1:	83 ec 0c             	sub    esp,0xc
c001a3d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3d7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a3db:	51                   	push   ecx
c001a3dc:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a3e0:	52                   	push   edx
c001a3e1:	6a 00                	push   0x0
c001a3e3:	6a 01                	push   0x1
c001a3e5:	55                   	push   ebp
c001a3e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a3e9:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a3ed:	83 c4 20             	add    esp,0x20
c001a3f0:	3c 0d                	cmp    al,0xd
c001a3f2:	0f 84 16 01 00 00    	je     c001a50e <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a3f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a3fd:	0f 84 fc 00 00 00    	je     c001a4ff <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a403:	3c 0a                	cmp    al,0xa
c001a405:	74 13                	je     c001a41a <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a407:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a40c:	74 0c                	je     c001a41a <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a40e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a414:	0f 8e e5 00 00 00    	jle    c001a4ff <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a41a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a41e:	83 ec 0c             	sub    esp,0xc
c001a421:	8d 78 01             	lea    edi,[eax+0x1]
c001a424:	57                   	push   edi
c001a425:	e8 7c 54 ff ff       	call   c000f8a6 <malloc>
c001a42a:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a42e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a432:	8d 56 04             	lea    edx,[esi+0x4]
c001a435:	89 14 24             	mov    DWORD PTR [esp],edx
c001a438:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a43c:	e8 65 54 ff ff       	call   c000f8a6 <malloc>
c001a441:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a445:	83 c4 0c             	add    esp,0xc
c001a448:	57                   	push   edi
c001a449:	6a 00                	push   0x0
c001a44b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a44f:	e8 18 63 fe ff       	call   c000076c <memset>
c001a454:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a458:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a45c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a462:	83 c4 0c             	add    esp,0xc
c001a465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a469:	52                   	push   edx
c001a46a:	6a 00                	push   0x0
c001a46c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a470:	e8 f7 62 fe ff       	call   c000076c <memset>
c001a475:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a479:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a47d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a480:	e8 03 63 fe ff       	call   c0000788 <strlen>
c001a485:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a489:	89 c1                	mov    ecx,eax
c001a48b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a48d:	5e                   	pop    esi
c001a48e:	5f                   	pop    edi
c001a48f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a493:	68 f5 c3 02 c0       	push   0xc002c3f5
c001a498:	e8 a4 89 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001a49d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a49f:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a4a2:	40                   	inc    eax
c001a4a3:	83 c4 10             	add    esp,0x10
c001a4a6:	89 03                	mov    DWORD PTR [ebx],eax
c001a4a8:	85 d2                	test   edx,edx
c001a4aa:	75 0c                	jne    c001a4b8 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a4ac:	83 ec 0c             	sub    esp,0xc
c001a4af:	6a 08                	push   0x8
c001a4b1:	e8 f0 53 ff ff       	call   c000f8a6 <malloc>
c001a4b6:	eb 0c                	jmp    c001a4c4 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a4b8:	c1 e0 03             	shl    eax,0x3
c001a4bb:	51                   	push   ecx
c001a4bc:	51                   	push   ecx
c001a4bd:	50                   	push   eax
c001a4be:	52                   	push   edx
c001a4bf:	e8 ce 53 ff ff       	call   c000f892 <realloc>
c001a4c4:	83 c4 10             	add    esp,0x10
c001a4c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4ca:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a4cc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a4cf:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a4d3:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a4d7:	b9 08 00 00 00       	mov    ecx,0x8
c001a4dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4de:	31 f6                	xor    esi,esi
c001a4e0:	52                   	push   edx
c001a4e1:	68 00 01 00 00       	push   0x100
c001a4e6:	6a 00                	push   0x0
c001a4e8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a4ec:	50                   	push   eax
c001a4ed:	e8 7a 62 fe ff       	call   c000076c <memset>
c001a4f2:	83 c4 10             	add    esp,0x10
c001a4f5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a4fd:	eb 0f                	jmp    c001a50e <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a4ff:	3c 3d                	cmp    al,0x3d
c001a501:	74 07                	je     c001a50a <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a503:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a507:	46                   	inc    esi
c001a508:	eb 04                	jmp    c001a50e <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a50a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a50e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a513:	0f 85 b8 fe ff ff    	jne    c001a3d1 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a519:	50                   	push   eax
c001a51a:	50                   	push   eax
c001a51b:	ff 33                	push   DWORD PTR [ebx]
c001a51d:	68 03 c4 02 c0       	push   0xc002c403
c001a522:	e8 1a 89 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001a527:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a52d:	5b                   	pop    ebx
c001a52e:	5e                   	pop    esi
c001a52f:	5f                   	pop    edi
c001a530:	5d                   	pop    ebp
c001a531:	c3                   	ret    

c001a532 <EnvVarContainer::__loadSystem()>:
c001a532:	83 ec 10             	sub    esp,0x10
c001a535:	68 a0 e3 02 c0       	push   0xc002e3a0
c001a53a:	68 2e c4 02 c0       	push   0xc002c42e
c001a53f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a543:	e8 e8 fd ff ff       	call   c001a330 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a548:	83 c4 1c             	add    esp,0x1c
c001a54b:	c3                   	ret    

c001a54c <EnvVarContainer::__loadUser()>:
c001a54c:	c3                   	ret    
c001a54d:	90                   	nop

c001a54e <EnvVarContainer::EnvVarContainer(Process*)>:
c001a54e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a552:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a55c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a560:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a567:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a56e:	90                   	nop
c001a56f:	c3                   	ret    

c001a570 <EnvVarContainer::~EnvVarContainer()>:
c001a570:	83 ec 0c             	sub    esp,0xc
c001a573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a577:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a57a:	85 c0                	test   eax,eax
c001a57c:	74 1d                	je     c001a59b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a582:	8b 00                	mov    eax,DWORD PTR [eax]
c001a584:	85 c0                	test   eax,eax
c001a586:	74 13                	je     c001a59b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a58c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a58f:	83 ec 0c             	sub    esp,0xc
c001a592:	50                   	push   eax
c001a593:	e8 1e 53 ff ff       	call   c000f8b6 <free>
c001a598:	83 c4 10             	add    esp,0x10
c001a59b:	90                   	nop
c001a59c:	83 c4 0c             	add    esp,0xc
c001a59f:	c3                   	ret    

c001a5a0 <Krnl::getEnv(Process*, char const*)>:
c001a5a0:	53                   	push   ebx
c001a5a1:	83 ec 08             	sub    esp,0x8
c001a5a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5ac:	39 05 d0 23 03 c0    	cmp    DWORD PTR ds:0xc00323d0,eax
c001a5b2:	74 04                	je     c001a5b8 <Krnl::getEnv(Process*, char const*)+0x18>
c001a5b4:	85 c0                	test   eax,eax
c001a5b6:	75 0b                	jne    c001a5c3 <Krnl::getEnv(Process*, char const*)+0x23>
c001a5b8:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a5bd:	85 c0                	test   eax,eax
c001a5bf:	75 19                	jne    c001a5da <Krnl::getEnv(Process*, char const*)+0x3a>
c001a5c1:	eb 27                	jmp    c001a5ea <Krnl::getEnv(Process*, char const*)+0x4a>
c001a5c3:	52                   	push   edx
c001a5c4:	52                   	push   edx
c001a5c5:	53                   	push   ebx
c001a5c6:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a5cc:	e8 61 fc ff ff       	call   c001a232 <EnvVarContainer::getEnv(char const*)>
c001a5d1:	83 c4 10             	add    esp,0x10
c001a5d4:	85 c0                	test   eax,eax
c001a5d6:	75 28                	jne    c001a600 <Krnl::getEnv(Process*, char const*)+0x60>
c001a5d8:	eb de                	jmp    c001a5b8 <Krnl::getEnv(Process*, char const*)+0x18>
c001a5da:	52                   	push   edx
c001a5db:	52                   	push   edx
c001a5dc:	53                   	push   ebx
c001a5dd:	50                   	push   eax
c001a5de:	e8 4f fc ff ff       	call   c001a232 <EnvVarContainer::getEnv(char const*)>
c001a5e3:	83 c4 10             	add    esp,0x10
c001a5e6:	85 c0                	test   eax,eax
c001a5e8:	75 16                	jne    c001a600 <Krnl::getEnv(Process*, char const*)+0x60>
c001a5ea:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a5ee:	a1 b8 19 03 c0       	mov    eax,ds:0xc00319b8
c001a5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a5f7:	83 c4 08             	add    esp,0x8
c001a5fa:	5b                   	pop    ebx
c001a5fb:	e9 32 fc ff ff       	jmp    c001a232 <EnvVarContainer::getEnv(char const*)>
c001a600:	83 c4 08             	add    esp,0x8
c001a603:	5b                   	pop    ebx
c001a604:	c3                   	ret    

c001a605 <Krnl::setEnvSystem(char const*, char const*)>:
c001a605:	83 ec 10             	sub    esp,0x10
c001a608:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a60c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a610:	ff 35 b8 19 03 c0    	push   DWORD PTR ds:0xc00319b8
c001a616:	e8 55 fc ff ff       	call   c001a270 <EnvVarContainer::setEnv(char const*, char const*)>
c001a61b:	83 c4 1c             	add    esp,0x1c
c001a61e:	c3                   	ret    

c001a61f <Krnl::setEnvUser(char const*, char const*)>:
c001a61f:	a1 b4 19 03 c0       	mov    eax,ds:0xc00319b4
c001a624:	85 c0                	test   eax,eax
c001a626:	74 15                	je     c001a63d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a628:	83 ec 10             	sub    esp,0x10
c001a62b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a62f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a633:	50                   	push   eax
c001a634:	e8 37 fc ff ff       	call   c001a270 <EnvVarContainer::setEnv(char const*, char const*)>
c001a639:	83 c4 1c             	add    esp,0x1c
c001a63c:	c3                   	ret    
c001a63d:	c3                   	ret    

c001a63e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a63e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a642:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a648:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a64c:	e9 1f fc ff ff       	jmp    c001a270 <EnvVarContainer::setEnv(char const*, char const*)>

c001a651 <Krnl::deleteEnvSystem(char const*)>:
c001a651:	c3                   	ret    

c001a652 <Krnl::deleteEnvUser(char const*)>:
c001a652:	c3                   	ret    

c001a653 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a653:	c3                   	ret    

c001a654 <Krnl::newProcessEnv(Process*)>:
c001a654:	83 ec 28             	sub    esp,0x28
c001a657:	6a 0c                	push   0xc
c001a659:	e8 48 52 ff ff       	call   c000f8a6 <malloc>
c001a65e:	5a                   	pop    edx
c001a65f:	59                   	pop    ecx
c001a660:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a664:	50                   	push   eax
c001a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a669:	e8 e0 fe ff ff       	call   c001a54e <EnvVarContainer::EnvVarContainer(Process*)>
c001a66e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a672:	83 c4 2c             	add    esp,0x2c
c001a675:	c3                   	ret    

c001a676 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a676:	57                   	push   edi
c001a677:	56                   	push   esi
c001a678:	53                   	push   ebx
c001a679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a67d:	83 ec 0c             	sub    esp,0xc
c001a680:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a686:	6a 0c                	push   0xc
c001a688:	e8 19 52 ff ff       	call   c000f8a6 <malloc>
c001a68d:	89 c3                	mov    ebx,eax
c001a68f:	58                   	pop    eax
c001a690:	5a                   	pop    edx
c001a691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a695:	53                   	push   ebx
c001a696:	e8 b3 fe ff ff       	call   c001a54e <EnvVarContainer::EnvVarContainer(Process*)>
c001a69b:	8b 07                	mov    eax,DWORD PTR [edi]
c001a69d:	89 03                	mov    DWORD PTR [ebx],eax
c001a69f:	c1 e0 03             	shl    eax,0x3
c001a6a2:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6a5:	e8 fc 51 ff ff       	call   c000f8a6 <malloc>
c001a6aa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a6ad:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a6af:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a6b2:	c1 e1 03             	shl    ecx,0x3
c001a6b5:	89 c7                	mov    edi,eax
c001a6b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6b9:	83 c4 10             	add    esp,0x10
c001a6bc:	89 d8                	mov    eax,ebx
c001a6be:	5b                   	pop    ebx
c001a6bf:	5e                   	pop    esi
c001a6c0:	5f                   	pop    edi
c001a6c1:	c3                   	ret    

c001a6c2 <Krnl::loadSystemEnv()>:
c001a6c2:	53                   	push   ebx
c001a6c3:	83 ec 14             	sub    esp,0x14
c001a6c6:	6a 0c                	push   0xc
c001a6c8:	e8 d9 51 ff ff       	call   c000f8a6 <malloc>
c001a6cd:	89 c3                	mov    ebx,eax
c001a6cf:	58                   	pop    eax
c001a6d0:	5a                   	pop    edx
c001a6d1:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001a6d7:	53                   	push   ebx
c001a6d8:	e8 71 fe ff ff       	call   c001a54e <EnvVarContainer::EnvVarContainer(Process*)>
c001a6dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6e0:	89 1d b8 19 03 c0    	mov    DWORD PTR ds:0xc00319b8,ebx
c001a6e6:	e8 47 fe ff ff       	call   c001a532 <EnvVarContainer::__loadSystem()>
c001a6eb:	83 c4 18             	add    esp,0x18
c001a6ee:	5b                   	pop    ebx
c001a6ef:	c3                   	ret    

c001a6f0 <Krnl::loadUserEnv()>:
c001a6f0:	53                   	push   ebx
c001a6f1:	83 ec 14             	sub    esp,0x14
c001a6f4:	6a 0c                	push   0xc
c001a6f6:	e8 ab 51 ff ff       	call   c000f8a6 <malloc>
c001a6fb:	89 c3                	mov    ebx,eax
c001a6fd:	58                   	pop    eax
c001a6fe:	5a                   	pop    edx
c001a6ff:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001a705:	53                   	push   ebx
c001a706:	e8 43 fe ff ff       	call   c001a54e <EnvVarContainer::EnvVarContainer(Process*)>
c001a70b:	89 1d b4 19 03 c0    	mov    DWORD PTR ds:0xc00319b4,ebx
c001a711:	83 c4 18             	add    esp,0x18
c001a714:	5b                   	pop    ebx
c001a715:	c3                   	ret    

c001a716 <Krnl::flushEnv()>:
c001a716:	c3                   	ret    

c001a717 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a717:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a71b:	8b 15 b4 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319b4
c001a721:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a727:	a1 b8 19 03 c0       	mov    eax,ds:0xc00319b8
c001a72c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a72e:	03 01                	add    eax,DWORD PTR [ecx]
c001a730:	85 d2                	test   edx,edx
c001a732:	74 02                	je     c001a736 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a734:	03 02                	add    eax,DWORD PTR [edx]
c001a736:	c3                   	ret    

c001a737 <Krnl::getProcessEnvPair(Process*, int)>:
c001a737:	57                   	push   edi
c001a738:	8b 0d b4 19 03 c0    	mov    ecx,DWORD PTR ds:0xc00319b4
c001a73e:	56                   	push   esi
c001a73f:	85 c9                	test   ecx,ecx
c001a741:	53                   	push   ebx
c001a742:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a746:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a74a:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a750:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a754:	8b 02                	mov    eax,DWORD PTR [edx]
c001a756:	75 47                	jne    c001a79f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a758:	39 c3                	cmp    ebx,eax
c001a75a:	7c 47                	jl     c001a7a3 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a75c:	8b 15 b8 19 03 c0    	mov    edx,DWORD PTR ds:0xc00319b8
c001a762:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a764:	01 c1                	add    ecx,eax
c001a766:	39 d9                	cmp    ecx,ebx
c001a768:	7e 6c                	jle    c001a7d6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a76a:	51                   	push   ecx
c001a76b:	89 d9                	mov    ecx,ebx
c001a76d:	29 c1                	sub    ecx,eax
c001a76f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a772:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a776:	53                   	push   ebx
c001a777:	68 50 c4 02 c0       	push   0xc002c450
c001a77c:	e8 c0 86 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001a781:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a787:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a789:	a1 b8 19 03 c0       	mov    eax,ds:0xc00319b8
c001a78e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a791:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a795:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a798:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a79b:	89 06                	mov    DWORD PTR [esi],eax
c001a79d:	eb 51                	jmp    c001a7f0 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a79f:	39 c3                	cmp    ebx,eax
c001a7a1:	7d 05                	jge    c001a7a8 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a7a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a7a6:	eb 20                	jmp    c001a7c8 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a7a8:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a7aa:	8d 14 07             	lea    edx,[edi+eax*1]
c001a7ad:	39 da                	cmp    edx,ebx
c001a7af:	7e 04                	jle    c001a7b5 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a7b1:	29 c3                	sub    ebx,eax
c001a7b3:	eb 10                	jmp    c001a7c5 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a7b5:	8b 0d b8 19 03 c0    	mov    ecx,DWORD PTR ds:0xc00319b8
c001a7bb:	03 11                	add    edx,DWORD PTR [ecx]
c001a7bd:	39 da                	cmp    edx,ebx
c001a7bf:	7e 15                	jle    c001a7d6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7c1:	29 c3                	sub    ebx,eax
c001a7c3:	29 fb                	sub    ebx,edi
c001a7c5:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a7c8:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a7cc:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a7cf:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a7d2:	89 06                	mov    DWORD PTR [esi],eax
c001a7d4:	eb 1d                	jmp    c001a7f3 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a7d6:	83 ec 0c             	sub    esp,0xc
c001a7d9:	68 64 c4 02 c0       	push   0xc002c464
c001a7de:	e8 18 00 00 00       	call   c001a7fb <Krnl::panic(char const*)>
c001a7e3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a7e9:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a7f0:	83 c4 10             	add    esp,0x10
c001a7f3:	89 f0                	mov    eax,esi
c001a7f5:	5b                   	pop    ebx
c001a7f6:	5e                   	pop    esi
c001a7f7:	5f                   	pop    edi
c001a7f8:	c2 04 00             	ret    0x4

c001a7fb <Krnl::panic(char const*)>:
c001a7fb:	55                   	push   ebp
c001a7fc:	89 e5                	mov    ebp,esp
c001a7fe:	53                   	push   ebx
c001a7ff:	83 ec 0c             	sub    esp,0xc
c001a802:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a805:	fa                   	cli    
c001a806:	c6 05 c4 19 03 c0 01 	mov    BYTE PTR ds:0xc00319c4,0x1
c001a80d:	53                   	push   ebx
c001a80e:	c6 05 a4 dd 02 c0 00 	mov    BYTE PTR ds:0xc002dda4,0x0
c001a815:	68 7e c4 02 c0       	push   0xc002c47e
c001a81a:	e8 22 86 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001a81f:	58                   	pop    eax
c001a820:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a825:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a82b:	e8 34 64 ff ff       	call   c0010c64 <setActiveTerminal(VgaText*)>
c001a830:	83 c4 0c             	add    esp,0xc
c001a833:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a838:	6a 01                	push   0x1
c001a83a:	6a 0f                	push   0xf
c001a83c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a842:	e8 bb 5e ff ff       	call   c0010702 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a847:	58                   	pop    eax
c001a848:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a84d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a853:	e8 52 66 ff ff       	call   c0010eaa <VgaText::clearScreen()>
c001a858:	58                   	pop    eax
c001a859:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a85e:	5a                   	pop    edx
c001a85f:	68 97 c4 02 c0       	push   0xc002c497
c001a864:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a86a:	e8 81 67 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a86f:	59                   	pop    ecx
c001a870:	58                   	pop    eax
c001a871:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a876:	68 3c c5 02 c0       	push   0xc002c53c
c001a87b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a881:	e8 6a 67 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a886:	58                   	pop    eax
c001a887:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a88c:	5a                   	pop    edx
c001a88d:	68 b3 c4 02 c0       	push   0xc002c4b3
c001a892:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a898:	e8 53 67 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a89d:	59                   	pop    ecx
c001a89e:	58                   	pop    eax
c001a89f:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a8a4:	53                   	push   ebx
c001a8a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8ab:	e8 40 67 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a8b0:	58                   	pop    eax
c001a8b1:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a8b6:	5a                   	pop    edx
c001a8b7:	68 d3 c4 02 c0       	push   0xc002c4d3
c001a8bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c2:	e8 29 67 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a8c7:	a1 c0 19 03 c0       	mov    eax,ds:0xc00319c0
c001a8cc:	83 c4 10             	add    esp,0x10
c001a8cf:	85 c0                	test   eax,eax
c001a8d1:	74 02                	je     c001a8d5 <Krnl::panic(char const*)+0xda>
c001a8d3:	ff d0                	call   eax
c001a8d5:	83 ec 0c             	sub    esp,0xc
c001a8d8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8db:	e8 90 31 00 00       	call   c001da70 <Thr::getDriverNameFromAddress(unsigned long)>
c001a8e0:	83 c4 10             	add    esp,0x10
c001a8e3:	89 c3                	mov    ebx,eax
c001a8e5:	85 c0                	test   eax,eax
c001a8e7:	0f 84 50 02 00 00    	je     c001ab3d <Krnl::panic(char const*)+0x342>
c001a8ed:	83 ec 08             	sub    esp,0x8
c001a8f0:	8b 15 d0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323d0
c001a8f6:	68 78 c5 02 c0       	push   0xc002c578
c001a8fb:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a901:	e8 ea 66 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a906:	58                   	pop    eax
c001a907:	5a                   	pop    edx
c001a908:	8b 15 d0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323d0
c001a90e:	68 b3 c4 02 c0       	push   0xc002c4b3
c001a913:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a919:	e8 d2 66 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a91e:	59                   	pop    ecx
c001a91f:	58                   	pop    eax
c001a920:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a925:	53                   	push   ebx
c001a926:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a92c:	e8 bf 66 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a931:	83 c4 10             	add    esp,0x10
c001a934:	83 ec 08             	sub    esp,0x8
c001a937:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a93c:	68 d2 c4 02 c0       	push   0xc002c4d2
c001a941:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a947:	e8 a4 66 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a94c:	58                   	pop    eax
c001a94d:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a952:	5a                   	pop    edx
c001a953:	68 d0 c5 02 c0       	push   0xc002c5d0
c001a958:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a95e:	e8 8d 66 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a963:	59                   	pop    ecx
c001a964:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a969:	5b                   	pop    ebx
c001a96a:	68 10 c6 02 c0       	push   0xc002c610
c001a96f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a975:	e8 76 66 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a97a:	58                   	pop    eax
c001a97b:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a980:	5a                   	pop    edx
c001a981:	68 be c4 02 c0       	push   0xc002c4be
c001a986:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a98c:	e8 5f 66 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a991:	59                   	pop    ecx
c001a992:	5b                   	pop    ebx
c001a993:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a996:	68 d6 c4 02 c0       	push   0xc002c4d6
c001a99b:	e8 a1 84 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001a9a0:	58                   	pop    eax
c001a9a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9a4:	5a                   	pop    edx
c001a9a5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a9a8:	68 df c4 02 c0       	push   0xc002c4df
c001a9ad:	e8 8f 84 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001a9b2:	59                   	pop    ecx
c001a9b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9b6:	5b                   	pop    ebx
c001a9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9b9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a9bc:	68 e8 c4 02 c0       	push   0xc002c4e8
c001a9c1:	e8 7b 84 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001a9c6:	58                   	pop    eax
c001a9c7:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a9cc:	5a                   	pop    edx
c001a9cd:	68 54 c6 02 c0       	push   0xc002c654
c001a9d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9d8:	e8 13 66 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a9dd:	59                   	pop    ecx
c001a9de:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a9e3:	5b                   	pop    ebx
c001a9e4:	68 f1 c4 02 c0       	push   0xc002c4f1
c001a9e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ef:	e8 fc 65 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001a9f4:	0f 20 c0             	mov    eax,cr0
c001a9f7:	5a                   	pop    edx
c001a9f8:	59                   	pop    ecx
c001a9f9:	50                   	push   eax
c001a9fa:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001a9ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa05:	e8 0c 66 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c001aa0a:	5b                   	pop    ebx
c001aa0b:	58                   	pop    eax
c001aa0c:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa11:	68 fb c4 02 c0       	push   0xc002c4fb
c001aa16:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa1c:	e8 cf 65 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001aa21:	0f 20 d0             	mov    eax,cr2
c001aa24:	5a                   	pop    edx
c001aa25:	59                   	pop    ecx
c001aa26:	50                   	push   eax
c001aa27:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa32:	e8 df 65 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c001aa37:	5b                   	pop    ebx
c001aa38:	58                   	pop    eax
c001aa39:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa3e:	68 05 c5 02 c0       	push   0xc002c505
c001aa43:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa49:	e8 a2 65 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001aa4e:	0f 20 d8             	mov    eax,cr3
c001aa51:	5a                   	pop    edx
c001aa52:	59                   	pop    ecx
c001aa53:	50                   	push   eax
c001aa54:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa5f:	e8 b2 65 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c001aa64:	5b                   	pop    ebx
c001aa65:	58                   	pop    eax
c001aa66:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa6b:	68 18 c5 02 c0       	push   0xc002c518
c001aa70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa76:	e8 75 65 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001aa7b:	0f 20 e0             	mov    eax,cr4
c001aa7e:	5a                   	pop    edx
c001aa7f:	59                   	pop    ecx
c001aa80:	50                   	push   eax
c001aa81:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa8c:	e8 85 65 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c001aa91:	5b                   	pop    ebx
c001aa92:	58                   	pop    eax
c001aa93:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aa98:	68 22 c5 02 c0       	push   0xc002c522
c001aa9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaa3:	e8 48 65 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001aaa8:	5a                   	pop    edx
c001aaa9:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aaae:	59                   	pop    ecx
c001aaaf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aab5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aab8:	50                   	push   eax
c001aab9:	e8 58 65 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c001aabe:	5b                   	pop    ebx
c001aabf:	58                   	pop    eax
c001aac0:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aac5:	68 39 c5 02 c0       	push   0xc002c539
c001aaca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad0:	e8 1b 65 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001aad5:	5a                   	pop    edx
c001aad6:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aadb:	59                   	pop    ecx
c001aadc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aae2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001aae5:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001aae8:	50                   	push   eax
c001aae9:	e8 28 65 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c001aaee:	5b                   	pop    ebx
c001aaef:	58                   	pop    eax
c001aaf0:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001aaf5:	68 39 c5 02 c0       	push   0xc002c539
c001aafa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab00:	e8 eb 64 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001ab05:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab0a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab0d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab13:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab15:	59                   	pop    ecx
c001ab16:	5b                   	pop    ebx
c001ab17:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab1a:	50                   	push   eax
c001ab1b:	e8 f6 64 ff ff       	call   c0011016 <VgaText::putx(unsigned int)>
c001ab20:	83 c4 10             	add    esp,0x10
c001ab23:	b2 fe                	mov    dl,0xfe
c001ab25:	e4 60                	in     al,0x60
c001ab27:	3c 1c                	cmp    al,0x1c
c001ab29:	74 04                	je     c001ab2f <Krnl::panic(char const*)+0x334>
c001ab2b:	3c 5a                	cmp    al,0x5a
c001ab2d:	75 f6                	jne    c001ab25 <Krnl::panic(char const*)+0x32a>
c001ab2f:	e4 64                	in     al,0x64
c001ab31:	a8 02                	test   al,0x2
c001ab33:	75 fa                	jne    c001ab2f <Krnl::panic(char const*)+0x334>
c001ab35:	88 d0                	mov    al,dl
c001ab37:	e6 64                	out    0x64,al
c001ab39:	fa                   	cli    
c001ab3a:	f4                   	hlt    
c001ab3b:	eb e8                	jmp    c001ab25 <Krnl::panic(char const*)+0x32a>
c001ab3d:	50                   	push   eax
c001ab3e:	50                   	push   eax
c001ab3f:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab44:	68 a4 c5 02 c0       	push   0xc002c5a4
c001ab49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab4f:	e8 9c 64 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001ab54:	58                   	pop    eax
c001ab55:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab5a:	5a                   	pop    edx
c001ab5b:	68 b3 c4 02 c0       	push   0xc002c4b3
c001ab60:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab66:	e8 85 64 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001ab6b:	59                   	pop    ecx
c001ab6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab71:	5b                   	pop    ebx
c001ab72:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab75:	83 c0 0c             	add    eax,0xc
c001ab78:	50                   	push   eax
c001ab79:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001ab7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab84:	e8 67 64 ff ff       	call   c0010ff0 <VgaText::puts(char const*)>
c001ab89:	83 c4 10             	add    esp,0x10
c001ab8c:	e9 a3 fd ff ff       	jmp    c001a934 <Krnl::panic(char const*)+0x139>

c001ab91 <Net::switchEndian16(unsigned short)>:
c001ab91:	83 ec 04             	sub    esp,0x4
c001ab94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab98:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ab9c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aba0:	c1 f8 08             	sar    eax,0x8
c001aba3:	89 c2                	mov    edx,eax
c001aba5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aba9:	c1 e0 08             	shl    eax,0x8
c001abac:	09 d0                	or     eax,edx
c001abae:	83 c4 04             	add    esp,0x4
c001abb1:	c3                   	ret    

c001abb2 <Net::switchEndian32(unsigned int)>:
c001abb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb6:	c1 e8 18             	shr    eax,0x18
c001abb9:	89 c2                	mov    edx,eax
c001abbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abbf:	c1 e0 08             	shl    eax,0x8
c001abc2:	25 00 00 ff 00       	and    eax,0xff0000
c001abc7:	09 c2                	or     edx,eax
c001abc9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abcd:	c1 e8 08             	shr    eax,0x8
c001abd0:	25 00 ff 00 00       	and    eax,0xff00
c001abd5:	09 c2                	or     edx,eax
c001abd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abdb:	c1 e0 18             	shl    eax,0x18
c001abde:	09 d0                	or     eax,edx
c001abe0:	c3                   	ret    

c001abe1 <Net::crc32Calc(unsigned char*, int)>:
c001abe1:	83 ec 10             	sub    esp,0x10
c001abe4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001abe9:	75 07                	jne    c001abf2 <Net::crc32Calc(unsigned char*, int)+0x11>
c001abeb:	b8 00 00 00 00       	mov    eax,0x0
c001abf0:	eb 7c                	jmp    c001ac6e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001abf2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001abf7:	7f 07                	jg     c001ac00 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001abf9:	b8 00 00 00 00       	mov    eax,0x0
c001abfe:	eb 6e                	jmp    c001ac6e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac00:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ac10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac14:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ac18:	7d 4e                	jge    c001ac68 <Net::crc32Calc(unsigned char*, int)+0x87>
c001ac1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac22:	01 d0                	add    eax,edx
c001ac24:	8a 00                	mov    al,BYTE PTR [eax]
c001ac26:	0f b6 c0             	movzx  eax,al
c001ac29:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ac2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac35:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ac3a:	7f 26                	jg     c001ac62 <Net::crc32Calc(unsigned char*, int)+0x81>
c001ac3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac40:	83 e0 01             	and    eax,0x1
c001ac43:	74 0d                	je     c001ac52 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ac45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac49:	d1 e8                	shr    eax,1
c001ac4b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ac50:	eb 06                	jmp    c001ac58 <Net::crc32Calc(unsigned char*, int)+0x77>
c001ac52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac56:	d1 e8                	shr    eax,1
c001ac58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac5c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac60:	eb d3                	jmp    c001ac35 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ac62:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ac66:	eb a8                	jmp    c001ac10 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ac68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac6c:	f7 d0                	not    eax
c001ac6e:	83 c4 10             	add    esp,0x10
c001ac71:	c3                   	ret    

c001ac72 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ac72:	57                   	push   edi
c001ac73:	56                   	push   esi
c001ac74:	83 ec 50             	sub    esp,0x50
c001ac77:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ac7b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001ac7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001ac87:	83 7c 24 4c 06       	cmp    DWORD PTR [esp+0x4c],0x6
c001ac8c:	7f 14                	jg     c001aca2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x30>
c001ac8e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ac92:	8d 50 01             	lea    edx,[eax+0x1]
c001ac95:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001ac99:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ac9c:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
c001aca0:	eb e5                	jmp    c001ac87 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x15>
c001aca2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aca6:	8d 50 01             	lea    edx,[eax+0x1]
c001aca9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001acad:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001acb0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001acb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001acb8:	8d 44 24 6a          	lea    eax,[esp+0x6a]
c001acbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001acc0:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001acc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001accc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001acd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acdc:	89 c6                	mov    esi,eax
c001acde:	89 d7                	mov    edi,edx
c001ace0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ace2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ace6:	83 44 24 74 06       	add    DWORD PTR [esp+0x74],0x6
c001aceb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001acef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001acf3:	8d 44 24 64          	lea    eax,[esp+0x64]
c001acf7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001acfb:	c7 44 24 24 06 00 00 00 	mov    DWORD PTR [esp+0x24],0x6
c001ad03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad07:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad0f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ad13:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ad17:	89 c6                	mov    esi,eax
c001ad19:	89 d7                	mov    edi,edx
c001ad1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad21:	83 44 24 74 06       	add    DWORD PTR [esp+0x74],0x6
c001ad26:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001ad2a:	0f b7 c0             	movzx  eax,ax
c001ad2d:	c1 f8 08             	sar    eax,0x8
c001ad30:	89 c1                	mov    ecx,eax
c001ad32:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ad36:	8d 50 01             	lea    edx,[eax+0x1]
c001ad39:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001ad3d:	88 ca                	mov    dl,cl
c001ad3f:	88 10                	mov    BYTE PTR [eax],dl
c001ad41:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001ad45:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ad49:	8d 48 01             	lea    ecx,[eax+0x1]
c001ad4c:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c001ad50:	88 10                	mov    BYTE PTR [eax],dl
c001ad52:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ad56:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c001ad5a:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
c001ad5e:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
c001ad62:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001ad66:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ad6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ad6e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ad72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ad76:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ad7a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001ad7e:	89 c6                	mov    esi,eax
c001ad80:	89 d7                	mov    edi,edx
c001ad82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad84:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ad88:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ad8c:	01 44 24 74          	add    DWORD PTR [esp+0x74],eax
c001ad90:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ad94:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c001ad98:	50                   	push   eax
c001ad99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ad9d:	e8 3f fe ff ff       	call   c001abe1 <Net::crc32Calc(unsigned char*, int)>
c001ada2:	83 c4 08             	add    esp,0x8
c001ada5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ada9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001adad:	c1 e8 18             	shr    eax,0x18
c001adb0:	89 c1                	mov    ecx,eax
c001adb2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001adb6:	8d 50 01             	lea    edx,[eax+0x1]
c001adb9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001adbd:	88 ca                	mov    dl,cl
c001adbf:	88 10                	mov    BYTE PTR [eax],dl
c001adc1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001adc5:	c1 e8 10             	shr    eax,0x10
c001adc8:	89 c1                	mov    ecx,eax
c001adca:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001adce:	8d 50 01             	lea    edx,[eax+0x1]
c001add1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001add5:	88 ca                	mov    dl,cl
c001add7:	88 10                	mov    BYTE PTR [eax],dl
c001add9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001addd:	c1 e8 08             	shr    eax,0x8
c001ade0:	89 c1                	mov    ecx,eax
c001ade2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ade6:	8d 50 01             	lea    edx,[eax+0x1]
c001ade9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001aded:	88 ca                	mov    dl,cl
c001adef:	88 10                	mov    BYTE PTR [eax],dl
c001adf1:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001adf5:	8d 50 01             	lea    edx,[eax+0x1]
c001adf8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001adfc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ae00:	88 10                	mov    BYTE PTR [eax],dl
c001ae02:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ae06:	83 c4 50             	add    esp,0x50
c001ae09:	5e                   	pop    esi
c001ae0a:	5f                   	pop    edi
c001ae0b:	c3                   	ret    

c001ae0c <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ae0c:	57                   	push   edi
c001ae0d:	56                   	push   esi
c001ae0e:	83 ec 64             	sub    esp,0x64
c001ae11:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae15:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ae19:	83 44 24 74 08       	add    DWORD PTR [esp+0x74],0x8
c001ae1e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001ae22:	83 c0 0e             	add    eax,0xe
c001ae25:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ae29:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ae31:	c7 44 24 24 06 00 00 00 	mov    DWORD PTR [esp+0x24],0x6
c001ae39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae3d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae45:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ae49:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ae4d:	89 c6                	mov    esi,eax
c001ae4f:	89 d7                	mov    edi,edx
c001ae51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae53:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae57:	83 44 24 74 06       	add    DWORD PTR [esp+0x74],0x6
c001ae5c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001ae60:	83 c0 08             	add    eax,0x8
c001ae63:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001ae67:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae6b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001ae6f:	c7 44 24 38 06 00 00 00 	mov    DWORD PTR [esp+0x38],0x6
c001ae77:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ae7b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ae7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae83:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ae87:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001ae8b:	89 c6                	mov    esi,eax
c001ae8d:	89 d7                	mov    edi,edx
c001ae8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ae95:	83 44 24 74 06       	add    DWORD PTR [esp+0x74],0x6
c001ae9a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae9e:	8d 50 01             	lea    edx,[eax+0x1]
c001aea1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001aea5:	8a 00                	mov    al,BYTE PTR [eax]
c001aea7:	0f b6 c0             	movzx  eax,al
c001aeaa:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001aeaf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aeb3:	8d 50 01             	lea    edx,[eax+0x1]
c001aeb6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001aeba:	8a 00                	mov    al,BYTE PTR [eax]
c001aebc:	0f b6 c0             	movzx  eax,al
c001aebf:	66 89 44 24 58       	mov    WORD PTR [esp+0x58],ax
c001aec4:	0f b7 44 24 5a       	movzx  eax,WORD PTR [esp+0x5a]
c001aec9:	c1 e0 08             	shl    eax,0x8
c001aecc:	89 c2                	mov    edx,eax
c001aece:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001aed2:	09 d0                	or     eax,edx
c001aed4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001aed8:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aedc:	83 7c 24 78 ff       	cmp    DWORD PTR [esp+0x78],0xffffffff
c001aee1:	75 3a                	jne    c001af1d <Net::unwrapEthernetFrame(unsigned char*, int)+0x111>
c001aee3:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001aee7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aeea:	66 3d dc 05          	cmp    ax,0x5dc
c001aeee:	77 10                	ja     c001af00 <Net::unwrapEthernetFrame(unsigned char*, int)+0xf4>
c001aef0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001aef4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aef7:	0f b7 c0             	movzx  eax,ax
c001aefa:	89 44 24 78          	mov    DWORD PTR [esp+0x78],eax
c001aefe:	eb 1d                	jmp    c001af1d <Net::unwrapEthernetFrame(unsigned char*, int)+0x111>
c001af00:	83 ec 0c             	sub    esp,0xc
c001af03:	68 7c c6 02 c0       	push   0xc002c67c
c001af08:	e8 34 7f ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001af0d:	83 c4 10             	add    esp,0x10
c001af10:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001af14:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001af18:	e9 dd 00 00 00       	jmp    c001affa <Net::unwrapEthernetFrame(unsigned char*, int)+0x1ee>
c001af1d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001af21:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001af25:	8b 12                	mov    edx,DWORD PTR [edx]
c001af27:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001af2b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c001af2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001af33:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001af37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af4b:	89 c6                	mov    esi,eax
c001af4d:	89 d7                	mov    edi,edx
c001af4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af55:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001af59:	01 44 24 74          	add    DWORD PTR [esp+0x74],eax
c001af5d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af61:	8d 50 01             	lea    edx,[eax+0x1]
c001af64:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001af68:	8a 00                	mov    al,BYTE PTR [eax]
c001af6a:	0f b6 c0             	movzx  eax,al
c001af6d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001af71:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af75:	8d 50 01             	lea    edx,[eax+0x1]
c001af78:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001af7c:	8a 00                	mov    al,BYTE PTR [eax]
c001af7e:	0f b6 c0             	movzx  eax,al
c001af81:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001af85:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af89:	8d 50 01             	lea    edx,[eax+0x1]
c001af8c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001af90:	8a 00                	mov    al,BYTE PTR [eax]
c001af92:	0f b6 c0             	movzx  eax,al
c001af95:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001af99:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af9d:	8d 50 01             	lea    edx,[eax+0x1]
c001afa0:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c001afa4:	8a 00                	mov    al,BYTE PTR [eax]
c001afa6:	0f b6 c0             	movzx  eax,al
c001afa9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001afad:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001afb1:	c1 e0 18             	shl    eax,0x18
c001afb4:	89 c2                	mov    edx,eax
c001afb6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001afba:	c1 e0 10             	shl    eax,0x10
c001afbd:	09 c2                	or     edx,eax
c001afbf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001afc3:	c1 e0 08             	shl    eax,0x8
c001afc6:	09 d0                	or     eax,edx
c001afc8:	0b 44 24 48          	or     eax,DWORD PTR [esp+0x48]
c001afcc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001afd0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001afd4:	2b 44 24 5c          	sub    eax,DWORD PTR [esp+0x5c]
c001afd8:	83 e8 04             	sub    eax,0x4
c001afdb:	83 ec 08             	sub    esp,0x8
c001afde:	50                   	push   eax
c001afdf:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001afe3:	e8 f9 fb ff ff       	call   c001abe1 <Net::crc32Calc(unsigned char*, int)>
c001afe8:	83 c4 10             	add    esp,0x10
c001afeb:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
c001afef:	0f 94 c2             	sete   dl
c001aff2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001aff6:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001aff9:	90                   	nop
c001affa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001affe:	83 c4 64             	add    esp,0x64
c001b001:	5e                   	pop    esi
c001b002:	5f                   	pop    edi
c001b003:	c2 04 00             	ret    0x4

c001b006 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b006:	55                   	push   ebp
c001b007:	57                   	push   edi
c001b008:	56                   	push   esi
c001b009:	53                   	push   ebx
c001b00a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b010:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b017:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b019:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b01c:	80 fb 40             	cmp    bl,0x40
c001b01f:	75 1b                	jne    c001b03c <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b021:	8a 16                	mov    dl,BYTE PTR [esi]
c001b023:	84 d2                	test   dl,dl
c001b025:	0f 84 f1 00 00 00    	je     c001b11c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b02b:	8d 46 01             	lea    eax,[esi+0x1]
c001b02e:	80 fa 3a             	cmp    dl,0x3a
c001b031:	74 04                	je     c001b037 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b033:	89 c6                	mov    esi,eax
c001b035:	eb ea                	jmp    c001b021 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b037:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b03a:	89 c6                	mov    esi,eax
c001b03c:	50                   	push   eax
c001b03d:	6a 40                	push   0x40
c001b03f:	6a 00                	push   0x0
c001b041:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b045:	50                   	push   eax
c001b046:	e8 21 57 fe ff       	call   c000076c <memset>
c001b04b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b052:	31 c0                	xor    eax,eax
c001b054:	83 c4 10             	add    esp,0x10
c001b057:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b059:	84 c9                	test   cl,cl
c001b05b:	0f 84 bb 00 00 00    	je     c001b11c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b061:	3d c7 00 00 00       	cmp    eax,0xc7
c001b066:	0f 8f b0 00 00 00    	jg     c001b11c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b06c:	80 f9 0a             	cmp    cl,0xa
c001b06f:	0f 85 98 00 00 00    	jne    c001b10d <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b075:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b07a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b07e:	a8 df                	test   al,0xdf
c001b080:	0f 94 c1             	sete   cl
c001b083:	3c 23                	cmp    al,0x23
c001b085:	0f 94 c2             	sete   dl
c001b088:	08 d1                	or     cl,dl
c001b08a:	75 4a                	jne    c001b0d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b08c:	8d 50 f7             	lea    edx,[eax-0x9]
c001b08f:	80 fa 01             	cmp    dl,0x1
c001b092:	76 42                	jbe    c001b0d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b094:	3c 5b                	cmp    al,0x5b
c001b096:	75 42                	jne    c001b0da <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b098:	80 fb 40             	cmp    bl,0x40
c001b09b:	75 39                	jne    c001b0d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b09d:	83 ec 0c             	sub    esp,0xc
c001b0a0:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b0a4:	52                   	push   edx
c001b0a5:	e8 de 56 fe ff       	call   c0000788 <strlen>
c001b0aa:	83 c4 10             	add    esp,0x10
c001b0ad:	83 f8 3f             	cmp    eax,0x3f
c001b0b0:	77 6a                	ja     c001b11c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0b2:	50                   	push   eax
c001b0b3:	50                   	push   eax
c001b0b4:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b0b8:	52                   	push   edx
c001b0b9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b0bd:	52                   	push   edx
c001b0be:	e8 65 57 fe ff       	call   c0000828 <strcpy>
c001b0c3:	58                   	pop    eax
c001b0c4:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b0c8:	52                   	push   edx
c001b0c9:	e8 ba 56 fe ff       	call   c0000788 <strlen>
c001b0ce:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b0d3:	83 c4 10             	add    esp,0x10
c001b0d6:	31 d2                	xor    edx,edx
c001b0d8:	eb 3a                	jmp    c001b114 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b0da:	80 fb 40             	cmp    bl,0x40
c001b0dd:	74 06                	je     c001b0e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b0df:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b0e3:	eb 20                	jmp    c001b105 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b0e5:	50                   	push   eax
c001b0e6:	50                   	push   eax
c001b0e7:	55                   	push   ebp
c001b0e8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b0ec:	50                   	push   eax
c001b0ed:	e8 c2 57 fe ff       	call   c00008b4 <strcmp>
c001b0f2:	83 c4 10             	add    esp,0x10
c001b0f5:	85 c0                	test   eax,eax
c001b0f7:	75 dd                	jne    c001b0d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0f9:	eb e4                	jmp    c001b0df <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b0fb:	8d 50 01             	lea    edx,[eax+0x1]
c001b0fe:	80 f9 3d             	cmp    cl,0x3d
c001b101:	74 1d                	je     c001b120 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b103:	89 d0                	mov    eax,edx
c001b105:	8a 08                	mov    cl,BYTE PTR [eax]
c001b107:	84 c9                	test   cl,cl
c001b109:	75 f0                	jne    c001b0fb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b10b:	eb 0f                	jmp    c001b11c <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b10d:	8d 50 01             	lea    edx,[eax+0x1]
c001b110:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b114:	47                   	inc    edi
c001b115:	89 d0                	mov    eax,edx
c001b117:	e9 3b ff ff ff       	jmp    c001b057 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b11c:	31 c0                	xor    eax,eax
c001b11e:	eb 33                	jmp    c001b153 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b120:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b124:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b127:	50                   	push   eax
c001b128:	50                   	push   eax
c001b129:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b12d:	50                   	push   eax
c001b12e:	56                   	push   esi
c001b12f:	e8 80 57 fe ff       	call   c00008b4 <strcmp>
c001b134:	83 c4 10             	add    esp,0x10
c001b137:	85 c0                	test   eax,eax
c001b139:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b13d:	75 97                	jne    c001b0d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b13f:	51                   	push   ecx
c001b140:	51                   	push   ecx
c001b141:	52                   	push   edx
c001b142:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b149:	e8 da 56 fe ff       	call   c0000828 <strcpy>
c001b14e:	83 c4 10             	add    esp,0x10
c001b151:	b0 01                	mov    al,0x1
c001b153:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b159:	5b                   	pop    ebx
c001b15a:	5e                   	pop    esi
c001b15b:	5f                   	pop    edi
c001b15c:	5d                   	pop    ebp
c001b15d:	c3                   	ret    

c001b15e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b15e:	57                   	push   edi
c001b15f:	56                   	push   esi
c001b160:	53                   	push   ebx
c001b161:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b167:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b16e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b175:	53                   	push   ebx
c001b176:	e8 0d 56 fe ff       	call   c0000788 <strlen>
c001b17b:	89 34 24             	mov    DWORD PTR [esp],esi
c001b17e:	89 c7                	mov    edi,eax
c001b180:	e8 03 56 fe ff       	call   c0000788 <strlen>
c001b185:	83 c4 10             	add    esp,0x10
c001b188:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b18c:	3d ff 00 00 00       	cmp    eax,0xff
c001b191:	0f 87 d3 00 00 00    	ja     c001b26a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b197:	57                   	push   edi
c001b198:	57                   	push   edi
c001b199:	56                   	push   esi
c001b19a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b19e:	56                   	push   esi
c001b19f:	e8 84 56 fe ff       	call   c0000828 <strcpy>
c001b1a4:	58                   	pop    eax
c001b1a5:	5a                   	pop    edx
c001b1a6:	68 d1 cb 02 c0       	push   0xc002cbd1
c001b1ab:	56                   	push   esi
c001b1ac:	e8 b7 57 fe ff       	call   c0000968 <strcat>
c001b1b1:	59                   	pop    ecx
c001b1b2:	5f                   	pop    edi
c001b1b3:	53                   	push   ebx
c001b1b4:	56                   	push   esi
c001b1b5:	e8 ae 57 fe ff       	call   c0000968 <strcat>
c001b1ba:	58                   	pop    eax
c001b1bb:	5a                   	pop    edx
c001b1bc:	68 c8 c6 02 c0       	push   0xc002c6c8
c001b1c1:	56                   	push   esi
c001b1c2:	e8 a1 57 fe ff       	call   c0000968 <strcat>
c001b1c7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b1ce:	e8 d3 46 ff ff       	call   c000f8a6 <malloc>
c001b1d3:	83 c4 0c             	add    esp,0xc
c001b1d6:	89 c3                	mov    ebx,eax
c001b1d8:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001b1de:	56                   	push   esi
c001b1df:	50                   	push   eax
c001b1e0:	e8 bb 81 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001b1e5:	83 c4 10             	add    esp,0x10
c001b1e8:	85 db                	test   ebx,ebx
c001b1ea:	74 7e                	je     c001b26a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b1ec:	51                   	push   ecx
c001b1ed:	51                   	push   ecx
c001b1ee:	6a 01                	push   0x1
c001b1f0:	53                   	push   ebx
c001b1f1:	e8 0e 82 ff ff       	call   c0013404 <File::open(FileOpenMode)>
c001b1f6:	83 c4 10             	add    esp,0x10
c001b1f9:	85 c0                	test   eax,eax
c001b1fb:	74 08                	je     c001b205 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b1fd:	83 ec 0c             	sub    esp,0xc
c001b200:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b202:	53                   	push   ebx
c001b203:	eb 5f                	jmp    c001b264 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b205:	52                   	push   edx
c001b206:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b20a:	50                   	push   eax
c001b20b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b20f:	50                   	push   eax
c001b210:	53                   	push   ebx
c001b211:	e8 9a 84 ff ff       	call   c00136b0 <File::stat(unsigned long long*, bool*)>
c001b216:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b21a:	83 c4 10             	add    esp,0x10
c001b21d:	89 c1                	mov    ecx,eax
c001b21f:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b223:	74 31                	je     c001b256 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b225:	83 ec 0c             	sub    esp,0xc
c001b228:	50                   	push   eax
c001b229:	e8 78 46 ff ff       	call   c000f8a6 <malloc>
c001b22e:	89 c6                	mov    esi,eax
c001b230:	58                   	pop    eax
c001b231:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b233:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b237:	52                   	push   edx
c001b238:	56                   	push   esi
c001b239:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b23d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b241:	53                   	push   ebx
c001b242:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b245:	83 c4 20             	add    esp,0x20
c001b248:	85 c0                	test   eax,eax
c001b24a:	75 0a                	jne    c001b256 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b24c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b250:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b254:	74 18                	je     c001b26e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b256:	83 ec 0c             	sub    esp,0xc
c001b259:	53                   	push   ebx
c001b25a:	e8 03 82 ff ff       	call   c0013462 <File::close()>
c001b25f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b261:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b264:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b267:	83 c4 10             	add    esp,0x10
c001b26a:	31 c0                	xor    eax,eax
c001b26c:	eb 3b                	jmp    c001b2a9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b26e:	83 ec 0c             	sub    esp,0xc
c001b271:	53                   	push   ebx
c001b272:	e8 eb 81 ff ff       	call   c0013462 <File::close()>
c001b277:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b279:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b27c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b27f:	83 c4 0c             	add    esp,0xc
c001b282:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b289:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b290:	56                   	push   esi
c001b291:	e8 70 fd ff ff       	call   c001b006 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b296:	89 34 24             	mov    DWORD PTR [esp],esi
c001b299:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b29d:	e8 14 46 ff ff       	call   c000f8b6 <free>
c001b2a2:	83 c4 10             	add    esp,0x10
c001b2a5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b2a9:	81 c4 20 01 00 00    	add    esp,0x120
c001b2af:	5b                   	pop    ebx
c001b2b0:	5e                   	pop    esi
c001b2b1:	5f                   	pop    edi
c001b2b2:	c3                   	ret    

c001b2b3 <Reg::getLine(char*, char*, char*)>:
c001b2b3:	57                   	push   edi
c001b2b4:	56                   	push   esi
c001b2b5:	53                   	push   ebx
c001b2b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2be:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b2c2:	57                   	push   edi
c001b2c3:	56                   	push   esi
c001b2c4:	53                   	push   ebx
c001b2c5:	68 cd c6 02 c0       	push   0xc002c6cd
c001b2ca:	e8 8f fe ff ff       	call   c001b15e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2cf:	83 c4 10             	add    esp,0x10
c001b2d2:	84 c0                	test   al,al
c001b2d4:	75 10                	jne    c001b2e6 <Reg::getLine(char*, char*, char*)+0x33>
c001b2d6:	57                   	push   edi
c001b2d7:	56                   	push   esi
c001b2d8:	53                   	push   ebx
c001b2d9:	68 f2 c6 02 c0       	push   0xc002c6f2
c001b2de:	e8 7b fe ff ff       	call   c001b15e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2e3:	83 c4 10             	add    esp,0x10
c001b2e6:	5b                   	pop    ebx
c001b2e7:	5e                   	pop    esi
c001b2e8:	5f                   	pop    edi
c001b2e9:	c3                   	ret    

c001b2ea <Reg::readInt(char*, char*, int*)>:
c001b2ea:	55                   	push   ebp
c001b2eb:	57                   	push   edi
c001b2ec:	56                   	push   esi
c001b2ed:	53                   	push   ebx
c001b2ee:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b2f4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b2f8:	57                   	push   edi
c001b2f9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b300:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b307:	e8 a7 ff ff ff       	call   c001b2b3 <Reg::getLine(char*, char*, char*)>
c001b30c:	83 c4 10             	add    esp,0x10
c001b30f:	84 c0                	test   al,al
c001b311:	0f 84 b3 00 00 00    	je     c001b3ca <Reg::readInt(char*, char*, int*)+0xe0>
c001b317:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b31b:	80 fa 2b             	cmp    dl,0x2b
c001b31e:	74 0c                	je     c001b32c <Reg::readInt(char*, char*, int*)+0x42>
c001b320:	80 fa 2d             	cmp    dl,0x2d
c001b323:	75 0e                	jne    c001b333 <Reg::readInt(char*, char*, int*)+0x49>
c001b325:	ba 01 00 00 00       	mov    edx,0x1
c001b32a:	eb 0b                	jmp    c001b337 <Reg::readInt(char*, char*, int*)+0x4d>
c001b32c:	ba 01 00 00 00       	mov    edx,0x1
c001b331:	eb 02                	jmp    c001b335 <Reg::readInt(char*, char*, int*)+0x4b>
c001b333:	31 d2                	xor    edx,edx
c001b335:	31 c0                	xor    eax,eax
c001b337:	be 0a 00 00 00       	mov    esi,0xa
c001b33c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b341:	75 20                	jne    c001b363 <Reg::readInt(char*, char*, int*)+0x79>
c001b343:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b347:	80 f9 78             	cmp    cl,0x78
c001b34a:	75 0a                	jne    c001b356 <Reg::readInt(char*, char*, int*)+0x6c>
c001b34c:	83 c2 02             	add    edx,0x2
c001b34f:	be 10 00 00 00       	mov    esi,0x10
c001b354:	eb 0d                	jmp    c001b363 <Reg::readInt(char*, char*, int*)+0x79>
c001b356:	80 f9 62             	cmp    cl,0x62
c001b359:	75 08                	jne    c001b363 <Reg::readInt(char*, char*, int*)+0x79>
c001b35b:	83 c2 02             	add    edx,0x2
c001b35e:	be 02 00 00 00       	mov    esi,0x2
c001b363:	01 d7                	add    edi,edx
c001b365:	31 d2                	xor    edx,edx
c001b367:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b369:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b36d:	80 fb 0d             	cmp    bl,0xd
c001b370:	0f 94 c3             	sete   bl
c001b373:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b378:	0f 94 c1             	sete   cl
c001b37b:	08 cb                	or     bl,cl
c001b37d:	75 3a                	jne    c001b3b9 <Reg::readInt(char*, char*, int*)+0xcf>
c001b37f:	0f af d6             	imul   edx,esi
c001b382:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b387:	83 fe 10             	cmp    esi,0x10
c001b38a:	75 26                	jne    c001b3b2 <Reg::readInt(char*, char*, int*)+0xc8>
c001b38c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b390:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b393:	89 e9                	mov    ecx,ebp
c001b395:	80 f9 05             	cmp    cl,0x5
c001b398:	77 06                	ja     c001b3a0 <Reg::readInt(char*, char*, int*)+0xb6>
c001b39a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b39e:	eb 16                	jmp    c001b3b6 <Reg::readInt(char*, char*, int*)+0xcc>
c001b3a0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b3a4:	83 e9 61             	sub    ecx,0x61
c001b3a7:	80 f9 05             	cmp    cl,0x5
c001b3aa:	77 06                	ja     c001b3b2 <Reg::readInt(char*, char*, int*)+0xc8>
c001b3ac:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b3b0:	eb 04                	jmp    c001b3b6 <Reg::readInt(char*, char*, int*)+0xcc>
c001b3b2:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b3b6:	47                   	inc    edi
c001b3b7:	eb ae                	jmp    c001b367 <Reg::readInt(char*, char*, int*)+0x7d>
c001b3b9:	84 c0                	test   al,al
c001b3bb:	74 02                	je     c001b3bf <Reg::readInt(char*, char*, int*)+0xd5>
c001b3bd:	f7 da                	neg    edx
c001b3bf:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b3c6:	89 10                	mov    DWORD PTR [eax],edx
c001b3c8:	88 d8                	mov    al,bl
c001b3ca:	81 c4 ec 00 00 00    	add    esp,0xec
c001b3d0:	5b                   	pop    ebx
c001b3d1:	5e                   	pop    esi
c001b3d2:	5f                   	pop    edi
c001b3d3:	5d                   	pop    ebp
c001b3d4:	c3                   	ret    

c001b3d5 <Reg::readString(char*, char*, char*, int)>:
c001b3d5:	57                   	push   edi
c001b3d6:	56                   	push   esi
c001b3d7:	53                   	push   ebx
c001b3d8:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b3de:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b3e5:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b3e9:	57                   	push   edi
c001b3ea:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3f1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3f8:	e8 b6 fe ff ff       	call   c001b2b3 <Reg::getLine(char*, char*, char*)>
c001b3fd:	83 c4 10             	add    esp,0x10
c001b400:	89 c6                	mov    esi,eax
c001b402:	84 c0                	test   al,al
c001b404:	74 44                	je     c001b44a <Reg::readString(char*, char*, char*, int)+0x75>
c001b406:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b40d:	31 c0                	xor    eax,eax
c001b40f:	4a                   	dec    edx
c001b410:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b413:	84 c9                	test   cl,cl
c001b415:	74 0f                	je     c001b426 <Reg::readString(char*, char*, char*, int)+0x51>
c001b417:	39 c2                	cmp    edx,eax
c001b419:	7e 0b                	jle    c001b426 <Reg::readString(char*, char*, char*, int)+0x51>
c001b41b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b41e:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b423:	40                   	inc    eax
c001b424:	eb ea                	jmp    c001b410 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b426:	83 ec 0c             	sub    esp,0xc
c001b429:	53                   	push   ebx
c001b42a:	e8 59 53 fe ff       	call   c0000788 <strlen>
c001b42f:	83 c4 10             	add    esp,0x10
c001b432:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b437:	75 11                	jne    c001b44a <Reg::readString(char*, char*, char*, int)+0x75>
c001b439:	83 ec 0c             	sub    esp,0xc
c001b43c:	53                   	push   ebx
c001b43d:	e8 46 53 fe ff       	call   c0000788 <strlen>
c001b442:	83 c4 10             	add    esp,0x10
c001b445:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b44a:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b450:	89 f0                	mov    eax,esi
c001b452:	5b                   	pop    ebx
c001b453:	5e                   	pop    esi
c001b454:	5f                   	pop    edi
c001b455:	c3                   	ret    

c001b456 <Reg::readBool(char*, char*, bool*)>:
c001b456:	83 ec 20             	sub    esp,0x20
c001b459:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b45d:	50                   	push   eax
c001b45e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b462:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b466:	e8 7f fe ff ff       	call   c001b2ea <Reg::readInt(char*, char*, int*)>
c001b46b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b470:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b474:	0f 95 02             	setne  BYTE PTR [edx]
c001b477:	83 c4 2c             	add    esp,0x2c
c001b47a:	c3                   	ret    

c001b47b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b47b:	53                   	push   ebx
c001b47c:	83 ec 1c             	sub    esp,0x1c
c001b47f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b483:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b487:	50                   	push   eax
c001b488:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b48c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b490:	e8 c1 ff ff ff       	call   c001b456 <Reg::readBool(char*, char*, bool*)>
c001b495:	83 c4 10             	add    esp,0x10
c001b498:	84 c0                	test   al,al
c001b49a:	74 04                	je     c001b4a0 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b49c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b4a0:	88 d8                	mov    al,bl
c001b4a2:	83 c4 18             	add    esp,0x18
c001b4a5:	5b                   	pop    ebx
c001b4a6:	c3                   	ret    

c001b4a7 <Reg::readIntWithDefault(char*, char*, int)>:
c001b4a7:	53                   	push   ebx
c001b4a8:	83 ec 1c             	sub    esp,0x1c
c001b4ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b4af:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b4b3:	50                   	push   eax
c001b4b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4bc:	e8 29 fe ff ff       	call   c001b2ea <Reg::readInt(char*, char*, int*)>
c001b4c1:	83 c4 10             	add    esp,0x10
c001b4c4:	84 c0                	test   al,al
c001b4c6:	74 04                	je     c001b4cc <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b4c8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b4cc:	89 d8                	mov    eax,ebx
c001b4ce:	83 c4 18             	add    esp,0x18
c001b4d1:	5b                   	pop    ebx
c001b4d2:	c3                   	ret    

c001b4d3 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b4d3:	57                   	push   edi
c001b4d4:	56                   	push   esi
c001b4d5:	53                   	push   ebx
c001b4d6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b4da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b4de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b4e2:	53                   	push   ebx
c001b4e3:	57                   	push   edi
c001b4e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4ec:	e8 e4 fe ff ff       	call   c001b3d5 <Reg::readString(char*, char*, char*, int)>
c001b4f1:	83 c4 10             	add    esp,0x10
c001b4f4:	84 c0                	test   al,al
c001b4f6:	75 14                	jne    c001b50c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x39>
c001b4f8:	50                   	push   eax
c001b4f9:	53                   	push   ebx
c001b4fa:	6a 00                	push   0x0
c001b4fc:	57                   	push   edi
c001b4fd:	e8 6a 52 fe ff       	call   c000076c <memset>
c001b502:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001b505:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b507:	83 c4 10             	add    esp,0x10
c001b50a:	89 f7                	mov    edi,esi
c001b50c:	89 f8                	mov    eax,edi
c001b50e:	5b                   	pop    ebx
c001b50f:	5e                   	pop    esi
c001b510:	5f                   	pop    edi
c001b511:	c3                   	ret    

c001b512 <Sys::eject(regs*)>:
c001b512:	83 ec 0c             	sub    esp,0xc
c001b515:	83 ca ff             	or     edx,0xffffffff
c001b518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b51c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b51f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b524:	83 e9 41             	sub    ecx,0x41
c001b527:	83 f9 19             	cmp    ecx,0x19
c001b52a:	77 18                	ja     c001b544 <Sys::eject(regs*)+0x32>
c001b52c:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c001b533:	85 c9                	test   ecx,ecx
c001b535:	74 0d                	je     c001b544 <Sys::eject(regs*)+0x32>
c001b537:	83 ec 0c             	sub    esp,0xc
c001b53a:	51                   	push   ecx
c001b53b:	e8 0e b2 ff ff       	call   c001674e <LogicalDisk::eject()>
c001b540:	83 c4 10             	add    esp,0x10
c001b543:	99                   	cdq    
c001b544:	83 c4 0c             	add    esp,0xc
c001b547:	c3                   	ret    

c001b548 <Sys::exit(regs*)>:
c001b548:	83 ec 18             	sub    esp,0x18
c001b54b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b54f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b552:	e8 7c 38 00 00       	call   c001edd3 <terminateTask(int)>
c001b557:	83 c8 ff             	or     eax,0xffffffff
c001b55a:	83 c4 1c             	add    esp,0x1c
c001b55d:	89 c2                	mov    edx,eax
c001b55f:	c3                   	ret    

c001b560 <Sys::getCwd(regs*)>:
c001b560:	83 ec 10             	sub    esp,0x10
c001b563:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b567:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b56a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b56d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b572:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b575:	e8 28 7c ff ff       	call   c00131a2 <Fs::getcwd(Process*, char*, int)>
c001b57a:	83 c4 1c             	add    esp,0x1c
c001b57d:	99                   	cdq    
c001b57e:	c3                   	ret    

c001b57f <Sys::getPID(regs*)>:
c001b57f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b584:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b587:	8b 00                	mov    eax,DWORD PTR [eax]
c001b589:	99                   	cdq    
c001b58a:	c3                   	ret    

c001b58b <Sys::getRAMData(regs*)>:
c001b58b:	8b 0d b4 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eeb4
c001b591:	6b 05 b0 ee 02 c0 64 	imul   eax,DWORD PTR ds:0xc002eeb0,0x64
c001b598:	99                   	cdq    
c001b599:	f7 f9                	idiv   ecx
c001b59b:	c1 e0 18             	shl    eax,0x18
c001b59e:	09 c8                	or     eax,ecx
c001b5a0:	99                   	cdq    
c001b5a1:	c3                   	ret    

c001b5a2 <Sys::getVGAPtr(regs*)>:
c001b5a2:	55                   	push   ebp
c001b5a3:	57                   	push   edi
c001b5a4:	56                   	push   esi
c001b5a5:	53                   	push   ebx
c001b5a6:	83 ec 18             	sub    esp,0x18
c001b5a9:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b5ad:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b5b0:	e8 00 33 00 00       	call   c001e8b5 <Thr::processFromPID(int)>
c001b5b5:	83 c4 10             	add    esp,0x10
c001b5b8:	89 c1                	mov    ecx,eax
c001b5ba:	b8 01 00 00 00       	mov    eax,0x1
c001b5bf:	85 c9                	test   ecx,ecx
c001b5c1:	74 59                	je     c001b61c <Sys::getVGAPtr(regs*)+0x7a>
c001b5c3:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b5c9:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b5cd:	74 0c                	je     c001b5db <Sys::getVGAPtr(regs*)+0x39>
c001b5cf:	83 ec 0c             	sub    esp,0xc
c001b5d2:	53                   	push   ebx
c001b5d3:	e8 8c 56 ff ff       	call   c0010c64 <setActiveTerminal(VgaText*)>
c001b5d8:	83 c4 10             	add    esp,0x10
c001b5db:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b5e0:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b5e3:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b5e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5e8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b5eb:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b5ee:	81 c3 82 00 00 00    	add    ebx,0x82
c001b5f4:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b5fa:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b5fd:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b600:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b606:	50                   	push   eax
c001b607:	50                   	push   eax
c001b608:	53                   	push   ebx
c001b609:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b60c:	05 a8 0f 00 00       	add    eax,0xfa8
c001b611:	50                   	push   eax
c001b612:	e8 11 52 fe ff       	call   c0000828 <strcpy>
c001b617:	83 c4 10             	add    esp,0x10
c001b61a:	31 c0                	xor    eax,eax
c001b61c:	83 c4 0c             	add    esp,0xc
c001b61f:	31 d2                	xor    edx,edx
c001b621:	5b                   	pop    ebx
c001b622:	5e                   	pop    esi
c001b623:	5f                   	pop    edi
c001b624:	5d                   	pop    ebp
c001b625:	c3                   	ret    

c001b626 <Sys::loadDLL(regs*)>:
c001b626:	56                   	push   esi
c001b627:	53                   	push   ebx
c001b628:	31 d2                	xor    edx,edx
c001b62a:	51                   	push   ecx
c001b62b:	b8 01 00 00 00       	mov    eax,0x1
c001b630:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b634:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b638:	0f 84 8c 00 00 00    	je     c001b6ca <Sys::loadDLL(regs*)+0xa4>
c001b63e:	83 ec 0c             	sub    esp,0xc
c001b641:	68 14 01 00 00       	push   0x114
c001b646:	e8 5b 42 ff ff       	call   c000f8a6 <malloc>
c001b64b:	83 c4 0c             	add    esp,0xc
c001b64e:	89 c3                	mov    ebx,eax
c001b650:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b655:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b658:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b65b:	53                   	push   ebx
c001b65c:	e8 3f 7d ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001b661:	83 c4 10             	add    esp,0x10
c001b664:	31 d2                	xor    edx,edx
c001b666:	b8 02 00 00 00       	mov    eax,0x2
c001b66b:	85 db                	test   ebx,ebx
c001b66d:	74 5b                	je     c001b6ca <Sys::loadDLL(regs*)+0xa4>
c001b66f:	83 ec 0c             	sub    esp,0xc
c001b672:	53                   	push   ebx
c001b673:	e8 fa 7f ff ff       	call   c0013672 <File::exists()>
c001b678:	83 c4 10             	add    esp,0x10
c001b67b:	84 c0                	test   al,al
c001b67d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b67f:	75 11                	jne    c001b692 <Sys::loadDLL(regs*)+0x6c>
c001b681:	83 ec 0c             	sub    esp,0xc
c001b684:	53                   	push   ebx
c001b685:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b688:	83 c4 10             	add    esp,0x10
c001b68b:	b8 03 00 00 00       	mov    eax,0x3
c001b690:	eb 36                	jmp    c001b6c8 <Sys::loadDLL(regs*)+0xa2>
c001b692:	83 ec 0c             	sub    esp,0xc
c001b695:	53                   	push   ebx
c001b696:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b699:	58                   	pop    eax
c001b69a:	5a                   	pop    edx
c001b69b:	6a 00                	push   0x0
c001b69d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b6a0:	e8 1c 24 00 00       	call   c001dac1 <Thr::loadDLL(char const*, bool)>
c001b6a5:	83 c4 10             	add    esp,0x10
c001b6a8:	89 c1                	mov    ecx,eax
c001b6aa:	31 d2                	xor    edx,edx
c001b6ac:	b8 04 00 00 00       	mov    eax,0x4
c001b6b1:	85 c9                	test   ecx,ecx
c001b6b3:	74 15                	je     c001b6ca <Sys::loadDLL(regs*)+0xa4>
c001b6b5:	53                   	push   ebx
c001b6b6:	53                   	push   ebx
c001b6b7:	ff 35 68 ee 02 c0    	push   DWORD PTR ds:0xc002ee68
c001b6bd:	51                   	push   ecx
c001b6be:	e8 29 26 00 00       	call   c001dcec <Thr::executeDLL(unsigned long, void*)>
c001b6c3:	83 c4 10             	add    esp,0x10
c001b6c6:	31 c0                	xor    eax,eax
c001b6c8:	31 d2                	xor    edx,edx
c001b6ca:	59                   	pop    ecx
c001b6cb:	5b                   	pop    ebx
c001b6cc:	5e                   	pop    esi
c001b6cd:	c3                   	ret    

c001b6ce <Sys::read(regs*)>:
c001b6ce:	57                   	push   edi
c001b6cf:	56                   	push   esi
c001b6d0:	53                   	push   ebx
c001b6d1:	83 ec 10             	sub    esp,0x10
c001b6d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6db:	83 f8 02             	cmp    eax,0x2
c001b6de:	77 10                	ja     c001b6f0 <Sys::read(regs*)+0x22>
c001b6e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6e8:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6ee:	eb 0e                	jmp    c001b6fe <Sys::read(regs*)+0x30>
c001b6f0:	83 ec 0c             	sub    esp,0xc
c001b6f3:	50                   	push   eax
c001b6f4:	e8 ec 61 ff ff       	call   c00118e5 <getFromFileDescriptor(int)>
c001b6f9:	83 c4 10             	add    esp,0x10
c001b6fc:	89 c1                	mov    ecx,eax
c001b6fe:	83 c8 ff             	or     eax,0xffffffff
c001b701:	85 c9                	test   ecx,ecx
c001b703:	89 c2                	mov    edx,eax
c001b705:	74 28                	je     c001b72f <Sys::read(regs*)+0x61>
c001b707:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b70f:	31 ff                	xor    edi,edi
c001b711:	83 ec 0c             	sub    esp,0xc
c001b714:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b716:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b71a:	52                   	push   edx
c001b71b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b71e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b721:	57                   	push   edi
c001b722:	56                   	push   esi
c001b723:	51                   	push   ecx
c001b724:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b727:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b72b:	83 c4 20             	add    esp,0x20
c001b72e:	99                   	cdq    
c001b72f:	83 c4 10             	add    esp,0x10
c001b732:	5b                   	pop    ebx
c001b733:	5e                   	pop    esi
c001b734:	5f                   	pop    edi
c001b735:	c3                   	ret    

c001b736 <Sys::sbrk(regs*)>:
c001b736:	56                   	push   esi
c001b737:	53                   	push   ebx
c001b738:	50                   	push   eax
c001b739:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b73e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b742:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b745:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b748:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b74e:	85 db                	test   ebx,ebx
c001b750:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b753:	74 02                	je     c001b757 <Sys::sbrk(regs*)+0x21>
c001b755:	79 06                	jns    c001b75d <Sys::sbrk(regs*)+0x27>
c001b757:	89 f0                	mov    eax,esi
c001b759:	31 d2                	xor    edx,edx
c001b75b:	eb 2a                	jmp    c001b787 <Sys::sbrk(regs*)+0x51>
c001b75d:	83 c8 ff             	or     eax,0xffffffff
c001b760:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b766:	89 c2                	mov    edx,eax
c001b768:	77 1d                	ja     c001b787 <Sys::sbrk(regs*)+0x51>
c001b76a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b770:	50                   	push   eax
c001b771:	c1 ea 0c             	shr    edx,0xc
c001b774:	68 07 0c 00 00       	push   0xc07
c001b779:	52                   	push   edx
c001b77a:	51                   	push   ecx
c001b77b:	e8 f4 6b ff ff       	call   c0012374 <VAS::allocatePages(int, int)>
c001b780:	89 f0                	mov    eax,esi
c001b782:	31 d2                	xor    edx,edx
c001b784:	83 c4 10             	add    esp,0x10
c001b787:	59                   	pop    ecx
c001b788:	5b                   	pop    ebx
c001b789:	5e                   	pop    esi
c001b78a:	c3                   	ret    

c001b78b <Sys::setCwd(regs*)>:
c001b78b:	83 ec 14             	sub    esp,0x14
c001b78e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b792:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b795:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b79a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b79d:	e8 6f 7f ff ff       	call   c0013711 <Fs::setcwd(Process*, char*)>
c001b7a2:	83 c4 1c             	add    esp,0x1c
c001b7a5:	99                   	cdq    
c001b7a6:	c3                   	ret    

c001b7a7 <Sys::setTime(regs*)>:
c001b7a7:	55                   	push   ebp
c001b7a8:	31 d2                	xor    edx,edx
c001b7aa:	57                   	push   edi
c001b7ab:	bf 18 00 00 00       	mov    edi,0x18
c001b7b0:	56                   	push   esi
c001b7b1:	53                   	push   ebx
c001b7b2:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b7b7:	83 ec 30             	sub    esp,0x30
c001b7ba:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b7be:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b7c1:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b7c4:	f7 f3                	div    ebx
c001b7c6:	89 d6                	mov    esi,edx
c001b7c8:	31 d2                	xor    edx,edx
c001b7ca:	f7 f3                	div    ebx
c001b7cc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b7cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b7d3:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b7d8:	31 d2                	xor    edx,edx
c001b7da:	f7 f3                	div    ebx
c001b7dc:	31 d2                	xor    edx,edx
c001b7de:	bb 0c 00 00 00       	mov    ebx,0xc
c001b7e3:	f7 f7                	div    edi
c001b7e5:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7e8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b7ec:	0f b7 cd             	movzx  ecx,bp
c001b7ef:	56                   	push   esi
c001b7f0:	89 c7                	mov    edi,eax
c001b7f2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b7f6:	c1 e6 10             	shl    esi,0x10
c001b7f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7fd:	83 e7 1f             	and    edi,0x1f
c001b800:	51                   	push   ecx
c001b801:	47                   	inc    edi
c001b802:	c1 e8 05             	shr    eax,0x5
c001b805:	31 d2                	xor    edx,edx
c001b807:	f7 f3                	div    ebx
c001b809:	31 db                	xor    ebx,ebx
c001b80b:	52                   	push   edx
c001b80c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b810:	57                   	push   edi
c001b811:	68 0d c7 02 c0       	push   0xc002c70d
c001b816:	e8 26 76 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001b81b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b81f:	89 f8                	mov    eax,edi
c001b821:	31 c9                	xor    ecx,ecx
c001b823:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b827:	88 c1                	mov    cl,al
c001b829:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b82f:	88 d5                	mov    ch,dl
c001b831:	c1 e0 10             	shl    eax,0x10
c001b834:	0f b7 d1             	movzx  edx,cx
c001b837:	09 c2                	or     edx,eax
c001b839:	89 d8                	mov    eax,ebx
c001b83b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b840:	09 f0                	or     eax,esi
c001b842:	89 c3                	mov    ebx,eax
c001b844:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b848:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b84c:	83 c4 18             	add    esp,0x18
c001b84f:	53                   	push   ebx
c001b850:	52                   	push   edx
c001b851:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b855:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b859:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b85d:	e8 d1 85 ff ff       	call   c0013e33 <datetimeToSeconds(datetime_t)>
c001b862:	83 c4 0c             	add    esp,0xc
c001b865:	52                   	push   edx
c001b866:	50                   	push   eax
c001b867:	56                   	push   esi
c001b868:	e8 4d 87 ff ff       	call   c0013fba <secondsToDatetime(unsigned long long)>
c001b86d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b871:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b875:	51                   	push   ecx
c001b876:	89 d6                	mov    esi,edx
c001b878:	51                   	push   ecx
c001b879:	c1 ee 10             	shr    esi,0x10
c001b87c:	89 f3                	mov    ebx,esi
c001b87e:	0f b6 f3             	movzx  esi,bl
c001b881:	56                   	push   esi
c001b882:	0f b6 f6             	movzx  esi,dh
c001b885:	0f b6 d2             	movzx  edx,dl
c001b888:	56                   	push   esi
c001b889:	52                   	push   edx
c001b88a:	89 c2                	mov    edx,eax
c001b88c:	c1 ea 10             	shr    edx,0x10
c001b88f:	52                   	push   edx
c001b890:	0f b6 d4             	movzx  edx,ah
c001b893:	0f b6 c0             	movzx  eax,al
c001b896:	52                   	push   edx
c001b897:	50                   	push   eax
c001b898:	68 29 c7 02 c0       	push   0xc002c729
c001b89d:	e8 9f 75 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001b8a2:	83 c4 2c             	add    esp,0x2c
c001b8a5:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001b8aa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b8ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b8b2:	53                   	push   ebx
c001b8b3:	51                   	push   ecx
c001b8b4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b8ba:	e8 9b 86 ff ff       	call   c0013f5a <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b8bf:	83 f0 01             	xor    eax,0x1
c001b8c2:	31 d2                	xor    edx,edx
c001b8c4:	0f b6 c0             	movzx  eax,al
c001b8c7:	83 c4 3c             	add    esp,0x3c
c001b8ca:	5b                   	pop    ebx
c001b8cb:	5e                   	pop    esi
c001b8cc:	5f                   	pop    edi
c001b8cd:	5d                   	pop    ebp
c001b8ce:	c3                   	ret    

c001b8cf <Sys::timezone(regs*)>:
c001b8cf:	53                   	push   ebx
c001b8d0:	83 ec 08             	sub    esp,0x8
c001b8d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8d7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b8db:	75 17                	jne    c001b8f4 <Sys::timezone(regs*)+0x25>
c001b8dd:	83 ec 0c             	sub    esp,0xc
c001b8e0:	68 45 c7 02 c0       	push   0xc002c745
c001b8e5:	e8 57 75 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001b8ea:	83 c8 ff             	or     eax,0xffffffff
c001b8ed:	83 c4 10             	add    esp,0x10
c001b8f0:	89 c2                	mov    edx,eax
c001b8f2:	eb 20                	jmp    c001b914 <Sys::timezone(regs*)+0x45>
c001b8f4:	83 ec 0c             	sub    esp,0xc
c001b8f7:	68 7d c7 02 c0       	push   0xc002c77d
c001b8fc:	e8 40 75 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001b901:	58                   	pop    eax
c001b902:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b905:	e8 b2 83 ff ff       	call   c0013cbc <User::loadClockSettings(int)>
c001b90a:	83 c4 10             	add    esp,0x10
c001b90d:	b8 01 00 00 00       	mov    eax,0x1
c001b912:	31 d2                	xor    edx,edx
c001b914:	83 c4 08             	add    esp,0x8
c001b917:	5b                   	pop    ebx
c001b918:	c3                   	ret    

c001b919 <Sys::write(regs*)>:
c001b919:	57                   	push   edi
c001b91a:	56                   	push   esi
c001b91b:	53                   	push   ebx
c001b91c:	83 ec 10             	sub    esp,0x10
c001b91f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b923:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b926:	83 f8 02             	cmp    eax,0x2
c001b929:	77 10                	ja     c001b93b <Sys::write(regs*)+0x22>
c001b92b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b930:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b933:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b939:	eb 0e                	jmp    c001b949 <Sys::write(regs*)+0x30>
c001b93b:	83 ec 0c             	sub    esp,0xc
c001b93e:	50                   	push   eax
c001b93f:	e8 a1 5f ff ff       	call   c00118e5 <getFromFileDescriptor(int)>
c001b944:	83 c4 10             	add    esp,0x10
c001b947:	89 c1                	mov    ecx,eax
c001b949:	83 c8 ff             	or     eax,0xffffffff
c001b94c:	85 c9                	test   ecx,ecx
c001b94e:	89 c2                	mov    edx,eax
c001b950:	74 28                	je     c001b97a <Sys::write(regs*)+0x61>
c001b952:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b95a:	31 ff                	xor    edi,edi
c001b95c:	83 ec 0c             	sub    esp,0xc
c001b95f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b961:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b965:	52                   	push   edx
c001b966:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b969:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b96c:	57                   	push   edi
c001b96d:	56                   	push   esi
c001b96e:	51                   	push   ecx
c001b96f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b972:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b976:	83 c4 20             	add    esp,0x20
c001b979:	99                   	cdq    
c001b97a:	83 c4 10             	add    esp,0x10
c001b97d:	5b                   	pop    ebx
c001b97e:	5e                   	pop    esi
c001b97f:	5f                   	pop    edi
c001b980:	c3                   	ret    

c001b981 <Sys::wsbe(regs*)>:
c001b981:	57                   	push   edi
c001b982:	b9 0b 00 00 00       	mov    ecx,0xb
c001b987:	56                   	push   esi
c001b988:	be bc c7 02 c0       	mov    esi,0xc002c7bc
c001b98d:	53                   	push   ebx
c001b98e:	83 ec 30             	sub    esp,0x30
c001b991:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b995:	fc                   	cld    
c001b996:	83 ec 0c             	sub    esp,0xc
c001b999:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b99b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b99f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9a7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b9ad:	8b 06                	mov    eax,DWORD PTR [esi]
c001b9af:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b9b2:	57                   	push   edi
c001b9b3:	e8 d0 4d fe ff       	call   c0000788 <strlen>
c001b9b8:	5a                   	pop    edx
c001b9b9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b9bd:	52                   	push   edx
c001b9be:	31 d2                	xor    edx,edx
c001b9c0:	57                   	push   edi
c001b9c1:	52                   	push   edx
c001b9c2:	50                   	push   eax
c001b9c3:	56                   	push   esi
c001b9c4:	ff d3                	call   ebx
c001b9c6:	83 c4 14             	add    esp,0x14
c001b9c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b9cd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b9d0:	e8 fe 33 00 00       	call   c001edd3 <terminateTask(int)>
c001b9d5:	83 c4 40             	add    esp,0x40
c001b9d8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b9dd:	5b                   	pop    ebx
c001b9de:	31 d2                	xor    edx,edx
c001b9e0:	5e                   	pop    esi
c001b9e1:	5f                   	pop    edi
c001b9e2:	c3                   	ret    

c001b9e3 <Sys::yield(regs*)>:
c001b9e3:	57                   	push   edi
c001b9e4:	56                   	push   esi
c001b9e5:	53                   	push   ebx
c001b9e6:	fa                   	cli    
c001b9e7:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001b9ed:	e8 ae 2a 00 00       	call   c001e4a0 <schedule()>
c001b9f2:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001b9f7:	48                   	dec    eax
c001b9f8:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001b9fd:	75 01                	jne    c001ba00 <Sys::yield(regs*)+0x1d>
c001b9ff:	fb                   	sti    
c001ba00:	8b 35 f0 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f4f0
c001ba06:	8b 3d f4 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4f4
c001ba0c:	89 f0                	mov    eax,esi
c001ba0e:	89 fb                	mov    ebx,edi
c001ba10:	89 f1                	mov    ecx,esi
c001ba12:	c1 e0 07             	shl    eax,0x7
c001ba15:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ba19:	25 80 30 0f 00       	and    eax,0xf3080
c001ba1e:	c1 eb 17             	shr    ebx,0x17
c001ba21:	31 c8                	xor    eax,ecx
c001ba23:	89 da                	mov    edx,ebx
c001ba25:	5b                   	pop    ebx
c001ba26:	5e                   	pop    esi
c001ba27:	5f                   	pop    edi
c001ba28:	c3                   	ret    

c001ba29 <sysCallSeekDir(regs*)>:
c001ba29:	31 c0                	xor    eax,eax
c001ba2b:	31 d2                	xor    edx,edx
c001ba2d:	c3                   	ret    

c001ba2e <sysCallTellDir(regs*)>:
c001ba2e:	31 c0                	xor    eax,eax
c001ba30:	31 d2                	xor    edx,edx
c001ba32:	c3                   	ret    

c001ba33 <sysCallVerify(regs*)>:
c001ba33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba37:	31 d2                	xor    edx,edx
c001ba39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba3c:	c3                   	ret    

c001ba3d <sysFormatDisk(regs*)>:
c001ba3d:	56                   	push   esi
c001ba3e:	53                   	push   ebx
c001ba3f:	53                   	push   ebx
c001ba40:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba44:	8b 1d f4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002eff4
c001ba4a:	eb 25                	jmp    c001ba71 <sysFormatDisk(regs*)+0x34>
c001ba4c:	83 ec 0c             	sub    esp,0xc
c001ba4f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba52:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba54:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba57:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba5a:	50                   	push   eax
c001ba5b:	ff 34 85 80 f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b80]
c001ba62:	53                   	push   ebx
c001ba63:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001ba66:	83 c4 20             	add    esp,0x20
c001ba69:	83 f8 08             	cmp    eax,0x8
c001ba6c:	75 12                	jne    c001ba80 <sysFormatDisk(regs*)+0x43>
c001ba6e:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001ba71:	85 db                	test   ebx,ebx
c001ba73:	75 d7                	jne    c001ba4c <sysFormatDisk(regs*)+0xf>
c001ba75:	59                   	pop    ecx
c001ba76:	b8 03 00 00 00       	mov    eax,0x3
c001ba7b:	31 d2                	xor    edx,edx
c001ba7d:	5b                   	pop    ebx
c001ba7e:	5e                   	pop    esi
c001ba7f:	c3                   	ret    
c001ba80:	85 c0                	test   eax,eax
c001ba82:	74 1b                	je     c001ba9f <sysFormatDisk(regs*)+0x62>
c001ba84:	83 f8 09             	cmp    eax,0x9
c001ba87:	74 0b                	je     c001ba94 <sysFormatDisk(regs*)+0x57>
c001ba89:	59                   	pop    ecx
c001ba8a:	b8 02 00 00 00       	mov    eax,0x2
c001ba8f:	31 d2                	xor    edx,edx
c001ba91:	5b                   	pop    ebx
c001ba92:	5e                   	pop    esi
c001ba93:	c3                   	ret    
c001ba94:	59                   	pop    ecx
c001ba95:	b8 01 00 00 00       	mov    eax,0x1
c001ba9a:	31 d2                	xor    edx,edx
c001ba9c:	5b                   	pop    ebx
c001ba9d:	5e                   	pop    esi
c001ba9e:	c3                   	ret    
c001ba9f:	59                   	pop    ecx
c001baa0:	31 c0                	xor    eax,eax
c001baa2:	31 d2                	xor    edx,edx
c001baa4:	5b                   	pop    ebx
c001baa5:	5e                   	pop    esi
c001baa6:	c3                   	ret    

c001baa7 <sysSetDiskVolumeLabel(regs*)>:
c001baa7:	56                   	push   esi
c001baa8:	53                   	push   ebx
c001baa9:	53                   	push   ebx
c001baaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001baae:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bab1:	83 f8 19             	cmp    eax,0x19
c001bab4:	77 29                	ja     c001badf <sysSetDiskVolumeLabel(regs*)+0x38>
c001bab6:	8b 0c 85 80 f4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0b80]
c001babd:	85 c9                	test   ecx,ecx
c001babf:	74 1e                	je     c001badf <sysSetDiskVolumeLabel(regs*)+0x38>
c001bac1:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bac4:	85 d2                	test   edx,edx
c001bac6:	74 17                	je     c001badf <sysSetDiskVolumeLabel(regs*)+0x38>
c001bac8:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bace:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bad0:	52                   	push   edx
c001bad1:	50                   	push   eax
c001bad2:	51                   	push   ecx
c001bad3:	53                   	push   ebx
c001bad4:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bad7:	83 c4 10             	add    esp,0x10
c001bada:	99                   	cdq    
c001badb:	59                   	pop    ecx
c001badc:	5b                   	pop    ebx
c001badd:	5e                   	pop    esi
c001bade:	c3                   	ret    
c001badf:	59                   	pop    ecx
c001bae0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bae5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baea:	5b                   	pop    ebx
c001baeb:	5e                   	pop    esi
c001baec:	c3                   	ret    

c001baed <sysGetDiskVolumeLabel(regs*)>:
c001baed:	57                   	push   edi
c001baee:	56                   	push   esi
c001baef:	53                   	push   ebx
c001baf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baf4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001baf7:	83 fa 19             	cmp    edx,0x19
c001bafa:	77 34                	ja     c001bb30 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bafc:	8b 0c 95 80 f4 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0b80]
c001bb03:	85 c9                	test   ecx,ecx
c001bb05:	74 29                	je     c001bb30 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb07:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bb0a:	85 db                	test   ebx,ebx
c001bb0c:	74 22                	je     c001bb30 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb0e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bb11:	85 c0                	test   eax,eax
c001bb13:	74 1b                	je     c001bb30 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb15:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bb1b:	83 ec 0c             	sub    esp,0xc
c001bb1e:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bb20:	50                   	push   eax
c001bb21:	53                   	push   ebx
c001bb22:	52                   	push   edx
c001bb23:	51                   	push   ecx
c001bb24:	56                   	push   esi
c001bb25:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bb28:	83 c4 20             	add    esp,0x20
c001bb2b:	99                   	cdq    
c001bb2c:	5b                   	pop    ebx
c001bb2d:	5e                   	pop    esi
c001bb2e:	5f                   	pop    edi
c001bb2f:	c3                   	ret    
c001bb30:	5b                   	pop    ebx
c001bb31:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bb36:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb3b:	5e                   	pop    esi
c001bb3c:	5f                   	pop    edi
c001bb3d:	c3                   	ret    

c001bb3e <sysShutdown(regs*)>:
c001bb3e:	83 ec 0c             	sub    esp,0xc
c001bb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb45:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb48:	85 c0                	test   eax,eax
c001bb4a:	74 18                	je     c001bb64 <sysShutdown(regs*)+0x26>
c001bb4c:	83 f8 01             	cmp    eax,0x1
c001bb4f:	74 38                	je     c001bb89 <sysShutdown(regs*)+0x4b>
c001bb51:	83 f8 02             	cmp    eax,0x2
c001bb54:	74 24                	je     c001bb7a <sysShutdown(regs*)+0x3c>
c001bb56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb60:	83 c4 0c             	add    esp,0xc
c001bb63:	c3                   	ret    
c001bb64:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001bb69:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb6b:	6a 00                	push   0x0
c001bb6d:	6a 00                	push   0x0
c001bb6f:	6a 00                	push   0x0
c001bb71:	50                   	push   eax
c001bb72:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bb75:	83 c4 10             	add    esp,0x10
c001bb78:	eb dc                	jmp    c001bb56 <sysShutdown(regs*)+0x18>
c001bb7a:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001bb7f:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb81:	6a 00                	push   0x0
c001bb83:	6a 00                	push   0x0
c001bb85:	6a 01                	push   0x1
c001bb87:	eb e8                	jmp    c001bb71 <sysShutdown(regs*)+0x33>
c001bb89:	a1 20 15 03 c0       	mov    eax,ds:0xc0031520
c001bb8e:	85 c0                	test   eax,eax
c001bb90:	74 02                	je     c001bb94 <sysShutdown(regs*)+0x56>
c001bb92:	ff d0                	call   eax
c001bb94:	31 c0                	xor    eax,eax
c001bb96:	31 d2                	xor    edx,edx
c001bb98:	83 c4 0c             	add    esp,0xc
c001bb9b:	c3                   	ret    

c001bb9c <sysCallRealpath(regs*)>:
c001bb9c:	83 ec 0c             	sub    esp,0xc
c001bb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bba3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bba6:	85 d2                	test   edx,edx
c001bba8:	74 07                	je     c001bbb1 <sysCallRealpath(regs*)+0x15>
c001bbaa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bbad:	85 c0                	test   eax,eax
c001bbaf:	75 0b                	jne    c001bbbc <sysCallRealpath(regs*)+0x20>
c001bbb1:	b8 01 00 00 00       	mov    eax,0x1
c001bbb6:	31 d2                	xor    edx,edx
c001bbb8:	83 c4 0c             	add    esp,0xc
c001bbbb:	c3                   	ret    
c001bbbc:	51                   	push   ecx
c001bbbd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bbc3:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bbc6:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bbcc:	51                   	push   ecx
c001bbcd:	52                   	push   edx
c001bbce:	50                   	push   eax
c001bbcf:	e8 22 76 ff ff       	call   c00131f6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bbd4:	83 c4 10             	add    esp,0x10
c001bbd7:	31 c0                	xor    eax,eax
c001bbd9:	31 d2                	xor    edx,edx
c001bbdb:	83 c4 0c             	add    esp,0xc
c001bbde:	c3                   	ret    

c001bbdf <sysCallGetArgc(regs*)>:
c001bbdf:	83 ec 14             	sub    esp,0x14
c001bbe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbe7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbea:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bbf0:	68 e8 c7 02 c0       	push   0xc002c7e8
c001bbf5:	e8 47 72 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001bbfa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bc02:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bc08:	83 c4 1c             	add    esp,0x1c
c001bc0b:	99                   	cdq    
c001bc0c:	c3                   	ret    

c001bc0d <sysCallReadDir(regs*)>:
c001bc0d:	53                   	push   ebx
c001bc0e:	83 ec 18             	sub    esp,0x18
c001bc11:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc15:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bc18:	83 f8 02             	cmp    eax,0x2
c001bc1b:	76 53                	jbe    c001bc70 <sysCallReadDir(regs*)+0x63>
c001bc1d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc20:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bc26:	77 4f                	ja     c001bc77 <sysCallReadDir(regs*)+0x6a>
c001bc28:	83 ec 0c             	sub    esp,0xc
c001bc2b:	50                   	push   eax
c001bc2c:	e8 b4 5c ff ff       	call   c00118e5 <getFromFileDescriptor(int)>
c001bc31:	83 c4 10             	add    esp,0x10
c001bc34:	85 c0                	test   eax,eax
c001bc36:	74 50                	je     c001bc88 <sysCallReadDir(regs*)+0x7b>
c001bc38:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc40:	83 ec 0c             	sub    esp,0xc
c001bc43:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc45:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bc49:	51                   	push   ecx
c001bc4a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc4d:	6a 00                	push   0x0
c001bc4f:	68 10 01 00 00       	push   0x110
c001bc54:	50                   	push   eax
c001bc55:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bc58:	83 c4 20             	add    esp,0x20
c001bc5b:	85 c0                	test   eax,eax
c001bc5d:	74 38                	je     c001bc97 <sysCallReadDir(regs*)+0x8a>
c001bc5f:	83 f8 07             	cmp    eax,0x7
c001bc62:	74 0c                	je     c001bc70 <sysCallReadDir(regs*)+0x63>
c001bc64:	b8 02 00 00 00       	mov    eax,0x2
c001bc69:	31 d2                	xor    edx,edx
c001bc6b:	83 c4 18             	add    esp,0x18
c001bc6e:	5b                   	pop    ebx
c001bc6f:	c3                   	ret    
c001bc70:	b8 01 00 00 00       	mov    eax,0x1
c001bc75:	eb f2                	jmp    c001bc69 <sysCallReadDir(regs*)+0x5c>
c001bc77:	83 ec 08             	sub    esp,0x8
c001bc7a:	52                   	push   edx
c001bc7b:	68 0c c9 02 c0       	push   0xc002c90c
c001bc80:	e8 bc 71 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001bc85:	83 c4 10             	add    esp,0x10
c001bc88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc8d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc92:	83 c4 18             	add    esp,0x18
c001bc95:	5b                   	pop    ebx
c001bc96:	c3                   	ret    
c001bc97:	31 c0                	xor    eax,eax
c001bc99:	eb ce                	jmp    c001bc69 <sysCallReadDir(regs*)+0x5c>

c001bc9b <sysCallIsATTY(regs*)>:
c001bc9b:	83 ec 0c             	sub    esp,0xc
c001bc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bca2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bca5:	83 f8 02             	cmp    eax,0x2
c001bca8:	76 07                	jbe    c001bcb1 <sysCallIsATTY(regs*)+0x16>
c001bcaa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bcaf:	75 26                	jne    c001bcd7 <sysCallIsATTY(regs*)+0x3c>
c001bcb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcb6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bcb9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bcbf:	85 c0                	test   eax,eax
c001bcc1:	74 24                	je     c001bce7 <sysCallIsATTY(regs*)+0x4c>
c001bcc3:	83 ec 0c             	sub    esp,0xc
c001bcc6:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcc8:	50                   	push   eax
c001bcc9:	ff 12                	call   DWORD PTR [edx]
c001bccb:	31 d2                	xor    edx,edx
c001bccd:	0f b6 c0             	movzx  eax,al
c001bcd0:	83 c4 10             	add    esp,0x10
c001bcd3:	83 c4 0c             	add    esp,0xc
c001bcd6:	c3                   	ret    
c001bcd7:	83 ec 0c             	sub    esp,0xc
c001bcda:	50                   	push   eax
c001bcdb:	e8 05 5c ff ff       	call   c00118e5 <getFromFileDescriptor(int)>
c001bce0:	83 c4 10             	add    esp,0x10
c001bce3:	85 c0                	test   eax,eax
c001bce5:	75 dc                	jne    c001bcc3 <sysCallIsATTY(regs*)+0x28>
c001bce7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcec:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcf1:	83 c4 0c             	add    esp,0xc
c001bcf4:	c3                   	ret    

c001bcf5 <sysCallSeek(regs*)>:
c001bcf5:	53                   	push   ebx
c001bcf6:	83 ec 08             	sub    esp,0x8
c001bcf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd00:	83 f8 02             	cmp    eax,0x2
c001bd03:	76 4a                	jbe    c001bd4f <sysCallSeek(regs*)+0x5a>
c001bd05:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd0a:	77 32                	ja     c001bd3e <sysCallSeek(regs*)+0x49>
c001bd0c:	83 ec 0c             	sub    esp,0xc
c001bd0f:	50                   	push   eax
c001bd10:	e8 d0 5b ff ff       	call   c00118e5 <getFromFileDescriptor(int)>
c001bd15:	83 c4 0c             	add    esp,0xc
c001bd18:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bd1b:	31 db                	xor    ebx,ebx
c001bd1d:	53                   	push   ebx
c001bd1e:	51                   	push   ecx
c001bd1f:	50                   	push   eax
c001bd20:	e8 9d 77 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001bd25:	83 c4 10             	add    esp,0x10
c001bd28:	85 c0                	test   eax,eax
c001bd2a:	0f 95 c0             	setne  al
c001bd2d:	31 d2                	xor    edx,edx
c001bd2f:	0f b6 c0             	movzx  eax,al
c001bd32:	f7 d8                	neg    eax
c001bd34:	83 d2 00             	adc    edx,0x0
c001bd37:	83 c4 08             	add    esp,0x8
c001bd3a:	f7 da                	neg    edx
c001bd3c:	5b                   	pop    ebx
c001bd3d:	c3                   	ret    
c001bd3e:	83 ec 08             	sub    esp,0x8
c001bd41:	50                   	push   eax
c001bd42:	68 f3 c7 02 c0       	push   0xc002c7f3
c001bd47:	e8 f5 70 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001bd4c:	83 c4 10             	add    esp,0x10
c001bd4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd54:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd59:	83 c4 08             	add    esp,0x8
c001bd5c:	5b                   	pop    ebx
c001bd5d:	c3                   	ret    

c001bd5e <sysCallTell(regs*)>:
c001bd5e:	53                   	push   ebx
c001bd5f:	83 ec 08             	sub    esp,0x8
c001bd62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd66:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd69:	83 f8 02             	cmp    eax,0x2
c001bd6c:	76 5e                	jbe    c001bdcc <sysCallTell(regs*)+0x6e>
c001bd6e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd73:	77 2d                	ja     c001bda2 <sysCallTell(regs*)+0x44>
c001bd75:	83 ec 0c             	sub    esp,0xc
c001bd78:	50                   	push   eax
c001bd79:	e8 67 5b ff ff       	call   c00118e5 <getFromFileDescriptor(int)>
c001bd7e:	5a                   	pop    edx
c001bd7f:	59                   	pop    ecx
c001bd80:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bd83:	50                   	push   eax
c001bd84:	e8 8f 77 ff ff       	call   c0013518 <File::tell(unsigned long long*)>
c001bd89:	83 c4 10             	add    esp,0x10
c001bd8c:	85 c0                	test   eax,eax
c001bd8e:	0f 95 c0             	setne  al
c001bd91:	31 d2                	xor    edx,edx
c001bd93:	0f b6 c0             	movzx  eax,al
c001bd96:	f7 d8                	neg    eax
c001bd98:	83 d2 00             	adc    edx,0x0
c001bd9b:	83 c4 08             	add    esp,0x8
c001bd9e:	f7 da                	neg    edx
c001bda0:	5b                   	pop    ebx
c001bda1:	c3                   	ret    
c001bda2:	83 ec 08             	sub    esp,0x8
c001bda5:	50                   	push   eax
c001bda6:	68 0d c8 02 c0       	push   0xc002c80d
c001bdab:	e8 91 70 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001bdb0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bdb3:	83 c4 10             	add    esp,0x10
c001bdb6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bdbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bdc3:	31 d2                	xor    edx,edx
c001bdc5:	31 c0                	xor    eax,eax
c001bdc7:	83 c4 08             	add    esp,0x8
c001bdca:	5b                   	pop    ebx
c001bdcb:	c3                   	ret    
c001bdcc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdd1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdd6:	83 c4 08             	add    esp,0x8
c001bdd9:	5b                   	pop    ebx
c001bdda:	c3                   	ret    

c001bddb <sysCallSize(regs*)>:
c001bddb:	53                   	push   ebx
c001bddc:	83 ec 18             	sub    esp,0x18
c001bddf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bde3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bde6:	83 f8 02             	cmp    eax,0x2
c001bde9:	76 64                	jbe    c001be4f <sysCallSize(regs*)+0x74>
c001bdeb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdf0:	77 33                	ja     c001be25 <sysCallSize(regs*)+0x4a>
c001bdf2:	83 ec 0c             	sub    esp,0xc
c001bdf5:	50                   	push   eax
c001bdf6:	e8 ea 5a ff ff       	call   c00118e5 <getFromFileDescriptor(int)>
c001bdfb:	83 c4 0c             	add    esp,0xc
c001bdfe:	8d 54 24 13          	lea    edx,[esp+0x13]
c001be02:	52                   	push   edx
c001be03:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001be06:	50                   	push   eax
c001be07:	e8 a4 78 ff ff       	call   c00136b0 <File::stat(unsigned long long*, bool*)>
c001be0c:	83 c4 10             	add    esp,0x10
c001be0f:	85 c0                	test   eax,eax
c001be11:	0f 95 c0             	setne  al
c001be14:	31 d2                	xor    edx,edx
c001be16:	0f b6 c0             	movzx  eax,al
c001be19:	f7 d8                	neg    eax
c001be1b:	83 d2 00             	adc    edx,0x0
c001be1e:	83 c4 18             	add    esp,0x18
c001be21:	f7 da                	neg    edx
c001be23:	5b                   	pop    ebx
c001be24:	c3                   	ret    
c001be25:	83 ec 08             	sub    esp,0x8
c001be28:	50                   	push   eax
c001be29:	68 27 c8 02 c0       	push   0xc002c827
c001be2e:	e8 0e 70 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001be33:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be36:	83 c4 10             	add    esp,0x10
c001be39:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be46:	31 d2                	xor    edx,edx
c001be48:	31 c0                	xor    eax,eax
c001be4a:	83 c4 18             	add    esp,0x18
c001be4d:	5b                   	pop    ebx
c001be4e:	c3                   	ret    
c001be4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be54:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be59:	83 c4 18             	add    esp,0x18
c001be5c:	5b                   	pop    ebx
c001be5d:	c3                   	ret    

c001be5e <sysCallSizeFromFilename(regs*)>:
c001be5e:	57                   	push   edi
c001be5f:	56                   	push   esi
c001be60:	53                   	push   ebx
c001be61:	83 ec 20             	sub    esp,0x20
c001be64:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be68:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001be6b:	83 fb 02             	cmp    ebx,0x2
c001be6e:	0f 86 99 00 00 00    	jbe    c001bf0d <sysCallSizeFromFilename(regs*)+0xaf>
c001be74:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001be7a:	77 65                	ja     c001bee1 <sysCallSizeFromFilename(regs*)+0x83>
c001be7c:	83 ec 0c             	sub    esp,0xc
c001be7f:	68 14 01 00 00       	push   0x114
c001be84:	e8 1d 3a ff ff       	call   c000f8a6 <malloc>
c001be89:	83 c4 0c             	add    esp,0xc
c001be8c:	89 c6                	mov    esi,eax
c001be8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be93:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be96:	53                   	push   ebx
c001be97:	56                   	push   esi
c001be98:	e8 03 75 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001be9d:	83 c4 0c             	add    esp,0xc
c001bea0:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bea4:	50                   	push   eax
c001bea5:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bea8:	56                   	push   esi
c001bea9:	e8 02 78 ff ff       	call   c00136b0 <File::stat(unsigned long long*, bool*)>
c001beae:	83 c4 10             	add    esp,0x10
c001beb1:	85 f6                	test   esi,esi
c001beb3:	74 14                	je     c001bec9 <sysCallSizeFromFilename(regs*)+0x6b>
c001beb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001beb9:	8b 16                	mov    edx,DWORD PTR [esi]
c001bebb:	83 ec 0c             	sub    esp,0xc
c001bebe:	56                   	push   esi
c001bebf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bec2:	83 c4 10             	add    esp,0x10
c001bec5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bec9:	85 c0                	test   eax,eax
c001becb:	0f 95 c0             	setne  al
c001bece:	31 d2                	xor    edx,edx
c001bed0:	0f b6 c0             	movzx  eax,al
c001bed3:	f7 d8                	neg    eax
c001bed5:	83 d2 00             	adc    edx,0x0
c001bed8:	83 c4 20             	add    esp,0x20
c001bedb:	f7 da                	neg    edx
c001bedd:	5b                   	pop    ebx
c001bede:	5e                   	pop    esi
c001bedf:	5f                   	pop    edi
c001bee0:	c3                   	ret    
c001bee1:	83 ec 08             	sub    esp,0x8
c001bee4:	53                   	push   ebx
c001bee5:	68 27 c8 02 c0       	push   0xc002c827
c001beea:	e8 52 6f ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001beef:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bef2:	83 c4 10             	add    esp,0x10
c001bef5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001befb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf02:	31 d2                	xor    edx,edx
c001bf04:	83 c4 20             	add    esp,0x20
c001bf07:	31 c0                	xor    eax,eax
c001bf09:	5b                   	pop    ebx
c001bf0a:	5e                   	pop    esi
c001bf0b:	5f                   	pop    edi
c001bf0c:	c3                   	ret    
c001bf0d:	83 c4 20             	add    esp,0x20
c001bf10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf15:	5b                   	pop    ebx
c001bf16:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf1b:	5e                   	pop    esi
c001bf1c:	5f                   	pop    edi
c001bf1d:	c3                   	ret    

c001bf1e <sysCallClose(regs*)>:
c001bf1e:	53                   	push   ebx
c001bf1f:	83 ec 08             	sub    esp,0x8
c001bf22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf29:	83 f8 02             	cmp    eax,0x2
c001bf2c:	76 50                	jbe    c001bf7e <sysCallClose(regs*)+0x60>
c001bf2e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf33:	74 58                	je     c001bf8d <sysCallClose(regs*)+0x6f>
c001bf35:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf3a:	74 60                	je     c001bf9c <sysCallClose(regs*)+0x7e>
c001bf3c:	77 2f                	ja     c001bf6d <sysCallClose(regs*)+0x4f>
c001bf3e:	83 ec 0c             	sub    esp,0xc
c001bf41:	50                   	push   eax
c001bf42:	e8 9e 59 ff ff       	call   c00118e5 <getFromFileDescriptor(int)>
c001bf47:	89 c3                	mov    ebx,eax
c001bf49:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf4c:	e8 11 75 ff ff       	call   c0013462 <File::close()>
c001bf51:	83 c4 10             	add    esp,0x10
c001bf54:	85 db                	test   ebx,ebx
c001bf56:	74 0c                	je     c001bf64 <sysCallClose(regs*)+0x46>
c001bf58:	83 ec 0c             	sub    esp,0xc
c001bf5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf5d:	53                   	push   ebx
c001bf5e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf61:	83 c4 10             	add    esp,0x10
c001bf64:	31 c0                	xor    eax,eax
c001bf66:	31 d2                	xor    edx,edx
c001bf68:	83 c4 08             	add    esp,0x8
c001bf6b:	5b                   	pop    ebx
c001bf6c:	c3                   	ret    
c001bf6d:	83 ec 08             	sub    esp,0x8
c001bf70:	50                   	push   eax
c001bf71:	68 30 c9 02 c0       	push   0xc002c930
c001bf76:	e8 c6 6e ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001bf7b:	83 c4 10             	add    esp,0x10
c001bf7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf83:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf88:	83 c4 08             	add    esp,0x8
c001bf8b:	5b                   	pop    ebx
c001bf8c:	c3                   	ret    
c001bf8d:	83 ec 0c             	sub    esp,0xc
c001bf90:	68 42 c8 02 c0       	push   0xc002c842
c001bf95:	e8 a7 6e ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001bf9a:	eb c5                	jmp    c001bf61 <sysCallClose(regs*)+0x43>
c001bf9c:	83 ec 0c             	sub    esp,0xc
c001bf9f:	68 50 c8 02 c0       	push   0xc002c850
c001bfa4:	eb ef                	jmp    c001bf95 <sysCallClose(regs*)+0x77>

c001bfa6 <sysCallOpenDir(regs*)>:
c001bfa6:	56                   	push   esi
c001bfa7:	53                   	push   ebx
c001bfa8:	53                   	push   ebx
c001bfa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bfad:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bfb0:	85 f6                	test   esi,esi
c001bfb2:	74 59                	je     c001c00d <sysCallOpenDir(regs*)+0x67>
c001bfb4:	83 ec 0c             	sub    esp,0xc
c001bfb7:	68 14 01 00 00       	push   0x114
c001bfbc:	e8 e5 38 ff ff       	call   c000f8a6 <malloc>
c001bfc1:	83 c4 0c             	add    esp,0xc
c001bfc4:	89 c6                	mov    esi,eax
c001bfc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfcb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfd1:	56                   	push   esi
c001bfd2:	e8 75 78 ff ff       	call   c001384c <Directory::Directory(char const*, Process*)>
c001bfd7:	83 c4 10             	add    esp,0x10
c001bfda:	85 f6                	test   esi,esi
c001bfdc:	74 2f                	je     c001c00d <sysCallOpenDir(regs*)+0x67>
c001bfde:	83 ec 0c             	sub    esp,0xc
c001bfe1:	56                   	push   esi
c001bfe2:	e8 c9 78 ff ff       	call   c00138b0 <Directory::open()>
c001bfe7:	83 c4 10             	add    esp,0x10
c001bfea:	85 c0                	test   eax,eax
c001bfec:	75 1f                	jne    c001c00d <sysCallOpenDir(regs*)+0x67>
c001bfee:	83 ec 0c             	sub    esp,0xc
c001bff1:	56                   	push   esi
c001bff2:	e8 f9 55 ff ff       	call   c00115f0 <UnixFile::getFileDescriptor()>
c001bff7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bffa:	83 c4 10             	add    esp,0x10
c001bffd:	89 02                	mov    DWORD PTR [edx],eax
c001bfff:	c1 f8 1f             	sar    eax,0x1f
c001c002:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c005:	31 c0                	xor    eax,eax
c001c007:	59                   	pop    ecx
c001c008:	31 d2                	xor    edx,edx
c001c00a:	5b                   	pop    ebx
c001c00b:	5e                   	pop    esi
c001c00c:	c3                   	ret    
c001c00d:	59                   	pop    ecx
c001c00e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c013:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c018:	5b                   	pop    ebx
c001c019:	5e                   	pop    esi
c001c01a:	c3                   	ret    

c001c01b <sysCallCloseDir(regs*)>:
c001c01b:	53                   	push   ebx
c001c01c:	83 ec 08             	sub    esp,0x8
c001c01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c023:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c026:	83 f8 02             	cmp    eax,0x2
c001c029:	76 47                	jbe    c001c072 <sysCallCloseDir(regs*)+0x57>
c001c02b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c030:	77 2f                	ja     c001c061 <sysCallCloseDir(regs*)+0x46>
c001c032:	83 ec 0c             	sub    esp,0xc
c001c035:	50                   	push   eax
c001c036:	e8 aa 58 ff ff       	call   c00118e5 <getFromFileDescriptor(int)>
c001c03b:	89 c3                	mov    ebx,eax
c001c03d:	89 04 24             	mov    DWORD PTR [esp],eax
c001c040:	e8 c7 78 ff ff       	call   c001390c <Directory::close()>
c001c045:	83 c4 10             	add    esp,0x10
c001c048:	85 db                	test   ebx,ebx
c001c04a:	74 0c                	je     c001c058 <sysCallCloseDir(regs*)+0x3d>
c001c04c:	83 ec 0c             	sub    esp,0xc
c001c04f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c051:	53                   	push   ebx
c001c052:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c055:	83 c4 10             	add    esp,0x10
c001c058:	31 c0                	xor    eax,eax
c001c05a:	31 d2                	xor    edx,edx
c001c05c:	83 c4 08             	add    esp,0x8
c001c05f:	5b                   	pop    ebx
c001c060:	c3                   	ret    
c001c061:	83 ec 08             	sub    esp,0x8
c001c064:	50                   	push   eax
c001c065:	68 58 c9 02 c0       	push   0xc002c958
c001c06a:	e8 d2 6d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c06f:	83 c4 10             	add    esp,0x10
c001c072:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c077:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c07c:	83 c4 08             	add    esp,0x8
c001c07f:	5b                   	pop    ebx
c001c080:	c3                   	ret    

c001c081 <sysCallMakeDir(regs*)>:
c001c081:	56                   	push   esi
c001c082:	53                   	push   ebx
c001c083:	83 ec 10             	sub    esp,0x10
c001c086:	68 14 01 00 00       	push   0x114
c001c08b:	e8 16 38 ff ff       	call   c000f8a6 <malloc>
c001c090:	83 c4 0c             	add    esp,0xc
c001c093:	89 c3                	mov    ebx,eax
c001c095:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c09a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c09d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c0a1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0a4:	53                   	push   ebx
c001c0a5:	e8 a2 77 ff ff       	call   c001384c <Directory::Directory(char const*, Process*)>
c001c0aa:	83 c4 10             	add    esp,0x10
c001c0ad:	85 db                	test   ebx,ebx
c001c0af:	74 32                	je     c001c0e3 <sysCallMakeDir(regs*)+0x62>
c001c0b1:	83 ec 0c             	sub    esp,0xc
c001c0b4:	53                   	push   ebx
c001c0b5:	e8 d6 79 ff ff       	call   c0013a90 <Directory::create()>
c001c0ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0bd:	89 c6                	mov    esi,eax
c001c0bf:	e8 48 78 ff ff       	call   c001390c <Directory::close()>
c001c0c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0cc:	83 c4 10             	add    esp,0x10
c001c0cf:	31 c0                	xor    eax,eax
c001c0d1:	59                   	pop    ecx
c001c0d2:	85 f6                	test   esi,esi
c001c0d4:	5b                   	pop    ebx
c001c0d5:	0f 95 c0             	setne  al
c001c0d8:	5e                   	pop    esi
c001c0d9:	31 d2                	xor    edx,edx
c001c0db:	f7 d8                	neg    eax
c001c0dd:	83 d2 00             	adc    edx,0x0
c001c0e0:	f7 da                	neg    edx
c001c0e2:	c3                   	ret    
c001c0e3:	59                   	pop    ecx
c001c0e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0ee:	5b                   	pop    ebx
c001c0ef:	5e                   	pop    esi
c001c0f0:	c3                   	ret    

c001c0f1 <sysCallWait(regs*)>:
c001c0f1:	83 ec 10             	sub    esp,0x10
c001c0f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0f8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c0fb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0fe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c101:	e8 c6 25 00 00       	call   c001e6cc <waitTask(int, int*, int)>
c001c106:	83 c4 1c             	add    esp,0x1c
c001c109:	99                   	cdq    
c001c10a:	c3                   	ret    

c001c10b <sysCallNotImpl(regs*)>:
c001c10b:	83 ec 18             	sub    esp,0x18
c001c10e:	68 5e c8 02 c0       	push   0xc002c85e
c001c113:	e8 e3 e6 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001c118:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c11d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c122:	83 c4 1c             	add    esp,0x1c
c001c125:	c3                   	ret    

c001c126 <sysPanic(regs*)>:
c001c126:	83 ec 18             	sub    esp,0x18
c001c129:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c12d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c130:	e8 c6 e6 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001c135:	c7 04 24 78 c8 02 c0 	mov    DWORD PTR [esp],0xc002c878
c001c13c:	e8 ba e6 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001c141:	b8 01 00 00 00       	mov    eax,0x1
c001c146:	31 d2                	xor    edx,edx
c001c148:	83 c4 1c             	add    esp,0x1c
c001c14b:	c3                   	ret    

c001c14c <sysCallRmdir(regs*)>:
c001c14c:	56                   	push   esi
c001c14d:	53                   	push   ebx
c001c14e:	83 ec 20             	sub    esp,0x20
c001c151:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c155:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c158:	68 14 01 00 00       	push   0x114
c001c15d:	e8 44 37 ff ff       	call   c000f8a6 <malloc>
c001c162:	83 c4 0c             	add    esp,0xc
c001c165:	89 c3                	mov    ebx,eax
c001c167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c16c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c16f:	56                   	push   esi
c001c170:	53                   	push   ebx
c001c171:	e8 2a 72 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001c176:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c179:	e8 fe 73 ff ff       	call   c001357c <File::unlink()>
c001c17e:	83 c4 10             	add    esp,0x10
c001c181:	85 db                	test   ebx,ebx
c001c183:	74 14                	je     c001c199 <sysCallRmdir(regs*)+0x4d>
c001c185:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c189:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c18b:	83 ec 0c             	sub    esp,0xc
c001c18e:	53                   	push   ebx
c001c18f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c192:	83 c4 10             	add    esp,0x10
c001c195:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c199:	85 c0                	test   eax,eax
c001c19b:	0f 95 c0             	setne  al
c001c19e:	31 d2                	xor    edx,edx
c001c1a0:	0f b6 c0             	movzx  eax,al
c001c1a3:	f7 d8                	neg    eax
c001c1a5:	83 d2 00             	adc    edx,0x0
c001c1a8:	83 c4 14             	add    esp,0x14
c001c1ab:	f7 da                	neg    edx
c001c1ad:	5b                   	pop    ebx
c001c1ae:	5e                   	pop    esi
c001c1af:	c3                   	ret    

c001c1b0 <sysCallUnlink(regs*)>:
c001c1b0:	56                   	push   esi
c001c1b1:	53                   	push   ebx
c001c1b2:	83 ec 20             	sub    esp,0x20
c001c1b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c1b9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c1bc:	68 14 01 00 00       	push   0x114
c001c1c1:	e8 e0 36 ff ff       	call   c000f8a6 <malloc>
c001c1c6:	83 c4 0c             	add    esp,0xc
c001c1c9:	89 c3                	mov    ebx,eax
c001c1cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1d3:	56                   	push   esi
c001c1d4:	53                   	push   ebx
c001c1d5:	e8 c6 71 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001c1da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1dd:	e8 9a 73 ff ff       	call   c001357c <File::unlink()>
c001c1e2:	83 c4 10             	add    esp,0x10
c001c1e5:	85 db                	test   ebx,ebx
c001c1e7:	74 14                	je     c001c1fd <sysCallUnlink(regs*)+0x4d>
c001c1e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1ef:	83 ec 0c             	sub    esp,0xc
c001c1f2:	53                   	push   ebx
c001c1f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1f6:	83 c4 10             	add    esp,0x10
c001c1f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1fd:	85 c0                	test   eax,eax
c001c1ff:	0f 95 c0             	setne  al
c001c202:	31 d2                	xor    edx,edx
c001c204:	0f b6 c0             	movzx  eax,al
c001c207:	f7 d8                	neg    eax
c001c209:	83 d2 00             	adc    edx,0x0
c001c20c:	83 c4 14             	add    esp,0x14
c001c20f:	f7 da                	neg    edx
c001c211:	5b                   	pop    ebx
c001c212:	5e                   	pop    esi
c001c213:	c3                   	ret    

c001c214 <sysCallGetArgv(regs*)>:
c001c214:	83 ec 0c             	sub    esp,0xc
c001c217:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c21b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c21e:	85 c0                	test   eax,eax
c001c220:	78 2b                	js     c001c24d <sysCallGetArgv(regs*)+0x39>
c001c222:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c228:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c22b:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c231:	7d 1a                	jge    c001c24d <sysCallGetArgv(regs*)+0x39>
c001c233:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c23a:	85 c0                	test   eax,eax
c001c23c:	74 17                	je     c001c255 <sysCallGetArgv(regs*)+0x41>
c001c23e:	83 ec 08             	sub    esp,0x8
c001c241:	50                   	push   eax
c001c242:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c245:	e8 de 45 fe ff       	call   c0000828 <strcpy>
c001c24a:	83 c4 10             	add    esp,0x10
c001c24d:	31 c0                	xor    eax,eax
c001c24f:	31 d2                	xor    edx,edx
c001c251:	83 c4 0c             	add    esp,0xc
c001c254:	c3                   	ret    
c001c255:	b8 01 00 00 00       	mov    eax,0x1
c001c25a:	31 d2                	xor    edx,edx
c001c25c:	83 c4 0c             	add    esp,0xc
c001c25f:	c3                   	ret    

c001c260 <sysCallTTYName(regs*)>:
c001c260:	56                   	push   esi
c001c261:	53                   	push   ebx
c001c262:	53                   	push   ebx
c001c263:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c267:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c26a:	85 c0                	test   eax,eax
c001c26c:	74 5f                	je     c001c2cd <sysCallTTYName(regs*)+0x6d>
c001c26e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c271:	83 f8 02             	cmp    eax,0x2
c001c274:	77 3e                	ja     c001c2b4 <sysCallTTYName(regs*)+0x54>
c001c276:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c27b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c27e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c284:	85 db                	test   ebx,ebx
c001c286:	74 45                	je     c001c2cd <sysCallTTYName(regs*)+0x6d>
c001c288:	83 ec 0c             	sub    esp,0xc
c001c28b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c28d:	53                   	push   ebx
c001c28e:	ff 10                	call   DWORD PTR [eax]
c001c290:	83 c4 10             	add    esp,0x10
c001c293:	84 c0                	test   al,al
c001c295:	74 41                	je     c001c2d8 <sysCallTTYName(regs*)+0x78>
c001c297:	83 ec 08             	sub    esp,0x8
c001c29a:	81 c3 82 00 00 00    	add    ebx,0x82
c001c2a0:	53                   	push   ebx
c001c2a1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c2a4:	e8 7f 45 fe ff       	call   c0000828 <strcpy>
c001c2a9:	83 c4 10             	add    esp,0x10
c001c2ac:	31 c0                	xor    eax,eax
c001c2ae:	59                   	pop    ecx
c001c2af:	31 d2                	xor    edx,edx
c001c2b1:	5b                   	pop    ebx
c001c2b2:	5e                   	pop    esi
c001c2b3:	c3                   	ret    
c001c2b4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c2b9:	74 bb                	je     c001c276 <sysCallTTYName(regs*)+0x16>
c001c2bb:	83 ec 0c             	sub    esp,0xc
c001c2be:	50                   	push   eax
c001c2bf:	e8 21 56 ff ff       	call   c00118e5 <getFromFileDescriptor(int)>
c001c2c4:	83 c4 10             	add    esp,0x10
c001c2c7:	89 c3                	mov    ebx,eax
c001c2c9:	85 db                	test   ebx,ebx
c001c2cb:	75 bb                	jne    c001c288 <sysCallTTYName(regs*)+0x28>
c001c2cd:	59                   	pop    ecx
c001c2ce:	b8 01 00 00 00       	mov    eax,0x1
c001c2d3:	31 d2                	xor    edx,edx
c001c2d5:	5b                   	pop    ebx
c001c2d6:	5e                   	pop    esi
c001c2d7:	c3                   	ret    
c001c2d8:	59                   	pop    ecx
c001c2d9:	b8 02 00 00 00       	mov    eax,0x2
c001c2de:	31 d2                	xor    edx,edx
c001c2e0:	5b                   	pop    ebx
c001c2e1:	5e                   	pop    esi
c001c2e2:	c3                   	ret    

c001c2e3 <sysCallUSleep(regs*)>:
c001c2e3:	83 ec 14             	sub    esp,0x14
c001c2e6:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c2eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c2ef:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c2f6:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c2f9:	01 ca                	add    edx,ecx
c001c2fb:	52                   	push   edx
c001c2fc:	50                   	push   eax
c001c2fd:	e8 a1 24 00 00       	call   c001e7a3 <nanoSleep(unsigned long long)>
c001c302:	31 c0                	xor    eax,eax
c001c304:	31 d2                	xor    edx,edx
c001c306:	83 c4 1c             	add    esp,0x1c
c001c309:	c3                   	ret    

c001c30a <sysCallSpawn(regs*)>:
c001c30a:	56                   	push   esi
c001c30b:	53                   	push   ebx
c001c30c:	50                   	push   eax
c001c30d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c311:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c314:	85 c0                	test   eax,eax
c001c316:	75 08                	jne    c001c320 <sysCallSpawn(regs*)+0x16>
c001c318:	59                   	pop    ecx
c001c319:	31 c0                	xor    eax,eax
c001c31b:	31 d2                	xor    edx,edx
c001c31d:	5b                   	pop    ebx
c001c31e:	5e                   	pop    esi
c001c31f:	c3                   	ret    
c001c320:	83 ec 08             	sub    esp,0x8
c001c323:	50                   	push   eax
c001c324:	68 87 c8 02 c0       	push   0xc002c887
c001c329:	e8 13 6b ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c32e:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c335:	e8 6c 35 ff ff       	call   c000f8a6 <malloc>
c001c33a:	83 c4 10             	add    esp,0x10
c001c33d:	89 c6                	mov    esi,eax
c001c33f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c342:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c345:	85 c0                	test   eax,eax
c001c347:	75 32                	jne    c001c37b <sysCallSpawn(regs*)+0x71>
c001c349:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c34e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c351:	52                   	push   edx
c001c352:	50                   	push   eax
c001c353:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c356:	56                   	push   esi
c001c357:	e8 24 1b 00 00       	call   c001de80 <Process::Process(char const*, Process*, char**)>
c001c35c:	83 c4 10             	add    esp,0x10
c001c35f:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c366:	75 b0                	jne    c001c318 <sysCallSpawn(regs*)+0xe>
c001c368:	83 ec 0c             	sub    esp,0xc
c001c36b:	56                   	push   esi
c001c36c:	e8 f1 1f 00 00       	call   c001e362 <Process::createUserThread()>
c001c371:	8b 06                	mov    eax,DWORD PTR [esi]
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	99                   	cdq    
c001c377:	59                   	pop    ecx
c001c378:	5b                   	pop    ebx
c001c379:	5e                   	pop    esi
c001c37a:	c3                   	ret    
c001c37b:	31 c0                	xor    eax,eax
c001c37d:	eb d2                	jmp    c001c351 <sysCallSpawn(regs*)+0x47>

c001c37f <sysCallGetEnv(regs*)>:
c001c37f:	55                   	push   ebp
c001c380:	57                   	push   edi
c001c381:	56                   	push   esi
c001c382:	53                   	push   ebx
c001c383:	83 ec 28             	sub    esp,0x28
c001c386:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c38a:	68 95 c8 02 c0       	push   0xc002c895
c001c38f:	e8 ad 6a ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c394:	5f                   	pop    edi
c001c395:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c398:	5d                   	pop    ebp
c001c399:	53                   	push   ebx
c001c39a:	68 c2 cb 02 c0       	push   0xc002cbc2
c001c39f:	e8 9d 6a ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c3a4:	58                   	pop    eax
c001c3a5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c3a8:	5a                   	pop    edx
c001c3a9:	57                   	push   edi
c001c3aa:	68 9e c8 02 c0       	push   0xc002c89e
c001c3af:	e8 8d 6a ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c3b4:	59                   	pop    ecx
c001c3b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3ba:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3bd:	e8 55 e3 ff ff       	call   c001a717 <Krnl::getProcessTotalEnvCount(Process*)>
c001c3c2:	5a                   	pop    edx
c001c3c3:	89 c5                	mov    ebp,eax
c001c3c5:	59                   	pop    ecx
c001c3c6:	50                   	push   eax
c001c3c7:	68 a8 c8 02 c0       	push   0xc002c8a8
c001c3cc:	e8 70 6a ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c3d1:	83 c4 10             	add    esp,0x10
c001c3d4:	39 ef                	cmp    edi,ebp
c001c3d6:	7c 15                	jl     c001c3ed <sysCallGetEnv(regs*)+0x6e>
c001c3d8:	85 db                	test   ebx,ebx
c001c3da:	75 0c                	jne    c001c3e8 <sysCallGetEnv(regs*)+0x69>
c001c3dc:	83 c4 1c             	add    esp,0x1c
c001c3df:	31 c0                	xor    eax,eax
c001c3e1:	5b                   	pop    ebx
c001c3e2:	31 d2                	xor    edx,edx
c001c3e4:	5e                   	pop    esi
c001c3e5:	5f                   	pop    edi
c001c3e6:	5d                   	pop    ebp
c001c3e7:	c3                   	ret    
c001c3e8:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c3eb:	eb ef                	jmp    c001c3dc <sysCallGetEnv(regs*)+0x5d>
c001c3ed:	83 ec 0c             	sub    esp,0xc
c001c3f0:	68 b4 c8 02 c0       	push   0xc002c8b4
c001c3f5:	e8 47 6a ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c3fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3fe:	83 c4 0c             	add    esp,0xc
c001c401:	57                   	push   edi
c001c402:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c408:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c40b:	50                   	push   eax
c001c40c:	e8 26 e3 ff ff       	call   c001a737 <Krnl::getProcessEnvPair(Process*, int)>
c001c411:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c415:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c419:	68 73 cc 02 c0       	push   0xc002cc73
c001c41e:	e8 1e 6a ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c423:	83 c4 10             	add    esp,0x10
c001c426:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c429:	85 f6                	test   esi,esi
c001c42b:	75 47                	jne    c001c474 <sysCallGetEnv(regs*)+0xf5>
c001c42d:	83 ec 0c             	sub    esp,0xc
c001c430:	55                   	push   ebp
c001c431:	e8 52 43 fe ff       	call   c0000788 <strlen>
c001c436:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c439:	89 c3                	mov    ebx,eax
c001c43b:	e8 48 43 fe ff       	call   c0000788 <strlen>
c001c440:	5a                   	pop    edx
c001c441:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c445:	59                   	pop    ecx
c001c446:	50                   	push   eax
c001c447:	68 b7 c8 02 c0       	push   0xc002c8b7
c001c44c:	e8 f0 69 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c451:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c454:	e8 2f 43 fe ff       	call   c0000788 <strlen>
c001c459:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c45c:	89 c3                	mov    ebx,eax
c001c45e:	e8 25 43 fe ff       	call   c0000788 <strlen>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c46a:	83 c4 1c             	add    esp,0x1c
c001c46d:	31 d2                	xor    edx,edx
c001c46f:	5b                   	pop    ebx
c001c470:	5e                   	pop    esi
c001c471:	5f                   	pop    edi
c001c472:	5d                   	pop    ebp
c001c473:	c3                   	ret    
c001c474:	83 ec 0c             	sub    esp,0xc
c001c477:	68 8d cc 02 c0       	push   0xc002cc8d
c001c47c:	e8 c0 69 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c481:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c484:	58                   	pop    eax
c001c485:	5a                   	pop    edx
c001c486:	55                   	push   ebp
c001c487:	53                   	push   ebx
c001c488:	e8 9b 43 fe ff       	call   c0000828 <strcpy>
c001c48d:	59                   	pop    ecx
c001c48e:	5e                   	pop    esi
c001c48f:	68 c1 c8 02 c0       	push   0xc002c8c1
c001c494:	53                   	push   ebx
c001c495:	e8 ce 44 fe ff       	call   c0000968 <strcat>
c001c49a:	5d                   	pop    ebp
c001c49b:	58                   	pop    eax
c001c49c:	57                   	push   edi
c001c49d:	53                   	push   ebx
c001c49e:	e8 c5 44 fe ff       	call   c0000968 <strcat>
c001c4a3:	c7 04 24 a7 cc 02 c0 	mov    DWORD PTR [esp],0xc002cca7
c001c4aa:	e8 92 69 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c4af:	83 c4 10             	add    esp,0x10
c001c4b2:	e9 25 ff ff ff       	jmp    c001c3dc <sysCallGetEnv(regs*)+0x5d>

c001c4b7 <sysAppSettings(regs*)>:
c001c4b7:	57                   	push   edi
c001c4b8:	56                   	push   esi
c001c4b9:	56                   	push   esi
c001c4ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4be:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c4c1:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c4c7:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c4cc:	66 3d c0 09          	cmp    ax,0x9c0
c001c4d0:	75 2e                	jne    c001c500 <sysAppSettings(regs*)+0x49>
c001c4d2:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c4d8:	83 e0 1f             	and    eax,0x1f
c001c4db:	3c 01                	cmp    al,0x1
c001c4dd:	74 2c                	je     c001c50b <sysAppSettings(regs*)+0x54>
c001c4df:	3c 07                	cmp    al,0x7
c001c4e1:	0f 84 b3 00 00 00    	je     c001c59a <sysAppSettings(regs*)+0xe3>
c001c4e7:	84 c0                	test   al,al
c001c4e9:	0f 84 d2 00 00 00    	je     c001c5c1 <sysAppSettings(regs*)+0x10a>
c001c4ef:	3c 08                	cmp    al,0x8
c001c4f1:	74 63                	je     c001c556 <sysAppSettings(regs*)+0x9f>
c001c4f3:	59                   	pop    ecx
c001c4f4:	0f b6 c0             	movzx  eax,al
c001c4f7:	5e                   	pop    esi
c001c4f8:	05 e8 03 00 00       	add    eax,0x3e8
c001c4fd:	5f                   	pop    edi
c001c4fe:	99                   	cdq    
c001c4ff:	c3                   	ret    
c001c500:	b8 01 00 00 00       	mov    eax,0x1
c001c505:	59                   	pop    ecx
c001c506:	31 d2                	xor    edx,edx
c001c508:	5e                   	pop    esi
c001c509:	5f                   	pop    edi
c001c50a:	c3                   	ret    
c001c50b:	50                   	push   eax
c001c50c:	68 00 01 00 00       	push   0x100
c001c511:	6a 00                	push   0x0
c001c513:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c518:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c51b:	83 c0 0c             	add    eax,0xc
c001c51e:	50                   	push   eax
c001c51f:	e8 48 42 fe ff       	call   c000076c <memset>
c001c524:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c529:	b9 ff 00 00 00       	mov    ecx,0xff
c001c52e:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c531:	83 c7 0c             	add    edi,0xc
c001c534:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c536:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c53b:	5a                   	pop    edx
c001c53c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c53f:	59                   	pop    ecx
c001c540:	8d 50 0c             	lea    edx,[eax+0xc]
c001c543:	52                   	push   edx
c001c544:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c54a:	e8 c1 45 ff ff       	call   c0010b10 <VgaText::setTitle(char*)>
c001c54f:	83 c4 10             	add    esp,0x10
c001c552:	31 c0                	xor    eax,eax
c001c554:	eb af                	jmp    c001c505 <sysAppSettings(regs*)+0x4e>
c001c556:	83 ec 08             	sub    esp,0x8
c001c559:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c55f:	83 e0 0f             	and    eax,0xf
c001c562:	50                   	push   eax
c001c563:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c568:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c56b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c571:	e8 8c 45 ff ff       	call   c0010b02 <VgaText::setTitleColour(VgaColour)>
c001c576:	5f                   	pop    edi
c001c577:	58                   	pop    eax
c001c578:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c57e:	c1 e8 04             	shr    eax,0x4
c001c581:	83 e0 0f             	and    eax,0xf
c001c584:	50                   	push   eax
c001c585:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c58a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c58d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c593:	e8 5c 45 ff ff       	call   c0010af4 <VgaText::setTitleTextColour(VgaColour)>
c001c598:	eb b5                	jmp    c001c54f <sysAppSettings(regs*)+0x98>
c001c59a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c59f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5a2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c5a8:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c5ae:	c0 e8 06             	shr    al,0x6
c001c5b1:	83 e0 01             	and    eax,0x1
c001c5b4:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c5ba:	31 c0                	xor    eax,eax
c001c5bc:	e9 44 ff ff ff       	jmp    c001c505 <sysAppSettings(regs*)+0x4e>
c001c5c1:	b8 02 00 00 00       	mov    eax,0x2
c001c5c6:	e9 3a ff ff ff       	jmp    c001c505 <sysAppSettings(regs*)+0x4e>

c001c5cb <sysSetFatAttrib(regs*)>:
c001c5cb:	57                   	push   edi
c001c5cc:	56                   	push   esi
c001c5cd:	53                   	push   ebx
c001c5ce:	83 ec 1c             	sub    esp,0x1c
c001c5d1:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c5d5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c5d8:	68 14 01 00 00       	push   0x114
c001c5dd:	e8 c4 32 ff ff       	call   c000f8a6 <malloc>
c001c5e2:	83 c4 0c             	add    esp,0xc
c001c5e5:	89 c3                	mov    ebx,eax
c001c5e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5ec:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5ef:	57                   	push   edi
c001c5f0:	53                   	push   ebx
c001c5f1:	e8 aa 6d ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001c5f6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c5f9:	83 c4 0c             	add    esp,0xc
c001c5fc:	0f b6 d4             	movzx  edx,ah
c001c5ff:	0f b6 c0             	movzx  eax,al
c001c602:	52                   	push   edx
c001c603:	50                   	push   eax
c001c604:	53                   	push   ebx
c001c605:	e8 0c 70 ff ff       	call   c0013616 <File::chfatattr(unsigned char, unsigned char)>
c001c60a:	83 c4 10             	add    esp,0x10
c001c60d:	85 db                	test   ebx,ebx
c001c60f:	74 14                	je     c001c625 <sysSetFatAttrib(regs*)+0x5a>
c001c611:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c615:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c617:	83 ec 0c             	sub    esp,0xc
c001c61a:	53                   	push   ebx
c001c61b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c625:	85 c0                	test   eax,eax
c001c627:	0f 95 c0             	setne  al
c001c62a:	31 d2                	xor    edx,edx
c001c62c:	0f b6 c0             	movzx  eax,al
c001c62f:	f7 d8                	neg    eax
c001c631:	83 d2 00             	adc    edx,0x0
c001c634:	83 c4 10             	add    esp,0x10
c001c637:	f7 da                	neg    edx
c001c639:	5b                   	pop    ebx
c001c63a:	5e                   	pop    esi
c001c63b:	5f                   	pop    edi
c001c63c:	c3                   	ret    

c001c63d <sysPipe(regs*)>:
c001c63d:	57                   	push   edi
c001c63e:	56                   	push   esi
c001c63f:	53                   	push   ebx
c001c640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c644:	83 ec 0c             	sub    esp,0xc
c001c647:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c64a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c64d:	6a 20                	push   0x20
c001c64f:	e8 52 32 ff ff       	call   c000f8a6 <malloc>
c001c654:	89 c3                	mov    ebx,eax
c001c656:	58                   	pop    eax
c001c657:	5a                   	pop    edx
c001c658:	68 00 50 00 00       	push   0x5000
c001c65d:	53                   	push   ebx
c001c65e:	e8 55 3e ff ff       	call   c00104b8 <Pipe::Pipe(int)>
c001c663:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c666:	e8 85 4f ff ff       	call   c00115f0 <UnixFile::getFileDescriptor()>
c001c66b:	89 07                	mov    DWORD PTR [edi],eax
c001c66d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c670:	e8 7b 4f ff ff       	call   c00115f0 <UnixFile::getFileDescriptor()>
c001c675:	83 c4 10             	add    esp,0x10
c001c678:	89 06                	mov    DWORD PTR [esi],eax
c001c67a:	31 d2                	xor    edx,edx
c001c67c:	5b                   	pop    ebx
c001c67d:	31 c0                	xor    eax,eax
c001c67f:	5e                   	pop    esi
c001c680:	5f                   	pop    edi
c001c681:	c3                   	ret    

c001c682 <sysGetUnixTime(regs*)>:
c001c682:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001c687:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c68d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c691:	e9 fc 76 ff ff       	jmp    c0013d92 <Clock::timeInSecondsLocal()>

c001c696 <string_ends_with(char const*, char const*)>:
c001c696:	57                   	push   edi
c001c697:	56                   	push   esi
c001c698:	53                   	push   ebx
c001c699:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c69d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c6a1:	83 ec 0c             	sub    esp,0xc
c001c6a4:	53                   	push   ebx
c001c6a5:	e8 de 40 fe ff       	call   c0000788 <strlen>
c001c6aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6ad:	89 c6                	mov    esi,eax
c001c6af:	e8 d4 40 fe ff       	call   c0000788 <strlen>
c001c6b4:	83 c4 10             	add    esp,0x10
c001c6b7:	39 c6                	cmp    esi,eax
c001c6b9:	7d 06                	jge    c001c6c1 <string_ends_with(char const*, char const*)+0x2b>
c001c6bb:	5b                   	pop    ebx
c001c6bc:	31 c0                	xor    eax,eax
c001c6be:	5e                   	pop    esi
c001c6bf:	5f                   	pop    edi
c001c6c0:	c3                   	ret    
c001c6c1:	83 ec 08             	sub    esp,0x8
c001c6c4:	29 c6                	sub    esi,eax
c001c6c6:	57                   	push   edi
c001c6c7:	01 f3                	add    ebx,esi
c001c6c9:	53                   	push   ebx
c001c6ca:	e8 e5 41 fe ff       	call   c00008b4 <strcmp>
c001c6cf:	83 c4 10             	add    esp,0x10
c001c6d2:	85 c0                	test   eax,eax
c001c6d4:	5b                   	pop    ebx
c001c6d5:	0f 94 c0             	sete   al
c001c6d8:	5e                   	pop    esi
c001c6d9:	0f b6 c0             	movzx  eax,al
c001c6dc:	5f                   	pop    edi
c001c6dd:	c3                   	ret    

c001c6de <sysCallOpen(regs*)>:
c001c6de:	56                   	push   esi
c001c6df:	53                   	push   ebx
c001c6e0:	81 ec 04 01 00 00    	sub    esp,0x104
c001c6e6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c6ed:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c6f0:	85 c9                	test   ecx,ecx
c001c6f2:	0f 84 b3 00 00 00    	je     c001c7ab <sysCallOpen(regs*)+0xcd>
c001c6f8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c6fb:	85 c0                	test   eax,eax
c001c6fd:	0f 84 a8 00 00 00    	je     c001c7ab <sysCallOpen(regs*)+0xcd>
c001c703:	52                   	push   edx
c001c704:	68 c3 c8 02 c0       	push   0xc002c8c3
c001c709:	50                   	push   eax
c001c70a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c70e:	56                   	push   esi
c001c70f:	e8 e2 6a ff ff       	call   c00131f6 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c714:	89 34 24             	mov    DWORD PTR [esp],esi
c001c717:	e8 6c 40 fe ff       	call   c0000788 <strlen>
c001c71c:	83 c4 10             	add    esp,0x10
c001c71f:	48                   	dec    eax
c001c720:	74 1d                	je     c001c73f <sysCallOpen(regs*)+0x61>
c001c722:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c725:	eb 0f                	jmp    c001c736 <sysCallOpen(regs*)+0x58>
c001c727:	80 fa 3a             	cmp    dl,0x3a
c001c72a:	74 0f                	je     c001c73b <sysCallOpen(regs*)+0x5d>
c001c72c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c730:	48                   	dec    eax
c001c731:	74 0c                	je     c001c73f <sysCallOpen(regs*)+0x61>
c001c733:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c736:	80 fa 2e             	cmp    dl,0x2e
c001c739:	75 ec                	jne    c001c727 <sysCallOpen(regs*)+0x49>
c001c73b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c73f:	83 ec 08             	sub    esp,0x8
c001c742:	68 c7 c8 02 c0       	push   0xc002c8c7
c001c747:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c74a:	e8 47 ff ff ff       	call   c001c696 <string_ends_with(char const*, char const*)>
c001c74f:	83 c4 10             	add    esp,0x10
c001c752:	85 c0                	test   eax,eax
c001c754:	75 17                	jne    c001c76d <sysCallOpen(regs*)+0x8f>
c001c756:	83 ec 08             	sub    esp,0x8
c001c759:	68 e8 c8 02 c0       	push   0xc002c8e8
c001c75e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c761:	e8 30 ff ff ff       	call   c001c696 <string_ends_with(char const*, char const*)>
c001c766:	83 c4 10             	add    esp,0x10
c001c769:	85 c0                	test   eax,eax
c001c76b:	74 51                	je     c001c7be <sysCallOpen(regs*)+0xe0>
c001c76d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c770:	83 ec 08             	sub    esp,0x8
c001c773:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c779:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c780:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c783:	ff 30                	push   DWORD PTR [eax]
c001c785:	68 cc c8 02 c0       	push   0xc002c8cc
c001c78a:	e8 b2 66 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c78f:	c7 04 24 db c8 02 c0 	mov    DWORD PTR [esp],0xc002c8db
c001c796:	e8 a6 66 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001c79b:	83 c4 10             	add    esp,0x10
c001c79e:	81 c4 04 01 00 00    	add    esp,0x104
c001c7a4:	31 c0                	xor    eax,eax
c001c7a6:	31 d2                	xor    edx,edx
c001c7a8:	5b                   	pop    ebx
c001c7a9:	5e                   	pop    esi
c001c7aa:	c3                   	ret    
c001c7ab:	81 c4 04 01 00 00    	add    esp,0x104
c001c7b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c7b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c7bb:	5b                   	pop    ebx
c001c7bc:	5e                   	pop    esi
c001c7bd:	c3                   	ret    
c001c7be:	83 ec 08             	sub    esp,0x8
c001c7c1:	68 c8 c8 02 c0       	push   0xc002c8c8
c001c7c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7c9:	e8 e6 40 fe ff       	call   c00008b4 <strcmp>
c001c7ce:	83 c4 10             	add    esp,0x10
c001c7d1:	85 c0                	test   eax,eax
c001c7d3:	74 98                	je     c001c76d <sysCallOpen(regs*)+0x8f>
c001c7d5:	83 ec 08             	sub    esp,0x8
c001c7d8:	68 c7 c8 02 c0       	push   0xc002c8c7
c001c7dd:	56                   	push   esi
c001c7de:	e8 b3 fe ff ff       	call   c001c696 <string_ends_with(char const*, char const*)>
c001c7e3:	83 c4 10             	add    esp,0x10
c001c7e6:	85 c0                	test   eax,eax
c001c7e8:	75 83                	jne    c001c76d <sysCallOpen(regs*)+0x8f>
c001c7ea:	83 ec 08             	sub    esp,0x8
c001c7ed:	68 ed c8 02 c0       	push   0xc002c8ed
c001c7f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7f5:	e8 9c fe ff ff       	call   c001c696 <string_ends_with(char const*, char const*)>
c001c7fa:	83 c4 10             	add    esp,0x10
c001c7fd:	85 c0                	test   eax,eax
c001c7ff:	0f 85 d9 00 00 00    	jne    c001c8de <sysCallOpen(regs*)+0x200>
c001c805:	83 ec 08             	sub    esp,0x8
c001c808:	68 f2 c8 02 c0       	push   0xc002c8f2
c001c80d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c810:	e8 81 fe ff ff       	call   c001c696 <string_ends_with(char const*, char const*)>
c001c815:	83 c4 10             	add    esp,0x10
c001c818:	85 c0                	test   eax,eax
c001c81a:	0f 85 be 00 00 00    	jne    c001c8de <sysCallOpen(regs*)+0x200>
c001c820:	83 ec 08             	sub    esp,0x8
c001c823:	68 ee c8 02 c0       	push   0xc002c8ee
c001c828:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c82b:	e8 84 40 fe ff       	call   c00008b4 <strcmp>
c001c830:	83 c4 10             	add    esp,0x10
c001c833:	85 c0                	test   eax,eax
c001c835:	0f 84 a3 00 00 00    	je     c001c8de <sysCallOpen(regs*)+0x200>
c001c83b:	83 ec 08             	sub    esp,0x8
c001c83e:	68 ed c8 02 c0       	push   0xc002c8ed
c001c843:	56                   	push   esi
c001c844:	e8 4d fe ff ff       	call   c001c696 <string_ends_with(char const*, char const*)>
c001c849:	83 c4 10             	add    esp,0x10
c001c84c:	85 c0                	test   eax,eax
c001c84e:	0f 85 8a 00 00 00    	jne    c001c8de <sysCallOpen(regs*)+0x200>
c001c854:	83 ec 0c             	sub    esp,0xc
c001c857:	68 14 01 00 00       	push   0x114
c001c85c:	e8 45 30 ff ff       	call   c000f8a6 <malloc>
c001c861:	83 c4 0c             	add    esp,0xc
c001c864:	89 c6                	mov    esi,eax
c001c866:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c86b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c86e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c871:	56                   	push   esi
c001c872:	e8 29 6b ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001c877:	83 c4 10             	add    esp,0x10
c001c87a:	85 f6                	test   esi,esi
c001c87c:	0f 84 29 ff ff ff    	je     c001c7ab <sysCallOpen(regs*)+0xcd>
c001c882:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c885:	0f b6 c2             	movzx  eax,dl
c001c888:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c88b:	89 d0                	mov    eax,edx
c001c88d:	83 e0 01             	and    eax,0x1
c001c890:	f6 c2 02             	test   dl,0x2
c001c893:	74 03                	je     c001c898 <sysCallOpen(regs*)+0x1ba>
c001c895:	83 c8 02             	or     eax,0x2
c001c898:	f6 c2 04             	test   dl,0x4
c001c89b:	74 03                	je     c001c8a0 <sysCallOpen(regs*)+0x1c2>
c001c89d:	83 c8 04             	or     eax,0x4
c001c8a0:	f6 c2 08             	test   dl,0x8
c001c8a3:	74 03                	je     c001c8a8 <sysCallOpen(regs*)+0x1ca>
c001c8a5:	83 c8 0a             	or     eax,0xa
c001c8a8:	83 e2 10             	and    edx,0x10
c001c8ab:	74 03                	je     c001c8b0 <sysCallOpen(regs*)+0x1d2>
c001c8ad:	83 c8 12             	or     eax,0x12
c001c8b0:	83 ec 08             	sub    esp,0x8
c001c8b3:	50                   	push   eax
c001c8b4:	56                   	push   esi
c001c8b5:	e8 4a 6b ff ff       	call   c0013404 <File::open(FileOpenMode)>
c001c8ba:	83 c4 10             	add    esp,0x10
c001c8bd:	85 c0                	test   eax,eax
c001c8bf:	0f 85 e6 fe ff ff    	jne    c001c7ab <sysCallOpen(regs*)+0xcd>
c001c8c5:	83 ec 0c             	sub    esp,0xc
c001c8c8:	56                   	push   esi
c001c8c9:	e8 22 4d ff ff       	call   c00115f0 <UnixFile::getFileDescriptor()>
c001c8ce:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c8d1:	89 02                	mov    DWORD PTR [edx],eax
c001c8d3:	c1 f8 1f             	sar    eax,0x1f
c001c8d6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8d9:	e9 bd fe ff ff       	jmp    c001c79b <sysCallOpen(regs*)+0xbd>
c001c8de:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8e1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c8e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8ee:	e9 ab fe ff ff       	jmp    c001c79e <sysCallOpen(regs*)+0xc0>

c001c8f3 <Sys::loadSyscalls()>:
c001c8f3:	c7 05 e0 19 03 c0 e3 b9 01 c0 	mov    DWORD PTR ds:0xc00319e0,0xc001b9e3
c001c8fd:	c7 05 e4 19 03 c0 48 b5 01 c0 	mov    DWORD PTR ds:0xc00319e4,0xc001b548
c001c907:	c7 05 e8 19 03 c0 36 b7 01 c0 	mov    DWORD PTR ds:0xc00319e8,0xc001b736
c001c911:	c7 05 ec 19 03 c0 19 b9 01 c0 	mov    DWORD PTR ds:0xc00319ec,0xc001b919
c001c91b:	c7 05 f0 19 03 c0 ce b6 01 c0 	mov    DWORD PTR ds:0xc00319f0,0xc001b6ce
c001c925:	c7 05 f4 19 03 c0 7f b5 01 c0 	mov    DWORD PTR ds:0xc00319f4,0xc001b57f
c001c92f:	c7 05 f8 19 03 c0 60 b5 01 c0 	mov    DWORD PTR ds:0xc00319f8,0xc001b560
c001c939:	c7 05 fc 19 03 c0 8b b7 01 c0 	mov    DWORD PTR ds:0xc00319fc,0xc001b78b
c001c943:	c7 05 04 1a 03 c0 1e bf 01 c0 	mov    DWORD PTR ds:0xc0031a04,0xc001bf1e
c001c94d:	c7 05 00 1a 03 c0 de c6 01 c0 	mov    DWORD PTR ds:0xc0031a00,0xc001c6de
c001c957:	c7 05 08 1a 03 c0 a6 bf 01 c0 	mov    DWORD PTR ds:0xc0031a08,0xc001bfa6
c001c961:	c7 05 0c 1a 03 c0 0d bc 01 c0 	mov    DWORD PTR ds:0xc0031a0c,0xc001bc0d
c001c96b:	c7 05 10 1a 03 c0 29 ba 01 c0 	mov    DWORD PTR ds:0xc0031a10,0xc001ba29
c001c975:	c7 05 14 1a 03 c0 2e ba 01 c0 	mov    DWORD PTR ds:0xc0031a14,0xc001ba2e
c001c97f:	c7 05 18 1a 03 c0 81 c0 01 c0 	mov    DWORD PTR ds:0xc0031a18,0xc001c081
c001c989:	c7 05 1c 1a 03 c0 1b c0 01 c0 	mov    DWORD PTR ds:0xc0031a1c,0xc001c01b
c001c993:	c7 05 20 1a 03 c0 f5 bc 01 c0 	mov    DWORD PTR ds:0xc0031a20,0xc001bcf5
c001c99d:	c7 05 24 1a 03 c0 5e bd 01 c0 	mov    DWORD PTR ds:0xc0031a24,0xc001bd5e
c001c9a7:	c7 05 28 1a 03 c0 db bd 01 c0 	mov    DWORD PTR ds:0xc0031a28,0xc001bddb
c001c9b1:	c7 05 2c 1a 03 c0 33 ba 01 c0 	mov    DWORD PTR ds:0xc0031a2c,0xc001ba33
c001c9bb:	c7 05 30 1a 03 c0 f1 c0 01 c0 	mov    DWORD PTR ds:0xc0031a30,0xc001c0f1
c001c9c5:	c7 05 34 1a 03 c0 0b c1 01 c0 	mov    DWORD PTR ds:0xc0031a34,0xc001c10b
c001c9cf:	c7 05 38 1a 03 c0 0b c1 01 c0 	mov    DWORD PTR ds:0xc0031a38,0xc001c10b
c001c9d9:	c7 05 3c 1a 03 c0 4c c1 01 c0 	mov    DWORD PTR ds:0xc0031a3c,0xc001c14c
c001c9e3:	c7 05 40 1a 03 c0 b0 c1 01 c0 	mov    DWORD PTR ds:0xc0031a40,0xc001c1b0
c001c9ed:	c7 05 44 1a 03 c0 df bb 01 c0 	mov    DWORD PTR ds:0xc0031a44,0xc001bbdf
c001c9f7:	c7 05 48 1a 03 c0 14 c2 01 c0 	mov    DWORD PTR ds:0xc0031a48,0xc001c214
c001ca01:	c7 05 4c 1a 03 c0 9c bb 01 c0 	mov    DWORD PTR ds:0xc0031a4c,0xc001bb9c
c001ca0b:	c7 05 50 1a 03 c0 60 c2 01 c0 	mov    DWORD PTR ds:0xc0031a50,0xc001c260
c001ca15:	c7 05 54 1a 03 c0 9b bc 01 c0 	mov    DWORD PTR ds:0xc0031a54,0xc001bc9b
c001ca1f:	c7 05 58 1a 03 c0 e3 c2 01 c0 	mov    DWORD PTR ds:0xc0031a58,0xc001c2e3
c001ca29:	c7 05 5c 1a 03 c0 5e be 01 c0 	mov    DWORD PTR ds:0xc0031a5c,0xc001be5e
c001ca33:	c7 05 60 1a 03 c0 0a c3 01 c0 	mov    DWORD PTR ds:0xc0031a60,0xc001c30a
c001ca3d:	c7 05 64 1a 03 c0 7f c3 01 c0 	mov    DWORD PTR ds:0xc0031a64,0xc001c37f
c001ca47:	c7 05 68 1a 03 c0 b7 c4 01 c0 	mov    DWORD PTR ds:0xc0031a68,0xc001c4b7
c001ca51:	c7 05 6c 1a 03 c0 3d ba 01 c0 	mov    DWORD PTR ds:0xc0031a6c,0xc001ba3d
c001ca5b:	c7 05 70 1a 03 c0 a7 ba 01 c0 	mov    DWORD PTR ds:0xc0031a70,0xc001baa7
c001ca65:	c7 05 74 1a 03 c0 ed ba 01 c0 	mov    DWORD PTR ds:0xc0031a74,0xc001baed
c001ca6f:	c7 05 78 1a 03 c0 cb c5 01 c0 	mov    DWORD PTR ds:0xc0031a78,0xc001c5cb
c001ca79:	c7 05 7c 1a 03 c0 26 c1 01 c0 	mov    DWORD PTR ds:0xc0031a7c,0xc001c126
c001ca83:	c7 05 80 1a 03 c0 3e bb 01 c0 	mov    DWORD PTR ds:0xc0031a80,0xc001bb3e
c001ca8d:	c7 05 84 1a 03 c0 3d c6 01 c0 	mov    DWORD PTR ds:0xc0031a84,0xc001c63d
c001ca97:	c7 05 88 1a 03 c0 82 c6 01 c0 	mov    DWORD PTR ds:0xc0031a88,0xc001c682
c001caa1:	c7 05 8c 1a 03 c0 26 b6 01 c0 	mov    DWORD PTR ds:0xc0031a8c,0xc001b626
c001caab:	c7 05 90 1a 03 c0 a7 b7 01 c0 	mov    DWORD PTR ds:0xc0031a90,0xc001b7a7
c001cab5:	c7 05 94 1a 03 c0 cf b8 01 c0 	mov    DWORD PTR ds:0xc0031a94,0xc001b8cf
c001cabf:	c7 05 98 1a 03 c0 12 b5 01 c0 	mov    DWORD PTR ds:0xc0031a98,0xc001b512
c001cac9:	c7 05 9c 1a 03 c0 81 b9 01 c0 	mov    DWORD PTR ds:0xc0031a9c,0xc001b981
c001cad3:	c7 05 a0 1a 03 c0 8b b5 01 c0 	mov    DWORD PTR ds:0xc0031aa0,0xc001b58b
c001cadd:	c7 05 a4 1a 03 c0 a2 b5 01 c0 	mov    DWORD PTR ds:0xc0031aa4,0xc001b5a2
c001cae7:	c3                   	ret    

c001cae8 <Sys::systemCall(regs*, void*)>:
c001cae8:	53                   	push   ebx
c001cae9:	83 ec 08             	sub    esp,0x8
c001caec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caf0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001caf3:	83 f8 7f             	cmp    eax,0x7f
c001caf6:	77 16                	ja     c001cb0e <Sys::systemCall(regs*, void*)+0x26>
c001caf8:	8b 14 85 e0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce620]
c001caff:	85 d2                	test   edx,edx
c001cb01:	74 0b                	je     c001cb0e <Sys::systemCall(regs*, void*)+0x26>
c001cb03:	83 ec 0c             	sub    esp,0xc
c001cb06:	53                   	push   ebx
c001cb07:	ff d2                	call   edx
c001cb09:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cb0c:	eb 0d                	jmp    c001cb1b <Sys::systemCall(regs*, void*)+0x33>
c001cb0e:	52                   	push   edx
c001cb0f:	52                   	push   edx
c001cb10:	50                   	push   eax
c001cb11:	68 f7 c8 02 c0       	push   0xc002c8f7
c001cb16:	e8 26 63 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001cb1b:	83 c4 10             	add    esp,0x10
c001cb1e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cb23:	31 d2                	xor    edx,edx
c001cb25:	83 c4 08             	add    esp,0x8
c001cb28:	5b                   	pop    ebx
c001cb29:	c3                   	ret    

c001cb2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cb2a:	55                   	push   ebp
c001cb2b:	57                   	push   edi
c001cb2c:	56                   	push   esi
c001cb2d:	53                   	push   ebx
c001cb2e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cb34:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cb3b:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cb42:	85 c0                	test   eax,eax
c001cb44:	0f 95 c1             	setne  cl
c001cb47:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cb4f:	0f 94 c2             	sete   dl
c001cb52:	84 d1                	test   cl,dl
c001cb54:	74 23                	je     c001cb79 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb56:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cb5c:	74 1b                	je     c001cb79 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb5e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb64:	89 da                	mov    edx,ebx
c001cb66:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cb6c:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cb72:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cb79:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cb80:	05 ff 0f 00 00       	add    eax,0xfff
c001cb85:	83 ec 0c             	sub    esp,0xc
c001cb88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb8c:	8d aa ff 0f 00 00    	lea    ebp,[edx+0xfff]
c001cb92:	c1 e8 0c             	shr    eax,0xc
c001cb95:	89 ee                	mov    esi,ebp
c001cb97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb9b:	c1 ee 0c             	shr    esi,0xc
c001cb9e:	6a 01                	push   0x1
c001cba0:	e8 96 4e ff ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c001cba5:	89 c7                	mov    edi,eax
c001cba7:	58                   	pop    eax
c001cba8:	5a                   	pop    edx
c001cba9:	56                   	push   esi
c001cbaa:	68 7b c9 02 c0       	push   0xc002c97b
c001cbaf:	e8 8d 62 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001cbb4:	59                   	pop    ecx
c001cbb5:	58                   	pop    eax
c001cbb6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cbba:	68 8d c9 02 c0       	push   0xc002c98d
c001cbbf:	e8 7d 62 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001cbc4:	83 c4 10             	add    esp,0x10
c001cbc7:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001cbcd:	0f 86 2f 01 00 00    	jbe    c001cd02 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d8>
c001cbd3:	c1 e6 0c             	shl    esi,0xc
c001cbd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbd9:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001cbdc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbe0:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001cbe7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cbea:	01 dd                	add    ebp,ebx
c001cbec:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c001cbef:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cbf3:	0f 84 06 01 00 00    	je     c001ccff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d5>
c001cbf9:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001cbff:	76 05                	jbe    c001cc06 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001cc01:	bd 00 10 00 00       	mov    ebp,0x1000
c001cc06:	83 ec 0c             	sub    esp,0xc
c001cc09:	31 d2                	xor    edx,edx
c001cc0b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cc12:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc14:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cc18:	50                   	push   eax
c001cc19:	8d 74 24 30          	lea    esi,[esp+0x30]
c001cc1d:	56                   	push   esi
c001cc1e:	52                   	push   edx
c001cc1f:	55                   	push   ebp
c001cc20:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cc27:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc2a:	83 c4 20             	add    esp,0x20
c001cc2d:	85 c0                	test   eax,eax
c001cc2f:	74 0a                	je     c001cc3b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001cc31:	53                   	push   ebx
c001cc32:	53                   	push   ebx
c001cc33:	50                   	push   eax
c001cc34:	68 9f c9 02 c0       	push   0xc002c99f
c001cc39:	eb 0f                	jmp    c001cc4a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001cc3b:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001cc3f:	74 20                	je     c001cc61 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001cc41:	51                   	push   ecx
c001cc42:	51                   	push   ecx
c001cc43:	6a 00                	push   0x0
c001cc45:	68 ca c9 02 c0       	push   0xc002c9ca
c001cc4a:	e8 f2 61 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001cc4f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc52:	e8 a4 52 ff ff       	call   c0011efb <Virt::freeKernelVirtualPages(unsigned long)>
c001cc57:	83 c4 10             	add    esp,0x10
c001cc5a:	31 c0                	xor    eax,eax
c001cc5c:	e9 66 01 00 00       	jmp    c001cdc7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29d>
c001cc61:	fa                   	cli    
c001cc62:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001cc68:	e8 a5 32 ff ff       	call   c000ff12 <Phys::allocatePage()>
c001cc6d:	6a 07                	push   0x7
c001cc6f:	89 c5                	mov    ebp,eax
c001cc71:	57                   	push   edi
c001cc72:	50                   	push   eax
c001cc73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc78:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc7b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc81:	e8 ec 55 ff ff       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cc86:	83 c4 0c             	add    esp,0xc
c001cc89:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cc90:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc96:	6a 00                	push   0x0
c001cc98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc9d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cca0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cca6:	e8 21 54 ff ff       	call   c00120cc <VAS::mapOtherVASIn(bool, VAS*)>
c001ccab:	58                   	pop    eax
c001ccac:	5a                   	pop    edx
c001ccad:	68 07 0c 00 00       	push   0xc07
c001ccb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ccb6:	55                   	push   ebp
c001ccb7:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ccbe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccc4:	6a 00                	push   0x0
c001ccc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cccb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ccce:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccd4:	e8 55 59 ff ff       	call   c001262e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ccd9:	b9 00 10 00 00       	mov    ecx,0x1000
c001ccde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cce0:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001cce5:	83 c4 20             	add    esp,0x20
c001cce8:	48                   	dec    eax
c001cce9:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ccee:	85 c0                	test   eax,eax
c001ccf0:	75 01                	jne    c001ccf3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1c9>
c001ccf2:	fb                   	sti    
c001ccf3:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001ccfa:	e9 e1 fe ff ff       	jmp    c001cbe0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001ccff:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001cd02:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cd0a:	0f 86 a9 00 00 00    	jbe    c001cdb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x28f>
c001cd10:	fa                   	cli    
c001cd11:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001cd17:	51                   	push   ecx
c001cd18:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cd1f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd25:	6a 00                	push   0x0
c001cd27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd2f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd35:	e8 92 53 ff ff       	call   c00120cc <VAS::mapOtherVASIn(bool, VAS*)>
c001cd3a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cd3e:	c1 e6 0c             	shl    esi,0xc
c001cd41:	01 de                	add    esi,ebx
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	39 de                	cmp    esi,ebx
c001cd48:	74 61                	je     c001cdab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c001cd4a:	e8 c3 31 ff ff       	call   c000ff12 <Phys::allocatePage()>
c001cd4f:	6a 07                	push   0x7
c001cd51:	89 c5                	mov    ebp,eax
c001cd53:	57                   	push   edi
c001cd54:	50                   	push   eax
c001cd55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd5d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd63:	e8 0a 55 ff ff       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd68:	58                   	pop    eax
c001cd69:	5a                   	pop    edx
c001cd6a:	68 07 0c 00 00       	push   0xc07
c001cd6f:	53                   	push   ebx
c001cd70:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd76:	55                   	push   ebp
c001cd77:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cd7e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd84:	6a 00                	push   0x0
c001cd86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd8b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd8e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd94:	e8 95 58 ff ff       	call   c001262e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cd99:	83 c4 1c             	add    esp,0x1c
c001cd9c:	68 00 10 00 00       	push   0x1000
c001cda1:	6a 00                	push   0x0
c001cda3:	57                   	push   edi
c001cda4:	e8 c3 39 fe ff       	call   c000076c <memset>
c001cda9:	eb 98                	jmp    c001cd43 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x219>
c001cdab:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001cdb0:	48                   	dec    eax
c001cdb1:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001cdb6:	75 01                	jne    c001cdb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x28f>
c001cdb8:	fb                   	sti    
c001cdb9:	83 ec 0c             	sub    esp,0xc
c001cdbc:	57                   	push   edi
c001cdbd:	e8 39 51 ff ff       	call   c0011efb <Virt::freeKernelVirtualPages(unsigned long)>
c001cdc2:	83 c4 10             	add    esp,0x10
c001cdc5:	b0 01                	mov    al,0x1
c001cdc7:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cdcd:	5b                   	pop    ebx
c001cdce:	5e                   	pop    esi
c001cdcf:	5f                   	pop    edi
c001cdd0:	5d                   	pop    ebp
c001cdd1:	c3                   	ret    

c001cdd2 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cdd2:	55                   	push   ebp
c001cdd3:	57                   	push   edi
c001cdd4:	56                   	push   esi
c001cdd5:	53                   	push   ebx
c001cdd6:	83 ec 48             	sub    esp,0x48
c001cdd9:	68 14 01 00 00       	push   0x114
c001cdde:	e8 c3 2a ff ff       	call   c000f8a6 <malloc>
c001cde3:	83 c4 0c             	add    esp,0xc
c001cde6:	89 c6                	mov    esi,eax
c001cde8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cdec:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cdf0:	50                   	push   eax
c001cdf1:	e8 aa 65 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001cdf6:	58                   	pop    eax
c001cdf7:	5a                   	pop    edx
c001cdf8:	6a 01                	push   0x1
c001cdfa:	56                   	push   esi
c001cdfb:	e8 04 66 ff ff       	call   c0013404 <File::open(FileOpenMode)>
c001ce00:	83 c4 10             	add    esp,0x10
c001ce03:	85 c0                	test   eax,eax
c001ce05:	0f 85 47 01 00 00    	jne    c001cf52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce0b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ce13:	83 ec 0c             	sub    esp,0xc
c001ce16:	6a 34                	push   0x34
c001ce18:	e8 89 2a ff ff       	call   c000f8a6 <malloc>
c001ce1d:	89 c3                	mov    ebx,eax
c001ce1f:	58                   	pop    eax
c001ce20:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce22:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ce26:	57                   	push   edi
c001ce27:	53                   	push   ebx
c001ce28:	6a 00                	push   0x0
c001ce2a:	6a 34                	push   0x34
c001ce2c:	56                   	push   esi
c001ce2d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce30:	83 c4 20             	add    esp,0x20
c001ce33:	85 c0                	test   eax,eax
c001ce35:	0f 85 17 01 00 00    	jne    c001cf52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce3b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ce41:	0f 85 0b 01 00 00    	jne    c001cf52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ce4a:	85 c0                	test   eax,eax
c001ce4c:	0f 84 00 01 00 00    	je     c001cf52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce52:	31 d2                	xor    edx,edx
c001ce54:	55                   	push   ebp
c001ce55:	52                   	push   edx
c001ce56:	50                   	push   eax
c001ce57:	56                   	push   esi
c001ce58:	e8 65 66 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001ce5d:	83 c4 10             	add    esp,0x10
c001ce60:	85 c0                	test   eax,eax
c001ce62:	0f 85 ea 00 00 00    	jne    c001cf52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce68:	83 ec 0c             	sub    esp,0xc
c001ce6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ce6e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ce76:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce7a:	0f af c2             	imul   eax,edx
c001ce7d:	50                   	push   eax
c001ce7e:	e8 23 2a ff ff       	call   c000f8a6 <malloc>
c001ce83:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce89:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce90:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce94:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce98:	0f af c2             	imul   eax,edx
c001ce9b:	99                   	cdq    
c001ce9c:	52                   	push   edx
c001ce9d:	50                   	push   eax
c001ce9e:	56                   	push   esi
c001ce9f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cea2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cea5:	83 c4 20             	add    esp,0x20
c001cea8:	85 c0                	test   eax,eax
c001ceaa:	0f 84 a2 00 00 00    	je     c001cf52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ceb0:	31 d2                	xor    edx,edx
c001ceb2:	51                   	push   ecx
c001ceb3:	52                   	push   edx
c001ceb4:	50                   	push   eax
c001ceb5:	56                   	push   esi
c001ceb6:	e8 07 66 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001cebb:	83 c4 10             	add    esp,0x10
c001cebe:	85 c0                	test   eax,eax
c001cec0:	0f 85 8c 00 00 00    	jne    c001cf52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cec6:	83 ec 0c             	sub    esp,0xc
c001cec9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cecd:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ced1:	31 ed                	xor    ebp,ebp
c001ced3:	0f af c2             	imul   eax,edx
c001ced6:	50                   	push   eax
c001ced7:	e8 ca 29 ff ff       	call   c000f8a6 <malloc>
c001cedc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cede:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cee2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cee5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cee9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ceed:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cef1:	0f af c2             	imul   eax,edx
c001cef4:	99                   	cdq    
c001cef5:	52                   	push   edx
c001cef6:	50                   	push   eax
c001cef7:	56                   	push   esi
c001cef8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cefb:	83 c4 20             	add    esp,0x20
c001cefe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cf06:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cf0a:	0f 86 80 00 00 00    	jbe    c001cf90 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cf10:	0f b7 fd             	movzx  edi,bp
c001cf13:	c1 e7 05             	shl    edi,0x5
c001cf16:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cf1a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cf1d:	75 6b                	jne    c001cf8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf1f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cf22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf26:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cf29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf2d:	52                   	push   edx
c001cf2e:	31 d2                	xor    edx,edx
c001cf30:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cf33:	52                   	push   edx
c001cf34:	50                   	push   eax
c001cf35:	56                   	push   esi
c001cf36:	e8 87 65 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001cf3b:	83 c4 10             	add    esp,0x10
c001cf3e:	85 c0                	test   eax,eax
c001cf40:	74 17                	je     c001cf59 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cf42:	83 ec 0c             	sub    esp,0xc
c001cf45:	68 f6 c9 02 c0       	push   0xc002c9f6
c001cf4a:	e8 f2 5e ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001cf4f:	83 c4 10             	add    esp,0x10
c001cf52:	31 c0                	xor    eax,eax
c001cf54:	e9 87 00 00 00       	jmp    c001cfe0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cf59:	83 ec 0c             	sub    esp,0xc
c001cf5c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cf5f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cf62:	50                   	push   eax
c001cf63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf6b:	56                   	push   esi
c001cf6c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cf70:	e8 b5 fb ff ff       	call   c001cb2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cf75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf79:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cf7d:	83 c4 20             	add    esp,0x20
c001cf80:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cf84:	73 04                	jae    c001cf8a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf8a:	45                   	inc    ebp
c001cf8b:	e9 76 ff ff ff       	jmp    c001cf06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cf90:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cf94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf9c:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cfa2:	83 ec 0c             	sub    esp,0xc
c001cfa5:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cfab:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cfb0:	05 00 10 00 00       	add    eax,0x1000
c001cfb5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cfb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfbc:	e8 f5 28 ff ff       	call   c000f8b6 <free>
c001cfc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfc4:	e8 ed 28 ff ff       	call   c000f8b6 <free>
c001cfc9:	58                   	pop    eax
c001cfca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfce:	e8 e3 28 ff ff       	call   c000f8b6 <free>
c001cfd3:	89 34 24             	mov    DWORD PTR [esp],esi
c001cfd6:	e8 87 64 ff ff       	call   c0013462 <File::close()>
c001cfdb:	83 c4 10             	add    esp,0x10
c001cfde:	b0 01                	mov    al,0x1
c001cfe0:	83 c4 3c             	add    esp,0x3c
c001cfe3:	5b                   	pop    ebx
c001cfe4:	5e                   	pop    esi
c001cfe5:	5f                   	pop    edi
c001cfe6:	5d                   	pop    ebp
c001cfe7:	c3                   	ret    

c001cfe8 <Thr::runtimeReferenceHelper()>:
c001cfe8:	83 ec 18             	sub    esp,0x18
c001cfeb:	68 fe c9 02 c0       	push   0xc002c9fe
c001cff0:	e8 4c 5e ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001cff5:	fa                   	cli    
c001cff6:	83 c4 10             	add    esp,0x10
c001cff9:	eb fe                	jmp    c001cff9 <Thr::runtimeReferenceHelper()+0x11>

c001cffb <Thr::getAddressOfKernelSymbol(char const*)>:
c001cffb:	57                   	push   edi
c001cffc:	56                   	push   esi
c001cffd:	53                   	push   ebx
c001cffe:	31 db                	xor    ebx,ebx
c001d000:	39 1d 80 23 03 c0    	cmp    DWORD PTR ds:0xc0032380,ebx
c001d006:	7e 3c                	jle    c001d044 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d008:	8b 34 9d 00 23 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdd00]
c001d00f:	31 ff                	xor    edi,edi
c001d011:	39 3c 9d 00 22 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcde00],edi
c001d018:	7e 27                	jle    c001d041 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d01a:	50                   	push   eax
c001d01b:	50                   	push   eax
c001d01c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d020:	8b 06                	mov    eax,DWORD PTR [esi]
c001d022:	03 04 9d 80 22 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdd80]
c001d029:	50                   	push   eax
c001d02a:	e8 85 38 fe ff       	call   c00008b4 <strcmp>
c001d02f:	83 c4 10             	add    esp,0x10
c001d032:	85 c0                	test   eax,eax
c001d034:	75 05                	jne    c001d03b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d036:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d039:	eb 0b                	jmp    c001d046 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d03b:	83 c6 10             	add    esi,0x10
c001d03e:	47                   	inc    edi
c001d03f:	eb d0                	jmp    c001d011 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d041:	43                   	inc    ebx
c001d042:	eb bc                	jmp    c001d000 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d044:	31 c0                	xor    eax,eax
c001d046:	5b                   	pop    ebx
c001d047:	5e                   	pop    esi
c001d048:	5f                   	pop    edi
c001d049:	c3                   	ret    

c001d04a <Thr::loadKernelSymbolTable(char const*)>:
c001d04a:	55                   	push   ebp
c001d04b:	57                   	push   edi
c001d04c:	56                   	push   esi
c001d04d:	53                   	push   ebx
c001d04e:	83 ec 68             	sub    esp,0x68
c001d051:	8b 35 d0 23 03 c0    	mov    esi,DWORD PTR ds:0xc00323d0
c001d057:	68 14 01 00 00       	push   0x114
c001d05c:	e8 45 28 ff ff       	call   c000f8a6 <malloc>
c001d061:	83 c4 0c             	add    esp,0xc
c001d064:	89 c3                	mov    ebx,eax
c001d066:	56                   	push   esi
c001d067:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d06b:	50                   	push   eax
c001d06c:	e8 2f 63 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001d071:	5e                   	pop    esi
c001d072:	5f                   	pop    edi
c001d073:	6a 01                	push   0x1
c001d075:	53                   	push   ebx
c001d076:	e8 89 63 ff ff       	call   c0013404 <File::open(FileOpenMode)>
c001d07b:	83 c4 10             	add    esp,0x10
c001d07e:	85 c0                	test   eax,eax
c001d080:	74 0a                	je     c001d08c <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d082:	83 ec 0c             	sub    esp,0xc
c001d085:	68 20 ca 02 c0       	push   0xc002ca20
c001d08a:	eb 34                	jmp    c001d0c0 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d08c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d094:	83 ec 0c             	sub    esp,0xc
c001d097:	6a 34                	push   0x34
c001d099:	e8 08 28 ff ff       	call   c000f8a6 <malloc>
c001d09e:	59                   	pop    ecx
c001d09f:	89 c7                	mov    edi,eax
c001d0a1:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d0a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d0a7:	56                   	push   esi
c001d0a8:	57                   	push   edi
c001d0a9:	6a 00                	push   0x0
c001d0ab:	6a 34                	push   0x34
c001d0ad:	53                   	push   ebx
c001d0ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0b1:	83 c4 20             	add    esp,0x20
c001d0b4:	85 c0                	test   eax,eax
c001d0b6:	74 17                	je     c001d0cf <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d0b8:	83 ec 0c             	sub    esp,0xc
c001d0bb:	68 37 ca 02 c0       	push   0xc002ca37
c001d0c0:	e8 36 d7 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d0c5:	83 c4 10             	add    esp,0x10
c001d0c8:	31 c0                	xor    eax,eax
c001d0ca:	e9 31 02 00 00       	jmp    c001d300 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d0cf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0d5:	75 e1                	jne    c001d0b8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0d7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0da:	85 c0                	test   eax,eax
c001d0dc:	74 da                	je     c001d0b8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0de:	52                   	push   edx
c001d0df:	31 d2                	xor    edx,edx
c001d0e1:	52                   	push   edx
c001d0e2:	50                   	push   eax
c001d0e3:	53                   	push   ebx
c001d0e4:	e8 d9 63 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d0e9:	83 c4 10             	add    esp,0x10
c001d0ec:	85 c0                	test   eax,eax
c001d0ee:	75 c8                	jne    c001d0b8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0f0:	83 ec 0c             	sub    esp,0xc
c001d0f3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0fb:	31 ed                	xor    ebp,ebp
c001d0fd:	0f af c2             	imul   eax,edx
c001d100:	50                   	push   eax
c001d101:	e8 a0 27 ff ff       	call   c000f8a6 <malloc>
c001d106:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d108:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d10c:	89 34 24             	mov    DWORD PTR [esp],esi
c001d10f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d113:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d117:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d11b:	0f af c2             	imul   eax,edx
c001d11e:	99                   	cdq    
c001d11f:	52                   	push   edx
c001d120:	50                   	push   eax
c001d121:	53                   	push   ebx
c001d122:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d125:	83 c4 20             	add    esp,0x20
c001d128:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d130:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d138:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d140:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d148:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d14c:	0f 86 aa 00 00 00    	jbe    c001d1fc <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d152:	0f b7 f5             	movzx  esi,bp
c001d155:	6b f6 28             	imul   esi,esi,0x28
c001d158:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d15c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d15f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d163:	50                   	push   eax
c001d164:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d168:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d16c:	8b 16                	mov    edx,DWORD PTR [esi]
c001d16e:	6b c0 28             	imul   eax,eax,0x28
c001d171:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d175:	89 d0                	mov    eax,edx
c001d177:	31 d2                	xor    edx,edx
c001d179:	52                   	push   edx
c001d17a:	50                   	push   eax
c001d17b:	53                   	push   ebx
c001d17c:	e8 41 63 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d181:	83 c4 0c             	add    esp,0xc
c001d184:	6a 20                	push   0x20
c001d186:	6a 00                	push   0x0
c001d188:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d18c:	52                   	push   edx
c001d18d:	e8 da 35 fe ff       	call   c000076c <memset>
c001d192:	58                   	pop    eax
c001d193:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d195:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d199:	51                   	push   ecx
c001d19a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d19e:	52                   	push   edx
c001d19f:	6a 00                	push   0x0
c001d1a1:	6a 1f                	push   0x1f
c001d1a3:	53                   	push   ebx
c001d1a4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1a7:	83 c4 18             	add    esp,0x18
c001d1aa:	68 4e ca 02 c0       	push   0xc002ca4e
c001d1af:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d1b3:	52                   	push   edx
c001d1b4:	e8 fb 36 fe ff       	call   c00008b4 <strcmp>
c001d1b9:	83 c4 10             	add    esp,0x10
c001d1bc:	85 c0                	test   eax,eax
c001d1be:	75 0f                	jne    c001d1cf <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d1c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1cf:	50                   	push   eax
c001d1d0:	50                   	push   eax
c001d1d1:	68 56 ca 02 c0       	push   0xc002ca56
c001d1d6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d1da:	50                   	push   eax
c001d1db:	e8 d4 36 fe ff       	call   c00008b4 <strcmp>
c001d1e0:	83 c4 10             	add    esp,0x10
c001d1e3:	85 c0                	test   eax,eax
c001d1e5:	75 0f                	jne    c001d1f6 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d1e7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1f6:	45                   	inc    ebp
c001d1f7:	e9 4c ff ff ff       	jmp    c001d148 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d1fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d201:	75 10                	jne    c001d213 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d203:	83 ec 0c             	sub    esp,0xc
c001d206:	68 5e ca 02 c0       	push   0xc002ca5e
c001d20b:	e8 eb d5 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d210:	83 c4 10             	add    esp,0x10
c001d213:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d218:	75 10                	jne    c001d22a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d21a:	83 ec 0c             	sub    esp,0xc
c001d21d:	68 5e ca 02 c0       	push   0xc002ca5e
c001d222:	e8 d4 d5 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d227:	83 c4 10             	add    esp,0x10
c001d22a:	31 d2                	xor    edx,edx
c001d22c:	50                   	push   eax
c001d22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d231:	52                   	push   edx
c001d232:	50                   	push   eax
c001d233:	53                   	push   ebx
c001d234:	e8 89 62 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d239:	5a                   	pop    edx
c001d23a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d23e:	e8 63 26 ff ff       	call   c000f8a6 <malloc>
c001d243:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d247:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d24b:	31 c9                	xor    ecx,ecx
c001d24d:	5e                   	pop    esi
c001d24e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d250:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d254:	55                   	push   ebp
c001d255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d259:	51                   	push   ecx
c001d25a:	52                   	push   edx
c001d25b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d25f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d263:	53                   	push   ebx
c001d264:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d267:	83 c4 14             	add    esp,0x14
c001d26a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d26e:	e8 33 26 ff ff       	call   c000f8a6 <malloc>
c001d273:	89 c6                	mov    esi,eax
c001d275:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d277:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d27a:	56                   	push   esi
c001d27b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d27f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d283:	51                   	push   ecx
c001d284:	52                   	push   edx
c001d285:	53                   	push   ebx
c001d286:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d289:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d28d:	8b 15 80 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032380
c001d293:	83 c4 1c             	add    esp,0x1c
c001d296:	c1 e8 04             	shr    eax,0x4
c001d299:	89 04 95 00 22 03 c0 	mov    DWORD PTR [edx*4-0x3ffcde00],eax
c001d2a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d2a4:	31 d2                	xor    edx,edx
c001d2a6:	52                   	push   edx
c001d2a7:	50                   	push   eax
c001d2a8:	53                   	push   ebx
c001d2a9:	e8 14 62 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d2ae:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d2b0:	31 d2                	xor    edx,edx
c001d2b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2b5:	56                   	push   esi
c001d2b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2ba:	52                   	push   edx
c001d2bb:	50                   	push   eax
c001d2bc:	53                   	push   ebx
c001d2bd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2c0:	83 c4 14             	add    esp,0x14
c001d2c3:	53                   	push   ebx
c001d2c4:	e8 99 61 ff ff       	call   c0013462 <File::close()>
c001d2c9:	5d                   	pop    ebp
c001d2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2ce:	e8 e3 25 ff ff       	call   c000f8b6 <free>
c001d2d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2d6:	e8 db 25 ff ff       	call   c000f8b6 <free>
c001d2db:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001d2e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d2e4:	8d 50 01             	lea    edx,[eax+0x1]
c001d2e7:	89 0c 85 00 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd00],ecx
c001d2ee:	89 34 85 80 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd80],esi
c001d2f5:	89 15 80 23 03 c0    	mov    DWORD PTR ds:0xc0032380,edx
c001d2fb:	83 c4 10             	add    esp,0x10
c001d2fe:	b0 01                	mov    al,0x1
c001d300:	83 c4 5c             	add    esp,0x5c
c001d303:	5b                   	pop    ebx
c001d304:	5e                   	pop    esi
c001d305:	5f                   	pop    edi
c001d306:	5d                   	pop    ebp
c001d307:	c3                   	ret    

c001d308 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d308:	55                   	push   ebp
c001d309:	57                   	push   edi
c001d30a:	56                   	push   esi
c001d30b:	53                   	push   ebx
c001d30c:	81 ec 68 03 00 00    	sub    esp,0x368
c001d312:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d319:	8b 1d d0 23 03 c0    	mov    ebx,DWORD PTR ds:0xc00323d0
c001d31f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d323:	68 14 01 00 00       	push   0x114
c001d328:	e8 79 25 ff ff       	call   c000f8a6 <malloc>
c001d32d:	83 c4 0c             	add    esp,0xc
c001d330:	89 c5                	mov    ebp,eax
c001d332:	53                   	push   ebx
c001d333:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d33a:	50                   	push   eax
c001d33b:	e8 60 60 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001d340:	5e                   	pop    esi
c001d341:	5f                   	pop    edi
c001d342:	6a 01                	push   0x1
c001d344:	55                   	push   ebp
c001d345:	e8 ba 60 ff ff       	call   c0013404 <File::open(FileOpenMode)>
c001d34a:	83 c4 10             	add    esp,0x10
c001d34d:	85 c0                	test   eax,eax
c001d34f:	0f 85 a7 06 00 00    	jne    c001d9fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d355:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d35d:	83 ec 0c             	sub    esp,0xc
c001d360:	6a 34                	push   0x34
c001d362:	e8 3f 25 ff ff       	call   c000f8a6 <malloc>
c001d367:	5b                   	pop    ebx
c001d368:	89 c7                	mov    edi,eax
c001d36a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d36e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d371:	53                   	push   ebx
c001d372:	57                   	push   edi
c001d373:	6a 00                	push   0x0
c001d375:	6a 34                	push   0x34
c001d377:	55                   	push   ebp
c001d378:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d37b:	83 c4 20             	add    esp,0x20
c001d37e:	85 c0                	test   eax,eax
c001d380:	0f 85 76 06 00 00    	jne    c001d9fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d386:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d38c:	0f 85 6a 06 00 00    	jne    c001d9fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d392:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d395:	85 c0                	test   eax,eax
c001d397:	0f 84 5f 06 00 00    	je     c001d9fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d39d:	31 d2                	xor    edx,edx
c001d39f:	51                   	push   ecx
c001d3a0:	52                   	push   edx
c001d3a1:	50                   	push   eax
c001d3a2:	55                   	push   ebp
c001d3a3:	e8 1a 61 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d3a8:	83 c4 10             	add    esp,0x10
c001d3ab:	85 c0                	test   eax,eax
c001d3ad:	0f 85 49 06 00 00    	jne    c001d9fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3b3:	83 ec 0c             	sub    esp,0xc
c001d3b6:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d3b9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d3c1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3c5:	0f af c2             	imul   eax,edx
c001d3c8:	50                   	push   eax
c001d3c9:	e8 d8 24 ff ff       	call   c000f8a6 <malloc>
c001d3ce:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d3dc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3e0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3e4:	0f af c2             	imul   eax,edx
c001d3e7:	99                   	cdq    
c001d3e8:	52                   	push   edx
c001d3e9:	50                   	push   eax
c001d3ea:	55                   	push   ebp
c001d3eb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3ee:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d3f1:	83 c4 20             	add    esp,0x20
c001d3f4:	85 c0                	test   eax,eax
c001d3f6:	0f 84 00 06 00 00    	je     c001d9fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3fc:	52                   	push   edx
c001d3fd:	31 d2                	xor    edx,edx
c001d3ff:	52                   	push   edx
c001d400:	50                   	push   eax
c001d401:	55                   	push   ebp
c001d402:	e8 bb 60 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d407:	83 c4 10             	add    esp,0x10
c001d40a:	85 c0                	test   eax,eax
c001d40c:	0f 85 ea 05 00 00    	jne    c001d9fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d412:	83 ec 0c             	sub    esp,0xc
c001d415:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d419:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d41d:	31 f6                	xor    esi,esi
c001d41f:	0f af c2             	imul   eax,edx
c001d422:	50                   	push   eax
c001d423:	e8 7e 24 ff ff       	call   c000f8a6 <malloc>
c001d428:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d42b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d42f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d432:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d436:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d43a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d43e:	0f af c2             	imul   eax,edx
c001d441:	99                   	cdq    
c001d442:	52                   	push   edx
c001d443:	50                   	push   eax
c001d444:	55                   	push   ebp
c001d445:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d448:	83 c4 20             	add    esp,0x20
c001d44b:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d44f:	0f 86 8a 00 00 00    	jbe    c001d4df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d455:	0f b7 de             	movzx  ebx,si
c001d458:	c1 e3 05             	shl    ebx,0x5
c001d45b:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d45f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d462:	75 75                	jne    c001d4d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d464:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d467:	31 d2                	xor    edx,edx
c001d469:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d46d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d470:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d474:	50                   	push   eax
c001d475:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d478:	52                   	push   edx
c001d479:	50                   	push   eax
c001d47a:	55                   	push   ebp
c001d47b:	e8 42 60 ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d480:	83 c4 10             	add    esp,0x10
c001d483:	85 c0                	test   eax,eax
c001d485:	0f 85 71 05 00 00    	jne    c001d9fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d48b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d492:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d495:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d499:	31 d2                	xor    edx,edx
c001d49b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d49f:	83 ec 0c             	sub    esp,0xc
c001d4a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d4a6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4ad:	50                   	push   eax
c001d4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4b6:	52                   	push   edx
c001d4b7:	50                   	push   eax
c001d4b8:	55                   	push   ebp
c001d4b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4bc:	83 c4 1c             	add    esp,0x1c
c001d4bf:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d4c2:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d4c5:	50                   	push   eax
c001d4c6:	6a 00                	push   0x0
c001d4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4cc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d4d0:	50                   	push   eax
c001d4d1:	e8 96 32 fe ff       	call   c000076c <memset>
c001d4d6:	83 c4 10             	add    esp,0x10
c001d4d9:	46                   	inc    esi
c001d4da:	e9 6c ff ff ff       	jmp    c001d44b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d4df:	53                   	push   ebx
c001d4e0:	31 db                	xor    ebx,ebx
c001d4e2:	68 00 01 00 00       	push   0x100
c001d4e7:	6a 00                	push   0x0
c001d4e9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d4ed:	50                   	push   eax
c001d4ee:	e8 79 32 fe ff       	call   c000076c <memset>
c001d4f3:	83 c4 0c             	add    esp,0xc
c001d4f6:	68 00 01 00 00       	push   0x100
c001d4fb:	6a 00                	push   0x0
c001d4fd:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d504:	50                   	push   eax
c001d505:	e8 62 32 fe ff       	call   c000076c <memset>
c001d50a:	83 c4 10             	add    esp,0x10
c001d50d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d515:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d51d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d525:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d52d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d535:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d539:	0f 86 30 01 00 00    	jbe    c001d66f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d53f:	0f b7 f3             	movzx  esi,bx
c001d542:	6b f6 28             	imul   esi,esi,0x28
c001d545:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d549:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d54c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d550:	52                   	push   edx
c001d551:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d555:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d559:	8b 06                	mov    eax,DWORD PTR [esi]
c001d55b:	6b d2 28             	imul   edx,edx,0x28
c001d55e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d562:	31 d2                	xor    edx,edx
c001d564:	52                   	push   edx
c001d565:	50                   	push   eax
c001d566:	55                   	push   ebp
c001d567:	e8 56 5f ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d56c:	83 c4 0c             	add    esp,0xc
c001d56f:	6a 20                	push   0x20
c001d571:	6a 00                	push   0x0
c001d573:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d57a:	51                   	push   ecx
c001d57b:	e8 ec 31 fe ff       	call   c000076c <memset>
c001d580:	59                   	pop    ecx
c001d581:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d584:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d588:	52                   	push   edx
c001d589:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d590:	51                   	push   ecx
c001d591:	6a 00                	push   0x0
c001d593:	6a 1f                	push   0x1f
c001d595:	55                   	push   ebp
c001d596:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d599:	83 c4 1c             	add    esp,0x1c
c001d59c:	6a 09                	push   0x9
c001d59e:	68 78 ca 02 c0       	push   0xc002ca78
c001d5a3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d5aa:	51                   	push   ecx
c001d5ab:	e8 b8 30 fe ff       	call   c0000668 <memcmp>
c001d5b0:	83 c4 10             	add    esp,0x10
c001d5b3:	85 c0                	test   eax,eax
c001d5b5:	75 21                	jne    c001d5d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d5b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5bf:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5c7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5ca:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5d1:	89 d0                	mov    eax,edx
c001d5d3:	40                   	inc    eax
c001d5d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5d8:	50                   	push   eax
c001d5d9:	6a 09                	push   0x9
c001d5db:	68 82 ca 02 c0       	push   0xc002ca82
c001d5e0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5e7:	50                   	push   eax
c001d5e8:	e8 7b 30 fe ff       	call   c0000668 <memcmp>
c001d5ed:	83 c4 10             	add    esp,0x10
c001d5f0:	85 c0                	test   eax,eax
c001d5f2:	75 21                	jne    c001d615 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d5f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5fc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d600:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d604:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d607:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d60e:	89 d0                	mov    eax,edx
c001d610:	40                   	inc    eax
c001d611:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d615:	50                   	push   eax
c001d616:	50                   	push   eax
c001d617:	68 4e ca 02 c0       	push   0xc002ca4e
c001d61c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d623:	50                   	push   eax
c001d624:	e8 8b 32 fe ff       	call   c00008b4 <strcmp>
c001d629:	83 c4 10             	add    esp,0x10
c001d62c:	85 c0                	test   eax,eax
c001d62e:	75 0f                	jne    c001d63f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d630:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d633:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d637:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d63b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d63f:	50                   	push   eax
c001d640:	50                   	push   eax
c001d641:	68 56 ca 02 c0       	push   0xc002ca56
c001d646:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d64d:	50                   	push   eax
c001d64e:	e8 61 32 fe ff       	call   c00008b4 <strcmp>
c001d653:	83 c4 10             	add    esp,0x10
c001d656:	85 c0                	test   eax,eax
c001d658:	75 0f                	jne    c001d669 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d65a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d65d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d665:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d669:	43                   	inc    ebx
c001d66a:	e9 c6 fe ff ff       	jmp    c001d535 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d66f:	31 d2                	xor    edx,edx
c001d671:	50                   	push   eax
c001d672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d676:	52                   	push   edx
c001d677:	50                   	push   eax
c001d678:	55                   	push   ebp
c001d679:	e8 44 5e ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d67e:	58                   	pop    eax
c001d67f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d683:	e8 1e 22 ff ff       	call   c000f8a6 <malloc>
c001d688:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d68b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d68f:	31 d2                	xor    edx,edx
c001d691:	58                   	pop    eax
c001d692:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d696:	53                   	push   ebx
c001d697:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d69b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d69f:	52                   	push   edx
c001d6a0:	50                   	push   eax
c001d6a1:	55                   	push   ebp
c001d6a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6a5:	83 c4 14             	add    esp,0x14
c001d6a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6ac:	e8 f5 21 ff ff       	call   c000f8a6 <malloc>
c001d6b1:	31 d2                	xor    edx,edx
c001d6b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d6b7:	83 c4 0c             	add    esp,0xc
c001d6ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6be:	52                   	push   edx
c001d6bf:	50                   	push   eax
c001d6c0:	55                   	push   ebp
c001d6c1:	e8 fc 5d ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d6c6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6c9:	31 d2                	xor    edx,edx
c001d6cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6ce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d6d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d6d6:	52                   	push   edx
c001d6d7:	50                   	push   eax
c001d6d8:	55                   	push   ebp
c001d6d9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6dc:	83 c4 20             	add    esp,0x20
c001d6df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d6e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d6eb:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d6ef:	0f 84 0b 03 00 00    	je     c001da00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d6f5:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d6fc:	31 d2                	xor    edx,edx
c001d6fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d702:	c1 e8 03             	shr    eax,0x3
c001d705:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d709:	51                   	push   ecx
c001d70a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d70e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d712:	52                   	push   edx
c001d713:	50                   	push   eax
c001d714:	55                   	push   ebp
c001d715:	e8 a8 5d ff ff       	call   c00134c2 <File::seek(unsigned long long)>
c001d71a:	5b                   	pop    ebx
c001d71b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d71f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d726:	e8 7b 21 ff ff       	call   c000f8a6 <malloc>
c001d72b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d72e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d732:	31 d2                	xor    edx,edx
c001d734:	5e                   	pop    esi
c001d735:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d739:	50                   	push   eax
c001d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d73e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d742:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d749:	52                   	push   edx
c001d74a:	50                   	push   eax
c001d74b:	55                   	push   ebp
c001d74c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d74f:	83 c4 20             	add    esp,0x20
c001d752:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d75a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d75e:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d762:	0f 8d 7c 02 00 00    	jge    c001d9e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d768:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d76c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d770:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d775:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d778:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d780:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d784:	89 d8                	mov    eax,ebx
c001d786:	c1 e8 08             	shr    eax,0x8
c001d789:	89 c6                	mov    esi,eax
c001d78b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d78f:	c1 e6 04             	shl    esi,0x4
c001d792:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d796:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d799:	85 d2                	test   edx,edx
c001d79b:	0f 85 bf 00 00 00    	jne    c001d860 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7a1:	83 ec 0c             	sub    esp,0xc
c001d7a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7a8:	03 06                	add    eax,DWORD PTR [esi]
c001d7aa:	50                   	push   eax
c001d7ab:	e8 4b f8 ff ff       	call   c001cffb <Thr::getAddressOfKernelSymbol(char const*)>
c001d7b0:	83 c4 10             	add    esp,0x10
c001d7b3:	89 c2                	mov    edx,eax
c001d7b5:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d7ba:	85 c0                	test   eax,eax
c001d7bc:	0f 85 9e 00 00 00    	jne    c001d860 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7c2:	83 ec 0c             	sub    esp,0xc
c001d7c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7c9:	03 06                	add    eax,DWORD PTR [esi]
c001d7cb:	50                   	push   eax
c001d7cc:	e8 88 0d ff ff       	call   c000e559 <Krnl::resolveCompatibilitySymbol(char*)>
c001d7d1:	83 c4 10             	add    esp,0x10
c001d7d4:	89 c2                	mov    edx,eax
c001d7d6:	85 c0                	test   eax,eax
c001d7d8:	0f 85 82 00 00 00    	jne    c001d860 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7de:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d7e2:	50                   	push   eax
c001d7e3:	50                   	push   eax
c001d7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7e8:	03 06                	add    eax,DWORD PTR [esi]
c001d7ea:	50                   	push   eax
c001d7eb:	68 8c ca 02 c0       	push   0xc002ca8c
c001d7f0:	e8 4c 56 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001d7f5:	58                   	pop    eax
c001d7f6:	5a                   	pop    edx
c001d7f7:	68 a6 ca 02 c0       	push   0xc002caa6
c001d7fc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d803:	50                   	push   eax
c001d804:	e8 1f 30 fe ff       	call   c0000828 <strcpy>
c001d809:	59                   	pop    ecx
c001d80a:	58                   	pop    eax
c001d80b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d80f:	03 06                	add    eax,DWORD PTR [esi]
c001d811:	50                   	push   eax
c001d812:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d819:	50                   	push   eax
c001d81a:	e8 49 31 fe ff       	call   c0000968 <strcat>
c001d81f:	58                   	pop    eax
c001d820:	5a                   	pop    edx
c001d821:	68 3c cb 02 c0       	push   0xc002cb3c
c001d826:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d82d:	50                   	push   eax
c001d82e:	e8 35 31 fe ff       	call   c0000968 <strcat>
c001d833:	83 c4 10             	add    esp,0x10
c001d836:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d83b:	0f 84 5d 01 00 00    	je     c001d99e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d841:	83 ec 0c             	sub    esp,0xc
c001d844:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d84b:	50                   	push   eax
c001d84c:	e8 aa cf ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d851:	83 c4 10             	add    esp,0x10
c001d854:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d858:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d85c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d860:	80 fb 01             	cmp    bl,0x1
c001d863:	0f 85 88 00 00 00    	jne    c001d8f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d869:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d870:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d874:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d878:	01 ce                	add    esi,ecx
c001d87a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d880:	0f 94 c0             	sete   al
c001d883:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d889:	0f 94 c3             	sete   bl
c001d88c:	09 c3                	or     ebx,eax
c001d88e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d890:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d895:	74 41                	je     c001d8d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d897:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d89a:	84 db                	test   bl,bl
c001d89c:	75 15                	jne    c001d8b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d89e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8a2:	66 83 f8 0c          	cmp    ax,0xc
c001d8a6:	76 05                	jbe    c001d8ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d8a8:	b8 0c 00 00 00       	mov    eax,0xc
c001d8ad:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8b1:	76 37                	jbe    c001d8ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8b3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d8b7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d8bc:	0f 84 dc 00 00 00    	je     c001d99e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d8c2:	83 ec 0c             	sub    esp,0xc
c001d8c5:	68 bd ca 02 c0       	push   0xc002cabd
c001d8ca:	e8 2c cf ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d8cf:	83 c4 10             	add    esp,0x10
c001d8d2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d8d6:	eb 12                	jmp    c001d8ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8d8:	01 c1                	add    ecx,eax
c001d8da:	84 db                	test   bl,bl
c001d8dc:	75 0c                	jne    c001d8ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8de:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8e2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8e6:	77 02                	ja     c001d8ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8e8:	01 d1                	add    ecx,edx
c001d8ea:	89 0e                	mov    DWORD PTR [esi],ecx
c001d8ec:	e9 ea 00 00 00       	jmp    c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d8f1:	80 fb 02             	cmp    bl,0x2
c001d8f4:	75 7c                	jne    c001d972 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d8f6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d8fd:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d901:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d905:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d90b:	74 20                	je     c001d92d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d90d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d913:	74 18                	je     c001d92d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d915:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d919:	b9 0a 00 00 00       	mov    ecx,0xa
c001d91e:	66 83 f8 0e          	cmp    ax,0xe
c001d922:	77 03                	ja     c001d927 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d924:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d927:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d92b:	76 1f                	jbe    c001d94c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d92d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d931:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d936:	74 66                	je     c001d99e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d938:	83 ec 0c             	sub    esp,0xc
c001d93b:	68 d9 ca 02 c0       	push   0xc002cad9
c001d940:	e8 b6 ce ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d945:	83 c4 10             	add    esp,0x10
c001d948:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d94c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d94e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d953:	74 13                	je     c001d968 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d955:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d959:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d960:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d964:	01 c8                	add    eax,ecx
c001d966:	eb 04                	jmp    c001d96c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d968:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d96c:	01 c2                	add    edx,eax
c001d96e:	89 16                	mov    DWORD PTR [esi],edx
c001d970:	eb 69                	jmp    c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d972:	0f b6 db             	movzx  ebx,bl
c001d975:	50                   	push   eax
c001d976:	50                   	push   eax
c001d977:	53                   	push   ebx
c001d978:	68 f5 ca 02 c0       	push   0xc002caf5
c001d97d:	e8 bf 54 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001d982:	83 c4 10             	add    esp,0x10
c001d985:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d98a:	74 12                	je     c001d99e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d98c:	83 ec 0c             	sub    esp,0xc
c001d98f:	68 00 cb 02 c0       	push   0xc002cb00
c001d994:	e8 62 ce ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001d999:	83 c4 10             	add    esp,0x10
c001d99c:	eb 3d                	jmp    c001d9db <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d99e:	83 ec 0c             	sub    esp,0xc
c001d9a1:	55                   	push   ebp
c001d9a2:	e8 bb 5a ff ff       	call   c0013462 <File::close()>
c001d9a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d9aa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d9ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9b0:	59                   	pop    ecx
c001d9b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9b5:	e8 fc 1e ff ff       	call   c000f8b6 <free>
c001d9ba:	5b                   	pop    ebx
c001d9bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9bf:	e8 f2 1e ff ff       	call   c000f8b6 <free>
c001d9c4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d9c7:	e8 ea 1e ff ff       	call   c000f8b6 <free>
c001d9cc:	5e                   	pop    esi
c001d9cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9d1:	e8 e0 1e ff ff       	call   c000f8b6 <free>
c001d9d6:	83 c4 10             	add    esp,0x10
c001d9d9:	eb 21                	jmp    c001d9fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d9db:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d9df:	e9 76 fd ff ff       	jmp    c001d75a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d9e4:	83 ec 0c             	sub    esp,0xc
c001d9e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9eb:	e8 c6 1e ff ff       	call   c000f8b6 <free>
c001d9f0:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d9f4:	83 c4 10             	add    esp,0x10
c001d9f7:	e9 eb fc ff ff       	jmp    c001d6e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d9fc:	31 c0                	xor    eax,eax
c001d9fe:	eb 33                	jmp    c001da33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001da00:	83 ec 0c             	sub    esp,0xc
c001da03:	55                   	push   ebp
c001da04:	e8 59 5a ff ff       	call   c0013462 <File::close()>
c001da09:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001da0c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001da0f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001da12:	58                   	pop    eax
c001da13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da17:	e8 9a 1e ff ff       	call   c000f8b6 <free>
c001da1c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001da1f:	e8 92 1e ff ff       	call   c000f8b6 <free>
c001da24:	5a                   	pop    edx
c001da25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da29:	e8 88 1e ff ff       	call   c000f8b6 <free>
c001da2e:	83 c4 10             	add    esp,0x10
c001da31:	b0 01                	mov    al,0x1
c001da33:	81 c4 5c 03 00 00    	add    esp,0x35c
c001da39:	5b                   	pop    ebx
c001da3a:	5e                   	pop    esi
c001da3b:	5f                   	pop    edi
c001da3c:	5d                   	pop    ebp
c001da3d:	c3                   	ret    

c001da3e <Thr::getDriverBaseFromAddress(unsigned long)>:
c001da3e:	56                   	push   esi
c001da3f:	31 d2                	xor    edx,edx
c001da41:	53                   	push   ebx
c001da42:	8b 1d e0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031be0
c001da48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da4c:	39 d3                	cmp    ebx,edx
c001da4e:	7e 1b                	jle    c001da6b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001da50:	8b 04 95 00 1e 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce200]
c001da57:	39 c8                	cmp    eax,ecx
c001da59:	77 0d                	ja     c001da68 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001da5b:	8b 34 95 00 1c 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce400]
c001da62:	01 c6                	add    esi,eax
c001da64:	39 ce                	cmp    esi,ecx
c001da66:	77 05                	ja     c001da6d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001da68:	42                   	inc    edx
c001da69:	eb e1                	jmp    c001da4c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001da6b:	31 c0                	xor    eax,eax
c001da6d:	5b                   	pop    ebx
c001da6e:	5e                   	pop    esi
c001da6f:	c3                   	ret    

c001da70 <Thr::getDriverNameFromAddress(unsigned long)>:
c001da70:	53                   	push   ebx
c001da71:	31 c0                	xor    eax,eax
c001da73:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da77:	8b 1d e0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031be0
c001da7d:	39 c3                	cmp    ebx,eax
c001da7f:	7e 22                	jle    c001daa3 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001da81:	8b 14 85 00 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce200]
c001da88:	39 ca                	cmp    edx,ecx
c001da8a:	77 14                	ja     c001daa0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da8c:	03 14 85 00 1c 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce400]
c001da93:	39 ca                	cmp    edx,ecx
c001da95:	76 09                	jbe    c001daa0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da97:	8b 04 85 00 20 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce000]
c001da9e:	eb 05                	jmp    c001daa5 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001daa0:	40                   	inc    eax
c001daa1:	eb da                	jmp    c001da7d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001daa3:	31 c0                	xor    eax,eax
c001daa5:	5b                   	pop    ebx
c001daa6:	c3                   	ret    

c001daa7 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001daa7:	53                   	push   ebx
c001daa8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001daac:	53                   	push   ebx
c001daad:	e8 8c ff ff ff       	call   c001da3e <Thr::getDriverBaseFromAddress(unsigned long)>
c001dab2:	5a                   	pop    edx
c001dab3:	31 d2                	xor    edx,edx
c001dab5:	85 c0                	test   eax,eax
c001dab7:	74 04                	je     c001dabd <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dab9:	89 da                	mov    edx,ebx
c001dabb:	29 c2                	sub    edx,eax
c001dabd:	89 d0                	mov    eax,edx
c001dabf:	5b                   	pop    ebx
c001dac0:	c3                   	ret    

c001dac1 <Thr::loadDLL(char const*, bool)>:
c001dac1:	55                   	push   ebp
c001dac2:	57                   	push   edi
c001dac3:	56                   	push   esi
c001dac4:	53                   	push   ebx
c001dac5:	81 ec 34 01 00 00    	sub    esp,0x134
c001dacb:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dad2:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dad9:	56                   	push   esi
c001dada:	68 18 cb 02 c0       	push   0xc002cb18
c001dadf:	e8 5d 53 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001dae4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001daeb:	e8 b6 1d ff ff       	call   c000f8a6 <malloc>
c001daf0:	83 c4 0c             	add    esp,0xc
c001daf3:	89 c3                	mov    ebx,eax
c001daf5:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001dafb:	56                   	push   esi
c001dafc:	50                   	push   eax
c001dafd:	e8 9e 58 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001db02:	83 c4 10             	add    esp,0x10
c001db05:	85 db                	test   ebx,ebx
c001db07:	75 3c                	jne    c001db45 <Thr::loadDLL(char const*, bool)+0x84>
c001db09:	89 f8                	mov    eax,edi
c001db0b:	84 c0                	test   al,al
c001db0d:	0f 84 cc 01 00 00    	je     c001dcdf <Thr::loadDLL(char const*, bool)+0x21e>
c001db13:	55                   	push   ebp
c001db14:	55                   	push   ebp
c001db15:	68 29 cb 02 c0       	push   0xc002cb29
c001db1a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001db1e:	55                   	push   ebp
c001db1f:	e8 04 2d fe ff       	call   c0000828 <strcpy>
c001db24:	58                   	pop    eax
c001db25:	5a                   	pop    edx
c001db26:	56                   	push   esi
c001db27:	55                   	push   ebp
c001db28:	e8 3b 2e fe ff       	call   c0000968 <strcat>
c001db2d:	59                   	pop    ecx
c001db2e:	58                   	pop    eax
c001db2f:	68 3c cb 02 c0       	push   0xc002cb3c
c001db34:	55                   	push   ebp
c001db35:	e8 2e 2e fe ff       	call   c0000968 <strcat>
c001db3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db3d:	e8 b9 cc ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001db42:	83 c4 10             	add    esp,0x10
c001db45:	51                   	push   ecx
c001db46:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001db4a:	50                   	push   eax
c001db4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db4f:	50                   	push   eax
c001db50:	53                   	push   ebx
c001db51:	e8 5a 5b ff ff       	call   c00136b0 <File::stat(unsigned long long*, bool*)>
c001db56:	83 c4 10             	add    esp,0x10
c001db59:	85 db                	test   ebx,ebx
c001db5b:	74 0c                	je     c001db69 <Thr::loadDLL(char const*, bool)+0xa8>
c001db5d:	83 ec 0c             	sub    esp,0xc
c001db60:	8b 03                	mov    eax,DWORD PTR [ebx]
c001db62:	53                   	push   ebx
c001db63:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db66:	83 c4 10             	add    esp,0x10
c001db69:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001db6e:	75 0a                	jne    c001db7a <Thr::loadDLL(char const*, bool)+0xb9>
c001db70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db74:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001db78:	75 3c                	jne    c001dbb6 <Thr::loadDLL(char const*, bool)+0xf5>
c001db7a:	89 f8                	mov    eax,edi
c001db7c:	84 c0                	test   al,al
c001db7e:	0f 84 43 01 00 00    	je     c001dcc7 <Thr::loadDLL(char const*, bool)+0x206>
c001db84:	51                   	push   ecx
c001db85:	51                   	push   ecx
c001db86:	68 29 cb 02 c0       	push   0xc002cb29
c001db8b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001db8f:	53                   	push   ebx
c001db90:	e8 93 2c fe ff       	call   c0000828 <strcpy>
c001db95:	5d                   	pop    ebp
c001db96:	58                   	pop    eax
c001db97:	56                   	push   esi
c001db98:	53                   	push   ebx
c001db99:	e8 ca 2d fe ff       	call   c0000968 <strcat>
c001db9e:	58                   	pop    eax
c001db9f:	5a                   	pop    edx
c001dba0:	68 3c cb 02 c0       	push   0xc002cb3c
c001dba5:	53                   	push   ebx
c001dba6:	e8 bd 2d fe ff       	call   c0000968 <strcat>
c001dbab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbae:	e8 48 cc ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001dbb3:	83 c4 10             	add    esp,0x10
c001dbb6:	52                   	push   edx
c001dbb7:	6a 03                	push   0x3
c001dbb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbbd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dbc1:	05 ff 0f 00 00       	add    eax,0xfff
c001dbc6:	83 d2 00             	adc    edx,0x0
c001dbc9:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dbcd:	50                   	push   eax
c001dbce:	ff 35 f0 ef 02 c0    	push   DWORD PTR ds:0xc002eff0
c001dbd4:	e8 9b 47 ff ff       	call   c0012374 <VAS::allocatePages(int, int)>
c001dbd9:	59                   	pop    ecx
c001dbda:	89 c3                	mov    ebx,eax
c001dbdc:	5d                   	pop    ebp
c001dbdd:	50                   	push   eax
c001dbde:	68 3e cb 02 c0       	push   0xc002cb3e
c001dbe3:	e8 59 52 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001dbe8:	89 34 24             	mov    DWORD PTR [esp],esi
c001dbeb:	e8 98 2b fe ff       	call   c0000788 <strlen>
c001dbf0:	8b 2d e0 1b 03 c0    	mov    ebp,DWORD PTR ds:0xc0031be0
c001dbf6:	40                   	inc    eax
c001dbf7:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbfa:	e8 a7 1c ff ff       	call   c000f8a6 <malloc>
c001dbff:	89 04 ad 00 20 03 c0 	mov    DWORD PTR [ebp*4-0x3ffce000],eax
c001dc06:	58                   	pop    eax
c001dc07:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c001dc0c:	5a                   	pop    edx
c001dc0d:	56                   	push   esi
c001dc0e:	ff 34 85 00 20 03 c0 	push   DWORD PTR [eax*4-0x3ffce000]
c001dc15:	e8 0e 2c fe ff       	call   c0000828 <strcpy>
c001dc1a:	a1 e0 1b 03 c0       	mov    eax,ds:0xc0031be0
c001dc1f:	8d 50 01             	lea    edx,[eax+0x1]
c001dc22:	89 1c 85 00 1e 03 c0 	mov    DWORD PTR [eax*4-0x3ffce200],ebx
c001dc29:	89 15 e0 1b 03 c0    	mov    DWORD PTR ds:0xc0031be0,edx
c001dc2f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dc33:	83 c4 0c             	add    esp,0xc
c001dc36:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c001dc3d:	6a 01                	push   0x1
c001dc3f:	53                   	push   ebx
c001dc40:	56                   	push   esi
c001dc41:	e8 c2 f6 ff ff       	call   c001d308 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dc46:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dc4a:	83 c4 10             	add    esp,0x10
c001dc4d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dc52:	0f 85 83 00 00 00    	jne    c001dcdb <Thr::loadDLL(char const*, bool)+0x21a>
c001dc58:	89 f8                	mov    eax,edi
c001dc5a:	84 c0                	test   al,al
c001dc5c:	74 6d                	je     c001dccb <Thr::loadDLL(char const*, bool)+0x20a>
c001dc5e:	83 ec 0c             	sub    esp,0xc
c001dc61:	68 4b cb 02 c0       	push   0xc002cb4b
c001dc66:	e8 90 cb ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001dc6b:	83 c4 10             	add    esp,0x10
c001dc6e:	eb 5b                	jmp    c001dccb <Thr::loadDLL(char const*, bool)+0x20a>
c001dc70:	89 ee                	mov    esi,ebp
c001dc72:	50                   	push   eax
c001dc73:	c1 e6 0c             	shl    esi,0xc
c001dc76:	50                   	push   eax
c001dc77:	01 de                	add    esi,ebx
c001dc79:	56                   	push   esi
c001dc7a:	ff 35 f0 ef 02 c0    	push   DWORD PTR ds:0xc002eff0
c001dc80:	e8 57 42 ff ff       	call   c0011edc <VAS::getPageTableEntry(unsigned long)>
c001dc85:	83 c4 10             	add    esp,0x10
c001dc88:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dc8b:	75 0c                	jne    c001dc99 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dc8d:	83 ec 0c             	sub    esp,0xc
c001dc90:	56                   	push   esi
c001dc91:	e8 f2 21 ff ff       	call   c000fe88 <Phys::freePage(unsigned long)>
c001dc96:	83 c4 10             	add    esp,0x10
c001dc99:	45                   	inc    ebp
c001dc9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dca2:	05 ff 0f 00 00       	add    eax,0xfff
c001dca7:	bf 00 00 00 00       	mov    edi,0x0
c001dcac:	83 d2 00             	adc    edx,0x0
c001dcaf:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dcb3:	c1 ea 0c             	shr    edx,0xc
c001dcb6:	39 c5                	cmp    ebp,eax
c001dcb8:	89 d1                	mov    ecx,edx
c001dcba:	89 f8                	mov    eax,edi
c001dcbc:	19 c8                	sbb    eax,ecx
c001dcbe:	72 b0                	jb     c001dc70 <Thr::loadDLL(char const*, bool)+0x1af>
c001dcc0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dcc5:	75 18                	jne    c001dcdf <Thr::loadDLL(char const*, bool)+0x21e>
c001dcc7:	31 db                	xor    ebx,ebx
c001dcc9:	eb 14                	jmp    c001dcdf <Thr::loadDLL(char const*, bool)+0x21e>
c001dccb:	83 ec 0c             	sub    esp,0xc
c001dcce:	68 6a cb 02 c0       	push   0xc002cb6a
c001dcd3:	e8 23 cb ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001dcd8:	83 c4 10             	add    esp,0x10
c001dcdb:	31 ed                	xor    ebp,ebp
c001dcdd:	eb bb                	jmp    c001dc9a <Thr::loadDLL(char const*, bool)+0x1d9>
c001dcdf:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dce5:	89 d8                	mov    eax,ebx
c001dce7:	5b                   	pop    ebx
c001dce8:	5e                   	pop    esi
c001dce9:	5f                   	pop    edi
c001dcea:	5d                   	pop    ebp
c001dceb:	c3                   	ret    

c001dcec <Thr::executeDLL(unsigned long, void*)>:
c001dcec:	56                   	push   esi
c001dced:	53                   	push   ebx
c001dcee:	52                   	push   edx
c001dcef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcf3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dcf7:	85 db                	test   ebx,ebx
c001dcf9:	75 10                	jne    c001dd0b <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dcfb:	83 ec 0c             	sub    esp,0xc
c001dcfe:	68 86 cb 02 c0       	push   0xc002cb86
c001dd03:	e8 f3 ca ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001dd08:	83 c4 10             	add    esp,0x10
c001dd0b:	50                   	push   eax
c001dd0c:	50                   	push   eax
c001dd0d:	53                   	push   ebx
c001dd0e:	68 b0 cb 02 c0       	push   0xc002cbb0
c001dd13:	e8 29 51 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001dd18:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dd1c:	89 d8                	mov    eax,ebx
c001dd1e:	83 c4 14             	add    esp,0x14
c001dd21:	5b                   	pop    ebx
c001dd22:	5e                   	pop    esi
c001dd23:	ff e0                	jmp    eax
c001dd25:	90                   	nop

c001dd26 <userModeEntryPoint(void*)>:
c001dd26:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001dd2b:	48                   	dec    eax
c001dd2c:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001dd31:	75 01                	jne    c001dd34 <userModeEntryPoint(void*)+0xe>
c001dd33:	fb                   	sti    
c001dd34:	fb                   	sti    
c001dd35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd3d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dd43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd47:	e9 de 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd4c <changeTSS>:
c001dd4c:	83 ec 14             	sub    esp,0x14
c001dd4f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd54:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dd57:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dd5c:	c1 e2 15             	shl    edx,0x15
c001dd5f:	29 d0                	sub    eax,edx
c001dd61:	50                   	push   eax
c001dd62:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001dd67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd6d:	05 7c 11 00 00       	add    eax,0x117c
c001dd72:	50                   	push   eax
c001dd73:	e8 02 36 ff ff       	call   c001137a <TSS::setESP(unsigned long)>
c001dd78:	83 c4 1c             	add    esp,0x1c
c001dd7b:	c3                   	ret    

c001dd7c <switchToThread(ThreadControlBlock*)>:
c001dd7c:	57                   	push   edi
c001dd7d:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001dd82:	56                   	push   esi
c001dd83:	85 c0                	test   eax,eax
c001dd85:	53                   	push   ebx
c001dd86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd8a:	0f 85 88 00 00 00    	jne    c001de18 <switchToThread(ThreadControlBlock*)+0x9c>
c001dd90:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dd93:	3c ff                	cmp    al,0xff
c001dd95:	74 7d                	je     c001de14 <switchToThread(ThreadControlBlock*)+0x98>
c001dd97:	0f b6 d0             	movzx  edx,al
c001dd9a:	b8 84 03 00 00       	mov    eax,0x384
c001dd9f:	29 d0                	sub    eax,edx
c001dda1:	c1 e0 10             	shl    eax,0x10
c001dda4:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dda7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ddaa:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c001ddaf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ddb5:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ddbc:	74 4a                	je     c001de08 <switchToThread(ThreadControlBlock*)+0x8c>
c001ddbe:	0f 31                	rdtsc  
c001ddc0:	a3 e8 23 03 c0       	mov    ds:0xc00323e8,eax
c001ddc5:	89 c6                	mov    esi,eax
c001ddc7:	89 d7                	mov    edi,edx
c001ddc9:	2b 35 d8 23 03 c0    	sub    esi,DWORD PTR ds:0xc00323d8
c001ddcf:	89 15 ec 23 03 c0    	mov    DWORD PTR ds:0xc00323ec,edx
c001ddd5:	1b 3d dc 23 03 c0    	sbb    edi,DWORD PTR ds:0xc00323dc
c001dddb:	89 35 e0 23 03 c0    	mov    DWORD PTR ds:0xc00323e0,esi
c001dde1:	a3 d8 23 03 c0       	mov    ds:0xc00323d8,eax
c001dde6:	89 3d e4 23 03 c0    	mov    DWORD PTR ds:0xc00323e4,edi
c001ddec:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001ddf2:	89 15 dc 23 03 c0    	mov    DWORD PTR ds:0xc00323dc,edx
c001ddf8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ddfb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ddfe:	01 c6                	add    esi,eax
c001de00:	11 d7                	adc    edi,edx
c001de02:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001de05:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001de08:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001de0c:	5b                   	pop    ebx
c001de0d:	5e                   	pop    esi
c001de0e:	5f                   	pop    edi
c001de0f:	e9 4e 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de14:	31 c0                	xor    eax,eax
c001de16:	eb 8f                	jmp    c001dda7 <switchToThread(ThreadControlBlock*)+0x2b>
c001de18:	5b                   	pop    ebx
c001de19:	c7 05 a0 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x1
c001de23:	5e                   	pop    esi
c001de24:	5f                   	pop    edi
c001de25:	c3                   	ret    

c001de26 <Process::addArgs(char**)>:
c001de26:	57                   	push   edi
c001de27:	56                   	push   esi
c001de28:	53                   	push   ebx
c001de29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001de31:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001de3b:	85 ff                	test   edi,edi
c001de3d:	74 3d                	je     c001de7c <Process::addArgs(char**)+0x56>
c001de3f:	8b 07                	mov    eax,DWORD PTR [edi]
c001de41:	85 c0                	test   eax,eax
c001de43:	74 37                	je     c001de7c <Process::addArgs(char**)+0x56>
c001de45:	31 db                	xor    ebx,ebx
c001de47:	83 ec 0c             	sub    esp,0xc
c001de4a:	50                   	push   eax
c001de4b:	e8 38 29 fe ff       	call   c0000788 <strlen>
c001de50:	40                   	inc    eax
c001de51:	89 04 24             	mov    DWORD PTR [esp],eax
c001de54:	e8 4d 1a ff ff       	call   c000f8a6 <malloc>
c001de59:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001de60:	5a                   	pop    edx
c001de61:	59                   	pop    ecx
c001de62:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001de65:	43                   	inc    ebx
c001de66:	50                   	push   eax
c001de67:	e8 bc 29 fe ff       	call   c0000828 <strcpy>
c001de6c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001de72:	83 c4 10             	add    esp,0x10
c001de75:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001de78:	85 c0                	test   eax,eax
c001de7a:	75 cb                	jne    c001de47 <Process::addArgs(char**)+0x21>
c001de7c:	5b                   	pop    ebx
c001de7d:	5e                   	pop    esi
c001de7e:	5f                   	pop    edi
c001de7f:	c3                   	ret    

c001de80 <Process::Process(char const*, Process*, char**)>:
c001de80:	56                   	push   esi
c001de81:	53                   	push   ebx
c001de82:	83 ec 14             	sub    esp,0x14
c001de85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de89:	05 0c 02 00 00       	add    eax,0x20c
c001de8e:	bb 07 00 00 00       	mov    ebx,0x7
c001de93:	89 c6                	mov    esi,eax
c001de95:	85 db                	test   ebx,ebx
c001de97:	78 12                	js     c001deab <Process::Process(char const*, Process*, char**)+0x2b>
c001de99:	83 ec 0c             	sub    esp,0xc
c001de9c:	56                   	push   esi
c001de9d:	e8 e0 b6 00 00       	call   c0029582 <ThreadControlBlock::ThreadControlBlock()>
c001dea2:	83 c4 10             	add    esp,0x10
c001dea5:	83 c6 63             	add    esi,0x63
c001dea8:	4b                   	dec    ebx
c001dea9:	eb ea                	jmp    c001de95 <Process::Process(char const*, Process*, char**)+0x15>
c001deab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deaf:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001deb6:	83 ec 0c             	sub    esp,0xc
c001deb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001debd:	e8 92 c7 ff ff       	call   c001a654 <Krnl::newProcessEnv(Process*)>
c001dec2:	83 c4 10             	add    esp,0x10
c001dec5:	89 c2                	mov    edx,eax
c001dec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001decb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001ded1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ded5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dede:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c001dee3:	8d 50 01             	lea    edx,[eax+0x1]
c001dee6:	89 15 f0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3f0,edx
c001deec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001def0:	89 02                	mov    DWORD PTR [edx],eax
c001def2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001defa:	83 ec 0c             	sub    esp,0xc
c001defd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001df01:	e8 a0 19 ff ff       	call   c000f8a6 <malloc>
c001df06:	83 c4 10             	add    esp,0x10
c001df09:	89 c3                	mov    ebx,eax
c001df0b:	83 ec 08             	sub    esp,0x8
c001df0e:	6a 00                	push   0x0
c001df10:	53                   	push   ebx
c001df11:	e8 06 48 ff ff       	call   c001271c <VAS::VAS(bool)>
c001df16:	83 c4 10             	add    esp,0x10
c001df19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df1d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001df23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df27:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df35:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df39:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001df3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df43:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df49:	85 c0                	test   eax,eax
c001df4b:	74 42                	je     c001df8f <Process::Process(char const*, Process*, char**)+0x10f>
c001df4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df51:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df57:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df61:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001df67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df6b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df71:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001df77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df7b:	05 0c 01 00 00       	add    eax,0x10c
c001df80:	83 ec 08             	sub    esp,0x8
c001df83:	52                   	push   edx
c001df84:	50                   	push   eax
c001df85:	e8 9e 28 fe ff       	call   c0000828 <strcpy>
c001df8a:	83 c4 10             	add    esp,0x10
c001df8d:	eb 63                	jmp    c001dff2 <Process::Process(char const*, Process*, char**)+0x172>
c001df8f:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001df97:	83 ec 0c             	sub    esp,0xc
c001df9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001df9e:	e8 03 19 ff ff       	call   c000f8a6 <malloc>
c001dfa3:	83 c4 10             	add    esp,0x10
c001dfa6:	89 c3                	mov    ebx,eax
c001dfa8:	83 ec 08             	sub    esp,0x8
c001dfab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfaf:	53                   	push   ebx
c001dfb0:	e8 a7 30 ff ff       	call   c001105c <VgaText::VgaText(char const*)>
c001dfb5:	83 c4 10             	add    esp,0x10
c001dfb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfbc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dfc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfc6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfcc:	83 ec 0c             	sub    esp,0xc
c001dfcf:	50                   	push   eax
c001dfd0:	e8 be 25 ff ff       	call   c0010593 <addToTerminalCycle(VgaText*)>
c001dfd5:	83 c4 10             	add    esp,0x10
c001dfd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfdc:	05 0c 01 00 00       	add    eax,0x10c
c001dfe1:	83 ec 08             	sub    esp,0x8
c001dfe4:	68 cf cb 02 c0       	push   0xc002cbcf
c001dfe9:	50                   	push   eax
c001dfea:	e8 39 28 fe ff       	call   c0000828 <strcpy>
c001dfef:	83 c4 10             	add    esp,0x10
c001dff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dff6:	83 c0 0c             	add    eax,0xc
c001dff9:	83 ec 08             	sub    esp,0x8
c001dffc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e000:	50                   	push   eax
c001e001:	e8 22 28 fe ff       	call   c0000828 <strcpy>
c001e006:	83 c4 10             	add    esp,0x10
c001e009:	83 ec 08             	sub    esp,0x8
c001e00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e010:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e014:	e8 0d fe ff ff       	call   c001de26 <Process::addArgs(char**)>
c001e019:	83 c4 10             	add    esp,0x10
c001e01c:	83 ec 08             	sub    esp,0x8
c001e01f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e023:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e027:	e8 a6 ed ff ff       	call   c001cdd2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e02c:	83 c4 10             	add    esp,0x10
c001e02f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e033:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e037:	83 f0 01             	xor    eax,0x1
c001e03a:	88 c2                	mov    dl,al
c001e03c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e040:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e046:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e04b:	83 ec 08             	sub    esp,0x8
c001e04e:	50                   	push   eax
c001e04f:	68 fc cc 02 c0       	push   0xc002ccfc
c001e054:	e8 e8 4d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e059:	83 c4 10             	add    esp,0x10
c001e05c:	90                   	nop
c001e05d:	83 c4 14             	add    esp,0x14
c001e060:	5b                   	pop    ebx
c001e061:	5e                   	pop    esi
c001e062:	c3                   	ret    
c001e063:	90                   	nop

c001e064 <Process::Process(bool, char const*, Process*, char**)>:
c001e064:	56                   	push   esi
c001e065:	53                   	push   ebx
c001e066:	83 ec 24             	sub    esp,0x24
c001e069:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e06d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e071:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e075:	05 0c 02 00 00       	add    eax,0x20c
c001e07a:	bb 07 00 00 00       	mov    ebx,0x7
c001e07f:	89 c6                	mov    esi,eax
c001e081:	85 db                	test   ebx,ebx
c001e083:	78 12                	js     c001e097 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e085:	83 ec 0c             	sub    esp,0xc
c001e088:	56                   	push   esi
c001e089:	e8 f4 b4 00 00       	call   c0029582 <ThreadControlBlock::ThreadControlBlock()>
c001e08e:	83 c4 10             	add    esp,0x10
c001e091:	83 c6 63             	add    esi,0x63
c001e094:	4b                   	dec    ebx
c001e095:	eb ea                	jmp    c001e081 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e097:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e09b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e0a2:	83 ec 0c             	sub    esp,0xc
c001e0a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0a9:	e8 a6 c5 ff ff       	call   c001a654 <Krnl::newProcessEnv(Process*)>
c001e0ae:	83 c4 10             	add    esp,0x10
c001e0b1:	89 c2                	mov    edx,eax
c001e0b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0b7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0c1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e0ca:	a1 f0 e3 02 c0       	mov    eax,ds:0xc002e3f0
c001e0cf:	8d 50 01             	lea    edx,[eax+0x1]
c001e0d2:	89 15 f0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3f0,edx
c001e0d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e0dc:	89 02                	mov    DWORD PTR [edx],eax
c001e0de:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e0e6:	83 ec 0c             	sub    esp,0xc
c001e0e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e0ed:	e8 b4 17 ff ff       	call   c000f8a6 <malloc>
c001e0f2:	83 c4 10             	add    esp,0x10
c001e0f5:	89 c3                	mov    ebx,eax
c001e0f7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e0fc:	83 ec 08             	sub    esp,0x8
c001e0ff:	50                   	push   eax
c001e100:	53                   	push   ebx
c001e101:	e8 16 46 ff ff       	call   c001271c <VAS::VAS(bool)>
c001e106:	83 c4 10             	add    esp,0x10
c001e109:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e10d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e113:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e117:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e121:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e125:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e129:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e12f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e133:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e139:	85 c0                	test   eax,eax
c001e13b:	74 42                	je     c001e17f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e13d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e141:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e147:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e14d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e151:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e15b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e161:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e167:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e16b:	05 0c 01 00 00       	add    eax,0x10c
c001e170:	83 ec 08             	sub    esp,0x8
c001e173:	52                   	push   edx
c001e174:	50                   	push   eax
c001e175:	e8 ae 26 fe ff       	call   c0000828 <strcpy>
c001e17a:	83 c4 10             	add    esp,0x10
c001e17d:	eb 63                	jmp    c001e1e2 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e17f:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e187:	83 ec 0c             	sub    esp,0xc
c001e18a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e18e:	e8 13 17 ff ff       	call   c000f8a6 <malloc>
c001e193:	83 c4 10             	add    esp,0x10
c001e196:	89 c3                	mov    ebx,eax
c001e198:	83 ec 08             	sub    esp,0x8
c001e19b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e19f:	53                   	push   ebx
c001e1a0:	e8 b7 2e ff ff       	call   c001105c <VgaText::VgaText(char const*)>
c001e1a5:	83 c4 10             	add    esp,0x10
c001e1a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1ac:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e1b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1b6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e1bc:	83 ec 0c             	sub    esp,0xc
c001e1bf:	50                   	push   eax
c001e1c0:	e8 ce 23 ff ff       	call   c0010593 <addToTerminalCycle(VgaText*)>
c001e1c5:	83 c4 10             	add    esp,0x10
c001e1c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1cc:	05 0c 01 00 00       	add    eax,0x10c
c001e1d1:	83 ec 08             	sub    esp,0x8
c001e1d4:	68 cf cb 02 c0       	push   0xc002cbcf
c001e1d9:	50                   	push   eax
c001e1da:	e8 49 26 fe ff       	call   c0000828 <strcpy>
c001e1df:	83 c4 10             	add    esp,0x10
c001e1e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1e6:	83 c0 0c             	add    eax,0xc
c001e1e9:	83 ec 08             	sub    esp,0x8
c001e1ec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e1f0:	50                   	push   eax
c001e1f1:	e8 32 26 fe ff       	call   c0000828 <strcpy>
c001e1f6:	83 c4 10             	add    esp,0x10
c001e1f9:	83 ec 08             	sub    esp,0x8
c001e1fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e200:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e204:	e8 1d fc ff ff       	call   c001de26 <Process::addArgs(char**)>
c001e209:	83 c4 10             	add    esp,0x10
c001e20c:	90                   	nop
c001e20d:	83 c4 24             	add    esp,0x24
c001e210:	5b                   	pop    ebx
c001e211:	5e                   	pop    esi
c001e212:	c3                   	ret    

c001e213 <taskStartupFunction>:
c001e213:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e218:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e21b:	c3                   	ret    

c001e21c <Semaphore::Semaphore(int)>:
c001e21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e220:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e224:	89 10                	mov    DWORD PTR [eax],edx
c001e226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e22a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e235:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e23c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e240:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e247:	90                   	nop
c001e248:	c3                   	ret    
c001e249:	90                   	nop

c001e24a <Mutex::Mutex()>:
c001e24a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e24e:	6a 01                	push   0x1
c001e250:	50                   	push   eax
c001e251:	e8 c6 ff ff ff       	call   c001e21c <Semaphore::Semaphore(int)>
c001e256:	83 c4 08             	add    esp,0x8
c001e259:	90                   	nop
c001e25a:	c3                   	ret    
c001e25b:	90                   	nop

c001e25c <Process::createThread(void (*)(void*), void*, int)>:
c001e25c:	55                   	push   ebp
c001e25d:	31 c9                	xor    ecx,ecx
c001e25f:	57                   	push   edi
c001e260:	56                   	push   esi
c001e261:	53                   	push   ebx
c001e262:	83 ec 1c             	sub    esp,0x1c
c001e265:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e269:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e270:	89 f2                	mov    edx,esi
c001e272:	0f b7 c2             	movzx  eax,dx
c001e275:	83 e2 01             	and    edx,0x1
c001e278:	74 16                	je     c001e290 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e27a:	d1 f8                	sar    eax,1
c001e27c:	41                   	inc    ecx
c001e27d:	89 c2                	mov    edx,eax
c001e27f:	83 f9 10             	cmp    ecx,0x10
c001e282:	75 ee                	jne    c001e272 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e284:	83 c4 1c             	add    esp,0x1c
c001e287:	31 db                	xor    ebx,ebx
c001e289:	89 d8                	mov    eax,ebx
c001e28b:	5b                   	pop    ebx
c001e28c:	5e                   	pop    esi
c001e28d:	5f                   	pop    edi
c001e28e:	5d                   	pop    ebp
c001e28f:	c3                   	ret    
c001e290:	b8 01 00 00 00       	mov    eax,0x1
c001e295:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e298:	d3 e0                	shl    eax,cl
c001e29a:	09 c6                	or     esi,eax
c001e29c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e29f:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e2a6:	89 c6                	mov    esi,eax
c001e2a8:	c1 e6 05             	shl    esi,0x5
c001e2ab:	01 f0                	add    eax,esi
c001e2ad:	01 d8                	add    eax,ebx
c001e2af:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e2b6:	75 0a                	jne    c001e2c2 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e2b8:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e2c2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e2c8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e2cc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e2cf:	01 ca                	add    edx,ecx
c001e2d1:	83 ec 08             	sub    esp,0x8
c001e2d4:	89 d0                	mov    eax,edx
c001e2d6:	c1 e0 05             	shl    eax,0x5
c001e2d9:	01 d0                	add    eax,edx
c001e2db:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e2df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e2e3:	01 d8                	add    eax,ebx
c001e2e5:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e2eb:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e2f1:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e2f7:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e2fd:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e303:	89 cd                	mov    ebp,ecx
c001e305:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e309:	f7 dd                	neg    ebp
c001e30b:	c1 e5 15             	shl    ebp,0x15
c001e30e:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e314:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e31a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e324:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e32a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e334:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e33e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e342:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e349:	53                   	push   ebx
c001e34a:	68 c4 23 03 c0       	push   0xc00323c4
c001e34f:	e8 e8 af 00 00       	call   c002933c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e354:	89 d8                	mov    eax,ebx
c001e356:	83 c4 10             	add    esp,0x10
c001e359:	83 c4 1c             	add    esp,0x1c
c001e35c:	5b                   	pop    ebx
c001e35d:	5e                   	pop    esi
c001e35e:	5f                   	pop    edi
c001e35f:	5d                   	pop    ebp
c001e360:	c3                   	ret    
c001e361:	90                   	nop

c001e362 <Process::createUserThread()>:
c001e362:	83 ec 0c             	sub    esp,0xc
c001e365:	68 80 00 00 00       	push   0x80
c001e36a:	6a 00                	push   0x0
c001e36c:	68 26 dd 01 c0       	push   0xc001dd26
c001e371:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e375:	e8 e2 fe ff ff       	call   c001e25c <Process::createThread(void (*)(void*), void*, int)>
c001e37a:	83 c4 1c             	add    esp,0x1c
c001e37d:	c3                   	ret    

c001e37e <setupMultitasking(void (*)())>:
c001e37e:	56                   	push   esi
c001e37f:	53                   	push   ebx
c001e380:	51                   	push   ecx
c001e381:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e385:	eb 10                	jmp    c001e397 <setupMultitasking(void (*)())+0x19>
c001e387:	83 ec 0c             	sub    esp,0xc
c001e38a:	68 c4 23 03 c0       	push   0xc00323c4
c001e38f:	e8 fa ae 00 00       	call   c002928e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e394:	83 c4 10             	add    esp,0x10
c001e397:	83 ec 0c             	sub    esp,0xc
c001e39a:	68 c4 23 03 c0       	push   0xc00323c4
c001e39f:	e8 c6 ae 00 00       	call   c002926a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e3a4:	83 c4 10             	add    esp,0x10
c001e3a7:	84 c0                	test   al,al
c001e3a9:	74 dc                	je     c001e387 <setupMultitasking(void (*)())+0x9>
c001e3ab:	83 ec 0c             	sub    esp,0xc
c001e3ae:	68 3f 07 00 00       	push   0x73f
c001e3b3:	e8 ee 14 ff ff       	call   c000f8a6 <malloc>
c001e3b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e3bf:	89 c3                	mov    ebx,eax
c001e3c1:	6a 00                	push   0x0
c001e3c3:	68 d3 cb 02 c0       	push   0xc002cbd3
c001e3c8:	6a 01                	push   0x1
c001e3ca:	50                   	push   eax
c001e3cb:	e8 94 fc ff ff       	call   c001e064 <Process::Process(bool, char const*, Process*, char**)>
c001e3d0:	83 c4 18             	add    esp,0x18
c001e3d3:	89 1d d0 23 03 c0    	mov    DWORD PTR ds:0xc00323d0,ebx
c001e3d9:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3df:	68 24 cd 02 c0       	push   0xc002cd24
c001e3e4:	e8 58 4a ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e3e9:	58                   	pop    eax
c001e3ea:	5a                   	pop    edx
c001e3eb:	6a 63                	push   0x63
c001e3ed:	68 58 cd 02 c0       	push   0xc002cd58
c001e3f2:	e8 4a 4a ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e3f7:	59                   	pop    ecx
c001e3f8:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3fe:	e8 61 28 ff ff       	call   c0010c64 <setActiveTerminal(VgaText*)>
c001e403:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e40b:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e415:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e41b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e41e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e428:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e42e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e434:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e43e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e448:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e452:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e458:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e462:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e468:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e472:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e478:	58                   	pop    eax
c001e479:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e47f:	5a                   	pop    edx
c001e480:	68 cf cb 02 c0       	push   0xc002cbcf
c001e485:	50                   	push   eax
c001e486:	e8 9d 23 fe ff       	call   c0000828 <strcpy>
c001e48b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e492:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e496:	83 c4 14             	add    esp,0x14
c001e499:	5b                   	pop    ebx
c001e49a:	5e                   	pop    esi
c001e49b:	e9 b4 1e fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e4a0 <schedule()>:
c001e4a0:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e4a5:	85 c0                	test   eax,eax
c001e4a7:	74 0b                	je     c001e4b4 <schedule()+0x14>
c001e4a9:	c7 05 a0 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x1
c001e4b3:	c3                   	ret    
c001e4b4:	53                   	push   ebx
c001e4b5:	83 ec 14             	sub    esp,0x14
c001e4b8:	68 c4 23 03 c0       	push   0xc00323c4
c001e4bd:	e8 a8 ad 00 00       	call   c002926a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4c2:	83 c4 10             	add    esp,0x10
c001e4c5:	84 c0                	test   al,al
c001e4c7:	75 38                	jne    c001e501 <schedule()+0x61>
c001e4c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e4d1:	4a                   	dec    edx
c001e4d2:	74 32                	je     c001e506 <schedule()+0x66>
c001e4d4:	83 ec 0c             	sub    esp,0xc
c001e4d7:	68 c4 23 03 c0       	push   0xc00323c4
c001e4dc:	e8 a5 ad 00 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4e1:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001e4e8:	89 c3                	mov    ebx,eax
c001e4ea:	e8 9f ad 00 00       	call   c002928e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e4ef:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e4f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e4f9:	e8 7e f8 ff ff       	call   c001dd7c <switchToThread(ThreadControlBlock*)>
c001e4fe:	83 c4 10             	add    esp,0x10
c001e501:	83 c4 08             	add    esp,0x8
c001e504:	5b                   	pop    ebx
c001e505:	c3                   	ret    
c001e506:	83 ec 08             	sub    esp,0x8
c001e509:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e510:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e516:	68 c4 23 03 c0       	push   0xc00323c4
c001e51b:	e8 1c ae 00 00       	call   c002933c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e520:	83 c4 10             	add    esp,0x10
c001e523:	eb af                	jmp    c001e4d4 <schedule()+0x34>
c001e525:	90                   	nop

c001e526 <Semaphore::tryAcquire()>:
c001e526:	53                   	push   ebx
c001e527:	83 ec 08             	sub    esp,0x8
c001e52a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e52e:	fa                   	cli    
c001e52f:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e534:	8d 50 01             	lea    edx,[eax+0x1]
c001e537:	89 15 a8 23 03 c0    	mov    DWORD PTR ds:0xc00323a8,edx
c001e53d:	8b 15 a4 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323a4
c001e543:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e546:	89 1d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,ebx
c001e54c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e54f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e551:	7c 2a                	jl     c001e57d <Semaphore::tryAcquire()+0x57>
c001e553:	89 15 a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,edx
c001e559:	85 d2                	test   edx,edx
c001e55b:	75 0a                	jne    c001e567 <Semaphore::tryAcquire()+0x41>
c001e55d:	8b 15 a0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323a0
c001e563:	85 d2                	test   edx,edx
c001e565:	75 5b                	jne    c001e5c2 <Semaphore::tryAcquire()+0x9c>
c001e567:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e56c:	85 c0                	test   eax,eax
c001e56e:	74 07                	je     c001e577 <Semaphore::tryAcquire()+0x51>
c001e570:	31 c0                	xor    eax,eax
c001e572:	83 c4 08             	add    esp,0x8
c001e575:	5b                   	pop    ebx
c001e576:	c3                   	ret    
c001e577:	fb                   	sti    
c001e578:	83 c4 08             	add    esp,0x8
c001e57b:	5b                   	pop    ebx
c001e57c:	c3                   	ret    
c001e57d:	43                   	inc    ebx
c001e57e:	89 15 a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,edx
c001e584:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e587:	85 d2                	test   edx,edx
c001e589:	75 1f                	jne    c001e5aa <Semaphore::tryAcquire()+0x84>
c001e58b:	8b 0d a0 23 03 c0    	mov    ecx,DWORD PTR ds:0xc00323a0
c001e591:	85 c9                	test   ecx,ecx
c001e593:	74 15                	je     c001e5aa <Semaphore::tryAcquire()+0x84>
c001e595:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001e59f:	e8 fc fe ff ff       	call   c001e4a0 <schedule()>
c001e5a4:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e5a9:	48                   	dec    eax
c001e5aa:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e5af:	85 c0                	test   eax,eax
c001e5b1:	75 08                	jne    c001e5bb <Semaphore::tryAcquire()+0x95>
c001e5b3:	fb                   	sti    
c001e5b4:	b0 01                	mov    al,0x1
c001e5b6:	83 c4 08             	add    esp,0x8
c001e5b9:	5b                   	pop    ebx
c001e5ba:	c3                   	ret    
c001e5bb:	b0 01                	mov    al,0x1
c001e5bd:	83 c4 08             	add    esp,0x8
c001e5c0:	5b                   	pop    ebx
c001e5c1:	c3                   	ret    
c001e5c2:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001e5cc:	e8 cf fe ff ff       	call   c001e4a0 <schedule()>
c001e5d1:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e5d6:	48                   	dec    eax
c001e5d7:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e5dc:	85 c0                	test   eax,eax
c001e5de:	75 90                	jne    c001e570 <Semaphore::tryAcquire()+0x4a>
c001e5e0:	eb 95                	jmp    c001e577 <Semaphore::tryAcquire()+0x51>

c001e5e2 <Semaphore::assertLocked(char const*)>:
c001e5e2:	83 ec 0c             	sub    esp,0xc
c001e5e5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e5e9:	fa                   	cli    
c001e5ea:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e5f0:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e5f5:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5f8:	89 0d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,ecx
c001e5fe:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e600:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e603:	7c 24                	jl     c001e629 <Semaphore::assertLocked(char const*)+0x47>
c001e605:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001e60a:	85 c0                	test   eax,eax
c001e60c:	75 09                	jne    c001e617 <Semaphore::assertLocked(char const*)+0x35>
c001e60e:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c001e613:	85 c0                	test   eax,eax
c001e615:	75 29                	jne    c001e640 <Semaphore::assertLocked(char const*)+0x5e>
c001e617:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e61c:	48                   	dec    eax
c001e61d:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e622:	75 01                	jne    c001e625 <Semaphore::assertLocked(char const*)+0x43>
c001e624:	fb                   	sti    
c001e625:	83 c4 0c             	add    esp,0xc
c001e628:	c3                   	ret    
c001e629:	83 ec 0c             	sub    esp,0xc
c001e62c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e630:	e8 c6 c1 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001e635:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	48                   	dec    eax
c001e63e:	eb c5                	jmp    c001e605 <Semaphore::assertLocked(char const*)+0x23>
c001e640:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001e64a:	e8 51 fe ff ff       	call   c001e4a0 <schedule()>
c001e64f:	eb c6                	jmp    c001e617 <Semaphore::assertLocked(char const*)+0x35>

c001e651 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e651:	83 ec 14             	sub    esp,0x14
c001e654:	ff 35 a8 23 03 c0    	push   DWORD PTR ds:0xc00323a8
c001e65a:	68 7c cd 02 c0       	push   0xc002cd7c
c001e65f:	e8 dd 47 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e664:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e669:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e66d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e670:	e8 2b fe ff ff       	call   c001e4a0 <schedule()>
c001e675:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e67a:	83 c4 10             	add    esp,0x10
c001e67d:	48                   	dec    eax
c001e67e:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e683:	85 c0                	test   eax,eax
c001e685:	75 06                	jne    c001e68d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e687:	fb                   	sti    
c001e688:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e68d:	83 ec 08             	sub    esp,0x8
c001e690:	50                   	push   eax
c001e691:	68 b0 cd 02 c0       	push   0xc002cdb0
c001e696:	e8 a6 47 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e69b:	83 c4 1c             	add    esp,0x1c
c001e69e:	c3                   	ret    

c001e69f <blockTask(TaskState)>:
c001e69f:	83 ec 0c             	sub    esp,0xc
c001e6a2:	fa                   	cli    
c001e6a3:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e6a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e6ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6b5:	e8 e6 fd ff ff       	call   c001e4a0 <schedule()>
c001e6ba:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e6bf:	48                   	dec    eax
c001e6c0:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e6c5:	75 01                	jne    c001e6c8 <blockTask(TaskState)+0x29>
c001e6c7:	fb                   	sti    
c001e6c8:	83 c4 0c             	add    esp,0xc
c001e6cb:	c3                   	ret    

c001e6cc <waitTask(int, int*, int)>:
c001e6cc:	83 ec 18             	sub    esp,0x18
c001e6cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6d8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e6db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6e4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e6e7:	6a 07                	push   0x7
c001e6e9:	e8 b1 ff ff ff       	call   c001e69f <blockTask(TaskState)>
c001e6ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6f3:	83 c4 10             	add    esp,0x10
c001e6f6:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e6f9:	85 d2                	test   edx,edx
c001e6fb:	74 0a                	je     c001e707 <waitTask(int, int*, int)+0x3b>
c001e6fd:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e700:	89 02                	mov    DWORD PTR [edx],eax
c001e702:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e707:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e70a:	83 c4 0c             	add    esp,0xc
c001e70d:	c3                   	ret    

c001e70e <nanoSleepUntil(unsigned long long)>:
c001e70e:	83 ec 0c             	sub    esp,0xc
c001e711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e715:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e719:	3b 05 f0 f4 02 c0    	cmp    eax,DWORD PTR ds:0xc002f4f0
c001e71f:	89 d1                	mov    ecx,edx
c001e721:	1b 0d f4 f4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f4f4
c001e727:	73 04                	jae    c001e72d <nanoSleepUntil(unsigned long long)+0x1f>
c001e729:	83 c4 0c             	add    esp,0xc
c001e72c:	c3                   	ret    
c001e72d:	fa                   	cli    
c001e72e:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e734:	83 ec 08             	sub    esp,0x8
c001e737:	ff 05 a4 23 03 c0    	inc    DWORD PTR ds:0xc00323a4
c001e73d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e743:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e746:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e749:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e74f:	68 b8 23 03 c0       	push   0xc00323b8
c001e754:	e8 e3 ab 00 00       	call   c002933c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e759:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e760:	e8 3a ff ff ff       	call   c001e69f <blockTask(TaskState)>
c001e765:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e76a:	83 c4 10             	add    esp,0x10
c001e76d:	48                   	dec    eax
c001e76e:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001e773:	85 c0                	test   eax,eax
c001e775:	75 09                	jne    c001e780 <nanoSleepUntil(unsigned long long)+0x72>
c001e777:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c001e77c:	85 c0                	test   eax,eax
c001e77e:	75 12                	jne    c001e792 <nanoSleepUntil(unsigned long long)+0x84>
c001e780:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e785:	48                   	dec    eax
c001e786:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e78b:	75 9c                	jne    c001e729 <nanoSleepUntil(unsigned long long)+0x1b>
c001e78d:	fb                   	sti    
c001e78e:	83 c4 0c             	add    esp,0xc
c001e791:	c3                   	ret    
c001e792:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001e79c:	e8 ff fc ff ff       	call   c001e4a0 <schedule()>
c001e7a1:	eb dd                	jmp    c001e780 <nanoSleepUntil(unsigned long long)+0x72>

c001e7a3 <nanoSleep(unsigned long long)>:
c001e7a3:	a1 f0 f4 02 c0       	mov    eax,ds:0xc002f4f0
c001e7a8:	8b 15 f4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4f4
c001e7ae:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e7b2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e7b6:	e9 53 ff ff ff       	jmp    c001e70e <nanoSleepUntil(unsigned long long)>

c001e7bb <sleep(unsigned long long)>:
c001e7bb:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e7c3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e7c8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e7cc:	01 ca                	add    edx,ecx
c001e7ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e7d2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7d6:	eb cb                	jmp    c001e7a3 <nanoSleep(unsigned long long)>

c001e7d8 <Semaphore::acquire()>:
c001e7d8:	83 ec 0c             	sub    esp,0xc
c001e7db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7df:	fa                   	cli    
c001e7e0:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e7e5:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e7eb:	8d 48 01             	lea    ecx,[eax+0x1]
c001e7ee:	89 0d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,ecx
c001e7f4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e7f7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e7f9:	7d 28                	jge    c001e823 <Semaphore::acquire()+0x4b>
c001e7fb:	41                   	inc    ecx
c001e7fc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e7ff:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001e804:	85 c0                	test   eax,eax
c001e806:	75 09                	jne    c001e811 <Semaphore::acquire()+0x39>
c001e808:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c001e80d:	85 c0                	test   eax,eax
c001e80f:	75 4e                	jne    c001e85f <Semaphore::acquire()+0x87>
c001e811:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e816:	48                   	dec    eax
c001e817:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e81c:	75 01                	jne    c001e81f <Semaphore::acquire()+0x47>
c001e81e:	fb                   	sti    
c001e81f:	83 c4 0c             	add    esp,0xc
c001e822:	c3                   	ret    
c001e823:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e828:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e82f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e832:	85 c9                	test   ecx,ecx
c001e834:	74 3a                	je     c001e870 <Semaphore::acquire()+0x98>
c001e836:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e839:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e83f:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e842:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e847:	83 ec 0c             	sub    esp,0xc
c001e84a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e84d:	6a 05                	push   0x5
c001e84f:	e8 4b fe ff ff       	call   c001e69f <blockTask(TaskState)>
c001e854:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001e859:	83 c4 10             	add    esp,0x10
c001e85c:	48                   	dec    eax
c001e85d:	eb a0                	jmp    c001e7ff <Semaphore::acquire()+0x27>
c001e85f:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001e869:	e8 32 fc ff ff       	call   c001e4a0 <schedule()>
c001e86e:	eb a1                	jmp    c001e811 <Semaphore::acquire()+0x39>
c001e870:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e875:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e878:	eb c8                	jmp    c001e842 <Semaphore::acquire()+0x6a>

c001e87a <taskReturned>:
c001e87a:	83 ec 18             	sub    esp,0x18
c001e87d:	68 e4 cd 02 c0       	push   0xc002cde4
c001e882:	e8 74 bf ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001e887:	83 c4 10             	add    esp,0x10
c001e88a:	83 ec 0c             	sub    esp,0xc
c001e88d:	6a 02                	push   0x2
c001e88f:	e8 0b fe ff ff       	call   c001e69f <blockTask(TaskState)>
c001e894:	fa                   	cli    
c001e895:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e89b:	e8 00 fc ff ff       	call   c001e4a0 <schedule()>
c001e8a0:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	48                   	dec    eax
c001e8a9:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e8ae:	85 c0                	test   eax,eax
c001e8b0:	75 d8                	jne    c001e88a <taskReturned+0x10>
c001e8b2:	fb                   	sti    
c001e8b3:	eb d5                	jmp    c001e88a <taskReturned+0x10>

c001e8b5 <Thr::processFromPID(int)>:
c001e8b5:	57                   	push   edi
c001e8b6:	56                   	push   esi
c001e8b7:	53                   	push   ebx
c001e8b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8bc:	83 ec 0c             	sub    esp,0xc
c001e8bf:	68 da cb 02 c0       	push   0xc002cbda
c001e8c4:	e8 78 45 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e8c9:	fa                   	cli    
c001e8ca:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e8d0:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001e8d7:	e8 aa a9 00 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8dc:	83 c4 10             	add    esp,0x10
c001e8df:	89 c7                	mov    edi,eax
c001e8e1:	eb 14                	jmp    c001e8f7 <Thr::processFromPID(int)+0x42>
c001e8e3:	83 ec 0c             	sub    esp,0xc
c001e8e6:	68 c4 23 03 c0       	push   0xc00323c4
c001e8eb:	e8 96 a9 00 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8f0:	83 c4 10             	add    esp,0x10
c001e8f3:	39 f8                	cmp    eax,edi
c001e8f5:	74 49                	je     c001e940 <Thr::processFromPID(int)+0x8b>
c001e8f7:	83 ec 0c             	sub    esp,0xc
c001e8fa:	68 c4 23 03 c0       	push   0xc00323c4
c001e8ff:	e8 82 a9 00 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e904:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001e90b:	89 c3                	mov    ebx,eax
c001e90d:	e8 7c a9 00 00       	call   c002928e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e912:	58                   	pop    eax
c001e913:	5a                   	pop    edx
c001e914:	53                   	push   ebx
c001e915:	68 c4 23 03 c0       	push   0xc00323c4
c001e91a:	e8 1d aa 00 00       	call   c002933c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e91f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e922:	83 c4 10             	add    esp,0x10
c001e925:	39 30                	cmp    DWORD PTR [eax],esi
c001e927:	75 ba                	jne    c001e8e3 <Thr::processFromPID(int)+0x2e>
c001e929:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e92e:	48                   	dec    eax
c001e92f:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e934:	74 07                	je     c001e93d <Thr::processFromPID(int)+0x88>
c001e936:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e939:	5b                   	pop    ebx
c001e93a:	5e                   	pop    esi
c001e93b:	5f                   	pop    edi
c001e93c:	c3                   	ret    
c001e93d:	fb                   	sti    
c001e93e:	eb f6                	jmp    c001e936 <Thr::processFromPID(int)+0x81>
c001e940:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e945:	48                   	dec    eax
c001e946:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e94b:	75 01                	jne    c001e94e <Thr::processFromPID(int)+0x99>
c001e94d:	fb                   	sti    
c001e94e:	83 ec 0c             	sub    esp,0xc
c001e951:	68 f5 cb 02 c0       	push   0xc002cbf5
c001e956:	e8 e6 44 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e95b:	83 c4 10             	add    esp,0x10
c001e95e:	31 c0                	xor    eax,eax
c001e960:	5b                   	pop    ebx
c001e961:	5e                   	pop    esi
c001e962:	5f                   	pop    edi
c001e963:	c3                   	ret    

c001e964 <unblockTask(ThreadControlBlock*)>:
c001e964:	53                   	push   ebx
c001e965:	83 ec 08             	sub    esp,0x8
c001e968:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e96c:	fa                   	cli    
c001e96d:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001e973:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e976:	85 c0                	test   eax,eax
c001e978:	74 66                	je     c001e9e0 <unblockTask(ThreadControlBlock*)+0x7c>
c001e97a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e97d:	48                   	dec    eax
c001e97e:	74 31                	je     c001e9b1 <unblockTask(ThreadControlBlock*)+0x4d>
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	68 c4 23 03 c0       	push   0xc00323c4
c001e988:	e8 f9 a8 00 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e98d:	83 c4 10             	add    esp,0x10
c001e990:	85 c0                	test   eax,eax
c001e992:	75 17                	jne    c001e9ab <unblockTask(ThreadControlBlock*)+0x47>
c001e994:	eb 68                	jmp    c001e9fe <unblockTask(ThreadControlBlock*)+0x9a>
c001e996:	83 ec 08             	sub    esp,0x8
c001e999:	50                   	push   eax
c001e99a:	68 c4 23 03 c0       	push   0xc00323c4
c001e99f:	e8 80 ac 00 00       	call   c0029624 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e9a4:	83 c4 10             	add    esp,0x10
c001e9a7:	85 c0                	test   eax,eax
c001e9a9:	74 53                	je     c001e9fe <unblockTask(ThreadControlBlock*)+0x9a>
c001e9ab:	39 c3                	cmp    ebx,eax
c001e9ad:	75 e7                	jne    c001e996 <unblockTask(ThreadControlBlock*)+0x32>
c001e9af:	eb 1c                	jmp    c001e9cd <unblockTask(ThreadControlBlock*)+0x69>
c001e9b1:	83 ec 0c             	sub    esp,0xc
c001e9b4:	68 d4 ce 02 c0       	push   0xc002ced4
c001e9b9:	e8 83 44 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e9be:	c7 04 24 60 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce60
c001e9c5:	e8 77 44 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e9ca:	83 c4 10             	add    esp,0x10
c001e9cd:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001e9d2:	48                   	dec    eax
c001e9d3:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001e9d8:	75 01                	jne    c001e9db <unblockTask(ThreadControlBlock*)+0x77>
c001e9da:	fb                   	sti    
c001e9db:	83 c4 08             	add    esp,0x8
c001e9de:	5b                   	pop    ebx
c001e9df:	c3                   	ret    
c001e9e0:	83 ec 0c             	sub    esp,0xc
c001e9e3:	68 18 ce 02 c0       	push   0xc002ce18
c001e9e8:	e8 54 44 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e9ed:	c7 04 24 60 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce60
c001e9f4:	e8 48 44 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001e9f9:	83 c4 10             	add    esp,0x10
c001e9fc:	eb cf                	jmp    c001e9cd <unblockTask(ThreadControlBlock*)+0x69>
c001e9fe:	83 ec 08             	sub    esp,0x8
c001ea01:	53                   	push   ebx
c001ea02:	68 c4 23 03 c0       	push   0xc00323c4
c001ea07:	e8 30 a9 00 00       	call   c002933c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea0c:	83 c4 10             	add    esp,0x10
c001ea0f:	eb bc                	jmp    c001e9cd <unblockTask(ThreadControlBlock*)+0x69>

c001ea11 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ea11:	55                   	push   ebp
c001ea12:	57                   	push   edi
c001ea13:	56                   	push   esi
c001ea14:	53                   	push   ebx
c001ea15:	83 ec 1c             	sub    esp,0x1c
c001ea18:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea1c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea1f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ea25:	85 ff                	test   edi,edi
c001ea27:	7e 20                	jle    c001ea49 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ea29:	31 f6                	xor    esi,esi
c001ea2b:	83 ec 0c             	sub    esp,0xc
c001ea2e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ea35:	46                   	inc    esi
c001ea36:	e8 7b 0e ff ff       	call   c000f8b6 <free>
c001ea3b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea3e:	83 c4 10             	add    esp,0x10
c001ea41:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ea47:	7f e2                	jg     c001ea2b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ea49:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ea53:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ea58:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ea5b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea5e:	d3 c0                	rol    eax,cl
c001ea60:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ea67:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea6a:	89 f7                	mov    edi,esi
c001ea6c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ea74:	0f 85 74 01 00 00    	jne    c001ebee <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ea7a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ea80:	85 ed                	test   ebp,ebp
c001ea82:	74 1b                	je     c001ea9f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ea84:	83 ec 0c             	sub    esp,0xc
c001ea87:	55                   	push   ebp
c001ea88:	e8 e3 ba ff ff       	call   c001a570 <EnvVarContainer::~EnvVarContainer()>
c001ea8d:	59                   	pop    ecx
c001ea8e:	5e                   	pop    esi
c001ea8f:	6a 0c                	push   0xc
c001ea91:	55                   	push   ebp
c001ea92:	e8 ca 42 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c001ea97:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea9a:	83 c4 10             	add    esp,0x10
c001ea9d:	89 f7                	mov    edi,esi
c001ea9f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eaa5:	85 c0                	test   eax,eax
c001eaa7:	0f 84 aa 00 00 00    	je     c001eb57 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eaad:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001eab0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eab4:	31 c9                	xor    ecx,ecx
c001eab6:	eb 10                	jmp    c001eac8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001eab8:	41                   	inc    ecx
c001eab9:	83 f9 10             	cmp    ecx,0x10
c001eabc:	0f 84 95 00 00 00    	je     c001eb57 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eac2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eac8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001eacf:	d3 fa                	sar    edx,cl
c001ead1:	83 e2 01             	and    edx,0x1
c001ead4:	74 e2                	je     c001eab8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ead6:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ead9:	01 ca                	add    edx,ecx
c001eadb:	89 d5                	mov    ebp,edx
c001eadd:	c1 e5 05             	shl    ebp,0x5
c001eae0:	01 ea                	add    edx,ebp
c001eae2:	01 d0                	add    eax,edx
c001eae4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001eaea:	83 fd 07             	cmp    ebp,0x7
c001eaed:	75 c9                	jne    c001eab8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eaef:	05 40 02 00 00       	add    eax,0x240
c001eaf4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001eaf7:	83 fd ff             	cmp    ebp,0xffffffff
c001eafa:	0f 8c 08 01 00 00    	jl     c001ec08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001eb00:	0f 84 b9 01 00 00    	je     c001ecbf <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eb06:	85 ed                	test   ebp,ebp
c001eb08:	0f 84 a0 01 00 00    	je     c001ecae <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eb0e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001eb10:	75 a6                	jne    c001eab8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb12:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eb18:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb1c:	01 d0                	add    eax,edx
c001eb1e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eb22:	83 ec 0c             	sub    esp,0xc
c001eb25:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001eb2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb2e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001eb34:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001eb3b:	50                   	push   eax
c001eb3c:	e8 23 fe ff ff       	call   c001e964 <unblockTask(ThreadControlBlock*)>
c001eb41:	83 c4 10             	add    esp,0x10
c001eb44:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb47:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb4b:	89 f7                	mov    edi,esi
c001eb4d:	41                   	inc    ecx
c001eb4e:	83 f9 10             	cmp    ecx,0x10
c001eb51:	0f 85 6b ff ff ff    	jne    c001eac2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001eb57:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eb5d:	85 c0                	test   eax,eax
c001eb5f:	74 5d                	je     c001ebbe <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb61:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001eb67:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001eb6d:	74 4f                	je     c001ebbe <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb6f:	83 ec 0c             	sub    esp,0xc
c001eb72:	68 c4 23 03 c0       	push   0xc00323c4
c001eb77:	e8 0a a7 00 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb7c:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001eb83:	89 c7                	mov    edi,eax
c001eb85:	e8 e0 a6 00 00       	call   c002926a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eb8a:	83 c4 10             	add    esp,0x10
c001eb8d:	84 c0                	test   al,al
c001eb8f:	0f 84 e4 00 00 00    	je     c001ec79 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001eb95:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb98:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001eb9e:	85 d2                	test   edx,edx
c001eba0:	74 0f                	je     c001ebb1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001eba2:	83 ec 0c             	sub    esp,0xc
c001eba5:	8b 02                	mov    eax,DWORD PTR [edx]
c001eba7:	52                   	push   edx
c001eba8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ebab:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ebae:	83 c4 10             	add    esp,0x10
c001ebb1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ebbb:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ebbe:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ebc4:	85 db                	test   ebx,ebx
c001ebc6:	74 16                	je     c001ebde <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ebc8:	83 ec 0c             	sub    esp,0xc
c001ebcb:	53                   	push   ebx
c001ebcc:	e8 25 35 ff ff       	call   c00120f6 <VAS::~VAS()>
c001ebd1:	58                   	pop    eax
c001ebd2:	5a                   	pop    edx
c001ebd3:	6a 14                	push   0x14
c001ebd5:	53                   	push   ebx
c001ebd6:	e8 86 41 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c001ebdb:	83 c4 10             	add    esp,0x10
c001ebde:	83 ec 0c             	sub    esp,0xc
c001ebe1:	68 0c cc 02 c0       	push   0xc002cc0c
c001ebe6:	e8 56 42 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001ebeb:	83 c4 10             	add    esp,0x10
c001ebee:	83 ec 08             	sub    esp,0x8
c001ebf1:	68 3f 07 00 00       	push   0x73f
c001ebf6:	68 1a cc 02 c0       	push   0xc002cc1a
c001ebfb:	e8 41 42 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001ec00:	83 c4 2c             	add    esp,0x2c
c001ec03:	5b                   	pop    ebx
c001ec04:	5e                   	pop    esi
c001ec05:	5f                   	pop    edi
c001ec06:	5d                   	pop    ebp
c001ec07:	c3                   	ret    
c001ec08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec0c:	83 ec 0c             	sub    esp,0xc
c001ec0f:	68 18 cf 02 c0       	push   0xc002cf18
c001ec14:	e8 e2 bb ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001ec19:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec1c:	83 c4 10             	add    esp,0x10
c001ec1f:	89 f7                	mov    edi,esi
c001ec21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec25:	e9 8e fe ff ff       	jmp    c001eab8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec2a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ec30:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ec36:	75 1c                	jne    c001ec54 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec38:	83 ec 0c             	sub    esp,0xc
c001ec3b:	68 80 cf 02 c0       	push   0xc002cf80
c001ec40:	e8 fc 41 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001ec45:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ec4c:	e8 4e fa ff ff       	call   c001e69f <blockTask(TaskState)>
c001ec51:	83 c4 10             	add    esp,0x10
c001ec54:	83 ec 08             	sub    esp,0x8
c001ec57:	56                   	push   esi
c001ec58:	68 c4 23 03 c0       	push   0xc00323c4
c001ec5d:	e8 da a6 00 00       	call   c002933c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec62:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001ec69:	e8 18 a6 00 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec6e:	83 c4 10             	add    esp,0x10
c001ec71:	39 f8                	cmp    eax,edi
c001ec73:	0f 84 1c ff ff ff    	je     c001eb95 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ec79:	83 ec 0c             	sub    esp,0xc
c001ec7c:	68 c4 23 03 c0       	push   0xc00323c4
c001ec81:	e8 00 a6 00 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec86:	c7 04 24 c4 23 03 c0 	mov    DWORD PTR [esp],0xc00323c4
c001ec8d:	89 c6                	mov    esi,eax
c001ec8f:	e8 fa a5 00 00       	call   c002928e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ec94:	83 c4 10             	add    esp,0x10
c001ec97:	39 f3                	cmp    ebx,esi
c001ec99:	74 b9                	je     c001ec54 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec9b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ec9e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eca1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001eca7:	75 ab                	jne    c001ec54 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eca9:	e9 7c ff ff ff       	jmp    c001ec2a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ecae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ecb2:	83 ec 0c             	sub    esp,0xc
c001ecb5:	68 4c cf 02 c0       	push   0xc002cf4c
c001ecba:	e9 55 ff ff ff       	jmp    c001ec14 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ecbf:	8b 36                	mov    esi,DWORD PTR [esi]
c001ecc1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ecc5:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ecc8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eccb:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ecd1:	01 d7                	add    edi,edx
c001ecd3:	89 f8                	mov    eax,edi
c001ecd5:	e9 44 fe ff ff       	jmp    c001eb1e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ecda <cleanerTaskFunction(void*)>:
c001ecda:	53                   	push   ebx
c001ecdb:	83 ec 08             	sub    esp,0x8
c001ecde:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ece3:	48                   	dec    eax
c001ece4:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ece9:	75 01                	jne    c001ecec <cleanerTaskFunction(void*)+0x12>
c001eceb:	fb                   	sti    
c001ecec:	fa                   	cli    
c001eced:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ecf2:	80 3d 8c 23 03 c0 00 	cmp    BYTE PTR ds:0xc003238c,0x0
c001ecf9:	8d 50 01             	lea    edx,[eax+0x1]
c001ecfc:	89 15 a8 23 03 c0    	mov    DWORD PTR ds:0xc00323a8,edx
c001ed02:	0f 84 b9 00 00 00    	je     c001edc1 <cleanerTaskFunction(void*)+0xe7>
c001ed08:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ed0d:	85 c0                	test   eax,eax
c001ed0f:	75 01                	jne    c001ed12 <cleanerTaskFunction(void*)+0x38>
c001ed11:	fb                   	sti    
c001ed12:	c6 05 8c 23 03 c0 00 	mov    BYTE PTR ds:0xc003238c,0x0
c001ed19:	fa                   	cli    
c001ed1a:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001ed20:	ff 05 a4 23 03 c0    	inc    DWORD PTR ds:0xc00323a4
c001ed26:	fa                   	cli    
c001ed27:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001ed2d:	eb 3e                	jmp    c001ed6d <cleanerTaskFunction(void*)+0x93>
c001ed2f:	83 ec 0c             	sub    esp,0xc
c001ed32:	68 ac 23 03 c0       	push   0xc00323ac
c001ed37:	e8 4a a5 00 00       	call   c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed3c:	c7 04 24 ac 23 03 c0 	mov    DWORD PTR [esp],0xc00323ac
c001ed43:	89 c3                	mov    ebx,eax
c001ed45:	e8 44 a5 00 00       	call   c002928e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ed4a:	c7 04 24 30 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc30
c001ed51:	e8 eb 40 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001ed56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed59:	e8 b3 fc ff ff       	call   c001ea11 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ed5e:	c7 04 24 49 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc49
c001ed65:	e8 d7 40 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001ed6a:	83 c4 10             	add    esp,0x10
c001ed6d:	83 ec 0c             	sub    esp,0xc
c001ed70:	68 ac 23 03 c0       	push   0xc00323ac
c001ed75:	e8 f0 a4 00 00       	call   c002926a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed7a:	83 c4 10             	add    esp,0x10
c001ed7d:	84 c0                	test   al,al
c001ed7f:	74 ae                	je     c001ed2f <cleanerTaskFunction(void*)+0x55>
c001ed81:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ed86:	48                   	dec    eax
c001ed87:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ed8c:	75 01                	jne    c001ed8f <cleanerTaskFunction(void*)+0xb5>
c001ed8e:	fb                   	sti    
c001ed8f:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001ed94:	48                   	dec    eax
c001ed95:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001ed9a:	0f 85 3e ff ff ff    	jne    c001ecde <cleanerTaskFunction(void*)+0x4>
c001eda0:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c001eda5:	85 c0                	test   eax,eax
c001eda7:	0f 84 31 ff ff ff    	je     c001ecde <cleanerTaskFunction(void*)+0x4>
c001edad:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001edb7:	e8 e4 f6 ff ff       	call   c001e4a0 <schedule()>
c001edbc:	e9 1d ff ff ff       	jmp    c001ecde <cleanerTaskFunction(void*)+0x4>
c001edc1:	83 ec 0c             	sub    esp,0xc
c001edc4:	6a 02                	push   0x2
c001edc6:	e8 86 f8 ff ff       	call   c001e651 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001edcb:	83 c4 10             	add    esp,0x10
c001edce:	e9 3f ff ff ff       	jmp    c001ed12 <cleanerTaskFunction(void*)+0x38>

c001edd3 <terminateTask(int)>:
c001edd3:	83 ec 14             	sub    esp,0x14
c001edd6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eddb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001edde:	83 c0 0c             	add    eax,0xc
c001ede1:	50                   	push   eax
c001ede2:	68 a8 cf 02 c0       	push   0xc002cfa8
c001ede7:	e8 55 40 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001edec:	fa                   	cli    
c001eded:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001edf3:	ff 05 a4 23 03 c0    	inc    DWORD PTR ds:0xc00323a4
c001edf9:	fa                   	cli    
c001edfa:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001ee00:	c7 04 24 5c cc 02 c0 	mov    DWORD PTR [esp],0xc002cc5c
c001ee07:	e8 35 40 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001ee0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ee10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee15:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ee18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee1d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ee20:	5a                   	pop    edx
c001ee21:	59                   	pop    ecx
c001ee22:	50                   	push   eax
c001ee23:	68 ac 23 03 c0       	push   0xc00323ac
c001ee28:	e8 0f a5 00 00       	call   c002933c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ee2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee32:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ee39:	c7 04 24 76 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc76
c001ee40:	e8 fc 3f ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001ee45:	83 c4 10             	add    esp,0x10
c001ee48:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ee4d:	85 c0                	test   eax,eax
c001ee4f:	0f 84 8d 00 00 00    	je     c001eee2 <terminateTask(int)+0x10f>
c001ee55:	83 ec 0c             	sub    esp,0xc
c001ee58:	68 90 cc 02 c0       	push   0xc002cc90
c001ee5d:	e8 df 3f ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001ee62:	58                   	pop    eax
c001ee63:	c6 05 8c 23 03 c0 01 	mov    BYTE PTR ds:0xc003238c,0x1
c001ee6a:	ff 35 88 23 03 c0    	push   DWORD PTR ds:0xc0032388
c001ee70:	e8 ef fa ff ff       	call   c001e964 <unblockTask(ThreadControlBlock*)>
c001ee75:	c7 04 24 aa cc 02 c0 	mov    DWORD PTR [esp],0xc002ccaa
c001ee7c:	e8 c0 3f ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001ee81:	83 c4 10             	add    esp,0x10
c001ee84:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ee89:	48                   	dec    eax
c001ee8a:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ee8f:	75 01                	jne    c001ee92 <terminateTask(int)+0xbf>
c001ee91:	fb                   	sti    
c001ee92:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001ee97:	48                   	dec    eax
c001ee98:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001ee9d:	75 09                	jne    c001eea8 <terminateTask(int)+0xd5>
c001ee9f:	83 3d a0 23 03 c0 00 	cmp    DWORD PTR ds:0xc00323a0,0x0
c001eea6:	75 4c                	jne    c001eef4 <terminateTask(int)+0x121>
c001eea8:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001eead:	48                   	dec    eax
c001eeae:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001eeb3:	75 01                	jne    c001eeb6 <terminateTask(int)+0xe3>
c001eeb5:	fb                   	sti    
c001eeb6:	83 ec 0c             	sub    esp,0xc
c001eeb9:	68 e2 cc 02 c0       	push   0xc002cce2
c001eebe:	e8 7e 3f ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001eec3:	83 c4 10             	add    esp,0x10
c001eec6:	fa                   	cli    
c001eec7:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001eecd:	e8 ce f5 ff ff       	call   c001e4a0 <schedule()>
c001eed2:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001eed7:	48                   	dec    eax
c001eed8:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001eedd:	75 e7                	jne    c001eec6 <terminateTask(int)+0xf3>
c001eedf:	fb                   	sti    
c001eee0:	eb e4                	jmp    c001eec6 <terminateTask(int)+0xf3>
c001eee2:	83 ec 0c             	sub    esp,0xc
c001eee5:	68 c4 cc 02 c0       	push   0xc002ccc4
c001eeea:	e8 52 3f ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001eeef:	83 c4 10             	add    esp,0x10
c001eef2:	eb 90                	jmp    c001ee84 <terminateTask(int)+0xb1>
c001eef4:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001eefe:	e8 9d f5 ff ff       	call   c001e4a0 <schedule()>
c001ef03:	eb a3                	jmp    c001eea8 <terminateTask(int)+0xd5>

c001ef05 <Thr::terminateFromIRQ(int)>:
c001ef05:	83 ec 18             	sub    esp,0x18
c001ef08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef0c:	e8 c2 fe ff ff       	call   c001edd3 <terminateTask(int)>
c001ef11:	90                   	nop

c001ef12 <Semaphore::release()>:
c001ef12:	83 ec 0c             	sub    esp,0xc
c001ef15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef19:	fa                   	cli    
c001ef1a:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001ef1f:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001ef25:	8d 48 01             	lea    ecx,[eax+0x1]
c001ef28:	89 0d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,ecx
c001ef2e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ef31:	85 c9                	test   ecx,ecx
c001ef33:	74 3c                	je     c001ef71 <Semaphore::release()+0x5f>
c001ef35:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ef3e:	51                   	push   ecx
c001ef3f:	e8 20 fa ff ff       	call   c001e964 <unblockTask(ThreadControlBlock*)>
c001ef44:	a1 a4 23 03 c0       	mov    eax,ds:0xc00323a4
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	48                   	dec    eax
c001ef4d:	a3 a4 23 03 c0       	mov    ds:0xc00323a4,eax
c001ef52:	85 c0                	test   eax,eax
c001ef54:	75 09                	jne    c001ef5f <Semaphore::release()+0x4d>
c001ef56:	a1 a0 23 03 c0       	mov    eax,ds:0xc00323a0
c001ef5b:	85 c0                	test   eax,eax
c001ef5d:	75 17                	jne    c001ef76 <Semaphore::release()+0x64>
c001ef5f:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001ef64:	48                   	dec    eax
c001ef65:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001ef6a:	75 01                	jne    c001ef6d <Semaphore::release()+0x5b>
c001ef6c:	fb                   	sti    
c001ef6d:	83 c4 0c             	add    esp,0xc
c001ef70:	c3                   	ret    
c001ef71:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ef74:	eb d7                	jmp    c001ef4d <Semaphore::release()+0x3b>
c001ef76:	c7 05 a0 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323a0,0x0
c001ef80:	e8 1b f5 ff ff       	call   c001e4a0 <schedule()>
c001ef85:	eb d8                	jmp    c001ef5f <Semaphore::release()+0x4d>

c001ef87 <__static_initialization_and_destruction_0(int, int)>:
c001ef87:	83 ec 0c             	sub    esp,0xc
c001ef8a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ef8f:	0f 85 88 00 00 00    	jne    c001f01d <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef95:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ef9d:	75 7e                	jne    c001f01d <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef9f:	83 ec 0c             	sub    esp,0xc
c001efa2:	68 c4 23 03 c0       	push   0xc00323c4
c001efa7:	e8 20 a6 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efac:	83 c4 10             	add    esp,0x10
c001efaf:	83 ec 04             	sub    esp,0x4
c001efb2:	68 90 dd 02 c0       	push   0xc002dd90
c001efb7:	68 c4 23 03 c0       	push   0xc00323c4
c001efbc:	68 80 95 02 c0       	push   0xc0029580
c001efc1:	e8 15 3d ff ff       	call   c0012cdb <__cxa_atexit>
c001efc6:	83 c4 10             	add    esp,0x10
c001efc9:	83 ec 0c             	sub    esp,0xc
c001efcc:	68 b8 23 03 c0       	push   0xc00323b8
c001efd1:	e8 f6 a5 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efd6:	83 c4 10             	add    esp,0x10
c001efd9:	83 ec 04             	sub    esp,0x4
c001efdc:	68 90 dd 02 c0       	push   0xc002dd90
c001efe1:	68 b8 23 03 c0       	push   0xc00323b8
c001efe6:	68 80 95 02 c0       	push   0xc0029580
c001efeb:	e8 eb 3c ff ff       	call   c0012cdb <__cxa_atexit>
c001eff0:	83 c4 10             	add    esp,0x10
c001eff3:	83 ec 0c             	sub    esp,0xc
c001eff6:	68 ac 23 03 c0       	push   0xc00323ac
c001effb:	e8 cc a5 00 00       	call   c00295cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f000:	83 c4 10             	add    esp,0x10
c001f003:	83 ec 04             	sub    esp,0x4
c001f006:	68 90 dd 02 c0       	push   0xc002dd90
c001f00b:	68 ac 23 03 c0       	push   0xc00323ac
c001f010:	68 80 95 02 c0       	push   0xc0029580
c001f015:	e8 c1 3c ff ff       	call   c0012cdb <__cxa_atexit>
c001f01a:	83 c4 10             	add    esp,0x10
c001f01d:	90                   	nop
c001f01e:	83 c4 0c             	add    esp,0xc
c001f021:	c3                   	ret    

c001f022 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f022:	83 ec 0c             	sub    esp,0xc
c001f025:	83 ec 08             	sub    esp,0x8
c001f028:	68 ff ff 00 00       	push   0xffff
c001f02d:	6a 01                	push   0x1
c001f02f:	e8 53 ff ff ff       	call   c001ef87 <__static_initialization_and_destruction_0(int, int)>
c001f034:	83 c4 10             	add    esp,0x10
c001f037:	83 c4 0c             	add    esp,0xc
c001f03a:	c3                   	ret    

c001f03b <Vm::inbv(unsigned short)>:
c001f03b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f03f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f044:	75 06                	jne    c001f04c <Vm::inbv(unsigned short)+0x11>
c001f046:	a0 0c 24 03 c0       	mov    al,ds:0xc003240c
c001f04b:	c3                   	ret    
c001f04c:	ec                   	in     al,dx
c001f04d:	c3                   	ret    

c001f04e <Vm::outbv(unsigned short, unsigned char)>:
c001f04e:	53                   	push   ebx
c001f04f:	83 ec 08             	sub    esp,0x8
c001f052:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f056:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f05a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f05f:	75 38                	jne    c001f099 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f061:	0f b6 c3             	movzx  eax,bl
c001f064:	51                   	push   ecx
c001f065:	51                   	push   ecx
c001f066:	50                   	push   eax
c001f067:	68 c7 cf 02 c0       	push   0xc002cfc7
c001f06c:	e8 d0 3d ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f071:	8b 15 0c 24 03 c0    	mov    edx,DWORD PTR ds:0xc003240c
c001f077:	83 c4 10             	add    esp,0x10
c001f07a:	8d 42 01             	lea    eax,[edx+0x1]
c001f07d:	88 9a 20 24 03 c0    	mov    BYTE PTR [edx-0x3ffcdbe0],bl
c001f083:	a3 0c 24 03 c0       	mov    ds:0xc003240c,eax
c001f088:	83 f8 20             	cmp    eax,0x20
c001f08b:	75 0f                	jne    c001f09c <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f08d:	c7 05 0c 24 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003240c,0x1f
c001f097:	eb 03                	jmp    c001f09c <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f099:	88 d8                	mov    al,bl
c001f09b:	ee                   	out    dx,al
c001f09c:	83 c4 08             	add    esp,0x8
c001f09f:	5b                   	pop    ebx
c001f0a0:	c3                   	ret    

c001f0a1 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f0a1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0a6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0ab:	c1 e0 04             	shl    eax,0x4
c001f0ae:	01 d0                	add    eax,edx
c001f0b0:	c3                   	ret    

c001f0b1 <Vm::getSegment(unsigned int)>:
c001f0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0b5:	c1 e8 10             	shr    eax,0x10
c001f0b8:	c3                   	ret    

c001f0b9 <Vm::getOffset(unsigned int)>:
c001f0b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0bd:	c3                   	ret    

c001f0be <Vm::mainloop2()>:
c001f0be:	83 ec 18             	sub    esp,0x18
c001f0c1:	fa                   	cli    
c001f0c2:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001f0c8:	6a 02                	push   0x2
c001f0ca:	c6 05 05 24 03 c0 01 	mov    BYTE PTR ds:0xc0032405,0x1
c001f0d1:	e8 7b f5 ff ff       	call   c001e651 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f0d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0db:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f0df:	52                   	push   edx
c001f0e0:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f0e4:	52                   	push   edx
c001f0e5:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f0e9:	52                   	push   edx
c001f0ea:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f0ee:	50                   	push   eax
c001f0ef:	e8 06 12 fe ff       	call   c00002fa <goToVM86>
c001f0f4:	83 c4 2c             	add    esp,0x2c
c001f0f7:	c3                   	ret    

c001f0f8 <Vm::mainVm8086Loop(void*)>:
c001f0f8:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f0fd:	48                   	dec    eax
c001f0fe:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001f103:	75 01                	jne    c001f106 <Vm::mainVm8086Loop(void*)+0xe>
c001f105:	fb                   	sti    
c001f106:	eb b6                	jmp    c001f0be <Vm::mainloop2()>

c001f108 <Vm::mainloop3(unsigned long)>:
c001f108:	83 ec 18             	sub    esp,0x18
c001f10b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f10f:	fa                   	cli    
c001f110:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001f116:	6a 02                	push   0x2
c001f118:	c6 05 04 24 03 c0 01 	mov    BYTE PTR ds:0xc0032404,0x1
c001f11f:	a3 00 24 03 c0       	mov    ds:0xc0032400,eax
c001f124:	e8 28 f5 ff ff       	call   c001e651 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f129:	83 c4 1c             	add    esp,0x1c
c001f12c:	eb 90                	jmp    c001f0be <Vm::mainloop2()>

c001f12e <Vm::initialise8086()>:
c001f12e:	83 ec 0c             	sub    esp,0xc
c001f131:	68 80 00 00 00       	push   0x80
c001f136:	6a 00                	push   0x0
c001f138:	68 f8 f0 01 c0       	push   0xc001f0f8
c001f13d:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001f143:	e8 14 f1 ff ff       	call   c001e25c <Process::createThread(void (*)(void*), void*, int)>
c001f148:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f14f:	a3 08 24 03 c0       	mov    ds:0xc0032408,eax
c001f154:	68 00 01 00 00       	push   0x100
c001f159:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c001f15e:	6a 00                	push   0x0
c001f160:	6a 00                	push   0x0
c001f162:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f168:	e8 fb 33 ff ff       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f16d:	83 c4 2c             	add    esp,0x2c
c001f170:	c3                   	ret    

c001f171 <Vm::finish8086()>:
c001f171:	53                   	push   ebx
c001f172:	83 ec 08             	sub    esp,0x8
c001f175:	fa                   	cli    
c001f176:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001f17c:	80 3d 04 24 03 c0 00 	cmp    BYTE PTR ds:0xc0032404,0x0
c001f183:	75 15                	jne    c001f19a <Vm::finish8086()+0x29>
c001f185:	e8 16 f3 ff ff       	call   c001e4a0 <schedule()>
c001f18a:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f18f:	48                   	dec    eax
c001f190:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001f195:	75 de                	jne    c001f175 <Vm::finish8086()+0x4>
c001f197:	fb                   	sti    
c001f198:	eb db                	jmp    c001f175 <Vm::finish8086()+0x4>
c001f19a:	83 ec 0c             	sub    esp,0xc
c001f19d:	8b 1d 00 24 03 c0    	mov    ebx,DWORD PTR ds:0xc0032400
c001f1a3:	ff 35 08 24 03 c0    	push   DWORD PTR ds:0xc0032408
c001f1a9:	c6 05 04 24 03 c0 00 	mov    BYTE PTR ds:0xc0032404,0x0
c001f1b0:	e8 af f7 ff ff       	call   c001e964 <unblockTask(ThreadControlBlock*)>
c001f1b5:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f1ba:	83 c4 10             	add    esp,0x10
c001f1bd:	8d 50 ff             	lea    edx,[eax-0x1]
c001f1c0:	89 15 a8 23 03 c0    	mov    DWORD PTR ds:0xc00323a8,edx
c001f1c6:	85 d2                	test   edx,edx
c001f1c8:	75 01                	jne    c001f1cb <Vm::finish8086()+0x5a>
c001f1ca:	fb                   	sti    
c001f1cb:	89 d8                	mov    eax,ebx
c001f1cd:	83 c4 08             	add    esp,0x8
c001f1d0:	5b                   	pop    ebx
c001f1d1:	c3                   	ret    

c001f1d2 <Vm::getOutput8086(unsigned char*)>:
c001f1d2:	57                   	push   edi
c001f1d3:	8b 0d 0c 24 03 c0    	mov    ecx,DWORD PTR ds:0xc003240c
c001f1d9:	56                   	push   esi
c001f1da:	be 20 24 03 c0       	mov    esi,0xc0032420
c001f1df:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1e5:	a1 0c 24 03 c0       	mov    eax,ds:0xc003240c
c001f1ea:	5e                   	pop    esi
c001f1eb:	c7 05 0c 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003240c,0x0
c001f1f5:	5f                   	pop    edi
c001f1f6:	c3                   	ret    

c001f1f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f1f7:	55                   	push   ebp
c001f1f8:	57                   	push   edi
c001f1f9:	56                   	push   esi
c001f1fa:	53                   	push   ebx
c001f1fb:	83 ec 2c             	sub    esp,0x2c
c001f1fe:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f202:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f206:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f20a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f20e:	fa                   	cli    
c001f20f:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c001f215:	0f b6 35 05 24 03 c0 	movzx  esi,BYTE PTR ds:0xc0032405
c001f21c:	89 f0                	mov    eax,esi
c001f21e:	84 c0                	test   al,al
c001f220:	75 1d                	jne    c001f23f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f222:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f226:	e8 75 f2 ff ff       	call   c001e4a0 <schedule()>
c001f22b:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f230:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f234:	48                   	dec    eax
c001f235:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001f23a:	75 d2                	jne    c001f20e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f23c:	fb                   	sti    
c001f23d:	eb cf                	jmp    c001f20e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f23f:	a1 08 24 03 c0       	mov    eax,ds:0xc0032408
c001f244:	c7 05 0c 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003240c,0x0
c001f24e:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f252:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f256:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f25a:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f25e:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f262:	50                   	push   eax
c001f263:	6a 20                	push   0x20
c001f265:	6a 00                	push   0x0
c001f267:	68 20 24 03 c0       	push   0xc0032420
c001f26c:	e8 fb 14 fe ff       	call   c000076c <memset>
c001f271:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f278:	e8 29 06 ff ff       	call   c000f8a6 <malloc>
c001f27d:	83 c4 0c             	add    esp,0xc
c001f280:	89 c3                	mov    ebx,eax
c001f282:	ff 35 d0 23 03 c0    	push   DWORD PTR ds:0xc00323d0
c001f288:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f28c:	50                   	push   eax
c001f28d:	e8 0e 41 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c001f292:	83 c4 10             	add    esp,0x10
c001f295:	85 db                	test   ebx,ebx
c001f297:	75 0a                	jne    c001f2a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f299:	83 ec 0c             	sub    esp,0xc
c001f29c:	68 e3 cf 02 c0       	push   0xc002cfe3
c001f2a1:	eb 3e                	jmp    c001f2e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f2a3:	50                   	push   eax
c001f2a4:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f2a8:	50                   	push   eax
c001f2a9:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f2ad:	50                   	push   eax
c001f2ae:	53                   	push   ebx
c001f2af:	e8 fc 43 ff ff       	call   c00136b0 <File::stat(unsigned long long*, bool*)>
c001f2b4:	83 c4 10             	add    esp,0x10
c001f2b7:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f2bc:	74 0a                	je     c001f2c8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f2be:	83 ec 0c             	sub    esp,0xc
c001f2c1:	68 f7 cf 02 c0       	push   0xc002cff7
c001f2c6:	eb 19                	jmp    c001f2e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f2c8:	51                   	push   ecx
c001f2c9:	51                   	push   ecx
c001f2ca:	6a 01                	push   0x1
c001f2cc:	53                   	push   ebx
c001f2cd:	e8 32 41 ff ff       	call   c0013404 <File::open(FileOpenMode)>
c001f2d2:	83 c4 10             	add    esp,0x10
c001f2d5:	85 c0                	test   eax,eax
c001f2d7:	74 24                	je     c001f2fd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f2d9:	83 ec 0c             	sub    esp,0xc
c001f2dc:	68 10 d0 02 c0       	push   0xc002d010
c001f2e1:	e8 15 b5 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001f2e6:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f2eb:	83 c4 10             	add    esp,0x10
c001f2ee:	48                   	dec    eax
c001f2ef:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001f2f4:	85 c0                	test   eax,eax
c001f2f6:	75 01                	jne    c001f2f9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f2f8:	fb                   	sti    
c001f2f9:	31 f6                	xor    esi,esi
c001f2fb:	eb 58                	jmp    c001f355 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f2fd:	0f b7 ed             	movzx  ebp,bp
c001f300:	50                   	push   eax
c001f301:	0f b7 ff             	movzx  edi,di
c001f304:	50                   	push   eax
c001f305:	55                   	push   ebp
c001f306:	57                   	push   edi
c001f307:	e8 95 fd ff ff       	call   c001f0a1 <Vm::realToLinear(unsigned short, unsigned short)>
c001f30c:	5a                   	pop    edx
c001f30d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f30f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f313:	51                   	push   ecx
c001f314:	50                   	push   eax
c001f315:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f319:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f31d:	53                   	push   ebx
c001f31e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f321:	83 c4 14             	add    esp,0x14
c001f324:	53                   	push   ebx
c001f325:	e8 38 41 ff ff       	call   c0013462 <File::close()>
c001f32a:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c001f32f:	83 c4 10             	add    esp,0x10
c001f332:	48                   	dec    eax
c001f333:	c6 05 05 24 03 c0 00 	mov    BYTE PTR ds:0xc0032405,0x0
c001f33a:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001f33f:	85 c0                	test   eax,eax
c001f341:	75 01                	jne    c001f344 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f343:	fb                   	sti    
c001f344:	83 ec 0c             	sub    esp,0xc
c001f347:	ff 35 08 24 03 c0    	push   DWORD PTR ds:0xc0032408
c001f34d:	e8 12 f6 ff ff       	call   c001e964 <unblockTask(ThreadControlBlock*)>
c001f352:	83 c4 10             	add    esp,0x10
c001f355:	83 c4 2c             	add    esp,0x2c
c001f358:	89 f0                	mov    eax,esi
c001f35a:	5b                   	pop    ebx
c001f35b:	5e                   	pop    esi
c001f35c:	5f                   	pop    edi
c001f35d:	5d                   	pop    ebp
c001f35e:	c3                   	ret    

c001f35f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f35f:	57                   	push   edi
c001f360:	56                   	push   esi
c001f361:	53                   	push   ebx
c001f362:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f36a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f36e:	83 e8 06             	sub    eax,0x6
c001f371:	0f b7 c0             	movzx  eax,ax
c001f374:	50                   	push   eax
c001f375:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f37a:	50                   	push   eax
c001f37b:	e8 21 fd ff ff       	call   c001f0a1 <Vm::realToLinear(unsigned short, unsigned short)>
c001f380:	5a                   	pop    edx
c001f381:	5e                   	pop    esi
c001f382:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f385:	8d 56 fa             	lea    edx,[esi-0x6]
c001f388:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f38e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f391:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f394:	83 c2 02             	add    edx,0x2
c001f397:	66 89 10             	mov    WORD PTR [eax],dx
c001f39a:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f39d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f3a1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f3a4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f3a8:	89 d6                	mov    esi,edx
c001f3aa:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f3b0:	66 81 e6 ff fd       	and    si,0xfdff
c001f3b5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f3b9:	74 07                	je     c001f3c2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f3bb:	89 d6                	mov    esi,edx
c001f3bd:	66 81 ce 00 02       	or     si,0x200
c001f3c2:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f3c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3cb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f3cf:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f3d7:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f3da:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f3e2:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f3e5:	5b                   	pop    ebx
c001f3e6:	5e                   	pop    esi
c001f3e7:	5f                   	pop    edi
c001f3e8:	c3                   	ret    

c001f3e9 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f3e9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3ee:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3f3:	c1 e0 04             	shl    eax,0x4
c001f3f6:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f3f9:	c3                   	ret    

c001f3fa <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f3fa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3ff:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f404:	c1 e0 04             	shl    eax,0x4
c001f407:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f40b:	c3                   	ret    

c001f40c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f40c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f411:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f416:	c1 e0 04             	shl    eax,0x4
c001f419:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f41c:	c3                   	ret    

c001f41d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f41d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f422:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f427:	c1 e0 04             	shl    eax,0x4
c001f42a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f42e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f431:	c3                   	ret    

c001f432 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f432:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f437:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f43c:	c1 e0 04             	shl    eax,0x4
c001f43f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f443:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f447:	c3                   	ret    

c001f448 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f448:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f44d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f452:	c1 e0 04             	shl    eax,0x4
c001f455:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f459:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f45c:	c3                   	ret    

c001f45d <Vm::faultHandler(regs*)>:
c001f45d:	55                   	push   ebp
c001f45e:	57                   	push   edi
c001f45f:	56                   	push   esi
c001f460:	53                   	push   ebx
c001f461:	83 ec 1c             	sub    esp,0x1c
c001f464:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f468:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f46b:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f46e:	0f b7 c1             	movzx  eax,cx
c001f471:	50                   	push   eax
c001f472:	0f b7 c3             	movzx  eax,bx
c001f475:	c1 e3 04             	shl    ebx,0x4
c001f478:	50                   	push   eax
c001f479:	e8 23 fc ff ff       	call   c001f0a1 <Vm::realToLinear(unsigned short, unsigned short)>
c001f47e:	5a                   	pop    edx
c001f47f:	89 c5                	mov    ebp,eax
c001f481:	5e                   	pop    esi
c001f482:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f486:	50                   	push   eax
c001f487:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f48b:	50                   	push   eax
c001f48c:	e8 10 fc ff ff       	call   c001f0a1 <Vm::realToLinear(unsigned short, unsigned short)>
c001f491:	01 cb                	add    ebx,ecx
c001f493:	89 c6                	mov    esi,eax
c001f495:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f499:	50                   	push   eax
c001f49a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f49e:	50                   	push   eax
c001f49f:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4a3:	50                   	push   eax
c001f4a4:	55                   	push   ebp
c001f4a5:	53                   	push   ebx
c001f4a6:	b3 06                	mov    bl,0x6
c001f4a8:	68 29 d0 02 c0       	push   0xc002d029
c001f4ad:	e8 8f 39 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f4b2:	83 c4 20             	add    esp,0x20
c001f4b5:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f4ba:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f4bf:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4c3:	3c 9d                	cmp    al,0x9d
c001f4c5:	0f 84 d7 02 00 00    	je     c001f7a2 <Vm::faultHandler(regs*)+0x345>
c001f4cb:	0f 87 a3 00 00 00    	ja     c001f574 <Vm::faultHandler(regs*)+0x117>
c001f4d1:	3c 66                	cmp    al,0x66
c001f4d3:	0f 84 15 02 00 00    	je     c001f6ee <Vm::faultHandler(regs*)+0x291>
c001f4d9:	77 5f                	ja     c001f53a <Vm::faultHandler(regs*)+0xdd>
c001f4db:	3c 36                	cmp    al,0x36
c001f4dd:	0f 84 f1 01 00 00    	je     c001f6d4 <Vm::faultHandler(regs*)+0x277>
c001f4e3:	77 28                	ja     c001f50d <Vm::faultHandler(regs*)+0xb0>
c001f4e5:	3c 26                	cmp    al,0x26
c001f4e7:	0f 84 99 01 00 00    	je     c001f686 <Vm::faultHandler(regs*)+0x229>
c001f4ed:	3c 2e                	cmp    al,0x2e
c001f4ef:	0f 85 3b 07 00 00    	jne    c001fc30 <Vm::faultHandler(regs*)+0x7d3>
c001f4f5:	83 ec 0c             	sub    esp,0xc
c001f4f8:	31 db                	xor    ebx,ebx
c001f4fa:	68 3e d0 02 c0       	push   0xc002d03e
c001f4ff:	e8 3d 39 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f504:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f507:	83 c4 10             	add    esp,0x10
c001f50a:	45                   	inc    ebp
c001f50b:	eb b2                	jmp    c001f4bf <Vm::faultHandler(regs*)+0x62>
c001f50d:	3c 64                	cmp    al,0x64
c001f50f:	0f 84 8b 01 00 00    	je     c001f6a0 <Vm::faultHandler(regs*)+0x243>
c001f515:	0f 87 9f 01 00 00    	ja     c001f6ba <Vm::faultHandler(regs*)+0x25d>
c001f51b:	3c 3e                	cmp    al,0x3e
c001f51d:	0f 85 0d 07 00 00    	jne    c001fc30 <Vm::faultHandler(regs*)+0x7d3>
c001f523:	83 ec 0c             	sub    esp,0xc
c001f526:	b3 01                	mov    bl,0x1
c001f528:	68 42 d0 02 c0       	push   0xc002d042
c001f52d:	e8 0f 39 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f532:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f535:	83 c4 10             	add    esp,0x10
c001f538:	eb d0                	jmp    c001f50a <Vm::faultHandler(regs*)+0xad>
c001f53a:	3c 6d                	cmp    al,0x6d
c001f53c:	0f 84 af 03 00 00    	je     c001f8f1 <Vm::faultHandler(regs*)+0x494>
c001f542:	77 15                	ja     c001f559 <Vm::faultHandler(regs*)+0xfc>
c001f544:	3c 67                	cmp    al,0x67
c001f546:	0f 84 bf 01 00 00    	je     c001f70b <Vm::faultHandler(regs*)+0x2ae>
c001f54c:	3c 6c                	cmp    al,0x6c
c001f54e:	0f 84 3f 03 00 00    	je     c001f893 <Vm::faultHandler(regs*)+0x436>
c001f554:	e9 d7 06 00 00       	jmp    c001fc30 <Vm::faultHandler(regs*)+0x7d3>
c001f559:	3c 6f                	cmp    al,0x6f
c001f55b:	0f 84 a4 04 00 00    	je     c001fa05 <Vm::faultHandler(regs*)+0x5a8>
c001f561:	0f 82 11 04 00 00    	jb     c001f978 <Vm::faultHandler(regs*)+0x51b>
c001f567:	3c 9c                	cmp    al,0x9c
c001f569:	0f 84 ba 01 00 00    	je     c001f729 <Vm::faultHandler(regs*)+0x2cc>
c001f56f:	e9 bc 06 00 00       	jmp    c001fc30 <Vm::faultHandler(regs*)+0x7d3>
c001f574:	3c ec                	cmp    al,0xec
c001f576:	0f 84 24 06 00 00    	je     c001fba0 <Vm::faultHandler(regs*)+0x743>
c001f57c:	0f 87 93 00 00 00    	ja     c001f615 <Vm::faultHandler(regs*)+0x1b8>
c001f582:	3c e4                	cmp    al,0xe4
c001f584:	0f 84 5c 05 00 00    	je     c001fae6 <Vm::faultHandler(regs*)+0x689>
c001f58a:	77 6a                	ja     c001f5f6 <Vm::faultHandler(regs*)+0x199>
c001f58c:	3c cd                	cmp    al,0xcd
c001f58e:	0f 84 7e 02 00 00    	je     c001f812 <Vm::faultHandler(regs*)+0x3b5>
c001f594:	3c cf                	cmp    al,0xcf
c001f596:	0f 85 94 06 00 00    	jne    c001fc30 <Vm::faultHandler(regs*)+0x7d3>
c001f59c:	83 ec 0c             	sub    esp,0xc
c001f59f:	68 86 d0 02 c0       	push   0xc002d086
c001f5a4:	e8 98 38 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f5a9:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f5ac:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f5af:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f5b3:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f5b6:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f5ba:	0d 00 02 02 00       	or     eax,0x20200
c001f5bf:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f5c2:	56                   	push   esi
c001f5c3:	53                   	push   ebx
c001f5c4:	52                   	push   edx
c001f5c5:	68 8c d0 02 c0       	push   0xc002d08c
c001f5ca:	e8 72 38 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f5cf:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f5d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f5d9:	66 c1 e8 09          	shr    ax,0x9
c001f5dd:	83 e0 01             	and    eax,0x1
c001f5e0:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f5e3:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f5e6:	83 c0 06             	add    eax,0x6
c001f5e9:	25 ff ff 00 00       	and    eax,0xffff
c001f5ee:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f5f1:	e9 95 02 00 00       	jmp    c001f88b <Vm::faultHandler(regs*)+0x42e>
c001f5f6:	3c e6                	cmp    al,0xe6
c001f5f8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f5fc:	0f 84 4e 05 00 00    	je     c001fb50 <Vm::faultHandler(regs*)+0x6f3>
c001f602:	0f 82 0a 05 00 00    	jb     c001fb12 <Vm::faultHandler(regs*)+0x6b5>
c001f608:	3c e7                	cmp    al,0xe7
c001f60a:	0f 84 69 05 00 00    	je     c001fb79 <Vm::faultHandler(regs*)+0x71c>
c001f610:	e9 1b 06 00 00       	jmp    c001fc30 <Vm::faultHandler(regs*)+0x7d3>
c001f615:	3c ef                	cmp    al,0xef
c001f617:	0f 84 e6 05 00 00    	je     c001fc03 <Vm::faultHandler(regs*)+0x7a6>
c001f61d:	77 37                	ja     c001f656 <Vm::faultHandler(regs*)+0x1f9>
c001f61f:	3c ed                	cmp    al,0xed
c001f621:	0f 84 a3 05 00 00    	je     c001fbca <Vm::faultHandler(regs*)+0x76d>
c001f627:	3c ee                	cmp    al,0xee
c001f629:	0f 85 01 06 00 00    	jne    c001fc30 <Vm::faultHandler(regs*)+0x7d3>
c001f62f:	52                   	push   edx
c001f630:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f633:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f636:	68 27 d1 02 c0       	push   0xc002d127
c001f63b:	e8 01 38 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f640:	59                   	pop    ecx
c001f641:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f645:	5b                   	pop    ebx
c001f646:	50                   	push   eax
c001f647:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f64b:	50                   	push   eax
c001f64c:	e8 fd f9 ff ff       	call   c001f04e <Vm::outbv(unsigned short, unsigned char)>
c001f651:	e9 a5 05 00 00       	jmp    c001fbfb <Vm::faultHandler(regs*)+0x79e>
c001f656:	3c fa                	cmp    al,0xfa
c001f658:	0f 84 f7 01 00 00    	je     c001f855 <Vm::faultHandler(regs*)+0x3f8>
c001f65e:	3c fb                	cmp    al,0xfb
c001f660:	0f 84 0a 02 00 00    	je     c001f870 <Vm::faultHandler(regs*)+0x413>
c001f666:	3c f3                	cmp    al,0xf3
c001f668:	0f 85 c2 05 00 00    	jne    c001fc30 <Vm::faultHandler(regs*)+0x7d3>
c001f66e:	83 ec 0c             	sub    esp,0xc
c001f671:	68 5f d0 02 c0       	push   0xc002d05f
c001f676:	e8 c6 37 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f67b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f67e:	83 c4 10             	add    esp,0x10
c001f681:	e9 84 fe ff ff       	jmp    c001f50a <Vm::faultHandler(regs*)+0xad>
c001f686:	83 ec 0c             	sub    esp,0xc
c001f689:	b3 02                	mov    bl,0x2
c001f68b:	68 3a d0 02 c0       	push   0xc002d03a
c001f690:	e8 ac 37 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f695:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f698:	83 c4 10             	add    esp,0x10
c001f69b:	e9 6a fe ff ff       	jmp    c001f50a <Vm::faultHandler(regs*)+0xad>
c001f6a0:	83 ec 0c             	sub    esp,0xc
c001f6a3:	b3 03                	mov    bl,0x3
c001f6a5:	68 46 d0 02 c0       	push   0xc002d046
c001f6aa:	e8 92 37 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f6af:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6b2:	83 c4 10             	add    esp,0x10
c001f6b5:	e9 50 fe ff ff       	jmp    c001f50a <Vm::faultHandler(regs*)+0xad>
c001f6ba:	83 ec 0c             	sub    esp,0xc
c001f6bd:	b3 04                	mov    bl,0x4
c001f6bf:	68 4a d0 02 c0       	push   0xc002d04a
c001f6c4:	e8 78 37 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f6c9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6cc:	83 c4 10             	add    esp,0x10
c001f6cf:	e9 36 fe ff ff       	jmp    c001f50a <Vm::faultHandler(regs*)+0xad>
c001f6d4:	83 ec 0c             	sub    esp,0xc
c001f6d7:	b3 05                	mov    bl,0x5
c001f6d9:	68 4e d0 02 c0       	push   0xc002d04e
c001f6de:	e8 5e 37 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f6e3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6e6:	83 c4 10             	add    esp,0x10
c001f6e9:	e9 1c fe ff ff       	jmp    c001f50a <Vm::faultHandler(regs*)+0xad>
c001f6ee:	83 ec 0c             	sub    esp,0xc
c001f6f1:	68 52 d0 02 c0       	push   0xc002d052
c001f6f6:	e8 46 37 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f6fb:	83 c4 10             	add    esp,0x10
c001f6fe:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f701:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f706:	e9 ff fd ff ff       	jmp    c001f50a <Vm::faultHandler(regs*)+0xad>
c001f70b:	50                   	push   eax
c001f70c:	50                   	push   eax
c001f70d:	6a 01                	push   0x1
c001f70f:	68 57 d0 02 c0       	push   0xc002d057
c001f714:	e8 28 37 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f719:	83 c4 10             	add    esp,0x10
c001f71c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f71f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f724:	e9 e1 fd ff ff       	jmp    c001f50a <Vm::faultHandler(regs*)+0xad>
c001f729:	83 ec 0c             	sub    esp,0xc
c001f72c:	68 65 d0 02 c0       	push   0xc002d065
c001f731:	e8 0b 37 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f736:	83 c4 10             	add    esp,0x10
c001f739:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f73c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f741:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f744:	74 2f                	je     c001f775 <Vm::faultHandler(regs*)+0x318>
c001f746:	83 ea 04             	sub    edx,0x4
c001f749:	25 ff 0d 00 00       	and    eax,0xdff
c001f74e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f754:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f757:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f75a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f760:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f764:	0f 84 bf 04 00 00    	je     c001fc29 <Vm::faultHandler(regs*)+0x7cc>
c001f76a:	80 cc 02             	or     ah,0x2
c001f76d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f770:	e9 b4 04 00 00       	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7cc>
c001f775:	83 ea 02             	sub    edx,0x2
c001f778:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f77e:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f781:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f785:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f78b:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f78f:	74 05                	je     c001f796 <Vm::faultHandler(regs*)+0x339>
c001f791:	80 cc 02             	or     ah,0x2
c001f794:	eb 03                	jmp    c001f799 <Vm::faultHandler(regs*)+0x33c>
c001f796:	80 e4 fd             	and    ah,0xfd
c001f799:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f79d:	e9 87 04 00 00       	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7cc>
c001f7a2:	83 ec 0c             	sub    esp,0xc
c001f7a5:	68 6c d0 02 c0       	push   0xc002d06c
c001f7aa:	e8 92 36 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f7af:	83 c4 10             	add    esp,0x10
c001f7b2:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f7b7:	74 28                	je     c001f7e1 <Vm::faultHandler(regs*)+0x384>
c001f7b9:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7bb:	25 ff 0d 00 00       	and    eax,0xdff
c001f7c0:	0d 00 02 02 00       	or     eax,0x20200
c001f7c5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7c8:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7ca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7d0:	c1 e8 09             	shr    eax,0x9
c001f7d3:	83 e0 01             	and    eax,0x1
c001f7d6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7d9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7dc:	83 c0 04             	add    eax,0x4
c001f7df:	eb 24                	jmp    c001f805 <Vm::faultHandler(regs*)+0x3a8>
c001f7e1:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f7e4:	0d 00 02 02 00       	or     eax,0x20200
c001f7e9:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7ec:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f7ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7f5:	66 c1 e8 09          	shr    ax,0x9
c001f7f9:	83 e0 01             	and    eax,0x1
c001f7fc:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7ff:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f802:	83 c0 02             	add    eax,0x2
c001f805:	25 ff ff 00 00       	and    eax,0xffff
c001f80a:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f80d:	e9 17 04 00 00       	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7cc>
c001f812:	53                   	push   ebx
c001f813:	53                   	push   ebx
c001f814:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f818:	50                   	push   eax
c001f819:	68 72 d0 02 c0       	push   0xc002d072
c001f81e:	e8 1e 36 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f823:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f827:	83 c4 10             	add    esp,0x10
c001f82a:	3c ee                	cmp    al,0xee
c001f82c:	75 10                	jne    c001f83e <Vm::faultHandler(regs*)+0x3e1>
c001f82e:	83 ec 0c             	sub    esp,0xc
c001f831:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f834:	e8 cf f8 ff ff       	call   c001f108 <Vm::mainloop3(unsigned long)>
c001f839:	e9 c0 03 00 00       	jmp    c001fbfe <Vm::faultHandler(regs*)+0x7a1>
c001f83e:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f842:	83 ec 0c             	sub    esp,0xc
c001f845:	53                   	push   ebx
c001f846:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f84a:	53                   	push   ebx
c001f84b:	55                   	push   ebp
c001f84c:	50                   	push   eax
c001f84d:	57                   	push   edi
c001f84e:	e8 0c fb ff ff       	call   c001f35f <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f853:	eb 36                	jmp    c001f88b <Vm::faultHandler(regs*)+0x42e>
c001f855:	83 ec 0c             	sub    esp,0xc
c001f858:	68 7c d0 02 c0       	push   0xc002d07c
c001f85d:	e8 df 35 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f862:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f867:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f86b:	e9 8b 03 00 00       	jmp    c001fbfb <Vm::faultHandler(regs*)+0x79e>
c001f870:	83 ec 0c             	sub    esp,0xc
c001f873:	68 81 d0 02 c0       	push   0xc002d081
c001f878:	e8 c4 35 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f87d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f882:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f886:	e9 70 03 00 00       	jmp    c001fbfb <Vm::faultHandler(regs*)+0x79e>
c001f88b:	83 c4 20             	add    esp,0x20
c001f88e:	e9 99 03 00 00       	jmp    c001fc2c <Vm::faultHandler(regs*)+0x7cf>
c001f893:	83 ec 0c             	sub    esp,0xc
c001f896:	68 bf d0 02 c0       	push   0xc002d0bf
c001f89b:	e8 a1 35 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f8a0:	83 c4 10             	add    esp,0x10
c001f8a3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f8a6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f8ab:	74 0d                	je     c001f8ba <Vm::faultHandler(regs*)+0x45d>
c001f8ad:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f8b4:	0f 87 9e 01 00 00    	ja     c001fa58 <Vm::faultHandler(regs*)+0x5fb>
c001f8ba:	83 ec 0c             	sub    esp,0xc
c001f8bd:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f8c1:	0f b7 db             	movzx  ebx,bx
c001f8c4:	50                   	push   eax
c001f8c5:	e8 71 f7 ff ff       	call   c001f03b <Vm::inbv(unsigned short)>
c001f8ca:	83 c4 0c             	add    esp,0xc
c001f8cd:	0f b6 c0             	movzx  eax,al
c001f8d0:	50                   	push   eax
c001f8d1:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f8d5:	50                   	push   eax
c001f8d6:	53                   	push   ebx
c001f8d7:	e8 41 fb ff ff       	call   c001f41d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f8dc:	83 c4 10             	add    esp,0x10
c001f8df:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f8e2:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f8e6:	74 03                	je     c001f8eb <Vm::faultHandler(regs*)+0x48e>
c001f8e8:	48                   	dec    eax
c001f8e9:	eb 01                	jmp    c001f8ec <Vm::faultHandler(regs*)+0x48f>
c001f8eb:	40                   	inc    eax
c001f8ec:	0f b7 c0             	movzx  eax,ax
c001f8ef:	eb 7f                	jmp    c001f970 <Vm::faultHandler(regs*)+0x513>
c001f8f1:	83 ec 0c             	sub    esp,0xc
c001f8f4:	68 f1 d0 02 c0       	push   0xc002d0f1
c001f8f9:	e8 43 35 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f8fe:	83 c4 10             	add    esp,0x10
c001f901:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f904:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f909:	74 0d                	je     c001f918 <Vm::faultHandler(regs*)+0x4bb>
c001f90b:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f912:	0f 87 40 01 00 00    	ja     c001fa58 <Vm::faultHandler(regs*)+0x5fb>
c001f918:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f91b:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f91f:	0f b7 db             	movzx  ebx,bx
c001f922:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f927:	74 20                	je     c001f949 <Vm::faultHandler(regs*)+0x4ec>
c001f929:	ed                   	in     eax,dx
c001f92a:	51                   	push   ecx
c001f92b:	50                   	push   eax
c001f92c:	56                   	push   esi
c001f92d:	53                   	push   ebx
c001f92e:	e8 15 fb ff ff       	call   c001f448 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f933:	83 c4 10             	add    esp,0x10
c001f936:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f939:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f93d:	74 05                	je     c001f944 <Vm::faultHandler(regs*)+0x4e7>
c001f93f:	83 e8 04             	sub    eax,0x4
c001f942:	eb 27                	jmp    c001f96b <Vm::faultHandler(regs*)+0x50e>
c001f944:	83 c0 04             	add    eax,0x4
c001f947:	eb 22                	jmp    c001f96b <Vm::faultHandler(regs*)+0x50e>
c001f949:	66 ed                	in     ax,dx
c001f94b:	0f b7 c0             	movzx  eax,ax
c001f94e:	52                   	push   edx
c001f94f:	50                   	push   eax
c001f950:	56                   	push   esi
c001f951:	53                   	push   ebx
c001f952:	e8 db fa ff ff       	call   c001f432 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f957:	83 c4 10             	add    esp,0x10
c001f95a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f95d:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f961:	74 05                	je     c001f968 <Vm::faultHandler(regs*)+0x50b>
c001f963:	83 e8 02             	sub    eax,0x2
c001f966:	eb 03                	jmp    c001f96b <Vm::faultHandler(regs*)+0x50e>
c001f968:	83 c0 02             	add    eax,0x2
c001f96b:	25 ff ff 00 00       	and    eax,0xffff
c001f970:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f973:	e9 b1 02 00 00       	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7cc>
c001f978:	83 ec 0c             	sub    esp,0xc
c001f97b:	4b                   	dec    ebx
c001f97c:	68 f7 d0 02 c0       	push   0xc002d0f7
c001f981:	e8 bb 34 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001f986:	83 c4 10             	add    esp,0x10
c001f989:	80 fb 05             	cmp    bl,0x5
c001f98c:	77 0a                	ja     c001f998 <Vm::faultHandler(regs*)+0x53b>
c001f98e:	0f b6 db             	movzx  ebx,bl
c001f991:	ff 24 9d 68 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2e98]
c001f998:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f99c:	eb 1b                	jmp    c001f9b9 <Vm::faultHandler(regs*)+0x55c>
c001f99e:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f9a2:	eb 15                	jmp    c001f9b9 <Vm::faultHandler(regs*)+0x55c>
c001f9a4:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f9a8:	eb 0f                	jmp    c001f9b9 <Vm::faultHandler(regs*)+0x55c>
c001f9aa:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f9ae:	eb 09                	jmp    c001f9b9 <Vm::faultHandler(regs*)+0x55c>
c001f9b0:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f9b3:	eb 04                	jmp    c001f9b9 <Vm::faultHandler(regs*)+0x55c>
c001f9b5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f9b9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f9be:	74 0d                	je     c001f9cd <Vm::faultHandler(regs*)+0x570>
c001f9c0:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f9c7:	0f 87 8b 00 00 00    	ja     c001fa58 <Vm::faultHandler(regs*)+0x5fb>
c001f9cd:	53                   	push   ebx
c001f9ce:	53                   	push   ebx
c001f9cf:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f9d3:	52                   	push   edx
c001f9d4:	50                   	push   eax
c001f9d5:	e8 0f fa ff ff       	call   c001f3e9 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f9da:	5e                   	pop    esi
c001f9db:	0f b6 c0             	movzx  eax,al
c001f9de:	5d                   	pop    ebp
c001f9df:	50                   	push   eax
c001f9e0:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f9e4:	50                   	push   eax
c001f9e5:	e8 64 f6 ff ff       	call   c001f04e <Vm::outbv(unsigned short, unsigned char)>
c001f9ea:	83 c4 10             	add    esp,0x10
c001f9ed:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f9f0:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f9f4:	74 03                	je     c001f9f9 <Vm::faultHandler(regs*)+0x59c>
c001f9f6:	48                   	dec    eax
c001f9f7:	eb 01                	jmp    c001f9fa <Vm::faultHandler(regs*)+0x59d>
c001f9f9:	40                   	inc    eax
c001f9fa:	0f b7 c0             	movzx  eax,ax
c001f9fd:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fa00:	e9 24 02 00 00       	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7cc>
c001fa05:	83 ec 0c             	sub    esp,0xc
c001fa08:	4b                   	dec    ebx
c001fa09:	68 f7 d0 02 c0       	push   0xc002d0f7
c001fa0e:	e8 2e 34 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001fa13:	83 c4 10             	add    esp,0x10
c001fa16:	80 fb 05             	cmp    bl,0x5
c001fa19:	77 0a                	ja     c001fa25 <Vm::faultHandler(regs*)+0x5c8>
c001fa1b:	0f b6 db             	movzx  ebx,bl
c001fa1e:	ff 24 9d 80 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2e80]
c001fa25:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fa29:	eb 1b                	jmp    c001fa46 <Vm::faultHandler(regs*)+0x5e9>
c001fa2b:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fa2f:	eb 15                	jmp    c001fa46 <Vm::faultHandler(regs*)+0x5e9>
c001fa31:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fa35:	eb 0f                	jmp    c001fa46 <Vm::faultHandler(regs*)+0x5e9>
c001fa37:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fa3b:	eb 09                	jmp    c001fa46 <Vm::faultHandler(regs*)+0x5e9>
c001fa3d:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fa40:	eb 04                	jmp    c001fa46 <Vm::faultHandler(regs*)+0x5e9>
c001fa42:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fa46:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fa49:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa4e:	74 39                	je     c001fa89 <Vm::faultHandler(regs*)+0x62c>
c001fa50:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fa56:	76 31                	jbe    c001fa89 <Vm::faultHandler(regs*)+0x62c>
c001fa58:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fa5c:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fa60:	51                   	push   ecx
c001fa61:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fa65:	51                   	push   ecx
c001fa66:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fa6a:	51                   	push   ecx
c001fa6b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fa6f:	51                   	push   ecx
c001fa70:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fa74:	52                   	push   edx
c001fa75:	50                   	push   eax
c001fa76:	50                   	push   eax
c001fa77:	68 c4 d0 02 c0       	push   0xc002d0c4
c001fa7c:	e8 c0 33 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001fa81:	83 c4 20             	add    esp,0x20
c001fa84:	e9 fb 01 00 00       	jmp    c001fc84 <Vm::faultHandler(regs*)+0x827>
c001fa89:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fa8c:	0f b7 d3             	movzx  edx,bx
c001fa8f:	81 e6 00 04 00 00    	and    esi,0x400
c001fa95:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fa98:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa9d:	74 1d                	je     c001fabc <Vm::faultHandler(regs*)+0x65f>
c001fa9f:	51                   	push   ecx
c001faa0:	51                   	push   ecx
c001faa1:	52                   	push   edx
c001faa2:	50                   	push   eax
c001faa3:	e8 64 f9 ff ff       	call   c001f40c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001faa8:	83 c4 10             	add    esp,0x10
c001faab:	89 ea                	mov    edx,ebp
c001faad:	ef                   	out    dx,eax
c001faae:	85 f6                	test   esi,esi
c001fab0:	74 05                	je     c001fab7 <Vm::faultHandler(regs*)+0x65a>
c001fab2:	83 eb 04             	sub    ebx,0x4
c001fab5:	eb 21                	jmp    c001fad8 <Vm::faultHandler(regs*)+0x67b>
c001fab7:	83 c3 04             	add    ebx,0x4
c001faba:	eb 1c                	jmp    c001fad8 <Vm::faultHandler(regs*)+0x67b>
c001fabc:	51                   	push   ecx
c001fabd:	51                   	push   ecx
c001fabe:	52                   	push   edx
c001fabf:	50                   	push   eax
c001fac0:	e8 35 f9 ff ff       	call   c001f3fa <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fac5:	83 c4 10             	add    esp,0x10
c001fac8:	89 ea                	mov    edx,ebp
c001faca:	66 ef                	out    dx,ax
c001facc:	85 f6                	test   esi,esi
c001face:	74 05                	je     c001fad5 <Vm::faultHandler(regs*)+0x678>
c001fad0:	83 eb 02             	sub    ebx,0x2
c001fad3:	eb 03                	jmp    c001fad8 <Vm::faultHandler(regs*)+0x67b>
c001fad5:	83 c3 02             	add    ebx,0x2
c001fad8:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fade:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fae1:	e9 43 01 00 00       	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7cc>
c001fae6:	53                   	push   ebx
c001fae7:	53                   	push   ebx
c001fae8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faec:	50                   	push   eax
c001faed:	68 fd d0 02 c0       	push   0xc002d0fd
c001faf2:	e8 4a 33 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001faf7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fafe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb02:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb05:	e8 31 f5 ff ff       	call   c001f03b <Vm::inbv(unsigned short)>
c001fb0a:	0f b6 c0             	movzx  eax,al
c001fb0d:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fb10:	eb 5e                	jmp    c001fb70 <Vm::faultHandler(regs*)+0x713>
c001fb12:	51                   	push   ecx
c001fb13:	51                   	push   ecx
c001fb14:	53                   	push   ebx
c001fb15:	68 03 d1 02 c0       	push   0xc002d103
c001fb1a:	e8 22 33 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001fb1f:	83 c4 10             	add    esp,0x10
c001fb22:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb27:	74 07                	je     c001fb30 <Vm::faultHandler(regs*)+0x6d3>
c001fb29:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb2d:	ed                   	in     eax,dx
c001fb2e:	eb 14                	jmp    c001fb44 <Vm::faultHandler(regs*)+0x6e7>
c001fb30:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fb33:	66 31 db             	xor    bx,bx
c001fb36:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fb39:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb3d:	66 ed                	in     ax,dx
c001fb3f:	0f b7 c0             	movzx  eax,ax
c001fb42:	09 d8                	or     eax,ebx
c001fb44:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fb47:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb4b:	e9 dc 00 00 00       	jmp    c001fc2c <Vm::faultHandler(regs*)+0x7cf>
c001fb50:	50                   	push   eax
c001fb51:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb54:	53                   	push   ebx
c001fb55:	68 09 d1 02 c0       	push   0xc002d109
c001fb5a:	e8 e2 32 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001fb5f:	58                   	pop    eax
c001fb60:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fb64:	5a                   	pop    edx
c001fb65:	50                   	push   eax
c001fb66:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb6a:	50                   	push   eax
c001fb6b:	e8 de f4 ff ff       	call   c001f04e <Vm::outbv(unsigned short, unsigned char)>
c001fb70:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb74:	e9 85 00 00 00       	jmp    c001fbfe <Vm::faultHandler(regs*)+0x7a1>
c001fb79:	50                   	push   eax
c001fb7a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb7d:	53                   	push   ebx
c001fb7e:	68 12 d1 02 c0       	push   0xc002d112
c001fb83:	e8 b9 32 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001fb88:	83 c4 10             	add    esp,0x10
c001fb8b:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb8f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb94:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fb97:	74 03                	je     c001fb9c <Vm::faultHandler(regs*)+0x73f>
c001fb99:	ef                   	out    dx,eax
c001fb9a:	eb ab                	jmp    c001fb47 <Vm::faultHandler(regs*)+0x6ea>
c001fb9c:	66 ef                	out    dx,ax
c001fb9e:	eb a7                	jmp    c001fb47 <Vm::faultHandler(regs*)+0x6ea>
c001fba0:	55                   	push   ebp
c001fba1:	55                   	push   ebp
c001fba2:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fba5:	68 1b d1 02 c0       	push   0xc002d11b
c001fbaa:	e8 92 32 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001fbaf:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fbb6:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fbba:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbbd:	e8 79 f4 ff ff       	call   c001f03b <Vm::inbv(unsigned short)>
c001fbc2:	0f b6 c0             	movzx  eax,al
c001fbc5:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fbc8:	eb 31                	jmp    c001fbfb <Vm::faultHandler(regs*)+0x79e>
c001fbca:	56                   	push   esi
c001fbcb:	56                   	push   esi
c001fbcc:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbcf:	68 21 d1 02 c0       	push   0xc002d121
c001fbd4:	e8 68 32 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001fbd9:	83 c4 10             	add    esp,0x10
c001fbdc:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fbdf:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbe4:	74 03                	je     c001fbe9 <Vm::faultHandler(regs*)+0x78c>
c001fbe6:	ed                   	in     eax,dx
c001fbe7:	eb 0d                	jmp    c001fbf6 <Vm::faultHandler(regs*)+0x799>
c001fbe9:	66 ed                	in     ax,dx
c001fbeb:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fbee:	0f b7 c0             	movzx  eax,ax
c001fbf1:	66 31 d2             	xor    dx,dx
c001fbf4:	09 d0                	or     eax,edx
c001fbf6:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fbf9:	eb 2e                	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7cc>
c001fbfb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fbfe:	83 c4 10             	add    esp,0x10
c001fc01:	eb 29                	jmp    c001fc2c <Vm::faultHandler(regs*)+0x7cf>
c001fc03:	50                   	push   eax
c001fc04:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fc07:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fc0a:	68 30 d1 02 c0       	push   0xc002d130
c001fc0f:	e8 2d 32 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001fc14:	83 c4 10             	add    esp,0x10
c001fc17:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fc1a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc1f:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fc22:	74 03                	je     c001fc27 <Vm::faultHandler(regs*)+0x7ca>
c001fc24:	ef                   	out    dx,eax
c001fc25:	eb 02                	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7cc>
c001fc27:	66 ef                	out    dx,ax
c001fc29:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fc2c:	b0 01                	mov    al,0x1
c001fc2e:	eb 56                	jmp    c001fc86 <Vm::faultHandler(regs*)+0x829>
c001fc30:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fc34:	51                   	push   ecx
c001fc35:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fc39:	51                   	push   ecx
c001fc3a:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc3e:	51                   	push   ecx
c001fc3f:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc43:	51                   	push   ecx
c001fc44:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc48:	52                   	push   edx
c001fc49:	50                   	push   eax
c001fc4a:	50                   	push   eax
c001fc4b:	68 39 d1 02 c0       	push   0xc002d139
c001fc50:	e8 ec 31 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c001fc55:	83 c4 20             	add    esp,0x20
c001fc58:	83 ec 0c             	sub    esp,0xc
c001fc5b:	6a 60                	push   0x60
c001fc5d:	e8 d9 f3 ff ff       	call   c001f03b <Vm::inbv(unsigned short)>
c001fc62:	83 c4 10             	add    esp,0x10
c001fc65:	3c 1c                	cmp    al,0x1c
c001fc67:	74 04                	je     c001fc6d <Vm::faultHandler(regs*)+0x810>
c001fc69:	3c 5a                	cmp    al,0x5a
c001fc6b:	75 eb                	jne    c001fc58 <Vm::faultHandler(regs*)+0x7fb>
c001fc6d:	3c 1c                	cmp    al,0x1c
c001fc6f:	74 04                	je     c001fc75 <Vm::faultHandler(regs*)+0x818>
c001fc71:	3c 5a                	cmp    al,0x5a
c001fc73:	75 0f                	jne    c001fc84 <Vm::faultHandler(regs*)+0x827>
c001fc75:	83 ec 0c             	sub    esp,0xc
c001fc78:	6a 60                	push   0x60
c001fc7a:	e8 bc f3 ff ff       	call   c001f03b <Vm::inbv(unsigned short)>
c001fc7f:	83 c4 10             	add    esp,0x10
c001fc82:	eb e9                	jmp    c001fc6d <Vm::faultHandler(regs*)+0x810>
c001fc84:	31 c0                	xor    eax,eax
c001fc86:	83 c4 1c             	add    esp,0x1c
c001fc89:	5b                   	pop    ebx
c001fc8a:	5e                   	pop    esi
c001fc8b:	5f                   	pop    edi
c001fc8c:	5d                   	pop    ebp
c001fc8d:	c3                   	ret    

c001fc8e <Vm::fpuInternalTo32(unsigned long long)>:
c001fc8e:	57                   	push   edi
c001fc8f:	56                   	push   esi
c001fc90:	53                   	push   ebx
c001fc91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc99:	89 d6                	mov    esi,edx
c001fc9b:	89 d7                	mov    edi,edx
c001fc9d:	89 c1                	mov    ecx,eax
c001fc9f:	c1 ef 14             	shr    edi,0x14
c001fca2:	89 d3                	mov    ebx,edx
c001fca4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fcaa:	31 d2                	xor    edx,edx
c001fcac:	89 f8                	mov    eax,edi
c001fcae:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fcb4:	bf ff 00 00 00       	mov    edi,0xff
c001fcb9:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fcbe:	83 d2 ff             	adc    edx,0xffffffff
c001fcc1:	39 c7                	cmp    edi,eax
c001fcc3:	bf 00 00 00 00       	mov    edi,0x0
c001fcc8:	19 d7                	sbb    edi,edx
c001fcca:	72 15                	jb     c001fce1 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fccc:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fcd0:	c1 e0 17             	shl    eax,0x17
c001fcd3:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fcd9:	09 f1                	or     ecx,esi
c001fcdb:	09 c1                	or     ecx,eax
c001fcdd:	89 cf                	mov    edi,ecx
c001fcdf:	eb 02                	jmp    c001fce3 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fce1:	31 ff                	xor    edi,edi
c001fce3:	89 f8                	mov    eax,edi
c001fce5:	5b                   	pop    ebx
c001fce6:	5e                   	pop    esi
c001fce7:	5f                   	pop    edi
c001fce8:	c3                   	ret    

c001fce9 <Vm::fpuInternalTo64(unsigned long long)>:
c001fce9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fced:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fcf1:	c3                   	ret    

c001fcf2 <Vm::fpu32ToInternal(unsigned int)>:
c001fcf2:	57                   	push   edi
c001fcf3:	31 ff                	xor    edi,edi
c001fcf5:	56                   	push   esi
c001fcf6:	53                   	push   ebx
c001fcf7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fcfb:	89 cb                	mov    ebx,ecx
c001fcfd:	89 ce                	mov    esi,ecx
c001fcff:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fd05:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fd0b:	c1 e9 17             	shr    ecx,0x17
c001fd0e:	89 f0                	mov    eax,esi
c001fd10:	0f b6 d1             	movzx  edx,cl
c001fd13:	81 c2 80 03 00 00    	add    edx,0x380
c001fd19:	89 d1                	mov    ecx,edx
c001fd1b:	89 fa                	mov    edx,edi
c001fd1d:	c1 e1 14             	shl    ecx,0x14
c001fd20:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fd24:	c1 e0 1d             	shl    eax,0x1d
c001fd27:	89 d7                	mov    edi,edx
c001fd29:	89 c6                	mov    esi,eax
c001fd2b:	89 ca                	mov    edx,ecx
c001fd2d:	89 f0                	mov    eax,esi
c001fd2f:	09 fa                	or     edx,edi
c001fd31:	09 da                	or     edx,ebx
c001fd33:	5b                   	pop    ebx
c001fd34:	5e                   	pop    esi
c001fd35:	5f                   	pop    edi
c001fd36:	c3                   	ret    

c001fd37 <Vm::fpu64ToInternal(unsigned long long)>:
c001fd37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd3f:	c3                   	ret    

c001fd40 <Vm::fpuFloatToLong(unsigned long long)>:
c001fd40:	57                   	push   edi
c001fd41:	31 c0                	xor    eax,eax
c001fd43:	56                   	push   esi
c001fd44:	31 d2                	xor    edx,edx
c001fd46:	53                   	push   ebx
c001fd47:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd4f:	89 d9                	mov    ecx,ebx
c001fd51:	c1 e9 14             	shr    ecx,0x14
c001fd54:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fd5a:	89 cf                	mov    edi,ecx
c001fd5c:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fd62:	78 33                	js     c001fd97 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd64:	89 d9                	mov    ecx,ebx
c001fd66:	89 f0                	mov    eax,esi
c001fd68:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fd6e:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fd74:	89 ca                	mov    edx,ecx
c001fd76:	b9 34 00 00 00       	mov    ecx,0x34
c001fd7b:	29 f9                	sub    ecx,edi
c001fd7d:	0f ad d0             	shrd   eax,edx,cl
c001fd80:	d3 fa                	sar    edx,cl
c001fd82:	f6 c1 20             	test   cl,0x20
c001fd85:	74 05                	je     c001fd8c <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fd87:	89 d0                	mov    eax,edx
c001fd89:	c1 fa 1f             	sar    edx,0x1f
c001fd8c:	85 db                	test   ebx,ebx
c001fd8e:	79 07                	jns    c001fd97 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd90:	f7 d8                	neg    eax
c001fd92:	83 d2 00             	adc    edx,0x0
c001fd95:	f7 da                	neg    edx
c001fd97:	5b                   	pop    ebx
c001fd98:	5e                   	pop    esi
c001fd99:	5f                   	pop    edi
c001fd9a:	c3                   	ret    

c001fd9b <Vm::fpuULongToFloat(unsigned long long)>:
c001fd9b:	57                   	push   edi
c001fd9c:	31 c9                	xor    ecx,ecx
c001fd9e:	56                   	push   esi
c001fd9f:	53                   	push   ebx
c001fda0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fda4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fda8:	0f ba e7 14          	bt     edi,0x14
c001fdac:	72 07                	jb     c001fdb5 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fdae:	01 f6                	add    esi,esi
c001fdb0:	11 ff                	adc    edi,edi
c001fdb2:	41                   	inc    ecx
c001fdb3:	eb f3                	jmp    c001fda8 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fdb5:	89 fa                	mov    edx,edi
c001fdb7:	89 f0                	mov    eax,esi
c001fdb9:	bb 33 04 00 00       	mov    ebx,0x433
c001fdbe:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fdc4:	29 cb                	sub    ebx,ecx
c001fdc6:	89 d9                	mov    ecx,ebx
c001fdc8:	5b                   	pop    ebx
c001fdc9:	c1 e1 14             	shl    ecx,0x14
c001fdcc:	5e                   	pop    esi
c001fdcd:	09 ca                	or     edx,ecx
c001fdcf:	5f                   	pop    edi
c001fdd0:	c3                   	ret    

c001fdd1 <Vm::fpuLongToFloat(long long)>:
c001fdd1:	56                   	push   esi
c001fdd2:	31 c0                	xor    eax,eax
c001fdd4:	53                   	push   ebx
c001fdd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fdd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fddd:	39 c8                	cmp    eax,ecx
c001fddf:	19 d8                	sbb    eax,ebx
c001fde1:	7d 04                	jge    c001fde7 <Vm::fpuLongToFloat(long long)+0x16>
c001fde3:	31 f6                	xor    esi,esi
c001fde5:	eb 0c                	jmp    c001fdf3 <Vm::fpuLongToFloat(long long)+0x22>
c001fde7:	f7 d9                	neg    ecx
c001fde9:	be 01 00 00 00       	mov    esi,0x1
c001fdee:	83 d3 00             	adc    ebx,0x0
c001fdf1:	f7 db                	neg    ebx
c001fdf3:	31 c0                	xor    eax,eax
c001fdf5:	0f ba e3 14          	bt     ebx,0x14
c001fdf9:	72 07                	jb     c001fe02 <Vm::fpuLongToFloat(long long)+0x31>
c001fdfb:	01 c9                	add    ecx,ecx
c001fdfd:	11 db                	adc    ebx,ebx
c001fdff:	40                   	inc    eax
c001fe00:	eb f3                	jmp    c001fdf5 <Vm::fpuLongToFloat(long long)+0x24>
c001fe02:	ba 33 04 00 00       	mov    edx,0x433
c001fe07:	29 c2                	sub    edx,eax
c001fe09:	89 c8                	mov    eax,ecx
c001fe0b:	c1 e2 14             	shl    edx,0x14
c001fe0e:	89 d9                	mov    ecx,ebx
c001fe10:	89 f3                	mov    ebx,esi
c001fe12:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fe18:	09 ca                	or     edx,ecx
c001fe1a:	84 db                	test   bl,bl
c001fe1c:	74 06                	je     c001fe24 <Vm::fpuLongToFloat(long long)+0x53>
c001fe1e:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fe24:	5b                   	pop    ebx
c001fe25:	5e                   	pop    esi
c001fe26:	c3                   	ret    

c001fe27 <Vm::fpuGet0()>:
c001fe27:	31 c0                	xor    eax,eax
c001fe29:	31 d2                	xor    edx,edx
c001fe2b:	c3                   	ret    

c001fe2c <Vm::fpuGet1()>:
c001fe2c:	b8 01 00 00 00       	mov    eax,0x1
c001fe31:	31 d2                	xor    edx,edx
c001fe33:	c3                   	ret    

c001fe34 <Vm::fpuGetPi()>:
c001fe34:	b8 03 00 00 00       	mov    eax,0x3
c001fe39:	31 d2                	xor    edx,edx
c001fe3b:	c3                   	ret    

c001fe3c <Vm::fpuGetLog2E()>:
c001fe3c:	83 ec 18             	sub    esp,0x18
c001fe3f:	68 98 d1 02 c0       	push   0xc002d198
c001fe44:	e8 b2 a9 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001fe49:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe4e:	31 d2                	xor    edx,edx
c001fe50:	83 c4 1c             	add    esp,0x1c
c001fe53:	c3                   	ret    

c001fe54 <Vm::fpuGetLogE2()>:
c001fe54:	83 ec 18             	sub    esp,0x18
c001fe57:	68 a4 d1 02 c0       	push   0xc002d1a4
c001fe5c:	e8 9a a9 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001fe61:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe66:	31 d2                	xor    edx,edx
c001fe68:	83 c4 1c             	add    esp,0x1c
c001fe6b:	c3                   	ret    

c001fe6c <Vm::fpuGetLog210()>:
c001fe6c:	83 ec 18             	sub    esp,0x18
c001fe6f:	68 b0 d1 02 c0       	push   0xc002d1b0
c001fe74:	e8 82 a9 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001fe79:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe7e:	31 d2                	xor    edx,edx
c001fe80:	83 c4 1c             	add    esp,0x1c
c001fe83:	c3                   	ret    

c001fe84 <Vm::fpuGetLog102()>:
c001fe84:	83 ec 18             	sub    esp,0x18
c001fe87:	68 bd d1 02 c0       	push   0xc002d1bd
c001fe8c:	e8 6a a9 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001fe91:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe96:	31 d2                	xor    edx,edx
c001fe98:	83 c4 1c             	add    esp,0x1c
c001fe9b:	c3                   	ret    

c001fe9c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fe9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fea0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fea4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fea8:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001feac:	0f 92 c0             	setb   al
c001feaf:	c3                   	ret    

c001feb0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001feb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001feb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb8:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001febc:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001fec0:	09 c2                	or     edx,eax
c001fec2:	0f 94 c0             	sete   al
c001fec5:	c3                   	ret    

c001fec6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fec6:	57                   	push   edi
c001fec7:	56                   	push   esi
c001fec8:	53                   	push   ebx
c001fec9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fecd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fed1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fed5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fed9:	57                   	push   edi
c001feda:	56                   	push   esi
c001fedb:	53                   	push   ebx
c001fedc:	51                   	push   ecx
c001fedd:	e8 ce ff ff ff       	call   c001feb0 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fee2:	83 c4 10             	add    esp,0x10
c001fee5:	88 c2                	mov    dl,al
c001fee7:	31 c0                	xor    eax,eax
c001fee9:	84 d2                	test   dl,dl
c001feeb:	75 0c                	jne    c001fef9 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001feed:	57                   	push   edi
c001feee:	56                   	push   esi
c001feef:	53                   	push   ebx
c001fef0:	51                   	push   ecx
c001fef1:	e8 a6 ff ff ff       	call   c001fe9c <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fef6:	83 c4 10             	add    esp,0x10
c001fef9:	83 e0 01             	and    eax,0x1
c001fefc:	5b                   	pop    ebx
c001fefd:	88 c1                	mov    cl,al
c001feff:	83 e2 01             	and    edx,0x1
c001ff02:	a0 41 24 03 c0       	mov    al,ds:0xc0032441
c001ff07:	c1 e2 06             	shl    edx,0x6
c001ff0a:	83 e0 ba             	and    eax,0xffffffba
c001ff0d:	5e                   	pop    esi
c001ff0e:	09 c8                	or     eax,ecx
c001ff10:	5f                   	pop    edi
c001ff11:	09 d0                	or     eax,edx
c001ff13:	a2 41 24 03 c0       	mov    ds:0xc0032441,al
c001ff18:	c3                   	ret    

c001ff19 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ff19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff21:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ff25:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ff29:	c3                   	ret    

c001ff2a <Vm::fpuAbs(unsigned long long)>:
c001ff2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff32:	c3                   	ret    

c001ff33 <Vm::fpuChs(unsigned long long)>:
c001ff33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff37:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff3b:	f7 d8                	neg    eax
c001ff3d:	83 d2 00             	adc    edx,0x0
c001ff40:	f7 da                	neg    edx
c001ff42:	c3                   	ret    

c001ff43 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ff43:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ff47:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ff4c:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ff50:	eb c7                	jmp    c001ff19 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ff52 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ff52:	53                   	push   ebx
c001ff53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff5f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff63:	0f af ca             	imul   ecx,edx
c001ff66:	0f af d8             	imul   ebx,eax
c001ff69:	f7 e2                	mul    edx
c001ff6b:	01 d9                	add    ecx,ebx
c001ff6d:	5b                   	pop    ebx
c001ff6e:	01 ca                	add    edx,ecx
c001ff70:	c3                   	ret    

c001ff71 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ff71:	83 ec 0c             	sub    esp,0xc
c001ff74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff84:	e8 5b 72 00 00       	call   c00271e4 <__udivdi3>
c001ff89:	83 c4 1c             	add    esp,0x1c
c001ff8c:	c3                   	ret    

c001ff8d <Vm::fpuSquare(unsigned long long)>:
c001ff8d:	50                   	push   eax
c001ff8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ff96:	52                   	push   edx
c001ff97:	50                   	push   eax
c001ff98:	52                   	push   edx
c001ff99:	50                   	push   eax
c001ff9a:	e8 b3 ff ff ff       	call   c001ff52 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff9f:	83 c4 14             	add    esp,0x14
c001ffa2:	c3                   	ret    

c001ffa3 <Vm::fpuGetReg(int)>:
c001ffa3:	83 ec 0c             	sub    esp,0xc
c001ffa6:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ffab:	76 10                	jbe    c001ffbd <Vm::fpuGetReg(int)+0x1a>
c001ffad:	83 ec 0c             	sub    esp,0xc
c001ffb0:	68 ca d1 02 c0       	push   0xc002d1ca
c001ffb5:	e8 41 a8 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c001ffba:	83 c4 10             	add    esp,0x10
c001ffbd:	a0 41 24 03 c0       	mov    al,ds:0xc0032441
c001ffc2:	b9 08 00 00 00       	mov    ecx,0x8
c001ffc7:	c0 e8 03             	shr    al,0x3
c001ffca:	83 e0 07             	and    eax,0x7
c001ffcd:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ffd1:	99                   	cdq    
c001ffd2:	f7 f9                	idiv   ecx
c001ffd4:	8b 04 d5 44 24 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdbbc]
c001ffdb:	8b 14 d5 48 24 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdbb8]
c001ffe2:	83 c4 0c             	add    esp,0xc
c001ffe5:	c3                   	ret    

c001ffe6 <Vm::fpuSetReg(int, unsigned long long)>:
c001ffe6:	57                   	push   edi
c001ffe7:	56                   	push   esi
c001ffe8:	52                   	push   edx
c001ffe9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ffed:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fff1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fff6:	76 10                	jbe    c0020008 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fff8:	83 ec 0c             	sub    esp,0xc
c001fffb:	68 dd d1 02 c0       	push   0xc002d1dd
c0020000:	e8 f6 a7 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0020005:	83 c4 10             	add    esp,0x10
c0020008:	a0 41 24 03 c0       	mov    al,ds:0xc0032441
c002000d:	b9 08 00 00 00       	mov    ecx,0x8
c0020012:	c0 e8 03             	shr    al,0x3
c0020015:	83 e0 07             	and    eax,0x7
c0020018:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002001c:	99                   	cdq    
c002001d:	f7 f9                	idiv   ecx
c002001f:	89 34 d5 44 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbbc],esi
c0020026:	89 3c d5 48 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbb8],edi
c002002d:	58                   	pop    eax
c002002e:	5e                   	pop    esi
c002002f:	5f                   	pop    edi
c0020030:	c3                   	ret    

c0020031 <Vm::fpuPush(unsigned long long)>:
c0020031:	a0 41 24 03 c0       	mov    al,ds:0xc0032441
c0020036:	c0 e8 03             	shr    al,0x3
c0020039:	83 e0 07             	and    eax,0x7
c002003c:	83 c0 07             	add    eax,0x7
c002003f:	88 c2                	mov    dl,al
c0020041:	83 e0 07             	and    eax,0x7
c0020044:	83 e2 07             	and    edx,0x7
c0020047:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c002004e:	8a 15 41 24 03 c0    	mov    dl,BYTE PTR ds:0xc0032441
c0020054:	83 e2 c7             	and    edx,0xffffffc7
c0020057:	09 ca                	or     edx,ecx
c0020059:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002005d:	88 15 41 24 03 c0    	mov    BYTE PTR ds:0xc0032441,dl
c0020063:	89 0c c5 48 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbb8],ecx
c002006a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002006e:	89 14 c5 44 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbbc],edx
c0020075:	a1 84 24 03 c0       	mov    eax,ds:0xc0032484
c002007a:	83 f8 08             	cmp    eax,0x8
c002007d:	75 08                	jne    c0020087 <Vm::fpuPush(unsigned long long)+0x56>
c002007f:	80 0d 40 24 03 c0 40 	or     BYTE PTR ds:0xc0032440,0x40
c0020086:	c3                   	ret    
c0020087:	40                   	inc    eax
c0020088:	a3 84 24 03 c0       	mov    ds:0xc0032484,eax
c002008d:	c3                   	ret    

c002008e <Vm::fpuPop()>:
c002008e:	8a 0d 41 24 03 c0    	mov    cl,BYTE PTR ds:0xc0032441
c0020094:	53                   	push   ebx
c0020095:	c0 e9 03             	shr    cl,0x3
c0020098:	8a 1d 41 24 03 c0    	mov    bl,BYTE PTR ds:0xc0032441
c002009e:	83 e1 07             	and    ecx,0x7
c00200a1:	83 e3 c7             	and    ebx,0xffffffc7
c00200a4:	8b 04 cd 44 24 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdbbc]
c00200ab:	8b 14 cd 48 24 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdbb8]
c00200b2:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00200b9:	83 e1 38             	and    ecx,0x38
c00200bc:	09 d9                	or     ecx,ebx
c00200be:	88 0d 41 24 03 c0    	mov    BYTE PTR ds:0xc0032441,cl
c00200c4:	8b 0d 84 24 03 c0    	mov    ecx,DWORD PTR ds:0xc0032484
c00200ca:	85 c9                	test   ecx,ecx
c00200cc:	74 09                	je     c00200d7 <Vm::fpuPop()+0x49>
c00200ce:	49                   	dec    ecx
c00200cf:	89 0d 84 24 03 c0    	mov    DWORD PTR ds:0xc0032484,ecx
c00200d5:	eb 07                	jmp    c00200de <Vm::fpuPop()+0x50>
c00200d7:	80 0d 40 24 03 c0 40 	or     BYTE PTR ds:0xc0032440,0x40
c00200de:	5b                   	pop    ebx
c00200df:	c3                   	ret    

c00200e0 <Vm::x87Handler(regs*)>:
c00200e0:	55                   	push   ebp
c00200e1:	57                   	push   edi
c00200e2:	56                   	push   esi
c00200e3:	53                   	push   ebx
c00200e4:	83 ec 1c             	sub    esp,0x1c
c00200e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00200eb:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00200f0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00200f3:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00200fb:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00200ff:	50                   	push   eax
c0020100:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0020104:	50                   	push   eax
c0020105:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020109:	50                   	push   eax
c002010a:	53                   	push   ebx
c002010b:	e8 bc 9d ff ff       	call   c0019ecc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0020110:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0020113:	83 c4 10             	add    esp,0x10
c0020116:	89 c6                	mov    esi,eax
c0020118:	80 fa d9             	cmp    dl,0xd9
c002011b:	0f 85 52 01 00 00    	jne    c0020273 <Vm::x87Handler(regs*)+0x193>
c0020121:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020125:	8d 50 20             	lea    edx,[eax+0x20]
c0020128:	80 fa 0e             	cmp    dl,0xe
c002012b:	0f 87 86 00 00 00    	ja     c00201b7 <Vm::x87Handler(regs*)+0xd7>
c0020131:	0f b6 d2             	movzx  edx,dl
c0020134:	ff 24 95 f0 d1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2e10]
c002013b:	e8 e7 fc ff ff       	call   c001fe27 <Vm::fpuGet0()>
c0020140:	eb 05                	jmp    c0020147 <Vm::x87Handler(regs*)+0x67>
c0020142:	e8 e5 fc ff ff       	call   c001fe2c <Vm::fpuGet1()>
c0020147:	57                   	push   edi
c0020148:	57                   	push   edi
c0020149:	52                   	push   edx
c002014a:	50                   	push   eax
c002014b:	e8 e1 fe ff ff       	call   c0020031 <Vm::fpuPush(unsigned long long)>
c0020150:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020154:	83 c4 10             	add    esp,0x10
c0020157:	b0 01                	mov    al,0x1
c0020159:	e9 e3 09 00 00       	jmp    c0020b41 <Vm::x87Handler(regs*)+0xa61>
c002015e:	83 ec 0c             	sub    esp,0xc
c0020161:	6a 00                	push   0x0
c0020163:	e8 3b fe ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020168:	59                   	pop    ecx
c0020169:	5e                   	pop    esi
c002016a:	52                   	push   edx
c002016b:	50                   	push   eax
c002016c:	e8 c2 fd ff ff       	call   c001ff33 <Vm::fpuChs(unsigned long long)>
c0020171:	eb 13                	jmp    c0020186 <Vm::x87Handler(regs*)+0xa6>
c0020173:	83 ec 0c             	sub    esp,0xc
c0020176:	6a 00                	push   0x0
c0020178:	e8 26 fe ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002017d:	5f                   	pop    edi
c002017e:	5d                   	pop    ebp
c002017f:	52                   	push   edx
c0020180:	50                   	push   eax
c0020181:	e8 a4 fd ff ff       	call   c001ff2a <Vm::fpuAbs(unsigned long long)>
c0020186:	83 c4 0c             	add    esp,0xc
c0020189:	52                   	push   edx
c002018a:	50                   	push   eax
c002018b:	6a 00                	push   0x0
c002018d:	e8 54 fe ff ff       	call   c001ffe6 <Vm::fpuSetReg(int, unsigned long long)>
c0020192:	eb bc                	jmp    c0020150 <Vm::x87Handler(regs*)+0x70>
c0020194:	e8 d3 fc ff ff       	call   c001fe6c <Vm::fpuGetLog210()>
c0020199:	eb ac                	jmp    c0020147 <Vm::x87Handler(regs*)+0x67>
c002019b:	e8 9c fc ff ff       	call   c001fe3c <Vm::fpuGetLog2E()>
c00201a0:	eb a5                	jmp    c0020147 <Vm::x87Handler(regs*)+0x67>
c00201a2:	e8 8d fc ff ff       	call   c001fe34 <Vm::fpuGetPi()>
c00201a7:	eb 9e                	jmp    c0020147 <Vm::x87Handler(regs*)+0x67>
c00201a9:	e8 d6 fc ff ff       	call   c001fe84 <Vm::fpuGetLog102()>
c00201ae:	eb 97                	jmp    c0020147 <Vm::x87Handler(regs*)+0x67>
c00201b0:	e8 9f fc ff ff       	call   c001fe54 <Vm::fpuGetLogE2()>
c00201b5:	eb 90                	jmp    c0020147 <Vm::x87Handler(regs*)+0x67>
c00201b7:	8d 50 40             	lea    edx,[eax+0x40]
c00201ba:	80 fa 07             	cmp    dl,0x7
c00201bd:	77 15                	ja     c00201d4 <Vm::x87Handler(regs*)+0xf4>
c00201bf:	83 ec 0c             	sub    esp,0xc
c00201c2:	2d c0 00 00 00       	sub    eax,0xc0
c00201c7:	50                   	push   eax
c00201c8:	e8 d6 fd ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00201cd:	59                   	pop    ecx
c00201ce:	5e                   	pop    esi
c00201cf:	e9 75 ff ff ff       	jmp    c0020149 <Vm::x87Handler(regs*)+0x69>
c00201d4:	8d 50 38             	lea    edx,[eax+0x38]
c00201d7:	80 fa 07             	cmp    dl,0x7
c00201da:	77 3c                	ja     c0020218 <Vm::x87Handler(regs*)+0x138>
c00201dc:	83 ec 0c             	sub    esp,0xc
c00201df:	2d c8 00 00 00       	sub    eax,0xc8
c00201e4:	50                   	push   eax
c00201e5:	e8 b9 fd ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00201ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201f1:	89 c6                	mov    esi,eax
c00201f3:	89 d7                	mov    edi,edx
c00201f5:	e8 a9 fd ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00201fa:	83 c4 0c             	add    esp,0xc
c00201fd:	52                   	push   edx
c00201fe:	50                   	push   eax
c00201ff:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020203:	2d c8 00 00 00       	sub    eax,0xc8
c0020208:	50                   	push   eax
c0020209:	e8 d8 fd ff ff       	call   c001ffe6 <Vm::fpuSetReg(int, unsigned long long)>
c002020e:	83 c4 0c             	add    esp,0xc
c0020211:	57                   	push   edi
c0020212:	56                   	push   esi
c0020213:	e9 73 ff ff ff       	jmp    c002018b <Vm::x87Handler(regs*)+0xab>
c0020218:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002021c:	84 d2                	test   dl,dl
c002021e:	75 0f                	jne    c002022f <Vm::x87Handler(regs*)+0x14f>
c0020220:	83 ec 0c             	sub    esp,0xc
c0020223:	ff 36                	push   DWORD PTR [esi]
c0020225:	e8 c8 fa ff ff       	call   c001fcf2 <Vm::fpu32ToInternal(unsigned int)>
c002022a:	e9 bf 00 00 00       	jmp    c00202ee <Vm::x87Handler(regs*)+0x20e>
c002022f:	80 fa 03             	cmp    dl,0x3
c0020232:	75 13                	jne    c0020247 <Vm::x87Handler(regs*)+0x167>
c0020234:	e8 55 fe ff ff       	call   c002008e <Vm::fpuPop()>
c0020239:	55                   	push   ebp
c002023a:	55                   	push   ebp
c002023b:	52                   	push   edx
c002023c:	50                   	push   eax
c002023d:	e8 4c fa ff ff       	call   c001fc8e <Vm::fpuInternalTo32(unsigned long long)>
c0020242:	e9 88 00 00 00       	jmp    c00202cf <Vm::x87Handler(regs*)+0x1ef>
c0020247:	80 fa 05             	cmp    dl,0x5
c002024a:	75 0e                	jne    c002025a <Vm::x87Handler(regs*)+0x17a>
c002024c:	66 8b 06             	mov    ax,WORD PTR [esi]
c002024f:	66 a3 42 24 03 c0    	mov    ds:0xc0032442,ax
c0020255:	e9 df 00 00 00       	jmp    c0020339 <Vm::x87Handler(regs*)+0x259>
c002025a:	31 c0                	xor    eax,eax
c002025c:	80 fa 07             	cmp    dl,0x7
c002025f:	0f 85 dc 08 00 00    	jne    c0020b41 <Vm::x87Handler(regs*)+0xa61>
c0020265:	66 a1 42 24 03 c0    	mov    ax,ds:0xc0032442
c002026b:	66 89 06             	mov    WORD PTR [esi],ax
c002026e:	e9 c6 00 00 00       	jmp    c0020339 <Vm::x87Handler(regs*)+0x259>
c0020273:	80 fa d8             	cmp    dl,0xd8
c0020276:	0f 84 c9 00 00 00    	je     c0020345 <Vm::x87Handler(regs*)+0x265>
c002027c:	80 fa dc             	cmp    dl,0xdc
c002027f:	0f 84 0d 02 00 00    	je     c0020492 <Vm::x87Handler(regs*)+0x3b2>
c0020285:	80 fa de             	cmp    dl,0xde
c0020288:	0f 84 cd 02 00 00    	je     c002055b <Vm::x87Handler(regs*)+0x47b>
c002028e:	80 fa dd             	cmp    dl,0xdd
c0020291:	0f 84 5f 04 00 00    	je     c00206f6 <Vm::x87Handler(regs*)+0x616>
c0020297:	80 fa da             	cmp    dl,0xda
c002029a:	0f 84 24 05 00 00    	je     c00207c4 <Vm::x87Handler(regs*)+0x6e4>
c00202a0:	80 fa df             	cmp    dl,0xdf
c00202a3:	0f 84 68 05 00 00    	je     c0020811 <Vm::x87Handler(regs*)+0x731>
c00202a9:	31 c0                	xor    eax,eax
c00202ab:	80 fa db             	cmp    dl,0xdb
c00202ae:	0f 85 8d 08 00 00    	jne    c0020b41 <Vm::x87Handler(regs*)+0xa61>
c00202b4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202b8:	80 fa 03             	cmp    dl,0x3
c00202bb:	0f 85 70 06 00 00    	jne    c0020931 <Vm::x87Handler(regs*)+0x851>
c00202c1:	e8 c8 fd ff ff       	call   c002008e <Vm::fpuPop()>
c00202c6:	55                   	push   ebp
c00202c7:	55                   	push   ebp
c00202c8:	52                   	push   edx
c00202c9:	50                   	push   eax
c00202ca:	e8 71 fa ff ff       	call   c001fd40 <Vm::fpuFloatToLong(unsigned long long)>
c00202cf:	83 c4 10             	add    esp,0x10
c00202d2:	89 06                	mov    DWORD PTR [esi],eax
c00202d4:	eb 63                	jmp    c0020339 <Vm::x87Handler(regs*)+0x259>
c00202d6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202da:	84 d2                	test   dl,dl
c00202dc:	0f 85 e6 05 00 00    	jne    c00208c8 <Vm::x87Handler(regs*)+0x7e8>
c00202e2:	57                   	push   edi
c00202e3:	57                   	push   edi
c00202e4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202e7:	ff 36                	push   DWORD PTR [esi]
c00202e9:	e8 49 fa ff ff       	call   c001fd37 <Vm::fpu64ToInternal(unsigned long long)>
c00202ee:	5e                   	pop    esi
c00202ef:	5f                   	pop    edi
c00202f0:	52                   	push   edx
c00202f1:	50                   	push   eax
c00202f2:	e8 3a fd ff ff       	call   c0020031 <Vm::fpuPush(unsigned long long)>
c00202f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202fb:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00202fe:	e9 51 fe ff ff       	jmp    c0020154 <Vm::x87Handler(regs*)+0x74>
c0020303:	80 fa 03             	cmp    dl,0x3
c0020306:	0f 85 d7 06 00 00    	jne    c00209e3 <Vm::x87Handler(regs*)+0x903>
c002030c:	57                   	push   edi
c002030d:	57                   	push   edi
c002030e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020311:	ff 36                	push   DWORD PTR [esi]
c0020313:	e8 1f fa ff ff       	call   c001fd37 <Vm::fpu64ToInternal(unsigned long long)>
c0020318:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002031f:	89 c6                	mov    esi,eax
c0020321:	89 d7                	mov    edi,edx
c0020323:	e8 7b fc ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020328:	57                   	push   edi
c0020329:	56                   	push   esi
c002032a:	52                   	push   edx
c002032b:	50                   	push   eax
c002032c:	e8 95 fb ff ff       	call   c001fec6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020331:	83 c4 20             	add    esp,0x20
c0020334:	e8 55 fd ff ff       	call   c002008e <Vm::fpuPop()>
c0020339:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002033d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020340:	e9 12 fe ff ff       	jmp    c0020157 <Vm::x87Handler(regs*)+0x77>
c0020345:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020349:	8d 50 40             	lea    edx,[eax+0x40]
c002034c:	80 fa 07             	cmp    dl,0x7
c002034f:	77 29                	ja     c002037a <Vm::x87Handler(regs*)+0x29a>
c0020351:	83 ec 0c             	sub    esp,0xc
c0020354:	2d c0 00 00 00       	sub    eax,0xc0
c0020359:	50                   	push   eax
c002035a:	e8 44 fc ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002035f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020366:	89 c6                	mov    esi,eax
c0020368:	89 d7                	mov    edi,edx
c002036a:	e8 34 fc ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002036f:	57                   	push   edi
c0020370:	56                   	push   esi
c0020371:	52                   	push   edx
c0020372:	50                   	push   eax
c0020373:	e8 a1 fb ff ff       	call   c001ff19 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020378:	eb 2f                	jmp    c00203a9 <Vm::x87Handler(regs*)+0x2c9>
c002037a:	8d 50 38             	lea    edx,[eax+0x38]
c002037d:	80 fa 07             	cmp    dl,0x7
c0020380:	77 2f                	ja     c00203b1 <Vm::x87Handler(regs*)+0x2d1>
c0020382:	83 ec 0c             	sub    esp,0xc
c0020385:	2d c8 00 00 00       	sub    eax,0xc8
c002038a:	50                   	push   eax
c002038b:	e8 13 fc ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020390:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020397:	89 c6                	mov    esi,eax
c0020399:	89 d7                	mov    edi,edx
c002039b:	e8 03 fc ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00203a0:	57                   	push   edi
c00203a1:	56                   	push   esi
c00203a2:	52                   	push   edx
c00203a3:	50                   	push   eax
c00203a4:	e8 a9 fb ff ff       	call   c001ff52 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00203a9:	83 c4 1c             	add    esp,0x1c
c00203ac:	e9 d8 fd ff ff       	jmp    c0020189 <Vm::x87Handler(regs*)+0xa9>
c00203b1:	8d 50 30             	lea    edx,[eax+0x30]
c00203b4:	80 fa 07             	cmp    dl,0x7
c00203b7:	77 0d                	ja     c00203c6 <Vm::x87Handler(regs*)+0x2e6>
c00203b9:	83 ec 0c             	sub    esp,0xc
c00203bc:	2d d0 00 00 00       	sub    eax,0xd0
c00203c1:	e9 99 03 00 00       	jmp    c002075f <Vm::x87Handler(regs*)+0x67f>
c00203c6:	8d 50 28             	lea    edx,[eax+0x28]
c00203c9:	80 fa 07             	cmp    dl,0x7
c00203cc:	77 0d                	ja     c00203db <Vm::x87Handler(regs*)+0x2fb>
c00203ce:	83 ec 0c             	sub    esp,0xc
c00203d1:	2d d8 00 00 00       	sub    eax,0xd8
c00203d6:	e9 c0 03 00 00       	jmp    c002079b <Vm::x87Handler(regs*)+0x6bb>
c00203db:	8d 50 20             	lea    edx,[eax+0x20]
c00203de:	80 fa 07             	cmp    dl,0x7
c00203e1:	77 1b                	ja     c00203fe <Vm::x87Handler(regs*)+0x31e>
c00203e3:	83 ec 0c             	sub    esp,0xc
c00203e6:	2d e0 00 00 00       	sub    eax,0xe0
c00203eb:	50                   	push   eax
c00203ec:	e8 b2 fb ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00203f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203f8:	89 c6                	mov    esi,eax
c00203fa:	89 d7                	mov    edi,edx
c00203fc:	eb 22                	jmp    c0020420 <Vm::x87Handler(regs*)+0x340>
c00203fe:	8d 50 18             	lea    edx,[eax+0x18]
c0020401:	80 fa 07             	cmp    dl,0x7
c0020404:	77 2d                	ja     c0020433 <Vm::x87Handler(regs*)+0x353>
c0020406:	83 ec 0c             	sub    esp,0xc
c0020409:	6a 00                	push   0x0
c002040b:	e8 93 fb ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020410:	89 c6                	mov    esi,eax
c0020412:	89 d7                	mov    edi,edx
c0020414:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020418:	2d e8 00 00 00       	sub    eax,0xe8
c002041d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020420:	e8 7e fb ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020425:	57                   	push   edi
c0020426:	56                   	push   esi
c0020427:	52                   	push   edx
c0020428:	50                   	push   eax
c0020429:	e8 15 fb ff ff       	call   c001ff43 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002042e:	e9 76 ff ff ff       	jmp    c00203a9 <Vm::x87Handler(regs*)+0x2c9>
c0020433:	8d 50 10             	lea    edx,[eax+0x10]
c0020436:	80 fa 07             	cmp    dl,0x7
c0020439:	77 1b                	ja     c0020456 <Vm::x87Handler(regs*)+0x376>
c002043b:	83 ec 0c             	sub    esp,0xc
c002043e:	2d f0 00 00 00       	sub    eax,0xf0
c0020443:	50                   	push   eax
c0020444:	e8 5a fb ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020449:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020450:	89 c6                	mov    esi,eax
c0020452:	89 d7                	mov    edi,edx
c0020454:	eb 22                	jmp    c0020478 <Vm::x87Handler(regs*)+0x398>
c0020456:	3c f7                	cmp    al,0xf7
c0020458:	0f 86 d1 03 00 00    	jbe    c002082f <Vm::x87Handler(regs*)+0x74f>
c002045e:	83 ec 0c             	sub    esp,0xc
c0020461:	6a 00                	push   0x0
c0020463:	e8 3b fb ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020468:	89 c6                	mov    esi,eax
c002046a:	89 d7                	mov    edi,edx
c002046c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020470:	2d f8 00 00 00       	sub    eax,0xf8
c0020475:	89 04 24             	mov    DWORD PTR [esp],eax
c0020478:	e8 26 fb ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002047d:	57                   	push   edi
c002047e:	56                   	push   esi
c002047f:	52                   	push   edx
c0020480:	50                   	push   eax
c0020481:	e8 eb fa ff ff       	call   c001ff71 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020486:	83 c4 1c             	add    esp,0x1c
c0020489:	52                   	push   edx
c002048a:	50                   	push   eax
c002048b:	6a 00                	push   0x0
c002048d:	e9 51 02 00 00       	jmp    c00206e3 <Vm::x87Handler(regs*)+0x603>
c0020492:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020496:	8d 50 40             	lea    edx,[eax+0x40]
c0020499:	80 fa 07             	cmp    dl,0x7
c002049c:	77 37                	ja     c00204d5 <Vm::x87Handler(regs*)+0x3f5>
c002049e:	83 ec 0c             	sub    esp,0xc
c00204a1:	2d c0 00 00 00       	sub    eax,0xc0
c00204a6:	50                   	push   eax
c00204a7:	e8 f7 fa ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00204ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204b3:	89 c6                	mov    esi,eax
c00204b5:	89 d7                	mov    edi,edx
c00204b7:	e8 e7 fa ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00204bc:	57                   	push   edi
c00204bd:	56                   	push   esi
c00204be:	52                   	push   edx
c00204bf:	50                   	push   eax
c00204c0:	e8 54 fa ff ff       	call   c001ff19 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00204c5:	83 c4 1c             	add    esp,0x1c
c00204c8:	52                   	push   edx
c00204c9:	50                   	push   eax
c00204ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204ce:	2d c0 00 00 00       	sub    eax,0xc0
c00204d3:	eb 3d                	jmp    c0020512 <Vm::x87Handler(regs*)+0x432>
c00204d5:	8d 50 38             	lea    edx,[eax+0x38]
c00204d8:	80 fa 07             	cmp    dl,0x7
c00204db:	77 3b                	ja     c0020518 <Vm::x87Handler(regs*)+0x438>
c00204dd:	83 ec 0c             	sub    esp,0xc
c00204e0:	2d c8 00 00 00       	sub    eax,0xc8
c00204e5:	50                   	push   eax
c00204e6:	e8 b8 fa ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00204eb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204f2:	89 c6                	mov    esi,eax
c00204f4:	89 d7                	mov    edi,edx
c00204f6:	e8 a8 fa ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00204fb:	57                   	push   edi
c00204fc:	56                   	push   esi
c00204fd:	52                   	push   edx
c00204fe:	50                   	push   eax
c00204ff:	e8 4e fa ff ff       	call   c001ff52 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020504:	83 c4 1c             	add    esp,0x1c
c0020507:	52                   	push   edx
c0020508:	50                   	push   eax
c0020509:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002050d:	2d c8 00 00 00       	sub    eax,0xc8
c0020512:	50                   	push   eax
c0020513:	e9 75 fc ff ff       	jmp    c002018d <Vm::x87Handler(regs*)+0xad>
c0020518:	83 c0 18             	add    eax,0x18
c002051b:	3c 07                	cmp    al,0x7
c002051d:	0f 87 3b 04 00 00    	ja     c002095e <Vm::x87Handler(regs*)+0x87e>
c0020523:	83 ec 0c             	sub    esp,0xc
c0020526:	6a 00                	push   0x0
c0020528:	e8 76 fa ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002052d:	89 c6                	mov    esi,eax
c002052f:	89 d7                	mov    edi,edx
c0020531:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020535:	2d e8 00 00 00       	sub    eax,0xe8
c002053a:	89 04 24             	mov    DWORD PTR [esp],eax
c002053d:	e8 61 fa ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020542:	57                   	push   edi
c0020543:	56                   	push   esi
c0020544:	52                   	push   edx
c0020545:	50                   	push   eax
c0020546:	e8 f8 f9 ff ff       	call   c001ff43 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002054b:	83 c4 1c             	add    esp,0x1c
c002054e:	52                   	push   edx
c002054f:	50                   	push   eax
c0020550:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020554:	2d e8 00 00 00       	sub    eax,0xe8
c0020559:	eb b7                	jmp    c0020512 <Vm::x87Handler(regs*)+0x432>
c002055b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002055f:	8d 50 40             	lea    edx,[eax+0x40]
c0020562:	80 fa 07             	cmp    dl,0x7
c0020565:	77 3a                	ja     c00205a1 <Vm::x87Handler(regs*)+0x4c1>
c0020567:	83 ec 0c             	sub    esp,0xc
c002056a:	2d c0 00 00 00       	sub    eax,0xc0
c002056f:	50                   	push   eax
c0020570:	e8 2e fa ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020575:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002057c:	89 c6                	mov    esi,eax
c002057e:	89 d7                	mov    edi,edx
c0020580:	e8 1e fa ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020585:	57                   	push   edi
c0020586:	56                   	push   esi
c0020587:	52                   	push   edx
c0020588:	50                   	push   eax
c0020589:	e8 8b f9 ff ff       	call   c001ff19 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002058e:	83 c4 1c             	add    esp,0x1c
c0020591:	52                   	push   edx
c0020592:	50                   	push   eax
c0020593:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020597:	2d c0 00 00 00       	sub    eax,0xc0
c002059c:	e9 9e 01 00 00       	jmp    c002073f <Vm::x87Handler(regs*)+0x65f>
c00205a1:	8d 50 20             	lea    edx,[eax+0x20]
c00205a4:	80 fa 07             	cmp    dl,0x7
c00205a7:	77 3a                	ja     c00205e3 <Vm::x87Handler(regs*)+0x503>
c00205a9:	83 ec 0c             	sub    esp,0xc
c00205ac:	2d e0 00 00 00       	sub    eax,0xe0
c00205b1:	50                   	push   eax
c00205b2:	e8 ec f9 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00205b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205be:	89 c6                	mov    esi,eax
c00205c0:	89 d7                	mov    edi,edx
c00205c2:	e8 dc f9 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00205c7:	57                   	push   edi
c00205c8:	56                   	push   esi
c00205c9:	52                   	push   edx
c00205ca:	50                   	push   eax
c00205cb:	e8 73 f9 ff ff       	call   c001ff43 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205d0:	83 c4 1c             	add    esp,0x1c
c00205d3:	52                   	push   edx
c00205d4:	50                   	push   eax
c00205d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205d9:	2d e0 00 00 00       	sub    eax,0xe0
c00205de:	e9 5c 01 00 00       	jmp    c002073f <Vm::x87Handler(regs*)+0x65f>
c00205e3:	8d 50 18             	lea    edx,[eax+0x18]
c00205e6:	80 fa 07             	cmp    dl,0x7
c00205e9:	77 3b                	ja     c0020626 <Vm::x87Handler(regs*)+0x546>
c00205eb:	83 ec 0c             	sub    esp,0xc
c00205ee:	6a 00                	push   0x0
c00205f0:	e8 ae f9 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00205f5:	89 c6                	mov    esi,eax
c00205f7:	89 d7                	mov    edi,edx
c00205f9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205fd:	2d e8 00 00 00       	sub    eax,0xe8
c0020602:	89 04 24             	mov    DWORD PTR [esp],eax
c0020605:	e8 99 f9 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002060a:	57                   	push   edi
c002060b:	56                   	push   esi
c002060c:	52                   	push   edx
c002060d:	50                   	push   eax
c002060e:	e8 30 f9 ff ff       	call   c001ff43 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020613:	83 c4 1c             	add    esp,0x1c
c0020616:	52                   	push   edx
c0020617:	50                   	push   eax
c0020618:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002061c:	2d e8 00 00 00       	sub    eax,0xe8
c0020621:	e9 19 01 00 00       	jmp    c002073f <Vm::x87Handler(regs*)+0x65f>
c0020626:	8d 50 38             	lea    edx,[eax+0x38]
c0020629:	80 fa 07             	cmp    dl,0x7
c002062c:	77 37                	ja     c0020665 <Vm::x87Handler(regs*)+0x585>
c002062e:	83 ec 0c             	sub    esp,0xc
c0020631:	2d c8 00 00 00       	sub    eax,0xc8
c0020636:	50                   	push   eax
c0020637:	e8 67 f9 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002063c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020643:	89 c6                	mov    esi,eax
c0020645:	89 d7                	mov    edi,edx
c0020647:	e8 57 f9 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002064c:	57                   	push   edi
c002064d:	56                   	push   esi
c002064e:	52                   	push   edx
c002064f:	50                   	push   eax
c0020650:	e8 fd f8 ff ff       	call   c001ff52 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020655:	83 c4 1c             	add    esp,0x1c
c0020658:	52                   	push   edx
c0020659:	50                   	push   eax
c002065a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002065e:	2d c8 00 00 00       	sub    eax,0xc8
c0020663:	eb 7d                	jmp    c00206e2 <Vm::x87Handler(regs*)+0x602>
c0020665:	3c f7                	cmp    al,0xf7
c0020667:	76 38                	jbe    c00206a1 <Vm::x87Handler(regs*)+0x5c1>
c0020669:	83 ec 0c             	sub    esp,0xc
c002066c:	6a 00                	push   0x0
c002066e:	e8 30 f9 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020673:	89 c6                	mov    esi,eax
c0020675:	89 d7                	mov    edi,edx
c0020677:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002067b:	2d f8 00 00 00       	sub    eax,0xf8
c0020680:	89 04 24             	mov    DWORD PTR [esp],eax
c0020683:	e8 1b f9 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020688:	57                   	push   edi
c0020689:	56                   	push   esi
c002068a:	52                   	push   edx
c002068b:	50                   	push   eax
c002068c:	e8 e0 f8 ff ff       	call   c001ff71 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020691:	83 c4 1c             	add    esp,0x1c
c0020694:	52                   	push   edx
c0020695:	50                   	push   eax
c0020696:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002069a:	2d f8 00 00 00       	sub    eax,0xf8
c002069f:	eb 41                	jmp    c00206e2 <Vm::x87Handler(regs*)+0x602>
c00206a1:	8d 50 10             	lea    edx,[eax+0x10]
c00206a4:	80 fa 07             	cmp    dl,0x7
c00206a7:	0f 87 5a 01 00 00    	ja     c0020807 <Vm::x87Handler(regs*)+0x727>
c00206ad:	83 ec 0c             	sub    esp,0xc
c00206b0:	2d f0 00 00 00       	sub    eax,0xf0
c00206b5:	50                   	push   eax
c00206b6:	e8 e8 f8 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00206bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206c2:	89 c6                	mov    esi,eax
c00206c4:	89 d7                	mov    edi,edx
c00206c6:	e8 d8 f8 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00206cb:	57                   	push   edi
c00206cc:	56                   	push   esi
c00206cd:	52                   	push   edx
c00206ce:	50                   	push   eax
c00206cf:	e8 9d f8 ff ff       	call   c001ff71 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00206d4:	83 c4 1c             	add    esp,0x1c
c00206d7:	52                   	push   edx
c00206d8:	50                   	push   eax
c00206d9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206dd:	2d f0 00 00 00       	sub    eax,0xf0
c00206e2:	50                   	push   eax
c00206e3:	e8 fe f8 ff ff       	call   c001ffe6 <Vm::fpuSetReg(int, unsigned long long)>
c00206e8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00206ec:	e8 9d f9 ff ff       	call   c002008e <Vm::fpuPop()>
c00206f1:	e9 5e fa ff ff       	jmp    c0020154 <Vm::x87Handler(regs*)+0x74>
c00206f6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206fa:	8d 50 30             	lea    edx,[eax+0x30]
c00206fd:	80 fa 07             	cmp    dl,0x7
c0020700:	77 1d                	ja     c002071f <Vm::x87Handler(regs*)+0x63f>
c0020702:	83 ec 0c             	sub    esp,0xc
c0020705:	6a 00                	push   0x0
c0020707:	e8 97 f8 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002070c:	83 c4 0c             	add    esp,0xc
c002070f:	52                   	push   edx
c0020710:	50                   	push   eax
c0020711:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020715:	2d d0 00 00 00       	sub    eax,0xd0
c002071a:	e9 f3 fd ff ff       	jmp    c0020512 <Vm::x87Handler(regs*)+0x432>
c002071f:	8d 50 28             	lea    edx,[eax+0x28]
c0020722:	80 fa 07             	cmp    dl,0x7
c0020725:	77 28                	ja     c002074f <Vm::x87Handler(regs*)+0x66f>
c0020727:	83 ec 0c             	sub    esp,0xc
c002072a:	6a 00                	push   0x0
c002072c:	e8 72 f8 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020731:	83 c4 0c             	add    esp,0xc
c0020734:	52                   	push   edx
c0020735:	50                   	push   eax
c0020736:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002073a:	2d d8 00 00 00       	sub    eax,0xd8
c002073f:	50                   	push   eax
c0020740:	e8 a1 f8 ff ff       	call   c001ffe6 <Vm::fpuSetReg(int, unsigned long long)>
c0020745:	e8 44 f9 ff ff       	call   c002008e <Vm::fpuPop()>
c002074a:	e9 01 fa ff ff       	jmp    c0020150 <Vm::x87Handler(regs*)+0x70>
c002074f:	8d 50 20             	lea    edx,[eax+0x20]
c0020752:	80 fa 07             	cmp    dl,0x7
c0020755:	77 30                	ja     c0020787 <Vm::x87Handler(regs*)+0x6a7>
c0020757:	83 ec 0c             	sub    esp,0xc
c002075a:	2d e0 00 00 00       	sub    eax,0xe0
c002075f:	50                   	push   eax
c0020760:	e8 3e f8 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020765:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002076c:	89 c6                	mov    esi,eax
c002076e:	89 d7                	mov    edi,edx
c0020770:	e8 2e f8 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020775:	57                   	push   edi
c0020776:	56                   	push   esi
c0020777:	52                   	push   edx
c0020778:	50                   	push   eax
c0020779:	e8 48 f7 ff ff       	call   c001fec6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002077e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020782:	e9 54 02 00 00       	jmp    c00209db <Vm::x87Handler(regs*)+0x8fb>
c0020787:	8d 50 18             	lea    edx,[eax+0x18]
c002078a:	80 fa 07             	cmp    dl,0x7
c002078d:	0f 87 43 fb ff ff    	ja     c00202d6 <Vm::x87Handler(regs*)+0x1f6>
c0020793:	83 ec 0c             	sub    esp,0xc
c0020796:	2d e8 00 00 00       	sub    eax,0xe8
c002079b:	50                   	push   eax
c002079c:	e8 02 f8 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00207a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207a8:	89 c6                	mov    esi,eax
c00207aa:	89 d7                	mov    edi,edx
c00207ac:	e8 f2 f7 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00207b1:	57                   	push   edi
c00207b2:	56                   	push   esi
c00207b3:	52                   	push   edx
c00207b4:	50                   	push   eax
c00207b5:	e8 0c f7 ff ff       	call   c001fec6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207ba:	83 c4 20             	add    esp,0x20
c00207bd:	e8 cc f8 ff ff       	call   c002008e <Vm::fpuPop()>
c00207c2:	eb 62                	jmp    c0020826 <Vm::x87Handler(regs*)+0x746>
c00207c4:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00207c8:	0f 85 0f 01 00 00    	jne    c00208dd <Vm::x87Handler(regs*)+0x7fd>
c00207ce:	83 ec 0c             	sub    esp,0xc
c00207d1:	6a 01                	push   0x1
c00207d3:	e8 cb f7 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00207d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207df:	89 c6                	mov    esi,eax
c00207e1:	89 d7                	mov    edi,edx
c00207e3:	e8 bb f7 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00207e8:	57                   	push   edi
c00207e9:	56                   	push   esi
c00207ea:	52                   	push   edx
c00207eb:	50                   	push   eax
c00207ec:	e8 d5 f6 ff ff       	call   c001fec6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207f1:	83 c4 20             	add    esp,0x20
c00207f4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00207f8:	e8 91 f8 ff ff       	call   c002008e <Vm::fpuPop()>
c00207fd:	e8 8c f8 ff ff       	call   c002008e <Vm::fpuPop()>
c0020802:	e9 50 f9 ff ff       	jmp    c0020157 <Vm::x87Handler(regs*)+0x77>
c0020807:	3c d9                	cmp    al,0xd9
c0020809:	0f 85 b5 02 00 00    	jne    c0020ac4 <Vm::x87Handler(regs*)+0x9e4>
c002080f:	eb bd                	jmp    c00207ce <Vm::x87Handler(regs*)+0x6ee>
c0020811:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020815:	0f 85 ea 02 00 00    	jne    c0020b05 <Vm::x87Handler(regs*)+0xa25>
c002081b:	0f b7 05 40 24 03 c0 	movzx  eax,WORD PTR ds:0xc0032440
c0020822:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020826:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002082a:	e9 28 f9 ff ff       	jmp    c0020157 <Vm::x87Handler(regs*)+0x77>
c002082f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020833:	84 d2                	test   dl,dl
c0020835:	75 0f                	jne    c0020846 <Vm::x87Handler(regs*)+0x766>
c0020837:	83 ec 0c             	sub    esp,0xc
c002083a:	ff 36                	push   DWORD PTR [esi]
c002083c:	e8 b1 f4 ff ff       	call   c001fcf2 <Vm::fpu32ToInternal(unsigned int)>
c0020841:	e9 2c 01 00 00       	jmp    c0020972 <Vm::x87Handler(regs*)+0x892>
c0020846:	80 fa 01             	cmp    dl,0x1
c0020849:	75 0f                	jne    c002085a <Vm::x87Handler(regs*)+0x77a>
c002084b:	83 ec 0c             	sub    esp,0xc
c002084e:	ff 36                	push   DWORD PTR [esi]
c0020850:	e8 9d f4 ff ff       	call   c001fcf2 <Vm::fpu32ToInternal(unsigned int)>
c0020855:	e9 81 02 00 00       	jmp    c0020adb <Vm::x87Handler(regs*)+0x9fb>
c002085a:	80 fa 04             	cmp    dl,0x4
c002085d:	75 0f                	jne    c002086e <Vm::x87Handler(regs*)+0x78e>
c002085f:	83 ec 0c             	sub    esp,0xc
c0020862:	ff 36                	push   DWORD PTR [esi]
c0020864:	e8 89 f4 ff ff       	call   c001fcf2 <Vm::fpu32ToInternal(unsigned int)>
c0020869:	e9 86 01 00 00       	jmp    c00209f4 <Vm::x87Handler(regs*)+0x914>
c002086e:	80 fa 05             	cmp    dl,0x5
c0020871:	75 1b                	jne    c002088e <Vm::x87Handler(regs*)+0x7ae>
c0020873:	83 ec 0c             	sub    esp,0xc
c0020876:	6a 00                	push   0x0
c0020878:	e8 26 f7 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002087d:	89 c7                	mov    edi,eax
c002087f:	89 d5                	mov    ebp,edx
c0020881:	58                   	pop    eax
c0020882:	ff 36                	push   DWORD PTR [esi]
c0020884:	e8 69 f4 ff ff       	call   c001fcf2 <Vm::fpu32ToInternal(unsigned int)>
c0020889:	e9 a3 01 00 00       	jmp    c0020a31 <Vm::x87Handler(regs*)+0x951>
c002088e:	80 fa 06             	cmp    dl,0x6
c0020891:	75 0f                	jne    c00208a2 <Vm::x87Handler(regs*)+0x7c2>
c0020893:	83 ec 0c             	sub    esp,0xc
c0020896:	ff 36                	push   DWORD PTR [esi]
c0020898:	e8 55 f4 ff ff       	call   c001fcf2 <Vm::fpu32ToInternal(unsigned int)>
c002089d:	e9 ae 01 00 00       	jmp    c0020a50 <Vm::x87Handler(regs*)+0x970>
c00208a2:	31 c0                	xor    eax,eax
c00208a4:	80 fa 07             	cmp    dl,0x7
c00208a7:	0f 85 94 02 00 00    	jne    c0020b41 <Vm::x87Handler(regs*)+0xa61>
c00208ad:	83 ec 0c             	sub    esp,0xc
c00208b0:	6a 00                	push   0x0
c00208b2:	e8 ec f6 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00208b7:	89 c7                	mov    edi,eax
c00208b9:	89 d5                	mov    ebp,edx
c00208bb:	58                   	pop    eax
c00208bc:	ff 36                	push   DWORD PTR [esi]
c00208be:	e8 2f f4 ff ff       	call   c001fcf2 <Vm::fpu32ToInternal(unsigned int)>
c00208c3:	e9 cb 01 00 00       	jmp    c0020a93 <Vm::x87Handler(regs*)+0x9b3>
c00208c8:	80 fa 03             	cmp    dl,0x3
c00208cb:	0f 85 d3 01 00 00    	jne    c0020aa4 <Vm::x87Handler(regs*)+0x9c4>
c00208d1:	e8 b8 f7 ff ff       	call   c002008e <Vm::fpuPop()>
c00208d6:	51                   	push   ecx
c00208d7:	51                   	push   ecx
c00208d8:	e9 de 01 00 00       	jmp    c0020abb <Vm::x87Handler(regs*)+0x9db>
c00208dd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00208e1:	80 fa 01             	cmp    dl,0x1
c00208e4:	75 09                	jne    c00208ef <Vm::x87Handler(regs*)+0x80f>
c00208e6:	57                   	push   edi
c00208e7:	57                   	push   edi
c00208e8:	8b 06                	mov    eax,DWORD PTR [esi]
c00208ea:	e9 e3 01 00 00       	jmp    c0020ad2 <Vm::x87Handler(regs*)+0x9f2>
c00208ef:	80 fa 04             	cmp    dl,0x4
c00208f2:	75 12                	jne    c0020906 <Vm::x87Handler(regs*)+0x826>
c00208f4:	31 d2                	xor    edx,edx
c00208f6:	51                   	push   ecx
c00208f7:	51                   	push   ecx
c00208f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00208fa:	52                   	push   edx
c00208fb:	50                   	push   eax
c00208fc:	e8 d0 f4 ff ff       	call   c001fdd1 <Vm::fpuLongToFloat(long long)>
c0020901:	e9 ee 00 00 00       	jmp    c00209f4 <Vm::x87Handler(regs*)+0x914>
c0020906:	31 c0                	xor    eax,eax
c0020908:	80 fa 07             	cmp    dl,0x7
c002090b:	0f 85 30 02 00 00    	jne    c0020b41 <Vm::x87Handler(regs*)+0xa61>
c0020911:	83 ec 0c             	sub    esp,0xc
c0020914:	6a 00                	push   0x0
c0020916:	e8 88 f6 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c002091b:	89 c7                	mov    edi,eax
c002091d:	89 d5                	mov    ebp,edx
c002091f:	58                   	pop    eax
c0020920:	8b 06                	mov    eax,DWORD PTR [esi]
c0020922:	5a                   	pop    edx
c0020923:	31 d2                	xor    edx,edx
c0020925:	52                   	push   edx
c0020926:	50                   	push   eax
c0020927:	e8 a5 f4 ff ff       	call   c001fdd1 <Vm::fpuLongToFloat(long long)>
c002092c:	e9 62 01 00 00       	jmp    c0020a93 <Vm::x87Handler(regs*)+0x9b3>
c0020931:	84 d2                	test   dl,dl
c0020933:	75 0d                	jne    c0020942 <Vm::x87Handler(regs*)+0x862>
c0020935:	31 d2                	xor    edx,edx
c0020937:	55                   	push   ebp
c0020938:	55                   	push   ebp
c0020939:	8b 06                	mov    eax,DWORD PTR [esi]
c002093b:	52                   	push   edx
c002093c:	50                   	push   eax
c002093d:	e9 d3 01 00 00       	jmp    c0020b15 <Vm::x87Handler(regs*)+0xa35>
c0020942:	31 c0                	xor    eax,eax
c0020944:	80 fa 02             	cmp    dl,0x2
c0020947:	0f 85 f4 01 00 00    	jne    c0020b41 <Vm::x87Handler(regs*)+0xa61>
c002094d:	83 ec 0c             	sub    esp,0xc
c0020950:	6a 00                	push   0x0
c0020952:	e8 4c f6 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020957:	59                   	pop    ecx
c0020958:	5f                   	pop    edi
c0020959:	e9 6a f9 ff ff       	jmp    c00202c8 <Vm::x87Handler(regs*)+0x1e8>
c002095e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020962:	84 d2                	test   dl,dl
c0020964:	75 2a                	jne    c0020990 <Vm::x87Handler(regs*)+0x8b0>
c0020966:	50                   	push   eax
c0020967:	50                   	push   eax
c0020968:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002096b:	ff 36                	push   DWORD PTR [esi]
c002096d:	e8 c5 f3 ff ff       	call   c001fd37 <Vm::fpu64ToInternal(unsigned long long)>
c0020972:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020979:	89 c6                	mov    esi,eax
c002097b:	89 d7                	mov    edi,edx
c002097d:	e8 21 f6 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020982:	57                   	push   edi
c0020983:	56                   	push   esi
c0020984:	52                   	push   edx
c0020985:	50                   	push   eax
c0020986:	e8 8e f5 ff ff       	call   c001ff19 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002098b:	e9 64 01 00 00       	jmp    c0020af4 <Vm::x87Handler(regs*)+0xa14>
c0020990:	80 fa 01             	cmp    dl,0x1
c0020993:	75 11                	jne    c00209a6 <Vm::x87Handler(regs*)+0x8c6>
c0020995:	50                   	push   eax
c0020996:	50                   	push   eax
c0020997:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002099a:	ff 36                	push   DWORD PTR [esi]
c002099c:	e8 96 f3 ff ff       	call   c001fd37 <Vm::fpu64ToInternal(unsigned long long)>
c00209a1:	e9 35 01 00 00       	jmp    c0020adb <Vm::x87Handler(regs*)+0x9fb>
c00209a6:	80 fa 02             	cmp    dl,0x2
c00209a9:	0f 85 54 f9 ff ff    	jne    c0020303 <Vm::x87Handler(regs*)+0x223>
c00209af:	55                   	push   ebp
c00209b0:	55                   	push   ebp
c00209b1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209b4:	ff 36                	push   DWORD PTR [esi]
c00209b6:	e8 7c f3 ff ff       	call   c001fd37 <Vm::fpu64ToInternal(unsigned long long)>
c00209bb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209c2:	89 c6                	mov    esi,eax
c00209c4:	89 d7                	mov    edi,edx
c00209c6:	e8 d8 f5 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c00209cb:	57                   	push   edi
c00209cc:	56                   	push   esi
c00209cd:	52                   	push   edx
c00209ce:	50                   	push   eax
c00209cf:	e8 f2 f4 ff ff       	call   c001fec6 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00209d8:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00209db:	83 c4 20             	add    esp,0x20
c00209de:	e9 74 f7 ff ff       	jmp    c0020157 <Vm::x87Handler(regs*)+0x77>
c00209e3:	80 fa 04             	cmp    dl,0x4
c00209e6:	75 2a                	jne    c0020a12 <Vm::x87Handler(regs*)+0x932>
c00209e8:	51                   	push   ecx
c00209e9:	51                   	push   ecx
c00209ea:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209ed:	ff 36                	push   DWORD PTR [esi]
c00209ef:	e8 43 f3 ff ff       	call   c001fd37 <Vm::fpu64ToInternal(unsigned long long)>
c00209f4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209fb:	89 c6                	mov    esi,eax
c00209fd:	89 d7                	mov    edi,edx
c00209ff:	e8 9f f5 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020a04:	57                   	push   edi
c0020a05:	56                   	push   esi
c0020a06:	52                   	push   edx
c0020a07:	50                   	push   eax
c0020a08:	e8 36 f5 ff ff       	call   c001ff43 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a0d:	e9 e2 00 00 00       	jmp    c0020af4 <Vm::x87Handler(regs*)+0xa14>
c0020a12:	80 fa 05             	cmp    dl,0x5
c0020a15:	75 28                	jne    c0020a3f <Vm::x87Handler(regs*)+0x95f>
c0020a17:	83 ec 0c             	sub    esp,0xc
c0020a1a:	6a 00                	push   0x0
c0020a1c:	e8 82 f5 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020a21:	89 c7                	mov    edi,eax
c0020a23:	89 d5                	mov    ebp,edx
c0020a25:	58                   	pop    eax
c0020a26:	5a                   	pop    edx
c0020a27:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a2a:	ff 36                	push   DWORD PTR [esi]
c0020a2c:	e8 06 f3 ff ff       	call   c001fd37 <Vm::fpu64ToInternal(unsigned long long)>
c0020a31:	83 c4 10             	add    esp,0x10
c0020a34:	55                   	push   ebp
c0020a35:	57                   	push   edi
c0020a36:	52                   	push   edx
c0020a37:	50                   	push   eax
c0020a38:	e8 06 f5 ff ff       	call   c001ff43 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a3d:	eb 60                	jmp    c0020a9f <Vm::x87Handler(regs*)+0x9bf>
c0020a3f:	80 fa 06             	cmp    dl,0x6
c0020a42:	75 2a                	jne    c0020a6e <Vm::x87Handler(regs*)+0x98e>
c0020a44:	51                   	push   ecx
c0020a45:	51                   	push   ecx
c0020a46:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a49:	ff 36                	push   DWORD PTR [esi]
c0020a4b:	e8 e7 f2 ff ff       	call   c001fd37 <Vm::fpu64ToInternal(unsigned long long)>
c0020a50:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a57:	89 c6                	mov    esi,eax
c0020a59:	89 d7                	mov    edi,edx
c0020a5b:	e8 43 f5 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020a60:	57                   	push   edi
c0020a61:	56                   	push   esi
c0020a62:	52                   	push   edx
c0020a63:	50                   	push   eax
c0020a64:	e8 08 f5 ff ff       	call   c001ff71 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a69:	e9 86 00 00 00       	jmp    c0020af4 <Vm::x87Handler(regs*)+0xa14>
c0020a6e:	31 c0                	xor    eax,eax
c0020a70:	80 fa 07             	cmp    dl,0x7
c0020a73:	0f 85 c8 00 00 00    	jne    c0020b41 <Vm::x87Handler(regs*)+0xa61>
c0020a79:	83 ec 0c             	sub    esp,0xc
c0020a7c:	6a 00                	push   0x0
c0020a7e:	e8 20 f5 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020a83:	89 c7                	mov    edi,eax
c0020a85:	89 d5                	mov    ebp,edx
c0020a87:	58                   	pop    eax
c0020a88:	5a                   	pop    edx
c0020a89:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a8c:	ff 36                	push   DWORD PTR [esi]
c0020a8e:	e8 a4 f2 ff ff       	call   c001fd37 <Vm::fpu64ToInternal(unsigned long long)>
c0020a93:	83 c4 10             	add    esp,0x10
c0020a96:	55                   	push   ebp
c0020a97:	57                   	push   edi
c0020a98:	52                   	push   edx
c0020a99:	50                   	push   eax
c0020a9a:	e8 d2 f4 ff ff       	call   c001ff71 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a9f:	83 c4 0c             	add    esp,0xc
c0020aa2:	eb 53                	jmp    c0020af7 <Vm::x87Handler(regs*)+0xa17>
c0020aa4:	31 c0                	xor    eax,eax
c0020aa6:	80 fa 02             	cmp    dl,0x2
c0020aa9:	0f 85 92 00 00 00    	jne    c0020b41 <Vm::x87Handler(regs*)+0xa61>
c0020aaf:	83 ec 0c             	sub    esp,0xc
c0020ab2:	6a 00                	push   0x0
c0020ab4:	e8 ea f4 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020ab9:	59                   	pop    ecx
c0020aba:	5f                   	pop    edi
c0020abb:	52                   	push   edx
c0020abc:	50                   	push   eax
c0020abd:	e8 27 f2 ff ff       	call   c001fce9 <Vm::fpuInternalTo64(unsigned long long)>
c0020ac2:	eb 70                	jmp    c0020b34 <Vm::x87Handler(regs*)+0xa54>
c0020ac4:	31 c0                	xor    eax,eax
c0020ac6:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020acb:	75 74                	jne    c0020b41 <Vm::x87Handler(regs*)+0xa61>
c0020acd:	50                   	push   eax
c0020ace:	50                   	push   eax
c0020acf:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020ad2:	31 d2                	xor    edx,edx
c0020ad4:	52                   	push   edx
c0020ad5:	50                   	push   eax
c0020ad6:	e8 f6 f2 ff ff       	call   c001fdd1 <Vm::fpuLongToFloat(long long)>
c0020adb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020ae2:	89 c6                	mov    esi,eax
c0020ae4:	89 d7                	mov    edi,edx
c0020ae6:	e8 b8 f4 ff ff       	call   c001ffa3 <Vm::fpuGetReg(int)>
c0020aeb:	57                   	push   edi
c0020aec:	56                   	push   esi
c0020aed:	52                   	push   edx
c0020aee:	50                   	push   eax
c0020aef:	e8 5e f4 ff ff       	call   c001ff52 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020af4:	83 c4 1c             	add    esp,0x1c
c0020af7:	52                   	push   edx
c0020af8:	50                   	push   eax
c0020af9:	6a 00                	push   0x0
c0020afb:	e8 e6 f4 ff ff       	call   c001ffe6 <Vm::fpuSetReg(int, unsigned long long)>
c0020b00:	e9 f2 f7 ff ff       	jmp    c00202f7 <Vm::x87Handler(regs*)+0x217>
c0020b05:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b09:	80 fa 05             	cmp    dl,0x5
c0020b0c:	75 11                	jne    c0020b1f <Vm::x87Handler(regs*)+0xa3f>
c0020b0e:	55                   	push   ebp
c0020b0f:	55                   	push   ebp
c0020b10:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b13:	ff 36                	push   DWORD PTR [esi]
c0020b15:	e8 81 f2 ff ff       	call   c001fd9b <Vm::fpuULongToFloat(unsigned long long)>
c0020b1a:	e9 cf f7 ff ff       	jmp    c00202ee <Vm::x87Handler(regs*)+0x20e>
c0020b1f:	31 c0                	xor    eax,eax
c0020b21:	80 fa 07             	cmp    dl,0x7
c0020b24:	75 1b                	jne    c0020b41 <Vm::x87Handler(regs*)+0xa61>
c0020b26:	e8 63 f5 ff ff       	call   c002008e <Vm::fpuPop()>
c0020b2b:	51                   	push   ecx
c0020b2c:	51                   	push   ecx
c0020b2d:	52                   	push   edx
c0020b2e:	50                   	push   eax
c0020b2f:	e8 0c f2 ff ff       	call   c001fd40 <Vm::fpuFloatToLong(unsigned long long)>
c0020b34:	83 c4 10             	add    esp,0x10
c0020b37:	89 06                	mov    DWORD PTR [esi],eax
c0020b39:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020b3c:	e9 f8 f7 ff ff       	jmp    c0020339 <Vm::x87Handler(regs*)+0x259>
c0020b41:	83 c4 1c             	add    esp,0x1c
c0020b44:	5b                   	pop    ebx
c0020b45:	5e                   	pop    esi
c0020b46:	5f                   	pop    edi
c0020b47:	5d                   	pop    ebp
c0020b48:	c3                   	ret    

c0020b49 <__static_initialization_and_destruction_0(int, int)>:
c0020b49:	83 ec 0c             	sub    esp,0xc
c0020b4c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020b51:	75 1a                	jne    c0020b6d <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020b5b:	75 10                	jne    c0020b6d <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b5d:	83 ec 0c             	sub    esp,0xc
c0020b60:	68 40 24 03 c0       	push   0xc0032440
c0020b65:	e8 c2 8a 00 00       	call   c002962c <Vm::_FPUState::_FPUState()>
c0020b6a:	83 c4 10             	add    esp,0x10
c0020b6d:	90                   	nop
c0020b6e:	83 c4 0c             	add    esp,0xc
c0020b71:	c3                   	ret    

c0020b72 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020b72:	83 ec 0c             	sub    esp,0xc
c0020b75:	83 ec 08             	sub    esp,0x8
c0020b78:	68 ff ff 00 00       	push   0xffff
c0020b7d:	6a 01                	push   0x1
c0020b7f:	e8 c5 ff ff ff       	call   c0020b49 <__static_initialization_and_destruction_0(int, int)>
c0020b84:	83 c4 10             	add    esp,0x10
c0020b87:	83 c4 0c             	add    esp,0xc
c0020b8a:	c3                   	ret    
c0020b8b:	90                   	nop

c0020b8c <FAT::getName()>:
c0020b8c:	b8 2c d2 02 c0       	mov    eax,0xc002d22c
c0020b91:	c3                   	ret    

c0020b92 <FAT::tell(void*, unsigned long long*)>:
c0020b92:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020b97:	75 06                	jne    c0020b9f <FAT::tell(void*, unsigned long long*)+0xd>
c0020b99:	b8 04 00 00 00       	mov    eax,0x4
c0020b9e:	c3                   	ret    
c0020b9f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020ba4:	75 06                	jne    c0020bac <FAT::tell(void*, unsigned long long*)+0x1a>
c0020ba6:	b8 04 00 00 00       	mov    eax,0x4
c0020bab:	c3                   	ret    
c0020bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bb0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020bb3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020bb6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020bba:	89 01                	mov    DWORD PTR [ecx],eax
c0020bbc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020bbf:	b8 00 00 00 00       	mov    eax,0x0
c0020bc4:	c3                   	ret    
c0020bc5:	90                   	nop

c0020bc6 <FAT::stat(void*, unsigned long long*)>:
c0020bc6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020bcb:	75 06                	jne    c0020bd3 <FAT::stat(void*, unsigned long long*)+0xd>
c0020bcd:	b8 04 00 00 00       	mov    eax,0x4
c0020bd2:	c3                   	ret    
c0020bd3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020bd8:	75 06                	jne    c0020be0 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020bda:	b8 04 00 00 00       	mov    eax,0x4
c0020bdf:	c3                   	ret    
c0020be0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020be4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020be7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020bea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020bee:	89 01                	mov    DWORD PTR [ecx],eax
c0020bf0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020bf3:	b8 00 00 00 00       	mov    eax,0x0
c0020bf8:	c3                   	ret    
c0020bf9:	90                   	nop

c0020bfa <FAT::~FAT()>:
c0020bfa:	83 ec 0c             	sub    esp,0xc
c0020bfd:	ba bc d2 02 c0       	mov    edx,0xc002d2bc
c0020c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c06:	89 10                	mov    DWORD PTR [eax],edx
c0020c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c0c:	83 ec 0c             	sub    esp,0xc
c0020c0f:	50                   	push   eax
c0020c10:	e8 5b 25 ff ff       	call   c0013170 <Filesystem::~Filesystem()>
c0020c15:	83 c4 10             	add    esp,0x10
c0020c18:	90                   	nop
c0020c19:	83 c4 0c             	add    esp,0xc
c0020c1c:	c3                   	ret    
c0020c1d:	90                   	nop

c0020c1e <FAT::~FAT()>:
c0020c1e:	83 ec 0c             	sub    esp,0xc
c0020c21:	83 ec 0c             	sub    esp,0xc
c0020c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c28:	e8 cd ff ff ff       	call   c0020bfa <FAT::~FAT()>
c0020c2d:	83 c4 10             	add    esp,0x10
c0020c30:	83 ec 08             	sub    esp,0x8
c0020c33:	6a 08                	push   0x8
c0020c35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c39:	e8 23 21 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0020c3e:	83 c4 10             	add    esp,0x10
c0020c41:	83 c4 0c             	add    esp,0xc
c0020c44:	c3                   	ret    
c0020c45:	90                   	nop

c0020c46 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020c46:	83 ec 1c             	sub    esp,0x1c
c0020c49:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020c50:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020c55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c59:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020c60:	83 f8 ff             	cmp    eax,0xffffffff
c0020c63:	75 34                	jne    c0020c99 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020c65:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c69:	88 c2                	mov    dl,al
c0020c6b:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020c70:	01 d0                	add    eax,edx
c0020c72:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020c76:	8b 15 a0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324a0
c0020c7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c80:	89 14 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],edx
c0020c87:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020c8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020c90:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0020c97:	eb 17                	jmp    c0020cb0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020c99:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c9d:	88 c2                	mov    dl,al
c0020c9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ca3:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020caa:	01 d0                	add    eax,edx
c0020cac:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020cb0:	83 ec 04             	sub    esp,0x4
c0020cb3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cb7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cbb:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020cbf:	50                   	push   eax
c0020cc0:	e8 53 60 fe ff       	call   c0006d18 <f_getlabel>
c0020cc5:	83 c4 10             	add    esp,0x10
c0020cc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ccc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020cd1:	75 07                	jne    c0020cda <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020cd3:	b8 00 00 00 00       	mov    eax,0x0
c0020cd8:	eb 05                	jmp    c0020cdf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020cda:	b8 01 00 00 00       	mov    eax,0x1
c0020cdf:	83 c4 1c             	add    esp,0x1c
c0020ce2:	c3                   	ret    
c0020ce3:	90                   	nop

c0020ce4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020ce4:	57                   	push   edi
c0020ce5:	83 ec 58             	sub    esp,0x58
c0020ce8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020cf0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020cf4:	b9 0f 00 00 00       	mov    ecx,0xf
c0020cf9:	b8 00 00 00 00       	mov    eax,0x0
c0020cfe:	fc                   	cld    
c0020cff:	89 d7                	mov    edi,edx
c0020d01:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020d03:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d07:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020d0e:	83 f8 ff             	cmp    eax,0xffffffff
c0020d11:	75 34                	jne    c0020d47 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020d13:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d17:	88 c2                	mov    dl,al
c0020d19:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020d1e:	01 d0                	add    eax,edx
c0020d20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d24:	8b 15 a0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324a0
c0020d2a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d2e:	89 14 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],edx
c0020d35:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020d3a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020d3e:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0020d45:	eb 17                	jmp    c0020d5e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020d47:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d4b:	88 c2                	mov    dl,al
c0020d4d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d51:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020d58:	01 d0                	add    eax,edx
c0020d5a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d5e:	83 ec 08             	sub    esp,0x8
c0020d61:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020d65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d69:	50                   	push   eax
c0020d6a:	e8 f9 fb fd ff       	call   c0000968 <strcat>
c0020d6f:	83 c4 10             	add    esp,0x10
c0020d72:	83 ec 0c             	sub    esp,0xc
c0020d75:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d79:	50                   	push   eax
c0020d7a:	e8 87 61 fe ff       	call   c0006f06 <f_setlabel>
c0020d7f:	83 c4 10             	add    esp,0x10
c0020d82:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020d86:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020d8b:	75 07                	jne    c0020d94 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020d8d:	b8 00 00 00 00       	mov    eax,0x0
c0020d92:	eb 05                	jmp    c0020d99 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020d94:	b8 01 00 00 00       	mov    eax,0x1
c0020d99:	83 c4 58             	add    esp,0x58
c0020d9c:	5f                   	pop    edi
c0020d9d:	c3                   	ret    

c0020d9e <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020d9e:	83 ec 2c             	sub    esp,0x2c
c0020da1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020da9:	83 ec 08             	sub    esp,0x8
c0020dac:	68 50 d2 02 c0       	push   0xc002d250
c0020db1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020db5:	e8 fa fa fd ff       	call   c00008b4 <strcmp>
c0020dba:	83 c4 10             	add    esp,0x10
c0020dbd:	85 c0                	test   eax,eax
c0020dbf:	0f 94 c0             	sete   al
c0020dc2:	84 c0                	test   al,al
c0020dc4:	74 0d                	je     c0020dd3 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020dc6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020dce:	e9 a6 00 00 00       	jmp    c0020e79 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020dd3:	83 ec 08             	sub    esp,0x8
c0020dd6:	68 42 d2 02 c0       	push   0xc002d242
c0020ddb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020ddf:	e8 d0 fa fd ff       	call   c00008b4 <strcmp>
c0020de4:	83 c4 10             	add    esp,0x10
c0020de7:	85 c0                	test   eax,eax
c0020de9:	0f 94 c0             	sete   al
c0020dec:	84 c0                	test   al,al
c0020dee:	74 0a                	je     c0020dfa <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020df0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020df8:	eb 7f                	jmp    c0020e79 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020dfa:	83 ec 08             	sub    esp,0x8
c0020dfd:	68 48 d2 02 c0       	push   0xc002d248
c0020e02:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e06:	e8 a9 fa fd ff       	call   c00008b4 <strcmp>
c0020e0b:	83 c4 10             	add    esp,0x10
c0020e0e:	85 c0                	test   eax,eax
c0020e10:	0f 94 c0             	sete   al
c0020e13:	84 c0                	test   al,al
c0020e15:	74 0a                	je     c0020e21 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020e17:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e1f:	eb 58                	jmp    c0020e79 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e21:	83 ec 08             	sub    esp,0x8
c0020e24:	68 8c 9d 02 c0       	push   0xc0029d8c
c0020e29:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e2d:	e8 82 fa fd ff       	call   c00008b4 <strcmp>
c0020e32:	83 c4 10             	add    esp,0x10
c0020e35:	85 c0                	test   eax,eax
c0020e37:	0f 94 c0             	sete   al
c0020e3a:	84 c0                	test   al,al
c0020e3c:	74 0a                	je     c0020e48 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020e3e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020e46:	eb 31                	jmp    c0020e79 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e48:	83 ec 08             	sub    esp,0x8
c0020e4b:	68 4e d2 02 c0       	push   0xc002d24e
c0020e50:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e54:	e8 5b fa fd ff       	call   c00008b4 <strcmp>
c0020e59:	83 c4 10             	add    esp,0x10
c0020e5c:	85 c0                	test   eax,eax
c0020e5e:	0f 94 c0             	sete   al
c0020e61:	84 c0                	test   al,al
c0020e63:	74 0a                	je     c0020e6f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020e65:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020e6d:	eb 0a                	jmp    c0020e79 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e6f:	b8 08 00 00 00       	mov    eax,0x8
c0020e74:	e9 04 01 00 00       	jmp    c0020f7d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020e79:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020e80:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020e85:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e89:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020e90:	83 f8 ff             	cmp    eax,0xffffffff
c0020e93:	75 34                	jne    c0020ec9 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020e95:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020e99:	88 c2                	mov    dl,al
c0020e9b:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020ea0:	01 d0                	add    eax,edx
c0020ea2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020ea6:	8b 15 a0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324a0
c0020eac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020eb0:	89 14 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],edx
c0020eb7:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020ec0:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c0020ec7:	eb 17                	jmp    c0020ee0 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020ec9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020ecd:	88 c2                	mov    dl,al
c0020ecf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ed3:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020eda:	01 d0                	add    eax,edx
c0020edc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020ee0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ee4:	88 04 24             	mov    BYTE PTR [esp],al
c0020ee7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020eeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020eef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020ef7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020efc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020f04:	83 ec 0c             	sub    esp,0xc
c0020f07:	68 00 20 00 00       	push   0x2000
c0020f0c:	e8 95 e9 fe ff       	call   c000f8a6 <malloc>
c0020f11:	83 c4 10             	add    esp,0x10
c0020f14:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f18:	68 00 20 00 00       	push   0x2000
c0020f1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f21:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f25:	50                   	push   eax
c0020f26:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020f2a:	50                   	push   eax
c0020f2b:	e8 21 64 fe ff       	call   c0007351 <f_mkfs>
c0020f30:	83 c4 10             	add    esp,0x10
c0020f33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f37:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020f3c:	75 07                	jne    c0020f45 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020f3e:	b8 00 00 00 00       	mov    eax,0x0
c0020f43:	eb 38                	jmp    c0020f7d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f45:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020f4a:	75 17                	jne    c0020f63 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020f4c:	83 ec 0c             	sub    esp,0xc
c0020f4f:	68 8c d2 02 c0       	push   0xc002d28c
c0020f54:	e8 e8 1e ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0020f59:	83 c4 10             	add    esp,0x10
c0020f5c:	b8 09 00 00 00       	mov    eax,0x9
c0020f61:	eb 1a                	jmp    c0020f7d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f67:	83 ec 08             	sub    esp,0x8
c0020f6a:	50                   	push   eax
c0020f6b:	68 54 d2 02 c0       	push   0xc002d254
c0020f70:	e8 cc 1e ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0020f75:	83 c4 10             	add    esp,0x10
c0020f78:	b8 01 00 00 00       	mov    eax,0x1
c0020f7d:	83 c4 2c             	add    esp,0x2c
c0020f80:	c3                   	ret    
c0020f81:	90                   	nop

c0020f82 <FAT::tryMount(LogicalDisk*, int)>:
c0020f82:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020f88:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0020f8d:	83 f8 14             	cmp    eax,0x14
c0020f90:	75 17                	jne    c0020fa9 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020f92:	83 ec 0c             	sub    esp,0xc
c0020f95:	68 66 d2 02 c0       	push   0xc002d266
c0020f9a:	e8 5c 98 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0020f9f:	83 c4 10             	add    esp,0x10
c0020fa2:	b0 00                	mov    al,0x0
c0020fa4:	e9 d7 01 00 00       	jmp    c0021180 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fa9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020fb0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020fb6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020fbc:	3d 00 02 00 00       	cmp    eax,0x200
c0020fc1:	74 07                	je     c0020fca <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020fc3:	b0 00                	mov    al,0x0
c0020fc5:	e9 b6 01 00 00       	jmp    c0021180 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fca:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020fd2:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020fd9:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c0020fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0020fe3:	74 07                	je     c0020fec <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020fe5:	b0 01                	mov    al,0x1
c0020fe7:	e9 94 01 00 00       	jmp    c0021180 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fec:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020ff6:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020ffe:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0021005:	88 c2                	mov    dl,al
c0021007:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c002100c:	01 d0                	add    eax,edx
c002100e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0021015:	8b 15 a0 24 03 c0    	mov    edx,DWORD PTR ds:0xc00324a0
c002101b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021022:	89 14 85 c0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb40],edx
c0021029:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c002102e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0021035:	89 14 85 40 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdac0],edx
c002103c:	83 ec 0c             	sub    esp,0xc
c002103f:	68 54 02 00 00       	push   0x254
c0021044:	e8 5d e8 fe ff       	call   c000f8a6 <malloc>
c0021049:	83 c4 10             	add    esp,0x10
c002104c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0021053:	83 ec 04             	sub    esp,0x4
c0021056:	6a 00                	push   0x0
c0021058:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002105f:	50                   	push   eax
c0021060:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021067:	e8 a3 3e fe ff       	call   c0004f0f <f_mount>
c002106c:	83 c4 10             	add    esp,0x10
c002106f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021076:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002107e:	74 19                	je     c0021099 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021080:	83 ec 0c             	sub    esp,0xc
c0021083:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002108a:	e8 37 e8 fe ff       	call   c000f8c6 <rfree>
c002108f:	83 c4 10             	add    esp,0x10
c0021092:	b0 00                	mov    al,0x0
c0021094:	e9 e7 00 00 00       	jmp    c0021180 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021099:	83 ec 04             	sub    esp,0x4
c002109c:	68 00 01 00 00       	push   0x100
c00210a1:	6a 00                	push   0x0
c00210a3:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210aa:	50                   	push   eax
c00210ab:	e8 bc f6 fd ff       	call   c000076c <memset>
c00210b0:	83 c4 10             	add    esp,0x10
c00210b3:	83 ec 08             	sub    esp,0x8
c00210b6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00210bd:	50                   	push   eax
c00210be:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210c5:	50                   	push   eax
c00210c6:	e8 9d f8 fd ff       	call   c0000968 <strcat>
c00210cb:	83 c4 10             	add    esp,0x10
c00210ce:	83 ec 08             	sub    esp,0x8
c00210d1:	68 74 d2 02 c0       	push   0xc002d274
c00210d6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210dd:	50                   	push   eax
c00210de:	e8 85 f8 fd ff       	call   c0000968 <strcat>
c00210e3:	83 c4 10             	add    esp,0x10
c00210e6:	83 ec 04             	sub    esp,0x4
c00210e9:	6a 01                	push   0x1
c00210eb:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00210f2:	50                   	push   eax
c00210f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00210f7:	50                   	push   eax
c00210f8:	e8 74 3e fe ff       	call   c0004f71 <f_open>
c00210fd:	83 c4 10             	add    esp,0x10
c0021100:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021107:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002110e:	85 c0                	test   eax,eax
c0021110:	74 0a                	je     c002111c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0021112:	78 2d                	js     c0021141 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021114:	83 e8 04             	sub    eax,0x4
c0021117:	83 f8 01             	cmp    eax,0x1
c002111a:	77 25                	ja     c0021141 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002111c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0021124:	83 ec 0c             	sub    esp,0xc
c0021127:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002112b:	50                   	push   eax
c002112c:	e8 92 49 fe ff       	call   c0005ac3 <f_close>
c0021131:	83 c4 10             	add    esp,0x10
c0021134:	90                   	nop
c0021135:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002113d:	74 3a                	je     c0021179 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002113f:	eb 2d                	jmp    c002116e <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0021141:	83 ec 0c             	sub    esp,0xc
c0021144:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002114b:	e8 76 e7 fe ff       	call   c000f8c6 <rfree>
c0021150:	83 c4 10             	add    esp,0x10
c0021153:	83 ec 04             	sub    esp,0x4
c0021156:	6a 00                	push   0x0
c0021158:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002115f:	50                   	push   eax
c0021160:	6a 00                	push   0x0
c0021162:	e8 a8 3d fe ff       	call   c0004f0f <f_mount>
c0021167:	83 c4 10             	add    esp,0x10
c002116a:	b0 00                	mov    al,0x0
c002116c:	eb 12                	jmp    c0021180 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002116e:	a1 a0 24 03 c0       	mov    eax,ds:0xc00324a0
c0021173:	40                   	inc    eax
c0021174:	a3 a0 24 03 c0       	mov    ds:0xc00324a0,eax
c0021179:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021180:	81 c4 6c 03 00 00    	add    esp,0x36c
c0021186:	c3                   	ret    
c0021187:	90                   	nop

c0021188 <FAT::getFileFirstSector(char const*)>:
c0021188:	53                   	push   ebx
c0021189:	83 ec 28             	sub    esp,0x28
c002118c:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0021194:	83 ec 0c             	sub    esp,0xc
c0021197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002119b:	e8 06 e7 fe ff       	call   c000f8a6 <malloc>
c00211a0:	83 c4 10             	add    esp,0x10
c00211a3:	89 c3                	mov    ebx,eax
c00211a5:	a1 d0 23 03 c0       	mov    eax,ds:0xc00323d0
c00211aa:	83 ec 04             	sub    esp,0x4
c00211ad:	50                   	push   eax
c00211ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00211b2:	53                   	push   ebx
c00211b3:	e8 e8 21 ff ff       	call   c00133a0 <File::File(char const*, Process*)>
c00211b8:	83 c4 10             	add    esp,0x10
c00211bb:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00211bf:	83 ec 08             	sub    esp,0x8
c00211c2:	6a 01                	push   0x1
c00211c4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00211c8:	e8 37 22 ff ff       	call   c0013404 <File::open(FileOpenMode)>
c00211cd:	83 c4 10             	add    esp,0x10
c00211d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211d6:	83 c0 0c             	add    eax,0xc
c00211d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00211db:	83 ec 0c             	sub    esp,0xc
c00211de:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211e2:	52                   	push   edx
c00211e3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00211e7:	52                   	push   edx
c00211e8:	6a 00                	push   0x0
c00211ea:	6a 04                	push   0x4
c00211ec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00211f0:	ff d0                	call   eax
c00211f2:	83 c4 20             	add    esp,0x20
c00211f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211f9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00211ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021203:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021207:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002120a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002120d:	83 ec 04             	sub    esp,0x4
c0021210:	52                   	push   edx
c0021211:	50                   	push   eax
c0021212:	68 7f d2 02 c0       	push   0xc002d27f
c0021217:	e8 25 1c ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c002121c:	83 c4 10             	add    esp,0x10
c002121f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021223:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021226:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021229:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002122d:	83 ec 0c             	sub    esp,0xc
c0021230:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021234:	e8 29 22 ff ff       	call   c0013462 <File::close()>
c0021239:	83 c4 10             	add    esp,0x10
c002123c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021240:	ba 00 00 00 00       	mov    edx,0x0
c0021245:	83 c4 28             	add    esp,0x28
c0021248:	5b                   	pop    ebx
c0021249:	c3                   	ret    

c002124a <FAT::readDir(void*, unsigned long, void*, int*)>:
c002124a:	57                   	push   edi
c002124b:	56                   	push   esi
c002124c:	81 ec 54 02 00 00    	sub    esp,0x254
c0021252:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002125a:	74 0a                	je     c0021266 <FAT::readDir(void*, unsigned long, void*, int*)+0x1c>
c002125c:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0021264:	75 0a                	jne    c0021270 <FAT::readDir(void*, unsigned long, void*, int*)+0x26>
c0021266:	b8 04 00 00 00       	mov    eax,0x4
c002126b:	e9 15 01 00 00       	jmp    c0021385 <FAT::readDir(void*, unsigned long, void*, int*)+0x13b>
c0021270:	83 ec 08             	sub    esp,0x8
c0021273:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002127a:	50                   	push   eax
c002127b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0021282:	e8 46 4e fe ff       	call   c00060cd <f_readdir>
c0021287:	83 c4 10             	add    esp,0x10
c002128a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0021291:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0021298:	83 ec 0c             	sub    esp,0xc
c002129b:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212a2:	83 c0 1a             	add    eax,0x1a
c00212a5:	50                   	push   eax
c00212a6:	e8 dd f4 fd ff       	call   c0000788 <strlen>
c00212ab:	83 c4 10             	add    esp,0x10
c00212ae:	ba 00 00 00 00       	mov    edx,0x0
c00212b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00212b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00212bb:	8a 84 24 28 01 00 00 	mov    al,BYTE PTR [esp+0x128]
c00212c2:	0f b6 c0             	movzx  eax,al
c00212c5:	83 e0 10             	and    eax,0x10
c00212c8:	74 07                	je     c00212d1 <FAT::readDir(void*, unsigned long, void*, int*)+0x87>
c00212ca:	b8 02 00 00 00       	mov    eax,0x2
c00212cf:	eb 05                	jmp    c00212d6 <FAT::readDir(void*, unsigned long, void*, int*)+0x8c>
c00212d1:	b8 01 00 00 00       	mov    eax,0x1
c00212d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00212da:	83 ec 08             	sub    esp,0x8
c00212dd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00212e4:	83 c0 1a             	add    eax,0x1a
c00212e7:	50                   	push   eax
c00212e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212ec:	83 c0 10             	add    eax,0x10
c00212ef:	50                   	push   eax
c00212f0:	e8 33 f5 fd ff       	call   c0000828 <strcpy>
c00212f5:	83 c4 10             	add    esp,0x10
c00212f8:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00212ff:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0021306:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002130a:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0021311:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0021318:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002131f:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0021326:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002132d:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0021334:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c002133b:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0021342:	89 c6                	mov    esi,eax
c0021344:	89 d7                	mov    edi,edx
c0021346:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021348:	89 84 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],eax
c002134f:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0021356:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002135c:	8a 84 24 36 01 00 00 	mov    al,BYTE PTR [esp+0x136]
c0021363:	84 c0                	test   al,al
c0021365:	75 07                	jne    c002136e <FAT::readDir(void*, unsigned long, void*, int*)+0x124>
c0021367:	b8 07 00 00 00       	mov    eax,0x7
c002136c:	eb 17                	jmp    c0021385 <FAT::readDir(void*, unsigned long, void*, int*)+0x13b>
c002136e:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0021375:	85 c0                	test   eax,eax
c0021377:	75 07                	jne    c0021380 <FAT::readDir(void*, unsigned long, void*, int*)+0x136>
c0021379:	b8 00 00 00 00       	mov    eax,0x0
c002137e:	eb 05                	jmp    c0021385 <FAT::readDir(void*, unsigned long, void*, int*)+0x13b>
c0021380:	b8 01 00 00 00       	mov    eax,0x1
c0021385:	81 c4 54 02 00 00    	add    esp,0x254
c002138b:	5e                   	pop    esi
c002138c:	5f                   	pop    edi
c002138d:	c3                   	ret    

c002138e <FAT::read(void*, unsigned long, void*, int*)>:
c002138e:	83 ec 1c             	sub    esp,0x1c
c0021391:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021396:	74 07                	je     c002139f <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021398:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002139d:	75 07                	jne    c00213a6 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c002139f:	b8 04 00 00 00       	mov    eax,0x4
c00213a4:	eb 3d                	jmp    c00213e3 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00213a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00213aa:	50                   	push   eax
c00213ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00213af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00213b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213b7:	e8 f1 3f fe ff       	call   c00053ad <f_read>
c00213bc:	83 c4 10             	add    esp,0x10
c00213bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213c7:	89 c2                	mov    edx,eax
c00213c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213cd:	89 10                	mov    DWORD PTR [eax],edx
c00213cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213d3:	85 c0                	test   eax,eax
c00213d5:	75 07                	jne    c00213de <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00213d7:	b8 00 00 00 00       	mov    eax,0x0
c00213dc:	eb 05                	jmp    c00213e3 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00213de:	b8 01 00 00 00       	mov    eax,0x1
c00213e3:	83 c4 1c             	add    esp,0x1c
c00213e6:	c3                   	ret    
c00213e7:	90                   	nop

c00213e8 <FAT::write(void*, unsigned long, void*, int*)>:
c00213e8:	83 ec 1c             	sub    esp,0x1c
c00213eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00213f0:	74 07                	je     c00213f9 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00213f2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00213f7:	75 07                	jne    c0021400 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00213f9:	b8 04 00 00 00       	mov    eax,0x4
c00213fe:	eb 3d                	jmp    c002143d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021400:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021404:	50                   	push   eax
c0021405:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021409:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002140d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021411:	e8 17 42 fe ff       	call   c000562d <f_write>
c0021416:	83 c4 10             	add    esp,0x10
c0021419:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002141d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021421:	89 c2                	mov    edx,eax
c0021423:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021427:	89 10                	mov    DWORD PTR [eax],edx
c0021429:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002142d:	85 c0                	test   eax,eax
c002142f:	75 07                	jne    c0021438 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0021431:	b8 00 00 00 00       	mov    eax,0x0
c0021436:	eb 05                	jmp    c002143d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021438:	b8 01 00 00 00       	mov    eax,0x1
c002143d:	83 c4 1c             	add    esp,0x1c
c0021440:	c3                   	ret    
c0021441:	90                   	nop

c0021442 <FAT::close(void*)>:
c0021442:	83 ec 1c             	sub    esp,0x1c
c0021445:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002144a:	75 07                	jne    c0021453 <FAT::close(void*)+0x11>
c002144c:	b8 04 00 00 00       	mov    eax,0x4
c0021451:	eb 36                	jmp    c0021489 <FAT::close(void*)+0x47>
c0021453:	83 ec 0c             	sub    esp,0xc
c0021456:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002145a:	e8 64 46 fe ff       	call   c0005ac3 <f_close>
c002145f:	83 c4 10             	add    esp,0x10
c0021462:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021466:	83 ec 0c             	sub    esp,0xc
c0021469:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002146d:	e8 44 e4 fe ff       	call   c000f8b6 <free>
c0021472:	83 c4 10             	add    esp,0x10
c0021475:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021479:	85 c0                	test   eax,eax
c002147b:	75 07                	jne    c0021484 <FAT::close(void*)+0x42>
c002147d:	b8 00 00 00 00       	mov    eax,0x0
c0021482:	eb 05                	jmp    c0021489 <FAT::close(void*)+0x47>
c0021484:	b8 01 00 00 00       	mov    eax,0x1
c0021489:	83 c4 1c             	add    esp,0x1c
c002148c:	c3                   	ret    
c002148d:	90                   	nop

c002148e <FAT::closeDir(void*)>:
c002148e:	83 ec 1c             	sub    esp,0x1c
c0021491:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021496:	75 07                	jne    c002149f <FAT::closeDir(void*)+0x11>
c0021498:	b8 04 00 00 00       	mov    eax,0x4
c002149d:	eb 36                	jmp    c00214d5 <FAT::closeDir(void*)+0x47>
c002149f:	83 ec 0c             	sub    esp,0xc
c00214a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214a6:	e8 00 4c fe ff       	call   c00060ab <f_closedir>
c00214ab:	83 c4 10             	add    esp,0x10
c00214ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214b2:	83 ec 0c             	sub    esp,0xc
c00214b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214b9:	e8 f8 e3 fe ff       	call   c000f8b6 <free>
c00214be:	83 c4 10             	add    esp,0x10
c00214c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214c5:	85 c0                	test   eax,eax
c00214c7:	75 07                	jne    c00214d0 <FAT::closeDir(void*)+0x42>
c00214c9:	b8 00 00 00 00       	mov    eax,0x0
c00214ce:	eb 05                	jmp    c00214d5 <FAT::closeDir(void*)+0x47>
c00214d0:	b8 01 00 00 00       	mov    eax,0x1
c00214d5:	83 c4 1c             	add    esp,0x1c
c00214d8:	c3                   	ret    
c00214d9:	90                   	nop

c00214da <FAT::seek(void*, unsigned long long)>:
c00214da:	83 ec 2c             	sub    esp,0x2c
c00214dd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00214e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00214e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214ed:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00214f2:	75 07                	jne    c00214fb <FAT::seek(void*, unsigned long long)+0x21>
c00214f4:	b8 04 00 00 00       	mov    eax,0x4
c00214f9:	eb 2f                	jmp    c002152a <FAT::seek(void*, unsigned long long)+0x50>
c00214fb:	83 ec 04             	sub    esp,0x4
c00214fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021502:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021506:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002150a:	e8 e3 45 fe ff       	call   c0005af2 <f_lseek>
c002150f:	83 c4 10             	add    esp,0x10
c0021512:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002151a:	85 c0                	test   eax,eax
c002151c:	75 07                	jne    c0021525 <FAT::seek(void*, unsigned long long)+0x4b>
c002151e:	b8 00 00 00 00       	mov    eax,0x0
c0021523:	eb 05                	jmp    c002152a <FAT::seek(void*, unsigned long long)+0x50>
c0021525:	b8 01 00 00 00       	mov    eax,0x1
c002152a:	83 c4 2c             	add    esp,0x2c
c002152d:	c3                   	ret    

c002152e <fatWrapperReadDisk>:
c002152e:	83 ec 1c             	sub    esp,0x1c
c0021531:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021535:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021539:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002153d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021540:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021544:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021548:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002154d:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c0021554:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021558:	83 ec 0c             	sub    esp,0xc
c002155b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002155f:	52                   	push   edx
c0021560:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021564:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021568:	50                   	push   eax
c0021569:	e8 4a 52 ff ff       	call   c00167b8 <LogicalDisk::read(unsigned long long, int, void*)>
c002156e:	83 c4 20             	add    esp,0x20
c0021571:	83 c4 1c             	add    esp,0x1c
c0021574:	c3                   	ret    

c0021575 <fatWrapperWriteDisk>:
c0021575:	83 ec 1c             	sub    esp,0x1c
c0021578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002157c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021580:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021584:	89 04 24             	mov    DWORD PTR [esp],eax
c0021587:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002158b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002158f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021594:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c002159b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002159f:	83 ec 0c             	sub    esp,0xc
c00215a2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215a6:	52                   	push   edx
c00215a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00215ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00215af:	50                   	push   eax
c00215b0:	e8 6f 52 ff ff       	call   c0016824 <LogicalDisk::write(unsigned long long, int, void*)>
c00215b5:	83 c4 20             	add    esp,0x20
c00215b8:	83 c4 1c             	add    esp,0x1c
c00215bb:	c3                   	ret    

c00215bc <fatWrapperIoctl>:
c00215bc:	53                   	push   ebx
c00215bd:	83 ec 28             	sub    esp,0x28
c00215c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00215c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00215c8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00215cc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00215d0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00215d5:	75 31                	jne    c0021608 <fatWrapperIoctl+0x4c>
c00215d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00215df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215e4:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c00215eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00215f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00215f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00215fb:	66 89 02             	mov    WORD PTR [edx],ax
c00215fe:	b8 00 00 00 00       	mov    eax,0x0
c0021603:	e9 b2 00 00 00       	jmp    c00216ba <fatWrapperIoctl+0xfe>
c0021608:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002160d:	75 6a                	jne    c0021679 <fatWrapperIoctl+0xbd>
c002160f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021613:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021617:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002161c:	8b 04 85 80 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b80]
c0021623:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021629:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002162f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021635:	89 c8                	mov    eax,ecx
c0021637:	89 da                	mov    edx,ebx
c0021639:	0f a4 c2 0a          	shld   edx,eax,0xa
c002163d:	c1 e0 0a             	shl    eax,0xa
c0021640:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021645:	8b 0c 8d 80 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0b80]
c002164c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021652:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021658:	89 cb                	mov    ebx,ecx
c002165a:	c1 fb 1f             	sar    ebx,0x1f
c002165d:	53                   	push   ebx
c002165e:	51                   	push   ecx
c002165f:	52                   	push   edx
c0021660:	50                   	push   eax
c0021661:	e8 7e 5b 00 00       	call   c00271e4 <__udivdi3>
c0021666:	83 c4 10             	add    esp,0x10
c0021669:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002166d:	89 01                	mov    DWORD PTR [ecx],eax
c002166f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021672:	b8 00 00 00 00       	mov    eax,0x0
c0021677:	eb 41                	jmp    c00216ba <fatWrapperIoctl+0xfe>
c0021679:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002167e:	75 07                	jne    c0021687 <fatWrapperIoctl+0xcb>
c0021680:	b8 00 00 00 00       	mov    eax,0x0
c0021685:	eb 33                	jmp    c00216ba <fatWrapperIoctl+0xfe>
c0021687:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002168c:	75 19                	jne    c00216a7 <fatWrapperIoctl+0xeb>
c002168e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021692:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021696:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002169a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00216a0:	b8 00 00 00 00       	mov    eax,0x0
c00216a5:	eb 13                	jmp    c00216ba <fatWrapperIoctl+0xfe>
c00216a7:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00216ac:	75 07                	jne    c00216b5 <fatWrapperIoctl+0xf9>
c00216ae:	b8 00 00 00 00       	mov    eax,0x0
c00216b3:	eb 05                	jmp    c00216ba <fatWrapperIoctl+0xfe>
c00216b5:	b8 04 00 00 00       	mov    eax,0x4
c00216ba:	83 c4 28             	add    esp,0x28
c00216bd:	5b                   	pop    ebx
c00216be:	c3                   	ret    
c00216bf:	90                   	nop

c00216c0 <FAT::FAT()>:
c00216c0:	83 ec 1c             	sub    esp,0x1c
c00216c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216c7:	83 ec 0c             	sub    esp,0xc
c00216ca:	50                   	push   eax
c00216cb:	e8 7c 1a ff ff       	call   c001314c <Filesystem::Filesystem()>
c00216d0:	83 c4 10             	add    esp,0x10
c00216d3:	ba bc d2 02 c0       	mov    edx,0xc002d2bc
c00216d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216dc:	89 10                	mov    DWORD PTR [eax],edx
c00216de:	c7 05 a0 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00324a0,0x0
c00216e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00216f0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00216f5:	7f 15                	jg     c002170c <FAT::FAT()+0x4c>
c00216f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216fb:	c7 04 85 c0 24 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdb40],0xffffffff
c0021706:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002170a:	eb e4                	jmp    c00216f0 <FAT::FAT()+0x30>
c002170c:	90                   	nop
c002170d:	83 c4 1c             	add    esp,0x1c
c0021710:	c3                   	ret    
c0021711:	90                   	nop

c0021712 <FAT::fixFilepath(char*)>:
c0021712:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021716:	8a 00                	mov    al,BYTE PTR [eax]
c0021718:	3c 40                	cmp    al,0x40
c002171a:	7e 2c                	jle    c0021748 <FAT::fixFilepath(char*)+0x36>
c002171c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021720:	8a 00                	mov    al,BYTE PTR [eax]
c0021722:	83 e8 41             	sub    eax,0x41
c0021725:	88 c2                	mov    dl,al
c0021727:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002172b:	88 10                	mov    BYTE PTR [eax],dl
c002172d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021731:	8a 00                	mov    al,BYTE PTR [eax]
c0021733:	0f be c0             	movsx  eax,al
c0021736:	8b 04 85 c0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb40]
c002173d:	83 c0 30             	add    eax,0x30
c0021740:	88 c2                	mov    dl,al
c0021742:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021746:	88 10                	mov    BYTE PTR [eax],dl
c0021748:	90                   	nop
c0021749:	c3                   	ret    

c002174a <FAT::open(char const*, void**, FileOpenMode)>:
c002174a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021750:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021758:	74 0a                	je     c0021764 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002175a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021762:	75 0a                	jne    c002176e <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021764:	b8 04 00 00 00       	mov    eax,0x4
c0021769:	e9 fd 00 00 00       	jmp    c002186b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002176e:	83 ec 08             	sub    esp,0x8
c0021771:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021778:	8d 44 24 14          	lea    eax,[esp+0x14]
c002177c:	50                   	push   eax
c002177d:	e8 a6 f0 fd ff       	call   c0000828 <strcpy>
c0021782:	83 c4 10             	add    esp,0x10
c0021785:	83 ec 08             	sub    esp,0x8
c0021788:	8d 44 24 10          	lea    eax,[esp+0x10]
c002178c:	50                   	push   eax
c002178d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021794:	e8 79 ff ff ff       	call   c0021712 <FAT::fixFilepath(char*)>
c0021799:	83 c4 10             	add    esp,0x10
c002179c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00217a4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217ab:	83 e0 01             	and    eax,0x1
c00217ae:	74 08                	je     c00217b8 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00217b0:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00217b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217bf:	83 e0 04             	and    eax,0x4
c00217c2:	74 10                	je     c00217d4 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00217c4:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00217cc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00217d4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217db:	83 e0 02             	and    eax,0x2
c00217de:	74 08                	je     c00217e8 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00217e0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00217e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217ef:	83 e0 08             	and    eax,0x8
c00217f2:	74 08                	je     c00217fc <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00217f4:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00217fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021803:	83 e0 10             	and    eax,0x10
c0021806:	74 08                	je     c0021810 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021808:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021810:	83 ec 0c             	sub    esp,0xc
c0021813:	68 50 02 00 00       	push   0x250
c0021818:	e8 89 e0 fe ff       	call   c000f8a6 <malloc>
c002181d:	83 c4 10             	add    esp,0x10
c0021820:	89 c2                	mov    edx,eax
c0021822:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021829:	89 10                	mov    DWORD PTR [eax],edx
c002182b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021833:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002183a:	8b 00                	mov    eax,DWORD PTR [eax]
c002183c:	83 ec 04             	sub    esp,0x4
c002183f:	52                   	push   edx
c0021840:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021844:	52                   	push   edx
c0021845:	50                   	push   eax
c0021846:	e8 26 37 fe ff       	call   c0004f71 <f_open>
c002184b:	83 c4 10             	add    esp,0x10
c002184e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021855:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002185d:	74 07                	je     c0021866 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002185f:	b8 01 00 00 00       	mov    eax,0x1
c0021864:	eb 05                	jmp    c002186b <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021866:	b8 00 00 00 00       	mov    eax,0x0
c002186b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021871:	c3                   	ret    

c0021872 <FAT::openDir(char const*, void**)>:
c0021872:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021878:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021880:	74 0a                	je     c002188c <FAT::openDir(char const*, void**)+0x1a>
c0021882:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002188a:	75 07                	jne    c0021893 <FAT::openDir(char const*, void**)+0x21>
c002188c:	b8 04 00 00 00       	mov    eax,0x4
c0021891:	eb 7d                	jmp    c0021910 <FAT::openDir(char const*, void**)+0x9e>
c0021893:	83 ec 08             	sub    esp,0x8
c0021896:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002189d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00218a1:	50                   	push   eax
c00218a2:	e8 81 ef fd ff       	call   c0000828 <strcpy>
c00218a7:	83 c4 10             	add    esp,0x10
c00218aa:	83 ec 08             	sub    esp,0x8
c00218ad:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218b1:	50                   	push   eax
c00218b2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00218b9:	e8 54 fe ff ff       	call   c0021712 <FAT::fixFilepath(char*)>
c00218be:	83 c4 10             	add    esp,0x10
c00218c1:	83 ec 0c             	sub    esp,0xc
c00218c4:	6a 4c                	push   0x4c
c00218c6:	e8 db df fe ff       	call   c000f8a6 <malloc>
c00218cb:	83 c4 10             	add    esp,0x10
c00218ce:	89 c2                	mov    edx,eax
c00218d0:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00218d7:	89 10                	mov    DWORD PTR [eax],edx
c00218d9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00218e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00218e2:	83 ec 08             	sub    esp,0x8
c00218e5:	8d 54 24 14          	lea    edx,[esp+0x14]
c00218e9:	52                   	push   edx
c00218ea:	50                   	push   eax
c00218eb:	e8 b9 46 fe ff       	call   c0005fa9 <f_opendir>
c00218f0:	83 c4 10             	add    esp,0x10
c00218f3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00218fa:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021902:	74 07                	je     c002190b <FAT::openDir(char const*, void**)+0x99>
c0021904:	b8 01 00 00 00       	mov    eax,0x1
c0021909:	eb 05                	jmp    c0021910 <FAT::openDir(char const*, void**)+0x9e>
c002190b:	b8 00 00 00 00       	mov    eax,0x0
c0021910:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021916:	c3                   	ret    
c0021917:	90                   	nop

c0021918 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021918:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002191e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021926:	75 0a                	jne    c0021932 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021928:	b8 04 00 00 00       	mov    eax,0x4
c002192d:	e9 c9 00 00 00       	jmp    c00219fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021932:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002193a:	75 0a                	jne    c0021946 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002193c:	b8 04 00 00 00       	mov    eax,0x4
c0021941:	e9 b5 00 00 00       	jmp    c00219fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021946:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002194e:	75 0a                	jne    c002195a <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021950:	b8 04 00 00 00       	mov    eax,0x4
c0021955:	e9 a1 00 00 00       	jmp    c00219fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002195a:	83 ec 08             	sub    esp,0x8
c002195d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021964:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002196b:	50                   	push   eax
c002196c:	e8 b7 ee fd ff       	call   c0000828 <strcpy>
c0021971:	83 c4 10             	add    esp,0x10
c0021974:	83 ec 08             	sub    esp,0x8
c0021977:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002197e:	50                   	push   eax
c002197f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021986:	e8 87 fd ff ff       	call   c0021712 <FAT::fixFilepath(char*)>
c002198b:	83 c4 10             	add    esp,0x10
c002198e:	83 ec 08             	sub    esp,0x8
c0021991:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021995:	50                   	push   eax
c0021996:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002199d:	50                   	push   eax
c002199e:	e8 c5 47 fe ff       	call   c0006168 <f_stat>
c00219a3:	83 c4 10             	add    esp,0x10
c00219a6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00219ad:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00219b4:	85 c0                	test   eax,eax
c00219b6:	74 07                	je     c00219bf <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00219b8:	83 f8 04             	cmp    eax,0x4
c00219bb:	74 32                	je     c00219ef <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00219bd:	eb 37                	jmp    c00219f6 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00219bf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00219c3:	0f b6 c0             	movzx  eax,al
c00219c6:	83 e0 10             	and    eax,0x10
c00219c9:	0f 95 c2             	setne  dl
c00219cc:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00219d3:	88 10                	mov    BYTE PTR [eax],dl
c00219d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219d8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00219dc:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00219e3:	89 01                	mov    DWORD PTR [ecx],eax
c00219e5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00219e8:	b8 00 00 00 00       	mov    eax,0x0
c00219ed:	eb 0c                	jmp    c00219fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219ef:	b8 02 00 00 00       	mov    eax,0x2
c00219f4:	eb 05                	jmp    c00219fb <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219f6:	b8 01 00 00 00       	mov    eax,0x1
c00219fb:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021a01:	c3                   	ret    

c0021a02 <FAT::unlink(char const*)>:
c0021a02:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a08:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021a10:	75 07                	jne    c0021a19 <FAT::unlink(char const*)+0x17>
c0021a12:	b8 04 00 00 00       	mov    eax,0x4
c0021a17:	eb 5c                	jmp    c0021a75 <FAT::unlink(char const*)+0x73>
c0021a19:	83 ec 08             	sub    esp,0x8
c0021a1c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a23:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a27:	50                   	push   eax
c0021a28:	e8 fb ed fd ff       	call   c0000828 <strcpy>
c0021a2d:	83 c4 10             	add    esp,0x10
c0021a30:	83 ec 08             	sub    esp,0x8
c0021a33:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a37:	50                   	push   eax
c0021a38:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a3f:	e8 ce fc ff ff       	call   c0021712 <FAT::fixFilepath(char*)>
c0021a44:	83 c4 10             	add    esp,0x10
c0021a47:	83 ec 0c             	sub    esp,0xc
c0021a4a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a4e:	50                   	push   eax
c0021a4f:	e8 66 4a fe ff       	call   c00064ba <f_unlink>
c0021a54:	83 c4 10             	add    esp,0x10
c0021a57:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021a5e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021a65:	85 c0                	test   eax,eax
c0021a67:	75 07                	jne    c0021a70 <FAT::unlink(char const*)+0x6e>
c0021a69:	b8 00 00 00 00       	mov    eax,0x0
c0021a6e:	eb 05                	jmp    c0021a75 <FAT::unlink(char const*)+0x73>
c0021a70:	b8 01 00 00 00       	mov    eax,0x1
c0021a75:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a7b:	c3                   	ret    

c0021a7c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021a7c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021a82:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021a89:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021a90:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021a94:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021a98:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021aa0:	75 0a                	jne    c0021aac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021aa2:	b8 04 00 00 00       	mov    eax,0x4
c0021aa7:	e9 1c 01 00 00       	jmp    c0021bc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021aac:	83 ec 08             	sub    esp,0x8
c0021aaf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021ab6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021aba:	50                   	push   eax
c0021abb:	e8 68 ed fd ff       	call   c0000828 <strcpy>
c0021ac0:	83 c4 10             	add    esp,0x10
c0021ac3:	83 ec 08             	sub    esp,0x8
c0021ac6:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021aca:	50                   	push   eax
c0021acb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021ad2:	e8 3b fc ff ff       	call   c0021712 <FAT::fixFilepath(char*)>
c0021ad7:	83 c4 10             	add    esp,0x10
c0021ada:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021ae2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021aea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021aef:	83 e0 01             	and    eax,0x1
c0021af2:	74 08                	je     c0021afc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021af4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021afc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b01:	83 e0 02             	and    eax,0x2
c0021b04:	74 08                	je     c0021b0e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021b06:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021b0e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b13:	83 e0 04             	and    eax,0x4
c0021b16:	74 08                	je     c0021b20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021b18:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021b20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b25:	83 e0 08             	and    eax,0x8
c0021b28:	74 08                	je     c0021b32 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021b2a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021b32:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b37:	83 e0 01             	and    eax,0x1
c0021b3a:	74 08                	je     c0021b44 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021b3c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021b44:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b49:	83 e0 02             	and    eax,0x2
c0021b4c:	74 08                	je     c0021b56 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021b4e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021b56:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b5b:	83 e0 04             	and    eax,0x4
c0021b5e:	74 08                	je     c0021b68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021b60:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021b68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b6d:	83 e0 08             	and    eax,0x8
c0021b70:	74 08                	je     c0021b7a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021b72:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021b7a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021b81:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021b88:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021b90:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021b98:	83 ec 04             	sub    esp,0x4
c0021b9b:	52                   	push   edx
c0021b9c:	50                   	push   eax
c0021b9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021ba1:	50                   	push   eax
c0021ba2:	e8 b5 4f fe ff       	call   c0006b5c <f_chmod>
c0021ba7:	83 c4 10             	add    esp,0x10
c0021baa:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021bb1:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021bb8:	85 c0                	test   eax,eax
c0021bba:	75 07                	jne    c0021bc3 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021bbc:	b8 00 00 00 00       	mov    eax,0x0
c0021bc1:	eb 05                	jmp    c0021bc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021bc3:	b8 01 00 00 00       	mov    eax,0x1
c0021bc8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021bce:	c3                   	ret    
c0021bcf:	90                   	nop

c0021bd0 <FAT::rename(char const*, char const*)>:
c0021bd0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021bd6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021bde:	74 0a                	je     c0021bea <FAT::rename(char const*, char const*)+0x1a>
c0021be0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021be8:	75 0a                	jne    c0021bf4 <FAT::rename(char const*, char const*)+0x24>
c0021bea:	b8 04 00 00 00       	mov    eax,0x4
c0021bef:	e9 98 00 00 00       	jmp    c0021c8c <FAT::rename(char const*, char const*)+0xbc>
c0021bf4:	83 ec 08             	sub    esp,0x8
c0021bf7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021bfe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021c05:	50                   	push   eax
c0021c06:	e8 1d ec fd ff       	call   c0000828 <strcpy>
c0021c0b:	83 c4 10             	add    esp,0x10
c0021c0e:	83 ec 08             	sub    esp,0x8
c0021c11:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021c18:	50                   	push   eax
c0021c19:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c20:	e8 ed fa ff ff       	call   c0021712 <FAT::fixFilepath(char*)>
c0021c25:	83 c4 10             	add    esp,0x10
c0021c28:	83 ec 08             	sub    esp,0x8
c0021c2b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021c32:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c36:	50                   	push   eax
c0021c37:	e8 ec eb fd ff       	call   c0000828 <strcpy>
c0021c3c:	83 c4 10             	add    esp,0x10
c0021c3f:	83 ec 08             	sub    esp,0x8
c0021c42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c46:	50                   	push   eax
c0021c47:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c4e:	e8 bf fa ff ff       	call   c0021712 <FAT::fixFilepath(char*)>
c0021c53:	83 c4 10             	add    esp,0x10
c0021c56:	83 ec 08             	sub    esp,0x8
c0021c59:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c5d:	50                   	push   eax
c0021c5e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021c65:	50                   	push   eax
c0021c66:	e8 fe 4b fe ff       	call   c0006869 <f_rename>
c0021c6b:	83 c4 10             	add    esp,0x10
c0021c6e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021c75:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021c7c:	85 c0                	test   eax,eax
c0021c7e:	75 07                	jne    c0021c87 <FAT::rename(char const*, char const*)+0xb7>
c0021c80:	b8 00 00 00 00       	mov    eax,0x0
c0021c85:	eb 05                	jmp    c0021c8c <FAT::rename(char const*, char const*)+0xbc>
c0021c87:	b8 01 00 00 00       	mov    eax,0x1
c0021c8c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021c92:	c3                   	ret    
c0021c93:	90                   	nop

c0021c94 <FAT::mkdir(char const*)>:
c0021c94:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c9a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021ca2:	75 07                	jne    c0021cab <FAT::mkdir(char const*)+0x17>
c0021ca4:	b8 04 00 00 00       	mov    eax,0x4
c0021ca9:	eb 5c                	jmp    c0021d07 <FAT::mkdir(char const*)+0x73>
c0021cab:	83 ec 08             	sub    esp,0x8
c0021cae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021cb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021cb9:	50                   	push   eax
c0021cba:	e8 69 eb fd ff       	call   c0000828 <strcpy>
c0021cbf:	83 c4 10             	add    esp,0x10
c0021cc2:	83 ec 08             	sub    esp,0x8
c0021cc5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021cc9:	50                   	push   eax
c0021cca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021cd1:	e8 3c fa ff ff       	call   c0021712 <FAT::fixFilepath(char*)>
c0021cd6:	83 c4 10             	add    esp,0x10
c0021cd9:	83 ec 0c             	sub    esp,0xc
c0021cdc:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ce0:	50                   	push   eax
c0021ce1:	e8 57 49 fe ff       	call   c000663d <f_mkdir>
c0021ce6:	83 c4 10             	add    esp,0x10
c0021ce9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021cf0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021cf7:	85 c0                	test   eax,eax
c0021cf9:	75 07                	jne    c0021d02 <FAT::mkdir(char const*)+0x6e>
c0021cfb:	b8 00 00 00 00       	mov    eax,0x0
c0021d00:	eb 05                	jmp    c0021d07 <FAT::mkdir(char const*)+0x73>
c0021d02:	b8 01 00 00 00       	mov    eax,0x1
c0021d07:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021d0d:	c3                   	ret    

c0021d0e <FAT::exists(char const*)>:
c0021d0e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021d14:	83 ec 08             	sub    esp,0x8
c0021d17:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021d1e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021d22:	50                   	push   eax
c0021d23:	e8 00 eb fd ff       	call   c0000828 <strcpy>
c0021d28:	83 c4 10             	add    esp,0x10
c0021d2b:	83 ec 08             	sub    esp,0x8
c0021d2e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021d32:	50                   	push   eax
c0021d33:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021d3a:	e8 d3 f9 ff ff       	call   c0021712 <FAT::fixFilepath(char*)>
c0021d3f:	83 c4 10             	add    esp,0x10
c0021d42:	83 ec 08             	sub    esp,0x8
c0021d45:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021d4c:	50                   	push   eax
c0021d4d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021d51:	50                   	push   eax
c0021d52:	e8 11 44 fe ff       	call   c0006168 <f_stat>
c0021d57:	83 c4 10             	add    esp,0x10
c0021d5a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021d61:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021d68:	85 c0                	test   eax,eax
c0021d6a:	75 04                	jne    c0021d70 <FAT::exists(char const*)+0x62>
c0021d6c:	b0 01                	mov    al,0x1
c0021d6e:	eb 02                	jmp    c0021d72 <FAT::exists(char const*)+0x64>
c0021d70:	b0 00                	mov    al,0x0
c0021d72:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021d78:	c3                   	ret    
c0021d79:	90                   	nop

c0021d7a <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021d7a:	b8 08 00 00 00       	mov    eax,0x8
c0021d7f:	c3                   	ret    

c0021d80 <ISO9660::seek(void*, unsigned long long)>:
c0021d80:	53                   	push   ebx
c0021d81:	b8 04 00 00 00       	mov    eax,0x4
c0021d86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d8e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021d92:	85 d2                	test   edx,edx
c0021d94:	74 17                	je     c0021dad <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d96:	89 c8                	mov    eax,ecx
c0021d98:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021d9b:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021d9e:	b8 01 00 00 00       	mov    eax,0x1
c0021da3:	73 08                	jae    c0021dad <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021da5:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021da8:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021dab:	31 c0                	xor    eax,eax
c0021dad:	5b                   	pop    ebx
c0021dae:	c3                   	ret    
c0021daf:	90                   	nop

c0021db0 <ISO9660::tell(void*, unsigned long long*)>:
c0021db0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021db4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021db8:	85 d2                	test   edx,edx
c0021dba:	74 12                	je     c0021dce <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021dbc:	85 c0                	test   eax,eax
c0021dbe:	74 0e                	je     c0021dce <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021dc0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021dc3:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021dc6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021dc9:	89 10                	mov    DWORD PTR [eax],edx
c0021dcb:	31 c0                	xor    eax,eax
c0021dcd:	c3                   	ret    
c0021dce:	b8 04 00 00 00       	mov    eax,0x4
c0021dd3:	c3                   	ret    

c0021dd4 <ISO9660::getName()>:
c0021dd4:	b8 1c d3 02 c0       	mov    eax,0xc002d31c
c0021dd9:	c3                   	ret    

c0021dda <ISO9660::stat(void*, unsigned long long*)>:
c0021dda:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021dde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021de2:	85 d2                	test   edx,edx
c0021de4:	74 12                	je     c0021df8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021de6:	85 c0                	test   eax,eax
c0021de8:	74 0e                	je     c0021df8 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021dea:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021ded:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021df0:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021df3:	89 10                	mov    DWORD PTR [eax],edx
c0021df5:	31 c0                	xor    eax,eax
c0021df7:	c3                   	ret    
c0021df8:	b8 04 00 00 00       	mov    eax,0x4
c0021dfd:	c3                   	ret    

c0021dfe <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021dfe:	b8 01 00 00 00       	mov    eax,0x1
c0021e03:	c3                   	ret    

c0021e04 <ISO9660::unlink(char const*)>:
c0021e04:	b8 01 00 00 00       	mov    eax,0x1
c0021e09:	c3                   	ret    

c0021e0a <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021e0a:	b8 01 00 00 00       	mov    eax,0x1
c0021e0f:	c3                   	ret    

c0021e10 <ISO9660::rename(char const*, char const*)>:
c0021e10:	b8 01 00 00 00       	mov    eax,0x1
c0021e15:	c3                   	ret    

c0021e16 <ISO9660::mkdir(char const*)>:
c0021e16:	b8 01 00 00 00       	mov    eax,0x1
c0021e1b:	c3                   	ret    

c0021e1c <ISO9660::close(void*)>:
c0021e1c:	83 ec 0c             	sub    esp,0xc
c0021e1f:	b8 04 00 00 00       	mov    eax,0x4
c0021e24:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e28:	85 d2                	test   edx,edx
c0021e2a:	74 0e                	je     c0021e3a <ISO9660::close(void*)+0x1e>
c0021e2c:	83 ec 0c             	sub    esp,0xc
c0021e2f:	52                   	push   edx
c0021e30:	e8 81 da fe ff       	call   c000f8b6 <free>
c0021e35:	83 c4 10             	add    esp,0x10
c0021e38:	31 c0                	xor    eax,eax
c0021e3a:	83 c4 0c             	add    esp,0xc
c0021e3d:	c3                   	ret    

c0021e3e <ISO9660::closeDir(void*)>:
c0021e3e:	83 ec 0c             	sub    esp,0xc
c0021e41:	b8 04 00 00 00       	mov    eax,0x4
c0021e46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e4a:	85 d2                	test   edx,edx
c0021e4c:	74 0e                	je     c0021e5c <ISO9660::closeDir(void*)+0x1e>
c0021e4e:	83 ec 0c             	sub    esp,0xc
c0021e51:	52                   	push   edx
c0021e52:	e8 5f da fe ff       	call   c000f8b6 <free>
c0021e57:	83 c4 10             	add    esp,0x10
c0021e5a:	31 c0                	xor    eax,eax
c0021e5c:	83 c4 0c             	add    esp,0xc
c0021e5f:	c3                   	ret    

c0021e60 <ISO9660::~ISO9660()>:
c0021e60:	83 ec 0c             	sub    esp,0xc
c0021e63:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c0021e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e6c:	89 10                	mov    DWORD PTR [eax],edx
c0021e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e72:	83 ec 0c             	sub    esp,0xc
c0021e75:	50                   	push   eax
c0021e76:	e8 f5 12 ff ff       	call   c0013170 <Filesystem::~Filesystem()>
c0021e7b:	83 c4 10             	add    esp,0x10
c0021e7e:	90                   	nop
c0021e7f:	83 c4 0c             	add    esp,0xc
c0021e82:	c3                   	ret    
c0021e83:	90                   	nop

c0021e84 <ISO9660::~ISO9660()>:
c0021e84:	83 ec 0c             	sub    esp,0xc
c0021e87:	83 ec 0c             	sub    esp,0xc
c0021e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e8e:	e8 cd ff ff ff       	call   c0021e60 <ISO9660::~ISO9660()>
c0021e93:	83 c4 10             	add    esp,0x10
c0021e96:	83 ec 08             	sub    esp,0x8
c0021e99:	6a 08                	push   0x8
c0021e9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e9f:	e8 bd 0e ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0021ea4:	83 c4 10             	add    esp,0x10
c0021ea7:	83 c4 0c             	add    esp,0xc
c0021eaa:	c3                   	ret    

c0021eab <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021eab:	55                   	push   ebp
c0021eac:	31 c9                	xor    ecx,ecx
c0021eae:	57                   	push   edi
c0021eaf:	56                   	push   esi
c0021eb0:	53                   	push   ebx
c0021eb1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021eb5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021eb9:	89 eb                	mov    ebx,ebp
c0021ebb:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021ebf:	39 ce                	cmp    esi,ecx
c0021ec1:	7e 17                	jle    c0021eda <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021ec3:	31 d2                	xor    edx,edx
c0021ec5:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021ec9:	7d 13                	jge    c0021ede <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021ecb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021ecf:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021ed2:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021ed5:	75 0d                	jne    c0021ee4 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021ed7:	42                   	inc    edx
c0021ed8:	eb eb                	jmp    c0021ec5 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021eda:	31 c0                	xor    eax,eax
c0021edc:	eb 0a                	jmp    c0021ee8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021ede:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021ee2:	eb 04                	jmp    c0021ee8 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021ee4:	41                   	inc    ecx
c0021ee5:	43                   	inc    ebx
c0021ee6:	eb d7                	jmp    c0021ebf <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021ee8:	5b                   	pop    ebx
c0021ee9:	5e                   	pop    esi
c0021eea:	5f                   	pop    edi
c0021eeb:	5d                   	pop    ebp
c0021eec:	c3                   	ret    

c0021eed <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021eed:	57                   	push   edi
c0021eee:	56                   	push   esi
c0021eef:	53                   	push   ebx
c0021ef0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ef4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ef8:	39 0d a0 25 03 c0    	cmp    DWORD PTR ds:0xc00325a0,ecx
c0021efe:	75 08                	jne    c0021f08 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021f00:	38 05 f4 e3 02 c0    	cmp    BYTE PTR ds:0xc002e3f4,al
c0021f06:	74 2b                	je     c0021f33 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021f08:	83 ec 0c             	sub    esp,0xc
c0021f0b:	a2 f4 e3 02 c0       	mov    ds:0xc002e3f4,al
c0021f10:	68 c0 25 03 c0       	push   0xc00325c0
c0021f15:	0f be c0             	movsx  eax,al
c0021f18:	6a 01                	push   0x1
c0021f1a:	89 0d a0 25 03 c0    	mov    DWORD PTR ds:0xc00325a0,ecx
c0021f20:	31 db                	xor    ebx,ebx
c0021f22:	53                   	push   ebx
c0021f23:	51                   	push   ecx
c0021f24:	ff 34 85 7c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0c84]
c0021f2b:	e8 88 48 ff ff       	call   c00167b8 <LogicalDisk::read(unsigned long long, int, void*)>
c0021f30:	83 c4 20             	add    esp,0x20
c0021f33:	be c0 25 03 c0       	mov    esi,0xc00325c0
c0021f38:	b9 00 08 00 00       	mov    ecx,0x800
c0021f3d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021f41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f43:	5b                   	pop    ebx
c0021f44:	5e                   	pop    esi
c0021f45:	5f                   	pop    edi
c0021f46:	c3                   	ret    
c0021f47:	90                   	nop

c0021f48 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021f48:	81 ec 10 08 00 00    	sub    esp,0x810
c0021f4e:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021f55:	83 c0 41             	add    eax,0x41
c0021f58:	0f be c0             	movsx  eax,al
c0021f5b:	50                   	push   eax
c0021f5c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f60:	50                   	push   eax
c0021f61:	6a 10                	push   0x10
c0021f63:	e8 85 ff ff ff       	call   c0021eed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f68:	83 c4 10             	add    esp,0x10
c0021f6b:	31 c0                	xor    eax,eax
c0021f6d:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021f72:	75 1d                	jne    c0021f91 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f74:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021f79:	75 16                	jne    c0021f91 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f7b:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021f80:	75 0f                	jne    c0021f91 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f82:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021f87:	75 08                	jne    c0021f91 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f89:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021f8e:	0f 94 c0             	sete   al
c0021f91:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021f97:	c3                   	ret    

c0021f98 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021f98:	55                   	push   ebp
c0021f99:	57                   	push   edi
c0021f9a:	56                   	push   esi
c0021f9b:	53                   	push   ebx
c0021f9c:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021fa2:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021fa9:	85 ed                	test   ebp,ebp
c0021fab:	0f 84 da 01 00 00    	je     c002218b <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021fb1:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021fb9:	0f 84 cc 01 00 00    	je     c002218b <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021fbf:	b8 01 00 00 00       	mov    eax,0x1
c0021fc4:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021fc8:	0f 85 c2 01 00 00    	jne    c0022190 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021fce:	31 d2                	xor    edx,edx
c0021fd0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021fd7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021fda:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021fdd:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fe3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021fe7:	01 c8                	add    eax,ecx
c0021fe9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021fec:	11 da                	adc    edx,ebx
c0021fee:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021ff2:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021ff6:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021ffa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ffe:	19 d7                	sbb    edi,edx
c0022000:	72 11                	jb     c0022013 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0022002:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0022005:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0022009:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002200d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022011:	eb 0c                	jmp    c002201f <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0022013:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0022017:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002201b:	29 ce                	sub    esi,ecx
c002201d:	19 df                	sbb    edi,ebx
c002201f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022022:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0022025:	0f a4 c2 0b          	shld   edx,eax,0xb
c0022029:	c1 e0 0b             	shl    eax,0xb
c002202c:	01 c8                	add    eax,ecx
c002202e:	11 da                	adc    edx,ebx
c0022030:	89 04 24             	mov    DWORD PTR [esp],eax
c0022033:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022037:	51                   	push   ecx
c0022038:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002203c:	50                   	push   eax
c002203d:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0022041:	53                   	push   ebx
c0022042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002204a:	0f ac d0 0b          	shrd   eax,edx,0xb
c002204e:	50                   	push   eax
c002204f:	e8 99 fe ff ff       	call   c0021eed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022054:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022057:	b8 00 08 00 00       	mov    eax,0x800
c002205c:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0022062:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0022066:	29 d0                	sub    eax,edx
c0022068:	83 c4 10             	add    esp,0x10
c002206b:	89 f9                	mov    ecx,edi
c002206d:	39 c6                	cmp    esi,eax
c002206f:	83 d9 00             	sbb    ecx,0x0
c0022072:	7d 1b                	jge    c002208f <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0022074:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022079:	75 12                	jne    c002208d <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002207b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022082:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022088:	e9 fa 00 00 00       	jmp    c0022187 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002208d:	89 f0                	mov    eax,esi
c002208f:	01 d3                	add    ebx,edx
c0022091:	31 d2                	xor    edx,edx
c0022093:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0022097:	39 c2                	cmp    edx,eax
c0022099:	7d 14                	jge    c00220af <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002209b:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00220a2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00220a6:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00220a9:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00220ac:	42                   	inc    edx
c00220ad:	eb e8                	jmp    c0022097 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00220af:	89 c2                	mov    edx,eax
c00220b1:	85 c0                	test   eax,eax
c00220b3:	79 02                	jns    c00220b7 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00220b5:	31 d2                	xor    edx,edx
c00220b7:	01 c2                	add    edx,eax
c00220b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00220bc:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00220c3:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00220c7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00220cb:	99                   	cdq    
c00220cc:	01 c1                	add    ecx,eax
c00220ce:	11 d3                	adc    ebx,edx
c00220d0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00220d4:	29 c6                	sub    esi,eax
c00220d6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00220da:	19 d7                	sbb    edi,edx
c00220dc:	89 34 24             	mov    DWORD PTR [esp],esi
c00220df:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00220e3:	b8 ff 07 00 00       	mov    eax,0x7ff
c00220e8:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00220eb:	b8 00 00 00 00       	mov    eax,0x0
c00220f0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00220f4:	7d 43                	jge    c0022139 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00220f6:	52                   	push   edx
c00220f7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220fb:	50                   	push   eax
c00220fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022104:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022108:	0f ac d0 0b          	shrd   eax,edx,0xb
c002210c:	50                   	push   eax
c002210d:	e8 db fd ff ff       	call   c0021eed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022112:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002211a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002211f:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0022127:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002212f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0022134:	83 c4 10             	add    esp,0x10
c0022137:	eb aa                	jmp    c00220e3 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0022139:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002213d:	0b 04 24             	or     eax,DWORD PTR [esp]
c0022140:	74 2a                	je     c002216c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0022142:	50                   	push   eax
c0022143:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022147:	50                   	push   eax
c0022148:	8d 74 24 28          	lea    esi,[esp+0x28]
c002214c:	56                   	push   esi
c002214d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022151:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022155:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0022159:	51                   	push   ecx
c002215a:	e8 8e fd ff ff       	call   c0021eed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002215f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022163:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022167:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022169:	83 c4 10             	add    esp,0x10
c002216c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022173:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022177:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002217b:	89 18                	mov    DWORD PTR [eax],ebx
c002217d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022181:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022184:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022187:	31 c0                	xor    eax,eax
c0022189:	eb 05                	jmp    c0022190 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002218b:	b8 04 00 00 00       	mov    eax,0x4
c0022190:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022196:	5b                   	pop    ebx
c0022197:	5e                   	pop    esi
c0022198:	5f                   	pop    edi
c0022199:	5d                   	pop    ebp
c002219a:	c3                   	ret    
c002219b:	90                   	nop

c002219c <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002219c:	55                   	push   ebp
c002219d:	57                   	push   edi
c002219e:	56                   	push   esi
c002219f:	53                   	push   ebx
c00221a0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00221a6:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00221ad:	85 ed                	test   ebp,ebp
c00221af:	0f 84 51 02 00 00    	je     c0022406 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00221b5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00221bd:	0f 84 43 02 00 00    	je     c0022406 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00221c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00221c6:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00221c9:	75 0a                	jne    c00221d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00221cb:	b8 07 00 00 00       	mov    eax,0x7
c00221d0:	e9 36 02 00 00       	jmp    c002240b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00221d5:	50                   	push   eax
c00221d6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00221da:	50                   	push   eax
c00221db:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00221e2:	53                   	push   ebx
c00221e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00221e6:	c1 e0 0b             	shl    eax,0xb
c00221e9:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00221ec:	c1 e8 0b             	shr    eax,0xb
c00221ef:	50                   	push   eax
c00221f0:	e8 f8 fc ff ff       	call   c0021eed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00221f8:	83 c4 10             	add    esp,0x10
c00221fb:	89 c1                	mov    ecx,eax
c00221fd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0022200:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0022206:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0022209:	84 db                	test   bl,bl
c002220b:	0f 85 8b 00 00 00    	jne    c002229c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0022211:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0022217:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002221a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0022220:	29 c6                	sub    esi,eax
c0022222:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0022226:	89 f3                	mov    ebx,esi
c0022228:	89 f1                	mov    ecx,esi
c002222a:	c1 fb 1f             	sar    ebx,0x1f
c002222d:	01 f0                	add    eax,esi
c002222f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0022232:	11 da                	adc    edx,ebx
c0022234:	89 04 24             	mov    DWORD PTR [esp],eax
c0022237:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002223b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002223e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022241:	89 d8                	mov    eax,ebx
c0022243:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0022247:	ba 00 00 00 00       	mov    edx,0x0
c002224c:	19 f8                	sbb    eax,edi
c002224e:	b8 00 00 00 00       	mov    eax,0x0
c0022253:	73 08                	jae    c002225d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0022255:	89 f0                	mov    eax,esi
c0022257:	89 fa                	mov    edx,edi
c0022259:	29 c8                	sub    eax,ecx
c002225b:	19 da                	sbb    edx,ebx
c002225d:	89 d7                	mov    edi,edx
c002225f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022262:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022265:	09 c7                	or     edi,eax
c0022267:	0f 84 5e ff ff ff    	je     c00221cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002226d:	57                   	push   edi
c002226e:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022272:	50                   	push   eax
c0022273:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002227a:	53                   	push   ebx
c002227b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002227e:	c1 e0 0b             	shl    eax,0xb
c0022281:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0022285:	c1 e8 0b             	shr    eax,0xb
c0022288:	50                   	push   eax
c0022289:	e8 5f fc ff ff       	call   c0021eed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002228e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022291:	83 c4 10             	add    esp,0x10
c0022294:	25 ff 07 00 00       	and    eax,0x7ff
c0022299:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002229c:	31 ff                	xor    edi,edi
c002229e:	56                   	push   esi
c002229f:	6a 28                	push   0x28
c00222a1:	6a 00                	push   0x0
c00222a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00222a7:	50                   	push   eax
c00222a8:	e8 bf e4 fd ff       	call   c000076c <memset>
c00222ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00222b0:	25 ff 07 00 00       	and    eax,0x7ff
c00222b5:	89 c6                	mov    esi,eax
c00222b7:	83 c6 21             	add    esi,0x21
c00222ba:	83 d7 00             	adc    edi,0x0
c00222bd:	83 c4 10             	add    esp,0x10
c00222c0:	31 c9                	xor    ecx,ecx
c00222c2:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00222c9:	83 f9 28             	cmp    ecx,0x28
c00222cc:	88 04 24             	mov    BYTE PTR [esp],al
c00222cf:	0f 94 c2             	sete   dl
c00222d2:	88 d0                	mov    al,dl
c00222d4:	ba ff 07 00 00       	mov    edx,0x7ff
c00222d9:	39 f2                	cmp    edx,esi
c00222db:	ba 00 00 00 00       	mov    edx,0x0
c00222e0:	19 fa                	sbb    edx,edi
c00222e2:	0f 92 c2             	setb   dl
c00222e5:	09 c2                	or     edx,eax
c00222e7:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00222eb:	0f 94 c0             	sete   al
c00222ee:	08 d0                	or     al,dl
c00222f0:	75 16                	jne    c0022308 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00222f2:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00222f6:	74 10                	je     c0022308 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00222f8:	8a 04 24             	mov    al,BYTE PTR [esp]
c00222fb:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00222ff:	41                   	inc    ecx
c0022300:	83 c6 01             	add    esi,0x1
c0022303:	83 d7 00             	adc    edi,0x0
c0022306:	eb ba                	jmp    c00222c2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0022308:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002230f:	83 ec 0c             	sub    esp,0xc
c0022312:	8d 74 24 24          	lea    esi,[esp+0x24]
c0022316:	56                   	push   esi
c0022317:	e8 6c e4 fd ff       	call   c0000788 <strlen>
c002231c:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0022323:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022327:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002232f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022332:	5a                   	pop    edx
c0022333:	25 ff 07 00 00       	and    eax,0x7ff
c0022338:	59                   	pop    ecx
c0022339:	01 f8                	add    eax,edi
c002233b:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0022341:	83 e0 02             	and    eax,0x2
c0022344:	3c 01                	cmp    al,0x1
c0022346:	19 c0                	sbb    eax,eax
c0022348:	83 c0 02             	add    eax,0x2
c002234b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002234f:	56                   	push   esi
c0022350:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022354:	50                   	push   eax
c0022355:	e8 ce e4 fd ff       	call   c0000828 <strcpy>
c002235a:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c002235e:	83 c4 10             	add    esp,0x10
c0022361:	84 c0                	test   al,al
c0022363:	75 21                	jne    c0022386 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0022365:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002236d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022375:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002237d:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022384:	eb 28                	jmp    c00223ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0022386:	fe c8                	dec    al
c0022388:	75 24                	jne    c00223ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002238a:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022392:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002239a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00223a2:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00223a9:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00223ae:	8d 74 24 40          	lea    esi,[esp+0x40]
c00223b2:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00223b9:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00223c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00223c2:	0f b6 f3             	movzx  esi,bl
c00223c5:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00223cc:	31 db                	xor    ebx,ebx
c00223ce:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00223d4:	89 df                	mov    edi,ebx
c00223d6:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00223d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223dc:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00223df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00223e2:	39 c6                	cmp    esi,eax
c00223e4:	19 d7                	sbb    edi,edx
c00223e6:	72 10                	jb     c00223f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00223e8:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00223ef:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00223f6:	eb 0a                	jmp    c0022402 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00223f8:	29 f0                	sub    eax,esi
c00223fa:	19 da                	sbb    edx,ebx
c00223fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00223ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022402:	31 c0                	xor    eax,eax
c0022404:	eb 05                	jmp    c002240b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0022406:	b8 04 00 00 00       	mov    eax,0x4
c002240b:	81 c4 5c 09 00 00    	add    esp,0x95c
c0022411:	5b                   	pop    ebx
c0022412:	5e                   	pop    esi
c0022413:	5f                   	pop    edi
c0022414:	5d                   	pop    ebp
c0022415:	c3                   	ret    

c0022416 <readRoot(unsigned int*, unsigned int*, char)>:
c0022416:	57                   	push   edi
c0022417:	56                   	push   esi
c0022418:	81 ec 38 08 00 00    	sub    esp,0x838
c002241e:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0022426:	50                   	push   eax
c0022427:	8d 44 24 38          	lea    eax,[esp+0x38]
c002242b:	50                   	push   eax
c002242c:	6a 10                	push   0x10
c002242e:	e8 ba fa ff ff       	call   c0021eed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022433:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c002243a:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c002243e:	b9 22 00 00 00       	mov    ecx,0x22
c0022443:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022445:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002244c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022450:	89 10                	mov    DWORD PTR [eax],edx
c0022452:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0022459:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002245d:	89 10                	mov    DWORD PTR [eax],edx
c002245f:	81 c4 44 08 00 00    	add    esp,0x844
c0022465:	b0 01                	mov    al,0x1
c0022467:	5e                   	pop    esi
c0022468:	5f                   	pop    edi
c0022469:	c3                   	ret    

c002246a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002246a:	55                   	push   ebp
c002246b:	57                   	push   edi
c002246c:	56                   	push   esi
c002246d:	53                   	push   ebx
c002246e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0022474:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002247b:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022482:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022486:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002248a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002248e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022492:	75 03                	jne    c0022497 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022494:	83 c3 02             	add    ebx,0x2
c0022497:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002249a:	75 03                	jne    c002249f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002249c:	43                   	inc    ebx
c002249d:	eb f8                	jmp    c0022497 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002249f:	51                   	push   ecx
c00224a0:	68 00 01 00 00       	push   0x100
c00224a5:	6a 00                	push   0x0
c00224a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00224ab:	50                   	push   eax
c00224ac:	e8 bb e2 fd ff       	call   c000076c <memset>
c00224b1:	83 c4 10             	add    esp,0x10
c00224b4:	31 d2                	xor    edx,edx
c00224b6:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00224b9:	84 c0                	test   al,al
c00224bb:	74 21                	je     c00224de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00224bd:	3c 2f                	cmp    al,0x2f
c00224bf:	75 0b                	jne    c00224cc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00224c1:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00224c5:	bd 01 00 00 00       	mov    ebp,0x1
c00224ca:	eb 14                	jmp    c00224e0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00224cc:	8d 48 9f             	lea    ecx,[eax-0x61]
c00224cf:	80 f9 19             	cmp    cl,0x19
c00224d2:	77 03                	ja     c00224d7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00224d4:	83 e8 20             	sub    eax,0x20
c00224d7:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00224db:	42                   	inc    edx
c00224dc:	eb d8                	jmp    c00224b6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00224de:	31 ed                	xor    ebp,ebp
c00224e0:	83 ec 0c             	sub    esp,0xc
c00224e3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00224ea:	e8 b7 d3 fe ff       	call   c000f8a6 <malloc>
c00224ef:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00224f6:	89 c6                	mov    esi,eax
c00224f8:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00224fe:	c1 ef 0b             	shr    edi,0xb
c0022501:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0022508:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002250c:	83 c4 10             	add    esp,0x10
c002250f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0022514:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022518:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002251f:	74 28                	je     c0022549 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022521:	52                   	push   edx
c0022522:	57                   	push   edi
c0022523:	50                   	push   eax
c0022524:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022528:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002252f:	e8 b9 f9 ff ff       	call   c0021eed <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022534:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022538:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002253f:	05 00 08 00 00       	add    eax,0x800
c0022544:	83 c4 10             	add    esp,0x10
c0022547:	eb cb                	jmp    c0022514 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0022549:	83 ec 0c             	sub    esp,0xc
c002254c:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022550:	57                   	push   edi
c0022551:	e8 32 e2 fd ff       	call   c0000788 <strlen>
c0022556:	50                   	push   eax
c0022557:	57                   	push   edi
c0022558:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c002255f:	56                   	push   esi
c0022560:	e8 46 f9 ff ff       	call   c0021eab <__memmem(unsigned char*, int, unsigned char*, int)>
c0022565:	83 c4 20             	add    esp,0x20
c0022568:	85 c0                	test   eax,eax
c002256a:	75 13                	jne    c002257f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002256c:	83 ec 0c             	sub    esp,0xc
c002256f:	56                   	push   esi
c0022570:	e8 41 d3 fe ff       	call   c000f8b6 <free>
c0022575:	83 c4 10             	add    esp,0x10
c0022578:	31 c0                	xor    eax,eax
c002257a:	e9 b3 00 00 00       	jmp    c0022632 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002257f:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022583:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0022587:	c1 e7 08             	shl    edi,0x8
c002258a:	c1 e2 10             	shl    edx,0x10
c002258d:	09 d7                	or     edi,edx
c002258f:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022593:	09 d7                	or     edi,edx
c0022595:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0022599:	c1 e2 18             	shl    edx,0x18
c002259c:	09 d7                	or     edi,edx
c002259e:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00225a2:	89 d1                	mov    ecx,edx
c00225a4:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00225a8:	c1 e1 08             	shl    ecx,0x8
c00225ab:	c1 e2 10             	shl    edx,0x10
c00225ae:	09 ca                	or     edx,ecx
c00225b0:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00225b4:	09 ca                	or     edx,ecx
c00225b6:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00225ba:	c1 e1 18             	shl    ecx,0x18
c00225bd:	09 ca                	or     edx,ecx
c00225bf:	89 e9                	mov    ecx,ebp
c00225c1:	84 c9                	test   cl,cl
c00225c3:	74 3c                	je     c0022601 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00225c5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00225c9:	83 ec 0c             	sub    esp,0xc
c00225cc:	56                   	push   esi
c00225cd:	e8 e4 d2 fe ff       	call   c000f8b6 <free>
c00225d2:	83 c4 0c             	add    esp,0xc
c00225d5:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225dc:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00225e1:	50                   	push   eax
c00225e2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225e9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00225f4:	52                   	push   edx
c00225f5:	57                   	push   edi
c00225f6:	53                   	push   ebx
c00225f7:	e8 6e fe ff ff       	call   c002246a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00225fc:	83 c4 20             	add    esp,0x20
c00225ff:	eb 31                	jmp    c0022632 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022601:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0022604:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002260b:	d0 e8                	shr    al,1
c002260d:	89 3b                	mov    DWORD PTR [ebx],edi
c002260f:	83 e0 01             	and    eax,0x1
c0022612:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022619:	83 ec 0c             	sub    esp,0xc
c002261c:	89 13                	mov    DWORD PTR [ebx],edx
c002261e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0022625:	89 03                	mov    DWORD PTR [ebx],eax
c0022627:	56                   	push   esi
c0022628:	e8 89 d2 fe ff       	call   c000f8b6 <free>
c002262d:	83 c4 10             	add    esp,0x10
c0022630:	b0 01                	mov    al,0x1
c0022632:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022638:	5b                   	pop    ebx
c0022639:	5e                   	pop    esi
c002263a:	5f                   	pop    edi
c002263b:	5d                   	pop    ebp
c002263c:	c3                   	ret    

c002263d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002263d:	55                   	push   ebp
c002263e:	57                   	push   edi
c002263f:	56                   	push   esi
c0022640:	53                   	push   ebx
c0022641:	83 ec 20             	sub    esp,0x20
c0022644:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022648:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002264c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022650:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022658:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022660:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022665:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002266b:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022671:	57                   	push   edi
c0022672:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022676:	50                   	push   eax
c0022677:	8d 44 24 14          	lea    eax,[esp+0x14]
c002267b:	50                   	push   eax
c002267c:	e8 95 fd ff ff       	call   c0022416 <readRoot(unsigned int*, unsigned int*, char)>
c0022681:	5a                   	pop    edx
c0022682:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022686:	e8 fd e0 fd ff       	call   c0000788 <strlen>
c002268b:	83 c4 10             	add    esp,0x10
c002268e:	83 f8 03             	cmp    eax,0x3
c0022691:	77 17                	ja     c00226aa <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022693:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022697:	89 03                	mov    DWORD PTR [ebx],eax
c0022699:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002269d:	89 06                	mov    DWORD PTR [esi],eax
c002269f:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00226a6:	b0 01                	mov    al,0x1
c00226a8:	eb 19                	jmp    c00226c3 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00226aa:	50                   	push   eax
c00226ab:	55                   	push   ebp
c00226ac:	57                   	push   edi
c00226ad:	56                   	push   esi
c00226ae:	53                   	push   ebx
c00226af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00226b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00226b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00226bb:	e8 aa fd ff ff       	call   c002246a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00226c0:	83 c4 20             	add    esp,0x20
c00226c3:	83 c4 1c             	add    esp,0x1c
c00226c6:	5b                   	pop    ebx
c00226c7:	5e                   	pop    esi
c00226c8:	5f                   	pop    edi
c00226c9:	5d                   	pop    ebp
c00226ca:	c3                   	ret    
c00226cb:	90                   	nop

c00226cc <ISO9660::open(char const*, void**, FileOpenMode)>:
c00226cc:	57                   	push   edi
c00226cd:	56                   	push   esi
c00226ce:	53                   	push   ebx
c00226cf:	83 ec 10             	sub    esp,0x10
c00226d2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00226d6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00226da:	85 ff                	test   edi,edi
c00226dc:	0f 84 9d 00 00 00    	je     c002277f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226e2:	85 f6                	test   esi,esi
c00226e4:	0f 84 95 00 00 00    	je     c002277f <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226ea:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00226ef:	74 17                	je     c0022708 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00226f1:	83 ec 0c             	sub    esp,0xc
c00226f4:	68 37 d3 02 c0       	push   0xc002d337
c00226f9:	e8 43 07 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00226fe:	83 c4 10             	add    esp,0x10
c0022701:	b8 03 00 00 00       	mov    eax,0x3
c0022706:	eb 7c                	jmp    c0022784 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022708:	83 ec 0c             	sub    esp,0xc
c002270b:	6a 1c                	push   0x1c
c002270d:	e8 94 d1 fe ff       	call   c000f8a6 <malloc>
c0022712:	89 07                	mov    DWORD PTR [edi],eax
c0022714:	89 c3                	mov    ebx,eax
c0022716:	58                   	pop    eax
c0022717:	8d 44 24 18          	lea    eax,[esp+0x18]
c002271b:	50                   	push   eax
c002271c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002271f:	50                   	push   eax
c0022720:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022724:	50                   	push   eax
c0022725:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022729:	50                   	push   eax
c002272a:	56                   	push   esi
c002272b:	e8 0d ff ff ff       	call   c002263d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022730:	83 c4 20             	add    esp,0x20
c0022733:	84 c0                	test   al,al
c0022735:	74 07                	je     c002273e <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022737:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002273c:	74 0b                	je     c0022749 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002273e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022742:	b8 01 00 00 00       	mov    eax,0x1
c0022747:	eb 3b                	jmp    c0022784 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002274d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022751:	89 03                	mov    DWORD PTR [ebx],eax
c0022753:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002275a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002275e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022765:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002276c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002276f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022776:	8a 06                	mov    al,BYTE PTR [esi]
c0022778:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002277b:	31 c0                	xor    eax,eax
c002277d:	eb 05                	jmp    c0022784 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002277f:	b8 04 00 00 00       	mov    eax,0x4
c0022784:	83 c4 10             	add    esp,0x10
c0022787:	5b                   	pop    ebx
c0022788:	5e                   	pop    esi
c0022789:	5f                   	pop    edi
c002278a:	c3                   	ret    
c002278b:	90                   	nop

c002278c <ISO9660::exists(char const*)>:
c002278c:	83 ec 28             	sub    esp,0x28
c002278f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022793:	8d 54 24 18          	lea    edx,[esp+0x18]
c0022797:	52                   	push   edx
c0022798:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002279b:	52                   	push   edx
c002279c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00227a0:	52                   	push   edx
c00227a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00227a5:	52                   	push   edx
c00227a6:	50                   	push   eax
c00227a7:	e8 91 fe ff ff       	call   c002263d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00227ac:	83 c4 3c             	add    esp,0x3c
c00227af:	c3                   	ret    

c00227b0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00227b0:	56                   	push   esi
c00227b1:	53                   	push   ebx
c00227b2:	83 ec 14             	sub    esp,0x14
c00227b5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00227b9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00227bd:	85 db                	test   ebx,ebx
c00227bf:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00227c3:	0f 94 c2             	sete   dl
c00227c6:	85 f6                	test   esi,esi
c00227c8:	0f 94 c0             	sete   al
c00227cb:	08 c2                	or     dl,al
c00227cd:	75 68                	jne    c0022837 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00227cf:	85 c9                	test   ecx,ecx
c00227d1:	74 64                	je     c0022837 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00227d3:	83 ec 0c             	sub    esp,0xc
c00227d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00227d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00227dd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00227e3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227ea:	50                   	push   eax
c00227eb:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00227ee:	50                   	push   eax
c00227ef:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227f3:	50                   	push   eax
c00227f4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227f8:	50                   	push   eax
c00227f9:	51                   	push   ecx
c00227fa:	e8 3e fe ff ff       	call   c002263d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00227ff:	83 c4 20             	add    esp,0x20
c0022802:	ba 01 00 00 00       	mov    edx,0x1
c0022807:	84 c0                	test   al,al
c0022809:	74 31                	je     c002283c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002280b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002280f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022816:	89 03                	mov    DWORD PTR [ebx],eax
c0022818:	ba 00 00 00 00       	mov    edx,0x0
c002281d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022821:	85 c0                	test   eax,eax
c0022823:	0f 95 06             	setne  BYTE PTR [esi]
c0022826:	74 14                	je     c002283c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022828:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002282e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022835:	eb 05                	jmp    c002283c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022837:	ba 04 00 00 00       	mov    edx,0x4
c002283c:	83 c4 14             	add    esp,0x14
c002283f:	89 d0                	mov    eax,edx
c0022841:	5b                   	pop    ebx
c0022842:	5e                   	pop    esi
c0022843:	c3                   	ret    

c0022844 <ISO9660::openDir(char const*, void**)>:
c0022844:	57                   	push   edi
c0022845:	56                   	push   esi
c0022846:	53                   	push   ebx
c0022847:	83 ec 10             	sub    esp,0x10
c002284a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002284e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022852:	85 ff                	test   edi,edi
c0022854:	0f 84 95 00 00 00    	je     c00228ef <ISO9660::openDir(char const*, void**)+0xab>
c002285a:	85 f6                	test   esi,esi
c002285c:	0f 84 8d 00 00 00    	je     c00228ef <ISO9660::openDir(char const*, void**)+0xab>
c0022862:	83 ec 0c             	sub    esp,0xc
c0022865:	6a 1c                	push   0x1c
c0022867:	e8 3a d0 fe ff       	call   c000f8a6 <malloc>
c002286c:	89 07                	mov    DWORD PTR [edi],eax
c002286e:	89 c3                	mov    ebx,eax
c0022870:	59                   	pop    ecx
c0022871:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022875:	50                   	push   eax
c0022876:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022879:	50                   	push   eax
c002287a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002287e:	50                   	push   eax
c002287f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022883:	50                   	push   eax
c0022884:	56                   	push   esi
c0022885:	e8 b3 fd ff ff       	call   c002263d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002288a:	83 c4 20             	add    esp,0x20
c002288d:	84 c0                	test   al,al
c002288f:	74 07                	je     c0022898 <ISO9660::openDir(char const*, void**)+0x54>
c0022891:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022896:	75 21                	jne    c00228b9 <ISO9660::openDir(char const*, void**)+0x75>
c0022898:	0f b6 c0             	movzx  eax,al
c002289b:	52                   	push   edx
c002289c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00228a0:	50                   	push   eax
c00228a1:	68 5d d3 02 c0       	push   0xc002d35d
c00228a6:	e8 96 05 ff ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00228ab:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00228af:	83 c4 10             	add    esp,0x10
c00228b2:	b8 01 00 00 00       	mov    eax,0x1
c00228b7:	eb 3b                	jmp    c00228f4 <ISO9660::openDir(char const*, void**)+0xb0>
c00228b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228bd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00228c1:	89 03                	mov    DWORD PTR [ebx],eax
c00228c3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00228ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228ce:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00228d5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00228dc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00228df:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00228e6:	8a 06                	mov    al,BYTE PTR [esi]
c00228e8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00228eb:	31 c0                	xor    eax,eax
c00228ed:	eb 05                	jmp    c00228f4 <ISO9660::openDir(char const*, void**)+0xb0>
c00228ef:	b8 04 00 00 00       	mov    eax,0x4
c00228f4:	83 c4 10             	add    esp,0x10
c00228f7:	5b                   	pop    ebx
c00228f8:	5e                   	pop    esi
c00228f9:	5f                   	pop    edi
c00228fa:	c3                   	ret    
c00228fb:	90                   	nop

c00228fc <ISO9660::ISO9660()>:
c00228fc:	83 ec 0c             	sub    esp,0xc
c00228ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022903:	83 ec 0c             	sub    esp,0xc
c0022906:	50                   	push   eax
c0022907:	e8 40 08 ff ff       	call   c001314c <Filesystem::Filesystem()>
c002290c:	83 c4 10             	add    esp,0x10
c002290f:	ba 80 d3 02 c0       	mov    edx,0xc002d380
c0022914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022918:	89 10                	mov    DWORD PTR [eax],edx
c002291a:	90                   	nop
c002291b:	83 c4 0c             	add    esp,0xc
c002291e:	c3                   	ret    
c002291f:	90                   	nop

c0022920 <SoundChannel::~SoundChannel()>:
c0022920:	83 ec 0c             	sub    esp,0xc
c0022923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022927:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002292a:	83 ec 0c             	sub    esp,0xc
c002292d:	50                   	push   eax
c002292e:	e8 83 cf fe ff       	call   c000f8b6 <free>
c0022933:	83 c4 10             	add    esp,0x10
c0022936:	90                   	nop
c0022937:	83 c4 0c             	add    esp,0xc
c002293a:	c3                   	ret    
c002293b:	90                   	nop

c002293c <SoundChannel::setSpeed(float)>:
c002293c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022940:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022944:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022947:	c3                   	ret    

c0022948 <SoundChannel::getSpeed()>:
c0022948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002294c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c002294f:	c3                   	ret    

c0022950 <SoundChannel::setVolume(int)>:
c0022950:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022954:	83 f8 64             	cmp    eax,0x64
c0022957:	7e 05                	jle    c002295e <SoundChannel::setVolume(int)+0xe>
c0022959:	b8 64 00 00 00       	mov    eax,0x64
c002295e:	85 c0                	test   eax,eax
c0022960:	79 02                	jns    c0022964 <SoundChannel::setVolume(int)+0x14>
c0022962:	31 c0                	xor    eax,eax
c0022964:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022968:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002296b:	c3                   	ret    

c002296c <SoundChannel::getVolume()>:
c002296c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022970:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022973:	c3                   	ret    

c0022974 <SoundChannel::pause()>:
c0022974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022978:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c002297c:	c3                   	ret    
c002297d:	90                   	nop

c002297e <SoundChannel::SoundChannel(int, int, int, int)>:
c002297e:	83 ec 1c             	sub    esp,0x1c
c0022981:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022985:	e8 ea ff ff ff       	call   c0022974 <SoundChannel::pause()>
c002298a:	83 c4 04             	add    esp,0x4
c002298d:	6a 50                	push   0x50
c002298f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022993:	e8 b8 ff ff ff       	call   c0022950 <SoundChannel::setVolume(int)>
c0022998:	83 c4 08             	add    esp,0x8
c002299b:	a1 fc d3 02 c0       	mov    eax,ds:0xc002d3fc
c00229a0:	50                   	push   eax
c00229a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00229a5:	e8 92 ff ff ff       	call   c002293c <SoundChannel::setSpeed(float)>
c00229aa:	83 c4 08             	add    esp,0x8
c00229ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00229b5:	89 10                	mov    DWORD PTR [eax],edx
c00229b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00229bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229c6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00229ca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00229cd:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00229d2:	75 23                	jne    c00229f7 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00229d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229d8:	8b 10                	mov    edx,DWORD PTR [eax]
c00229da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229e1:	0f af c2             	imul   eax,edx
c00229e4:	85 c0                	test   eax,eax
c00229e6:	79 03                	jns    c00229eb <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00229e8:	83 c0 03             	add    eax,0x3
c00229eb:	c1 f8 02             	sar    eax,0x2
c00229ee:	05 a0 0f 00 00       	add    eax,0xfa0
c00229f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00229f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00229ff:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022a02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a06:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022a0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a11:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022a18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a1c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022a1f:	c1 e0 02             	shl    eax,0x2
c0022a22:	83 ec 0c             	sub    esp,0xc
c0022a25:	50                   	push   eax
c0022a26:	e8 7b ce fe ff       	call   c000f8a6 <malloc>
c0022a2b:	83 c4 10             	add    esp,0x10
c0022a2e:	89 c2                	mov    edx,eax
c0022a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a34:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022a37:	83 ec 04             	sub    esp,0x4
c0022a3a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022a3e:	50                   	push   eax
c0022a3f:	6a 01                	push   0x1
c0022a41:	6a 04                	push   0x4
c0022a43:	e8 37 61 fe ff       	call   c0008b7f <src_new>
c0022a48:	83 c4 10             	add    esp,0x10
c0022a4b:	89 c2                	mov    edx,eax
c0022a4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a51:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a58:	85 c0                	test   eax,eax
c0022a5a:	74 10                	je     c0022a6c <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022a5c:	83 ec 0c             	sub    esp,0xc
c0022a5f:	68 e0 d3 02 c0       	push   0xc002d3e0
c0022a64:	e8 92 7d ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0022a69:	83 c4 10             	add    esp,0x10
c0022a6c:	a0 c0 31 03 c0       	mov    al,ds:0xc00331c0
c0022a71:	83 f0 01             	xor    eax,0x1
c0022a74:	84 c0                	test   al,al
c0022a76:	74 57                	je     c0022acf <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022a78:	a1 00 d4 02 c0       	mov    eax,ds:0xc002d400
c0022a7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a81:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022a89:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022a91:	7f 35                	jg     c0022ac8 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022a93:	83 ec 0c             	sub    esp,0xc
c0022a96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a9a:	e8 70 50 00 00       	call   c0027b0f <__floatsisf>
c0022a9f:	83 c4 10             	add    esp,0x10
c0022aa2:	8b 15 00 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d400
c0022aa8:	83 ec 08             	sub    esp,0x8
c0022aab:	52                   	push   edx
c0022aac:	50                   	push   eax
c0022aad:	e8 6f 4c 00 00       	call   c0027721 <__mulsf3>
c0022ab2:	83 c4 10             	add    esp,0x10
c0022ab5:	89 c2                	mov    edx,eax
c0022ab7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022abb:	89 14 85 c0 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd240],edx
c0022ac2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022ac6:	eb c1                	jmp    c0022a89 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022ac8:	c6 05 c0 31 03 c0 01 	mov    BYTE PTR ds:0xc00331c0,0x1
c0022acf:	90                   	nop
c0022ad0:	83 c4 1c             	add    esp,0x1c
c0022ad3:	c3                   	ret    

c0022ad4 <SoundChannel::play()>:
c0022ad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad8:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022adc:	c3                   	ret    
c0022add:	90                   	nop

c0022ade <SoundChannel::paused()>:
c0022ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ae2:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022ae5:	c3                   	ret    

c0022ae6 <SoundChannel::getSampleRate()>:
c0022ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0022aec:	c3                   	ret    
c0022aed:	90                   	nop

c0022aee <SoundChannel::getBits()>:
c0022aee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022af2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022af5:	c3                   	ret    

c0022af6 <SoundChannel::getBufferUsed()>:
c0022af6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022afa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022afd:	c3                   	ret    

c0022afe <SoundChannel::getBufferSize()>:
c0022afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b02:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022b05:	c3                   	ret    

c0022b06 <SoundChannel::unbuffer(float*, int, int)>:
c0022b06:	56                   	push   esi
c0022b07:	53                   	push   ebx
c0022b08:	83 ec 40             	sub    esp,0x40
c0022b0b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022b0f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022b12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022b16:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022b19:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022b1d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022b21:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022b25:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022b29:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022b2d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022b31:	e8 d9 4f 00 00       	call   c0027b0f <__floatsisf>
c0022b36:	5a                   	pop    edx
c0022b37:	89 c6                	mov    esi,eax
c0022b39:	ff 33                	push   DWORD PTR [ebx]
c0022b3b:	e8 cf 4f 00 00       	call   c0027b0f <__floatsisf>
c0022b40:	59                   	pop    ecx
c0022b41:	5a                   	pop    edx
c0022b42:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022b45:	50                   	push   eax
c0022b46:	e8 d6 4b 00 00       	call   c0027721 <__mulsf3>
c0022b4b:	59                   	pop    ecx
c0022b4c:	5a                   	pop    edx
c0022b4d:	50                   	push   eax
c0022b4e:	56                   	push   esi
c0022b4f:	e8 90 4d 00 00       	call   c00278e4 <__divsf3>
c0022b54:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b57:	e8 83 62 00 00       	call   c0028ddf <__extendsfdf2>
c0022b5c:	59                   	pop    ecx
c0022b5d:	5e                   	pop    esi
c0022b5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022b62:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022b66:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022b6e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022b72:	50                   	push   eax
c0022b73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022b76:	e8 f9 5b fe ff       	call   c0008774 <src_process>
c0022b7b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022b7f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022b82:	83 c4 0c             	add    esp,0xc
c0022b85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022b88:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022b8b:	29 d0                	sub    eax,edx
c0022b8d:	c1 e0 02             	shl    eax,0x2
c0022b90:	50                   	push   eax
c0022b91:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022b94:	50                   	push   eax
c0022b95:	51                   	push   ecx
c0022b96:	e8 09 db fd ff       	call   c00006a4 <memmove>
c0022b9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022b9f:	83 c4 44             	add    esp,0x44
c0022ba2:	5b                   	pop    ebx
c0022ba3:	5e                   	pop    esi
c0022ba4:	c3                   	ret    
c0022ba5:	90                   	nop

c0022ba6 <SoundChannel::buffer8(unsigned char*, int)>:
c0022ba6:	55                   	push   ebp
c0022ba7:	57                   	push   edi
c0022ba8:	56                   	push   esi
c0022ba9:	53                   	push   ebx
c0022baa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022bae:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022bb2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022bb5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022bb9:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022bbc:	74 7a                	je     c0022c38 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022bbe:	85 ff                	test   edi,edi
c0022bc0:	7e 76                	jle    c0022c38 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022bc2:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022bc6:	8d 70 01             	lea    esi,[eax+0x1]
c0022bc9:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022bcc:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bcf:	8b 1c 9d c0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd240]
c0022bd6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022bd9:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022bdc:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022bdf:	74 5e                	je     c0022c3f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022be1:	83 ff 01             	cmp    edi,0x1
c0022be4:	74 4b                	je     c0022c31 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022be6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022bea:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022bed:	8d 70 01             	lea    esi,[eax+0x1]
c0022bf0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bf3:	8b 1c 9d c0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd240]
c0022bfa:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022bfd:	b8 02 00 00 00       	mov    eax,0x2
c0022c02:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022c05:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022c08:	75 23                	jne    c0022c2d <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022c0a:	eb 27                	jmp    c0022c33 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022c0c:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022c11:	8d 71 01             	lea    esi,[ecx+0x1]
c0022c14:	40                   	inc    eax
c0022c15:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022c18:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022c1b:	8b 1c 9d c0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd240]
c0022c22:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022c25:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022c28:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022c2b:	74 06                	je     c0022c33 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022c2d:	39 c7                	cmp    edi,eax
c0022c2f:	75 db                	jne    c0022c0c <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022c31:	89 f8                	mov    eax,edi
c0022c33:	5b                   	pop    ebx
c0022c34:	5e                   	pop    esi
c0022c35:	5f                   	pop    edi
c0022c36:	5d                   	pop    ebp
c0022c37:	c3                   	ret    
c0022c38:	5b                   	pop    ebx
c0022c39:	31 c0                	xor    eax,eax
c0022c3b:	5e                   	pop    esi
c0022c3c:	5f                   	pop    edi
c0022c3d:	5d                   	pop    ebp
c0022c3e:	c3                   	ret    
c0022c3f:	b8 01 00 00 00       	mov    eax,0x1
c0022c44:	eb ed                	jmp    c0022c33 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022c46 <SoundDevice::SoundDevice(char const*)>:
c0022c46:	83 ec 1c             	sub    esp,0x1c
c0022c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c4d:	83 ec 08             	sub    esp,0x8
c0022c50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c54:	50                   	push   eax
c0022c55:	e8 f8 17 ff ff       	call   c0014452 <Device::Device(char const*)>
c0022c5a:	83 c4 10             	add    esp,0x10
c0022c5d:	ba 0c d4 02 c0       	mov    edx,0xc002d40c
c0022c62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c66:	89 10                	mov    DWORD PTR [eax],edx
c0022c68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c6c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022c76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c7a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022c84:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c8c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022c91:	7f 19                	jg     c0022cac <SoundDevice::SoundDevice(char const*)+0x66>
c0022c93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c9b:	83 c2 54             	add    edx,0x54
c0022c9e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022ca6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022caa:	eb e0                	jmp    c0022c8c <SoundDevice::SoundDevice(char const*)+0x46>
c0022cac:	90                   	nop
c0022cad:	83 c4 1c             	add    esp,0x1c
c0022cb0:	c3                   	ret    
c0022cb1:	90                   	nop

c0022cb2 <SoundDevice::~SoundDevice()>:
c0022cb2:	53                   	push   ebx
c0022cb3:	83 ec 18             	sub    esp,0x18
c0022cb6:	ba 0c d4 02 c0       	mov    edx,0xc002d40c
c0022cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cbf:	89 10                	mov    DWORD PTR [eax],edx
c0022cc1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022cc9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022cce:	7f 46                	jg     c0022d16 <SoundDevice::~SoundDevice()+0x64>
c0022cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022cd8:	83 c2 54             	add    edx,0x54
c0022cdb:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022cdf:	85 c0                	test   eax,eax
c0022ce1:	74 2d                	je     c0022d10 <SoundDevice::~SoundDevice()+0x5e>
c0022ce3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ce7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022ceb:	83 c2 54             	add    edx,0x54
c0022cee:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022cf2:	85 db                	test   ebx,ebx
c0022cf4:	74 1a                	je     c0022d10 <SoundDevice::~SoundDevice()+0x5e>
c0022cf6:	83 ec 0c             	sub    esp,0xc
c0022cf9:	53                   	push   ebx
c0022cfa:	e8 21 fc ff ff       	call   c0022920 <SoundChannel::~SoundChannel()>
c0022cff:	83 c4 10             	add    esp,0x10
c0022d02:	83 ec 08             	sub    esp,0x8
c0022d05:	6a 2c                	push   0x2c
c0022d07:	53                   	push   ebx
c0022d08:	e8 54 00 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0022d0d:	83 c4 10             	add    esp,0x10
c0022d10:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022d14:	eb b3                	jmp    c0022cc9 <SoundDevice::~SoundDevice()+0x17>
c0022d16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d1a:	83 ec 0c             	sub    esp,0xc
c0022d1d:	50                   	push   eax
c0022d1e:	e8 25 14 ff ff       	call   c0014148 <Device::~Device()>
c0022d23:	83 c4 10             	add    esp,0x10
c0022d26:	90                   	nop
c0022d27:	83 c4 18             	add    esp,0x18
c0022d2a:	5b                   	pop    ebx
c0022d2b:	c3                   	ret    

c0022d2c <SoundDevice::~SoundDevice()>:
c0022d2c:	83 ec 0c             	sub    esp,0xc
c0022d2f:	83 ec 0c             	sub    esp,0xc
c0022d32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d36:	e8 77 ff ff ff       	call   c0022cb2 <SoundDevice::~SoundDevice()>
c0022d3b:	83 c4 10             	add    esp,0x10
c0022d3e:	83 ec 08             	sub    esp,0x8
c0022d41:	68 e4 01 00 00       	push   0x1e4
c0022d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d4a:	e8 12 00 ff ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0022d4f:	83 c4 10             	add    esp,0x10
c0022d52:	83 c4 0c             	add    esp,0xc
c0022d55:	c3                   	ret    

c0022d56 <SoundDevice::getFreeChannelNum()>:
c0022d56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d5a:	31 c0                	xor    eax,eax
c0022d5c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022d64:	74 09                	je     c0022d6f <SoundDevice::getFreeChannelNum()+0x19>
c0022d66:	40                   	inc    eax
c0022d67:	83 f8 20             	cmp    eax,0x20
c0022d6a:	75 f0                	jne    c0022d5c <SoundDevice::getFreeChannelNum()+0x6>
c0022d6c:	83 c8 ff             	or     eax,0xffffffff
c0022d6f:	c3                   	ret    

c0022d70 <SoundDevice::addChannel(SoundChannel*)>:
c0022d70:	56                   	push   esi
c0022d71:	53                   	push   ebx
c0022d72:	51                   	push   ecx
c0022d73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022d77:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022d7b:	53                   	push   ebx
c0022d7c:	e8 d5 ff ff ff       	call   c0022d56 <SoundDevice::getFreeChannelNum()>
c0022d81:	5a                   	pop    edx
c0022d82:	83 f8 ff             	cmp    eax,0xffffffff
c0022d85:	74 51                	je     c0022dd8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d87:	85 f6                	test   esi,esi
c0022d89:	74 4d                	je     c0022dd8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d8b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022d92:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022d99:	75 30                	jne    c0022dcb <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022d9b:	83 ec 0c             	sub    esp,0xc
c0022d9e:	56                   	push   esi
c0022d9f:	e8 42 fd ff ff       	call   c0022ae6 <SoundChannel::getSampleRate()>
c0022da4:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022daa:	89 34 24             	mov    DWORD PTR [esp],esi
c0022dad:	e8 3c fd ff ff       	call   c0022aee <SoundChannel::getBits()>
c0022db2:	83 c4 0c             	add    esp,0xc
c0022db5:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022dbb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022dbd:	50                   	push   eax
c0022dbe:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022dc4:	53                   	push   ebx
c0022dc5:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022dc8:	83 c4 10             	add    esp,0x10
c0022dcb:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022dd1:	b8 01 00 00 00       	mov    eax,0x1
c0022dd6:	eb 03                	jmp    c0022ddb <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022dd8:	83 c8 ff             	or     eax,0xffffffff
c0022ddb:	5a                   	pop    edx
c0022ddc:	5b                   	pop    ebx
c0022ddd:	5e                   	pop    esi
c0022dde:	c3                   	ret    
c0022ddf:	90                   	nop

c0022de0 <SoundDevice::removeChannel(int)>:
c0022de0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022de8:	83 fa 1f             	cmp    edx,0x1f
c0022deb:	77 23                	ja     c0022e10 <SoundDevice::removeChannel(int)+0x30>
c0022ded:	8d 14 90             	lea    edx,[eax+edx*4]
c0022df0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022df7:	74 17                	je     c0022e10 <SoundDevice::removeChannel(int)+0x30>
c0022df9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022e03:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022e09:	75 05                	jne    c0022e10 <SoundDevice::removeChannel(int)+0x30>
c0022e0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e0d:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022e10:	c3                   	ret    
c0022e11:	90                   	nop

c0022e12 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022e12:	57                   	push   edi
c0022e13:	56                   	push   esi
c0022e14:	53                   	push   ebx
c0022e15:	31 db                	xor    ebx,ebx
c0022e17:	83 ec 10             	sub    esp,0x10
c0022e1a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022e1e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022e22:	0f 8d cb 00 00 00    	jge    c0022ef3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022e28:	83 ec 0c             	sub    esp,0xc
c0022e2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e2f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022e32:	e8 a8 5f 00 00       	call   c0028ddf <__extendsfdf2>
c0022e37:	83 c4 10             	add    esp,0x10
c0022e3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e42:	68 00 00 f0 3f       	push   0x3ff00000
c0022e47:	6a 00                	push   0x0
c0022e49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e51:	e8 15 4f 00 00       	call   c0027d6b <__adddf3>
c0022e56:	83 c4 10             	add    esp,0x10
c0022e59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e61:	68 00 00 e0 3f       	push   0x3fe00000
c0022e66:	6a 00                	push   0x0
c0022e68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e70:	e8 73 55 00 00       	call   c00283e8 <__muldf3>
c0022e75:	83 c4 10             	add    esp,0x10
c0022e78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e80:	68 00 00 60 40       	push   0x40600000
c0022e85:	6a 00                	push   0x0
c0022e87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e8f:	e8 54 55 00 00       	call   c00283e8 <__muldf3>
c0022e94:	59                   	pop    ecx
c0022e95:	5f                   	pop    edi
c0022e96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022e9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ea6:	e8 10 5e 00 00       	call   c0028cbb <__truncdfsf2>
c0022eab:	5a                   	pop    edx
c0022eac:	89 c7                	mov    edi,eax
c0022eae:	59                   	pop    ecx
c0022eaf:	68 00 00 fe 42       	push   0x42fe0000
c0022eb4:	50                   	push   eax
c0022eb5:	e8 ab 4e 00 00       	call   c0027d65 <__gesf2>
c0022eba:	83 c4 10             	add    esp,0x10
c0022ebd:	85 c0                	test   eax,eax
c0022ebf:	78 06                	js     c0022ec7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022ec1:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022ec5:	eb 26                	jmp    c0022eed <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022ec7:	50                   	push   eax
c0022ec8:	50                   	push   eax
c0022ec9:	6a 00                	push   0x0
c0022ecb:	57                   	push   edi
c0022ecc:	e8 98 4e 00 00       	call   c0027d69 <__lesf2>
c0022ed1:	83 c4 10             	add    esp,0x10
c0022ed4:	85 c0                	test   eax,eax
c0022ed6:	7f 06                	jg     c0022ede <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022ed8:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022edc:	eb 0f                	jmp    c0022eed <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022ede:	83 ec 0c             	sub    esp,0xc
c0022ee1:	57                   	push   edi
c0022ee2:	e8 95 5f 00 00       	call   c0028e7c <lrintf>
c0022ee7:	83 c4 10             	add    esp,0x10
c0022eea:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022eed:	43                   	inc    ebx
c0022eee:	e9 2b ff ff ff       	jmp    c0022e1e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022ef3:	83 c4 10             	add    esp,0x10
c0022ef6:	5b                   	pop    ebx
c0022ef7:	5e                   	pop    esi
c0022ef8:	5f                   	pop    edi
c0022ef9:	c3                   	ret    

c0022efa <SoundDevice::getAudio(int, float*, float*)>:
c0022efa:	55                   	push   ebp
c0022efb:	57                   	push   edi
c0022efc:	56                   	push   esi
c0022efd:	53                   	push   ebx
c0022efe:	31 db                	xor    ebx,ebx
c0022f00:	83 ec 20             	sub    esp,0x20
c0022f03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022f07:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022f0b:	c1 e0 02             	shl    eax,0x2
c0022f0e:	50                   	push   eax
c0022f0f:	6a 00                	push   0x0
c0022f11:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022f15:	e8 52 d8 fd ff       	call   c000076c <memset>
c0022f1a:	83 c4 10             	add    esp,0x10
c0022f1d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022f21:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022f28:	85 c0                	test   eax,eax
c0022f2a:	0f 84 d7 00 00 00    	je     c0023007 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f30:	83 ec 0c             	sub    esp,0xc
c0022f33:	50                   	push   eax
c0022f34:	e8 a5 fb ff ff       	call   c0022ade <SoundChannel::paused()>
c0022f39:	83 c4 10             	add    esp,0x10
c0022f3c:	84 c0                	test   al,al
c0022f3e:	0f 85 c3 00 00 00    	jne    c0023007 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f44:	83 ec 0c             	sub    esp,0xc
c0022f47:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f4e:	e8 19 fa ff ff       	call   c002296c <SoundChannel::getVolume()>
c0022f53:	83 c4 10             	add    esp,0x10
c0022f56:	85 c0                	test   eax,eax
c0022f58:	0f 84 a9 00 00 00    	je     c0023007 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f5e:	83 ec 0c             	sub    esp,0xc
c0022f61:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f68:	e8 ff f9 ff ff       	call   c002296c <SoundChannel::getVolume()>
c0022f6d:	83 ec 0c             	sub    esp,0xc
c0022f70:	50                   	push   eax
c0022f71:	e8 99 4b 00 00       	call   c0027b0f <__floatsisf>
c0022f76:	59                   	pop    ecx
c0022f77:	5d                   	pop    ebp
c0022f78:	31 ed                	xor    ebp,ebp
c0022f7a:	68 00 00 c8 42       	push   0x42c80000
c0022f7f:	50                   	push   eax
c0022f80:	e8 5f 49 00 00       	call   c00278e4 <__divsf3>
c0022f85:	83 c4 10             	add    esp,0x10
c0022f88:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f8c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022f90:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022f96:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022f9a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022fa1:	e8 60 fb ff ff       	call   c0022b06 <SoundChannel::unbuffer(float*, int, int)>
c0022fa6:	83 c4 20             	add    esp,0x20
c0022fa9:	89 c1                	mov    ecx,eax
c0022fab:	39 cd                	cmp    ebp,ecx
c0022fad:	7d 52                	jge    c0023001 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022faf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022fb3:	50                   	push   eax
c0022fb4:	50                   	push   eax
c0022fb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022fb9:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022fbc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022fc0:	e8 5c 47 00 00       	call   c0027721 <__mulsf3>
c0022fc5:	5a                   	pop    edx
c0022fc6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022fca:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022fd0:	e8 3a 4b 00 00       	call   c0027b0f <__floatsisf>
c0022fd5:	59                   	pop    ecx
c0022fd6:	5a                   	pop    edx
c0022fd7:	50                   	push   eax
c0022fd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fdc:	e8 03 49 00 00       	call   c00278e4 <__divsf3>
c0022fe1:	59                   	pop    ecx
c0022fe2:	5a                   	pop    edx
c0022fe3:	50                   	push   eax
c0022fe4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022fe8:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022feb:	e8 0e 44 00 00       	call   c00273fe <__addsf3>
c0022ff0:	83 c4 10             	add    esp,0x10
c0022ff3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022ff7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022ffb:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022ffe:	45                   	inc    ebp
c0022fff:	eb aa                	jmp    c0022fab <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0023001:	39 cf                	cmp    edi,ecx
c0023003:	7e 02                	jle    c0023007 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023005:	89 cf                	mov    edi,ecx
c0023007:	43                   	inc    ebx
c0023008:	83 fb 20             	cmp    ebx,0x20
c002300b:	0f 85 10 ff ff ff    	jne    c0022f21 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0023011:	83 c4 1c             	add    esp,0x1c
c0023014:	89 f8                	mov    eax,edi
c0023016:	5b                   	pop    ebx
c0023017:	5e                   	pop    esi
c0023018:	5f                   	pop    edi
c0023019:	5d                   	pop    ebp
c002301a:	c3                   	ret    
c002301b:	90                   	nop

c002301c <PCI::open(int, int, void*)>:
c002301c:	83 ec 18             	sub    esp,0x18
c002301f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023023:	8b 10                	mov    edx,DWORD PTR [eax]
c0023025:	50                   	push   eax
c0023026:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0023029:	31 c0                	xor    eax,eax
c002302b:	83 c4 1c             	add    esp,0x1c
c002302e:	c3                   	ret    
c002302f:	90                   	nop

c0023030 <PCI::close(int, int, void*)>:
c0023030:	31 c0                	xor    eax,eax
c0023032:	c3                   	ret    
c0023033:	90                   	nop

c0023034 <PCI::PCI()>:
c0023034:	83 ec 0c             	sub    esp,0xc
c0023037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002303b:	83 ec 08             	sub    esp,0x8
c002303e:	68 3c d4 02 c0       	push   0xc002d43c
c0023043:	50                   	push   eax
c0023044:	e8 99 0a ff ff       	call   c0013ae2 <Bus::Bus(char const*)>
c0023049:	83 c4 10             	add    esp,0x10
c002304c:	ba c4 d4 02 c0       	mov    edx,0xc002d4c4
c0023051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023055:	89 10                	mov    DWORD PTR [eax],edx
c0023057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002305b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023061:	0f b6 d0             	movzx  edx,al
c0023064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023068:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002306f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023073:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023079:	0f b6 d0             	movzx  edx,al
c002307c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023080:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0023085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023089:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002308f:	8d 50 01             	lea    edx,[eax+0x1]
c0023092:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023096:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002309c:	0f b6 d0             	movzx  edx,al
c002309f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00230a7:	83 c9 c0             	or     ecx,0xffffffc0
c00230aa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00230ae:	90                   	nop
c00230af:	83 c4 0c             	add    esp,0xc
c00230b2:	c3                   	ret    
c00230b3:	90                   	nop

c00230b4 <PCI::readBAR8(unsigned int, int)>:
c00230b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230bc:	f6 c2 01             	test   dl,0x1
c00230bf:	74 07                	je     c00230c8 <PCI::readBAR8(unsigned int, int)+0x14>
c00230c1:	83 e2 fc             	and    edx,0xfffffffc
c00230c4:	01 c2                	add    edx,eax
c00230c6:	ec                   	in     al,dx
c00230c7:	c3                   	ret    
c00230c8:	83 e2 f0             	and    edx,0xfffffff0
c00230cb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00230ce:	c3                   	ret    
c00230cf:	90                   	nop

c00230d0 <PCI::readBAR16(unsigned int, int)>:
c00230d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230d8:	f6 c2 01             	test   dl,0x1
c00230db:	74 08                	je     c00230e5 <PCI::readBAR16(unsigned int, int)+0x15>
c00230dd:	83 e2 fc             	and    edx,0xfffffffc
c00230e0:	01 c2                	add    edx,eax
c00230e2:	66 ed                	in     ax,dx
c00230e4:	c3                   	ret    
c00230e5:	83 e2 f0             	and    edx,0xfffffff0
c00230e8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00230ec:	c3                   	ret    
c00230ed:	90                   	nop

c00230ee <PCI::readBAR32(unsigned int, int)>:
c00230ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230f6:	f6 c2 01             	test   dl,0x1
c00230f9:	74 07                	je     c0023102 <PCI::readBAR32(unsigned int, int)+0x14>
c00230fb:	83 e2 fc             	and    edx,0xfffffffc
c00230fe:	01 c2                	add    edx,eax
c0023100:	ed                   	in     eax,dx
c0023101:	c3                   	ret    
c0023102:	83 e2 f0             	and    edx,0xfffffff0
c0023105:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0023108:	c3                   	ret    
c0023109:	90                   	nop

c002310a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002310a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002310e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023112:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023116:	f6 c2 01             	test   dl,0x1
c0023119:	74 07                	je     c0023122 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002311b:	83 e2 fc             	and    edx,0xfffffffc
c002311e:	01 ca                	add    edx,ecx
c0023120:	ee                   	out    dx,al
c0023121:	c3                   	ret    
c0023122:	83 e2 f0             	and    edx,0xfffffff0
c0023125:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0023128:	c3                   	ret    
c0023129:	90                   	nop

c002312a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002312a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002312e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023132:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023136:	f6 c2 01             	test   dl,0x1
c0023139:	74 08                	je     c0023143 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002313b:	83 e2 fc             	and    edx,0xfffffffc
c002313e:	01 ca                	add    edx,ecx
c0023140:	66 ef                	out    dx,ax
c0023142:	c3                   	ret    
c0023143:	83 e2 f0             	and    edx,0xfffffff0
c0023146:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002314a:	c3                   	ret    
c002314b:	90                   	nop

c002314c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002314c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023150:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023154:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023158:	f6 c2 01             	test   dl,0x1
c002315b:	74 07                	je     c0023164 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002315d:	83 e2 fc             	and    edx,0xfffffffc
c0023160:	01 ca                	add    edx,ecx
c0023162:	ef                   	out    dx,eax
c0023163:	c3                   	ret    
c0023164:	83 e2 f0             	and    edx,0xfffffff0
c0023167:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002316a:	c3                   	ret    
c002316b:	90                   	nop

c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002316c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023170:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023175:	89 ca                	mov    edx,ecx
c0023177:	c1 e0 10             	shl    eax,0x10
c002317a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023180:	09 d0                	or     eax,edx
c0023182:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0023187:	c1 e2 08             	shl    edx,0x8
c002318a:	09 d0                	or     eax,edx
c002318c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023191:	c1 e2 0b             	shl    edx,0xb
c0023194:	09 d0                	or     eax,edx
c0023196:	ba f8 0c 00 00       	mov    edx,0xcf8
c002319b:	0d 00 00 00 80       	or     eax,0x80000000
c00231a0:	ef                   	out    dx,eax
c00231a1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00231a6:	ed                   	in     eax,dx
c00231a7:	83 e1 02             	and    ecx,0x2
c00231aa:	0f b6 c9             	movzx  ecx,cl
c00231ad:	c1 e1 03             	shl    ecx,0x3
c00231b0:	d3 e8                	shr    eax,cl
c00231b2:	c3                   	ret    
c00231b3:	90                   	nop

c00231b4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00231b4:	6a 00                	push   0x0
c00231b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231bb:	50                   	push   eax
c00231bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231c1:	50                   	push   eax
c00231c2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231c7:	50                   	push   eax
c00231c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231cc:	e8 9b ff ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231d1:	83 c4 14             	add    esp,0x14
c00231d4:	c3                   	ret    
c00231d5:	90                   	nop

c00231d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00231d6:	6a 0e                	push   0xe
c00231d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231dd:	50                   	push   eax
c00231de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231e3:	50                   	push   eax
c00231e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231e9:	50                   	push   eax
c00231ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231ee:	e8 79 ff ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231f3:	83 c4 14             	add    esp,0x14
c00231f6:	0f b6 c0             	movzx  eax,al
c00231f9:	c3                   	ret    

c00231fa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00231fa:	55                   	push   ebp
c00231fb:	57                   	push   edi
c00231fc:	56                   	push   esi
c00231fd:	53                   	push   ebx
c00231fe:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0023203:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0023208:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002320d:	6a 0a                	push   0xa
c002320f:	56                   	push   esi
c0023210:	55                   	push   ebp
c0023211:	57                   	push   edi
c0023212:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023216:	e8 51 ff ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002321b:	6a 0a                	push   0xa
c002321d:	89 c3                	mov    ebx,eax
c002321f:	56                   	push   esi
c0023220:	0f b6 db             	movzx  ebx,bl
c0023223:	55                   	push   ebp
c0023224:	57                   	push   edi
c0023225:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023229:	e8 3e ff ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002322e:	83 c4 28             	add    esp,0x28
c0023231:	25 00 ff 00 00       	and    eax,0xff00
c0023236:	09 d8                	or     eax,ebx
c0023238:	5b                   	pop    ebx
c0023239:	5e                   	pop    esi
c002323a:	5f                   	pop    edi
c002323b:	5d                   	pop    ebp
c002323c:	c3                   	ret    
c002323d:	90                   	nop

c002323e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002323e:	6a 08                	push   0x8
c0023240:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023245:	50                   	push   eax
c0023246:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002324b:	50                   	push   eax
c002324c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023251:	50                   	push   eax
c0023252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023256:	e8 11 ff ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002325b:	83 c4 14             	add    esp,0x14
c002325e:	0f b6 c4             	movzx  eax,ah
c0023261:	c3                   	ret    

c0023262 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023262:	6a 08                	push   0x8
c0023264:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023269:	50                   	push   eax
c002326a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002326f:	50                   	push   eax
c0023270:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023275:	50                   	push   eax
c0023276:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002327a:	e8 ed fe ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002327f:	83 c4 14             	add    esp,0x14
c0023282:	c3                   	ret    
c0023283:	90                   	nop

c0023284 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023284:	6a 3c                	push   0x3c
c0023286:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002328b:	50                   	push   eax
c002328c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023291:	50                   	push   eax
c0023292:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023297:	50                   	push   eax
c0023298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002329c:	e8 cb fe ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232a1:	83 c4 14             	add    esp,0x14
c00232a4:	c3                   	ret    
c00232a5:	90                   	nop

c00232a6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00232a6:	6a 18                	push   0x18
c00232a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232ad:	50                   	push   eax
c00232ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232b3:	50                   	push   eax
c00232b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00232b9:	50                   	push   eax
c00232ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232be:	e8 a9 fe ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232c3:	83 c4 14             	add    esp,0x14
c00232c6:	0f b6 c4             	movzx  eax,ah
c00232c9:	c3                   	ret    

c00232ca <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00232ca:	55                   	push   ebp
c00232cb:	57                   	push   edi
c00232cc:	56                   	push   esi
c00232cd:	53                   	push   ebx
c00232ce:	50                   	push   eax
c00232cf:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00232d3:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00232d8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00232dd:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00232e2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00232e9:	8d 43 12             	lea    eax,[ebx+0x12]
c00232ec:	83 c3 10             	add    ebx,0x10
c00232ef:	0f b6 c0             	movzx  eax,al
c00232f2:	0f b6 db             	movzx  ebx,bl
c00232f5:	50                   	push   eax
c00232f6:	51                   	push   ecx
c00232f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00232fb:	57                   	push   edi
c00232fc:	55                   	push   ebp
c00232fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0023301:	e8 66 fe ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023306:	53                   	push   ebx
c0023307:	89 c6                	mov    esi,eax
c0023309:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002330d:	c1 e6 10             	shl    esi,0x10
c0023310:	51                   	push   ecx
c0023311:	57                   	push   edi
c0023312:	55                   	push   ebp
c0023313:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023317:	e8 50 fe ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002331c:	83 c4 2c             	add    esp,0x2c
c002331f:	0f b7 c0             	movzx  eax,ax
c0023322:	5b                   	pop    ebx
c0023323:	09 f0                	or     eax,esi
c0023325:	5e                   	pop    esi
c0023326:	5f                   	pop    edi
c0023327:	5d                   	pop    ebp
c0023328:	c3                   	ret    
c0023329:	90                   	nop

c002332a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002332a:	53                   	push   ebx
c002332b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023330:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0023335:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023339:	c1 e1 10             	shl    ecx,0x10
c002333c:	25 fc 00 00 00       	and    eax,0xfc
c0023341:	09 c1                	or     ecx,eax
c0023343:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023348:	c1 e0 08             	shl    eax,0x8
c002334b:	09 c1                	or     ecx,eax
c002334d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023352:	c1 e0 0b             	shl    eax,0xb
c0023355:	09 c1                	or     ecx,eax
c0023357:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002335d:	89 c8                	mov    eax,ecx
c002335f:	ef                   	out    dx,eax
c0023360:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023365:	ed                   	in     eax,dx
c0023366:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002336b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023370:	74 0a                	je     c002337c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023372:	0f b7 d8             	movzx  ebx,ax
c0023375:	89 d0                	mov    eax,edx
c0023377:	c1 e0 10             	shl    eax,0x10
c002337a:	eb 05                	jmp    c0023381 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002337c:	66 31 c0             	xor    ax,ax
c002337f:	89 d3                	mov    ebx,edx
c0023381:	09 c3                	or     ebx,eax
c0023383:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023388:	89 c8                	mov    eax,ecx
c002338a:	ef                   	out    dx,eax
c002338b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023390:	89 d8                	mov    eax,ebx
c0023392:	ef                   	out    dx,eax
c0023393:	5b                   	pop    ebx
c0023394:	c3                   	ret    
c0023395:	90                   	nop

c0023396 <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c0023396:	31 c0                	xor    eax,eax
c0023398:	c3                   	ret    
c0023399:	90                   	nop

c002339a <PCI::checkBus(unsigned char)>:
c002339a:	56                   	push   esi
c002339b:	53                   	push   ebx
c002339c:	31 db                	xor    ebx,ebx
c002339e:	51                   	push   ecx
c002339f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00233a4:	52                   	push   edx
c00233a5:	53                   	push   ebx
c00233a6:	43                   	inc    ebx
c00233a7:	56                   	push   esi
c00233a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233ac:	e8 41 03 00 00       	call   c00236f2 <PCI::checkDevice(unsigned char, unsigned char)>
c00233b1:	83 c4 10             	add    esp,0x10
c00233b4:	83 fb 20             	cmp    ebx,0x20
c00233b7:	75 eb                	jne    c00233a4 <PCI::checkBus(unsigned char)+0xa>
c00233b9:	58                   	pop    eax
c00233ba:	5b                   	pop    ebx
c00233bb:	5e                   	pop    esi
c00233bc:	c3                   	ret    
c00233bd:	90                   	nop

c00233be <PCI::foundDevice(PCIDeviceInfo)>:
c00233be:	55                   	push   ebp
c00233bf:	57                   	push   edi
c00233c0:	56                   	push   esi
c00233c1:	53                   	push   ebx
c00233c2:	83 ec 1c             	sub    esp,0x1c
c00233c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00233c9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00233cf:	0f 84 68 01 00 00    	je     c002353d <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00233d5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00233d9:	66 81 f9 06 04       	cmp    cx,0x406
c00233de:	75 2c                	jne    c002340c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00233e0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00233e5:	50                   	push   eax
c00233e6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00233eb:	50                   	push   eax
c00233ec:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00233f1:	50                   	push   eax
c00233f2:	56                   	push   esi
c00233f3:	e8 ae fe ff ff       	call   c00232a6 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00233f8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00233fc:	0f b6 c0             	movzx  eax,al
c00233ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023403:	83 c4 2c             	add    esp,0x2c
c0023406:	5b                   	pop    ebx
c0023407:	5e                   	pop    esi
c0023408:	5f                   	pop    edi
c0023409:	5d                   	pop    ebp
c002340a:	eb 8e                	jmp    c002339a <PCI::checkBus(unsigned char)>
c002340c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023410:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023416:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002341a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002341e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023422:	88 d3                	mov    bl,dl
c0023424:	85 c0                	test   eax,eax
c0023426:	74 33                	je     c002345b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023428:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c002342b:	85 d2                	test   edx,edx
c002342d:	74 28                	je     c0023457 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002342f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023435:	31 ef                	xor    edi,ebp
c0023437:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002343d:	75 18                	jne    c0023457 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002343f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023443:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023449:	75 0c                	jne    c0023457 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002344b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023451:	0f 84 e6 00 00 00    	je     c002353d <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c0023457:	8b 00                	mov    eax,DWORD PTR [eax]
c0023459:	eb c9                	jmp    c0023424 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c002345b:	66 81 f9 01 06       	cmp    cx,0x601
c0023460:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0023464:	75 19                	jne    c002347f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0023466:	83 ec 0c             	sub    esp,0xc
c0023469:	68 64 01 00 00       	push   0x164
c002346e:	e8 33 c4 fe ff       	call   c000f8a6 <malloc>
c0023473:	89 c5                	mov    ebp,eax
c0023475:	89 04 24             	mov    DWORD PTR [esp],eax
c0023478:	e8 ab 0f 00 00       	call   c0024428 <SATABus::SATABus()>
c002347d:	eb 1e                	jmp    c002349d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002347f:	66 81 f9 01 01       	cmp    cx,0x101
c0023484:	75 60                	jne    c00234e6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023486:	83 ec 0c             	sub    esp,0xc
c0023489:	68 70 02 00 00       	push   0x270
c002348e:	e8 13 c4 fe ff       	call   c000f8a6 <malloc>
c0023493:	89 c5                	mov    ebp,eax
c0023495:	89 04 24             	mov    DWORD PTR [esp],eax
c0023498:	e8 19 03 00 00       	call   c00237b6 <IDE::IDE()>
c002349d:	58                   	pop    eax
c002349e:	5a                   	pop    edx
c002349f:	55                   	push   ebp
c00234a0:	56                   	push   esi
c00234a1:	e8 bc 0d ff ff       	call   c0014262 <Device::addChild(Device*)>
c00234a6:	83 ec 1c             	sub    esp,0x1c
c00234a9:	b9 09 00 00 00       	mov    ecx,0x9
c00234ae:	fc                   	cld    
c00234af:	89 e7                	mov    edi,esp
c00234b1:	89 de                	mov    esi,ebx
c00234b3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00234b5:	55                   	push   ebp
c00234b6:	e8 c5 0c ff ff       	call   c0014180 <Device::preOpenPCI(PCIDeviceInfo)>
c00234bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00234be:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00234c2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00234ca:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00234d2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00234da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234dd:	83 c4 4c             	add    esp,0x4c
c00234e0:	5b                   	pop    ebx
c00234e1:	5e                   	pop    esi
c00234e2:	5f                   	pop    edi
c00234e3:	5d                   	pop    ebp
c00234e4:	ff e0                	jmp    eax
c00234e6:	50                   	push   eax
c00234e7:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c00234ec:	50                   	push   eax
c00234ed:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00234f2:	50                   	push   eax
c00234f3:	68 44 d4 02 c0       	push   0xc002d444
c00234f8:	e8 44 f9 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00234fd:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c0023504:	e8 9d c3 fe ff       	call   c000f8a6 <malloc>
c0023509:	5a                   	pop    edx
c002350a:	89 c5                	mov    ebp,eax
c002350c:	59                   	pop    ecx
c002350d:	68 60 d4 02 c0       	push   0xc002d460
c0023512:	50                   	push   eax
c0023513:	e8 40 10 ff ff       	call   c0014558 <DriverlessDevice::DriverlessDevice(char const*)>
c0023518:	5f                   	pop    edi
c0023519:	58                   	pop    eax
c002351a:	55                   	push   ebp
c002351b:	56                   	push   esi
c002351c:	e8 41 0d ff ff       	call   c0014262 <Device::addChild(Device*)>
c0023521:	b9 09 00 00 00       	mov    ecx,0x9
c0023526:	fc                   	cld    
c0023527:	89 df                	mov    edi,ebx
c0023529:	89 de                	mov    esi,ebx
c002352b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002352d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023531:	83 c4 2c             	add    esp,0x2c
c0023534:	5b                   	pop    ebx
c0023535:	5e                   	pop    esi
c0023536:	5f                   	pop    edi
c0023537:	5d                   	pop    ebp
c0023538:	e9 43 0c ff ff       	jmp    c0014180 <Device::preOpenPCI(PCIDeviceInfo)>
c002353d:	83 c4 1c             	add    esp,0x1c
c0023540:	5b                   	pop    ebx
c0023541:	5e                   	pop    esi
c0023542:	5f                   	pop    edi
c0023543:	5d                   	pop    ebp
c0023544:	c3                   	ret    
c0023545:	90                   	nop

c0023546 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0023546:	55                   	push   ebp
c0023547:	57                   	push   edi
c0023548:	56                   	push   esi
c0023549:	53                   	push   ebx
c002354a:	83 ec 5c             	sub    esp,0x5c
c002354d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023551:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023555:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0023559:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002355e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023562:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0023566:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002356b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002356f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0023574:	6a 0c                	push   0xc
c0023576:	55                   	push   ebp
c0023577:	53                   	push   ebx
c0023578:	57                   	push   edi
c0023579:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023580:	e8 e7 fb ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023585:	55                   	push   ebp
c0023586:	53                   	push   ebx
c0023587:	57                   	push   edi
c0023588:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002358f:	e8 66 fc ff ff       	call   c00231fa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023594:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0023599:	83 c4 24             	add    esp,0x24
c002359c:	55                   	push   ebp
c002359d:	53                   	push   ebx
c002359e:	57                   	push   edi
c002359f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00235a3:	e8 dc fc ff ff       	call   c0023284 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00235a8:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00235ac:	6a 3c                	push   0x3c
c00235ae:	55                   	push   ebp
c00235af:	53                   	push   ebx
c00235b0:	57                   	push   edi
c00235b1:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00235b8:	e8 af fb ff ff       	call   c002316c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235bd:	0f b6 c4             	movzx  eax,ah
c00235c0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00235c4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00235c8:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00235cc:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00235d1:	83 c4 24             	add    esp,0x24
c00235d4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00235da:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00235e1:	74 6c                	je     c002364f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235e3:	31 f6                	xor    esi,esi
c00235e5:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c00235eb:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00235f1:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00235f7:	7e 56                	jle    c002364f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235f9:	8d 14 f2             	lea    edx,[edx+esi*8]
c00235fc:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023603:	39 cb                	cmp    ebx,ecx
c0023605:	75 45                	jne    c002364c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023607:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c002360e:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0023612:	75 38                	jne    c002364c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023614:	83 ec 0c             	sub    esp,0xc
c0023617:	68 7a d4 02 c0       	push   0xc002d47a
c002361c:	e8 20 f8 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0023621:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c0023627:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002362d:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0023635:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0023639:	52                   	push   edx
c002363a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002363e:	53                   	push   ebx
c002363f:	68 9f d4 02 c0       	push   0xc002d49f
c0023644:	e8 f8 f7 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0023649:	83 c4 20             	add    esp,0x20
c002364c:	46                   	inc    esi
c002364d:	eb 96                	jmp    c00235e5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c002364f:	31 d2                	xor    edx,edx
c0023651:	83 ec 0c             	sub    esp,0xc
c0023654:	55                   	push   ebp
c0023655:	53                   	push   ebx
c0023656:	57                   	push   edi
c0023657:	52                   	push   edx
c0023658:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002365c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023663:	e8 62 fc ff ff       	call   c00232ca <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023668:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c002366c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023670:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023674:	42                   	inc    edx
c0023675:	83 c4 20             	add    esp,0x20
c0023678:	83 fa 06             	cmp    edx,0x6
c002367b:	75 d4                	jne    c0023651 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c002367d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023681:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023685:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023689:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c002368d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023691:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023695:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002369a:	86 e0                	xchg   al,ah
c002369c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00236a1:	55                   	push   ebp
c00236a2:	53                   	push   ebx
c00236a3:	57                   	push   edi
c00236a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00236a8:	e8 91 fb ff ff       	call   c002323e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00236ad:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00236b1:	55                   	push   ebp
c00236b2:	53                   	push   ebx
c00236b3:	57                   	push   edi
c00236b4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00236bb:	e8 f4 fa ff ff       	call   c00231b4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00236c0:	83 ec 0c             	sub    esp,0xc
c00236c3:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00236c8:	b9 09 00 00 00       	mov    ecx,0x9
c00236cd:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00236d1:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00236d5:	fc                   	cld    
c00236d6:	89 e7                	mov    edi,esp
c00236d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00236da:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00236e1:	e8 d8 fc ff ff       	call   c00233be <PCI::foundDevice(PCIDeviceInfo)>
c00236e6:	81 c4 8c 00 00 00    	add    esp,0x8c
c00236ec:	5b                   	pop    ebx
c00236ed:	5e                   	pop    esi
c00236ee:	5f                   	pop    edi
c00236ef:	5d                   	pop    ebp
c00236f0:	c3                   	ret    
c00236f1:	90                   	nop

c00236f2 <PCI::checkDevice(unsigned char, unsigned char)>:
c00236f2:	55                   	push   ebp
c00236f3:	57                   	push   edi
c00236f4:	56                   	push   esi
c00236f5:	53                   	push   ebx
c00236f6:	83 ec 0c             	sub    esp,0xc
c00236f9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00236fd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023702:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023707:	6a 00                	push   0x0
c0023709:	56                   	push   esi
c002370a:	57                   	push   edi
c002370b:	55                   	push   ebp
c002370c:	e8 a3 fa ff ff       	call   c00231b4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023711:	6a 00                	push   0x0
c0023713:	56                   	push   esi
c0023714:	57                   	push   edi
c0023715:	55                   	push   ebp
c0023716:	e8 2b fe ff ff       	call   c0023546 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002371b:	83 c4 20             	add    esp,0x20
c002371e:	6a 00                	push   0x0
c0023720:	56                   	push   esi
c0023721:	57                   	push   edi
c0023722:	55                   	push   ebp
c0023723:	e8 ae fa ff ff       	call   c00231d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023728:	83 c4 10             	add    esp,0x10
c002372b:	84 c0                	test   al,al
c002372d:	79 27                	jns    c0023756 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002372f:	bb 01 00 00 00       	mov    ebx,0x1
c0023734:	53                   	push   ebx
c0023735:	56                   	push   esi
c0023736:	57                   	push   edi
c0023737:	55                   	push   ebp
c0023738:	e8 77 fa ff ff       	call   c00231b4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002373d:	83 c4 10             	add    esp,0x10
c0023740:	66 40                	inc    ax
c0023742:	74 0c                	je     c0023750 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023744:	53                   	push   ebx
c0023745:	56                   	push   esi
c0023746:	57                   	push   edi
c0023747:	55                   	push   ebp
c0023748:	e8 f9 fd ff ff       	call   c0023546 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002374d:	83 c4 10             	add    esp,0x10
c0023750:	43                   	inc    ebx
c0023751:	83 fb 08             	cmp    ebx,0x8
c0023754:	75 de                	jne    c0023734 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023756:	83 c4 0c             	add    esp,0xc
c0023759:	5b                   	pop    ebx
c002375a:	5e                   	pop    esi
c002375b:	5f                   	pop    edi
c002375c:	5d                   	pop    ebp
c002375d:	c3                   	ret    

c002375e <PCI::detect()>:
c002375e:	56                   	push   esi
c002375f:	53                   	push   ebx
c0023760:	53                   	push   ebx
c0023761:	31 db                	xor    ebx,ebx
c0023763:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023767:	6a 00                	push   0x0
c0023769:	6a 00                	push   0x0
c002376b:	6a 00                	push   0x0
c002376d:	56                   	push   esi
c002376e:	e8 63 fa ff ff       	call   c00231d6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023773:	83 c4 10             	add    esp,0x10
c0023776:	a8 80                	test   al,0x80
c0023778:	75 21                	jne    c002379b <PCI::detect()+0x3d>
c002377a:	51                   	push   ecx
c002377b:	51                   	push   ecx
c002377c:	6a 00                	push   0x0
c002377e:	56                   	push   esi
c002377f:	e8 16 fc ff ff       	call   c002339a <PCI::checkBus(unsigned char)>
c0023784:	83 c4 10             	add    esp,0x10
c0023787:	eb 24                	jmp    c00237ad <PCI::detect()+0x4f>
c0023789:	52                   	push   edx
c002378a:	52                   	push   edx
c002378b:	53                   	push   ebx
c002378c:	43                   	inc    ebx
c002378d:	56                   	push   esi
c002378e:	e8 07 fc ff ff       	call   c002339a <PCI::checkBus(unsigned char)>
c0023793:	83 c4 10             	add    esp,0x10
c0023796:	83 fb 08             	cmp    ebx,0x8
c0023799:	74 12                	je     c00237ad <PCI::detect()+0x4f>
c002379b:	53                   	push   ebx
c002379c:	6a 00                	push   0x0
c002379e:	6a 00                	push   0x0
c00237a0:	56                   	push   esi
c00237a1:	e8 0e fa ff ff       	call   c00231b4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237a6:	83 c4 10             	add    esp,0x10
c00237a9:	66 40                	inc    ax
c00237ab:	74 dc                	je     c0023789 <PCI::detect()+0x2b>
c00237ad:	58                   	pop    eax
c00237ae:	5b                   	pop    ebx
c00237af:	5e                   	pop    esi
c00237b0:	c3                   	ret    
c00237b1:	90                   	nop

c00237b2 <IDE::close(int, int, void*)>:
c00237b2:	83 c8 ff             	or     eax,0xffffffff
c00237b5:	c3                   	ret    

c00237b6 <IDE::IDE()>:
c00237b6:	83 ec 0c             	sub    esp,0xc
c00237b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237bd:	83 ec 08             	sub    esp,0x8
c00237c0:	68 e8 d4 02 c0       	push   0xc002d4e8
c00237c5:	50                   	push   eax
c00237c6:	e8 31 0e ff ff       	call   c00145fc <HardDiskController::HardDiskController(char const*)>
c00237cb:	83 c4 10             	add    esp,0x10
c00237ce:	ba 28 d7 02 c0       	mov    edx,0xc002d728
c00237d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237d7:	89 10                	mov    DWORD PTR [eax],edx
c00237d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237dd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00237e4:	90                   	nop
c00237e5:	83 c4 0c             	add    esp,0xc
c00237e8:	c3                   	ret    
c00237e9:	90                   	nop

c00237ea <IDE::prepareInterrupt(unsigned char)>:
c00237ea:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00237ef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00237f3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00237fb:	c3                   	ret    

c00237fc <selectDrive(unsigned char, unsigned char)>:
c00237fc:	c3                   	ret    
c00237fd:	90                   	nop

c00237fe <IDE::getBase(unsigned char)>:
c00237fe:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023807:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002380f:	c3                   	ret    

c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023810:	55                   	push   ebp
c0023811:	57                   	push   edi
c0023812:	56                   	push   esi
c0023813:	53                   	push   ebx
c0023814:	83 ec 1c             	sub    esp,0x1c
c0023817:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002381b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002381f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023822:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023826:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002382a:	80 f9 03             	cmp    cl,0x3
c002382d:	77 51                	ja     c0023880 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c002382f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023833:	0f b6 f2             	movzx  esi,dl
c0023836:	0f b6 db             	movzx  ebx,bl
c0023839:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002383c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023840:	83 ca 80             	or     edx,0xffffff80
c0023843:	0f b6 d2             	movzx  edx,dl
c0023846:	52                   	push   edx
c0023847:	6a 0c                	push   0xc
c0023849:	56                   	push   esi
c002384a:	57                   	push   edi
c002384b:	e8 c0 ff ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023850:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023859:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002385d:	ee                   	out    dx,al
c002385e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023863:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023867:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002386b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002386f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023877:	83 c4 2c             	add    esp,0x2c
c002387a:	5b                   	pop    ebx
c002387b:	5e                   	pop    esi
c002387c:	5f                   	pop    edi
c002387d:	5d                   	pop    ebp
c002387e:	eb 90                	jmp    c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023880:	80 fb 07             	cmp    bl,0x7
c0023883:	77 12                	ja     c0023897 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023885:	0f b6 d2             	movzx  edx,dl
c0023888:	0f b6 db             	movzx  ebx,bl
c002388b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023893:	89 da                	mov    edx,ebx
c0023895:	eb 2f                	jmp    c00238c6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023897:	80 fb 0d             	cmp    bl,0xd
c002389a:	77 13                	ja     c00238af <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002389c:	0f b6 d2             	movzx  edx,dl
c002389f:	0f b6 db             	movzx  ebx,bl
c00238a2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00238a9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00238ad:	eb 17                	jmp    c00238c6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00238af:	80 fb 15             	cmp    bl,0x15
c00238b2:	77 13                	ja     c00238c7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00238b4:	0f b6 d2             	movzx  edx,dl
c00238b7:	0f b6 db             	movzx  ebx,bl
c00238ba:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00238c2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00238c6:	ee                   	out    dx,al
c00238c7:	83 c4 1c             	add    esp,0x1c
c00238ca:	5b                   	pop    ebx
c00238cb:	5e                   	pop    esi
c00238cc:	5f                   	pop    edi
c00238cd:	5d                   	pop    ebp
c00238ce:	c3                   	ret    
c00238cf:	90                   	nop

c00238d0 <IDE::read(unsigned char, unsigned char)>:
c00238d0:	55                   	push   ebp
c00238d1:	57                   	push   edi
c00238d2:	56                   	push   esi
c00238d3:	53                   	push   ebx
c00238d4:	83 ec 1c             	sub    esp,0x1c
c00238d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00238db:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238df:	8d 43 f8             	lea    eax,[ebx-0x8]
c00238e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238e6:	3c 03                	cmp    al,0x3
c00238e8:	77 43                	ja     c002392d <IDE::read(unsigned char, unsigned char)+0x5d>
c00238ea:	0f b6 f2             	movzx  esi,dl
c00238ed:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238f0:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00238f4:	83 c8 80             	or     eax,0xffffff80
c00238f7:	0f b6 c0             	movzx  eax,al
c00238fa:	50                   	push   eax
c00238fb:	6a 0c                	push   0xc
c00238fd:	56                   	push   esi
c00238fe:	57                   	push   edi
c00238ff:	e8 0c ff ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023904:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023909:	0f b6 c3             	movzx  eax,bl
c002390c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023910:	ec                   	in     al,dx
c0023911:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023915:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002391a:	52                   	push   edx
c002391b:	6a 0c                	push   0xc
c002391d:	56                   	push   esi
c002391e:	57                   	push   edi
c002391f:	e8 ec fe ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023924:	83 c4 20             	add    esp,0x20
c0023927:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002392b:	eb 49                	jmp    c0023976 <IDE::read(unsigned char, unsigned char)+0xa6>
c002392d:	80 fb 07             	cmp    bl,0x7
c0023930:	77 12                	ja     c0023944 <IDE::read(unsigned char, unsigned char)+0x74>
c0023932:	0f b6 d2             	movzx  edx,dl
c0023935:	0f b6 c3             	movzx  eax,bl
c0023938:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023940:	89 c2                	mov    edx,eax
c0023942:	eb 31                	jmp    c0023975 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023944:	80 fb 0d             	cmp    bl,0xd
c0023947:	77 13                	ja     c002395c <IDE::read(unsigned char, unsigned char)+0x8c>
c0023949:	0f b6 d2             	movzx  edx,dl
c002394c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023953:	0f b6 d3             	movzx  edx,bl
c0023956:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002395a:	eb 19                	jmp    c0023975 <IDE::read(unsigned char, unsigned char)+0xa5>
c002395c:	31 c0                	xor    eax,eax
c002395e:	80 fb 15             	cmp    bl,0x15
c0023961:	77 13                	ja     c0023976 <IDE::read(unsigned char, unsigned char)+0xa6>
c0023963:	0f b6 d2             	movzx  edx,dl
c0023966:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c002396e:	0f b6 d3             	movzx  edx,bl
c0023971:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023975:	ec                   	in     al,dx
c0023976:	83 c4 1c             	add    esp,0x1c
c0023979:	5b                   	pop    ebx
c002397a:	5e                   	pop    esi
c002397b:	5f                   	pop    edi
c002397c:	5d                   	pop    ebp
c002397d:	c3                   	ret    

c002397e <IDE::waitInterrupt(unsigned char)>:
c002397e:	55                   	push   ebp
c002397f:	57                   	push   edi
c0023980:	56                   	push   esi
c0023981:	53                   	push   ebx
c0023982:	31 db                	xor    ebx,ebx
c0023984:	83 ec 0c             	sub    esp,0xc
c0023987:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002398b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023990:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023998:	89 e8                	mov    eax,ebp
c002399a:	84 c0                	test   al,al
c002399c:	75 34                	jne    c00239d2 <IDE::waitInterrupt(unsigned char)+0x54>
c002399e:	52                   	push   edx
c002399f:	6a 0c                	push   0xc
c00239a1:	56                   	push   esi
c00239a2:	57                   	push   edi
c00239a3:	e8 28 ff ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c00239a8:	83 c4 10             	add    esp,0x10
c00239ab:	a8 01                	test   al,0x1
c00239ad:	75 2b                	jne    c00239da <IDE::waitInterrupt(unsigned char)+0x5c>
c00239af:	f6 c3 04             	test   bl,0x4
c00239b2:	75 16                	jne    c00239ca <IDE::waitInterrupt(unsigned char)+0x4c>
c00239b4:	83 fb 32             	cmp    ebx,0x32
c00239b7:	7e 11                	jle    c00239ca <IDE::waitInterrupt(unsigned char)+0x4c>
c00239b9:	50                   	push   eax
c00239ba:	50                   	push   eax
c00239bb:	6a 00                	push   0x0
c00239bd:	68 80 96 98 00       	push   0x989680
c00239c2:	e8 dc ad ff ff       	call   c001e7a3 <nanoSleep(unsigned long long)>
c00239c7:	83 c4 10             	add    esp,0x10
c00239ca:	83 fb 3c             	cmp    ebx,0x3c
c00239cd:	74 0b                	je     c00239da <IDE::waitInterrupt(unsigned char)+0x5c>
c00239cf:	43                   	inc    ebx
c00239d0:	eb be                	jmp    c0023990 <IDE::waitInterrupt(unsigned char)+0x12>
c00239d2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00239da:	83 c4 0c             	add    esp,0xc
c00239dd:	89 e8                	mov    eax,ebp
c00239df:	5b                   	pop    ebx
c00239e0:	5e                   	pop    esi
c00239e1:	5f                   	pop    edi
c00239e2:	5d                   	pop    ebp
c00239e3:	c3                   	ret    

c00239e4 <ideChannel0IRQHandler(regs*, void*)>:
c00239e4:	83 ec 10             	sub    esp,0x10
c00239e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239eb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00239f2:	6a 07                	push   0x7
c00239f4:	6a 00                	push   0x0
c00239f6:	50                   	push   eax
c00239f7:	e8 d4 fe ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c00239fc:	83 c4 1c             	add    esp,0x1c
c00239ff:	c3                   	ret    

c0023a00 <ideChannel1IRQHandler(regs*, void*)>:
c0023a00:	83 ec 10             	sub    esp,0x10
c0023a03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a07:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023a0e:	6a 07                	push   0x7
c0023a10:	6a 01                	push   0x1
c0023a12:	50                   	push   eax
c0023a13:	e8 b8 fe ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023a18:	83 c4 1c             	add    esp,0x1c
c0023a1b:	c3                   	ret    

c0023a1c <IDE::enableIRQs(unsigned char, bool)>:
c0023a1c:	57                   	push   edi
c0023a1d:	56                   	push   esi
c0023a1e:	be 04 00 00 00       	mov    esi,0x4
c0023a23:	53                   	push   ebx
c0023a24:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023a29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023a2d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023a32:	0f 94 c0             	sete   al
c0023a35:	d1 e0                	shl    eax,1
c0023a37:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023a3e:	0f b6 c0             	movzx  eax,al
c0023a41:	50                   	push   eax
c0023a42:	6a 0c                	push   0xc
c0023a44:	57                   	push   edi
c0023a45:	53                   	push   ebx
c0023a46:	e8 c5 fd ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a4b:	83 c4 10             	add    esp,0x10
c0023a4e:	50                   	push   eax
c0023a4f:	6a 0c                	push   0xc
c0023a51:	57                   	push   edi
c0023a52:	53                   	push   ebx
c0023a53:	e8 78 fe ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023a58:	83 c4 10             	add    esp,0x10
c0023a5b:	4e                   	dec    esi
c0023a5c:	75 f0                	jne    c0023a4e <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023a5e:	5b                   	pop    ebx
c0023a5f:	5e                   	pop    esi
c0023a60:	5f                   	pop    edi
c0023a61:	c3                   	ret    

c0023a62 <IDE::open(int, int, void*)>:
c0023a62:	55                   	push   ebp
c0023a63:	57                   	push   edi
c0023a64:	56                   	push   esi
c0023a65:	53                   	push   ebx
c0023a66:	83 ec 1c             	sub    esp,0x1c
c0023a69:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023a6d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023a76:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023a7f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023a86:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023a8d:	0f 85 b0 02 00 00    	jne    c0023d43 <IDE::open(int, int, void*)+0x2e1>
c0023a93:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023a99:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023a9d:	83 e0 7f             	and    eax,0x7f
c0023aa0:	3c 05                	cmp    al,0x5
c0023aa2:	74 04                	je     c0023aa8 <IDE::open(int, int, void*)+0x46>
c0023aa4:	3c 0f                	cmp    al,0xf
c0023aa6:	75 32                	jne    c0023ada <IDE::open(int, int, void*)+0x78>
c0023aa8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023aae:	83 e0 fc             	and    eax,0xfffffffc
c0023ab1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023ab8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023abe:	83 e0 fc             	and    eax,0xfffffffc
c0023ac1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023ac8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023ace:	83 e0 fc             	and    eax,0xfffffffc
c0023ad1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023ad8:	eb 14                	jmp    c0023aee <IDE::open(int, int, void*)+0x8c>
c0023ada:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023ae4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023aee:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023af5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023afc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023b00:	89 c6                	mov    esi,eax
c0023b02:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b07:	c1 e6 10             	shl    esi,0x10
c0023b0a:	89 e8                	mov    eax,ebp
c0023b0c:	89 fa                	mov    edx,edi
c0023b0e:	c1 e0 0b             	shl    eax,0xb
c0023b11:	09 f0                	or     eax,esi
c0023b13:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023b1a:	c1 e6 08             	shl    esi,0x8
c0023b1d:	09 c6                	or     esi,eax
c0023b1f:	89 f0                	mov    eax,esi
c0023b21:	0d 08 00 00 80       	or     eax,0x80000008
c0023b26:	ef                   	out    dx,eax
c0023b27:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023b2c:	89 ca                	mov    edx,ecx
c0023b2e:	ed                   	in     eax,dx
c0023b2f:	c1 e8 10             	shr    eax,0x10
c0023b32:	3d ff ff 00 00       	cmp    eax,0xffff
c0023b37:	0f 84 f5 00 00 00    	je     c0023c32 <IDE::open(int, int, void*)+0x1d0>
c0023b3d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023b43:	89 fa                	mov    edx,edi
c0023b45:	89 f0                	mov    eax,esi
c0023b47:	ef                   	out    dx,eax
c0023b48:	b0 fe                	mov    al,0xfe
c0023b4a:	89 ca                	mov    edx,ecx
c0023b4c:	ee                   	out    dx,al
c0023b4d:	89 f0                	mov    eax,esi
c0023b4f:	89 fa                	mov    edx,edi
c0023b51:	ef                   	out    dx,eax
c0023b52:	89 ca                	mov    edx,ecx
c0023b54:	ed                   	in     eax,dx
c0023b55:	3c fe                	cmp    al,0xfe
c0023b57:	0f 85 a9 00 00 00    	jne    c0023c06 <IDE::open(int, int, void*)+0x1a4>
c0023b5d:	8b 15 68 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee68
c0023b63:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023b6a:	74 33                	je     c0023b9f <IDE::open(int, int, void*)+0x13d>
c0023b6c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023b72:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023b76:	40                   	inc    eax
c0023b77:	83 ec 0c             	sub    esp,0xc
c0023b7a:	0f b6 c0             	movzx  eax,al
c0023b7d:	50                   	push   eax
c0023b7e:	55                   	push   ebp
c0023b7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023b83:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023b89:	51                   	push   ecx
c0023b8a:	e8 91 47 ff ff       	call   c0018320 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023b8f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023b94:	83 c4 1c             	add    esp,0x1c
c0023b97:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023b9d:	eb 0a                	jmp    c0023ba9 <IDE::open(int, int, void*)+0x147>
c0023b9f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023ba9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023bb0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023bb7:	c1 e1 10             	shl    ecx,0x10
c0023bba:	c1 e0 08             	shl    eax,0x8
c0023bbd:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023bc2:	09 c1                	or     ecx,eax
c0023bc4:	89 fa                	mov    edx,edi
c0023bc6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023bcd:	c1 e0 0b             	shl    eax,0xb
c0023bd0:	09 c1                	or     ecx,eax
c0023bd2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023bd8:	89 c8                	mov    eax,ecx
c0023bda:	ef                   	out    dx,eax
c0023bdb:	be fc 0c 00 00       	mov    esi,0xcfc
c0023be0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023be6:	89 f2                	mov    edx,esi
c0023be8:	ee                   	out    dx,al
c0023be9:	89 c8                	mov    eax,ecx
c0023beb:	89 fa                	mov    edx,edi
c0023bed:	ef                   	out    dx,eax
c0023bee:	89 f2                	mov    edx,esi
c0023bf0:	ed                   	in     eax,dx
c0023bf1:	0f b6 c0             	movzx  eax,al
c0023bf4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023bfa:	74 46                	je     c0023c42 <IDE::open(int, int, void*)+0x1e0>
c0023bfc:	83 ec 0c             	sub    esp,0xc
c0023bff:	68 00 d5 02 c0       	push   0xc002d500
c0023c04:	eb 34                	jmp    c0023c3a <IDE::open(int, int, void*)+0x1d8>
c0023c06:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023c0f:	75 17                	jne    c0023c28 <IDE::open(int, int, void*)+0x1c6>
c0023c11:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023c16:	74 07                	je     c0023c1f <IDE::open(int, int, void*)+0x1bd>
c0023c18:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023c1d:	75 09                	jne    c0023c28 <IDE::open(int, int, void*)+0x1c6>
c0023c1f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023c26:	eb 1a                	jmp    c0023c42 <IDE::open(int, int, void*)+0x1e0>
c0023c28:	83 ec 0c             	sub    esp,0xc
c0023c2b:	68 08 d5 02 c0       	push   0xc002d508
c0023c30:	eb 08                	jmp    c0023c3a <IDE::open(int, int, void*)+0x1d8>
c0023c32:	83 ec 0c             	sub    esp,0xc
c0023c35:	68 39 d5 02 c0       	push   0xc002d539
c0023c3a:	e8 bc 6b ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0023c3f:	83 c4 10             	add    esp,0x10
c0023c42:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023c49:	79 1a                	jns    c0023c65 <IDE::open(int, int, void*)+0x203>
c0023c4b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023c51:	83 e0 fc             	and    eax,0xfffffffc
c0023c54:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023c5b:	83 c0 08             	add    eax,0x8
c0023c5e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023c65:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023c6b:	89 c2                	mov    edx,eax
c0023c6d:	83 e2 0f             	and    edx,0xf
c0023c70:	66 83 fa 08          	cmp    dx,0x8
c0023c74:	75 0a                	jne    c0023c80 <IDE::open(int, int, void*)+0x21e>
c0023c76:	83 e8 02             	sub    eax,0x2
c0023c79:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023c80:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023c86:	89 c2                	mov    edx,eax
c0023c88:	83 e2 0f             	and    edx,0xf
c0023c8b:	66 83 fa 08          	cmp    dx,0x8
c0023c8f:	75 0a                	jne    c0023c9b <IDE::open(int, int, void*)+0x239>
c0023c91:	83 e8 02             	sub    eax,0x2
c0023c94:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023c9b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023ca2:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023ca9:	89 d0                	mov    eax,edx
c0023cab:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023cae:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023cb2:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023cb6:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023cb9:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023cbe:	0f b6 c9             	movzx  ecx,cl
c0023cc1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023cc8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023ccb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023ccf:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023cd3:	8d 50 02             	lea    edx,[eax+0x2]
c0023cd6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023cdb:	0f b6 d2             	movzx  edx,dl
c0023cde:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023ce4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023ce7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023ceb:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023cef:	8d 48 03             	lea    ecx,[eax+0x3]
c0023cf2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023cf7:	0f b6 c9             	movzx  ecx,cl
c0023cfa:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023d00:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d03:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d07:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023d0b:	8d 50 04             	lea    edx,[eax+0x4]
c0023d0e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023d14:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d19:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023d20:	66 85 f6             	test   si,si
c0023d23:	74 3e                	je     c0023d63 <IDE::open(int, int, void*)+0x301>
c0023d25:	0f b6 d2             	movzx  edx,dl
c0023d28:	83 c0 05             	add    eax,0x5
c0023d2b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d2e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d32:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023d36:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023d3c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d41:	eb 20                	jmp    c0023d63 <IDE::open(int, int, void*)+0x301>
c0023d43:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d4d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d57:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023d5e:	e9 02 ff ff ff       	jmp    c0023c65 <IDE::open(int, int, void*)+0x203>
c0023d63:	52                   	push   edx
c0023d64:	52                   	push   edx
c0023d65:	6a 00                	push   0x0
c0023d67:	53                   	push   ebx
c0023d68:	e8 7d fa ff ff       	call   c00237ea <IDE::prepareInterrupt(unsigned char)>
c0023d6d:	59                   	pop    ecx
c0023d6e:	5e                   	pop    esi
c0023d6f:	6a 01                	push   0x1
c0023d71:	53                   	push   ebx
c0023d72:	e8 73 fa ff ff       	call   c00237ea <IDE::prepareInterrupt(unsigned char)>
c0023d77:	83 c4 0c             	add    esp,0xc
c0023d7a:	6a 00                	push   0x0
c0023d7c:	6a 00                	push   0x0
c0023d7e:	53                   	push   ebx
c0023d7f:	e8 98 fc ff ff       	call   c0023a1c <IDE::enableIRQs(unsigned char, bool)>
c0023d84:	83 c4 0c             	add    esp,0xc
c0023d87:	6a 00                	push   0x0
c0023d89:	6a 01                	push   0x1
c0023d8b:	53                   	push   ebx
c0023d8c:	e8 8b fc ff ff       	call   c0023a1c <IDE::enableIRQs(unsigned char, bool)>
c0023d91:	83 c4 10             	add    esp,0x10
c0023d94:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023d9b:	74 40                	je     c0023ddd <IDE::open(int, int, void*)+0x37b>
c0023d9d:	83 ec 0c             	sub    esp,0xc
c0023da0:	68 63 d5 02 c0       	push   0xc002d563
c0023da5:	e8 97 f0 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0023daa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023dad:	6a 01                	push   0x1
c0023daf:	68 e4 39 02 c0       	push   0xc00239e4
c0023db4:	6a 0e                	push   0xe
c0023db6:	53                   	push   ebx
c0023db7:	e8 2a 04 ff ff       	call   c00141e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023dbc:	83 c4 14             	add    esp,0x14
c0023dbf:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023dc5:	53                   	push   ebx
c0023dc6:	6a 01                	push   0x1
c0023dc8:	68 00 3a 02 c0       	push   0xc0023a00
c0023dcd:	6a 0f                	push   0xf
c0023dcf:	53                   	push   ebx
c0023dd0:	e8 11 04 ff ff       	call   c00141e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023dd5:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023ddb:	eb 4a                	jmp    c0023e27 <IDE::open(int, int, void*)+0x3c5>
c0023ddd:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023de7:	50                   	push   eax
c0023de8:	6a 0f                	push   0xf
c0023dea:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023df0:	68 7f d5 02 c0       	push   0xc002d57f
c0023df5:	e8 47 f0 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0023dfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023dfd:	6a 00                	push   0x0
c0023dff:	68 e4 39 02 c0       	push   0xc00239e4
c0023e04:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e0a:	53                   	push   ebx
c0023e0b:	e8 d6 03 ff ff       	call   c00141e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e10:	83 c4 14             	add    esp,0x14
c0023e13:	53                   	push   ebx
c0023e14:	6a 00                	push   0x0
c0023e16:	68 00 3a 02 c0       	push   0xc0023a00
c0023e1b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023e21:	53                   	push   ebx
c0023e22:	e8 bf 03 ff ff       	call   c00141e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e29:	83 c4 20             	add    esp,0x20
c0023e2c:	83 ec 0c             	sub    esp,0xc
c0023e2f:	53                   	push   ebx
c0023e30:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023e33:	83 c4 0c             	add    esp,0xc
c0023e36:	6a 07                	push   0x7
c0023e38:	6a 00                	push   0x0
c0023e3a:	53                   	push   ebx
c0023e3b:	e8 90 fa ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023e40:	83 c4 0c             	add    esp,0xc
c0023e43:	6a 07                	push   0x7
c0023e45:	6a 01                	push   0x1
c0023e47:	53                   	push   ebx
c0023e48:	e8 83 fa ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023e4d:	83 c4 0c             	add    esp,0xc
c0023e50:	6a 01                	push   0x1
c0023e52:	6a 00                	push   0x0
c0023e54:	53                   	push   ebx
c0023e55:	e8 c2 fb ff ff       	call   c0023a1c <IDE::enableIRQs(unsigned char, bool)>
c0023e5a:	83 c4 0c             	add    esp,0xc
c0023e5d:	6a 01                	push   0x1
c0023e5f:	6a 01                	push   0x1
c0023e61:	53                   	push   ebx
c0023e62:	e8 b5 fb ff ff       	call   c0023a1c <IDE::enableIRQs(unsigned char, bool)>
c0023e67:	83 c4 2c             	add    esp,0x2c
c0023e6a:	31 c0                	xor    eax,eax
c0023e6c:	5b                   	pop    ebx
c0023e6d:	5e                   	pop    esi
c0023e6e:	5f                   	pop    edi
c0023e6f:	5d                   	pop    ebp
c0023e70:	c3                   	ret    
c0023e71:	90                   	nop

c0023e72 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023e72:	55                   	push   ebp
c0023e73:	57                   	push   edi
c0023e74:	56                   	push   esi
c0023e75:	53                   	push   ebx
c0023e76:	83 ec 1c             	sub    esp,0x1c
c0023e79:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023e7d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e81:	8d 50 f8             	lea    edx,[eax-0x8]
c0023e84:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e88:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023e8c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023e90:	80 fa 03             	cmp    dl,0x3
c0023e93:	77 5d                	ja     c0023ef2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023e99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e9d:	0f b6 db             	movzx  ebx,bl
c0023ea0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023ea3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023ea7:	83 ca 80             	or     edx,0xffffff80
c0023eaa:	0f b6 d2             	movzx  edx,dl
c0023ead:	52                   	push   edx
c0023eae:	6a 0c                	push   0xc
c0023eb0:	53                   	push   ebx
c0023eb1:	56                   	push   esi
c0023eb2:	e8 59 f9 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eb7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023ebc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ec0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023ec4:	0f b6 c0             	movzx  eax,al
c0023ec7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023ecb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023ecd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023ed2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023ed6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023eda:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023ede:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023ee6:	83 c4 2c             	add    esp,0x2c
c0023ee9:	5b                   	pop    ebx
c0023eea:	5e                   	pop    esi
c0023eeb:	5f                   	pop    edi
c0023eec:	5d                   	pop    ebp
c0023eed:	e9 1e f9 ff ff       	jmp    c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ef2:	3c 07                	cmp    al,0x7
c0023ef4:	77 10                	ja     c0023f06 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023ef6:	0f b6 db             	movzx  ebx,bl
c0023ef9:	0f b6 d0             	movzx  edx,al
c0023efc:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023f04:	eb 2d                	jmp    c0023f33 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f06:	3c 0d                	cmp    al,0xd
c0023f08:	77 13                	ja     c0023f1d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023f0a:	0f b6 db             	movzx  ebx,bl
c0023f0d:	0f b6 c0             	movzx  eax,al
c0023f10:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023f17:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023f1b:	eb 16                	jmp    c0023f33 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f1d:	3c 15                	cmp    al,0x15
c0023f1f:	77 14                	ja     c0023f35 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023f21:	0f b6 db             	movzx  ebx,bl
c0023f24:	0f b6 c0             	movzx  eax,al
c0023f27:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023f2f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023f33:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f35:	83 c4 1c             	add    esp,0x1c
c0023f38:	5b                   	pop    ebx
c0023f39:	5e                   	pop    esi
c0023f3a:	5f                   	pop    edi
c0023f3b:	5d                   	pop    ebp
c0023f3c:	c3                   	ret    
c0023f3d:	90                   	nop

c0023f3e <IDE::detect()>:
c0023f3e:	55                   	push   ebp
c0023f3f:	57                   	push   edi
c0023f40:	56                   	push   esi
c0023f41:	53                   	push   ebx
c0023f42:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023f48:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023f4f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023f56:	0f 85 be 02 00 00    	jne    c002421a <IDE::detect()+0x2dc>
c0023f5c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023f63:	31 f6                	xor    esi,esi
c0023f65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023f6d:	31 ed                	xor    ebp,ebp
c0023f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023f73:	c1 e0 06             	shl    eax,0x6
c0023f76:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023f7e:	89 e8                	mov    eax,ebp
c0023f80:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023f84:	c1 e0 04             	shl    eax,0x4
c0023f87:	83 c8 a0             	or     eax,0xffffffa0
c0023f8a:	0f b6 c0             	movzx  eax,al
c0023f8d:	50                   	push   eax
c0023f8e:	6a 06                	push   0x6
c0023f90:	56                   	push   esi
c0023f91:	53                   	push   ebx
c0023f92:	e8 79 f8 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f97:	83 c4 0c             	add    esp,0xc
c0023f9a:	6a 0c                	push   0xc
c0023f9c:	56                   	push   esi
c0023f9d:	53                   	push   ebx
c0023f9e:	e8 2d f9 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023fa3:	83 c4 0c             	add    esp,0xc
c0023fa6:	6a 0c                	push   0xc
c0023fa8:	56                   	push   esi
c0023fa9:	53                   	push   ebx
c0023faa:	e8 21 f9 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023faf:	83 c4 0c             	add    esp,0xc
c0023fb2:	6a 0c                	push   0xc
c0023fb4:	56                   	push   esi
c0023fb5:	53                   	push   ebx
c0023fb6:	e8 15 f9 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023fbb:	83 c4 0c             	add    esp,0xc
c0023fbe:	6a 0c                	push   0xc
c0023fc0:	56                   	push   esi
c0023fc1:	53                   	push   ebx
c0023fc2:	e8 09 f9 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023fc7:	68 ec 00 00 00       	push   0xec
c0023fcc:	6a 07                	push   0x7
c0023fce:	56                   	push   esi
c0023fcf:	53                   	push   ebx
c0023fd0:	e8 3b f8 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fd5:	83 c4 1c             	add    esp,0x1c
c0023fd8:	6a 0c                	push   0xc
c0023fda:	56                   	push   esi
c0023fdb:	53                   	push   ebx
c0023fdc:	e8 ef f8 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023fe1:	83 c4 0c             	add    esp,0xc
c0023fe4:	6a 0c                	push   0xc
c0023fe6:	56                   	push   esi
c0023fe7:	53                   	push   ebx
c0023fe8:	e8 e3 f8 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023fed:	83 c4 0c             	add    esp,0xc
c0023ff0:	6a 0c                	push   0xc
c0023ff2:	56                   	push   esi
c0023ff3:	53                   	push   ebx
c0023ff4:	e8 d7 f8 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0023ff9:	83 c4 0c             	add    esp,0xc
c0023ffc:	6a 0c                	push   0xc
c0023ffe:	56                   	push   esi
c0023fff:	53                   	push   ebx
c0024000:	e8 cb f8 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0024005:	83 c4 0c             	add    esp,0xc
c0024008:	6a 0c                	push   0xc
c002400a:	56                   	push   esi
c002400b:	53                   	push   ebx
c002400c:	e8 bf f8 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0024011:	83 c4 10             	add    esp,0x10
c0024014:	84 c0                	test   al,al
c0024016:	0f 84 8b 01 00 00    	je     c00241a7 <IDE::detect()+0x269>
c002401c:	31 ff                	xor    edi,edi
c002401e:	50                   	push   eax
c002401f:	6a 0c                	push   0xc
c0024021:	56                   	push   esi
c0024022:	53                   	push   ebx
c0024023:	e8 a8 f8 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0024028:	83 c4 10             	add    esp,0x10
c002402b:	a8 01                	test   al,0x1
c002402d:	0f 85 8e 01 00 00    	jne    c00241c1 <IDE::detect()+0x283>
c0024033:	84 c0                	test   al,al
c0024035:	78 04                	js     c002403b <IDE::detect()+0xfd>
c0024037:	a8 08                	test   al,0x8
c0024039:	75 27                	jne    c0024062 <IDE::detect()+0x124>
c002403b:	47                   	inc    edi
c002403c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024042:	7e da                	jle    c002401e <IDE::detect()+0xe0>
c0024044:	50                   	push   eax
c0024045:	50                   	push   eax
c0024046:	6a 00                	push   0x0
c0024048:	68 40 4b 4c 00       	push   0x4c4b40
c002404d:	e8 51 a7 ff ff       	call   c001e7a3 <nanoSleep(unsigned long long)>
c0024052:	83 c4 10             	add    esp,0x10
c0024055:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002405b:	75 c1                	jne    c002401e <IDE::detect()+0xe0>
c002405d:	e9 5f 01 00 00       	jmp    c00241c1 <IDE::detect()+0x283>
c0024062:	31 c9                	xor    ecx,ecx
c0024064:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0024068:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002406c:	83 ec 0c             	sub    esp,0xc
c002406f:	68 80 00 00 00       	push   0x80
c0024074:	57                   	push   edi
c0024075:	6a 00                	push   0x0
c0024077:	56                   	push   esi
c0024078:	53                   	push   ebx
c0024079:	e8 f4 fd ff ff       	call   c0023e72 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002407e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024083:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024087:	89 d1                	mov    ecx,edx
c0024089:	c1 e0 06             	shl    eax,0x6
c002408c:	01 d8                	add    eax,ebx
c002408e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0024095:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002409c:	89 f2                	mov    edx,esi
c002409e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00240a4:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00240a8:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00240ae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00240b2:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00240b9:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00240c1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00240c8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00240d0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00240d6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00240dd:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00240e3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00240e7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00240eb:	83 c4 20             	add    esp,0x20
c00240ee:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00240f1:	83 c0 02             	add    eax,0x2
c00240f4:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00240fa:	83 c7 02             	add    edi,0x2
c00240fd:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024100:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0024106:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002410a:	75 e2                	jne    c00240ee <IDE::detect()+0x1b0>
c002410c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024110:	c1 e0 06             	shl    eax,0x6
c0024113:	01 d8                	add    eax,ebx
c0024115:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002411b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024122:	66 c1 ea 09          	shr    dx,0x9
c0024126:	83 e2 01             	and    edx,0x1
c0024129:	84 c9                	test   cl,cl
c002412b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024131:	75 2f                	jne    c0024162 <IDE::detect()+0x224>
c0024133:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0024139:	85 c0                	test   eax,eax
c002413b:	74 66                	je     c00241a3 <IDE::detect()+0x265>
c002413d:	50                   	push   eax
c002413e:	55                   	push   ebp
c002413f:	56                   	push   esi
c0024140:	68 9b d5 02 c0       	push   0xc002d59b
c0024145:	e8 f7 ec fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c002414a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024151:	e8 50 b7 fe ff       	call   c000f8a6 <malloc>
c0024156:	89 c7                	mov    edi,eax
c0024158:	89 04 24             	mov    DWORD PTR [esp],eax
c002415b:	e8 78 06 00 00       	call   c00247d8 <ATA::ATA()>
c0024160:	eb 28                	jmp    c002418a <IDE::detect()+0x24c>
c0024162:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0024168:	55                   	push   ebp
c0024169:	56                   	push   esi
c002416a:	68 ca d5 02 c0       	push   0xc002d5ca
c002416f:	e8 cd ec fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0024174:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002417b:	e8 26 b7 fe ff       	call   c000f8a6 <malloc>
c0024180:	89 c7                	mov    edi,eax
c0024182:	89 04 24             	mov    DWORD PTR [esp],eax
c0024185:	e8 8e 0c 00 00       	call   c0024e18 <ATAPI::ATAPI()>
c002418a:	5a                   	pop    edx
c002418b:	59                   	pop    ecx
c002418c:	57                   	push   edi
c002418d:	53                   	push   ebx
c002418e:	e8 cf 00 ff ff       	call   c0014262 <Device::addChild(Device*)>
c0024193:	8b 07                	mov    eax,DWORD PTR [edi]
c0024195:	53                   	push   ebx
c0024196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002419a:	6a 00                	push   0x0
c002419c:	57                   	push   edi
c002419d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00241a0:	83 c4 20             	add    esp,0x20
c00241a3:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00241a7:	4d                   	dec    ebp
c00241a8:	74 0a                	je     c00241b4 <IDE::detect()+0x276>
c00241aa:	bd 01 00 00 00       	mov    ebp,0x1
c00241af:	e9 bb fd ff ff       	jmp    c0023f6f <IDE::detect()+0x31>
c00241b4:	4e                   	dec    esi
c00241b5:	74 63                	je     c002421a <IDE::detect()+0x2dc>
c00241b7:	be 01 00 00 00       	mov    esi,0x1
c00241bc:	e9 ac fd ff ff       	jmp    c0023f6d <IDE::detect()+0x2f>
c00241c1:	50                   	push   eax
c00241c2:	6a 04                	push   0x4
c00241c4:	56                   	push   esi
c00241c5:	53                   	push   ebx
c00241c6:	e8 05 f7 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c00241cb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00241cf:	83 c4 0c             	add    esp,0xc
c00241d2:	6a 05                	push   0x5
c00241d4:	56                   	push   esi
c00241d5:	53                   	push   ebx
c00241d6:	e8 f5 f6 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c00241db:	83 c4 10             	add    esp,0x10
c00241de:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00241e2:	80 fa 14             	cmp    dl,0x14
c00241e5:	75 04                	jne    c00241eb <IDE::detect()+0x2ad>
c00241e7:	3c eb                	cmp    al,0xeb
c00241e9:	eb 07                	jmp    c00241f2 <IDE::detect()+0x2b4>
c00241eb:	3c 96                	cmp    al,0x96
c00241ed:	75 b8                	jne    c00241a7 <IDE::detect()+0x269>
c00241ef:	80 fa 69             	cmp    dl,0x69
c00241f2:	75 b3                	jne    c00241a7 <IDE::detect()+0x269>
c00241f4:	68 a1 00 00 00       	push   0xa1
c00241f9:	6a 07                	push   0x7
c00241fb:	56                   	push   esi
c00241fc:	53                   	push   ebx
c00241fd:	e8 0e f6 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024202:	5f                   	pop    edi
c0024203:	58                   	pop    eax
c0024204:	6a 00                	push   0x0
c0024206:	68 40 42 0f 00       	push   0xf4240
c002420b:	e8 93 a5 ff ff       	call   c001e7a3 <nanoSleep(unsigned long long)>
c0024210:	83 c4 10             	add    esp,0x10
c0024213:	b1 01                	mov    cl,0x1
c0024215:	e9 4a fe ff ff       	jmp    c0024064 <IDE::detect()+0x126>
c002421a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024220:	5b                   	pop    ebx
c0024221:	5e                   	pop    esi
c0024222:	5f                   	pop    edi
c0024223:	5d                   	pop    ebp
c0024224:	c3                   	ret    
c0024225:	90                   	nop

c0024226 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0024226:	55                   	push   ebp
c0024227:	57                   	push   edi
c0024228:	56                   	push   esi
c0024229:	53                   	push   ebx
c002422a:	83 ec 1c             	sub    esp,0x1c
c002422d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024231:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024235:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0024239:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002423d:	88 c3                	mov    bl,al
c002423f:	84 c0                	test   al,al
c0024241:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024245:	0f 84 67 01 00 00    	je     c00243b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002424b:	83 ec 0c             	sub    esp,0xc
c002424e:	68 fb d5 02 c0       	push   0xc002d5fb
c0024253:	e8 e9 eb fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0024258:	83 c4 10             	add    esp,0x10
c002425b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002425f:	3c 01                	cmp    al,0x1
c0024261:	75 17                	jne    c002427a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024263:	83 ec 0c             	sub    esp,0xc
c0024266:	b3 13                	mov    bl,0x13
c0024268:	68 07 d6 02 c0       	push   0xc002d607
c002426d:	e8 cf eb fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0024272:	83 c4 10             	add    esp,0x10
c0024275:	e9 25 01 00 00       	jmp    c002439f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002427a:	3c 02                	cmp    al,0x2
c002427c:	0f 85 ef 00 00 00    	jne    c0024371 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024282:	d1 e6                	shl    esi,1
c0024284:	09 ee                	or     esi,ebp
c0024286:	52                   	push   edx
c0024287:	89 f0                	mov    eax,esi
c0024289:	6a 01                	push   0x1
c002428b:	0f b6 f0             	movzx  esi,al
c002428e:	c1 e6 06             	shl    esi,0x6
c0024291:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024299:	50                   	push   eax
c002429a:	57                   	push   edi
c002429b:	e8 30 f6 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c00242a0:	83 c4 10             	add    esp,0x10
c00242a3:	89 c6                	mov    esi,eax
c00242a5:	a8 01                	test   al,0x1
c00242a7:	74 12                	je     c00242bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00242a9:	83 ec 0c             	sub    esp,0xc
c00242ac:	b3 07                	mov    bl,0x7
c00242ae:	68 1c d6 02 c0       	push   0xc002d61c
c00242b3:	e8 89 eb fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00242b8:	83 c4 10             	add    esp,0x10
c00242bb:	f7 c6 02 00 00 00    	test   esi,0x2
c00242c1:	74 12                	je     c00242d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00242c3:	83 ec 0c             	sub    esp,0xc
c00242c6:	b3 03                	mov    bl,0x3
c00242c8:	68 3a d6 02 c0       	push   0xc002d63a
c00242cd:	e8 6f eb fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00242d2:	83 c4 10             	add    esp,0x10
c00242d5:	f7 c6 04 00 00 00    	test   esi,0x4
c00242db:	74 12                	je     c00242ef <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00242dd:	83 ec 0c             	sub    esp,0xc
c00242e0:	b3 14                	mov    bl,0x14
c00242e2:	68 5a d6 02 c0       	push   0xc002d65a
c00242e7:	e8 55 eb fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00242ec:	83 c4 10             	add    esp,0x10
c00242ef:	f7 c6 08 00 00 00    	test   esi,0x8
c00242f5:	74 12                	je     c0024309 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00242f7:	83 ec 0c             	sub    esp,0xc
c00242fa:	b3 03                	mov    bl,0x3
c00242fc:	68 3a d6 02 c0       	push   0xc002d63a
c0024301:	e8 3b eb fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0024306:	83 c4 10             	add    esp,0x10
c0024309:	f7 c6 10 00 00 00    	test   esi,0x10
c002430f:	74 12                	je     c0024323 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024311:	83 ec 0c             	sub    esp,0xc
c0024314:	b3 15                	mov    bl,0x15
c0024316:	68 72 d6 02 c0       	push   0xc002d672
c002431b:	e8 21 eb fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0024320:	83 c4 10             	add    esp,0x10
c0024323:	f7 c6 20 00 00 00    	test   esi,0x20
c0024329:	74 12                	je     c002433d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002432b:	83 ec 0c             	sub    esp,0xc
c002432e:	b3 03                	mov    bl,0x3
c0024330:	68 3a d6 02 c0       	push   0xc002d63a
c0024335:	e8 07 eb fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c002433a:	83 c4 10             	add    esp,0x10
c002433d:	f7 c6 40 00 00 00    	test   esi,0x40
c0024343:	74 12                	je     c0024357 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0024345:	83 ec 0c             	sub    esp,0xc
c0024348:	b3 16                	mov    bl,0x16
c002434a:	68 8c d6 02 c0       	push   0xc002d68c
c002434f:	e8 ed ea fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0024354:	83 c4 10             	add    esp,0x10
c0024357:	89 f0                	mov    eax,esi
c0024359:	84 c0                	test   al,al
c002435b:	79 42                	jns    c002439f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002435d:	83 ec 0c             	sub    esp,0xc
c0024360:	b3 0d                	mov    bl,0xd
c0024362:	68 ad d6 02 c0       	push   0xc002d6ad
c0024367:	e8 d5 ea fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c002436c:	83 c4 10             	add    esp,0x10
c002436f:	eb 2e                	jmp    c002439f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024371:	3c 03                	cmp    al,0x3
c0024373:	75 14                	jne    c0024389 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0024375:	83 ec 0c             	sub    esp,0xc
c0024378:	b3 17                	mov    bl,0x17
c002437a:	68 c1 d6 02 c0       	push   0xc002d6c1
c002437f:	e8 bd ea fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0024384:	83 c4 10             	add    esp,0x10
c0024387:	eb 16                	jmp    c002439f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024389:	3c 04                	cmp    al,0x4
c002438b:	75 12                	jne    c002439f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002438d:	83 ec 0c             	sub    esp,0xc
c0024390:	b3 08                	mov    bl,0x8
c0024392:	68 d7 d6 02 c0       	push   0xc002d6d7
c0024397:	e8 a5 ea fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c002439c:	83 c4 10             	add    esp,0x10
c002439f:	50                   	push   eax
c00243a0:	50                   	push   eax
c00243a1:	0f b6 c3             	movzx  eax,bl
c00243a4:	50                   	push   eax
c00243a5:	68 ef d6 02 c0       	push   0xc002d6ef
c00243aa:	e8 92 ea fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00243af:	83 c4 10             	add    esp,0x10
c00243b2:	83 c4 1c             	add    esp,0x1c
c00243b5:	88 d8                	mov    al,bl
c00243b7:	5b                   	pop    ebx
c00243b8:	5e                   	pop    esi
c00243b9:	5f                   	pop    edi
c00243ba:	5d                   	pop    ebp
c00243bb:	c3                   	ret    

c00243bc <IDE::polling(unsigned char, unsigned int)>:
c00243bc:	57                   	push   edi
c00243bd:	56                   	push   esi
c00243be:	53                   	push   ebx
c00243bf:	bb 04 00 00 00       	mov    ebx,0x4
c00243c4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00243c8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00243cd:	52                   	push   edx
c00243ce:	6a 0c                	push   0xc
c00243d0:	56                   	push   esi
c00243d1:	57                   	push   edi
c00243d2:	e8 f9 f4 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c00243d7:	83 c4 10             	add    esp,0x10
c00243da:	4b                   	dec    ebx
c00243db:	75 f0                	jne    c00243cd <IDE::polling(unsigned char, unsigned int)+0x11>
c00243dd:	bb a0 86 01 00       	mov    ebx,0x186a0
c00243e2:	50                   	push   eax
c00243e3:	6a 0c                	push   0xc
c00243e5:	56                   	push   esi
c00243e6:	57                   	push   edi
c00243e7:	e8 e4 f4 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c00243ec:	83 c4 10             	add    esp,0x10
c00243ef:	a8 01                	test   al,0x1
c00243f1:	74 12                	je     c0024405 <IDE::polling(unsigned char, unsigned int)+0x49>
c00243f3:	83 ec 0c             	sub    esp,0xc
c00243f6:	68 09 d7 02 c0       	push   0xc002d709
c00243fb:	e8 41 ea fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0024400:	83 c4 10             	add    esp,0x10
c0024403:	eb 17                	jmp    c002441c <IDE::polling(unsigned char, unsigned int)+0x60>
c0024405:	a8 20                	test   al,0x20
c0024407:	75 0f                	jne    c0024418 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024409:	4b                   	dec    ebx
c002440a:	74 10                	je     c002441c <IDE::polling(unsigned char, unsigned int)+0x60>
c002440c:	84 c0                	test   al,al
c002440e:	78 d2                	js     c00243e2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024410:	a8 08                	test   al,0x8
c0024412:	74 ce                	je     c00243e2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024414:	31 c0                	xor    eax,eax
c0024416:	eb 06                	jmp    c002441e <IDE::polling(unsigned char, unsigned int)+0x62>
c0024418:	b0 01                	mov    al,0x1
c002441a:	eb 02                	jmp    c002441e <IDE::polling(unsigned char, unsigned int)+0x62>
c002441c:	b0 02                	mov    al,0x2
c002441e:	5b                   	pop    ebx
c002441f:	5e                   	pop    esi
c0024420:	5f                   	pop    edi
c0024421:	c3                   	ret    

c0024422 <SATABus::close(int, int, void*)>:
c0024422:	31 c0                	xor    eax,eax
c0024424:	c3                   	ret    
c0024425:	90                   	nop

c0024426 <SATABus::detect()>:
c0024426:	c3                   	ret    
c0024427:	90                   	nop

c0024428 <SATABus::SATABus()>:
c0024428:	83 ec 0c             	sub    esp,0xc
c002442b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002442f:	83 ec 08             	sub    esp,0x8
c0024432:	68 4c d7 02 c0       	push   0xc002d74c
c0024437:	50                   	push   eax
c0024438:	e8 bf 01 ff ff       	call   c00145fc <HardDiskController::HardDiskController(char const*)>
c002443d:	83 c4 10             	add    esp,0x10
c0024440:	ba 08 d8 02 c0       	mov    edx,0xc002d808
c0024445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024449:	89 10                	mov    DWORD PTR [eax],edx
c002444b:	83 ec 0c             	sub    esp,0xc
c002444e:	6a 50                	push   0x50
c0024450:	e8 a2 bb fe ff       	call   c000fff7 <Phys::allocateContiguousPages(int)>
c0024455:	83 c4 10             	add    esp,0x10
c0024458:	89 c2                	mov    edx,eax
c002445a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002445e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024464:	83 ec 0c             	sub    esp,0xc
c0024467:	6a 50                	push   0x50
c0024469:	e8 cd d5 fe ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c002446e:	83 c4 10             	add    esp,0x10
c0024471:	89 c2                	mov    edx,eax
c0024473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024477:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002447d:	a1 f0 ef 02 c0       	mov    eax,ds:0xc002eff0
c0024482:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024486:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002448c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024490:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024496:	83 ec 0c             	sub    esp,0xc
c0024499:	6a 03                	push   0x3
c002449b:	6a 50                	push   0x50
c002449d:	51                   	push   ecx
c002449e:	52                   	push   edx
c002449f:	50                   	push   eax
c00244a0:	e8 c3 e0 fe ff       	call   c0012568 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00244a5:	83 c4 20             	add    esp,0x20
c00244a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ac:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00244b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00244bc:	83 ec 04             	sub    esp,0x4
c00244bf:	52                   	push   edx
c00244c0:	50                   	push   eax
c00244c1:	68 70 d7 02 c0       	push   0xc002d770
c00244c6:	e8 76 e9 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00244cb:	83 c4 10             	add    esp,0x10
c00244ce:	90                   	nop
c00244cf:	83 c4 0c             	add    esp,0xc
c00244d2:	c3                   	ret    
c00244d3:	90                   	nop

c00244d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00244d4:	83 ec 0c             	sub    esp,0xc
c00244d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244db:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00244de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00244e1:	09 c2                	or     edx,eax
c00244e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00244ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c00244ef:	31 c0                	xor    eax,eax
c00244f1:	c1 e9 08             	shr    ecx,0x8
c00244f4:	83 e1 0f             	and    ecx,0xf
c00244f7:	39 c8                	cmp    eax,ecx
c00244f9:	74 0a                	je     c0024505 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00244fb:	f6 c2 01             	test   dl,0x1
c00244fe:	74 18                	je     c0024518 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024500:	d1 ea                	shr    edx,1
c0024502:	40                   	inc    eax
c0024503:	eb f2                	jmp    c00244f7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024505:	83 ec 0c             	sub    esp,0xc
c0024508:	68 94 d7 02 c0       	push   0xc002d794
c002450d:	e8 e9 62 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0024512:	83 c4 10             	add    esp,0x10
c0024515:	83 c8 ff             	or     eax,0xffffffff
c0024518:	83 c4 0c             	add    esp,0xc
c002451b:	c3                   	ret    

c002451c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002451c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024520:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024523:	89 c2                	mov    edx,eax
c0024525:	c1 ea 08             	shr    edx,0x8
c0024528:	83 e2 0f             	and    edx,0xf
c002452b:	fe ca                	dec    dl
c002452d:	75 31                	jne    c0024560 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002452f:	83 e0 0f             	and    eax,0xf
c0024532:	3c 03                	cmp    al,0x3
c0024534:	75 2a                	jne    c0024560 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024536:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0024539:	b8 02 00 00 00       	mov    eax,0x2
c002453e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024544:	74 1c                	je     c0024562 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024546:	b8 04 00 00 00       	mov    eax,0x4
c002454b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024551:	74 0f                	je     c0024562 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024553:	31 c0                	xor    eax,eax
c0024555:	83 fa 03             	cmp    edx,0x3
c0024558:	0f 94 c0             	sete   al
c002455b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002455f:	c3                   	ret    
c0024560:	31 c0                	xor    eax,eax
c0024562:	c3                   	ret    
c0024563:	90                   	nop

c0024564 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024568:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002456b:	0f ba e2 0f          	bt     edx,0xf
c002456f:	72 f7                	jb     c0024568 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024571:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024574:	83 ca 10             	or     edx,0x10
c0024577:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002457a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002457d:	83 ca 01             	or     edx,0x1
c0024580:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024583:	c3                   	ret    

c0024584 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0024584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024588:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002458b:	83 e2 fe             	and    edx,0xfffffffe
c002458e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024591:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024594:	83 e2 ef             	and    edx,0xffffffef
c0024597:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002459a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002459d:	0f ba e2 0e          	bt     edx,0xe
c00245a1:	72 f7                	jb     c002459a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00245a3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245a6:	0f ba e2 0f          	bt     edx,0xf
c00245aa:	72 ee                	jb     c002459a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00245ac:	c3                   	ret    
c00245ad:	90                   	nop

c00245ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00245ae:	55                   	push   ebp
c00245af:	57                   	push   edi
c00245b0:	56                   	push   esi
c00245b1:	53                   	push   ebx
c00245b2:	83 ec 1c             	sub    esp,0x1c
c00245b5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00245b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00245bd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00245c1:	53                   	push   ebx
c00245c2:	89 fd                	mov    ebp,edi
c00245c4:	56                   	push   esi
c00245c5:	c1 e5 0a             	shl    ebp,0xa
c00245c8:	e8 b7 ff ff ff       	call   c0024584 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00245cd:	83 ec 0c             	sub    esp,0xc
c00245d0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00245d6:	01 e8                	add    eax,ebp
c00245d8:	89 03                	mov    DWORD PTR [ebx],eax
c00245da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00245dc:	68 00 04 00 00       	push   0x400
c00245e1:	6a 00                	push   0x0
c00245e3:	50                   	push   eax
c00245e4:	e8 83 c1 fd ff       	call   c000076c <memset>
c00245e9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00245ef:	89 fa                	mov    edx,edi
c00245f1:	01 e8                	add    eax,ebp
c00245f3:	c1 e7 0d             	shl    edi,0xd
c00245f6:	89 03                	mov    DWORD PTR [ebx],eax
c00245f8:	c1 e2 08             	shl    edx,0x8
c00245fb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024602:	81 c2 00 80 00 00    	add    edx,0x8000
c0024608:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002460c:	89 d0                	mov    eax,edx
c002460e:	83 c4 1c             	add    esp,0x1c
c0024611:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024617:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002461a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002461d:	68 00 01 00 00       	push   0x100
c0024622:	6a 00                	push   0x0
c0024624:	50                   	push   eax
c0024625:	e8 42 c1 fd ff       	call   c000076c <memset>
c002462a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002462e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024634:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002463a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002463e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024641:	83 c4 10             	add    esp,0x10
c0024644:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002464b:	31 ff                	xor    edi,edi
c002464d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024653:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002465d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024663:	83 c5 20             	add    ebp,0x20
c0024666:	01 f8                	add    eax,edi
c0024668:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002466b:	52                   	push   edx
c002466c:	68 00 01 00 00       	push   0x100
c0024671:	6a 00                	push   0x0
c0024673:	50                   	push   eax
c0024674:	e8 f3 c0 fd ff       	call   c000076c <memset>
c0024679:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002467d:	83 c4 10             	add    esp,0x10
c0024680:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024686:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002468d:	01 f8                	add    eax,edi
c002468f:	81 c7 00 01 00 00    	add    edi,0x100
c0024695:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024698:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002469e:	75 b3                	jne    c0024653 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00246a0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00246a4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00246a8:	83 c4 1c             	add    esp,0x1c
c00246ab:	5b                   	pop    ebx
c00246ac:	5e                   	pop    esi
c00246ad:	5f                   	pop    edi
c00246ae:	5d                   	pop    ebp
c00246af:	e9 b0 fe ff ff       	jmp    c0024564 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00246b4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00246b4:	55                   	push   ebp
c00246b5:	57                   	push   edi
c00246b6:	56                   	push   esi
c00246b7:	53                   	push   ebx
c00246b8:	31 db                	xor    ebx,ebx
c00246ba:	83 ec 0c             	sub    esp,0xc
c00246bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00246c1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00246c5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00246c8:	f7 c7 01 00 00 00    	test   edi,0x1
c00246ce:	0f 84 aa 00 00 00    	je     c002477e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00246d4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00246d8:	89 d8                	mov    eax,ebx
c00246da:	c1 e0 07             	shl    eax,0x7
c00246dd:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00246e4:	55                   	push   ebp
c00246e5:	56                   	push   esi
c00246e6:	e8 31 fe ff ff       	call   c002451c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00246eb:	5a                   	pop    edx
c00246ec:	83 f8 01             	cmp    eax,0x1
c00246ef:	59                   	pop    ecx
c00246f0:	75 30                	jne    c0024722 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00246f2:	50                   	push   eax
c00246f3:	50                   	push   eax
c00246f4:	53                   	push   ebx
c00246f5:	68 b9 d7 02 c0       	push   0xc002d7b9
c00246fa:	e8 42 e7 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00246ff:	83 c4 0c             	add    esp,0xc
c0024702:	53                   	push   ebx
c0024703:	55                   	push   ebp
c0024704:	56                   	push   esi
c0024705:	e8 a4 fe ff ff       	call   c00245ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002470a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024711:	e8 90 b1 fe ff       	call   c000f8a6 <malloc>
c0024716:	89 c5                	mov    ebp,eax
c0024718:	89 04 24             	mov    DWORD PTR [esp],eax
c002471b:	e8 5c 0d 00 00       	call   c002547c <SATA::SATA()>
c0024720:	eb 33                	jmp    c0024755 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024722:	83 f8 04             	cmp    eax,0x4
c0024725:	75 47                	jne    c002476e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024727:	50                   	push   eax
c0024728:	50                   	push   eax
c0024729:	53                   	push   ebx
c002472a:	68 d0 d7 02 c0       	push   0xc002d7d0
c002472f:	e8 0d e7 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0024734:	83 c4 0c             	add    esp,0xc
c0024737:	53                   	push   ebx
c0024738:	55                   	push   ebp
c0024739:	56                   	push   esi
c002473a:	e8 6f fe ff ff       	call   c00245ae <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002473f:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024746:	e8 5b b1 fe ff       	call   c000f8a6 <malloc>
c002474b:	89 c5                	mov    ebp,eax
c002474d:	89 04 24             	mov    DWORD PTR [esp],eax
c0024750:	e8 d3 10 00 00       	call   c0025828 <SATAPI::SATAPI()>
c0024755:	5a                   	pop    edx
c0024756:	59                   	pop    ecx
c0024757:	55                   	push   ebp
c0024758:	56                   	push   esi
c0024759:	e8 04 fb fe ff       	call   c0014262 <Device::addChild(Device*)>
c002475e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024761:	56                   	push   esi
c0024762:	6a 00                	push   0x0
c0024764:	53                   	push   ebx
c0024765:	55                   	push   ebp
c0024766:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024769:	83 c4 20             	add    esp,0x20
c002476c:	eb 10                	jmp    c002477e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002476e:	50                   	push   eax
c002476f:	50                   	push   eax
c0024770:	53                   	push   ebx
c0024771:	68 e9 d7 02 c0       	push   0xc002d7e9
c0024776:	e8 c6 e6 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c002477b:	83 c4 10             	add    esp,0x10
c002477e:	d1 ef                	shr    edi,1
c0024780:	43                   	inc    ebx
c0024781:	83 fb 20             	cmp    ebx,0x20
c0024784:	0f 85 3e ff ff ff    	jne    c00246c8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002478a:	83 c4 0c             	add    esp,0xc
c002478d:	5b                   	pop    ebx
c002478e:	5e                   	pop    esi
c002478f:	5f                   	pop    edi
c0024790:	5d                   	pop    ebp
c0024791:	c3                   	ret    

c0024792 <SATABus::open(int, int, void*)>:
c0024792:	83 ec 14             	sub    esp,0x14
c0024795:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024799:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002479f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00247a5:	52                   	push   edx
c00247a6:	50                   	push   eax
c00247a7:	e8 08 ff ff ff       	call   c00246b4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00247ac:	31 c0                	xor    eax,eax
c00247ae:	83 c4 1c             	add    esp,0x1c
c00247b1:	c3                   	ret    

c00247b2 <ATA::close(int, int, void*)>:
c00247b2:	83 ec 0c             	sub    esp,0xc
c00247b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00247bf:	85 c0                	test   eax,eax
c00247c1:	74 0c                	je     c00247cf <ATA::close(int, int, void*)+0x1d>
c00247c3:	83 ec 0c             	sub    esp,0xc
c00247c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00247c8:	50                   	push   eax
c00247c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00247cc:	83 c4 10             	add    esp,0x10
c00247cf:	31 c0                	xor    eax,eax
c00247d1:	83 c4 0c             	add    esp,0xc
c00247d4:	c3                   	ret    
c00247d5:	90                   	nop

c00247d6 <ATA::powerSaving(PowerSavingLevel)>:
c00247d6:	c3                   	ret    
c00247d7:	90                   	nop

c00247d8 <ATA::ATA()>:
c00247d8:	83 ec 0c             	sub    esp,0xc
c00247db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247df:	83 ec 04             	sub    esp,0x4
c00247e2:	68 00 02 00 00       	push   0x200
c00247e7:	68 d1 d8 02 c0       	push   0xc002d8d1
c00247ec:	50                   	push   eax
c00247ed:	e8 a2 fe fe ff       	call   c0014694 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247f2:	83 c4 10             	add    esp,0x10
c00247f5:	ba 54 d8 02 c0       	mov    edx,0xc002d854
c00247fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247fe:	89 10                	mov    DWORD PTR [eax],edx
c0024800:	90                   	nop
c0024801:	83 c4 0c             	add    esp,0xc
c0024804:	c3                   	ret    
c0024805:	90                   	nop

c0024806 <ATA::flush(bool)>:
c0024806:	53                   	push   ebx
c0024807:	83 ec 08             	sub    esp,0x8
c002480a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002480f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024813:	19 c0                	sbb    eax,eax
c0024815:	83 e0 fd             	and    eax,0xfffffffd
c0024818:	05 ea 00 00 00       	add    eax,0xea
c002481d:	50                   	push   eax
c002481e:	6a 07                	push   0x7
c0024820:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024827:	50                   	push   eax
c0024828:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002482e:	e8 dd ef ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024833:	83 c4 0c             	add    esp,0xc
c0024836:	6a 00                	push   0x0
c0024838:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002483f:	50                   	push   eax
c0024840:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024846:	e8 71 fb ff ff       	call   c00243bc <IDE::polling(unsigned char, unsigned int)>
c002484b:	83 c4 18             	add    esp,0x18
c002484e:	5b                   	pop    ebx
c002484f:	c3                   	ret    

c0024850 <ATA::readyForCommand()>:
c0024850:	56                   	push   esi
c0024851:	53                   	push   ebx
c0024852:	31 db                	xor    ebx,ebx
c0024854:	50                   	push   eax
c0024855:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024859:	50                   	push   eax
c002485a:	6a 0c                	push   0xc
c002485c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024863:	50                   	push   eax
c0024864:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002486a:	e8 61 f0 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c002486f:	83 c4 10             	add    esp,0x10
c0024872:	a8 88                	test   al,0x88
c0024874:	74 23                	je     c0024899 <ATA::readyForCommand()+0x49>
c0024876:	43                   	inc    ebx
c0024877:	83 fb 63             	cmp    ebx,0x63
c002487a:	7e dd                	jle    c0024859 <ATA::readyForCommand()+0x9>
c002487c:	51                   	push   ecx
c002487d:	51                   	push   ecx
c002487e:	6a 00                	push   0x0
c0024880:	68 40 42 0f 00       	push   0xf4240
c0024885:	e8 19 9f ff ff       	call   c001e7a3 <nanoSleep(unsigned long long)>
c002488a:	83 c4 10             	add    esp,0x10
c002488d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024893:	75 c4                	jne    c0024859 <ATA::readyForCommand()+0x9>
c0024895:	31 c0                	xor    eax,eax
c0024897:	eb 02                	jmp    c002489b <ATA::readyForCommand()+0x4b>
c0024899:	b0 01                	mov    al,0x1
c002489b:	5a                   	pop    edx
c002489c:	5b                   	pop    ebx
c002489d:	5e                   	pop    esi
c002489e:	c3                   	ret    
c002489f:	90                   	nop

c00248a0 <ATA::access(unsigned long long, int, void*, bool)>:
c00248a0:	55                   	push   ebp
c00248a1:	57                   	push   edi
c00248a2:	56                   	push   esi
c00248a3:	53                   	push   ebx
c00248a4:	83 ec 2c             	sub    esp,0x2c
c00248a7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00248ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00248af:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00248b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00248b7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00248bb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00248bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00248c3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00248c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00248cd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00248d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00248d7:	c1 e0 06             	shl    eax,0x6
c00248da:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00248e2:	74 5d                	je     c0024941 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00248e4:	89 fa                	mov    edx,edi
c00248e6:	89 f0                	mov    eax,esi
c00248e8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00248ec:	c1 ea 1c             	shr    edx,0x1c
c00248ef:	89 d1                	mov    ecx,edx
c00248f1:	09 c1                	or     ecx,eax
c00248f3:	74 25                	je     c002491a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00248f5:	31 ed                	xor    ebp,ebp
c00248f7:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00248fe:	89 fa                	mov    edx,edi
c0024900:	89 f0                	mov    eax,esi
c0024902:	0f ad d0             	shrd   eax,edx,cl
c0024905:	d3 ea                	shr    edx,cl
c0024907:	f6 c1 20             	test   cl,0x20
c002490a:	74 02                	je     c002490e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002490c:	89 d0                	mov    eax,edx
c002490e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024912:	45                   	inc    ebp
c0024913:	83 fd 06             	cmp    ebp,0x6
c0024916:	75 df                	jne    c00248f7 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024918:	eb 76                	jmp    c0024990 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002491a:	89 f0                	mov    eax,esi
c002491c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024921:	89 fa                	mov    edx,edi
c0024923:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002492a:	0f ac d0 10          	shrd   eax,edx,0x10
c002492e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024933:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024937:	c1 ee 18             	shr    esi,0x18
c002493a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002493f:	eb 56                	jmp    c0024997 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024941:	6a 00                	push   0x0
c0024943:	6a 3f                	push   0x3f
c0024945:	57                   	push   edi
c0024946:	56                   	push   esi
c0024947:	e8 98 29 00 00       	call   c00272e4 <__umoddi3>
c002494c:	83 c4 10             	add    esp,0x10
c002494f:	40                   	inc    eax
c0024950:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024954:	6a 00                	push   0x0
c0024956:	68 f0 03 00 00       	push   0x3f0
c002495b:	57                   	push   edi
c002495c:	56                   	push   esi
c002495d:	e8 82 28 00 00       	call   c00271e4 <__udivdi3>
c0024962:	83 c4 10             	add    esp,0x10
c0024965:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002496a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024971:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024976:	6a 00                	push   0x0
c0024978:	6a 3f                	push   0x3f
c002497a:	57                   	push   edi
c002497b:	56                   	push   esi
c002497c:	e8 63 28 00 00       	call   c00271e4 <__udivdi3>
c0024981:	83 c4 10             	add    esp,0x10
c0024984:	89 c6                	mov    esi,eax
c0024986:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002498b:	83 e6 0f             	and    esi,0xf
c002498e:	eb 07                	jmp    c0024997 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024990:	31 f6                	xor    esi,esi
c0024992:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024997:	bf 01 00 00 00       	mov    edi,0x1
c002499c:	50                   	push   eax
c002499d:	6a 00                	push   0x0
c002499f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249a6:	50                   	push   eax
c00249a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00249ab:	e8 6c f0 ff ff       	call   c0023a1c <IDE::enableIRQs(unsigned char, bool)>
c00249b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249b3:	e8 98 fe ff ff       	call   c0024850 <ATA::readyForCommand()>
c00249b8:	83 c4 10             	add    esp,0x10
c00249bb:	84 c0                	test   al,al
c00249bd:	0f 84 5a 02 00 00    	je     c0024c1d <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00249c3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00249c9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00249cf:	c1 e0 04             	shl    eax,0x4
c00249d2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00249d9:	09 c6                	or     esi,eax
c00249db:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00249e0:	75 05                	jne    c00249e7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00249e2:	83 ce a0             	or     esi,0xffffffa0
c00249e5:	eb 03                	jmp    c00249ea <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00249e7:	83 ce e0             	or     esi,0xffffffe0
c00249ea:	89 f0                	mov    eax,esi
c00249ec:	0f b6 f0             	movzx  esi,al
c00249ef:	56                   	push   esi
c00249f0:	6a 06                	push   0x6
c00249f2:	51                   	push   ecx
c00249f3:	52                   	push   edx
c00249f4:	e8 17 ee ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249f9:	83 c4 10             	add    esp,0x10
c00249fc:	6a 00                	push   0x0
c00249fe:	6a 01                	push   0x1
c0024a00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a07:	50                   	push   eax
c0024a08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a0e:	e8 fd ed ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a13:	83 c4 10             	add    esp,0x10
c0024a16:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024a1b:	75 6e                	jne    c0024a8b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024a1d:	6a 00                	push   0x0
c0024a1f:	6a 08                	push   0x8
c0024a21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a28:	50                   	push   eax
c0024a29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a2f:	e8 dc ed ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a34:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024a39:	50                   	push   eax
c0024a3a:	6a 09                	push   0x9
c0024a3c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a43:	50                   	push   eax
c0024a44:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a4a:	e8 c1 ed ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a4f:	83 c4 20             	add    esp,0x20
c0024a52:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024a57:	50                   	push   eax
c0024a58:	6a 0a                	push   0xa
c0024a5a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a61:	50                   	push   eax
c0024a62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a68:	e8 a3 ed ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a6d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024a72:	50                   	push   eax
c0024a73:	6a 0b                	push   0xb
c0024a75:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a7c:	50                   	push   eax
c0024a7d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a83:	e8 88 ed ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a88:	83 c4 20             	add    esp,0x20
c0024a8b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024a90:	50                   	push   eax
c0024a91:	6a 02                	push   0x2
c0024a93:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a9a:	50                   	push   eax
c0024a9b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aa1:	e8 6a ed ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aa6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024aab:	50                   	push   eax
c0024aac:	6a 03                	push   0x3
c0024aae:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab5:	50                   	push   eax
c0024ab6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024abc:	e8 4f ed ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ac1:	83 c4 20             	add    esp,0x20
c0024ac4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024ac9:	50                   	push   eax
c0024aca:	6a 04                	push   0x4
c0024acc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ad3:	50                   	push   eax
c0024ad4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ada:	e8 31 ed ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024adf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024ae4:	50                   	push   eax
c0024ae5:	6a 05                	push   0x5
c0024ae7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aee:	50                   	push   eax
c0024aef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024af5:	e8 16 ed ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024afa:	83 c4 20             	add    esp,0x20
c0024afd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024b02:	0f 94 c0             	sete   al
c0024b05:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024b0a:	74 09                	je     c0024b15 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024b0c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024b13:	eb 07                	jmp    c0024b1c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024b15:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024b1c:	0f b6 c0             	movzx  eax,al
c0024b1f:	50                   	push   eax
c0024b20:	6a 07                	push   0x7
c0024b22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b29:	50                   	push   eax
c0024b2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b30:	e8 db ec ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b35:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024b39:	83 c4 10             	add    esp,0x10
c0024b3c:	85 f6                	test   esi,esi
c0024b3e:	0f 84 ba 00 00 00    	je     c0024bfe <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024b44:	50                   	push   eax
c0024b45:	6a 01                	push   0x1
c0024b47:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b4e:	50                   	push   eax
c0024b4f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b55:	e8 62 f8 ff ff       	call   c00243bc <IDE::polling(unsigned char, unsigned int)>
c0024b5a:	83 c4 10             	add    esp,0x10
c0024b5d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024b63:	84 c0                	test   al,al
c0024b65:	74 2c                	je     c0024b93 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024b67:	0f b6 f8             	movzx  edi,al
c0024b6a:	0f b6 d2             	movzx  edx,dl
c0024b6d:	57                   	push   edi
c0024b6e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024b75:	50                   	push   eax
c0024b76:	52                   	push   edx
c0024b77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b7d:	e8 a4 f6 ff ff       	call   c0024226 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024b82:	c7 04 24 2c d8 02 c0 	mov    DWORD PTR [esp],0xc002d82c
c0024b89:	e8 b3 e2 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0024b8e:	e9 87 00 00 00       	jmp    c0024c1a <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024b93:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024b98:	74 33                	je     c0024bcd <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024b9a:	31 ed                	xor    ebp,ebp
c0024b9c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024ba0:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024ba4:	50                   	push   eax
c0024ba5:	50                   	push   eax
c0024ba6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bad:	50                   	push   eax
c0024bae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bb4:	e8 45 ec ff ff       	call   c00237fe <IDE::getBase(unsigned char)>
c0024bb9:	89 c2                	mov    edx,eax
c0024bbb:	89 f8                	mov    eax,edi
c0024bbd:	66 ef                	out    dx,ax
c0024bbf:	45                   	inc    ebp
c0024bc0:	83 c4 10             	add    esp,0x10
c0024bc3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024bc9:	75 d1                	jne    c0024b9c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024bcb:	eb 23                	jmp    c0024bf0 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024bcd:	0f b6 d2             	movzx  edx,dl
c0024bd0:	51                   	push   ecx
c0024bd1:	51                   	push   ecx
c0024bd2:	52                   	push   edx
c0024bd3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bd9:	e8 20 ec ff ff       	call   c00237fe <IDE::getBase(unsigned char)>
c0024bde:	b9 00 01 00 00       	mov    ecx,0x100
c0024be3:	89 c2                	mov    edx,eax
c0024be5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024be9:	fc                   	cld    
c0024bea:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024bed:	83 c4 10             	add    esp,0x10
c0024bf0:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024bf8:	4e                   	dec    esi
c0024bf9:	e9 3e ff ff ff       	jmp    c0024b3c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024bfe:	31 ff                	xor    edi,edi
c0024c00:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c05:	74 16                	je     c0024c1d <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c07:	50                   	push   eax
c0024c08:	50                   	push   eax
c0024c09:	31 c0                	xor    eax,eax
c0024c0b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024c10:	0f 94 c0             	sete   al
c0024c13:	50                   	push   eax
c0024c14:	53                   	push   ebx
c0024c15:	e8 ec fb ff ff       	call   c0024806 <ATA::flush(bool)>
c0024c1a:	83 c4 10             	add    esp,0x10
c0024c1d:	83 c4 2c             	add    esp,0x2c
c0024c20:	89 f8                	mov    eax,edi
c0024c22:	5b                   	pop    ebx
c0024c23:	5e                   	pop    esi
c0024c24:	5f                   	pop    edi
c0024c25:	5d                   	pop    ebp
c0024c26:	c3                   	ret    
c0024c27:	90                   	nop

c0024c28 <ATA::read(unsigned long long, int, void*)>:
c0024c28:	57                   	push   edi
c0024c29:	b8 04 00 00 00       	mov    eax,0x4
c0024c2e:	56                   	push   esi
c0024c2f:	53                   	push   ebx
c0024c30:	83 ec 10             	sub    esp,0x10
c0024c33:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c37:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c3b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c3e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c42:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c46:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024c4c:	77 3b                	ja     c0024c89 <ATA::read(unsigned long long, int, void*)+0x61>
c0024c4e:	b8 06 00 00 00       	mov    eax,0x6
c0024c53:	85 d2                	test   edx,edx
c0024c55:	74 32                	je     c0024c89 <ATA::read(unsigned long long, int, void*)+0x61>
c0024c57:	50                   	push   eax
c0024c58:	50                   	push   eax
c0024c59:	6a 00                	push   0x0
c0024c5b:	52                   	push   edx
c0024c5c:	53                   	push   ebx
c0024c5d:	57                   	push   edi
c0024c5e:	56                   	push   esi
c0024c5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c63:	e8 38 fc ff ff       	call   c00248a0 <ATA::access(unsigned long long, int, void*, bool)>
c0024c68:	83 c4 20             	add    esp,0x20
c0024c6b:	85 c0                	test   eax,eax
c0024c6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c71:	75 11                	jne    c0024c84 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024c73:	01 1d c8 31 03 c0    	add    DWORD PTR ds:0xc00331c8,ebx
c0024c79:	e8 c8 bc fe ff       	call   c0010946 <VgaText::updateDiskUsage()>
c0024c7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024c82:	eb 05                	jmp    c0024c89 <ATA::read(unsigned long long, int, void*)+0x61>
c0024c84:	b8 01 00 00 00       	mov    eax,0x1
c0024c89:	83 c4 10             	add    esp,0x10
c0024c8c:	5b                   	pop    ebx
c0024c8d:	5e                   	pop    esi
c0024c8e:	5f                   	pop    edi
c0024c8f:	c3                   	ret    

c0024c90 <ATA::write(unsigned long long, int, void*)>:
c0024c90:	57                   	push   edi
c0024c91:	b8 04 00 00 00       	mov    eax,0x4
c0024c96:	56                   	push   esi
c0024c97:	53                   	push   ebx
c0024c98:	83 ec 10             	sub    esp,0x10
c0024c9b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c9f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024ca3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024ca6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024caa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024cae:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024cb4:	77 3b                	ja     c0024cf1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024cb6:	b8 06 00 00 00       	mov    eax,0x6
c0024cbb:	85 d2                	test   edx,edx
c0024cbd:	74 32                	je     c0024cf1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024cbf:	50                   	push   eax
c0024cc0:	50                   	push   eax
c0024cc1:	6a 01                	push   0x1
c0024cc3:	52                   	push   edx
c0024cc4:	53                   	push   ebx
c0024cc5:	57                   	push   edi
c0024cc6:	56                   	push   esi
c0024cc7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ccb:	e8 d0 fb ff ff       	call   c00248a0 <ATA::access(unsigned long long, int, void*, bool)>
c0024cd0:	83 c4 20             	add    esp,0x20
c0024cd3:	85 c0                	test   eax,eax
c0024cd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cd9:	75 11                	jne    c0024cec <ATA::write(unsigned long long, int, void*)+0x5c>
c0024cdb:	01 1d c4 31 03 c0    	add    DWORD PTR ds:0xc00331c4,ebx
c0024ce1:	e8 60 bc fe ff       	call   c0010946 <VgaText::updateDiskUsage()>
c0024ce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cea:	eb 05                	jmp    c0024cf1 <ATA::write(unsigned long long, int, void*)+0x61>
c0024cec:	b8 01 00 00 00       	mov    eax,0x1
c0024cf1:	83 c4 10             	add    esp,0x10
c0024cf4:	5b                   	pop    ebx
c0024cf5:	5e                   	pop    esi
c0024cf6:	5f                   	pop    edi
c0024cf7:	c3                   	ret    

c0024cf8 <ATA::detectCHS()>:
c0024cf8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024cfc:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024d02:	c1 e0 06             	shl    eax,0x6
c0024d05:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024d0b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024d15:	c7 44 24 04 37 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d837
c0024d1d:	e9 d9 5a ff ff       	jmp    c001a7fb <Krnl::panic(char const*)>

c0024d22 <ATA::open(int, int, void*)>:
c0024d22:	53                   	push   ebx
c0024d23:	83 ec 08             	sub    esp,0x8
c0024d26:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d32:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d38:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d3e:	c1 e0 06             	shl    eax,0x6
c0024d41:	01 d0                	add    eax,edx
c0024d43:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024d4a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024d50:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024d57:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024d61:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024d67:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024d6e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024d75:	75 0c                	jne    c0024d83 <ATA::open(int, int, void*)+0x61>
c0024d77:	83 ec 0c             	sub    esp,0xc
c0024d7a:	53                   	push   ebx
c0024d7b:	e8 78 ff ff ff       	call   c0024cf8 <ATA::detectCHS()>
c0024d80:	83 c4 10             	add    esp,0x10
c0024d83:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024d89:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024d8f:	c1 e0 06             	shl    eax,0x6
c0024d92:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024d99:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024da3:	d1 e8                	shr    eax,1
c0024da5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024dab:	6a 04                	push   0x4
c0024dad:	6a 0c                	push   0xc
c0024daf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024db6:	50                   	push   eax
c0024db7:	52                   	push   edx
c0024db8:	e8 53 ea ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dbd:	90                   	nop
c0024dbe:	90                   	nop
c0024dbf:	6a 00                	push   0x0
c0024dc1:	6a 0c                	push   0xc
c0024dc3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024dca:	50                   	push   eax
c0024dcb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024dd1:	e8 3a ea ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dd6:	83 c4 14             	add    esp,0x14
c0024dd9:	53                   	push   ebx
c0024dda:	e8 1d f9 fe ff       	call   c00146fc <PhysicalDisk::startCache()>
c0024ddf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024de2:	e8 f5 1b ff ff       	call   c00169dc <createPartitionsForDisk(PhysicalDisk*)>
c0024de7:	31 c0                	xor    eax,eax
c0024de9:	83 c4 18             	add    esp,0x18
c0024dec:	5b                   	pop    ebx
c0024ded:	c3                   	ret    

c0024dee <ATAPI::write(unsigned long long, int, void*)>:
c0024dee:	b8 03 00 00 00       	mov    eax,0x3
c0024df3:	c3                   	ret    

c0024df4 <ATAPI::close(int, int, void*)>:
c0024df4:	83 ec 0c             	sub    esp,0xc
c0024df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dfb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e01:	85 c0                	test   eax,eax
c0024e03:	74 0c                	je     c0024e11 <ATAPI::close(int, int, void*)+0x1d>
c0024e05:	83 ec 0c             	sub    esp,0xc
c0024e08:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e0a:	50                   	push   eax
c0024e0b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e0e:	83 c4 10             	add    esp,0x10
c0024e11:	31 c0                	xor    eax,eax
c0024e13:	83 c4 0c             	add    esp,0xc
c0024e16:	c3                   	ret    
c0024e17:	90                   	nop

c0024e18 <ATAPI::ATAPI()>:
c0024e18:	83 ec 0c             	sub    esp,0xc
c0024e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e1f:	83 ec 04             	sub    esp,0x4
c0024e22:	68 00 08 00 00       	push   0x800
c0024e27:	68 71 d9 02 c0       	push   0xc002d971
c0024e2c:	50                   	push   eax
c0024e2d:	e8 62 f8 fe ff       	call   c0014694 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e32:	83 c4 10             	add    esp,0x10
c0024e35:	ba 8c d8 02 c0       	mov    edx,0xc002d88c
c0024e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e3e:	89 10                	mov    DWORD PTR [eax],edx
c0024e40:	90                   	nop
c0024e41:	83 c4 0c             	add    esp,0xc
c0024e44:	c3                   	ret    
c0024e45:	90                   	nop

c0024e46 <ATAPI::readyForCommand()>:
c0024e46:	56                   	push   esi
c0024e47:	53                   	push   ebx
c0024e48:	31 db                	xor    ebx,ebx
c0024e4a:	50                   	push   eax
c0024e4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024e4f:	50                   	push   eax
c0024e50:	6a 0c                	push   0xc
c0024e52:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024e59:	50                   	push   eax
c0024e5a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024e60:	e8 6b ea ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0024e65:	83 c4 10             	add    esp,0x10
c0024e68:	a8 88                	test   al,0x88
c0024e6a:	74 23                	je     c0024e8f <ATAPI::readyForCommand()+0x49>
c0024e6c:	43                   	inc    ebx
c0024e6d:	83 fb 63             	cmp    ebx,0x63
c0024e70:	7e dd                	jle    c0024e4f <ATAPI::readyForCommand()+0x9>
c0024e72:	51                   	push   ecx
c0024e73:	51                   	push   ecx
c0024e74:	6a 00                	push   0x0
c0024e76:	68 40 42 0f 00       	push   0xf4240
c0024e7b:	e8 23 99 ff ff       	call   c001e7a3 <nanoSleep(unsigned long long)>
c0024e80:	83 c4 10             	add    esp,0x10
c0024e83:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024e89:	75 c4                	jne    c0024e4f <ATAPI::readyForCommand()+0x9>
c0024e8b:	31 c0                	xor    eax,eax
c0024e8d:	eb 02                	jmp    c0024e91 <ATAPI::readyForCommand()+0x4b>
c0024e8f:	b0 01                	mov    al,0x1
c0024e91:	5a                   	pop    edx
c0024e92:	5b                   	pop    ebx
c0024e93:	5e                   	pop    esi
c0024e94:	c3                   	ret    
c0024e95:	90                   	nop

c0024e96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024e96:	55                   	push   ebp
c0024e97:	57                   	push   edi
c0024e98:	56                   	push   esi
c0024e99:	53                   	push   ebx
c0024e9a:	83 ec 20             	sub    esp,0x20
c0024e9d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024ea1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024ea5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024ea9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ead:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024eb1:	6a 01                	push   0x1
c0024eb3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024eba:	50                   	push   eax
c0024ebb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ec1:	e8 56 eb ff ff       	call   c0023a1c <IDE::enableIRQs(unsigned char, bool)>
c0024ec6:	5e                   	pop    esi
c0024ec7:	58                   	pop    eax
c0024ec8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ecf:	50                   	push   eax
c0024ed0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ed6:	e8 0f e9 ff ff       	call   c00237ea <IDE::prepareInterrupt(unsigned char)>
c0024edb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024ede:	e8 63 ff ff ff       	call   c0024e46 <ATAPI::readyForCommand()>
c0024ee3:	83 c4 10             	add    esp,0x10
c0024ee6:	84 c0                	test   al,al
c0024ee8:	75 0a                	jne    c0024ef4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024eea:	bb 01 00 00 00       	mov    ebx,0x1
c0024eef:	e9 57 02 00 00       	jmp    c002514b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024ef4:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024efa:	c1 e0 04             	shl    eax,0x4
c0024efd:	0f b6 c0             	movzx  eax,al
c0024f00:	50                   	push   eax
c0024f01:	6a 06                	push   0x6
c0024f03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f0a:	50                   	push   eax
c0024f0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f11:	e8 fa e8 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f16:	6a 00                	push   0x0
c0024f18:	6a 01                	push   0x1
c0024f1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f21:	50                   	push   eax
c0024f22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f28:	e8 e3 e8 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f2d:	83 c4 20             	add    esp,0x20
c0024f30:	0f b6 c3             	movzx  eax,bl
c0024f33:	0f b6 df             	movzx  ebx,bh
c0024f36:	50                   	push   eax
c0024f37:	6a 04                	push   0x4
c0024f39:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f40:	50                   	push   eax
c0024f41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f47:	e8 c4 e8 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f4c:	53                   	push   ebx
c0024f4d:	6a 05                	push   0x5
c0024f4f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f56:	50                   	push   eax
c0024f57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f5d:	e8 ae e8 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f62:	83 c4 20             	add    esp,0x20
c0024f65:	68 a0 00 00 00       	push   0xa0
c0024f6a:	6a 07                	push   0x7
c0024f6c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f73:	50                   	push   eax
c0024f74:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f7a:	e8 91 e8 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f7f:	83 c4 0c             	add    esp,0xc
c0024f82:	6a 01                	push   0x1
c0024f84:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f8b:	50                   	push   eax
c0024f8c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f92:	e8 25 f4 ff ff       	call   c00243bc <IDE::polling(unsigned char, unsigned int)>
c0024f97:	83 c4 10             	add    esp,0x10
c0024f9a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024fa0:	84 c0                	test   al,al
c0024fa2:	74 23                	je     c0024fc7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024fa4:	0f b6 d8             	movzx  ebx,al
c0024fa7:	0f b6 d2             	movzx  edx,dl
c0024faa:	53                   	push   ebx
c0024fab:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024fb2:	50                   	push   eax
c0024fb3:	52                   	push   edx
c0024fb4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fba:	e8 67 f2 ff ff       	call   c0024226 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024fbf:	83 c4 10             	add    esp,0x10
c0024fc2:	e9 84 01 00 00       	jmp    c002514b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024fc7:	0f b6 d2             	movzx  edx,dl
c0024fca:	53                   	push   ebx
c0024fcb:	53                   	push   ebx
c0024fcc:	52                   	push   edx
c0024fcd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fd3:	e8 26 e8 ff ff       	call   c00237fe <IDE::getBase(unsigned char)>
c0024fd8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024fdc:	b9 06 00 00 00       	mov    ecx,0x6
c0024fe1:	89 c2                	mov    edx,eax
c0024fe3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024fe6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024fea:	83 c4 10             	add    esp,0x10
c0024fed:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024ff3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024ffa:	85 db                	test   ebx,ebx
c0024ffc:	0f 84 ec 00 00 00    	je     c00250ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025002:	51                   	push   ecx
c0025003:	51                   	push   ecx
c0025004:	52                   	push   edx
c0025005:	50                   	push   eax
c0025006:	e8 73 e9 ff ff       	call   c002397e <IDE::waitInterrupt(unsigned char)>
c002500b:	83 c4 10             	add    esp,0x10
c002500e:	84 c0                	test   al,al
c0025010:	0f 84 d4 fe ff ff    	je     c0024eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025016:	56                   	push   esi
c0025017:	56                   	push   esi
c0025018:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002501f:	50                   	push   eax
c0025020:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025026:	e8 bf e7 ff ff       	call   c00237ea <IDE::prepareInterrupt(unsigned char)>
c002502b:	83 c4 0c             	add    esp,0xc
c002502e:	6a 04                	push   0x4
c0025030:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025037:	50                   	push   eax
c0025038:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002503e:	e8 8d e8 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c0025043:	83 c4 0c             	add    esp,0xc
c0025046:	89 c6                	mov    esi,eax
c0025048:	6a 05                	push   0x5
c002504a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025051:	50                   	push   eax
c0025052:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025058:	e8 73 e8 ff ff       	call   c00238d0 <IDE::read(unsigned char, unsigned char)>
c002505d:	89 f1                	mov    ecx,esi
c002505f:	0f b6 c0             	movzx  eax,al
c0025062:	0f b6 f1             	movzx  esi,cl
c0025065:	c1 e0 08             	shl    eax,0x8
c0025068:	09 c6                	or     esi,eax
c002506a:	d1 fe                	sar    esi,1
c002506c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025070:	83 c4 10             	add    esp,0x10
c0025073:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025078:	74 41                	je     c00250bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002507a:	31 c9                	xor    ecx,ecx
c002507c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025082:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025089:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002508d:	75 0a                	jne    c0025099 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002508f:	01 c9                	add    ecx,ecx
c0025091:	01 cd                	add    ebp,ecx
c0025093:	4b                   	dec    ebx
c0025094:	e9 54 ff ff ff       	jmp    c0024fed <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025099:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002509e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00250a2:	51                   	push   ecx
c00250a3:	51                   	push   ecx
c00250a4:	52                   	push   edx
c00250a5:	50                   	push   eax
c00250a6:	e8 53 e7 ff ff       	call   c00237fe <IDE::getBase(unsigned char)>
c00250ab:	89 c2                	mov    edx,eax
c00250ad:	89 f0                	mov    eax,esi
c00250af:	66 ef                	out    dx,ax
c00250b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00250b5:	83 c4 10             	add    esp,0x10
c00250b8:	41                   	inc    ecx
c00250b9:	eb c1                	jmp    c002507c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00250bb:	31 f6                	xor    esi,esi
c00250bd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250c3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250ca:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00250ce:	75 06                	jne    c00250d6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00250d0:	01 f6                	add    esi,esi
c00250d2:	01 f5                	add    ebp,esi
c00250d4:	eb bd                	jmp    c0025093 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00250d6:	51                   	push   ecx
c00250d7:	51                   	push   ecx
c00250d8:	52                   	push   edx
c00250d9:	50                   	push   eax
c00250da:	e8 1f e7 ff ff       	call   c00237fe <IDE::getBase(unsigned char)>
c00250df:	89 c2                	mov    edx,eax
c00250e1:	66 ed                	in     ax,dx
c00250e3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00250e8:	83 c4 10             	add    esp,0x10
c00250eb:	46                   	inc    esi
c00250ec:	eb cf                	jmp    c00250bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00250ee:	51                   	push   ecx
c00250ef:	51                   	push   ecx
c00250f0:	52                   	push   edx
c00250f1:	50                   	push   eax
c00250f2:	e8 87 e8 ff ff       	call   c002397e <IDE::waitInterrupt(unsigned char)>
c00250f7:	83 c4 10             	add    esp,0x10
c00250fa:	84 c0                	test   al,al
c00250fc:	0f 84 e8 fd ff ff    	je     c0024eea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025102:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025107:	52                   	push   edx
c0025108:	52                   	push   edx
c0025109:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025110:	50                   	push   eax
c0025111:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025117:	e8 ce e6 ff ff       	call   c00237ea <IDE::prepareInterrupt(unsigned char)>
c002511c:	83 c4 10             	add    esp,0x10
c002511f:	50                   	push   eax
c0025120:	50                   	push   eax
c0025121:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025128:	50                   	push   eax
c0025129:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002512f:	e8 ca e6 ff ff       	call   c00237fe <IDE::getBase(unsigned char)>
c0025134:	8d 50 07             	lea    edx,[eax+0x7]
c0025137:	ec                   	in     al,dx
c0025138:	83 c4 10             	add    esp,0x10
c002513b:	a8 88                	test   al,0x88
c002513d:	74 0a                	je     c0025149 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002513f:	4b                   	dec    ebx
c0025140:	75 dd                	jne    c002511f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025142:	bb 02 00 00 00       	mov    ebx,0x2
c0025147:	eb 02                	jmp    c002514b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025149:	31 db                	xor    ebx,ebx
c002514b:	83 c4 1c             	add    esp,0x1c
c002514e:	89 d8                	mov    eax,ebx
c0025150:	5b                   	pop    ebx
c0025151:	5e                   	pop    esi
c0025152:	5f                   	pop    edi
c0025153:	5d                   	pop    ebp
c0025154:	c3                   	ret    
c0025155:	90                   	nop

c0025156 <ATAPI::diskRemoved()>:
c0025156:	83 ec 18             	sub    esp,0x18
c0025159:	68 7d d9 02 c0       	push   0xc002d97d
c002515e:	e8 de dc fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0025163:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025167:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002516e:	83 c4 1c             	add    esp,0x1c
c0025171:	c3                   	ret    

c0025172 <ATAPI::eject()>:
c0025172:	57                   	push   edi
c0025173:	b9 03 00 00 00       	mov    ecx,0x3
c0025178:	53                   	push   ebx
c0025179:	83 ec 14             	sub    esp,0x14
c002517c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025180:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025184:	fc                   	cld    
c0025185:	31 c0                	xor    eax,eax
c0025187:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025189:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002518e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025193:	50                   	push   eax
c0025194:	50                   	push   eax
c0025195:	6a 00                	push   0x0
c0025197:	6a 00                	push   0x0
c0025199:	6a 00                	push   0x0
c002519b:	6a 02                	push   0x2
c002519d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251a1:	50                   	push   eax
c00251a2:	53                   	push   ebx
c00251a3:	e8 ee fc ff ff       	call   c0024e96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251a8:	83 c4 14             	add    esp,0x14
c00251ab:	53                   	push   ebx
c00251ac:	e8 a5 ff ff ff       	call   c0025156 <ATAPI::diskRemoved()>
c00251b1:	83 c4 24             	add    esp,0x24
c00251b4:	31 c0                	xor    eax,eax
c00251b6:	5b                   	pop    ebx
c00251b7:	5f                   	pop    edi
c00251b8:	c3                   	ret    
c00251b9:	90                   	nop

c00251ba <ATAPI::diskInserted()>:
c00251ba:	53                   	push   ebx
c00251bb:	83 ec 14             	sub    esp,0x14
c00251be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00251c2:	68 94 d9 02 c0       	push   0xc002d994
c00251c7:	e8 75 dc fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00251cc:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00251d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251d6:	e8 21 f5 fe ff       	call   c00146fc <PhysicalDisk::startCache()>
c00251db:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00251df:	83 c4 18             	add    esp,0x18
c00251e2:	5b                   	pop    ebx
c00251e3:	e9 f4 17 ff ff       	jmp    c00169dc <createPartitionsForDisk(PhysicalDisk*)>

c00251e8 <ATAPI::detectMedia()>:
c00251e8:	56                   	push   esi
c00251e9:	53                   	push   ebx
c00251ea:	83 ec 28             	sub    esp,0x28
c00251ed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251f1:	6a 0c                	push   0xc
c00251f3:	6a 00                	push   0x0
c00251f5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00251f9:	56                   	push   esi
c00251fa:	e8 6d b5 fd ff       	call   c000076c <memset>
c00251ff:	58                   	pop    eax
c0025200:	5a                   	pop    edx
c0025201:	6a 00                	push   0x0
c0025203:	6a 00                	push   0x0
c0025205:	6a 00                	push   0x0
c0025207:	6a 00                	push   0x0
c0025209:	56                   	push   esi
c002520a:	53                   	push   ebx
c002520b:	e8 86 fc ff ff       	call   c0024e96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025210:	83 c4 1c             	add    esp,0x1c
c0025213:	6a 0c                	push   0xc
c0025215:	6a 00                	push   0x0
c0025217:	56                   	push   esi
c0025218:	e8 4f b5 fd ff       	call   c000076c <memset>
c002521d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025222:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025227:	59                   	pop    ecx
c0025228:	58                   	pop    eax
c0025229:	6a 01                	push   0x1
c002522b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002522f:	50                   	push   eax
c0025230:	6a 00                	push   0x0
c0025232:	6a 12                	push   0x12
c0025234:	56                   	push   esi
c0025235:	53                   	push   ebx
c0025236:	e8 5b fc ff ff       	call   c0024e96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002523b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002523f:	83 c4 20             	add    esp,0x20
c0025242:	83 e0 7f             	and    eax,0x7f
c0025245:	3c 70                	cmp    al,0x70
c0025247:	74 15                	je     c002525e <ATAPI::detectMedia()+0x76>
c0025249:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025250:	75 0c                	jne    c002525e <ATAPI::detectMedia()+0x76>
c0025252:	83 ec 0c             	sub    esp,0xc
c0025255:	53                   	push   ebx
c0025256:	e8 5f ff ff ff       	call   c00251ba <ATAPI::diskInserted()>
c002525b:	83 c4 10             	add    esp,0x10
c002525e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025262:	83 e0 0f             	and    eax,0xf
c0025265:	3c 02                	cmp    al,0x2
c0025267:	75 1b                	jne    c0025284 <ATAPI::detectMedia()+0x9c>
c0025269:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002526e:	75 2d                	jne    c002529d <ATAPI::detectMedia()+0xb5>
c0025270:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025277:	74 24                	je     c002529d <ATAPI::detectMedia()+0xb5>
c0025279:	83 ec 0c             	sub    esp,0xc
c002527c:	53                   	push   ebx
c002527d:	e8 d4 fe ff ff       	call   c0025156 <ATAPI::diskRemoved()>
c0025282:	eb 16                	jmp    c002529a <ATAPI::detectMedia()+0xb2>
c0025284:	84 c0                	test   al,al
c0025286:	75 15                	jne    c002529d <ATAPI::detectMedia()+0xb5>
c0025288:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002528f:	75 0c                	jne    c002529d <ATAPI::detectMedia()+0xb5>
c0025291:	83 ec 0c             	sub    esp,0xc
c0025294:	53                   	push   ebx
c0025295:	e8 20 ff ff ff       	call   c00251ba <ATAPI::diskInserted()>
c002529a:	83 c4 10             	add    esp,0x10
c002529d:	83 c4 24             	add    esp,0x24
c00252a0:	5b                   	pop    ebx
c00252a1:	5e                   	pop    esi
c00252a2:	c3                   	ret    
c00252a3:	90                   	nop

c00252a4 <ATAPI::open(int, int, void*)>:
c00252a4:	53                   	push   ebx
c00252a5:	83 ec 08             	sub    esp,0x8
c00252a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00252ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00252b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00252b4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00252ba:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00252c0:	c1 e0 06             	shl    eax,0x6
c00252c3:	01 d0                	add    eax,edx
c00252c5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00252cc:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00252d2:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00252d9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00252e3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00252e9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00252f0:	6a 04                	push   0x4
c00252f2:	6a 0c                	push   0xc
c00252f4:	51                   	push   ecx
c00252f5:	52                   	push   edx
c00252f6:	e8 15 e5 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252fb:	90                   	nop
c00252fc:	90                   	nop
c00252fd:	6a 00                	push   0x0
c00252ff:	6a 0c                	push   0xc
c0025301:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025308:	50                   	push   eax
c0025309:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002530f:	e8 fc e4 ff ff       	call   c0023810 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025314:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002531b:	83 c4 14             	add    esp,0x14
c002531e:	53                   	push   ebx
c002531f:	e8 c4 fe ff ff       	call   c00251e8 <ATAPI::detectMedia()>
c0025324:	31 c0                	xor    eax,eax
c0025326:	83 c4 18             	add    esp,0x18
c0025329:	5b                   	pop    ebx
c002532a:	c3                   	ret    
c002532b:	90                   	nop

c002532c <ATAPI::read(unsigned long long, int, void*)>:
c002532c:	55                   	push   ebp
c002532d:	57                   	push   edi
c002532e:	56                   	push   esi
c002532f:	53                   	push   ebx
c0025330:	83 ec 1c             	sub    esp,0x1c
c0025333:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025337:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002533b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002533f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025346:	74 41                	je     c0025389 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025348:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002534c:	b9 03 00 00 00       	mov    ecx,0x3
c0025351:	fc                   	cld    
c0025352:	31 c0                	xor    eax,eax
c0025354:	86 fb                	xchg   bl,bh
c0025356:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025358:	c1 c3 10             	rol    ebx,0x10
c002535b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025360:	89 e8                	mov    eax,ebp
c0025362:	86 fb                	xchg   bl,bh
c0025364:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025368:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002536c:	50                   	push   eax
c002536d:	50                   	push   eax
c002536e:	55                   	push   ebp
c002536f:	c1 e5 0b             	shl    ebp,0xb
c0025372:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025376:	6a 00                	push   0x0
c0025378:	55                   	push   ebp
c0025379:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002537d:	50                   	push   eax
c002537e:	56                   	push   esi
c002537f:	e8 12 fb ff ff       	call   c0024e96 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025384:	83 c4 20             	add    esp,0x20
c0025387:	eb 1a                	jmp    c00253a3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025389:	83 ec 0c             	sub    esp,0xc
c002538c:	56                   	push   esi
c002538d:	e8 56 fe ff ff       	call   c00251e8 <ATAPI::detectMedia()>
c0025392:	83 c4 10             	add    esp,0x10
c0025395:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002539c:	75 aa                	jne    c0025348 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002539e:	b8 02 00 00 00       	mov    eax,0x2
c00253a3:	83 c4 1c             	add    esp,0x1c
c00253a6:	5b                   	pop    ebx
c00253a7:	5e                   	pop    esi
c00253a8:	5f                   	pop    edi
c00253a9:	5d                   	pop    ebp
c00253aa:	c3                   	ret    
c00253ab:	90                   	nop

c00253ac <SATA::close(int, int, void*)>:
c00253ac:	83 ec 0c             	sub    esp,0xc
c00253af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00253b9:	85 c0                	test   eax,eax
c00253bb:	74 0c                	je     c00253c9 <SATA::close(int, int, void*)+0x1d>
c00253bd:	83 ec 0c             	sub    esp,0xc
c00253c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00253c2:	50                   	push   eax
c00253c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00253c6:	83 c4 10             	add    esp,0x10
c00253c9:	31 c0                	xor    eax,eax
c00253cb:	83 c4 0c             	add    esp,0xc
c00253ce:	c3                   	ret    
c00253cf:	90                   	nop

c00253d0 <SATA::powerSaving(PowerSavingLevel)>:
c00253d0:	c3                   	ret    
c00253d1:	90                   	nop

c00253d2 <SATA::open(int, int, void*)>:
c00253d2:	56                   	push   esi
c00253d3:	53                   	push   ebx
c00253d4:	50                   	push   eax
c00253d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253dd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00253e7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253ed:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253fb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025405:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002540b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025412:	e8 fb aa fe ff       	call   c000ff12 <Phys::allocatePage()>
c0025417:	89 c6                	mov    esi,eax
c0025419:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002541f:	81 c6 00 10 00 00    	add    esi,0x1000
c0025425:	e8 e8 aa fe ff       	call   c000ff12 <Phys::allocatePage()>
c002542a:	39 c6                	cmp    esi,eax
c002542c:	74 10                	je     c002543e <SATA::open(int, int, void*)+0x6c>
c002542e:	83 ec 0c             	sub    esp,0xc
c0025431:	68 bc d8 02 c0       	push   0xc002d8bc
c0025436:	e8 c0 53 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c002543b:	83 c4 10             	add    esp,0x10
c002543e:	83 ec 0c             	sub    esp,0xc
c0025441:	6a 02                	push   0x2
c0025443:	e8 f3 c5 fe ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c0025448:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002544e:	6a 03                	push   0x3
c0025450:	50                   	push   eax
c0025451:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025457:	ff 35 f0 ef 02 c0    	push   DWORD PTR ds:0xc002eff0
c002545d:	e8 10 ce fe ff       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025462:	83 c4 14             	add    esp,0x14
c0025465:	53                   	push   ebx
c0025466:	e8 91 f2 fe ff       	call   c00146fc <PhysicalDisk::startCache()>
c002546b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002546e:	e8 69 15 ff ff       	call   c00169dc <createPartitionsForDisk(PhysicalDisk*)>
c0025473:	83 c4 14             	add    esp,0x14
c0025476:	31 c0                	xor    eax,eax
c0025478:	5b                   	pop    ebx
c0025479:	5e                   	pop    esi
c002547a:	c3                   	ret    
c002547b:	90                   	nop

c002547c <SATA::SATA()>:
c002547c:	83 ec 0c             	sub    esp,0xc
c002547f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025483:	83 ec 04             	sub    esp,0x4
c0025486:	68 00 02 00 00       	push   0x200
c002548b:	68 d0 d8 02 c0       	push   0xc002d8d0
c0025490:	50                   	push   eax
c0025491:	e8 fe f1 fe ff       	call   c0014694 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025496:	83 c4 10             	add    esp,0x10
c0025499:	ba 40 d9 02 c0       	mov    edx,0xc002d940
c002549e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254a2:	89 10                	mov    DWORD PTR [eax],edx
c00254a4:	90                   	nop
c00254a5:	83 c4 0c             	add    esp,0xc
c00254a8:	c3                   	ret    
c00254a9:	90                   	nop

c00254aa <SATA::access(unsigned long long, int, void*, bool)>:
c00254aa:	55                   	push   ebp
c00254ab:	57                   	push   edi
c00254ac:	56                   	push   esi
c00254ad:	53                   	push   ebx
c00254ae:	83 ec 2c             	sub    esp,0x2c
c00254b1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00254b5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00254b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00254bd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00254c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00254c5:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00254ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00254ce:	7e 10                	jle    c00254e0 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00254d0:	83 ec 0c             	sub    esp,0xc
c00254d3:	68 e0 d8 02 c0       	push   0xc002d8e0
c00254d8:	e8 1e 53 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00254dd:	83 c4 10             	add    esp,0x10
c00254e0:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00254e6:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00254ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00254f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00254f6:	89 d0                	mov    eax,edx
c00254f8:	c1 e0 07             	shl    eax,0x7
c00254fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00254ff:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025509:	51                   	push   ecx
c002550a:	8d 42 02             	lea    eax,[edx+0x2]
c002550d:	51                   	push   ecx
c002550e:	c1 e0 07             	shl    eax,0x7
c0025511:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025515:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025519:	50                   	push   eax
c002551a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025520:	e8 af ef ff ff       	call   c00244d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025525:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025529:	83 c4 10             	add    esp,0x10
c002552c:	b8 01 00 00 00       	mov    eax,0x1
c0025531:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025536:	0f 84 cb 01 00 00    	je     c0025707 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002553c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025540:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025544:	c1 e0 09             	shl    eax,0x9
c0025547:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002554c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025550:	74 0e                	je     c0025560 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025552:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025556:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002555c:	89 c1                	mov    ecx,eax
c002555e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025560:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025564:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002556a:	8d 42 02             	lea    eax,[edx+0x2]
c002556d:	c1 e0 07             	shl    eax,0x7
c0025570:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025574:	8b 00                	mov    eax,DWORD PTR [eax]
c0025576:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002557c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025582:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025586:	c1 e1 05             	shl    ecx,0x5
c0025589:	01 c8                	add    eax,ecx
c002558b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002558f:	83 e1 01             	and    ecx,0x1
c0025592:	89 ce                	mov    esi,ecx
c0025594:	8a 08                	mov    cl,BYTE PTR [eax]
c0025596:	c1 e6 06             	shl    esi,0x6
c0025599:	83 e1 bf             	and    ecx,0xffffffbf
c002559c:	09 f1                	or     ecx,esi
c002559e:	88 08                	mov    BYTE PTR [eax],cl
c00255a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00255a2:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00255a8:	81 c9 05 00 01 00    	or     ecx,0x10005
c00255ae:	89 08                	mov    DWORD PTR [eax],ecx
c00255b0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00255b6:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00255bc:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00255c2:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00255c5:	50                   	push   eax
c00255c6:	68 90 00 00 00       	push   0x90
c00255cb:	6a 00                	push   0x0
c00255cd:	56                   	push   esi
c00255ce:	e8 99 b1 fd ff       	call   c000076c <memset>
c00255d3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00255d9:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00255dd:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00255e3:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00255e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00255eb:	83 c4 10             	add    esp,0x10
c00255ee:	48                   	dec    eax
c00255ef:	25 ff ff 3f 00       	and    eax,0x3fffff
c00255f4:	89 c1                	mov    ecx,eax
c00255f6:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00255fc:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025601:	09 c8                	or     eax,ecx
c0025603:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025609:	66 8b 06             	mov    ax,WORD PTR [esi]
c002560c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025613:	66 25 00 7f          	and    ax,0x7f00
c0025617:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002561b:	66 0d 27 80          	or     ax,0x8027
c002561f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025624:	66 89 06             	mov    WORD PTR [esi],ax
c0025627:	19 c0                	sbb    eax,eax
c0025629:	83 e0 f0             	and    eax,0xfffffff0
c002562c:	83 c0 35             	add    eax,0x35
c002562f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025632:	89 e8                	mov    eax,ebp
c0025634:	c1 e8 10             	shr    eax,0x10
c0025637:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002563a:	89 e8                	mov    eax,ebp
c002563c:	c1 e8 18             	shr    eax,0x18
c002563f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025642:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025646:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025649:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002564d:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025650:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025654:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025658:	89 d6                	mov    esi,edx
c002565a:	31 c0                	xor    eax,eax
c002565c:	c1 e6 07             	shl    esi,0x7
c002565f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025663:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025669:	80 e1 88             	and    cl,0x88
c002566c:	74 0a                	je     c0025678 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c002566e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025673:	74 0a                	je     c002567f <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025675:	40                   	inc    eax
c0025676:	eb eb                	jmp    c0025663 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025678:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002567d:	75 0a                	jne    c0025689 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002567f:	83 ec 0c             	sub    esp,0xc
c0025682:	68 19 d9 02 c0       	push   0xc002d919
c0025687:	eb 56                	jmp    c00256df <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025689:	b8 01 00 00 00       	mov    eax,0x1
c002568e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025692:	c1 e2 07             	shl    edx,0x7
c0025695:	d3 e0                	shl    eax,cl
c0025697:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002569b:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00256a1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00256a7:	85 c8                	test   eax,ecx
c00256a9:	74 20                	je     c00256cb <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00256ab:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00256b1:	0f ba e1 1e          	bt     ecx,0x1e
c00256b5:	73 ea                	jae    c00256a1 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c00256b7:	83 ec 0c             	sub    esp,0xc
c00256ba:	68 27 d9 02 c0       	push   0xc002d927
c00256bf:	e8 37 51 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00256c4:	83 c4 10             	add    esp,0x10
c00256c7:	31 c0                	xor    eax,eax
c00256c9:	eb 3c                	jmp    c0025707 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256cb:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00256d1:	0f ba e0 1e          	bt     eax,0x1e
c00256d5:	73 17                	jae    c00256ee <SATA::access(unsigned long long, int, void*, bool)+0x244>
c00256d7:	83 ec 0c             	sub    esp,0xc
c00256da:	68 27 d9 02 c0       	push   0xc002d927
c00256df:	e8 17 51 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00256e4:	83 c4 10             	add    esp,0x10
c00256e7:	b8 01 00 00 00       	mov    eax,0x1
c00256ec:	eb 19                	jmp    c0025707 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256ee:	31 c0                	xor    eax,eax
c00256f0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00256f5:	75 10                	jne    c0025707 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256f7:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00256fd:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025701:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025705:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025707:	83 c4 2c             	add    esp,0x2c
c002570a:	5b                   	pop    ebx
c002570b:	5e                   	pop    esi
c002570c:	5f                   	pop    edi
c002570d:	5d                   	pop    ebp
c002570e:	c3                   	ret    
c002570f:	90                   	nop

c0025710 <SATA::read(unsigned long long, int, void*)>:
c0025710:	57                   	push   edi
c0025711:	b8 04 00 00 00       	mov    eax,0x4
c0025716:	56                   	push   esi
c0025717:	53                   	push   ebx
c0025718:	83 ec 10             	sub    esp,0x10
c002571b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002571f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025723:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025726:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002572a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002572e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025734:	77 3b                	ja     c0025771 <SATA::read(unsigned long long, int, void*)+0x61>
c0025736:	b8 06 00 00 00       	mov    eax,0x6
c002573b:	85 d2                	test   edx,edx
c002573d:	74 32                	je     c0025771 <SATA::read(unsigned long long, int, void*)+0x61>
c002573f:	50                   	push   eax
c0025740:	50                   	push   eax
c0025741:	6a 00                	push   0x0
c0025743:	52                   	push   edx
c0025744:	53                   	push   ebx
c0025745:	57                   	push   edi
c0025746:	56                   	push   esi
c0025747:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002574b:	e8 5a fd ff ff       	call   c00254aa <SATA::access(unsigned long long, int, void*, bool)>
c0025750:	83 c4 20             	add    esp,0x20
c0025753:	85 c0                	test   eax,eax
c0025755:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025759:	75 11                	jne    c002576c <SATA::read(unsigned long long, int, void*)+0x5c>
c002575b:	01 1d c8 31 03 c0    	add    DWORD PTR ds:0xc00331c8,ebx
c0025761:	e8 e0 b1 fe ff       	call   c0010946 <VgaText::updateDiskUsage()>
c0025766:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002576a:	eb 05                	jmp    c0025771 <SATA::read(unsigned long long, int, void*)+0x61>
c002576c:	b8 01 00 00 00       	mov    eax,0x1
c0025771:	83 c4 10             	add    esp,0x10
c0025774:	5b                   	pop    ebx
c0025775:	5e                   	pop    esi
c0025776:	5f                   	pop    edi
c0025777:	c3                   	ret    

c0025778 <SATA::write(unsigned long long, int, void*)>:
c0025778:	55                   	push   ebp
c0025779:	b8 04 00 00 00       	mov    eax,0x4
c002577e:	57                   	push   edi
c002577f:	56                   	push   esi
c0025780:	53                   	push   ebx
c0025781:	83 ec 1c             	sub    esp,0x1c
c0025784:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025788:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002578c:	8d 75 ff             	lea    esi,[ebp-0x1]
c002578f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025793:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025797:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002579d:	77 56                	ja     c00257f5 <SATA::write(unsigned long long, int, void*)+0x7d>
c002579f:	b8 06 00 00 00       	mov    eax,0x6
c00257a4:	85 ff                	test   edi,edi
c00257a6:	74 4d                	je     c00257f5 <SATA::write(unsigned long long, int, void*)+0x7d>
c00257a8:	89 ee                	mov    esi,ebp
c00257aa:	c1 e6 09             	shl    esi,0x9
c00257ad:	01 fe                	add    esi,edi
c00257af:	89 c8                	mov    eax,ecx
c00257b1:	89 da                	mov    edx,ebx
c00257b3:	83 c0 01             	add    eax,0x1
c00257b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00257ba:	83 d2 00             	adc    edx,0x0
c00257bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00257c1:	50                   	push   eax
c00257c2:	50                   	push   eax
c00257c3:	6a 01                	push   0x1
c00257c5:	57                   	push   edi
c00257c6:	81 c7 00 02 00 00    	add    edi,0x200
c00257cc:	6a 01                	push   0x1
c00257ce:	53                   	push   ebx
c00257cf:	51                   	push   ecx
c00257d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00257d4:	e8 d1 fc ff ff       	call   c00254aa <SATA::access(unsigned long long, int, void*, bool)>
c00257d9:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00257dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257e1:	83 c4 20             	add    esp,0x20
c00257e4:	39 f7                	cmp    edi,esi
c00257e6:	75 c7                	jne    c00257af <SATA::write(unsigned long long, int, void*)+0x37>
c00257e8:	01 2d c4 31 03 c0    	add    DWORD PTR ds:0xc00331c4,ebp
c00257ee:	e8 53 b1 fe ff       	call   c0010946 <VgaText::updateDiskUsage()>
c00257f3:	31 c0                	xor    eax,eax
c00257f5:	83 c4 1c             	add    esp,0x1c
c00257f8:	5b                   	pop    ebx
c00257f9:	5e                   	pop    esi
c00257fa:	5f                   	pop    edi
c00257fb:	5d                   	pop    ebp
c00257fc:	c3                   	ret    
c00257fd:	90                   	nop

c00257fe <SATAPI::write(unsigned long long, int, void*)>:
c00257fe:	b8 03 00 00 00       	mov    eax,0x3
c0025803:	c3                   	ret    

c0025804 <SATAPI::close(int, int, void*)>:
c0025804:	83 ec 0c             	sub    esp,0xc
c0025807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002580b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025811:	85 c0                	test   eax,eax
c0025813:	74 0c                	je     c0025821 <SATAPI::close(int, int, void*)+0x1d>
c0025815:	83 ec 0c             	sub    esp,0xc
c0025818:	8b 10                	mov    edx,DWORD PTR [eax]
c002581a:	50                   	push   eax
c002581b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002581e:	83 c4 10             	add    esp,0x10
c0025821:	31 c0                	xor    eax,eax
c0025823:	83 c4 0c             	add    esp,0xc
c0025826:	c3                   	ret    
c0025827:	90                   	nop

c0025828 <SATAPI::SATAPI()>:
c0025828:	83 ec 0c             	sub    esp,0xc
c002582b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002582f:	83 ec 04             	sub    esp,0x4
c0025832:	68 00 08 00 00       	push   0x800
c0025837:	68 70 d9 02 c0       	push   0xc002d970
c002583c:	50                   	push   eax
c002583d:	e8 52 ee fe ff       	call   c0014694 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025842:	83 c4 10             	add    esp,0x10
c0025845:	ba 1c da 02 c0       	mov    edx,0xc002da1c
c002584a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002584e:	89 10                	mov    DWORD PTR [eax],edx
c0025850:	90                   	nop
c0025851:	83 c4 0c             	add    esp,0xc
c0025854:	c3                   	ret    
c0025855:	90                   	nop

c0025856 <SATAPI::diskRemoved()>:
c0025856:	83 ec 18             	sub    esp,0x18
c0025859:	68 7c d9 02 c0       	push   0xc002d97c
c002585e:	e8 de d5 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0025863:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025867:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c002586e:	83 c4 1c             	add    esp,0x1c
c0025871:	c3                   	ret    

c0025872 <SATAPI::diskInserted()>:
c0025872:	53                   	push   ebx
c0025873:	83 ec 14             	sub    esp,0x14
c0025876:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002587a:	68 93 d9 02 c0       	push   0xc002d993
c002587f:	e8 bd d5 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0025884:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002588b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002588e:	e8 69 ee fe ff       	call   c00146fc <PhysicalDisk::startCache()>
c0025893:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025897:	83 c4 18             	add    esp,0x18
c002589a:	5b                   	pop    ebx
c002589b:	e9 3c 11 ff ff       	jmp    c00169dc <createPartitionsForDisk(PhysicalDisk*)>

c00258a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00258a0:	55                   	push   ebp
c00258a1:	57                   	push   edi
c00258a2:	56                   	push   esi
c00258a3:	53                   	push   ebx
c00258a4:	83 ec 34             	sub    esp,0x34
c00258a7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00258ab:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00258af:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00258b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00258b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00258bb:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00258c1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00258cb:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00258d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00258d5:	c1 e0 07             	shl    eax,0x7
c00258d8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00258dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00258e0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00258ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258ee:	8d 58 02             	lea    ebx,[eax+0x2]
c00258f1:	c1 e3 07             	shl    ebx,0x7
c00258f4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00258f8:	53                   	push   ebx
c00258f9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00258ff:	e8 d0 eb ff ff       	call   c00244d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025904:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025908:	83 c4 10             	add    esp,0x10
c002590b:	b8 01 00 00 00       	mov    eax,0x1
c0025910:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025915:	0f 84 85 01 00 00    	je     c0025aa0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c002591b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025921:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025923:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025929:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002592f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025933:	c1 e1 05             	shl    ecx,0x5
c0025936:	01 c8                	add    eax,ecx
c0025938:	8b 08                	mov    ecx,DWORD PTR [eax]
c002593a:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025940:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025946:	89 08                	mov    DWORD PTR [eax],ecx
c0025948:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002594e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025954:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002595a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002595d:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025960:	50                   	push   eax
c0025961:	68 90 00 00 00       	push   0x90
c0025966:	6a 00                	push   0x0
c0025968:	53                   	push   ebx
c0025969:	e8 fe ad fd ff       	call   c000076c <memset>
c002596e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025972:	b9 0c 00 00 00       	mov    ecx,0xc
c0025977:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025979:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c002597f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025983:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025989:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002598d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025991:	48                   	dec    eax
c0025992:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025997:	89 c1                	mov    ecx,eax
c0025999:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002599f:	25 00 00 c0 ff       	and    eax,0xffc00000
c00259a4:	09 c8                	or     eax,ecx
c00259a6:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00259ac:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00259af:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00259b6:	66 25 00 7f          	and    ax,0x7f00
c00259ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00259be:	66 0d 27 80          	or     ax,0x8027
c00259c2:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00259c6:	66 89 03             	mov    WORD PTR [ebx],ax
c00259c9:	89 d0                	mov    eax,edx
c00259cb:	c1 ea 18             	shr    edx,0x18
c00259ce:	c1 e8 10             	shr    eax,0x10
c00259d1:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00259d4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00259d7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00259db:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00259de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00259e2:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00259e5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00259e9:	83 c4 10             	add    esp,0x10
c00259ec:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00259f0:	31 c0                	xor    eax,eax
c00259f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00259f6:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c00259fc:	80 e2 88             	and    dl,0x88
c00259ff:	74 0a                	je     c0025a0b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025a01:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a06:	74 0a                	je     c0025a12 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025a08:	40                   	inc    eax
c0025a09:	eb eb                	jmp    c00259f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025a0b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a10:	75 0f                	jne    c0025a21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025a12:	83 ec 0c             	sub    esp,0xc
c0025a15:	68 19 d9 02 c0       	push   0xc002d919
c0025a1a:	e8 dc 4d ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0025a1f:	eb 3f                	jmp    c0025a60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025a21:	ba 01 00 00 00       	mov    edx,0x1
c0025a26:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025a2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a2e:	d3 e2                	shl    edx,cl
c0025a30:	c1 e0 07             	shl    eax,0x7
c0025a33:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025a39:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a3d:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025a43:	85 ca                	test   edx,ecx
c0025a45:	74 23                	je     c0025a6a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025a47:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025a4d:	0f ba e1 1e          	bt     ecx,0x1e
c0025a51:	73 ea                	jae    c0025a3d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025a53:	83 ec 0c             	sub    esp,0xc
c0025a56:	68 ab d9 02 c0       	push   0xc002d9ab
c0025a5b:	e8 e1 d3 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0025a60:	83 c4 10             	add    esp,0x10
c0025a63:	b8 01 00 00 00       	mov    eax,0x1
c0025a68:	eb 36                	jmp    c0025aa0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025a6a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025a70:	0f ba e0 1e          	bt     eax,0x1e
c0025a74:	73 0a                	jae    c0025a80 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025a76:	83 ec 0c             	sub    esp,0xc
c0025a79:	68 be d9 02 c0       	push   0xc002d9be
c0025a7e:	eb db                	jmp    c0025a5b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025a80:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025a85:	74 17                	je     c0025a9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025a87:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025a8c:	74 10                	je     c0025a9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025a8e:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025a94:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025a98:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025a9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025a9e:	31 c0                	xor    eax,eax
c0025aa0:	83 c4 2c             	add    esp,0x2c
c0025aa3:	5b                   	pop    ebx
c0025aa4:	5e                   	pop    esi
c0025aa5:	5f                   	pop    edi
c0025aa6:	5d                   	pop    ebp
c0025aa7:	c3                   	ret    

c0025aa8 <SATAPI::eject()>:
c0025aa8:	57                   	push   edi
c0025aa9:	b9 03 00 00 00       	mov    ecx,0x3
c0025aae:	53                   	push   ebx
c0025aaf:	83 ec 14             	sub    esp,0x14
c0025ab2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025ab6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025aba:	fc                   	cld    
c0025abb:	31 c0                	xor    eax,eax
c0025abd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025abf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025ac4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025ac9:	50                   	push   eax
c0025aca:	6a 00                	push   0x0
c0025acc:	6a 00                	push   0x0
c0025ace:	6a 00                	push   0x0
c0025ad0:	6a 00                	push   0x0
c0025ad2:	6a 02                	push   0x2
c0025ad4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025ad8:	50                   	push   eax
c0025ad9:	53                   	push   ebx
c0025ada:	e8 c1 fd ff ff       	call   c00258a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025adf:	83 c4 14             	add    esp,0x14
c0025ae2:	53                   	push   ebx
c0025ae3:	e8 6e fd ff ff       	call   c0025856 <SATAPI::diskRemoved()>
c0025ae8:	83 c4 24             	add    esp,0x24
c0025aeb:	31 c0                	xor    eax,eax
c0025aed:	5b                   	pop    ebx
c0025aee:	5f                   	pop    edi
c0025aef:	c3                   	ret    

c0025af0 <SATAPI::detectMedia()>:
c0025af0:	56                   	push   esi
c0025af1:	53                   	push   ebx
c0025af2:	83 ec 28             	sub    esp,0x28
c0025af5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025af9:	6a 0c                	push   0xc
c0025afb:	6a 00                	push   0x0
c0025afd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025b01:	56                   	push   esi
c0025b02:	e8 65 ac fd ff       	call   c000076c <memset>
c0025b07:	83 c4 0c             	add    esp,0xc
c0025b0a:	6a 00                	push   0x0
c0025b0c:	6a 00                	push   0x0
c0025b0e:	6a 00                	push   0x0
c0025b10:	6a 00                	push   0x0
c0025b12:	6a 00                	push   0x0
c0025b14:	56                   	push   esi
c0025b15:	53                   	push   ebx
c0025b16:	e8 85 fd ff ff       	call   c00258a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b1b:	83 c4 1c             	add    esp,0x1c
c0025b1e:	6a 0c                	push   0xc
c0025b20:	6a 00                	push   0x0
c0025b22:	56                   	push   esi
c0025b23:	e8 44 ac fd ff       	call   c000076c <memset>
c0025b28:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025b2d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025b32:	83 c4 0c             	add    esp,0xc
c0025b35:	6a 01                	push   0x1
c0025b37:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b3b:	50                   	push   eax
c0025b3c:	6a 00                	push   0x0
c0025b3e:	6a 00                	push   0x0
c0025b40:	6a 12                	push   0x12
c0025b42:	56                   	push   esi
c0025b43:	53                   	push   ebx
c0025b44:	e8 57 fd ff ff       	call   c00258a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b49:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b4d:	83 c4 20             	add    esp,0x20
c0025b50:	83 e0 7f             	and    eax,0x7f
c0025b53:	3c 70                	cmp    al,0x70
c0025b55:	74 15                	je     c0025b6c <SATAPI::detectMedia()+0x7c>
c0025b57:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b5e:	75 0c                	jne    c0025b6c <SATAPI::detectMedia()+0x7c>
c0025b60:	83 ec 0c             	sub    esp,0xc
c0025b63:	53                   	push   ebx
c0025b64:	e8 09 fd ff ff       	call   c0025872 <SATAPI::diskInserted()>
c0025b69:	83 c4 10             	add    esp,0x10
c0025b6c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025b70:	83 e0 0f             	and    eax,0xf
c0025b73:	3c 02                	cmp    al,0x2
c0025b75:	75 1b                	jne    c0025b92 <SATAPI::detectMedia()+0xa2>
c0025b77:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025b7c:	75 2d                	jne    c0025bab <SATAPI::detectMedia()+0xbb>
c0025b7e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b85:	74 24                	je     c0025bab <SATAPI::detectMedia()+0xbb>
c0025b87:	83 ec 0c             	sub    esp,0xc
c0025b8a:	53                   	push   ebx
c0025b8b:	e8 c6 fc ff ff       	call   c0025856 <SATAPI::diskRemoved()>
c0025b90:	eb 16                	jmp    c0025ba8 <SATAPI::detectMedia()+0xb8>
c0025b92:	84 c0                	test   al,al
c0025b94:	75 15                	jne    c0025bab <SATAPI::detectMedia()+0xbb>
c0025b96:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b9d:	75 0c                	jne    c0025bab <SATAPI::detectMedia()+0xbb>
c0025b9f:	83 ec 0c             	sub    esp,0xc
c0025ba2:	53                   	push   ebx
c0025ba3:	e8 ca fc ff ff       	call   c0025872 <SATAPI::diskInserted()>
c0025ba8:	83 c4 10             	add    esp,0x10
c0025bab:	83 c4 24             	add    esp,0x24
c0025bae:	5b                   	pop    ebx
c0025baf:	5e                   	pop    esi
c0025bb0:	c3                   	ret    
c0025bb1:	90                   	nop

c0025bb2 <SATAPI::open(int, int, void*)>:
c0025bb2:	56                   	push   esi
c0025bb3:	53                   	push   ebx
c0025bb4:	50                   	push   eax
c0025bb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025bb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bbd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025bc7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025bcd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025bd7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025bdb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025be5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025beb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025bf2:	e8 1b a3 fe ff       	call   c000ff12 <Phys::allocatePage()>
c0025bf7:	89 c6                	mov    esi,eax
c0025bf9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025bff:	81 c6 00 10 00 00    	add    esi,0x1000
c0025c05:	e8 08 a3 fe ff       	call   c000ff12 <Phys::allocatePage()>
c0025c0a:	39 c6                	cmp    esi,eax
c0025c0c:	74 10                	je     c0025c1e <SATAPI::open(int, int, void*)+0x6c>
c0025c0e:	83 ec 0c             	sub    esp,0xc
c0025c11:	68 d3 d9 02 c0       	push   0xc002d9d3
c0025c16:	e8 e0 4b ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0025c1b:	83 c4 10             	add    esp,0x10
c0025c1e:	83 ec 0c             	sub    esp,0xc
c0025c21:	6a 02                	push   0x2
c0025c23:	e8 13 be fe ff       	call   c0011a3b <Virt::allocateKernelVirtualPages(int)>
c0025c28:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025c2e:	6a 03                	push   0x3
c0025c30:	50                   	push   eax
c0025c31:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025c37:	ff 35 f0 ef 02 c0    	push   DWORD PTR ds:0xc002eff0
c0025c3d:	e8 30 c6 fe ff       	call   c0012272 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c42:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c49:	83 c4 14             	add    esp,0x14
c0025c4c:	53                   	push   ebx
c0025c4d:	e8 9e fe ff ff       	call   c0025af0 <SATAPI::detectMedia()>
c0025c52:	83 c4 14             	add    esp,0x14
c0025c55:	31 c0                	xor    eax,eax
c0025c57:	5b                   	pop    ebx
c0025c58:	5e                   	pop    esi
c0025c59:	c3                   	ret    

c0025c5a <SATAPI::read(unsigned long long, int, void*)>:
c0025c5a:	55                   	push   ebp
c0025c5b:	57                   	push   edi
c0025c5c:	56                   	push   esi
c0025c5d:	53                   	push   ebx
c0025c5e:	83 ec 1c             	sub    esp,0x1c
c0025c61:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c65:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c69:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025c6d:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c74:	74 19                	je     c0025c8f <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025c76:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025c7b:	7e 2e                	jle    c0025cab <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c7d:	83 ec 0c             	sub    esp,0xc
c0025c80:	68 e9 d9 02 c0       	push   0xc002d9e9
c0025c85:	e8 71 4b ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0025c8a:	83 c4 10             	add    esp,0x10
c0025c8d:	eb 1c                	jmp    c0025cab <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c8f:	83 ec 0c             	sub    esp,0xc
c0025c92:	55                   	push   ebp
c0025c93:	e8 58 fe ff ff       	call   c0025af0 <SATAPI::detectMedia()>
c0025c98:	83 c4 10             	add    esp,0x10
c0025c9b:	b8 02 00 00 00       	mov    eax,0x2
c0025ca0:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025ca7:	75 cd                	jne    c0025c76 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025ca9:	eb 49                	jmp    c0025cf4 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025cab:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025caf:	b9 03 00 00 00       	mov    ecx,0x3
c0025cb4:	fc                   	cld    
c0025cb5:	31 c0                	xor    eax,eax
c0025cb7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025cb9:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025cbe:	89 d8                	mov    eax,ebx
c0025cc0:	86 e0                	xchg   al,ah
c0025cc2:	c1 c0 10             	rol    eax,0x10
c0025cc5:	86 e0                	xchg   al,ah
c0025cc7:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025ccb:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025ccf:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025cd3:	50                   	push   eax
c0025cd4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025cd8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025cdc:	56                   	push   esi
c0025cdd:	53                   	push   ebx
c0025cde:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025ce2:	c1 e0 0b             	shl    eax,0xb
c0025ce5:	50                   	push   eax
c0025ce6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025cea:	50                   	push   eax
c0025ceb:	55                   	push   ebp
c0025cec:	e8 af fb ff ff       	call   c00258a0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025cf1:	83 c4 20             	add    esp,0x20
c0025cf4:	83 c4 1c             	add    esp,0x1c
c0025cf7:	5b                   	pop    ebx
c0025cf8:	5e                   	pop    esi
c0025cf9:	5f                   	pop    edi
c0025cfa:	5d                   	pop    ebp
c0025cfb:	c3                   	ret    

c0025cfc <AVX::open(int, int, void*)>:
c0025cfc:	83 ec 0c             	sub    esp,0xc
c0025cff:	e8 44 11 00 00       	call   c0026e48 <avxInit>
c0025d04:	b8 00 00 00 00       	mov    eax,0x0
c0025d09:	83 c4 0c             	add    esp,0xc
c0025d0c:	c3                   	ret    
c0025d0d:	90                   	nop

c0025d0e <AVX::close(int, int, void*)>:
c0025d0e:	83 ec 0c             	sub    esp,0xc
c0025d11:	e8 33 11 00 00       	call   c0026e49 <avxClose>
c0025d16:	b8 00 00 00 00       	mov    eax,0x0
c0025d1b:	83 c4 0c             	add    esp,0xc
c0025d1e:	c3                   	ret    
c0025d1f:	90                   	nop

c0025d20 <AVX::available()>:
c0025d20:	83 ec 0c             	sub    esp,0xc
c0025d23:	e8 18 11 00 00       	call   c0026e40 <avxDetect>
c0025d28:	85 c0                	test   eax,eax
c0025d2a:	0f 95 c0             	setne  al
c0025d2d:	83 c4 0c             	add    esp,0xc
c0025d30:	c3                   	ret    
c0025d31:	90                   	nop

c0025d32 <AVX::save(void*)>:
c0025d32:	83 ec 0c             	sub    esp,0xc
c0025d35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d39:	83 ec 0c             	sub    esp,0xc
c0025d3c:	50                   	push   eax
c0025d3d:	e8 04 11 00 00       	call   c0026e46 <avxSave>
c0025d42:	83 c4 10             	add    esp,0x10
c0025d45:	90                   	nop
c0025d46:	83 c4 0c             	add    esp,0xc
c0025d49:	c3                   	ret    

c0025d4a <AVX::load(void*)>:
c0025d4a:	83 ec 0c             	sub    esp,0xc
c0025d4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d51:	83 ec 0c             	sub    esp,0xc
c0025d54:	50                   	push   eax
c0025d55:	e8 ed 10 00 00       	call   c0026e47 <avxLoad>
c0025d5a:	83 c4 10             	add    esp,0x10
c0025d5d:	90                   	nop
c0025d5e:	83 c4 0c             	add    esp,0xc
c0025d61:	c3                   	ret    

c0025d62 <AVX::AVX()>:
c0025d62:	83 ec 0c             	sub    esp,0xc
c0025d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d69:	83 ec 08             	sub    esp,0x8
c0025d6c:	68 4c da 02 c0       	push   0xc002da4c
c0025d71:	50                   	push   eax
c0025d72:	e8 fb e9 fe ff       	call   c0014772 <FPU::FPU(char const*)>
c0025d77:	83 c4 10             	add    esp,0x10
c0025d7a:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0025d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d83:	89 10                	mov    DWORD PTR [eax],edx
c0025d85:	90                   	nop
c0025d86:	83 c4 0c             	add    esp,0xc
c0025d89:	c3                   	ret    

c0025d8a <MMX::available()>:
c0025d8a:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0025d8f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025d95:	83 e0 20             	and    eax,0x20
c0025d98:	84 c0                	test   al,al
c0025d9a:	0f 95 c0             	setne  al
c0025d9d:	c3                   	ret    

c0025d9e <MMX::open(int, int, void*)>:
c0025d9e:	83 ec 0c             	sub    esp,0xc
c0025da1:	e8 2c 11 00 00       	call   c0026ed2 <x87Init>
c0025da6:	b8 00 00 00 00       	mov    eax,0x0
c0025dab:	83 c4 0c             	add    esp,0xc
c0025dae:	c3                   	ret    
c0025daf:	90                   	nop

c0025db0 <MMX::close(int, int, void*)>:
c0025db0:	83 ec 0c             	sub    esp,0xc
c0025db3:	e8 34 11 00 00       	call   c0026eec <x87Close>
c0025db8:	b8 00 00 00 00       	mov    eax,0x0
c0025dbd:	83 c4 0c             	add    esp,0xc
c0025dc0:	c3                   	ret    
c0025dc1:	90                   	nop

c0025dc2 <MMX::save(void*)>:
c0025dc2:	83 ec 0c             	sub    esp,0xc
c0025dc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dc9:	83 ec 0c             	sub    esp,0xc
c0025dcc:	50                   	push   eax
c0025dcd:	e8 ef 10 00 00       	call   c0026ec1 <x87Save>
c0025dd2:	83 c4 10             	add    esp,0x10
c0025dd5:	90                   	nop
c0025dd6:	83 c4 0c             	add    esp,0xc
c0025dd9:	c3                   	ret    

c0025dda <MMX::load(void*)>:
c0025dda:	83 ec 0c             	sub    esp,0xc
c0025ddd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025de1:	83 ec 0c             	sub    esp,0xc
c0025de4:	50                   	push   eax
c0025de5:	e8 e0 10 00 00       	call   c0026eca <x87Load>
c0025dea:	83 c4 10             	add    esp,0x10
c0025ded:	90                   	nop
c0025dee:	83 c4 0c             	add    esp,0xc
c0025df1:	c3                   	ret    

c0025df2 <MMX::MMX()>:
c0025df2:	83 ec 0c             	sub    esp,0xc
c0025df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df9:	83 ec 08             	sub    esp,0x8
c0025dfc:	68 8c da 02 c0       	push   0xc002da8c
c0025e01:	50                   	push   eax
c0025e02:	e8 6b e9 fe ff       	call   c0014772 <FPU::FPU(char const*)>
c0025e07:	83 c4 10             	add    esp,0x10
c0025e0a:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c0025e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e13:	89 10                	mov    DWORD PTR [eax],edx
c0025e15:	90                   	nop
c0025e16:	83 c4 0c             	add    esp,0xc
c0025e19:	c3                   	ret    

c0025e1a <SSE::open(int, int, void*)>:
c0025e1a:	83 ec 0c             	sub    esp,0xc
c0025e1d:	e8 62 10 00 00       	call   c0026e84 <sseInit>
c0025e22:	b8 00 00 00 00       	mov    eax,0x0
c0025e27:	83 c4 0c             	add    esp,0xc
c0025e2a:	c3                   	ret    
c0025e2b:	90                   	nop

c0025e2c <SSE::close(int, int, void*)>:
c0025e2c:	83 ec 0c             	sub    esp,0xc
c0025e2f:	e8 60 10 00 00       	call   c0026e94 <sseClose>
c0025e34:	b8 00 00 00 00       	mov    eax,0x0
c0025e39:	83 c4 0c             	add    esp,0xc
c0025e3c:	c3                   	ret    
c0025e3d:	90                   	nop

c0025e3e <SSE::available()>:
c0025e3e:	83 ec 1c             	sub    esp,0x1c
c0025e41:	e8 1a 10 00 00       	call   c0026e60 <absolutelyNoChanceInHell>
c0025e46:	85 c0                	test   eax,eax
c0025e48:	0f 95 c0             	setne  al
c0025e4b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e4f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e53:	83 c4 1c             	add    esp,0x1c
c0025e56:	c3                   	ret    
c0025e57:	90                   	nop

c0025e58 <SSE::save(void*)>:
c0025e58:	83 ec 0c             	sub    esp,0xc
c0025e5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e5f:	83 ec 0c             	sub    esp,0xc
c0025e62:	50                   	push   eax
c0025e63:	e8 10 10 00 00       	call   c0026e78 <sseSave>
c0025e68:	83 c4 10             	add    esp,0x10
c0025e6b:	90                   	nop
c0025e6c:	83 c4 0c             	add    esp,0xc
c0025e6f:	c3                   	ret    

c0025e70 <SSE::load(void*)>:
c0025e70:	83 ec 0c             	sub    esp,0xc
c0025e73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e77:	83 ec 0c             	sub    esp,0xc
c0025e7a:	50                   	push   eax
c0025e7b:	e8 fe 0f 00 00       	call   c0026e7e <sseLoad>
c0025e80:	83 c4 10             	add    esp,0x10
c0025e83:	90                   	nop
c0025e84:	83 c4 0c             	add    esp,0xc
c0025e87:	c3                   	ret    

c0025e88 <SSE::SSE()>:
c0025e88:	83 ec 0c             	sub    esp,0xc
c0025e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8f:	83 ec 08             	sub    esp,0x8
c0025e92:	68 cc da 02 c0       	push   0xc002dacc
c0025e97:	50                   	push   eax
c0025e98:	e8 d5 e8 fe ff       	call   c0014772 <FPU::FPU(char const*)>
c0025e9d:	83 c4 10             	add    esp,0x10
c0025ea0:	ba dc da 02 c0       	mov    edx,0xc002dadc
c0025ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea9:	89 10                	mov    DWORD PTR [eax],edx
c0025eab:	90                   	nop
c0025eac:	83 c4 0c             	add    esp,0xc
c0025eaf:	c3                   	ret    

c0025eb0 <x87::open(int, int, void*)>:
c0025eb0:	83 ec 0c             	sub    esp,0xc
c0025eb3:	e8 1a 10 00 00       	call   c0026ed2 <x87Init>
c0025eb8:	b8 00 00 00 00       	mov    eax,0x0
c0025ebd:	83 c4 0c             	add    esp,0xc
c0025ec0:	c3                   	ret    
c0025ec1:	90                   	nop

c0025ec2 <x87::close(int, int, void*)>:
c0025ec2:	83 ec 0c             	sub    esp,0xc
c0025ec5:	e8 22 10 00 00       	call   c0026eec <x87Close>
c0025eca:	b8 00 00 00 00       	mov    eax,0x0
c0025ecf:	83 c4 0c             	add    esp,0xc
c0025ed2:	c3                   	ret    
c0025ed3:	90                   	nop

c0025ed4 <x87::available()>:
c0025ed4:	83 ec 0c             	sub    esp,0xc
c0025ed7:	e8 ca 0f 00 00       	call   c0026ea6 <x87Detect>
c0025edc:	85 c0                	test   eax,eax
c0025ede:	0f 95 c0             	setne  al
c0025ee1:	83 c4 0c             	add    esp,0xc
c0025ee4:	c3                   	ret    
c0025ee5:	90                   	nop

c0025ee6 <x87::save(void*)>:
c0025ee6:	83 ec 0c             	sub    esp,0xc
c0025ee9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025eed:	83 ec 0c             	sub    esp,0xc
c0025ef0:	50                   	push   eax
c0025ef1:	e8 cb 0f 00 00       	call   c0026ec1 <x87Save>
c0025ef6:	83 c4 10             	add    esp,0x10
c0025ef9:	90                   	nop
c0025efa:	83 c4 0c             	add    esp,0xc
c0025efd:	c3                   	ret    

c0025efe <x87::load(void*)>:
c0025efe:	83 ec 0c             	sub    esp,0xc
c0025f01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f05:	83 ec 0c             	sub    esp,0xc
c0025f08:	50                   	push   eax
c0025f09:	e8 bc 0f 00 00       	call   c0026eca <x87Load>
c0025f0e:	83 c4 10             	add    esp,0x10
c0025f11:	90                   	nop
c0025f12:	83 c4 0c             	add    esp,0xc
c0025f15:	c3                   	ret    

c0025f16 <x87::x87()>:
c0025f16:	83 ec 0c             	sub    esp,0xc
c0025f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1d:	83 ec 08             	sub    esp,0x8
c0025f20:	68 0c db 02 c0       	push   0xc002db0c
c0025f25:	50                   	push   eax
c0025f26:	e8 47 e8 fe ff       	call   c0014772 <FPU::FPU(char const*)>
c0025f2b:	83 c4 10             	add    esp,0x10
c0025f2e:	ba 1c db 02 c0       	mov    edx,0xc002db1c
c0025f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f37:	89 10                	mov    DWORD PTR [eax],edx
c0025f39:	90                   	nop
c0025f3a:	83 c4 0c             	add    esp,0xc
c0025f3d:	c3                   	ret    

c0025f3e <APIC::disable()>:
c0025f3e:	90                   	nop
c0025f3f:	c3                   	ret    

c0025f40 <APIC::close(int, int, void*)>:
c0025f40:	55                   	push   ebp
c0025f41:	89 e5                	mov    ebp,esp
c0025f43:	83 ec 08             	sub    esp,0x8
c0025f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f49:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f4b:	83 c0 3c             	add    eax,0x3c
c0025f4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f50:	83 ec 0c             	sub    esp,0xc
c0025f53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f56:	ff d0                	call   eax
c0025f58:	83 c4 10             	add    esp,0x10
c0025f5b:	b8 00 00 00 00       	mov    eax,0x0
c0025f60:	c9                   	leave  
c0025f61:	c3                   	ret    

c0025f62 <IOAPIC::close(int, int, void*)>:
c0025f62:	b8 00 00 00 00       	mov    eax,0x0
c0025f67:	c3                   	ret    

c0025f68 <APIC::io_wait()>:
c0025f68:	eb 00                	jmp    c0025f6a <APIC::io_wait()+0x2>
c0025f6a:	eb 00                	jmp    c0025f6c <APIC::io_wait()+0x4>
c0025f6c:	90                   	nop
c0025f6d:	c3                   	ret    

c0025f6e <APIC::getBase()>:
c0025f6e:	55                   	push   ebp
c0025f6f:	89 e5                	mov    ebp,esp
c0025f71:	83 ec 18             	sub    esp,0x18
c0025f74:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0025f79:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f7f:	83 e0 08             	and    eax,0x8
c0025f82:	84 c0                	test   al,al
c0025f84:	75 07                	jne    c0025f8d <APIC::getBase()+0x1f>
c0025f86:	b8 00 00 00 00       	mov    eax,0x0
c0025f8b:	eb 21                	jmp    c0025fae <APIC::getBase()+0x40>
c0025f8d:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0025f92:	83 ec 08             	sub    esp,0x8
c0025f95:	6a 1b                	push   0x1b
c0025f97:	50                   	push   eax
c0025f98:	e8 af 8e fe ff       	call   c000ee4c <Computer::rdmsr(unsigned int)>
c0025f9d:	83 c4 10             	add    esp,0x10
c0025fa0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025fa3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025fa6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fa9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025fae:	c9                   	leave  
c0025faf:	c3                   	ret    

c0025fb0 <APIC::eoi(unsigned char)>:
c0025fb0:	55                   	push   ebp
c0025fb1:	89 e5                	mov    ebp,esp
c0025fb3:	83 ec 28             	sub    esp,0x28
c0025fb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fb9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025fbc:	83 ec 0c             	sub    esp,0xc
c0025fbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fc2:	e8 a7 ff ff ff       	call   c0025f6e <APIC::getBase()>
c0025fc7:	83 c4 10             	add    esp,0x10
c0025fca:	05 b0 00 00 00       	add    eax,0xb0
c0025fcf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025fd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fd5:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025fdb:	90                   	nop
c0025fdc:	c9                   	leave  
c0025fdd:	c3                   	ret    

c0025fde <APIC::open(int, int, void*)>:
c0025fde:	55                   	push   ebp
c0025fdf:	89 e5                	mov    ebp,esp
c0025fe1:	57                   	push   edi
c0025fe2:	56                   	push   esi
c0025fe3:	53                   	push   ebx
c0025fe4:	83 ec 2c             	sub    esp,0x2c
c0025fe7:	83 ec 0c             	sub    esp,0xc
c0025fea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fed:	e8 7c ff ff ff       	call   c0025f6e <APIC::getBase()>
c0025ff2:	83 c4 10             	add    esp,0x10
c0025ff5:	89 c2                	mov    edx,eax
c0025ff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ffa:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026000:	0f b6 f8             	movzx  edi,al
c0026003:	89 d0                	mov    eax,edx
c0026005:	ba 00 00 00 00       	mov    edx,0x0
c002600a:	89 c1                	mov    ecx,eax
c002600c:	80 e5 ff             	and    ch,0xff
c002600f:	89 cb                	mov    ebx,ecx
c0026011:	0f b6 f2             	movzx  esi,dl
c0026014:	89 d8                	mov    eax,ebx
c0026016:	89 f2                	mov    edx,esi
c0026018:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002601b:	8d 5f 08             	lea    ebx,[edi+0x8]
c002601e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026022:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026026:	83 e0 00             	and    eax,0x0
c0026029:	09 d0                	or     eax,edx
c002602b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002602f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026032:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026038:	8d 50 01             	lea    edx,[eax+0x1]
c002603b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002603e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026044:	0f b6 d0             	movzx  edx,al
c0026047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002604a:	83 c2 08             	add    edx,0x8
c002604d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026051:	0f b6 c9             	movzx  ecx,cl
c0026054:	81 c9 00 00 01 00    	or     ecx,0x10000
c002605a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002605e:	83 ec 0c             	sub    esp,0xc
c0026061:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026064:	e8 05 ff ff ff       	call   c0025f6e <APIC::getBase()>
c0026069:	83 c4 10             	add    esp,0x10
c002606c:	05 f0 00 00 00       	add    eax,0xf0
c0026071:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026074:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026077:	8b 00                	mov    eax,DWORD PTR [eax]
c0026079:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002607c:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026083:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002608a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002608d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026090:	89 10                	mov    DWORD PTR [eax],edx
c0026092:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0026099:	a1 50 17 03 c0       	mov    eax,ds:0xc0031750
c002609e:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00260a1:	7d 7c                	jge    c002611f <APIC::open(int, int, void*)+0x141>
c00260a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260a6:	8b 04 85 60 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8a0]
c00260ad:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00260b0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260b3:	8b 04 85 60 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8a0]
c00260ba:	c1 e8 08             	shr    eax,0x8
c00260bd:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00260c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260c4:	8b 04 85 60 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8a0]
c00260cb:	c1 e8 18             	shr    eax,0x18
c00260ce:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00260d1:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00260d5:	75 40                	jne    c0026117 <APIC::open(int, int, void*)+0x139>
c00260d7:	83 ec 0c             	sub    esp,0xc
c00260da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260dd:	e8 8c fe ff ff       	call   c0025f6e <APIC::getBase()>
c00260e2:	83 c4 10             	add    esp,0x10
c00260e5:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00260e9:	75 07                	jne    c00260f2 <APIC::open(int, int, void*)+0x114>
c00260eb:	ba 60 03 00 00       	mov    edx,0x360
c00260f0:	eb 05                	jmp    c00260f7 <APIC::open(int, int, void*)+0x119>
c00260f2:	ba 50 03 00 00       	mov    edx,0x350
c00260f7:	01 d0                	add    eax,edx
c00260f9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00260fc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0026101:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026104:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002610b:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c002610f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026112:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026115:	89 10                	mov    DWORD PTR [eax],edx
c0026117:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002611a:	e9 7a ff ff ff       	jmp    c0026099 <APIC::open(int, int, void*)+0xbb>
c002611f:	b8 00 00 00 00       	mov    eax,0x0
c0026124:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026127:	5b                   	pop    ebx
c0026128:	5e                   	pop    esi
c0026129:	5f                   	pop    edi
c002612a:	5d                   	pop    ebp
c002612b:	c3                   	ret    

c002612c <IOAPIC::IOAPIC()>:
c002612c:	83 ec 0c             	sub    esp,0xc
c002612f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026133:	83 ec 08             	sub    esp,0x8
c0026136:	68 4c db 02 c0       	push   0xc002db4c
c002613b:	50                   	push   eax
c002613c:	e8 11 e3 fe ff       	call   c0014452 <Device::Device(char const*)>
c0026141:	83 c4 10             	add    esp,0x10
c0026144:	ba 74 dc 02 c0       	mov    edx,0xc002dc74
c0026149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002614d:	89 10                	mov    DWORD PTR [eax],edx
c002614f:	90                   	nop
c0026150:	83 c4 0c             	add    esp,0xc
c0026153:	c3                   	ret    

c0026154 <APIC::APIC()>:
c0026154:	53                   	push   ebx
c0026155:	83 ec 18             	sub    esp,0x18
c0026158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002615c:	83 ec 08             	sub    esp,0x8
c002615f:	68 54 db 02 c0       	push   0xc002db54
c0026164:	50                   	push   eax
c0026165:	e8 62 ea fe ff       	call   c0014bcc <InterruptController::InterruptController(char const*)>
c002616a:	83 c4 10             	add    esp,0x10
c002616d:	ba 2c dc 02 c0       	mov    edx,0xc002dc2c
c0026172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026176:	89 10                	mov    DWORD PTR [eax],edx
c0026178:	a0 20 32 03 c0       	mov    al,ds:0xc0033220
c002617d:	83 f0 01             	xor    eax,0x1
c0026180:	84 c0                	test   al,al
c0026182:	0f 84 a1 00 00 00    	je     c0026229 <APIC::APIC()+0xd5>
c0026188:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002618d:	a0 00 18 03 c0       	mov    al,ds:0xc0031800
c0026192:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0026196:	0f 83 86 00 00 00    	jae    c0026222 <APIC::APIC()+0xce>
c002619c:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00261a4:	83 ec 0c             	sub    esp,0xc
c00261a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261ab:	e8 f6 96 fe ff       	call   c000f8a6 <malloc>
c00261b0:	83 c4 10             	add    esp,0x10
c00261b3:	89 c3                	mov    ebx,eax
c00261b5:	83 ec 0c             	sub    esp,0xc
c00261b8:	53                   	push   ebx
c00261b9:	e8 6e ff ff ff       	call   c002612c <IOAPIC::IOAPIC()>
c00261be:	83 c4 10             	add    esp,0x10
c00261c1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00261c5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00261ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00261ce:	89 14 85 00 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce00],edx
c00261d5:	a1 e0 31 03 c0       	mov    eax,ds:0xc00331e0
c00261da:	40                   	inc    eax
c00261db:	a3 e0 31 03 c0       	mov    ds:0xc00331e0,eax
c00261e0:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c00261e5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00261eb:	83 ec 08             	sub    esp,0x8
c00261ee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261f2:	50                   	push   eax
c00261f3:	e8 6a e0 fe ff       	call   c0014262 <Device::addChild(Device*)>
c00261f8:	83 c4 10             	add    esp,0x10
c00261fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0026201:	83 c0 08             	add    eax,0x8
c0026204:	8b 00                	mov    eax,DWORD PTR [eax]
c0026206:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002620b:	6a 00                	push   0x0
c002620d:	6a 00                	push   0x0
c002620f:	52                   	push   edx
c0026210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026214:	ff d0                	call   eax
c0026216:	83 c4 10             	add    esp,0x10
c0026219:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002621d:	e9 6b ff ff ff       	jmp    c002618d <APIC::APIC()+0x39>
c0026222:	c6 05 20 32 03 c0 01 	mov    BYTE PTR ds:0xc0033220,0x1
c0026229:	90                   	nop
c002622a:	83 c4 18             	add    esp,0x18
c002622d:	5b                   	pop    ebx
c002622e:	c3                   	ret    
c002622f:	90                   	nop

c0026230 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026230:	55                   	push   ebp
c0026231:	89 e5                	mov    ebp,esp
c0026233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026236:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002623c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002623f:	72 1d                	jb     c002625e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026244:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002624a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002624d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026253:	01 d0                	add    eax,edx
c0026255:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026258:	73 04                	jae    c002625e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002625a:	b0 01                	mov    al,0x1
c002625c:	eb 02                	jmp    c0026260 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002625e:	b0 00                	mov    al,0x0
c0026260:	5d                   	pop    ebp
c0026261:	c3                   	ret    

c0026262 <IOAPIC::read(int)>:
c0026262:	55                   	push   ebp
c0026263:	89 e5                	mov    ebp,esp
c0026265:	83 ec 10             	sub    esp,0x10
c0026268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002626b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026271:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026274:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026277:	0f b6 d0             	movzx  edx,al
c002627a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002627d:	89 10                	mov    DWORD PTR [eax],edx
c002627f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026282:	83 c0 10             	add    eax,0x10
c0026285:	8b 00                	mov    eax,DWORD PTR [eax]
c0026287:	c9                   	leave  
c0026288:	c3                   	ret    
c0026289:	90                   	nop

c002628a <IOAPIC::open(int, int, void*)>:
c002628a:	55                   	push   ebp
c002628b:	89 e5                	mov    ebp,esp
c002628d:	57                   	push   edi
c002628e:	56                   	push   esi
c002628f:	53                   	push   ebx
c0026290:	83 ec 0c             	sub    esp,0xc
c0026293:	83 ec 0c             	sub    esp,0xc
c0026296:	68 7f db 02 c0       	push   0xc002db7f
c002629b:	e8 a1 cb fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c00262a0:	83 c4 10             	add    esp,0x10
c00262a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00262a9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262b2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262b8:	8b 14 85 40 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce7c0]
c00262bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262cb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262d1:	8b 14 85 c0 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce740]
c00262d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262db:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00262e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262e4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00262ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262ed:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262f3:	0f b6 f8             	movzx  edi,al
c00262f6:	89 d0                	mov    eax,edx
c00262f8:	ba 00 00 00 00       	mov    edx,0x0
c00262fd:	89 c1                	mov    ecx,eax
c00262ff:	80 e5 ff             	and    ch,0xff
c0026302:	89 cb                	mov    ebx,ecx
c0026304:	0f b6 f2             	movzx  esi,dl
c0026307:	89 d8                	mov    eax,ebx
c0026309:	89 f2                	mov    edx,esi
c002630b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002630e:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026311:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026315:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026319:	83 e0 00             	and    eax,0x0
c002631c:	09 d0                	or     eax,edx
c002631e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026322:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026325:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002632b:	8d 50 01             	lea    edx,[eax+0x1]
c002632e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026331:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026337:	0f b6 d0             	movzx  edx,al
c002633a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002633d:	83 c2 08             	add    edx,0x8
c0026340:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026344:	0f b6 c9             	movzx  ecx,cl
c0026347:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002634d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026351:	83 ec 08             	sub    esp,0x8
c0026354:	6a 01                	push   0x1
c0026356:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026359:	e8 04 ff ff ff       	call   c0026262 <IOAPIC::read(int)>
c002635e:	83 c4 10             	add    esp,0x10
c0026361:	c1 f8 10             	sar    eax,0x10
c0026364:	0f b6 c0             	movzx  eax,al
c0026367:	8d 50 01             	lea    edx,[eax+0x1]
c002636a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002636d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026373:	b8 00 00 00 00       	mov    eax,0x0
c0026378:	8d 65 f4             	lea    esp,[ebp-0xc]
c002637b:	5b                   	pop    ebx
c002637c:	5e                   	pop    esi
c002637d:	5f                   	pop    edi
c002637e:	5d                   	pop    ebp
c002637f:	c3                   	ret    

c0026380 <IOAPIC::write(int, int)>:
c0026380:	55                   	push   ebp
c0026381:	89 e5                	mov    ebp,esp
c0026383:	83 ec 10             	sub    esp,0x10
c0026386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026389:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002638f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026392:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026395:	0f b6 d0             	movzx  edx,al
c0026398:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002639b:	89 10                	mov    DWORD PTR [eax],edx
c002639d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263a0:	8d 50 10             	lea    edx,[eax+0x10]
c00263a3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263a6:	89 02                	mov    DWORD PTR [edx],eax
c00263a8:	90                   	nop
c00263a9:	c9                   	leave  
c00263aa:	c3                   	ret    
c00263ab:	90                   	nop

c00263ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00263ac:	55                   	push   ebp
c00263ad:	89 e5                	mov    ebp,esp
c00263af:	53                   	push   ebx
c00263b0:	83 ec 2c             	sub    esp,0x2c
c00263b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263b6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00263b9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00263bc:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00263bf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00263c2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263c5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00263c8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00263cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00263ce:	88 d8                	mov    al,bl
c00263d0:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00263d3:	88 c8                	mov    al,cl
c00263d5:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00263d8:	88 d0                	mov    al,dl
c00263da:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00263dd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263e1:	83 c0 08             	add    eax,0x8
c00263e4:	01 c0                	add    eax,eax
c00263e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263e9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263ed:	83 c0 08             	add    eax,0x8
c00263f0:	01 c0                	add    eax,eax
c00263f2:	40                   	inc    eax
c00263f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00263f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263f9:	50                   	push   eax
c00263fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263fd:	e8 60 fe ff ff       	call   c0026262 <IOAPIC::read(int)>
c0026402:	83 c4 08             	add    esp,0x8
c0026405:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026408:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002640f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026412:	c1 e0 18             	shl    eax,0x18
c0026415:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026418:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002641b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002641e:	52                   	push   edx
c002641f:	50                   	push   eax
c0026420:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026423:	e8 58 ff ff ff       	call   c0026380 <IOAPIC::write(int, int)>
c0026428:	83 c4 0c             	add    esp,0xc
c002642b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002642e:	50                   	push   eax
c002642f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026432:	e8 2b fe ff ff       	call   c0026262 <IOAPIC::read(int)>
c0026437:	83 c4 08             	add    esp,0x8
c002643a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002643d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026444:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002644b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026452:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026456:	74 09                	je     c0026461 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026458:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002645f:	eb 07                	jmp    c0026468 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026461:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026468:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002646c:	74 09                	je     c0026477 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002646e:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026475:	eb 07                	jmp    c002647e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026477:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002647e:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026485:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0026489:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002648c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002648f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026492:	52                   	push   edx
c0026493:	50                   	push   eax
c0026494:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026497:	e8 e4 fe ff ff       	call   c0026380 <IOAPIC::write(int, int)>
c002649c:	83 c4 0c             	add    esp,0xc
c002649f:	90                   	nop
c00264a0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00264a3:	c9                   	leave  
c00264a4:	c3                   	ret    
c00264a5:	90                   	nop

c00264a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00264a6:	55                   	push   ebp
c00264a7:	89 e5                	mov    ebp,esp
c00264a9:	57                   	push   edi
c00264aa:	56                   	push   esi
c00264ab:	53                   	push   ebx
c00264ac:	83 ec 2c             	sub    esp,0x2c
c00264af:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00264b2:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00264b5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264b9:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00264bd:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00264c1:	74 5a                	je     c002651d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264c3:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00264c7:	7f 44                	jg     c002650d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00264c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264cc:	05 c0 e0 02 c0       	add    eax,0xc002e0c0
c00264d1:	8a 00                	mov    al,BYTE PTR [eax]
c00264d3:	0f b6 c0             	movzx  eax,al
c00264d6:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00264d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264dc:	66 8b 84 00 e0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce820]
c00264e4:	0f b7 c0             	movzx  eax,ax
c00264e7:	83 e0 02             	and    eax,0x2
c00264ea:	85 c0                	test   eax,eax
c00264ec:	74 04                	je     c00264f2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00264ee:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00264f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264f5:	66 8b 84 00 e0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce820]
c00264fd:	0f b7 c0             	movzx  eax,ax
c0026500:	83 e0 08             	and    eax,0x8
c0026503:	85 c0                	test   eax,eax
c0026505:	74 16                	je     c002651d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026507:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002650b:	eb 10                	jmp    c002651d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002650d:	83 ec 0c             	sub    esp,0xc
c0026510:	68 90 db 02 c0       	push   0xc002db90
c0026515:	e8 e1 42 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c002651a:	83 c4 10             	add    esp,0x10
c002651d:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026521:	a1 e0 31 03 c0       	mov    eax,ds:0xc00331e0
c0026526:	83 ec 08             	sub    esp,0x8
c0026529:	50                   	push   eax
c002652a:	68 c8 db 02 c0       	push   0xc002dbc8
c002652f:	e8 0d c9 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0026534:	83 c4 10             	add    esp,0x10
c0026537:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c002653e:	a1 e0 31 03 c0       	mov    eax,ds:0xc00331e0
c0026543:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026546:	7d 67                	jge    c00265af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026548:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002654b:	8b 04 85 00 32 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcce00]
c0026552:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026555:	83 ec 08             	sub    esp,0x8
c0026558:	52                   	push   edx
c0026559:	50                   	push   eax
c002655a:	e8 d1 fc ff ff       	call   c0026230 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002655f:	83 c4 10             	add    esp,0x10
c0026562:	84 c0                	test   al,al
c0026564:	74 44                	je     c00265aa <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026566:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026569:	8b 1c 85 00 32 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcce00]
c0026570:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026574:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026577:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002657b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002657e:	83 c0 20             	add    eax,0x20
c0026581:	0f b6 f0             	movzx  esi,al
c0026584:	b8 00 00 00 00       	mov    eax,0x0
c0026589:	99                   	cdq    
c002658a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002658d:	0f b6 c9             	movzx  ecx,cl
c0026590:	83 ec 04             	sub    esp,0x4
c0026593:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026596:	57                   	push   edi
c0026597:	56                   	push   esi
c0026598:	52                   	push   edx
c0026599:	50                   	push   eax
c002659a:	51                   	push   ecx
c002659b:	53                   	push   ebx
c002659c:	e8 0b fe ff ff       	call   c00263ac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00265a1:	83 c4 20             	add    esp,0x20
c00265a4:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00265a8:	eb 05                	jmp    c00265af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00265aa:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00265ad:	eb 8f                	jmp    c002653e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00265af:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00265b2:	83 f0 01             	xor    eax,0x1
c00265b5:	84 c0                	test   al,al
c00265b7:	74 10                	je     c00265c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00265b9:	83 ec 0c             	sub    esp,0xc
c00265bc:	68 df db 02 c0       	push   0xc002dbdf
c00265c1:	e8 35 42 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00265c6:	83 c4 10             	add    esp,0x10
c00265c9:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00265cd:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00265d4:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00265d8:	7f 65                	jg     c002663f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00265da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265e0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265e7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265ea:	01 ca                	add    edx,ecx
c00265ec:	83 c2 54             	add    edx,0x54
c00265ef:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00265f3:	85 c0                	test   eax,eax
c00265f5:	75 43                	jne    c002663a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00265f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265fa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265fd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026604:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026607:	01 ca                	add    edx,ecx
c0026609:	8d 4a 54             	lea    ecx,[edx+0x54]
c002660c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c002660f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026616:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026619:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026620:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026623:	01 ca                	add    edx,ecx
c0026625:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c002662b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002662e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026632:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026635:	83 e8 20             	sub    eax,0x20
c0026638:	eb 1a                	jmp    c0026654 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002663a:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002663d:	eb 95                	jmp    c00265d4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c002663f:	83 ec 0c             	sub    esp,0xc
c0026642:	68 ec db 02 c0       	push   0xc002dbec
c0026647:	e8 af 41 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c002664c:	83 c4 10             	add    esp,0x10
c002664f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026654:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026657:	5b                   	pop    ebx
c0026658:	5e                   	pop    esi
c0026659:	5f                   	pop    edi
c002665a:	5d                   	pop    ebp
c002665b:	c3                   	ret    

c002665c <PIC::disable()>:
c002665c:	55                   	push   ebp
c002665d:	89 e5                	mov    ebp,esp
c002665f:	83 ec 10             	sub    esp,0x10
c0026662:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026668:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002666c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002666f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026673:	ee                   	out    dx,al
c0026674:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002667a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002667e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026681:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026685:	ee                   	out    dx,al
c0026686:	90                   	nop
c0026687:	c9                   	leave  
c0026688:	c3                   	ret    
c0026689:	90                   	nop

c002668a <PIC::close(int, int, void*)>:
c002668a:	55                   	push   ebp
c002668b:	89 e5                	mov    ebp,esp
c002668d:	83 ec 08             	sub    esp,0x8
c0026690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026693:	8b 00                	mov    eax,DWORD PTR [eax]
c0026695:	83 c0 3c             	add    eax,0x3c
c0026698:	8b 00                	mov    eax,DWORD PTR [eax]
c002669a:	83 ec 0c             	sub    esp,0xc
c002669d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266a0:	ff d0                	call   eax
c00266a2:	83 c4 10             	add    esp,0x10
c00266a5:	b8 00 00 00 00       	mov    eax,0x0
c00266aa:	c9                   	leave  
c00266ab:	c3                   	ret    

c00266ac <PIC::PIC()>:
c00266ac:	83 ec 0c             	sub    esp,0xc
c00266af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b3:	83 ec 08             	sub    esp,0x8
c00266b6:	68 98 dc 02 c0       	push   0xc002dc98
c00266bb:	50                   	push   eax
c00266bc:	e8 0b e5 fe ff       	call   c0014bcc <InterruptController::InterruptController(char const*)>
c00266c1:	83 c4 10             	add    esp,0x10
c00266c4:	ba c4 dc 02 c0       	mov    edx,0xc002dcc4
c00266c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cd:	89 10                	mov    DWORD PTR [eax],edx
c00266cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266d9:	0f b6 d0             	movzx  edx,al
c00266dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00266e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266f1:	0f b6 d0             	movzx  edx,al
c00266f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266f8:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00266fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026701:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026707:	8d 50 01             	lea    edx,[eax+0x1]
c002670a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002670e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026714:	0f b6 d0             	movzx  edx,al
c0026717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002671f:	83 e1 3f             	and    ecx,0x3f
c0026722:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002672a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026730:	0f b6 d0             	movzx  edx,al
c0026733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026737:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c002673e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026742:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026748:	0f b6 d0             	movzx  edx,al
c002674b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002674f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026758:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002675e:	8d 50 01             	lea    edx,[eax+0x1]
c0026761:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026765:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002676b:	0f b6 d0             	movzx  edx,al
c002676e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026772:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026776:	83 e1 3f             	and    ecx,0x3f
c0026779:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002677d:	90                   	nop
c002677e:	83 c4 0c             	add    esp,0xc
c0026781:	c3                   	ret    

c0026782 <PIC::ioWait()>:
c0026782:	eb 00                	jmp    c0026784 <PIC::ioWait()+0x2>
c0026784:	eb 00                	jmp    c0026786 <PIC::ioWait()+0x4>
c0026786:	90                   	nop
c0026787:	c3                   	ret    

c0026788 <PIC::getIRQReg(int)>:
c0026788:	55                   	push   ebp
c0026789:	89 e5                	mov    ebp,esp
c002678b:	83 ec 10             	sub    esp,0x10
c002678e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026791:	0f b6 c0             	movzx  eax,al
c0026794:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002679a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002679d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00267a0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00267a4:	ee                   	out    dx,al
c00267a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267a8:	0f b6 c0             	movzx  eax,al
c00267ab:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00267b1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00267b4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00267b7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00267bb:	ee                   	out    dx,al
c00267bc:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00267c2:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00267c6:	89 c2                	mov    edx,eax
c00267c8:	ec                   	in     al,dx
c00267c9:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00267cc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00267cf:	0f b6 c0             	movzx  eax,al
c00267d2:	c1 e0 08             	shl    eax,0x8
c00267d5:	89 c1                	mov    ecx,eax
c00267d7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00267dd:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00267e1:	89 c2                	mov    edx,eax
c00267e3:	ec                   	in     al,dx
c00267e4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00267e7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00267ea:	0f b6 c0             	movzx  eax,al
c00267ed:	09 c8                	or     eax,ecx
c00267ef:	c9                   	leave  
c00267f0:	c3                   	ret    
c00267f1:	90                   	nop

c00267f2 <PIC::eoi(unsigned char)>:
c00267f2:	55                   	push   ebp
c00267f3:	89 e5                	mov    ebp,esp
c00267f5:	83 ec 14             	sub    esp,0x14
c00267f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267fb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00267fe:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026802:	75 1e                	jne    c0026822 <PIC::eoi(unsigned char)+0x30>
c0026804:	6a 0b                	push   0xb
c0026806:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026809:	e8 7a ff ff ff       	call   c0026788 <PIC::getIRQReg(int)>
c002680e:	83 c4 08             	add    esp,0x8
c0026811:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026815:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026819:	25 80 00 00 00       	and    eax,0x80
c002681e:	85 c0                	test   eax,eax
c0026820:	74 5f                	je     c0026881 <PIC::eoi(unsigned char)+0x8f>
c0026822:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026826:	75 2d                	jne    c0026855 <PIC::eoi(unsigned char)+0x63>
c0026828:	6a 0b                	push   0xb
c002682a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002682d:	e8 56 ff ff ff       	call   c0026788 <PIC::getIRQReg(int)>
c0026832:	83 c4 08             	add    esp,0x8
c0026835:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026839:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002683c:	66 85 c0             	test   ax,ax
c002683f:	78 14                	js     c0026855 <PIC::eoi(unsigned char)+0x63>
c0026841:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026847:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002684b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002684e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026852:	ee                   	out    dx,al
c0026853:	eb 2d                	jmp    c0026882 <PIC::eoi(unsigned char)+0x90>
c0026855:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026859:	76 12                	jbe    c002686d <PIC::eoi(unsigned char)+0x7b>
c002685b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026861:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026865:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026868:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002686c:	ee                   	out    dx,al
c002686d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026873:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026877:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002687a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002687e:	ee                   	out    dx,al
c002687f:	eb 01                	jmp    c0026882 <PIC::eoi(unsigned char)+0x90>
c0026881:	90                   	nop
c0026882:	c9                   	leave  
c0026883:	c3                   	ret    

c0026884 <PIC::remap()>:
c0026884:	55                   	push   ebp
c0026885:	89 e5                	mov    ebp,esp
c0026887:	83 ec 48             	sub    esp,0x48
c002688a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026891:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026898:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c002689e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00268a1:	89 c2                	mov    edx,eax
c00268a3:	ec                   	in     al,dx
c00268a4:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00268a7:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00268aa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00268ad:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00268b3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00268b6:	89 c2                	mov    edx,eax
c00268b8:	ec                   	in     al,dx
c00268b9:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00268bc:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00268bf:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00268c2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00268c8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00268cc:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00268cf:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00268d2:	ee                   	out    dx,al
c00268d3:	83 ec 0c             	sub    esp,0xc
c00268d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268d9:	e8 a4 fe ff ff       	call   c0026782 <PIC::ioWait()>
c00268de:	83 c4 10             	add    esp,0x10
c00268e1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00268e7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00268eb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00268ee:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00268f1:	ee                   	out    dx,al
c00268f2:	83 ec 0c             	sub    esp,0xc
c00268f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268f8:	e8 85 fe ff ff       	call   c0026782 <PIC::ioWait()>
c00268fd:	83 c4 10             	add    esp,0x10
c0026900:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026903:	0f b6 c0             	movzx  eax,al
c0026906:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c002690c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c002690f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026912:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026915:	ee                   	out    dx,al
c0026916:	83 ec 0c             	sub    esp,0xc
c0026919:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002691c:	e8 61 fe ff ff       	call   c0026782 <PIC::ioWait()>
c0026921:	83 c4 10             	add    esp,0x10
c0026924:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026927:	0f b6 c0             	movzx  eax,al
c002692a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026930:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026933:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026936:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026939:	ee                   	out    dx,al
c002693a:	83 ec 0c             	sub    esp,0xc
c002693d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026940:	e8 3d fe ff ff       	call   c0026782 <PIC::ioWait()>
c0026945:	83 c4 10             	add    esp,0x10
c0026948:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c002694e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026952:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026955:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026958:	ee                   	out    dx,al
c0026959:	83 ec 0c             	sub    esp,0xc
c002695c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002695f:	e8 1e fe ff ff       	call   c0026782 <PIC::ioWait()>
c0026964:	83 c4 10             	add    esp,0x10
c0026967:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002696d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026971:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026974:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026977:	ee                   	out    dx,al
c0026978:	83 ec 0c             	sub    esp,0xc
c002697b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002697e:	e8 ff fd ff ff       	call   c0026782 <PIC::ioWait()>
c0026983:	83 c4 10             	add    esp,0x10
c0026986:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002698c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026990:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026993:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026996:	ee                   	out    dx,al
c0026997:	83 ec 0c             	sub    esp,0xc
c002699a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002699d:	e8 e0 fd ff ff       	call   c0026782 <PIC::ioWait()>
c00269a2:	83 c4 10             	add    esp,0x10
c00269a5:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00269ab:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00269af:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00269b2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00269b5:	ee                   	out    dx,al
c00269b6:	83 ec 0c             	sub    esp,0xc
c00269b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269bc:	e8 c1 fd ff ff       	call   c0026782 <PIC::ioWait()>
c00269c1:	83 c4 10             	add    esp,0x10
c00269c4:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00269c8:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00269ce:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00269d1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00269d4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00269d7:	ee                   	out    dx,al
c00269d8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00269dc:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00269e2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00269e5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00269e8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00269eb:	ee                   	out    dx,al
c00269ec:	90                   	nop
c00269ed:	c9                   	leave  
c00269ee:	c3                   	ret    
c00269ef:	90                   	nop

c00269f0 <PIC::open(int, int, void*)>:
c00269f0:	55                   	push   ebp
c00269f1:	89 e5                	mov    ebp,esp
c00269f3:	83 ec 18             	sub    esp,0x18
c00269f6:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00269fc:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026a00:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a03:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a07:	ee                   	out    dx,al
c0026a08:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026a0e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026a12:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a15:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a19:	ee                   	out    dx,al
c0026a1a:	83 ec 0c             	sub    esp,0xc
c0026a1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a20:	e8 5f fe ff ff       	call   c0026884 <PIC::remap()>
c0026a25:	83 c4 10             	add    esp,0x10
c0026a28:	b8 00 00 00 00       	mov    eax,0x0
c0026a2d:	c9                   	leave  
c0026a2e:	c3                   	ret    
c0026a2f:	90                   	nop

c0026a30 <APICTimer::close(int, int, void*)>:
c0026a30:	b8 00 00 00 00       	mov    eax,0x0
c0026a35:	c3                   	ret    

c0026a36 <apicTimerHandler(regs*, void*)>:
c0026a36:	83 ec 0c             	sub    esp,0xc
c0026a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a3f:	99                   	cdq    
c0026a40:	52                   	push   edx
c0026a41:	50                   	push   eax
c0026a42:	6a 00                	push   0x0
c0026a44:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a49:	e8 96 07 00 00       	call   c00271e4 <__udivdi3>
c0026a4e:	83 c4 10             	add    esp,0x10
c0026a51:	83 ec 08             	sub    esp,0x8
c0026a54:	52                   	push   edx
c0026a55:	50                   	push   eax
c0026a56:	e8 26 03 ff ff       	call   c0016d81 <timerHandler(unsigned long long)>
c0026a5b:	83 c4 10             	add    esp,0x10
c0026a5e:	90                   	nop
c0026a5f:	83 c4 0c             	add    esp,0xc
c0026a62:	c3                   	ret    
c0026a63:	90                   	nop

c0026a64 <APICTimer::write(int)>:
c0026a64:	53                   	push   ebx
c0026a65:	83 ec 28             	sub    esp,0x28
c0026a68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a6c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026a70:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a76:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0026a7b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a81:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026a87:	83 ec 0c             	sub    esp,0xc
c0026a8a:	50                   	push   eax
c0026a8b:	e8 de f4 ff ff       	call   c0025f6e <APIC::getBase()>
c0026a90:	83 c4 10             	add    esp,0x10
c0026a93:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026a97:	a1 f0 f4 02 c0       	mov    eax,ds:0xc002f4f0
c0026a9c:	8b 15 f4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4f4
c0026aa2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026aa6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026aaa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026aae:	05 e0 03 00 00       	add    eax,0x3e0
c0026ab3:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026ab9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026abd:	05 80 03 00 00       	add    eax,0x380
c0026ac2:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026ac8:	fb                   	sti    
c0026ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026acd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026ad1:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026ad6:	83 d2 00             	adc    edx,0x0
c0026ad9:	89 c1                	mov    ecx,eax
c0026adb:	89 d3                	mov    ebx,edx
c0026add:	a1 f0 f4 02 c0       	mov    eax,ds:0xc002f4f0
c0026ae2:	8b 15 f4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4f4
c0026ae8:	39 c8                	cmp    eax,ecx
c0026aea:	89 d0                	mov    eax,edx
c0026aec:	19 d8                	sbb    eax,ebx
c0026aee:	73 02                	jae    c0026af2 <APICTimer::write(int)+0x8e>
c0026af0:	eb d7                	jmp    c0026ac9 <APICTimer::write(int)+0x65>
c0026af2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026af6:	05 20 03 00 00       	add    eax,0x320
c0026afb:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026b01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b05:	05 90 03 00 00       	add    eax,0x390
c0026b0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b0c:	f7 d0                	not    eax
c0026b0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b12:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b1a:	ba 00 00 00 00       	mov    edx,0x0
c0026b1f:	f7 f3                	div    ebx
c0026b21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b29:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026b2f:	0d 00 00 02 00       	or     eax,0x20000
c0026b34:	89 c2                	mov    edx,eax
c0026b36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b3a:	05 20 03 00 00       	add    eax,0x320
c0026b3f:	89 10                	mov    DWORD PTR [eax],edx
c0026b41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b45:	05 e0 03 00 00       	add    eax,0x3e0
c0026b4a:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b54:	05 80 03 00 00       	add    eax,0x380
c0026b59:	89 c2                	mov    edx,eax
c0026b5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b5f:	89 02                	mov    DWORD PTR [edx],eax
c0026b61:	90                   	nop
c0026b62:	83 c4 28             	add    esp,0x28
c0026b65:	5b                   	pop    ebx
c0026b66:	c3                   	ret    
c0026b67:	90                   	nop

c0026b68 <APICTimer::open(int, int, void*)>:
c0026b68:	57                   	push   edi
c0026b69:	56                   	push   esi
c0026b6a:	53                   	push   ebx
c0026b6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b71:	83 c0 24             	add    eax,0x24
c0026b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b76:	83 ec 08             	sub    esp,0x8
c0026b79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b81:	ff d0                	call   eax
c0026b83:	83 c4 10             	add    esp,0x10
c0026b86:	a1 68 ee 02 c0       	mov    eax,ds:0xc002ee68
c0026b8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b91:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b97:	83 ec 0c             	sub    esp,0xc
c0026b9a:	50                   	push   eax
c0026b9b:	e8 ce f3 ff ff       	call   c0025f6e <APIC::getBase()>
c0026ba0:	83 c4 10             	add    esp,0x10
c0026ba3:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bb3:	0f b6 f8             	movzx  edi,al
c0026bb6:	89 d0                	mov    eax,edx
c0026bb8:	ba 00 00 00 00       	mov    edx,0x0
c0026bbd:	89 c1                	mov    ecx,eax
c0026bbf:	80 e5 ff             	and    ch,0xff
c0026bc2:	89 cb                	mov    ebx,ecx
c0026bc4:	0f b6 f2             	movzx  esi,dl
c0026bc7:	89 d8                	mov    eax,ebx
c0026bc9:	89 f2                	mov    edx,esi
c0026bcb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bcf:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026bd2:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026bd6:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026bda:	83 e0 00             	and    eax,0x0
c0026bdd:	09 d0                	or     eax,edx
c0026bdf:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026be7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bed:	8d 50 01             	lea    edx,[eax+0x1]
c0026bf0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bf4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026bfa:	0f b6 d0             	movzx  edx,al
c0026bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c01:	83 c2 08             	add    edx,0x8
c0026c04:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026c08:	0f b6 c9             	movzx  ecx,cl
c0026c0b:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026c11:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c1d:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c27:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c2b:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026c31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c35:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c3b:	83 ec 0c             	sub    esp,0xc
c0026c3e:	51                   	push   ecx
c0026c3f:	6a 01                	push   0x1
c0026c41:	68 36 6a 02 c0       	push   0xc0026a36
c0026c46:	52                   	push   edx
c0026c47:	50                   	push   eax
c0026c48:	e8 99 d5 fe ff       	call   c00141e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c4d:	83 c4 20             	add    esp,0x20
c0026c50:	89 c2                	mov    edx,eax
c0026c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c56:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c5c:	b8 00 00 00 00       	mov    eax,0x0
c0026c61:	5b                   	pop    ebx
c0026c62:	5e                   	pop    esi
c0026c63:	5f                   	pop    edi
c0026c64:	c3                   	ret    
c0026c65:	90                   	nop

c0026c66 <APICTimer::APICTimer()>:
c0026c66:	83 ec 0c             	sub    esp,0xc
c0026c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c6d:	83 ec 08             	sub    esp,0x8
c0026c70:	68 04 dd 02 c0       	push   0xc002dd04
c0026c75:	50                   	push   eax
c0026c76:	e8 77 00 ff ff       	call   c0016cf2 <Timer::Timer(char const*)>
c0026c7b:	83 c4 10             	add    esp,0x10
c0026c7e:	ba 18 dd 02 c0       	mov    edx,0xc002dd18
c0026c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c87:	89 10                	mov    DWORD PTR [eax],edx
c0026c89:	90                   	nop
c0026c8a:	83 c4 0c             	add    esp,0xc
c0026c8d:	c3                   	ret    

c0026c8e <PIT::write(int)>:
c0026c8e:	83 ec 10             	sub    esp,0x10
c0026c91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c95:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c99:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026c9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026ca3:	a3 24 32 03 c0       	mov    ds:0xc0033224,eax
c0026ca8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026cad:	99                   	cdq    
c0026cae:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026cb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026cb6:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026cbd:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026cc2:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026cc6:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026ccb:	ee                   	out    dx,al
c0026ccc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cd0:	0f b6 c0             	movzx  eax,al
c0026cd3:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026cda:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026cde:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026ce2:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026ce7:	ee                   	out    dx,al
c0026ce8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cec:	c1 f8 08             	sar    eax,0x8
c0026cef:	0f b6 c0             	movzx  eax,al
c0026cf2:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026cf9:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026cfd:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026d01:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026d06:	ee                   	out    dx,al
c0026d07:	90                   	nop
c0026d08:	83 c4 10             	add    esp,0x10
c0026d0b:	c3                   	ret    

c0026d0c <pitHandler(regs*, void*)>:
c0026d0c:	83 ec 0c             	sub    esp,0xc
c0026d0f:	a1 24 32 03 c0       	mov    eax,ds:0xc0033224
c0026d14:	99                   	cdq    
c0026d15:	52                   	push   edx
c0026d16:	50                   	push   eax
c0026d17:	6a 00                	push   0x0
c0026d19:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026d1e:	e8 c1 04 00 00       	call   c00271e4 <__udivdi3>
c0026d23:	83 c4 10             	add    esp,0x10
c0026d26:	83 ec 08             	sub    esp,0x8
c0026d29:	52                   	push   edx
c0026d2a:	50                   	push   eax
c0026d2b:	e8 51 00 ff ff       	call   c0016d81 <timerHandler(unsigned long long)>
c0026d30:	83 c4 10             	add    esp,0x10
c0026d33:	90                   	nop
c0026d34:	83 c4 0c             	add    esp,0xc
c0026d37:	c3                   	ret    

c0026d38 <PIT::open(int, int, void*)>:
c0026d38:	83 ec 0c             	sub    esp,0xc
c0026d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d41:	83 c0 24             	add    eax,0x24
c0026d44:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d46:	83 ec 08             	sub    esp,0x8
c0026d49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d51:	ff d0                	call   eax
c0026d53:	83 c4 10             	add    esp,0x10
c0026d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5a:	83 ec 0c             	sub    esp,0xc
c0026d5d:	6a 00                	push   0x0
c0026d5f:	6a 01                	push   0x1
c0026d61:	68 0c 6d 02 c0       	push   0xc0026d0c
c0026d66:	6a 00                	push   0x0
c0026d68:	50                   	push   eax
c0026d69:	e8 78 d4 fe ff       	call   c00141e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d6e:	83 c4 20             	add    esp,0x20
c0026d71:	89 c2                	mov    edx,eax
c0026d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d77:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d7d:	b8 00 00 00 00       	mov    eax,0x0
c0026d82:	83 c4 0c             	add    esp,0xc
c0026d85:	c3                   	ret    

c0026d86 <PIT::close(int, int, void*)>:
c0026d86:	83 ec 0c             	sub    esp,0xc
c0026d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d8d:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d9b:	6a 01                	push   0x1
c0026d9d:	68 0c 6d 02 c0       	push   0xc0026d0c
c0026da2:	6a 00                	push   0x0
c0026da4:	50                   	push   eax
c0026da5:	e8 7a d4 fe ff       	call   c0014224 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026daa:	83 c4 10             	add    esp,0x10
c0026dad:	b8 00 00 00 00       	mov    eax,0x0
c0026db2:	83 c4 0c             	add    esp,0xc
c0026db5:	c3                   	ret    

c0026db6 <PIT::PIT()>:
c0026db6:	83 ec 0c             	sub    esp,0xc
c0026db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dbd:	83 ec 08             	sub    esp,0x8
c0026dc0:	68 40 dd 02 c0       	push   0xc002dd40
c0026dc5:	50                   	push   eax
c0026dc6:	e8 27 ff fe ff       	call   c0016cf2 <Timer::Timer(char const*)>
c0026dcb:	83 c4 10             	add    esp,0x10
c0026dce:	ba 68 dd 02 c0       	mov    edx,0xc002dd68
c0026dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd7:	89 10                	mov    DWORD PTR [eax],edx
c0026dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ddd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026de3:	0f b6 d0             	movzx  edx,al
c0026de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dea:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026dfb:	0f b6 d0             	movzx  edx,al
c0026dfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e02:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e0b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e11:	8d 50 01             	lea    edx,[eax+0x1]
c0026e14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e18:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026e1e:	0f b6 d0             	movzx  edx,al
c0026e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e25:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026e29:	83 e1 3f             	and    ecx,0x3f
c0026e2c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026e30:	90                   	nop
c0026e31:	83 c4 0c             	add    esp,0xc
c0026e34:	c3                   	ret    
c0026e35:	66 90                	xchg   ax,ax
c0026e37:	66 90                	xchg   ax,ax
c0026e39:	66 90                	xchg   ax,ax
c0026e3b:	66 90                	xchg   ax,ax
c0026e3d:	66 90                	xchg   ax,ax
c0026e3f:	90                   	nop

c0026e40 <avxDetect>:
c0026e40:	b8 00 00 00 00       	mov    eax,0x0
c0026e45:	c3                   	ret    

c0026e46 <avxSave>:
c0026e46:	c3                   	ret    

c0026e47 <avxLoad>:
c0026e47:	c3                   	ret    

c0026e48 <avxInit>:
c0026e48:	c3                   	ret    

c0026e49 <avxClose>:
c0026e49:	c3                   	ret    

c0026e4a <wouldSheSayYes>:
c0026e4a:	c3                   	ret    
c0026e4b:	49                   	dec    ecx
c0026e4c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e50:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e54:	75 20                	jne    c0026e76 <sseDetect.noSSE+0x1>
c0026e56:	4e                   	dec    esi
c0026e57:	79 61                	jns    c0026eba <x87Detect+0x14>
c0026e59:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e5e:	66 90                	xchg   ax,ax

c0026e60 <absolutelyNoChanceInHell>:
c0026e60:	b8 01 00 00 00       	mov    eax,0x1
c0026e65:	0f a2                	cpuid  
c0026e67:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e6d:	74 06                	je     c0026e75 <sseDetect.noSSE>
c0026e6f:	b8 01 00 00 00       	mov    eax,0x1
c0026e74:	c3                   	ret    

c0026e75 <sseDetect.noSSE>:
c0026e75:	31 c0                	xor    eax,eax
c0026e77:	c3                   	ret    

c0026e78 <sseSave>:
c0026e78:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026e7d:	c3                   	ret    

c0026e7e <sseLoad>:
c0026e7e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026e83:	c3                   	ret    

c0026e84 <sseInit>:
c0026e84:	e8 49 00 00 00       	call   c0026ed2 <x87Init>
c0026e89:	0f 20 e0             	mov    eax,cr4
c0026e8c:	66 0d 00 06          	or     ax,0x600
c0026e90:	0f 22 e0             	mov    cr4,eax
c0026e93:	c3                   	ret    

c0026e94 <sseClose>:
c0026e94:	c3                   	ret    
c0026e95:	66 90                	xchg   ax,ax
c0026e97:	66 90                	xchg   ax,ax
c0026e99:	66 90                	xchg   ax,ax
c0026e9b:	66 90                	xchg   ax,ax
c0026e9d:	66 90                	xchg   ax,ax
c0026e9f:	90                   	nop

c0026ea0 <value_37F>:
c0026ea0:	7f 03                	jg     c0026ea5 <value_37A+0x1>

c0026ea2 <value_37E>:
c0026ea2:	7e 03                	jle    c0026ea7 <x87Detect+0x1>

c0026ea4 <value_37A>:
c0026ea4:	7a 03                	jp     c0026ea9 <x87Detect+0x3>

c0026ea6 <x87Detect>:
c0026ea6:	b8 01 00 00 00       	mov    eax,0x1
c0026eab:	0f a2                	cpuid  
c0026ead:	f7 c2 01 00 00 00    	test   edx,0x1
c0026eb3:	74 06                	je     c0026ebb <x87Detect.nox87>
c0026eb5:	b8 01 00 00 00       	mov    eax,0x1
c0026eba:	c3                   	ret    

c0026ebb <x87Detect.nox87>:
c0026ebb:	b8 00 00 00 00       	mov    eax,0x0
c0026ec0:	c3                   	ret    

c0026ec1 <x87Save>:
c0026ec1:	55                   	push   ebp
c0026ec2:	89 e5                	mov    ebp,esp
c0026ec4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026ec8:	c9                   	leave  
c0026ec9:	c3                   	ret    

c0026eca <x87Load>:
c0026eca:	55                   	push   ebp
c0026ecb:	89 e5                	mov    ebp,esp
c0026ecd:	dd 65 08             	frstor [ebp+0x8]
c0026ed0:	c9                   	leave  
c0026ed1:	c3                   	ret    

c0026ed2 <x87Init>:
c0026ed2:	9b db e3             	finit  
c0026ed5:	0f 20 c0             	mov    eax,cr0
c0026ed8:	66 25 fb ff          	and    ax,0xfffb
c0026edc:	66 0d 22 00          	or     ax,0x22
c0026ee0:	0f 22 c0             	mov    cr0,eax
c0026ee3:	0f 06                	clts   
c0026ee5:	d9 2d a4 6e 02 c0    	fldcw  WORD PTR ds:0xc0026ea4
c0026eeb:	c3                   	ret    

c0026eec <x87Close>:
c0026eec:	c3                   	ret    
c0026eed:	66 90                	xchg   ax,ax
c0026eef:	90                   	nop

c0026ef0 <__do_global_ctors_aux>:
c0026ef0:	a1 28 9b 02 c0       	mov    eax,ds:0xc0029b28
c0026ef5:	83 f8 ff             	cmp    eax,0xffffffff
c0026ef8:	74 1a                	je     c0026f14 <__do_global_ctors_aux+0x24>
c0026efa:	55                   	push   ebp
c0026efb:	89 e5                	mov    ebp,esp
c0026efd:	53                   	push   ebx
c0026efe:	52                   	push   edx
c0026eff:	bb 28 9b 02 c0       	mov    ebx,0xc0029b28
c0026f04:	ff d0                	call   eax
c0026f06:	83 eb 04             	sub    ebx,0x4
c0026f09:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026f0b:	83 f8 ff             	cmp    eax,0xffffffff
c0026f0e:	75 f4                	jne    c0026f04 <__do_global_ctors_aux+0x14>
c0026f10:	58                   	pop    eax
c0026f11:	5b                   	pop    ebx
c0026f12:	5d                   	pop    ebp
c0026f13:	c3                   	ret    
c0026f14:	c3                   	ret    
c0026f15:	66 90                	xchg   ax,ax
c0026f17:	90                   	nop

c0026f18 <__divdi3>:
c0026f18:	55                   	push   ebp
c0026f19:	57                   	push   edi
c0026f1a:	56                   	push   esi
c0026f1b:	53                   	push   ebx
c0026f1c:	83 ec 1c             	sub    esp,0x1c
c0026f1f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026f23:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f27:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f2a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026f32:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026f36:	85 db                	test   ebx,ebx
c0026f38:	0f 88 8e 00 00 00    	js     c0026fcc <__divdi3+0xb4>
c0026f3e:	89 dd                	mov    ebp,ebx
c0026f40:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f48:	89 d3                	mov    ebx,edx
c0026f4a:	85 d2                	test   edx,edx
c0026f4c:	79 0d                	jns    c0026f5b <__divdi3+0x43>
c0026f4e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f52:	f7 d8                	neg    eax
c0026f54:	83 d2 00             	adc    edx,0x0
c0026f57:	f7 da                	neg    edx
c0026f59:	89 d3                	mov    ebx,edx
c0026f5b:	89 c7                	mov    edi,eax
c0026f5d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f60:	85 db                	test   ebx,ebx
c0026f62:	75 48                	jne    c0026fac <__divdi3+0x94>
c0026f64:	39 ef                	cmp    edi,ebp
c0026f66:	76 24                	jbe    c0026f8c <__divdi3+0x74>
c0026f68:	89 ea                	mov    edx,ebp
c0026f6a:	f7 f7                	div    edi
c0026f6c:	89 c1                	mov    ecx,eax
c0026f6e:	31 f6                	xor    esi,esi
c0026f70:	89 c8                	mov    eax,ecx
c0026f72:	89 f2                	mov    edx,esi
c0026f74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f78:	85 c9                	test   ecx,ecx
c0026f7a:	74 07                	je     c0026f83 <__divdi3+0x6b>
c0026f7c:	f7 d8                	neg    eax
c0026f7e:	83 d2 00             	adc    edx,0x0
c0026f81:	f7 da                	neg    edx
c0026f83:	83 c4 1c             	add    esp,0x1c
c0026f86:	5b                   	pop    ebx
c0026f87:	5e                   	pop    esi
c0026f88:	5f                   	pop    edi
c0026f89:	5d                   	pop    ebp
c0026f8a:	c3                   	ret    
c0026f8b:	90                   	nop
c0026f8c:	85 ff                	test   edi,edi
c0026f8e:	75 0b                	jne    c0026f9b <__divdi3+0x83>
c0026f90:	b8 01 00 00 00       	mov    eax,0x1
c0026f95:	31 d2                	xor    edx,edx
c0026f97:	f7 f3                	div    ebx
c0026f99:	89 c7                	mov    edi,eax
c0026f9b:	31 d2                	xor    edx,edx
c0026f9d:	89 e8                	mov    eax,ebp
c0026f9f:	f7 f7                	div    edi
c0026fa1:	89 c6                	mov    esi,eax
c0026fa3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026fa6:	f7 f7                	div    edi
c0026fa8:	89 c1                	mov    ecx,eax
c0026faa:	eb c4                	jmp    c0026f70 <__divdi3+0x58>
c0026fac:	39 eb                	cmp    ebx,ebp
c0026fae:	77 3c                	ja     c0026fec <__divdi3+0xd4>
c0026fb0:	0f bd f3             	bsr    esi,ebx
c0026fb3:	83 f6 1f             	xor    esi,0x1f
c0026fb6:	75 40                	jne    c0026ff8 <__divdi3+0xe0>
c0026fb8:	39 eb                	cmp    ebx,ebp
c0026fba:	72 09                	jb     c0026fc5 <__divdi3+0xad>
c0026fbc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026fbf:	0f 87 97 00 00 00    	ja     c002705c <__divdi3+0x144>
c0026fc5:	b9 01 00 00 00       	mov    ecx,0x1
c0026fca:	eb a4                	jmp    c0026f70 <__divdi3+0x58>
c0026fcc:	f7 d9                	neg    ecx
c0026fce:	83 d3 00             	adc    ebx,0x0
c0026fd1:	f7 db                	neg    ebx
c0026fd3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026fd6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026fda:	89 dd                	mov    ebp,ebx
c0026fdc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026fe4:	e9 5f ff ff ff       	jmp    c0026f48 <__divdi3+0x30>
c0026fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0026fec:	31 f6                	xor    esi,esi
c0026fee:	31 c9                	xor    ecx,ecx
c0026ff0:	e9 7b ff ff ff       	jmp    c0026f70 <__divdi3+0x58>
c0026ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0026ff8:	b8 20 00 00 00       	mov    eax,0x20
c0026ffd:	29 f0                	sub    eax,esi
c0026fff:	89 f1                	mov    ecx,esi
c0027001:	d3 e3                	shl    ebx,cl
c0027003:	89 fa                	mov    edx,edi
c0027005:	88 c1                	mov    cl,al
c0027007:	d3 ea                	shr    edx,cl
c0027009:	09 da                	or     edx,ebx
c002700b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002700f:	89 f1                	mov    ecx,esi
c0027011:	d3 e7                	shl    edi,cl
c0027013:	89 eb                	mov    ebx,ebp
c0027015:	88 c1                	mov    cl,al
c0027017:	d3 eb                	shr    ebx,cl
c0027019:	89 f1                	mov    ecx,esi
c002701b:	d3 e5                	shl    ebp,cl
c002701d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027020:	88 c1                	mov    cl,al
c0027022:	d3 ea                	shr    edx,cl
c0027024:	09 d5                	or     ebp,edx
c0027026:	89 e8                	mov    eax,ebp
c0027028:	89 da                	mov    edx,ebx
c002702a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002702e:	89 d3                	mov    ebx,edx
c0027030:	89 c5                	mov    ebp,eax
c0027032:	f7 e7                	mul    edi
c0027034:	39 d3                	cmp    ebx,edx
c0027036:	72 18                	jb     c0027050 <__divdi3+0x138>
c0027038:	74 0a                	je     c0027044 <__divdi3+0x12c>
c002703a:	89 e9                	mov    ecx,ebp
c002703c:	31 f6                	xor    esi,esi
c002703e:	e9 2d ff ff ff       	jmp    c0026f70 <__divdi3+0x58>
c0027043:	90                   	nop
c0027044:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027047:	89 f1                	mov    ecx,esi
c0027049:	d3 e7                	shl    edi,cl
c002704b:	39 c7                	cmp    edi,eax
c002704d:	73 eb                	jae    c002703a <__divdi3+0x122>
c002704f:	90                   	nop
c0027050:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027053:	31 f6                	xor    esi,esi
c0027055:	e9 16 ff ff ff       	jmp    c0026f70 <__divdi3+0x58>
c002705a:	66 90                	xchg   ax,ax
c002705c:	31 c9                	xor    ecx,ecx
c002705e:	e9 0d ff ff ff       	jmp    c0026f70 <__divdi3+0x58>
c0027063:	90                   	nop

c0027064 <__moddi3>:
c0027064:	55                   	push   ebp
c0027065:	57                   	push   edi
c0027066:	56                   	push   esi
c0027067:	53                   	push   ebx
c0027068:	83 ec 2c             	sub    esp,0x2c
c002706b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002706f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027073:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027077:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002707b:	85 db                	test   ebx,ebx
c002707d:	0f 88 85 00 00 00    	js     c0027108 <__moddi3+0xa4>
c0027083:	89 de                	mov    esi,ebx
c0027085:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002708d:	89 d7                	mov    edi,edx
c002708f:	85 d2                	test   edx,edx
c0027091:	79 09                	jns    c002709c <__moddi3+0x38>
c0027093:	f7 d8                	neg    eax
c0027095:	83 d2 00             	adc    edx,0x0
c0027098:	f7 da                	neg    edx
c002709a:	89 d7                	mov    edi,edx
c002709c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270a0:	89 cd                	mov    ebp,ecx
c00270a2:	85 ff                	test   edi,edi
c00270a4:	75 52                	jne    c00270f8 <__moddi3+0x94>
c00270a6:	89 c3                	mov    ebx,eax
c00270a8:	39 f0                	cmp    eax,esi
c00270aa:	76 24                	jbe    c00270d0 <__moddi3+0x6c>
c00270ac:	89 c8                	mov    eax,ecx
c00270ae:	89 f2                	mov    edx,esi
c00270b0:	f7 f3                	div    ebx
c00270b2:	89 d6                	mov    esi,edx
c00270b4:	89 f0                	mov    eax,esi
c00270b6:	31 d2                	xor    edx,edx
c00270b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270bc:	85 c9                	test   ecx,ecx
c00270be:	74 07                	je     c00270c7 <__moddi3+0x63>
c00270c0:	f7 d8                	neg    eax
c00270c2:	83 d2 00             	adc    edx,0x0
c00270c5:	f7 da                	neg    edx
c00270c7:	83 c4 2c             	add    esp,0x2c
c00270ca:	5b                   	pop    ebx
c00270cb:	5e                   	pop    esi
c00270cc:	5f                   	pop    edi
c00270cd:	5d                   	pop    ebp
c00270ce:	c3                   	ret    
c00270cf:	90                   	nop
c00270d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00270d4:	85 db                	test   ebx,ebx
c00270d6:	75 0d                	jne    c00270e5 <__moddi3+0x81>
c00270d8:	b8 01 00 00 00       	mov    eax,0x1
c00270dd:	31 d2                	xor    edx,edx
c00270df:	f7 f7                	div    edi
c00270e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270e5:	89 f0                	mov    eax,esi
c00270e7:	31 d2                	xor    edx,edx
c00270e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00270ed:	f7 f7                	div    edi
c00270ef:	89 e8                	mov    eax,ebp
c00270f1:	f7 f7                	div    edi
c00270f3:	89 d6                	mov    esi,edx
c00270f5:	eb bd                	jmp    c00270b4 <__moddi3+0x50>
c00270f7:	90                   	nop
c00270f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00270fc:	39 f7                	cmp    edi,esi
c00270fe:	76 20                	jbe    c0027120 <__moddi3+0xbc>
c0027100:	89 c8                	mov    eax,ecx
c0027102:	89 f2                	mov    edx,esi
c0027104:	eb b2                	jmp    c00270b8 <__moddi3+0x54>
c0027106:	66 90                	xchg   ax,ax
c0027108:	f7 d9                	neg    ecx
c002710a:	83 d3 00             	adc    ebx,0x0
c002710d:	f7 db                	neg    ebx
c002710f:	89 de                	mov    esi,ebx
c0027111:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027119:	e9 6f ff ff ff       	jmp    c002708d <__moddi3+0x29>
c002711e:	66 90                	xchg   ax,ax
c0027120:	0f bd c7             	bsr    eax,edi
c0027123:	83 f0 1f             	xor    eax,0x1f
c0027126:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002712a:	75 24                	jne    c0027150 <__moddi3+0xec>
c002712c:	39 f7                	cmp    edi,esi
c002712e:	72 06                	jb     c0027136 <__moddi3+0xd2>
c0027130:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027134:	77 0c                	ja     c0027142 <__moddi3+0xde>
c0027136:	89 e9                	mov    ecx,ebp
c0027138:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002713c:	19 fe                	sbb    esi,edi
c002713e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027142:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027146:	89 f2                	mov    edx,esi
c0027148:	e9 6b ff ff ff       	jmp    c00270b8 <__moddi3+0x54>
c002714d:	8d 76 00             	lea    esi,[esi+0x0]
c0027150:	b8 20 00 00 00       	mov    eax,0x20
c0027155:	89 c2                	mov    edx,eax
c0027157:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002715b:	29 da                	sub    edx,ebx
c002715d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027161:	88 d9                	mov    cl,bl
c0027163:	d3 e7                	shl    edi,cl
c0027165:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027169:	88 d1                	mov    cl,dl
c002716b:	d3 e8                	shr    eax,cl
c002716d:	09 c7                	or     edi,eax
c002716f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027173:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027177:	89 d8                	mov    eax,ebx
c0027179:	88 d9                	mov    cl,bl
c002717b:	d3 e7                	shl    edi,cl
c002717d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027181:	89 f3                	mov    ebx,esi
c0027183:	88 d1                	mov    cl,dl
c0027185:	d3 eb                	shr    ebx,cl
c0027187:	89 c7                	mov    edi,eax
c0027189:	88 c1                	mov    cl,al
c002718b:	d3 e6                	shl    esi,cl
c002718d:	89 e8                	mov    eax,ebp
c002718f:	88 d1                	mov    cl,dl
c0027191:	d3 e8                	shr    eax,cl
c0027193:	09 f0                	or     eax,esi
c0027195:	89 f9                	mov    ecx,edi
c0027197:	d3 e5                	shl    ebp,cl
c0027199:	89 da                	mov    edx,ebx
c002719b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002719f:	89 d3                	mov    ebx,edx
c00271a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00271a5:	89 c6                	mov    esi,eax
c00271a7:	89 d1                	mov    ecx,edx
c00271a9:	39 d3                	cmp    ebx,edx
c00271ab:	72 27                	jb     c00271d4 <__moddi3+0x170>
c00271ad:	74 21                	je     c00271d0 <__moddi3+0x16c>
c00271af:	29 f5                	sub    ebp,esi
c00271b1:	19 cb                	sbb    ebx,ecx
c00271b3:	89 de                	mov    esi,ebx
c00271b5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00271b9:	d3 e6                	shl    esi,cl
c00271bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00271bf:	89 f9                	mov    ecx,edi
c00271c1:	d3 ed                	shr    ebp,cl
c00271c3:	09 ee                	or     esi,ebp
c00271c5:	89 f0                	mov    eax,esi
c00271c7:	d3 eb                	shr    ebx,cl
c00271c9:	89 da                	mov    edx,ebx
c00271cb:	e9 e8 fe ff ff       	jmp    c00270b8 <__moddi3+0x54>
c00271d0:	39 c5                	cmp    ebp,eax
c00271d2:	73 db                	jae    c00271af <__moddi3+0x14b>
c00271d4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00271d8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00271dc:	89 d1                	mov    ecx,edx
c00271de:	89 c6                	mov    esi,eax
c00271e0:	eb cd                	jmp    c00271af <__moddi3+0x14b>
c00271e2:	66 90                	xchg   ax,ax

c00271e4 <__udivdi3>:
c00271e4:	55                   	push   ebp
c00271e5:	57                   	push   edi
c00271e6:	56                   	push   esi
c00271e7:	53                   	push   ebx
c00271e8:	83 ec 1c             	sub    esp,0x1c
c00271eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00271ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00271f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00271f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00271fb:	85 d2                	test   edx,edx
c00271fd:	75 41                	jne    c0027240 <__udivdi3+0x5c>
c00271ff:	39 f7                	cmp    edi,esi
c0027201:	76 15                	jbe    c0027218 <__udivdi3+0x34>
c0027203:	89 e8                	mov    eax,ebp
c0027205:	89 f2                	mov    edx,esi
c0027207:	f7 f7                	div    edi
c0027209:	31 db                	xor    ebx,ebx
c002720b:	89 da                	mov    edx,ebx
c002720d:	83 c4 1c             	add    esp,0x1c
c0027210:	5b                   	pop    ebx
c0027211:	5e                   	pop    esi
c0027212:	5f                   	pop    edi
c0027213:	5d                   	pop    ebp
c0027214:	c3                   	ret    
c0027215:	8d 76 00             	lea    esi,[esi+0x0]
c0027218:	89 f9                	mov    ecx,edi
c002721a:	85 ff                	test   edi,edi
c002721c:	75 0b                	jne    c0027229 <__udivdi3+0x45>
c002721e:	b8 01 00 00 00       	mov    eax,0x1
c0027223:	31 d2                	xor    edx,edx
c0027225:	f7 f7                	div    edi
c0027227:	89 c1                	mov    ecx,eax
c0027229:	31 d2                	xor    edx,edx
c002722b:	89 f0                	mov    eax,esi
c002722d:	f7 f1                	div    ecx
c002722f:	89 c3                	mov    ebx,eax
c0027231:	89 e8                	mov    eax,ebp
c0027233:	f7 f1                	div    ecx
c0027235:	89 da                	mov    edx,ebx
c0027237:	83 c4 1c             	add    esp,0x1c
c002723a:	5b                   	pop    ebx
c002723b:	5e                   	pop    esi
c002723c:	5f                   	pop    edi
c002723d:	5d                   	pop    ebp
c002723e:	c3                   	ret    
c002723f:	90                   	nop
c0027240:	39 f2                	cmp    edx,esi
c0027242:	77 1c                	ja     c0027260 <__udivdi3+0x7c>
c0027244:	0f bd da             	bsr    ebx,edx
c0027247:	83 f3 1f             	xor    ebx,0x1f
c002724a:	75 24                	jne    c0027270 <__udivdi3+0x8c>
c002724c:	39 f2                	cmp    edx,esi
c002724e:	72 08                	jb     c0027258 <__udivdi3+0x74>
c0027250:	39 ef                	cmp    edi,ebp
c0027252:	0f 87 84 00 00 00    	ja     c00272dc <__udivdi3+0xf8>
c0027258:	b8 01 00 00 00       	mov    eax,0x1
c002725d:	eb ac                	jmp    c002720b <__udivdi3+0x27>
c002725f:	90                   	nop
c0027260:	31 db                	xor    ebx,ebx
c0027262:	31 c0                	xor    eax,eax
c0027264:	89 da                	mov    edx,ebx
c0027266:	83 c4 1c             	add    esp,0x1c
c0027269:	5b                   	pop    ebx
c002726a:	5e                   	pop    esi
c002726b:	5f                   	pop    edi
c002726c:	5d                   	pop    ebp
c002726d:	c3                   	ret    
c002726e:	66 90                	xchg   ax,ax
c0027270:	b8 20 00 00 00       	mov    eax,0x20
c0027275:	29 d8                	sub    eax,ebx
c0027277:	88 d9                	mov    cl,bl
c0027279:	d3 e2                	shl    edx,cl
c002727b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002727f:	89 fa                	mov    edx,edi
c0027281:	88 c1                	mov    cl,al
c0027283:	d3 ea                	shr    edx,cl
c0027285:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027289:	09 d1                	or     ecx,edx
c002728b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002728f:	88 d9                	mov    cl,bl
c0027291:	d3 e7                	shl    edi,cl
c0027293:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027297:	89 f7                	mov    edi,esi
c0027299:	88 c1                	mov    cl,al
c002729b:	d3 ef                	shr    edi,cl
c002729d:	88 d9                	mov    cl,bl
c002729f:	d3 e6                	shl    esi,cl
c00272a1:	89 ea                	mov    edx,ebp
c00272a3:	88 c1                	mov    cl,al
c00272a5:	d3 ea                	shr    edx,cl
c00272a7:	09 d6                	or     esi,edx
c00272a9:	89 f0                	mov    eax,esi
c00272ab:	89 fa                	mov    edx,edi
c00272ad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00272b1:	89 d7                	mov    edi,edx
c00272b3:	89 c6                	mov    esi,eax
c00272b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00272b9:	39 d7                	cmp    edi,edx
c00272bb:	72 13                	jb     c00272d0 <__udivdi3+0xec>
c00272bd:	74 09                	je     c00272c8 <__udivdi3+0xe4>
c00272bf:	89 f0                	mov    eax,esi
c00272c1:	31 db                	xor    ebx,ebx
c00272c3:	e9 43 ff ff ff       	jmp    c002720b <__udivdi3+0x27>
c00272c8:	88 d9                	mov    cl,bl
c00272ca:	d3 e5                	shl    ebp,cl
c00272cc:	39 c5                	cmp    ebp,eax
c00272ce:	73 ef                	jae    c00272bf <__udivdi3+0xdb>
c00272d0:	8d 46 ff             	lea    eax,[esi-0x1]
c00272d3:	31 db                	xor    ebx,ebx
c00272d5:	e9 31 ff ff ff       	jmp    c002720b <__udivdi3+0x27>
c00272da:	66 90                	xchg   ax,ax
c00272dc:	31 c0                	xor    eax,eax
c00272de:	e9 28 ff ff ff       	jmp    c002720b <__udivdi3+0x27>
c00272e3:	90                   	nop

c00272e4 <__umoddi3>:
c00272e4:	55                   	push   ebp
c00272e5:	57                   	push   edi
c00272e6:	56                   	push   esi
c00272e7:	53                   	push   ebx
c00272e8:	83 ec 1c             	sub    esp,0x1c
c00272eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00272ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00272f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00272f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00272fb:	89 da                	mov    edx,ebx
c00272fd:	85 c0                	test   eax,eax
c00272ff:	75 37                	jne    c0027338 <__umoddi3+0x54>
c0027301:	39 df                	cmp    edi,ebx
c0027303:	76 13                	jbe    c0027318 <__umoddi3+0x34>
c0027305:	89 f0                	mov    eax,esi
c0027307:	f7 f7                	div    edi
c0027309:	89 d0                	mov    eax,edx
c002730b:	31 d2                	xor    edx,edx
c002730d:	83 c4 1c             	add    esp,0x1c
c0027310:	5b                   	pop    ebx
c0027311:	5e                   	pop    esi
c0027312:	5f                   	pop    edi
c0027313:	5d                   	pop    ebp
c0027314:	c3                   	ret    
c0027315:	8d 76 00             	lea    esi,[esi+0x0]
c0027318:	89 fd                	mov    ebp,edi
c002731a:	85 ff                	test   edi,edi
c002731c:	75 0b                	jne    c0027329 <__umoddi3+0x45>
c002731e:	b8 01 00 00 00       	mov    eax,0x1
c0027323:	31 d2                	xor    edx,edx
c0027325:	f7 f7                	div    edi
c0027327:	89 c5                	mov    ebp,eax
c0027329:	89 d8                	mov    eax,ebx
c002732b:	31 d2                	xor    edx,edx
c002732d:	f7 f5                	div    ebp
c002732f:	89 f0                	mov    eax,esi
c0027331:	f7 f5                	div    ebp
c0027333:	89 d0                	mov    eax,edx
c0027335:	eb d4                	jmp    c002730b <__umoddi3+0x27>
c0027337:	90                   	nop
c0027338:	89 f1                	mov    ecx,esi
c002733a:	39 d8                	cmp    eax,ebx
c002733c:	76 0a                	jbe    c0027348 <__umoddi3+0x64>
c002733e:	89 f0                	mov    eax,esi
c0027340:	83 c4 1c             	add    esp,0x1c
c0027343:	5b                   	pop    ebx
c0027344:	5e                   	pop    esi
c0027345:	5f                   	pop    edi
c0027346:	5d                   	pop    ebp
c0027347:	c3                   	ret    
c0027348:	0f bd e8             	bsr    ebp,eax
c002734b:	83 f5 1f             	xor    ebp,0x1f
c002734e:	75 1c                	jne    c002736c <__umoddi3+0x88>
c0027350:	39 d8                	cmp    eax,ebx
c0027352:	72 04                	jb     c0027358 <__umoddi3+0x74>
c0027354:	39 f7                	cmp    edi,esi
c0027356:	77 08                	ja     c0027360 <__umoddi3+0x7c>
c0027358:	89 da                	mov    edx,ebx
c002735a:	29 fe                	sub    esi,edi
c002735c:	19 c2                	sbb    edx,eax
c002735e:	89 f1                	mov    ecx,esi
c0027360:	89 c8                	mov    eax,ecx
c0027362:	83 c4 1c             	add    esp,0x1c
c0027365:	5b                   	pop    ebx
c0027366:	5e                   	pop    esi
c0027367:	5f                   	pop    edi
c0027368:	5d                   	pop    ebp
c0027369:	c3                   	ret    
c002736a:	66 90                	xchg   ax,ax
c002736c:	ba 20 00 00 00       	mov    edx,0x20
c0027371:	29 ea                	sub    edx,ebp
c0027373:	89 e9                	mov    ecx,ebp
c0027375:	d3 e0                	shl    eax,cl
c0027377:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002737b:	89 f8                	mov    eax,edi
c002737d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027381:	88 d1                	mov    cl,dl
c0027383:	d3 e8                	shr    eax,cl
c0027385:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027389:	09 c1                	or     ecx,eax
c002738b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002738f:	89 e9                	mov    ecx,ebp
c0027391:	d3 e7                	shl    edi,cl
c0027393:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027397:	89 d8                	mov    eax,ebx
c0027399:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002739d:	88 d1                	mov    cl,dl
c002739f:	d3 e8                	shr    eax,cl
c00273a1:	89 c7                	mov    edi,eax
c00273a3:	89 e9                	mov    ecx,ebp
c00273a5:	d3 e3                	shl    ebx,cl
c00273a7:	89 f0                	mov    eax,esi
c00273a9:	88 d1                	mov    cl,dl
c00273ab:	d3 e8                	shr    eax,cl
c00273ad:	09 d8                	or     eax,ebx
c00273af:	89 e9                	mov    ecx,ebp
c00273b1:	d3 e6                	shl    esi,cl
c00273b3:	89 f3                	mov    ebx,esi
c00273b5:	89 fa                	mov    edx,edi
c00273b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00273bb:	89 d1                	mov    ecx,edx
c00273bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273c1:	89 c6                	mov    esi,eax
c00273c3:	89 d7                	mov    edi,edx
c00273c5:	39 d1                	cmp    ecx,edx
c00273c7:	72 27                	jb     c00273f0 <__umoddi3+0x10c>
c00273c9:	74 21                	je     c00273ec <__umoddi3+0x108>
c00273cb:	89 ca                	mov    edx,ecx
c00273cd:	29 f3                	sub    ebx,esi
c00273cf:	19 fa                	sbb    edx,edi
c00273d1:	89 d0                	mov    eax,edx
c00273d3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00273d7:	d3 e0                	shl    eax,cl
c00273d9:	89 e9                	mov    ecx,ebp
c00273db:	d3 eb                	shr    ebx,cl
c00273dd:	09 d8                	or     eax,ebx
c00273df:	d3 ea                	shr    edx,cl
c00273e1:	83 c4 1c             	add    esp,0x1c
c00273e4:	5b                   	pop    ebx
c00273e5:	5e                   	pop    esi
c00273e6:	5f                   	pop    edi
c00273e7:	5d                   	pop    ebp
c00273e8:	c3                   	ret    
c00273e9:	8d 76 00             	lea    esi,[esi+0x0]
c00273ec:	39 c3                	cmp    ebx,eax
c00273ee:	73 db                	jae    c00273cb <__umoddi3+0xe7>
c00273f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00273f4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00273f8:	89 d7                	mov    edi,edx
c00273fa:	89 c6                	mov    esi,eax
c00273fc:	eb cd                	jmp    c00273cb <__umoddi3+0xe7>

c00273fe <__addsf3>:
c00273fe:	55                   	push   ebp
c00273ff:	89 e5                	mov    ebp,esp
c0027401:	57                   	push   edi
c0027402:	56                   	push   esi
c0027403:	53                   	push   ebx
c0027404:	83 ec 08             	sub    esp,0x8
c0027407:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002740a:	89 fa                	mov    edx,edi
c002740c:	89 f8                	mov    eax,edi
c002740e:	c1 f8 17             	sar    eax,0x17
c0027411:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027414:	c1 e2 08             	shl    edx,0x8
c0027417:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002741d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027420:	89 de                	mov    esi,ebx
c0027422:	c1 fe 17             	sar    esi,0x17
c0027425:	c1 e3 08             	shl    ebx,0x8
c0027428:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002742e:	31 f0                	xor    eax,esi
c0027430:	0f 88 3b 01 00 00    	js     c0027571 <__addsf3+0x173>
c0027436:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027439:	29 f1                	sub    ecx,esi
c002743b:	85 c9                	test   ecx,ecx
c002743d:	7e 54                	jle    c0027493 <__addsf3+0x95>
c002743f:	89 f0                	mov    eax,esi
c0027441:	84 c0                	test   al,al
c0027443:	75 10                	jne    c0027455 <__addsf3+0x57>
c0027445:	85 db                	test   ebx,ebx
c0027447:	0f 84 aa 02 00 00    	je     c00276f7 <__addsf3+0x2f9>
c002744d:	49                   	dec    ecx
c002744e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027451:	74 38                	je     c002748b <__addsf3+0x8d>
c0027453:	eb 13                	jmp    c0027468 <__addsf3+0x6a>
c0027455:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027458:	f7 d0                	not    eax
c002745a:	84 c0                	test   al,al
c002745c:	0f 84 95 02 00 00    	je     c00276f7 <__addsf3+0x2f9>
c0027462:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027468:	83 f9 1f             	cmp    ecx,0x1f
c002746b:	0f 8f 86 02 00 00    	jg     c00276f7 <__addsf3+0x2f9>
c0027471:	89 de                	mov    esi,ebx
c0027473:	d3 ee                	shr    esi,cl
c0027475:	b8 20 00 00 00       	mov    eax,0x20
c002747a:	29 c8                	sub    eax,ecx
c002747c:	89 c1                	mov    ecx,eax
c002747e:	d3 e3                	shl    ebx,cl
c0027480:	31 c0                	xor    eax,eax
c0027482:	85 db                	test   ebx,ebx
c0027484:	0f 95 c0             	setne  al
c0027487:	09 f0                	or     eax,esi
c0027489:	01 d0                	add    eax,edx
c002748b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002748e:	e9 b6 00 00 00       	jmp    c0027549 <__addsf3+0x14b>
c0027493:	74 5c                	je     c00274f1 <__addsf3+0xf3>
c0027495:	89 f1                	mov    ecx,esi
c0027497:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002749a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002749d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274a1:	75 14                	jne    c00274b7 <__addsf3+0xb9>
c00274a3:	85 d2                	test   edx,edx
c00274a5:	0f 84 4c 02 00 00    	je     c00276f7 <__addsf3+0x2f9>
c00274ab:	49                   	dec    ecx
c00274ac:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00274af:	0f 84 94 00 00 00    	je     c0027549 <__addsf3+0x14b>
c00274b5:	eb 12                	jmp    c00274c9 <__addsf3+0xcb>
c00274b7:	89 f0                	mov    eax,esi
c00274b9:	f7 d0                	not    eax
c00274bb:	84 c0                	test   al,al
c00274bd:	0f 84 34 02 00 00    	je     c00276f7 <__addsf3+0x2f9>
c00274c3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00274c9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274cc:	83 f9 1f             	cmp    ecx,0x1f
c00274cf:	0f 8f 22 02 00 00    	jg     c00276f7 <__addsf3+0x2f9>
c00274d5:	89 d7                	mov    edi,edx
c00274d7:	d3 ef                	shr    edi,cl
c00274d9:	b8 20 00 00 00       	mov    eax,0x20
c00274de:	29 c8                	sub    eax,ecx
c00274e0:	89 c1                	mov    ecx,eax
c00274e2:	d3 e2                	shl    edx,cl
c00274e4:	31 c0                	xor    eax,eax
c00274e6:	85 d2                	test   edx,edx
c00274e8:	0f 95 c0             	setne  al
c00274eb:	09 f8                	or     eax,edi
c00274ed:	01 d8                	add    eax,ebx
c00274ef:	eb 58                	jmp    c0027549 <__addsf3+0x14b>
c00274f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00274f4:	8d 70 01             	lea    esi,[eax+0x1]
c00274f7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00274fd:	75 32                	jne    c0027531 <__addsf3+0x133>
c00274ff:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027503:	75 1f                	jne    c0027524 <__addsf3+0x126>
c0027505:	85 d2                	test   edx,edx
c0027507:	0f 84 e0 01 00 00    	je     c00276ed <__addsf3+0x2ef>
c002750d:	85 db                	test   ebx,ebx
c002750f:	0f 84 e2 01 00 00    	je     c00276f7 <__addsf3+0x2f9>
c0027515:	89 d0                	mov    eax,edx
c0027517:	01 d8                	add    eax,ebx
c0027519:	0f 89 a9 01 00 00    	jns    c00276c8 <__addsf3+0x2ca>
c002751f:	e9 9d 01 00 00       	jmp    c00276c1 <__addsf3+0x2c3>
c0027524:	85 d2                	test   edx,edx
c0027526:	0f 85 cb 01 00 00    	jne    c00276f7 <__addsf3+0x2f9>
c002752c:	e9 bc 01 00 00       	jmp    c00276ed <__addsf3+0x2ef>
c0027531:	31 c0                	xor    eax,eax
c0027533:	89 f1                	mov    ecx,esi
c0027535:	f7 d1                	not    ecx
c0027537:	84 c9                	test   cl,cl
c0027539:	0f 84 90 01 00 00    	je     c00276cf <__addsf3+0x2d1>
c002753f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027542:	d1 e8                	shr    eax,1
c0027544:	e9 86 01 00 00       	jmp    c00276cf <__addsf3+0x2d1>
c0027549:	85 c0                	test   eax,eax
c002754b:	0f 89 7e 01 00 00    	jns    c00276cf <__addsf3+0x2d1>
c0027551:	46                   	inc    esi
c0027552:	89 f2                	mov    edx,esi
c0027554:	f7 d2                	not    edx
c0027556:	84 d2                	test   dl,dl
c0027558:	0f 84 6f 01 00 00    	je     c00276cd <__addsf3+0x2cf>
c002755e:	89 c2                	mov    edx,eax
c0027560:	83 e2 01             	and    edx,0x1
c0027563:	d1 e8                	shr    eax,1
c0027565:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002756a:	09 d0                	or     eax,edx
c002756c:	e9 5e 01 00 00       	jmp    c00276cf <__addsf3+0x2d1>
c0027571:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027575:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027578:	89 f0                	mov    eax,esi
c002757a:	0f b6 c0             	movzx  eax,al
c002757d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027580:	29 c1                	sub    ecx,eax
c0027582:	85 c9                	test   ecx,ecx
c0027584:	7e 55                	jle    c00275db <__addsf3+0x1dd>
c0027586:	85 c0                	test   eax,eax
c0027588:	75 11                	jne    c002759b <__addsf3+0x19d>
c002758a:	85 db                	test   ebx,ebx
c002758c:	0f 84 65 01 00 00    	je     c00276f7 <__addsf3+0x2f9>
c0027592:	49                   	dec    ecx
c0027593:	75 19                	jne    c00275ae <__addsf3+0x1b0>
c0027595:	89 d0                	mov    eax,edx
c0027597:	29 d8                	sub    eax,ebx
c0027599:	eb 38                	jmp    c00275d3 <__addsf3+0x1d5>
c002759b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002759e:	f7 d0                	not    eax
c00275a0:	84 c0                	test   al,al
c00275a2:	0f 84 4f 01 00 00    	je     c00276f7 <__addsf3+0x2f9>
c00275a8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00275ae:	83 f9 1f             	cmp    ecx,0x1f
c00275b1:	0f 8f 40 01 00 00    	jg     c00276f7 <__addsf3+0x2f9>
c00275b7:	89 de                	mov    esi,ebx
c00275b9:	d3 ee                	shr    esi,cl
c00275bb:	b8 20 00 00 00       	mov    eax,0x20
c00275c0:	29 c8                	sub    eax,ecx
c00275c2:	89 c1                	mov    ecx,eax
c00275c4:	d3 e3                	shl    ebx,cl
c00275c6:	31 c0                	xor    eax,eax
c00275c8:	85 db                	test   ebx,ebx
c00275ca:	0f 95 c0             	setne  al
c00275cd:	09 f0                	or     eax,esi
c00275cf:	29 c2                	sub    edx,eax
c00275d1:	89 d0                	mov    eax,edx
c00275d3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00275d6:	e9 af 00 00 00       	jmp    c002768a <__addsf3+0x28c>
c00275db:	74 5c                	je     c0027639 <__addsf3+0x23b>
c00275dd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00275e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275e3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00275e7:	75 14                	jne    c00275fd <__addsf3+0x1ff>
c00275e9:	85 d2                	test   edx,edx
c00275eb:	0f 84 06 01 00 00    	je     c00276f7 <__addsf3+0x2f9>
c00275f1:	48                   	dec    eax
c00275f2:	75 1b                	jne    c002760f <__addsf3+0x211>
c00275f4:	89 d8                	mov    eax,ebx
c00275f6:	29 d0                	sub    eax,edx
c00275f8:	e9 8d 00 00 00       	jmp    c002768a <__addsf3+0x28c>
c00275fd:	89 f1                	mov    ecx,esi
c00275ff:	f7 d1                	not    ecx
c0027601:	84 c9                	test   cl,cl
c0027603:	0f 84 ee 00 00 00    	je     c00276f7 <__addsf3+0x2f9>
c0027609:	81 ca 00 00 00 80    	or     edx,0x80000000
c002760f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027612:	83 f8 1f             	cmp    eax,0x1f
c0027615:	0f 8f dc 00 00 00    	jg     c00276f7 <__addsf3+0x2f9>
c002761b:	89 d7                	mov    edi,edx
c002761d:	88 c1                	mov    cl,al
c002761f:	d3 ef                	shr    edi,cl
c0027621:	b9 20 00 00 00       	mov    ecx,0x20
c0027626:	29 c1                	sub    ecx,eax
c0027628:	d3 e2                	shl    edx,cl
c002762a:	31 c0                	xor    eax,eax
c002762c:	85 d2                	test   edx,edx
c002762e:	0f 95 c0             	setne  al
c0027631:	09 f8                	or     eax,edi
c0027633:	29 c3                	sub    ebx,eax
c0027635:	89 d8                	mov    eax,ebx
c0027637:	eb 51                	jmp    c002768a <__addsf3+0x28c>
c0027639:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002763c:	40                   	inc    eax
c002763d:	a8 fe                	test   al,0xfe
c002763f:	75 3d                	jne    c002767e <__addsf3+0x280>
c0027641:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027645:	0f 85 a7 00 00 00    	jne    c00276f2 <__addsf3+0x2f4>
c002764b:	85 d2                	test   edx,edx
c002764d:	75 12                	jne    c0027661 <__addsf3+0x263>
c002764f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027652:	85 db                	test   ebx,ebx
c0027654:	0f 85 9d 00 00 00    	jne    c00276f7 <__addsf3+0x2f9>
c002765a:	31 ff                	xor    edi,edi
c002765c:	e9 96 00 00 00       	jmp    c00276f7 <__addsf3+0x2f9>
c0027661:	85 db                	test   ebx,ebx
c0027663:	0f 84 8e 00 00 00    	je     c00276f7 <__addsf3+0x2f9>
c0027669:	89 d0                	mov    eax,edx
c002766b:	29 d8                	sub    eax,ebx
c002766d:	79 06                	jns    c0027675 <__addsf3+0x277>
c002766f:	89 d8                	mov    eax,ebx
c0027671:	29 d0                	sub    eax,edx
c0027673:	eb 5a                	jmp    c00276cf <__addsf3+0x2d1>
c0027675:	bf 00 00 00 00       	mov    edi,0x0
c002767a:	74 7b                	je     c00276f7 <__addsf3+0x2f9>
c002767c:	eb 4a                	jmp    c00276c8 <__addsf3+0x2ca>
c002767e:	89 d0                	mov    eax,edx
c0027680:	29 d8                	sub    eax,ebx
c0027682:	79 12                	jns    c0027696 <__addsf3+0x298>
c0027684:	89 d8                	mov    eax,ebx
c0027686:	29 d0                	sub    eax,edx
c0027688:	eb 09                	jmp    c0027693 <__addsf3+0x295>
c002768a:	85 c0                	test   eax,eax
c002768c:	79 41                	jns    c00276cf <__addsf3+0x2d1>
c002768e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027693:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027696:	31 f6                	xor    esi,esi
c0027698:	85 c0                	test   eax,eax
c002769a:	74 33                	je     c00276cf <__addsf3+0x2d1>
c002769c:	0f bd c8             	bsr    ecx,eax
c002769f:	83 f1 1f             	xor    ecx,0x1f
c00276a2:	d3 e0                	shl    eax,cl
c00276a4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00276a8:	39 ca                	cmp    edx,ecx
c00276aa:	7f 10                	jg     c00276bc <__addsf3+0x2be>
c00276ac:	29 d1                	sub    ecx,edx
c00276ae:	41                   	inc    ecx
c00276af:	d3 e8                	shr    eax,cl
c00276b1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276b4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00276ba:	eb 13                	jmp    c00276cf <__addsf3+0x2d1>
c00276bc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276bf:	29 ce                	sub    esi,ecx
c00276c1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276c6:	eb 07                	jmp    c00276cf <__addsf3+0x2d1>
c00276c8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276cb:	eb 02                	jmp    c00276cf <__addsf3+0x2d1>
c00276cd:	31 c0                	xor    eax,eax
c00276cf:	89 c2                	mov    edx,eax
c00276d1:	c1 ea 08             	shr    edx,0x8
c00276d4:	a8 7f                	test   al,0x7f
c00276d6:	0f 95 c1             	setne  cl
c00276d9:	09 d1                	or     ecx,edx
c00276db:	83 e1 01             	and    ecx,0x1
c00276de:	c1 e8 07             	shr    eax,0x7
c00276e1:	21 c8                	and    eax,ecx
c00276e3:	c1 e6 17             	shl    esi,0x17
c00276e6:	09 d6                	or     esi,edx
c00276e8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00276eb:	eb 0a                	jmp    c00276f7 <__addsf3+0x2f9>
c00276ed:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276f0:	eb 05                	jmp    c00276f7 <__addsf3+0x2f9>
c00276f2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00276f7:	89 f8                	mov    eax,edi
c00276f9:	5a                   	pop    edx
c00276fa:	59                   	pop    ecx
c00276fb:	5b                   	pop    ebx
c00276fc:	5e                   	pop    esi
c00276fd:	5f                   	pop    edi
c00276fe:	5d                   	pop    ebp
c00276ff:	c3                   	ret    

c0027700 <__subsf3>:
c0027700:	55                   	push   ebp
c0027701:	89 e5                	mov    ebp,esp
c0027703:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027706:	05 00 00 00 80       	add    eax,0x80000000
c002770b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002770e:	5d                   	pop    ebp
c002770f:	e9 ea fc ff ff       	jmp    c00273fe <__addsf3>

c0027714 <__negsf2>:
c0027714:	55                   	push   ebp
c0027715:	89 e5                	mov    ebp,esp
c0027717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002771a:	05 00 00 00 80       	add    eax,0x80000000
c002771f:	5d                   	pop    ebp
c0027720:	c3                   	ret    

c0027721 <__mulsf3>:
c0027721:	55                   	push   ebp
c0027722:	89 e5                	mov    ebp,esp
c0027724:	57                   	push   edi
c0027725:	56                   	push   esi
c0027726:	53                   	push   ebx
c0027727:	83 ec 1c             	sub    esp,0x1c
c002772a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002772d:	89 f0                	mov    eax,esi
c002772f:	89 f1                	mov    ecx,esi
c0027731:	c1 f9 17             	sar    ecx,0x17
c0027734:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027737:	c1 e0 08             	shl    eax,0x8
c002773a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002773f:	89 c1                	mov    ecx,eax
c0027741:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027744:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027747:	89 c7                	mov    edi,eax
c0027749:	c1 ff 17             	sar    edi,0x17
c002774c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027750:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027753:	89 f8                	mov    eax,edi
c0027755:	0f b6 c0             	movzx  eax,al
c0027758:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002775b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002775f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027762:	42                   	inc    edx
c0027763:	80 e2 fe             	and    dl,0xfe
c0027766:	75 7b                	jne    c00277e3 <__mulsf3+0xc2>
c0027768:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002776c:	74 54                	je     c00277c2 <__mulsf3+0xa1>
c002776e:	85 c9                	test   ecx,ecx
c0027770:	0f 85 64 01 00 00    	jne    c00278da <__mulsf3+0x1b9>
c0027776:	8d 57 01             	lea    edx,[edi+0x1]
c0027779:	80 e2 fe             	and    dl,0xfe
c002777c:	75 1f                	jne    c002779d <__mulsf3+0x7c>
c002777e:	85 c0                	test   eax,eax
c0027780:	b8 00 00 00 00       	mov    eax,0x0
c0027785:	74 29                	je     c00277b0 <__mulsf3+0x8f>
c0027787:	53                   	push   ebx
c0027788:	53                   	push   ebx
c0027789:	50                   	push   eax
c002778a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002778d:	e8 96 05 00 00       	call   c0027d28 <__nesf2>
c0027792:	83 c4 10             	add    esp,0x10
c0027795:	85 c0                	test   eax,eax
c0027797:	0f 85 3a 01 00 00    	jne    c00278d7 <__mulsf3+0x1b6>
c002779d:	85 ff                	test   edi,edi
c002779f:	0f 89 35 01 00 00    	jns    c00278da <__mulsf3+0x1b9>
c00277a5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00277ab:	e9 2a 01 00 00       	jmp    c00278da <__mulsf3+0x1b9>
c00277b0:	51                   	push   ecx
c00277b1:	51                   	push   ecx
c00277b2:	50                   	push   eax
c00277b3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277b6:	e8 6d 05 00 00       	call   c0027d28 <__nesf2>
c00277bb:	83 c4 10             	add    esp,0x10
c00277be:	85 c0                	test   eax,eax
c00277c0:	eb 15                	jmp    c00277d7 <__mulsf3+0xb6>
c00277c2:	85 c9                	test   ecx,ecx
c00277c4:	74 0b                	je     c00277d1 <__mulsf3+0xb0>
c00277c6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00277c9:	01 c9                	add    ecx,ecx
c00277cb:	78 16                	js     c00277e3 <__mulsf3+0xc2>
c00277cd:	89 d3                	mov    ebx,edx
c00277cf:	eb f5                	jmp    c00277c6 <__mulsf3+0xa5>
c00277d1:	89 f8                	mov    eax,edi
c00277d3:	f7 d0                	not    eax
c00277d5:	84 c0                	test   al,al
c00277d7:	75 c4                	jne    c002779d <__mulsf3+0x7c>
c00277d9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00277de:	e9 f7 00 00 00       	jmp    c00278da <__mulsf3+0x1b9>
c00277e3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277e6:	c1 e6 08             	shl    esi,0x8
c00277e9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00277ef:	8d 57 01             	lea    edx,[edi+0x1]
c00277f2:	80 e2 fe             	and    dl,0xfe
c00277f5:	75 63                	jne    c002785a <__mulsf3+0x139>
c00277f7:	85 c0                	test   eax,eax
c00277f9:	74 2f                	je     c002782a <__mulsf3+0x109>
c00277fb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00277ff:	0f 89 d2 00 00 00    	jns    c00278d7 <__mulsf3+0x1b6>
c0027805:	52                   	push   edx
c0027806:	52                   	push   edx
c0027807:	6a 00                	push   0x0
c0027809:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002780c:	e8 dc 04 00 00       	call   c0027ced <__eqsf2>
c0027811:	83 c4 10             	add    esp,0x10
c0027814:	85 c0                	test   eax,eax
c0027816:	0f 85 bb 00 00 00    	jne    c00278d7 <__mulsf3+0x1b6>
c002781c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002781f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027825:	e9 b0 00 00 00       	jmp    c00278da <__mulsf3+0x1b9>
c002782a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002782d:	50                   	push   eax
c002782e:	50                   	push   eax
c002782f:	6a 00                	push   0x0
c0027831:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027834:	e8 b4 04 00 00       	call   c0027ced <__eqsf2>
c0027839:	83 c4 10             	add    esp,0x10
c002783c:	85 c0                	test   eax,eax
c002783e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027841:	75 0c                	jne    c002784f <__mulsf3+0x12e>
c0027843:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027847:	0f 89 8a 00 00 00    	jns    c00278d7 <__mulsf3+0x1b6>
c002784d:	eb cd                	jmp    c002781c <__mulsf3+0xfb>
c002784f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027852:	01 f6                	add    esi,esi
c0027854:	78 04                	js     c002785a <__mulsf3+0x139>
c0027856:	89 c3                	mov    ebx,eax
c0027858:	eb f5                	jmp    c002784f <__mulsf3+0x12e>
c002785a:	89 c8                	mov    eax,ecx
c002785c:	0d 00 00 00 80       	or     eax,0x80000000
c0027861:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027867:	f7 e6                	mul    esi
c0027869:	85 c0                	test   eax,eax
c002786b:	0f 95 c0             	setne  al
c002786e:	0f b6 c0             	movzx  eax,al
c0027871:	09 c2                	or     edx,eax
c0027873:	78 03                	js     c0027878 <__mulsf3+0x157>
c0027875:	01 d2                	add    edx,edx
c0027877:	4b                   	dec    ebx
c0027878:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002787e:	7f 22                	jg     c00278a2 <__mulsf3+0x181>
c0027880:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027886:	85 db                	test   ebx,ebx
c0027888:	7f 23                	jg     c00278ad <__mulsf3+0x18c>
c002788a:	83 fb e9             	cmp    ebx,0xffffffe9
c002788d:	7c 1a                	jl     c00278a9 <__mulsf3+0x188>
c002788f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027895:	b9 01 00 00 00       	mov    ecx,0x1
c002789a:	29 d9                	sub    ecx,ebx
c002789c:	d3 ea                	shr    edx,cl
c002789e:	31 db                	xor    ebx,ebx
c00278a0:	eb 0b                	jmp    c00278ad <__mulsf3+0x18c>
c00278a2:	bb ff 00 00 00       	mov    ebx,0xff
c00278a7:	eb 02                	jmp    c00278ab <__mulsf3+0x18a>
c00278a9:	31 db                	xor    ebx,ebx
c00278ab:	31 d2                	xor    edx,edx
c00278ad:	89 d0                	mov    eax,edx
c00278af:	c1 e8 08             	shr    eax,0x8
c00278b2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00278b5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00278bb:	09 fb                	or     ebx,edi
c00278bd:	c1 e3 17             	shl    ebx,0x17
c00278c0:	09 c3                	or     ebx,eax
c00278c2:	f6 c2 7f             	test   dl,0x7f
c00278c5:	0f 95 c1             	setne  cl
c00278c8:	09 c8                	or     eax,ecx
c00278ca:	83 e0 01             	and    eax,0x1
c00278cd:	c1 ea 07             	shr    edx,0x7
c00278d0:	21 c2                	and    edx,eax
c00278d2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00278d5:	eb 03                	jmp    c00278da <__mulsf3+0x1b9>
c00278d7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00278da:	89 f0                	mov    eax,esi
c00278dc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00278df:	5b                   	pop    ebx
c00278e0:	5e                   	pop    esi
c00278e1:	5f                   	pop    edi
c00278e2:	5d                   	pop    ebp
c00278e3:	c3                   	ret    

c00278e4 <__divsf3>:
c00278e4:	55                   	push   ebp
c00278e5:	89 e5                	mov    ebp,esp
c00278e7:	57                   	push   edi
c00278e8:	56                   	push   esi
c00278e9:	53                   	push   ebx
c00278ea:	83 ec 1c             	sub    esp,0x1c
c00278ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00278f0:	89 d8                	mov    eax,ebx
c00278f2:	89 d9                	mov    ecx,ebx
c00278f4:	c1 f9 17             	sar    ecx,0x17
c00278f7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00278fa:	c1 e0 08             	shl    eax,0x8
c00278fd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027902:	89 c1                	mov    ecx,eax
c0027904:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027907:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002790a:	89 c7                	mov    edi,eax
c002790c:	c1 ff 17             	sar    edi,0x17
c002790f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027913:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027916:	89 f8                	mov    eax,edi
c0027918:	0f b6 c0             	movzx  eax,al
c002791b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002791e:	29 c6                	sub    esi,eax
c0027920:	83 c6 7f             	add    esi,0x7f
c0027923:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027926:	42                   	inc    edx
c0027927:	80 e2 fe             	and    dl,0xfe
c002792a:	0f 85 9c 00 00 00    	jne    c00279cc <__divsf3+0xe8>
c0027930:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027934:	74 33                	je     c0027969 <__divsf3+0x85>
c0027936:	85 c9                	test   ecx,ecx
c0027938:	0f 85 c7 01 00 00    	jne    c0027b05 <__divsf3+0x221>
c002793e:	8d 57 01             	lea    edx,[edi+0x1]
c0027941:	80 e2 fe             	and    dl,0xfe
c0027944:	75 2f                	jne    c0027975 <__divsf3+0x91>
c0027946:	85 c0                	test   eax,eax
c0027948:	74 2b                	je     c0027975 <__divsf3+0x91>
c002794a:	51                   	push   ecx
c002794b:	51                   	push   ecx
c002794c:	6a 00                	push   0x0
c002794e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027951:	e8 d2 03 00 00       	call   c0027d28 <__nesf2>
c0027956:	83 c4 10             	add    esp,0x10
c0027959:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002795c:	85 c0                	test   eax,eax
c002795e:	0f 85 a1 01 00 00    	jne    c0027b05 <__divsf3+0x221>
c0027964:	e9 92 01 00 00       	jmp    c0027afb <__divsf3+0x217>
c0027969:	85 c9                	test   ecx,ecx
c002796b:	75 1b                	jne    c0027988 <__divsf3+0xa4>
c002796d:	8d 57 01             	lea    edx,[edi+0x1]
c0027970:	80 e2 fe             	and    dl,0xfe
c0027973:	74 1e                	je     c0027993 <__divsf3+0xaf>
c0027975:	85 ff                	test   edi,edi
c0027977:	0f 89 88 01 00 00    	jns    c0027b05 <__divsf3+0x221>
c002797d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027983:	e9 7d 01 00 00       	jmp    c0027b05 <__divsf3+0x221>
c0027988:	8d 56 ff             	lea    edx,[esi-0x1]
c002798b:	01 c9                	add    ecx,ecx
c002798d:	78 3d                	js     c00279cc <__divsf3+0xe8>
c002798f:	89 d6                	mov    esi,edx
c0027991:	eb f5                	jmp    c0027988 <__divsf3+0xa4>
c0027993:	85 c0                	test   eax,eax
c0027995:	b8 00 00 00 00       	mov    eax,0x0
c002799a:	74 18                	je     c00279b4 <__divsf3+0xd0>
c002799c:	52                   	push   edx
c002799d:	52                   	push   edx
c002799e:	50                   	push   eax
c002799f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279a2:	e8 81 03 00 00       	call   c0027d28 <__nesf2>
c00279a7:	83 c4 10             	add    esp,0x10
c00279aa:	85 c0                	test   eax,eax
c00279ac:	0f 85 50 01 00 00    	jne    c0027b02 <__divsf3+0x21e>
c00279b2:	eb c1                	jmp    c0027975 <__divsf3+0x91>
c00279b4:	56                   	push   esi
c00279b5:	56                   	push   esi
c00279b6:	50                   	push   eax
c00279b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279ba:	e8 69 03 00 00       	call   c0027d28 <__nesf2>
c00279bf:	83 c4 10             	add    esp,0x10
c00279c2:	85 c0                	test   eax,eax
c00279c4:	0f 84 31 01 00 00    	je     c0027afb <__divsf3+0x217>
c00279ca:	eb a9                	jmp    c0027975 <__divsf3+0x91>
c00279cc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00279cf:	c1 e3 08             	shl    ebx,0x8
c00279d2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00279d8:	8d 57 01             	lea    edx,[edi+0x1]
c00279db:	80 e2 fe             	and    dl,0xfe
c00279de:	75 71                	jne    c0027a51 <__divsf3+0x16d>
c00279e0:	85 c0                	test   eax,eax
c00279e2:	ba 00 00 00 00       	mov    edx,0x0
c00279e7:	74 2f                	je     c0027a18 <__divsf3+0x134>
c00279e9:	51                   	push   ecx
c00279ea:	51                   	push   ecx
c00279eb:	52                   	push   edx
c00279ec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279ef:	e8 f9 02 00 00       	call   c0027ced <__eqsf2>
c00279f4:	83 c4 10             	add    esp,0x10
c00279f7:	85 c0                	test   eax,eax
c00279f9:	0f 85 03 01 00 00    	jne    c0027b02 <__divsf3+0x21e>
c00279ff:	31 d2                	xor    edx,edx
c0027a01:	89 d3                	mov    ebx,edx
c0027a03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a06:	31 f8                	xor    eax,edi
c0027a08:	0f 89 f7 00 00 00    	jns    c0027b05 <__divsf3+0x221>
c0027a0e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027a13:	e9 ed 00 00 00       	jmp    c0027b05 <__divsf3+0x221>
c0027a18:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027a1b:	50                   	push   eax
c0027a1c:	50                   	push   eax
c0027a1d:	52                   	push   edx
c0027a1e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a21:	e8 c7 02 00 00       	call   c0027ced <__eqsf2>
c0027a26:	83 c4 10             	add    esp,0x10
c0027a29:	85 c0                	test   eax,eax
c0027a2b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a2e:	75 16                	jne    c0027a46 <__divsf3+0x162>
c0027a30:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a33:	31 fb                	xor    ebx,edi
c0027a35:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027a3b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a41:	e9 bf 00 00 00       	jmp    c0027b05 <__divsf3+0x221>
c0027a46:	8d 46 01             	lea    eax,[esi+0x1]
c0027a49:	01 db                	add    ebx,ebx
c0027a4b:	78 04                	js     c0027a51 <__divsf3+0x16d>
c0027a4d:	89 c6                	mov    esi,eax
c0027a4f:	eb f5                	jmp    c0027a46 <__divsf3+0x162>
c0027a51:	89 c8                	mov    eax,ecx
c0027a53:	0d 00 00 00 80       	or     eax,0x80000000
c0027a58:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a5e:	31 d2                	xor    edx,edx
c0027a60:	39 d8                	cmp    eax,ebx
c0027a62:	72 07                	jb     c0027a6b <__divsf3+0x187>
c0027a64:	29 d8                	sub    eax,ebx
c0027a66:	ba 01 00 00 00       	mov    edx,0x1
c0027a6b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027a72:	01 d2                	add    edx,edx
c0027a74:	89 c1                	mov    ecx,eax
c0027a76:	01 c0                	add    eax,eax
c0027a78:	85 c9                	test   ecx,ecx
c0027a7a:	78 04                	js     c0027a80 <__divsf3+0x19c>
c0027a7c:	39 c3                	cmp    ebx,eax
c0027a7e:	77 05                	ja     c0027a85 <__divsf3+0x1a1>
c0027a80:	29 d8                	sub    eax,ebx
c0027a82:	83 ca 01             	or     edx,0x1
c0027a85:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027a88:	75 e8                	jne    c0027a72 <__divsf3+0x18e>
c0027a8a:	85 c0                	test   eax,eax
c0027a8c:	0f 95 c0             	setne  al
c0027a8f:	0f b6 c0             	movzx  eax,al
c0027a92:	c1 e2 06             	shl    edx,0x6
c0027a95:	09 c2                	or     edx,eax
c0027a97:	78 03                	js     c0027a9c <__divsf3+0x1b8>
c0027a99:	01 d2                	add    edx,edx
c0027a9b:	4e                   	dec    esi
c0027a9c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027aa2:	7f 22                	jg     c0027ac6 <__divsf3+0x1e2>
c0027aa4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027aaa:	85 f6                	test   esi,esi
c0027aac:	7f 23                	jg     c0027ad1 <__divsf3+0x1ed>
c0027aae:	83 fe e9             	cmp    esi,0xffffffe9
c0027ab1:	7c 1a                	jl     c0027acd <__divsf3+0x1e9>
c0027ab3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ab9:	b9 01 00 00 00       	mov    ecx,0x1
c0027abe:	29 f1                	sub    ecx,esi
c0027ac0:	d3 ea                	shr    edx,cl
c0027ac2:	31 f6                	xor    esi,esi
c0027ac4:	eb 0b                	jmp    c0027ad1 <__divsf3+0x1ed>
c0027ac6:	be ff 00 00 00       	mov    esi,0xff
c0027acb:	eb 02                	jmp    c0027acf <__divsf3+0x1eb>
c0027acd:	31 f6                	xor    esi,esi
c0027acf:	31 d2                	xor    edx,edx
c0027ad1:	89 d0                	mov    eax,edx
c0027ad3:	c1 e8 08             	shr    eax,0x8
c0027ad6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027ad9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027adf:	09 fe                	or     esi,edi
c0027ae1:	c1 e6 17             	shl    esi,0x17
c0027ae4:	09 c6                	or     esi,eax
c0027ae6:	f6 c2 7f             	test   dl,0x7f
c0027ae9:	0f 95 c1             	setne  cl
c0027aec:	09 c8                	or     eax,ecx
c0027aee:	83 e0 01             	and    eax,0x1
c0027af1:	c1 ea 07             	shr    edx,0x7
c0027af4:	21 c2                	and    edx,eax
c0027af6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027af9:	eb 0a                	jmp    c0027b05 <__divsf3+0x221>
c0027afb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027b00:	eb 03                	jmp    c0027b05 <__divsf3+0x221>
c0027b02:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027b05:	89 d8                	mov    eax,ebx
c0027b07:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b0a:	5b                   	pop    ebx
c0027b0b:	5e                   	pop    esi
c0027b0c:	5f                   	pop    edi
c0027b0d:	5d                   	pop    ebp
c0027b0e:	c3                   	ret    

c0027b0f <__floatsisf>:
c0027b0f:	55                   	push   ebp
c0027b10:	89 e5                	mov    ebp,esp
c0027b12:	53                   	push   ebx
c0027b13:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b16:	85 d2                	test   edx,edx
c0027b18:	7e 2b                	jle    c0027b45 <__floatsisf+0x36>
c0027b1a:	0f bd ca             	bsr    ecx,edx
c0027b1d:	83 f1 1f             	xor    ecx,0x1f
c0027b20:	d3 e2                	shl    edx,cl
c0027b22:	89 d0                	mov    eax,edx
c0027b24:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b29:	89 c3                	mov    ebx,eax
c0027b2b:	c1 eb 08             	shr    ebx,0x8
c0027b2e:	80 e2 7f             	and    dl,0x7f
c0027b31:	0f 95 c2             	setne  dl
c0027b34:	09 da                	or     edx,ebx
c0027b36:	83 e2 01             	and    edx,0x1
c0027b39:	c1 e8 07             	shr    eax,0x7
c0027b3c:	21 c2                	and    edx,eax
c0027b3e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b43:	eb 32                	jmp    c0027b77 <__floatsisf+0x68>
c0027b45:	b8 00 00 00 00       	mov    eax,0x0
c0027b4a:	74 34                	je     c0027b80 <__floatsisf+0x71>
c0027b4c:	f7 da                	neg    edx
c0027b4e:	0f bd ca             	bsr    ecx,edx
c0027b51:	83 f1 1f             	xor    ecx,0x1f
c0027b54:	d3 e2                	shl    edx,cl
c0027b56:	89 d0                	mov    eax,edx
c0027b58:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b5d:	89 c3                	mov    ebx,eax
c0027b5f:	c1 eb 08             	shr    ebx,0x8
c0027b62:	80 e2 7f             	and    dl,0x7f
c0027b65:	0f 95 c2             	setne  dl
c0027b68:	09 da                	or     edx,ebx
c0027b6a:	83 e2 01             	and    edx,0x1
c0027b6d:	c1 e8 07             	shr    eax,0x7
c0027b70:	21 c2                	and    edx,eax
c0027b72:	b8 9e 01 00 00       	mov    eax,0x19e
c0027b77:	29 c8                	sub    eax,ecx
c0027b79:	c1 e0 17             	shl    eax,0x17
c0027b7c:	09 d8                	or     eax,ebx
c0027b7e:	01 d0                	add    eax,edx
c0027b80:	5b                   	pop    ebx
c0027b81:	5d                   	pop    ebp
c0027b82:	c3                   	ret    

c0027b83 <__floatunsisf>:
c0027b83:	55                   	push   ebp
c0027b84:	89 e5                	mov    ebp,esp
c0027b86:	53                   	push   ebx
c0027b87:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b8a:	31 c0                	xor    eax,eax
c0027b8c:	85 d2                	test   edx,edx
c0027b8e:	74 32                	je     c0027bc2 <__floatunsisf+0x3f>
c0027b90:	0f bd ca             	bsr    ecx,edx
c0027b93:	83 f1 1f             	xor    ecx,0x1f
c0027b96:	d3 e2                	shl    edx,cl
c0027b98:	89 d0                	mov    eax,edx
c0027b9a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b9f:	89 c3                	mov    ebx,eax
c0027ba1:	c1 eb 08             	shr    ebx,0x8
c0027ba4:	80 e2 7f             	and    dl,0x7f
c0027ba7:	0f 95 c2             	setne  dl
c0027baa:	09 da                	or     edx,ebx
c0027bac:	83 e2 01             	and    edx,0x1
c0027baf:	c1 e8 07             	shr    eax,0x7
c0027bb2:	21 c2                	and    edx,eax
c0027bb4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027bb9:	29 c8                	sub    eax,ecx
c0027bbb:	c1 e0 17             	shl    eax,0x17
c0027bbe:	09 d8                	or     eax,ebx
c0027bc0:	01 d0                	add    eax,edx
c0027bc2:	5b                   	pop    ebx
c0027bc3:	5d                   	pop    ebp
c0027bc4:	c3                   	ret    

c0027bc5 <__fixsfsi>:
c0027bc5:	55                   	push   ebp
c0027bc6:	89 e5                	mov    ebp,esp
c0027bc8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bcb:	89 d1                	mov    ecx,edx
c0027bcd:	c1 e1 08             	shl    ecx,0x8
c0027bd0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027bd6:	c1 fa 17             	sar    edx,0x17
c0027bd9:	78 1c                	js     c0027bf7 <__fixsfsi+0x32>
c0027bdb:	83 ea 7f             	sub    edx,0x7f
c0027bde:	31 c0                	xor    eax,eax
c0027be0:	83 fa 1e             	cmp    edx,0x1e
c0027be3:	77 40                	ja     c0027c25 <__fixsfsi+0x60>
c0027be5:	89 c8                	mov    eax,ecx
c0027be7:	0d 00 00 00 80       	or     eax,0x80000000
c0027bec:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bf1:	29 d1                	sub    ecx,edx
c0027bf3:	d3 e8                	shr    eax,cl
c0027bf5:	eb 2e                	jmp    c0027c25 <__fixsfsi+0x60>
c0027bf7:	31 c0                	xor    eax,eax
c0027bf9:	81 c2 81 00 00 00    	add    edx,0x81
c0027bff:	78 24                	js     c0027c25 <__fixsfsi+0x60>
c0027c01:	83 fa 1e             	cmp    edx,0x1e
c0027c04:	7e 09                	jle    c0027c0f <__fixsfsi+0x4a>
c0027c06:	83 fa 1f             	cmp    edx,0x1f
c0027c09:	75 18                	jne    c0027c23 <__fixsfsi+0x5e>
c0027c0b:	85 c9                	test   ecx,ecx
c0027c0d:	75 14                	jne    c0027c23 <__fixsfsi+0x5e>
c0027c0f:	89 c8                	mov    eax,ecx
c0027c11:	0d 00 00 00 80       	or     eax,0x80000000
c0027c16:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c1b:	29 d1                	sub    ecx,edx
c0027c1d:	d3 e8                	shr    eax,cl
c0027c1f:	f7 d8                	neg    eax
c0027c21:	eb 02                	jmp    c0027c25 <__fixsfsi+0x60>
c0027c23:	31 c0                	xor    eax,eax
c0027c25:	5d                   	pop    ebp
c0027c26:	c3                   	ret    

c0027c27 <__fixunssfsi>:
c0027c27:	55                   	push   ebp
c0027c28:	89 e5                	mov    ebp,esp
c0027c2a:	53                   	push   ebx
c0027c2b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c2e:	89 d3                	mov    ebx,edx
c0027c30:	c1 fb 17             	sar    ebx,0x17
c0027c33:	83 eb 7f             	sub    ebx,0x7f
c0027c36:	31 c0                	xor    eax,eax
c0027c38:	83 fb 1f             	cmp    ebx,0x1f
c0027c3b:	77 18                	ja     c0027c55 <__fixunssfsi+0x2e>
c0027c3d:	89 d0                	mov    eax,edx
c0027c3f:	c1 e0 08             	shl    eax,0x8
c0027c42:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c47:	0d 00 00 00 80       	or     eax,0x80000000
c0027c4c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c51:	29 d9                	sub    ecx,ebx
c0027c53:	d3 e8                	shr    eax,cl
c0027c55:	5b                   	pop    ebx
c0027c56:	5d                   	pop    ebp
c0027c57:	c3                   	ret    

c0027c58 <__cmpsf2>:
c0027c58:	55                   	push   ebp
c0027c59:	89 e5                	mov    ebp,esp
c0027c5b:	57                   	push   edi
c0027c5c:	56                   	push   esi
c0027c5d:	53                   	push   ebx
c0027c5e:	83 ec 24             	sub    esp,0x24
c0027c61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c67:	e8 4f 10 00 00       	call   c0028cbb <__truncdfsf2>
c0027c6c:	5a                   	pop    edx
c0027c6d:	59                   	pop    ecx
c0027c6e:	89 c3                	mov    ebx,eax
c0027c70:	c1 e8 17             	shr    eax,0x17
c0027c73:	0f b6 f0             	movzx  esi,al
c0027c76:	89 d8                	mov    eax,ebx
c0027c78:	c1 e8 1f             	shr    eax,0x1f
c0027c7b:	31 c6                	xor    esi,eax
c0027c7d:	c1 e3 08             	shl    ebx,0x8
c0027c80:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c83:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c86:	e8 30 10 00 00       	call   c0028cbb <__truncdfsf2>
c0027c8b:	83 c4 10             	add    esp,0x10
c0027c8e:	89 c1                	mov    ecx,eax
c0027c90:	c1 e9 17             	shr    ecx,0x17
c0027c93:	0f b6 c9             	movzx  ecx,cl
c0027c96:	89 c7                	mov    edi,eax
c0027c98:	c1 ef 1f             	shr    edi,0x1f
c0027c9b:	89 ca                	mov    edx,ecx
c0027c9d:	31 fa                	xor    edx,edi
c0027c9f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027ca2:	c1 e0 08             	shl    eax,0x8
c0027ca5:	89 c2                	mov    edx,eax
c0027ca7:	89 d8                	mov    eax,ebx
c0027ca9:	09 d0                	or     eax,edx
c0027cab:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027cb0:	09 f0                	or     eax,esi
c0027cb2:	75 08                	jne    c0027cbc <__cmpsf2+0x64>
c0027cb4:	31 c0                	xor    eax,eax
c0027cb6:	39 f9                	cmp    ecx,edi
c0027cb8:	75 0c                	jne    c0027cc6 <__cmpsf2+0x6e>
c0027cba:	eb 29                	jmp    c0027ce5 <__cmpsf2+0x8d>
c0027cbc:	b8 01 00 00 00       	mov    eax,0x1
c0027cc1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cc4:	7f 1f                	jg     c0027ce5 <__cmpsf2+0x8d>
c0027cc6:	83 c8 ff             	or     eax,0xffffffff
c0027cc9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027ccc:	7c 17                	jl     c0027ce5 <__cmpsf2+0x8d>
c0027cce:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027cd4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027cda:	b8 01 00 00 00       	mov    eax,0x1
c0027cdf:	39 d3                	cmp    ebx,edx
c0027ce1:	77 02                	ja     c0027ce5 <__cmpsf2+0x8d>
c0027ce3:	19 c0                	sbb    eax,eax
c0027ce5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027ce8:	5b                   	pop    ebx
c0027ce9:	5e                   	pop    esi
c0027cea:	5f                   	pop    edi
c0027ceb:	5d                   	pop    ebp
c0027cec:	c3                   	ret    

c0027ced <__eqsf2>:
c0027ced:	55                   	push   ebp
c0027cee:	89 e5                	mov    ebp,esp
c0027cf0:	83 ec 24             	sub    esp,0x24
c0027cf3:	6a 01                	push   0x1
c0027cf5:	83 ec 0c             	sub    esp,0xc
c0027cf8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cfb:	e8 df 10 00 00       	call   c0028ddf <__extendsfdf2>
c0027d00:	83 c4 10             	add    esp,0x10
c0027d03:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d06:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d09:	52                   	push   edx
c0027d0a:	50                   	push   eax
c0027d0b:	50                   	push   eax
c0027d0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d0f:	e8 cb 10 00 00       	call   c0028ddf <__extendsfdf2>
c0027d14:	59                   	pop    ecx
c0027d15:	59                   	pop    ecx
c0027d16:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d19:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d1c:	52                   	push   edx
c0027d1d:	50                   	push   eax
c0027d1e:	e8 35 ff ff ff       	call   c0027c58 <__cmpsf2>
c0027d23:	83 c4 20             	add    esp,0x20
c0027d26:	c9                   	leave  
c0027d27:	c3                   	ret    

c0027d28 <__nesf2>:
c0027d28:	eb c3                	jmp    c0027ced <__eqsf2>

c0027d2a <__gtsf2>:
c0027d2a:	55                   	push   ebp
c0027d2b:	89 e5                	mov    ebp,esp
c0027d2d:	83 ec 24             	sub    esp,0x24
c0027d30:	6a ff                	push   0xffffffff
c0027d32:	83 ec 0c             	sub    esp,0xc
c0027d35:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d38:	e8 a2 10 00 00       	call   c0028ddf <__extendsfdf2>
c0027d3d:	83 c4 10             	add    esp,0x10
c0027d40:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d43:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d46:	52                   	push   edx
c0027d47:	50                   	push   eax
c0027d48:	50                   	push   eax
c0027d49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d4c:	e8 8e 10 00 00       	call   c0028ddf <__extendsfdf2>
c0027d51:	59                   	pop    ecx
c0027d52:	59                   	pop    ecx
c0027d53:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d56:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d59:	52                   	push   edx
c0027d5a:	50                   	push   eax
c0027d5b:	e8 f8 fe ff ff       	call   c0027c58 <__cmpsf2>
c0027d60:	83 c4 20             	add    esp,0x20
c0027d63:	c9                   	leave  
c0027d64:	c3                   	ret    

c0027d65 <__gesf2>:
c0027d65:	eb c3                	jmp    c0027d2a <__gtsf2>

c0027d67 <__ltsf2>:
c0027d67:	eb 84                	jmp    c0027ced <__eqsf2>

c0027d69 <__lesf2>:
c0027d69:	eb 82                	jmp    c0027ced <__eqsf2>

c0027d6b <__adddf3>:
c0027d6b:	55                   	push   ebp
c0027d6c:	89 e5                	mov    ebp,esp
c0027d6e:	57                   	push   edi
c0027d6f:	56                   	push   esi
c0027d70:	53                   	push   ebx
c0027d71:	83 ec 24             	sub    esp,0x24
c0027d74:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d77:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d7a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d7d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d80:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d83:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d86:	89 c8                	mov    eax,ecx
c0027d88:	89 ce                	mov    esi,ecx
c0027d8a:	c1 fe 14             	sar    esi,0x14
c0027d8d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027d90:	89 fb                	mov    ebx,edi
c0027d92:	89 fa                	mov    edx,edi
c0027d94:	c1 e2 0b             	shl    edx,0xb
c0027d97:	c1 e0 0b             	shl    eax,0xb
c0027d9a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d9f:	c1 eb 15             	shr    ebx,0x15
c0027da2:	09 d8                	or     eax,ebx
c0027da4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027da7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027daa:	c1 fe 14             	sar    esi,0x14
c0027dad:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027db0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027db3:	89 f3                	mov    ebx,esi
c0027db5:	c1 e3 0b             	shl    ebx,0xb
c0027db8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027dbb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dbe:	c1 e3 0b             	shl    ebx,0xb
c0027dc1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027dc7:	c1 ee 15             	shr    esi,0x15
c0027dca:	09 f3                	or     ebx,esi
c0027dcc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027dcf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027dd2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027dd5:	0f 88 5f 02 00 00    	js     c002803a <__adddf3+0x2cf>
c0027ddb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dde:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027de1:	85 db                	test   ebx,ebx
c0027de3:	0f 8e c7 00 00 00    	jle    c0027eb0 <__adddf3+0x145>
c0027de9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027df0:	75 1a                	jne    c0027e0c <__adddf3+0xa1>
c0027df2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027df5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027df8:	0f 84 b2 05 00 00    	je     c00283b0 <__adddf3+0x645>
c0027dfe:	4b                   	dec    ebx
c0027dff:	75 23                	jne    c0027e24 <__adddf3+0xb9>
c0027e01:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027e04:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027e07:	e9 99 00 00 00       	jmp    c0027ea5 <__adddf3+0x13a>
c0027e0c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e0f:	f7 d6                	not    esi
c0027e11:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e17:	0f 84 93 05 00 00    	je     c00283b0 <__adddf3+0x645>
c0027e1d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027e24:	83 fb 1f             	cmp    ebx,0x1f
c0027e27:	7e 42                	jle    c0027e6b <__adddf3+0x100>
c0027e29:	83 fb 3f             	cmp    ebx,0x3f
c0027e2c:	0f 8f 7e 05 00 00    	jg     c00283b0 <__adddf3+0x645>
c0027e32:	83 e3 1f             	and    ebx,0x1f
c0027e35:	89 d9                	mov    ecx,ebx
c0027e37:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e3a:	d3 ef                	shr    edi,cl
c0027e3c:	31 db                	xor    ebx,ebx
c0027e3e:	85 c9                	test   ecx,ecx
c0027e40:	74 15                	je     c0027e57 <__adddf3+0xec>
c0027e42:	be 20 00 00 00       	mov    esi,0x20
c0027e47:	29 ce                	sub    esi,ecx
c0027e49:	89 f1                	mov    ecx,esi
c0027e4b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e4e:	d3 e6                	shl    esi,cl
c0027e50:	31 db                	xor    ebx,ebx
c0027e52:	85 f6                	test   esi,esi
c0027e54:	0f 95 c3             	setne  bl
c0027e57:	31 c9                	xor    ecx,ecx
c0027e59:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e5d:	0f 95 c1             	setne  cl
c0027e60:	09 cf                	or     edi,ecx
c0027e62:	09 fb                	or     ebx,edi
c0027e64:	01 da                	add    edx,ebx
c0027e66:	83 d0 00             	adc    eax,0x0
c0027e69:	eb 3a                	jmp    c0027ea5 <__adddf3+0x13a>
c0027e6b:	bf 20 00 00 00       	mov    edi,0x20
c0027e70:	29 df                	sub    edi,ebx
c0027e72:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e75:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e78:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e7b:	d3 e6                	shl    esi,cl
c0027e7d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e80:	88 d9                	mov    cl,bl
c0027e82:	d3 ef                	shr    edi,cl
c0027e84:	09 fe                	or     esi,edi
c0027e86:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e89:	88 d9                	mov    cl,bl
c0027e8b:	d3 ef                	shr    edi,cl
c0027e8d:	89 fb                	mov    ebx,edi
c0027e8f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e92:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e95:	d3 e7                	shl    edi,cl
c0027e97:	85 ff                	test   edi,edi
c0027e99:	0f 95 c1             	setne  cl
c0027e9c:	0f b6 c9             	movzx  ecx,cl
c0027e9f:	09 ce                	or     esi,ecx
c0027ea1:	01 f2                	add    edx,esi
c0027ea3:	11 d8                	adc    eax,ebx
c0027ea5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027ea8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027eab:	e9 52 01 00 00       	jmp    c0028002 <__adddf3+0x297>
c0027eb0:	0f 84 d5 00 00 00    	je     c0027f8b <__adddf3+0x220>
c0027eb6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027eb9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027ebc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ebf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ec2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ec9:	75 20                	jne    c0027eeb <__adddf3+0x180>
c0027ecb:	89 d6                	mov    esi,edx
c0027ecd:	09 c6                	or     esi,eax
c0027ecf:	0f 84 db 04 00 00    	je     c00283b0 <__adddf3+0x645>
c0027ed5:	4b                   	dec    ebx
c0027ed6:	75 29                	jne    c0027f01 <__adddf3+0x196>
c0027ed8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027edb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ede:	01 d1                	add    ecx,edx
c0027ee0:	11 c6                	adc    esi,eax
c0027ee2:	89 f0                	mov    eax,esi
c0027ee4:	89 ca                	mov    edx,ecx
c0027ee6:	e9 17 01 00 00       	jmp    c0028002 <__adddf3+0x297>
c0027eeb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027eee:	f7 d6                	not    esi
c0027ef0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ef6:	0f 84 b4 04 00 00    	je     c00283b0 <__adddf3+0x645>
c0027efc:	0d 00 00 00 80       	or     eax,0x80000000
c0027f01:	83 fb 1f             	cmp    ebx,0x1f
c0027f04:	7e 48                	jle    c0027f4e <__adddf3+0x1e3>
c0027f06:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f09:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f0c:	83 fb 3f             	cmp    ebx,0x3f
c0027f0f:	0f 8f 9b 04 00 00    	jg     c00283b0 <__adddf3+0x645>
c0027f15:	83 e3 1f             	and    ebx,0x1f
c0027f18:	89 d9                	mov    ecx,ebx
c0027f1a:	89 c7                	mov    edi,eax
c0027f1c:	d3 ef                	shr    edi,cl
c0027f1e:	31 db                	xor    ebx,ebx
c0027f20:	85 c9                	test   ecx,ecx
c0027f22:	74 12                	je     c0027f36 <__adddf3+0x1cb>
c0027f24:	be 20 00 00 00       	mov    esi,0x20
c0027f29:	29 ce                	sub    esi,ecx
c0027f2b:	89 f1                	mov    ecx,esi
c0027f2d:	d3 e0                	shl    eax,cl
c0027f2f:	31 db                	xor    ebx,ebx
c0027f31:	85 c0                	test   eax,eax
c0027f33:	0f 95 c3             	setne  bl
c0027f36:	31 c0                	xor    eax,eax
c0027f38:	85 d2                	test   edx,edx
c0027f3a:	0f 95 c0             	setne  al
c0027f3d:	09 c7                	or     edi,eax
c0027f3f:	09 fb                	or     ebx,edi
c0027f41:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f44:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f47:	01 da                	add    edx,ebx
c0027f49:	83 d6 00             	adc    esi,0x0
c0027f4c:	eb 39                	jmp    c0027f87 <__adddf3+0x21c>
c0027f4e:	be 20 00 00 00       	mov    esi,0x20
c0027f53:	29 de                	sub    esi,ebx
c0027f55:	89 c7                	mov    edi,eax
c0027f57:	89 f1                	mov    ecx,esi
c0027f59:	d3 e7                	shl    edi,cl
c0027f5b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f5e:	89 d7                	mov    edi,edx
c0027f60:	88 d9                	mov    cl,bl
c0027f62:	d3 ef                	shr    edi,cl
c0027f64:	89 f9                	mov    ecx,edi
c0027f66:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f69:	09 cf                	or     edi,ecx
c0027f6b:	88 d9                	mov    cl,bl
c0027f6d:	d3 e8                	shr    eax,cl
c0027f6f:	89 f1                	mov    ecx,esi
c0027f71:	d3 e2                	shl    edx,cl
c0027f73:	85 d2                	test   edx,edx
c0027f75:	0f 95 c2             	setne  dl
c0027f78:	0f b6 d2             	movzx  edx,dl
c0027f7b:	09 d7                	or     edi,edx
c0027f7d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f80:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f83:	01 fa                	add    edx,edi
c0027f85:	11 c6                	adc    esi,eax
c0027f87:	89 f0                	mov    eax,esi
c0027f89:	eb 77                	jmp    c0028002 <__adddf3+0x297>
c0027f8b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f8e:	46                   	inc    esi
c0027f8f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027f92:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f98:	75 41                	jne    c0027fdb <__adddf3+0x270>
c0027f9a:	89 d3                	mov    ebx,edx
c0027f9c:	09 c3                	or     ebx,eax
c0027f9e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027fa5:	75 27                	jne    c0027fce <__adddf3+0x263>
c0027fa7:	85 db                	test   ebx,ebx
c0027fa9:	0f 84 fb 03 00 00    	je     c00283aa <__adddf3+0x63f>
c0027faf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fb2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027fb5:	0f 84 f5 03 00 00    	je     c00283b0 <__adddf3+0x645>
c0027fbb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fbe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fc1:	85 c0                	test   eax,eax
c0027fc3:	0f 89 91 03 00 00    	jns    c002835a <__adddf3+0x5ef>
c0027fc9:	e9 85 03 00 00       	jmp    c0028353 <__adddf3+0x5e8>
c0027fce:	85 db                	test   ebx,ebx
c0027fd0:	0f 85 da 03 00 00    	jne    c00283b0 <__adddf3+0x645>
c0027fd6:	e9 cf 03 00 00       	jmp    c00283aa <__adddf3+0x63f>
c0027fdb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fde:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fe1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fe4:	f7 d1                	not    ecx
c0027fe6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fec:	0f 84 70 03 00 00    	je     c0028362 <__adddf3+0x5f7>
c0027ff2:	d1 ea                	shr    edx,1
c0027ff4:	89 c1                	mov    ecx,eax
c0027ff6:	c1 e1 1f             	shl    ecx,0x1f
c0027ff9:	09 ca                	or     edx,ecx
c0027ffb:	d1 e8                	shr    eax,1
c0027ffd:	e9 6f 03 00 00       	jmp    c0028371 <__adddf3+0x606>
c0028002:	85 c0                	test   eax,eax
c0028004:	0f 89 67 03 00 00    	jns    c0028371 <__adddf3+0x606>
c002800a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002800d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028010:	f7 d1                	not    ecx
c0028012:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028018:	0f 84 44 03 00 00    	je     c0028362 <__adddf3+0x5f7>
c002801e:	89 d1                	mov    ecx,edx
c0028020:	d1 e9                	shr    ecx,1
c0028022:	83 e2 01             	and    edx,0x1
c0028025:	09 ca                	or     edx,ecx
c0028027:	89 c1                	mov    ecx,eax
c0028029:	c1 e1 1f             	shl    ecx,0x1f
c002802c:	09 ca                	or     edx,ecx
c002802e:	d1 e8                	shr    eax,1
c0028030:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028035:	e9 37 03 00 00       	jmp    c0028371 <__adddf3+0x606>
c002803a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002803d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028043:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028046:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028049:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002804f:	29 de                	sub    esi,ebx
c0028051:	85 f6                	test   esi,esi
c0028053:	0f 8e bd 00 00 00    	jle    c0028116 <__adddf3+0x3ab>
c0028059:	85 db                	test   ebx,ebx
c002805b:	75 17                	jne    c0028074 <__adddf3+0x309>
c002805d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028060:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028063:	0f 84 47 03 00 00    	je     c00283b0 <__adddf3+0x645>
c0028069:	4e                   	dec    esi
c002806a:	75 20                	jne    c002808c <__adddf3+0x321>
c002806c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002806f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028072:	eb 5b                	jmp    c00280cf <__adddf3+0x364>
c0028074:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028077:	f7 d3                	not    ebx
c0028079:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002807f:	0f 84 2b 03 00 00    	je     c00283b0 <__adddf3+0x645>
c0028085:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002808c:	83 fe 1f             	cmp    esi,0x1f
c002808f:	7e 49                	jle    c00280da <__adddf3+0x36f>
c0028091:	83 fe 3f             	cmp    esi,0x3f
c0028094:	0f 8f 16 03 00 00    	jg     c00283b0 <__adddf3+0x645>
c002809a:	83 e6 1f             	and    esi,0x1f
c002809d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280a0:	89 f1                	mov    ecx,esi
c00280a2:	d3 ef                	shr    edi,cl
c00280a4:	31 db                	xor    ebx,ebx
c00280a6:	85 f6                	test   esi,esi
c00280a8:	74 13                	je     c00280bd <__adddf3+0x352>
c00280aa:	b9 20 00 00 00       	mov    ecx,0x20
c00280af:	29 f1                	sub    ecx,esi
c00280b1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280b4:	d3 e6                	shl    esi,cl
c00280b6:	31 db                	xor    ebx,ebx
c00280b8:	85 f6                	test   esi,esi
c00280ba:	0f 95 c3             	setne  bl
c00280bd:	31 c9                	xor    ecx,ecx
c00280bf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280c3:	0f 95 c1             	setne  cl
c00280c6:	09 cf                	or     edi,ecx
c00280c8:	09 fb                	or     ebx,edi
c00280ca:	29 da                	sub    edx,ebx
c00280cc:	83 d8 00             	sbb    eax,0x0
c00280cf:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280d2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280d5:	e9 aa 01 00 00       	jmp    c0028284 <__adddf3+0x519>
c00280da:	bf 20 00 00 00       	mov    edi,0x20
c00280df:	29 f7                	sub    edi,esi
c00280e1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280e4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280e7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280ea:	d3 e3                	shl    ebx,cl
c00280ec:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280ef:	89 f1                	mov    ecx,esi
c00280f1:	d3 ef                	shr    edi,cl
c00280f3:	09 fb                	or     ebx,edi
c00280f5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280f8:	89 f1                	mov    ecx,esi
c00280fa:	d3 ef                	shr    edi,cl
c00280fc:	89 fe                	mov    esi,edi
c00280fe:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028101:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028104:	d3 e7                	shl    edi,cl
c0028106:	85 ff                	test   edi,edi
c0028108:	0f 95 c1             	setne  cl
c002810b:	0f b6 c9             	movzx  ecx,cl
c002810e:	09 cb                	or     ebx,ecx
c0028110:	29 da                	sub    edx,ebx
c0028112:	19 f0                	sbb    eax,esi
c0028114:	eb b9                	jmp    c00280cf <__adddf3+0x364>
c0028116:	0f 84 cd 00 00 00    	je     c00281e9 <__adddf3+0x47e>
c002811c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002811f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028122:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028125:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028129:	75 1b                	jne    c0028146 <__adddf3+0x3db>
c002812b:	89 d6                	mov    esi,edx
c002812d:	09 c6                	or     esi,eax
c002812f:	0f 84 7b 02 00 00    	je     c00283b0 <__adddf3+0x645>
c0028135:	4b                   	dec    ebx
c0028136:	75 24                	jne    c002815c <__adddf3+0x3f1>
c0028138:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002813b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002813e:	29 d1                	sub    ecx,edx
c0028140:	19 c6                	sbb    esi,eax
c0028142:	89 ca                	mov    edx,ecx
c0028144:	eb 61                	jmp    c00281a7 <__adddf3+0x43c>
c0028146:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028149:	f7 d6                	not    esi
c002814b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028151:	0f 84 59 02 00 00    	je     c00283b0 <__adddf3+0x645>
c0028157:	0d 00 00 00 80       	or     eax,0x80000000
c002815c:	83 fb 1f             	cmp    ebx,0x1f
c002815f:	7e 4d                	jle    c00281ae <__adddf3+0x443>
c0028161:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028164:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028167:	83 fb 3f             	cmp    ebx,0x3f
c002816a:	0f 8f 40 02 00 00    	jg     c00283b0 <__adddf3+0x645>
c0028170:	83 e3 1f             	and    ebx,0x1f
c0028173:	89 d9                	mov    ecx,ebx
c0028175:	89 c7                	mov    edi,eax
c0028177:	d3 ef                	shr    edi,cl
c0028179:	31 db                	xor    ebx,ebx
c002817b:	85 c9                	test   ecx,ecx
c002817d:	74 12                	je     c0028191 <__adddf3+0x426>
c002817f:	be 20 00 00 00       	mov    esi,0x20
c0028184:	29 ce                	sub    esi,ecx
c0028186:	89 f1                	mov    ecx,esi
c0028188:	d3 e0                	shl    eax,cl
c002818a:	31 db                	xor    ebx,ebx
c002818c:	85 c0                	test   eax,eax
c002818e:	0f 95 c3             	setne  bl
c0028191:	31 c0                	xor    eax,eax
c0028193:	85 d2                	test   edx,edx
c0028195:	0f 95 c0             	setne  al
c0028198:	09 c7                	or     edi,eax
c002819a:	09 fb                	or     ebx,edi
c002819c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002819f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281a2:	29 da                	sub    edx,ebx
c00281a4:	83 de 00             	sbb    esi,0x0
c00281a7:	89 f0                	mov    eax,esi
c00281a9:	e9 d6 00 00 00       	jmp    c0028284 <__adddf3+0x519>
c00281ae:	be 20 00 00 00       	mov    esi,0x20
c00281b3:	29 de                	sub    esi,ebx
c00281b5:	89 c7                	mov    edi,eax
c00281b7:	89 f1                	mov    ecx,esi
c00281b9:	d3 e7                	shl    edi,cl
c00281bb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281be:	89 d7                	mov    edi,edx
c00281c0:	88 d9                	mov    cl,bl
c00281c2:	d3 ef                	shr    edi,cl
c00281c4:	89 f9                	mov    ecx,edi
c00281c6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281c9:	09 cf                	or     edi,ecx
c00281cb:	88 d9                	mov    cl,bl
c00281cd:	d3 e8                	shr    eax,cl
c00281cf:	89 f1                	mov    ecx,esi
c00281d1:	d3 e2                	shl    edx,cl
c00281d3:	85 d2                	test   edx,edx
c00281d5:	0f 95 c2             	setne  dl
c00281d8:	0f b6 d2             	movzx  edx,dl
c00281db:	09 d7                	or     edi,edx
c00281dd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281e3:	29 fa                	sub    edx,edi
c00281e5:	19 c6                	sbb    esi,eax
c00281e7:	eb be                	jmp    c00281a7 <__adddf3+0x43c>
c00281e9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281ec:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281ef:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00281f5:	75 6a                	jne    c0028261 <__adddf3+0x4f6>
c00281f7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00281fb:	75 58                	jne    c0028255 <__adddf3+0x4ea>
c00281fd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028200:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028203:	89 d6                	mov    esi,edx
c0028205:	09 c6                	or     esi,eax
c0028207:	75 17                	jne    c0028220 <__adddf3+0x4b5>
c0028209:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002820c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002820f:	85 db                	test   ebx,ebx
c0028211:	0f 85 99 01 00 00    	jne    c00283b0 <__adddf3+0x645>
c0028217:	31 ff                	xor    edi,edi
c0028219:	31 c9                	xor    ecx,ecx
c002821b:	e9 90 01 00 00       	jmp    c00283b0 <__adddf3+0x645>
c0028220:	85 db                	test   ebx,ebx
c0028222:	0f 84 88 01 00 00    	je     c00283b0 <__adddf3+0x645>
c0028228:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002822b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002822e:	85 c0                	test   eax,eax
c0028230:	79 10                	jns    c0028242 <__adddf3+0x4d7>
c0028232:	31 c9                	xor    ecx,ecx
c0028234:	f7 da                	neg    edx
c0028236:	0f 95 c1             	setne  cl
c0028239:	01 c8                	add    eax,ecx
c002823b:	f7 d8                	neg    eax
c002823d:	e9 2f 01 00 00       	jmp    c0028371 <__adddf3+0x606>
c0028242:	31 ff                	xor    edi,edi
c0028244:	31 c9                	xor    ecx,ecx
c0028246:	89 c3                	mov    ebx,eax
c0028248:	09 d3                	or     ebx,edx
c002824a:	0f 84 60 01 00 00    	je     c00283b0 <__adddf3+0x645>
c0028250:	e9 05 01 00 00       	jmp    c002835a <__adddf3+0x5ef>
c0028255:	31 ff                	xor    edi,edi
c0028257:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002825c:	e9 4f 01 00 00       	jmp    c00283b0 <__adddf3+0x645>
c0028261:	89 c1                	mov    ecx,eax
c0028263:	89 d0                	mov    eax,edx
c0028265:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028268:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002826b:	89 ca                	mov    edx,ecx
c002826d:	85 c9                	test   ecx,ecx
c002826f:	79 2c                	jns    c002829d <__adddf3+0x532>
c0028271:	31 c9                	xor    ecx,ecx
c0028273:	f7 d8                	neg    eax
c0028275:	0f 95 c1             	setne  cl
c0028278:	01 ca                	add    edx,ecx
c002827a:	f7 da                	neg    edx
c002827c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002827f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028282:	eb 19                	jmp    c002829d <__adddf3+0x532>
c0028284:	85 c0                	test   eax,eax
c0028286:	0f 89 e5 00 00 00    	jns    c0028371 <__adddf3+0x606>
c002828c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028291:	89 c1                	mov    ecx,eax
c0028293:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028296:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028299:	89 d0                	mov    eax,edx
c002829b:	89 ca                	mov    edx,ecx
c002829d:	85 d2                	test   edx,edx
c002829f:	74 59                	je     c00282fa <__adddf3+0x58f>
c00282a1:	0f bd da             	bsr    ebx,edx
c00282a4:	83 f3 1f             	xor    ebx,0x1f
c00282a7:	88 d9                	mov    cl,bl
c00282a9:	d3 e2                	shl    edx,cl
c00282ab:	bf 20 00 00 00       	mov    edi,0x20
c00282b0:	89 f9                	mov    ecx,edi
c00282b2:	29 d9                	sub    ecx,ebx
c00282b4:	89 c6                	mov    esi,eax
c00282b6:	d3 ee                	shr    esi,cl
c00282b8:	09 d6                	or     esi,edx
c00282ba:	88 d9                	mov    cl,bl
c00282bc:	d3 e0                	shl    eax,cl
c00282be:	89 c2                	mov    edx,eax
c00282c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282c3:	25 ff 07 00 00       	and    eax,0x7ff
c00282c8:	39 d8                	cmp    eax,ebx
c00282ca:	7f 22                	jg     c00282ee <__adddf3+0x583>
c00282cc:	29 c3                	sub    ebx,eax
c00282ce:	43                   	inc    ebx
c00282cf:	88 d9                	mov    cl,bl
c00282d1:	d3 ea                	shr    edx,cl
c00282d3:	29 df                	sub    edi,ebx
c00282d5:	89 f9                	mov    ecx,edi
c00282d7:	89 f0                	mov    eax,esi
c00282d9:	d3 e0                	shl    eax,cl
c00282db:	09 c2                	or     edx,eax
c00282dd:	89 f0                	mov    eax,esi
c00282df:	88 d9                	mov    cl,bl
c00282e1:	d3 e8                	shr    eax,cl
c00282e3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282e6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00282ec:	eb 6f                	jmp    c002835d <__adddf3+0x5f2>
c00282ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282f1:	29 d8                	sub    eax,ebx
c00282f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00282f6:	89 f0                	mov    eax,esi
c00282f8:	eb 59                	jmp    c0028353 <__adddf3+0x5e8>
c00282fa:	85 c0                	test   eax,eax
c00282fc:	74 6a                	je     c0028368 <__adddf3+0x5fd>
c00282fe:	0f bd c8             	bsr    ecx,eax
c0028301:	83 f1 1f             	xor    ecx,0x1f
c0028304:	d3 e0                	shl    eax,cl
c0028306:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028309:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002830f:	83 c1 20             	add    ecx,0x20
c0028312:	39 cb                	cmp    ebx,ecx
c0028314:	7f 35                	jg     c002834b <__adddf3+0x5e0>
c0028316:	29 d9                	sub    ecx,ebx
c0028318:	8d 71 01             	lea    esi,[ecx+0x1]
c002831b:	83 fe 1f             	cmp    esi,0x1f
c002831e:	7e 09                	jle    c0028329 <__adddf3+0x5be>
c0028320:	83 e9 1f             	sub    ecx,0x1f
c0028323:	d3 e8                	shr    eax,cl
c0028325:	89 c3                	mov    ebx,eax
c0028327:	eb 11                	jmp    c002833a <__adddf3+0x5cf>
c0028329:	b9 20 00 00 00       	mov    ecx,0x20
c002832e:	29 f1                	sub    ecx,esi
c0028330:	89 c3                	mov    ebx,eax
c0028332:	d3 e3                	shl    ebx,cl
c0028334:	89 f1                	mov    ecx,esi
c0028336:	d3 e8                	shr    eax,cl
c0028338:	89 c2                	mov    edx,eax
c002833a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002833d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028342:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028345:	89 d0                	mov    eax,edx
c0028347:	89 da                	mov    edx,ebx
c0028349:	eb 26                	jmp    c0028371 <__adddf3+0x606>
c002834b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002834e:	29 cf                	sub    edi,ecx
c0028350:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028353:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028358:	eb 17                	jmp    c0028371 <__adddf3+0x606>
c002835a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002835d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028360:	eb 0f                	jmp    c0028371 <__adddf3+0x606>
c0028362:	31 d2                	xor    edx,edx
c0028364:	31 c0                	xor    eax,eax
c0028366:	eb 09                	jmp    c0028371 <__adddf3+0x606>
c0028368:	89 c2                	mov    edx,eax
c002836a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028371:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028374:	c1 e1 14             	shl    ecx,0x14
c0028377:	89 c3                	mov    ebx,eax
c0028379:	c1 eb 0b             	shr    ebx,0xb
c002837c:	09 d9                	or     ecx,ebx
c002837e:	89 d3                	mov    ebx,edx
c0028380:	c1 eb 0b             	shr    ebx,0xb
c0028383:	c1 e0 15             	shl    eax,0x15
c0028386:	09 d8                	or     eax,ebx
c0028388:	89 c7                	mov    edi,eax
c002838a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028390:	0f 95 c0             	setne  al
c0028393:	89 c6                	mov    esi,eax
c0028395:	09 f3                	or     ebx,esi
c0028397:	83 e3 01             	and    ebx,0x1
c002839a:	c1 ea 0a             	shr    edx,0xa
c002839d:	21 da                	and    edx,ebx
c002839f:	89 f8                	mov    eax,edi
c00283a1:	01 d0                	add    eax,edx
c00283a3:	83 d1 00             	adc    ecx,0x0
c00283a6:	89 c7                	mov    edi,eax
c00283a8:	eb 06                	jmp    c00283b0 <__adddf3+0x645>
c00283aa:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283ad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283b0:	89 f8                	mov    eax,edi
c00283b2:	89 ca                	mov    edx,ecx
c00283b4:	83 c4 24             	add    esp,0x24
c00283b7:	5b                   	pop    ebx
c00283b8:	5e                   	pop    esi
c00283b9:	5f                   	pop    edi
c00283ba:	5d                   	pop    ebp
c00283bb:	c3                   	ret    

c00283bc <__subdf3>:
c00283bc:	55                   	push   ebp
c00283bd:	89 e5                	mov    ebp,esp
c00283bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283c2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283c5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283cb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00283ce:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00283d1:	5d                   	pop    ebp
c00283d2:	e9 94 f9 ff ff       	jmp    c0027d6b <__adddf3>

c00283d7 <__negdf2>:
c00283d7:	55                   	push   ebp
c00283d8:	89 e5                	mov    ebp,esp
c00283da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283dd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283e0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283e6:	5d                   	pop    ebp
c00283e7:	c3                   	ret    

c00283e8 <__muldf3>:
c00283e8:	55                   	push   ebp
c00283e9:	89 e5                	mov    ebp,esp
c00283eb:	57                   	push   edi
c00283ec:	56                   	push   esi
c00283ed:	53                   	push   ebx
c00283ee:	83 ec 24             	sub    esp,0x24
c00283f1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00283f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00283f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283fd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028400:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028403:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028406:	89 c8                	mov    eax,ecx
c0028408:	c1 f8 14             	sar    eax,0x14
c002840b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002840e:	89 f8                	mov    eax,edi
c0028410:	89 fb                	mov    ebx,edi
c0028412:	c1 e3 0b             	shl    ebx,0xb
c0028415:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028418:	c1 e1 0b             	shl    ecx,0xb
c002841b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028421:	c1 e8 15             	shr    eax,0x15
c0028424:	09 c1                	or     ecx,eax
c0028426:	89 d6                	mov    esi,edx
c0028428:	89 d0                	mov    eax,edx
c002842a:	c1 f8 14             	sar    eax,0x14
c002842d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028430:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028433:	89 c3                	mov    ebx,eax
c0028435:	c1 e3 0b             	shl    ebx,0xb
c0028438:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002843b:	c1 e6 0b             	shl    esi,0xb
c002843e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028444:	c1 e8 15             	shr    eax,0x15
c0028447:	09 c6                	or     esi,eax
c0028449:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002844c:	25 ff 07 00 00       	and    eax,0x7ff
c0028451:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028454:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028457:	25 ff 07 00 00       	and    eax,0x7ff
c002845c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002845f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028462:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028465:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002846c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002846f:	40                   	inc    eax
c0028470:	a9 fe 07 00 00       	test   eax,0x7fe
c0028475:	0f 85 8d 00 00 00    	jne    c0028508 <__muldf3+0x120>
c002847b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002847e:	09 c8                	or     eax,ecx
c0028480:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028484:	74 44                	je     c00284ca <__muldf3+0xe2>
c0028486:	85 c0                	test   eax,eax
c0028488:	0f 85 31 02 00 00    	jne    c00286bf <__muldf3+0x2d7>
c002848e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028491:	40                   	inc    eax
c0028492:	a9 fe 07 00 00       	test   eax,0x7fe
c0028497:	75 13                	jne    c00284ac <__muldf3+0xc4>
c0028499:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002849c:	09 f1                	or     ecx,esi
c002849e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284a2:	74 22                	je     c00284c6 <__muldf3+0xde>
c00284a4:	85 c9                	test   ecx,ecx
c00284a6:	0f 85 0d 02 00 00    	jne    c00286b9 <__muldf3+0x2d1>
c00284ac:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00284b0:	0f 89 09 02 00 00    	jns    c00286bf <__muldf3+0x2d7>
c00284b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284b9:	05 00 00 00 80       	add    eax,0x80000000
c00284be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284c1:	e9 f9 01 00 00       	jmp    c00286bf <__muldf3+0x2d7>
c00284c6:	85 c9                	test   ecx,ecx
c00284c8:	eb 2e                	jmp    c00284f8 <__muldf3+0x110>
c00284ca:	85 c0                	test   eax,eax
c00284cc:	74 20                	je     c00284ee <__muldf3+0x106>
c00284ce:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00284d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284d4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284d7:	c1 ef 1f             	shr    edi,0x1f
c00284da:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00284dd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00284e0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00284e3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284e6:	09 f9                	or     ecx,edi
c00284e8:	78 1e                	js     c0028508 <__muldf3+0x120>
c00284ea:	89 c3                	mov    ebx,eax
c00284ec:	eb e0                	jmp    c00284ce <__muldf3+0xe6>
c00284ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284f1:	f7 d0                	not    eax
c00284f3:	a9 ff 07 00 00       	test   eax,0x7ff
c00284f8:	75 b2                	jne    c00284ac <__muldf3+0xc4>
c00284fa:	31 ff                	xor    edi,edi
c00284fc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028503:	e9 b7 01 00 00       	jmp    c00286bf <__muldf3+0x2d7>
c0028508:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002850b:	40                   	inc    eax
c002850c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028511:	75 57                	jne    c002856a <__muldf3+0x182>
c0028513:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028516:	09 f0                	or     eax,esi
c0028518:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002851c:	74 23                	je     c0028541 <__muldf3+0x159>
c002851e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028522:	0f 89 91 01 00 00    	jns    c00286b9 <__muldf3+0x2d1>
c0028528:	85 c0                	test   eax,eax
c002852a:	0f 85 89 01 00 00    	jne    c00286b9 <__muldf3+0x2d1>
c0028530:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028533:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028539:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002853c:	e9 7e 01 00 00       	jmp    c00286bf <__muldf3+0x2d7>
c0028541:	85 c0                	test   eax,eax
c0028543:	75 0c                	jne    c0028551 <__muldf3+0x169>
c0028545:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028549:	0f 89 6a 01 00 00    	jns    c00286b9 <__muldf3+0x2d1>
c002854f:	eb df                	jmp    c0028530 <__muldf3+0x148>
c0028551:	01 f6                	add    esi,esi
c0028553:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028556:	c1 ea 1f             	shr    edx,0x1f
c0028559:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002855c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002855f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028562:	09 d6                	or     esi,edx
c0028564:	78 04                	js     c002856a <__muldf3+0x182>
c0028566:	89 c3                	mov    ebx,eax
c0028568:	eb e7                	jmp    c0028551 <__muldf3+0x169>
c002856a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028570:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028576:	89 c8                	mov    eax,ecx
c0028578:	f7 e6                	mul    esi
c002857a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002857d:	89 c7                	mov    edi,eax
c002857f:	89 c8                	mov    eax,ecx
c0028581:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028584:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028587:	89 c1                	mov    ecx,eax
c0028589:	89 f0                	mov    eax,esi
c002858b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002858e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028591:	89 c6                	mov    esi,eax
c0028593:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028596:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028599:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002859c:	31 c0                	xor    eax,eax
c002859e:	01 f1                	add    ecx,esi
c00285a0:	0f 92 c0             	setb   al
c00285a3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00285a6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00285a9:	83 d6 00             	adc    esi,0x0
c00285ac:	01 c7                	add    edi,eax
c00285ae:	83 d6 00             	adc    esi,0x0
c00285b1:	01 ca                	add    edx,ecx
c00285b3:	0f 92 c1             	setb   cl
c00285b6:	0f b6 c9             	movzx  ecx,cl
c00285b9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00285bc:	83 d6 00             	adc    esi,0x0
c00285bf:	01 cf                	add    edi,ecx
c00285c1:	83 d6 00             	adc    esi,0x0
c00285c4:	31 c9                	xor    ecx,ecx
c00285c6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00285c9:	0f 95 c1             	setne  cl
c00285cc:	09 cf                	or     edi,ecx
c00285ce:	85 f6                	test   esi,esi
c00285d0:	78 0c                	js     c00285de <__muldf3+0x1f6>
c00285d2:	01 f6                	add    esi,esi
c00285d4:	89 f8                	mov    eax,edi
c00285d6:	c1 e8 1f             	shr    eax,0x1f
c00285d9:	09 c6                	or     esi,eax
c00285db:	01 ff                	add    edi,edi
c00285dd:	4b                   	dec    ebx
c00285de:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00285e4:	0f 8f 85 00 00 00    	jg     c002866f <__muldf3+0x287>
c00285ea:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00285f0:	85 db                	test   ebx,ebx
c00285f2:	0f 8f 84 00 00 00    	jg     c002867c <__muldf3+0x294>
c00285f8:	83 fb cc             	cmp    ebx,0xffffffcc
c00285fb:	7c 79                	jl     c0028676 <__muldf3+0x28e>
c00285fd:	ba 01 00 00 00       	mov    edx,0x1
c0028602:	29 da                	sub    edx,ebx
c0028604:	81 ce 00 00 00 80    	or     esi,0x80000000
c002860a:	83 fa 1f             	cmp    edx,0x1f
c002860d:	7e 30                	jle    c002863f <__muldf3+0x257>
c002860f:	83 fa 20             	cmp    edx,0x20
c0028612:	75 0b                	jne    c002861f <__muldf3+0x237>
c0028614:	31 c0                	xor    eax,eax
c0028616:	85 ff                	test   edi,edi
c0028618:	0f 95 c0             	setne  al
c002861b:	89 c7                	mov    edi,eax
c002861d:	eb 1a                	jmp    c0028639 <__muldf3+0x251>
c002861f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028622:	89 f0                	mov    eax,esi
c0028624:	d3 e0                	shl    eax,cl
c0028626:	09 f8                	or     eax,edi
c0028628:	0f 95 c0             	setne  al
c002862b:	0f b6 c0             	movzx  eax,al
c002862e:	89 c7                	mov    edi,eax
c0028630:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028635:	29 d9                	sub    ecx,ebx
c0028637:	d3 ee                	shr    esi,cl
c0028639:	09 f7                	or     edi,esi
c002863b:	31 db                	xor    ebx,ebx
c002863d:	eb 3b                	jmp    c002867a <__muldf3+0x292>
c002863f:	83 c3 1f             	add    ebx,0x1f
c0028642:	89 f0                	mov    eax,esi
c0028644:	88 d9                	mov    cl,bl
c0028646:	d3 e0                	shl    eax,cl
c0028648:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002864b:	89 f8                	mov    eax,edi
c002864d:	88 d1                	mov    cl,dl
c002864f:	d3 e8                	shr    eax,cl
c0028651:	89 c1                	mov    ecx,eax
c0028653:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028656:	09 c8                	or     eax,ecx
c0028658:	88 d9                	mov    cl,bl
c002865a:	d3 e7                	shl    edi,cl
c002865c:	31 db                	xor    ebx,ebx
c002865e:	85 ff                	test   edi,edi
c0028660:	0f 95 c3             	setne  bl
c0028663:	89 df                	mov    edi,ebx
c0028665:	09 c7                	or     edi,eax
c0028667:	88 d1                	mov    cl,dl
c0028669:	d3 ee                	shr    esi,cl
c002866b:	31 db                	xor    ebx,ebx
c002866d:	eb 0d                	jmp    c002867c <__muldf3+0x294>
c002866f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028674:	eb 02                	jmp    c0028678 <__muldf3+0x290>
c0028676:	31 db                	xor    ebx,ebx
c0028678:	31 ff                	xor    edi,edi
c002867a:	31 f6                	xor    esi,esi
c002867c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002867f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028682:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028687:	09 c3                	or     ebx,eax
c0028689:	c1 e3 14             	shl    ebx,0x14
c002868c:	89 f0                	mov    eax,esi
c002868e:	c1 e8 0b             	shr    eax,0xb
c0028691:	09 c3                	or     ebx,eax
c0028693:	89 f8                	mov    eax,edi
c0028695:	c1 e8 0b             	shr    eax,0xb
c0028698:	c1 e6 15             	shl    esi,0x15
c002869b:	09 c6                	or     esi,eax
c002869d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00286a3:	0f 95 c1             	setne  cl
c00286a6:	09 c8                	or     eax,ecx
c00286a8:	83 e0 01             	and    eax,0x1
c00286ab:	c1 ef 0a             	shr    edi,0xa
c00286ae:	21 c7                	and    edi,eax
c00286b0:	01 f7                	add    edi,esi
c00286b2:	83 d3 00             	adc    ebx,0x0
c00286b5:	89 da                	mov    edx,ebx
c00286b7:	eb 03                	jmp    c00286bc <__muldf3+0x2d4>
c00286b9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00286bc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00286bf:	89 f8                	mov    eax,edi
c00286c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286c4:	83 c4 24             	add    esp,0x24
c00286c7:	5b                   	pop    ebx
c00286c8:	5e                   	pop    esi
c00286c9:	5f                   	pop    edi
c00286ca:	5d                   	pop    ebp
c00286cb:	c3                   	ret    

c00286cc <__divdf3>:
c00286cc:	55                   	push   ebp
c00286cd:	89 e5                	mov    ebp,esp
c00286cf:	57                   	push   edi
c00286d0:	56                   	push   esi
c00286d1:	53                   	push   ebx
c00286d2:	83 ec 2c             	sub    esp,0x2c
c00286d5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00286d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00286db:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00286de:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286e1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00286e4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286e7:	89 ce                	mov    esi,ecx
c00286e9:	89 c8                	mov    eax,ecx
c00286eb:	c1 f8 14             	sar    eax,0x14
c00286ee:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00286f1:	89 f8                	mov    eax,edi
c00286f3:	89 fb                	mov    ebx,edi
c00286f5:	c1 e3 0b             	shl    ebx,0xb
c00286f8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00286fb:	c1 e6 0b             	shl    esi,0xb
c00286fe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028704:	c1 e8 15             	shr    eax,0x15
c0028707:	09 c6                	or     esi,eax
c0028709:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002870c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002870f:	89 c2                	mov    edx,eax
c0028711:	c1 fa 14             	sar    edx,0x14
c0028714:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028717:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002871a:	89 de                	mov    esi,ebx
c002871c:	c1 e6 0b             	shl    esi,0xb
c002871f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028722:	c1 e0 0b             	shl    eax,0xb
c0028725:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002872a:	c1 eb 15             	shr    ebx,0x15
c002872d:	09 d8                	or     eax,ebx
c002872f:	89 c2                	mov    edx,eax
c0028731:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028734:	25 ff 07 00 00       	and    eax,0x7ff
c0028739:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002873c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002873f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028745:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028748:	29 d8                	sub    eax,ebx
c002874a:	05 ff 03 00 00       	add    eax,0x3ff
c002874f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028752:	46                   	inc    esi
c0028753:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028759:	0f 85 a5 00 00 00    	jne    c0028804 <__divdf3+0x138>
c002875f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028762:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028765:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028769:	74 2a                	je     c0028795 <__divdf3+0xc9>
c002876b:	85 f6                	test   esi,esi
c002876d:	0f 85 cc 02 00 00    	jne    c0028a3f <__divdf3+0x373>
c0028773:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028776:	40                   	inc    eax
c0028777:	a9 fe 07 00 00       	test   eax,0x7fe
c002877c:	75 26                	jne    c00287a4 <__divdf3+0xd8>
c002877e:	85 db                	test   ebx,ebx
c0028780:	74 22                	je     c00287a4 <__divdf3+0xd8>
c0028782:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028785:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028788:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002878b:	09 d0                	or     eax,edx
c002878d:	0f 85 ac 02 00 00    	jne    c0028a3f <__divdf3+0x373>
c0028793:	eb 63                	jmp    c00287f8 <__divdf3+0x12c>
c0028795:	85 f6                	test   esi,esi
c0028797:	75 22                	jne    c00287bb <__divdf3+0xef>
c0028799:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002879c:	40                   	inc    eax
c002879d:	a9 fe 07 00 00       	test   eax,0x7fe
c00287a2:	74 36                	je     c00287da <__divdf3+0x10e>
c00287a4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00287a8:	0f 89 91 02 00 00    	jns    c0028a3f <__divdf3+0x373>
c00287ae:	89 f8                	mov    eax,edi
c00287b0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287b6:	e9 80 02 00 00       	jmp    c0028a3b <__divdf3+0x36f>
c00287bb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00287be:	01 f6                	add    esi,esi
c00287c0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00287c3:	c1 ef 1f             	shr    edi,0x1f
c00287c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00287c9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00287cc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00287cf:	09 f7                	or     edi,esi
c00287d1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00287d4:	78 2e                	js     c0028804 <__divdf3+0x138>
c00287d6:	89 c8                	mov    eax,ecx
c00287d8:	eb e1                	jmp    c00287bb <__divdf3+0xef>
c00287da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287dd:	09 d0                	or     eax,edx
c00287df:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287e3:	74 0f                	je     c00287f4 <__divdf3+0x128>
c00287e5:	85 c0                	test   eax,eax
c00287e7:	74 bb                	je     c00287a4 <__divdf3+0xd8>
c00287e9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287ec:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287ef:	e9 4b 02 00 00       	jmp    c0028a3f <__divdf3+0x373>
c00287f4:	85 c0                	test   eax,eax
c00287f6:	75 ac                	jne    c00287a4 <__divdf3+0xd8>
c00287f8:	31 ff                	xor    edi,edi
c00287fa:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00287ff:	e9 3b 02 00 00       	jmp    c0028a3f <__divdf3+0x373>
c0028804:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028807:	8d 4f 01             	lea    ecx,[edi+0x1]
c002880a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028810:	75 6b                	jne    c002887d <__divdf3+0x1b1>
c0028812:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028815:	09 d6                	or     esi,edx
c0028817:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002881b:	74 28                	je     c0028845 <__divdf3+0x179>
c002881d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028820:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028823:	85 f6                	test   esi,esi
c0028825:	0f 85 14 02 00 00    	jne    c0028a3f <__divdf3+0x373>
c002882b:	31 ff                	xor    edi,edi
c002882d:	31 c9                	xor    ecx,ecx
c002882f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028832:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028835:	0f 89 04 02 00 00    	jns    c0028a3f <__divdf3+0x373>
c002883b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028840:	e9 fa 01 00 00       	jmp    c0028a3f <__divdf3+0x373>
c0028845:	85 f6                	test   esi,esi
c0028847:	75 1b                	jne    c0028864 <__divdf3+0x198>
c0028849:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002884c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002884f:	25 00 00 00 80       	and    eax,0x80000000
c0028854:	31 c9                	xor    ecx,ecx
c0028856:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002885b:	89 cf                	mov    edi,ecx
c002885d:	89 c1                	mov    ecx,eax
c002885f:	e9 db 01 00 00       	jmp    c0028a3f <__divdf3+0x373>
c0028864:	01 d2                	add    edx,edx
c0028866:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028869:	c1 eb 1f             	shr    ebx,0x1f
c002886c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002886f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028872:	8d 48 01             	lea    ecx,[eax+0x1]
c0028875:	09 da                	or     edx,ebx
c0028877:	78 04                	js     c002887d <__divdf3+0x1b1>
c0028879:	89 c8                	mov    eax,ecx
c002887b:	eb e7                	jmp    c0028864 <__divdf3+0x198>
c002887d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028880:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028886:	81 ca 00 00 00 80    	or     edx,0x80000000
c002888c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002888f:	39 d6                	cmp    esi,edx
c0028891:	77 0d                	ja     c00288a0 <__divdf3+0x1d4>
c0028893:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028896:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028899:	72 1b                	jb     c00288b6 <__divdf3+0x1ea>
c002889b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002889e:	75 16                	jne    c00288b6 <__divdf3+0x1ea>
c00288a0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288a3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00288a6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00288a9:	83 de 00             	sbb    esi,0x0
c00288ac:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00288af:	ba 01 00 00 00       	mov    edx,0x1
c00288b4:	eb 02                	jmp    c00288b8 <__divdf3+0x1ec>
c00288b6:	31 d2                	xor    edx,edx
c00288b8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00288bf:	31 ff                	xor    edi,edi
c00288c1:	01 ff                	add    edi,edi
c00288c3:	89 d1                	mov    ecx,edx
c00288c5:	c1 e9 1f             	shr    ecx,0x1f
c00288c8:	09 cf                	or     edi,ecx
c00288ca:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00288cd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00288d0:	89 da                	mov    edx,ebx
c00288d2:	89 f3                	mov    ebx,esi
c00288d4:	8d 34 36             	lea    esi,[esi+esi*1]
c00288d7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288da:	c1 e9 1f             	shr    ecx,0x1f
c00288dd:	09 ce                	or     esi,ecx
c00288df:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288e2:	01 c9                	add    ecx,ecx
c00288e4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00288e7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288ea:	85 db                	test   ebx,ebx
c00288ec:	78 29                	js     c0028917 <__divdf3+0x24b>
c00288ee:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00288f1:	72 07                	jb     c00288fa <__divdf3+0x22e>
c00288f3:	75 3c                	jne    c0028931 <__divdf3+0x265>
c00288f5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288f8:	77 37                	ja     c0028931 <__divdf3+0x265>
c00288fa:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288fd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028900:	31 d2                	xor    edx,edx
c0028902:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028905:	0f 97 c2             	seta   dl
c0028908:	29 d6                	sub    esi,edx
c002890a:	89 d9                	mov    ecx,ebx
c002890c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002890f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028912:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028915:	eb 17                	jmp    c002892e <__divdf3+0x262>
c0028917:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002891a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002891d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028920:	0f 97 c1             	seta   cl
c0028923:	0f b6 c9             	movzx  ecx,cl
c0028926:	29 ce                	sub    esi,ecx
c0028928:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002892b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002892e:	83 ca 01             	or     edx,0x1
c0028931:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028934:	75 8b                	jne    c00288c1 <__divdf3+0x1f5>
c0028936:	c1 e7 09             	shl    edi,0x9
c0028939:	89 d1                	mov    ecx,edx
c002893b:	c1 e9 17             	shr    ecx,0x17
c002893e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028941:	09 f3                	or     ebx,esi
c0028943:	0f 95 c3             	setne  bl
c0028946:	0f b6 db             	movzx  ebx,bl
c0028949:	c1 e2 09             	shl    edx,0x9
c002894c:	09 d3                	or     ebx,edx
c002894e:	89 ca                	mov    edx,ecx
c0028950:	09 fa                	or     edx,edi
c0028952:	78 0c                	js     c0028960 <__divdf3+0x294>
c0028954:	01 d2                	add    edx,edx
c0028956:	89 d9                	mov    ecx,ebx
c0028958:	c1 e9 1f             	shr    ecx,0x1f
c002895b:	09 ca                	or     edx,ecx
c002895d:	01 db                	add    ebx,ebx
c002895f:	48                   	dec    eax
c0028960:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028965:	0f 8f 83 00 00 00    	jg     c00289ee <__divdf3+0x322>
c002896b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028971:	85 c0                	test   eax,eax
c0028973:	0f 8f 82 00 00 00    	jg     c00289fb <__divdf3+0x32f>
c0028979:	83 f8 cc             	cmp    eax,0xffffffcc
c002897c:	7c 77                	jl     c00289f5 <__divdf3+0x329>
c002897e:	be 01 00 00 00       	mov    esi,0x1
c0028983:	29 c6                	sub    esi,eax
c0028985:	81 ca 00 00 00 80    	or     edx,0x80000000
c002898b:	83 fe 1f             	cmp    esi,0x1f
c002898e:	7e 2f                	jle    c00289bf <__divdf3+0x2f3>
c0028990:	83 fe 20             	cmp    esi,0x20
c0028993:	75 0a                	jne    c002899f <__divdf3+0x2d3>
c0028995:	85 db                	test   ebx,ebx
c0028997:	0f 95 c3             	setne  bl
c002899a:	0f b6 db             	movzx  ebx,bl
c002899d:	eb 1a                	jmp    c00289b9 <__divdf3+0x2ed>
c002899f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00289a2:	89 d7                	mov    edi,edx
c00289a4:	d3 e7                	shl    edi,cl
c00289a6:	89 f9                	mov    ecx,edi
c00289a8:	09 d9                	or     ecx,ebx
c00289aa:	0f 95 c3             	setne  bl
c00289ad:	0f b6 db             	movzx  ebx,bl
c00289b0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00289b5:	29 c1                	sub    ecx,eax
c00289b7:	d3 ea                	shr    edx,cl
c00289b9:	09 d3                	or     ebx,edx
c00289bb:	31 c0                	xor    eax,eax
c00289bd:	eb 3a                	jmp    c00289f9 <__divdf3+0x32d>
c00289bf:	83 c0 1f             	add    eax,0x1f
c00289c2:	89 d7                	mov    edi,edx
c00289c4:	88 c1                	mov    cl,al
c00289c6:	d3 e7                	shl    edi,cl
c00289c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00289cb:	89 df                	mov    edi,ebx
c00289cd:	89 f1                	mov    ecx,esi
c00289cf:	d3 ef                	shr    edi,cl
c00289d1:	89 f9                	mov    ecx,edi
c00289d3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00289d6:	09 cf                	or     edi,ecx
c00289d8:	88 c1                	mov    cl,al
c00289da:	d3 e3                	shl    ebx,cl
c00289dc:	85 db                	test   ebx,ebx
c00289de:	0f 95 c3             	setne  bl
c00289e1:	0f b6 db             	movzx  ebx,bl
c00289e4:	09 fb                	or     ebx,edi
c00289e6:	89 f1                	mov    ecx,esi
c00289e8:	d3 ea                	shr    edx,cl
c00289ea:	31 c0                	xor    eax,eax
c00289ec:	eb 0d                	jmp    c00289fb <__divdf3+0x32f>
c00289ee:	b8 ff 07 00 00       	mov    eax,0x7ff
c00289f3:	eb 02                	jmp    c00289f7 <__divdf3+0x32b>
c00289f5:	31 c0                	xor    eax,eax
c00289f7:	31 db                	xor    ebx,ebx
c00289f9:	31 d2                	xor    edx,edx
c00289fb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00289fe:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028a01:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028a07:	09 c8                	or     eax,ecx
c0028a09:	c1 e0 14             	shl    eax,0x14
c0028a0c:	89 d1                	mov    ecx,edx
c0028a0e:	c1 e9 0b             	shr    ecx,0xb
c0028a11:	09 c8                	or     eax,ecx
c0028a13:	89 c6                	mov    esi,eax
c0028a15:	89 d9                	mov    ecx,ebx
c0028a17:	c1 e9 0b             	shr    ecx,0xb
c0028a1a:	c1 e2 15             	shl    edx,0x15
c0028a1d:	09 ca                	or     edx,ecx
c0028a1f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028a25:	0f 95 c0             	setne  al
c0028a28:	09 c1                	or     ecx,eax
c0028a2a:	83 e1 01             	and    ecx,0x1
c0028a2d:	c1 eb 0a             	shr    ebx,0xa
c0028a30:	21 cb                	and    ebx,ecx
c0028a32:	01 d3                	add    ebx,edx
c0028a34:	89 d8                	mov    eax,ebx
c0028a36:	83 d6 00             	adc    esi,0x0
c0028a39:	89 f2                	mov    edx,esi
c0028a3b:	89 c7                	mov    edi,eax
c0028a3d:	89 d1                	mov    ecx,edx
c0028a3f:	89 f8                	mov    eax,edi
c0028a41:	89 ca                	mov    edx,ecx
c0028a43:	83 c4 2c             	add    esp,0x2c
c0028a46:	5b                   	pop    ebx
c0028a47:	5e                   	pop    esi
c0028a48:	5f                   	pop    edi
c0028a49:	5d                   	pop    ebp
c0028a4a:	c3                   	ret    

c0028a4b <__floatsidf>:
c0028a4b:	55                   	push   ebp
c0028a4c:	89 e5                	mov    ebp,esp
c0028a4e:	56                   	push   esi
c0028a4f:	53                   	push   ebx
c0028a50:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a53:	85 db                	test   ebx,ebx
c0028a55:	7e 15                	jle    c0028a6c <__floatsidf+0x21>
c0028a57:	0f bd cb             	bsr    ecx,ebx
c0028a5a:	83 f1 1f             	xor    ecx,0x1f
c0028a5d:	d3 e3                	shl    ebx,cl
c0028a5f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a65:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a6a:	eb 21                	jmp    c0028a8d <__floatsidf+0x42>
c0028a6c:	b8 00 00 00 00       	mov    eax,0x0
c0028a71:	ba 00 00 00 00       	mov    edx,0x0
c0028a76:	74 2a                	je     c0028aa2 <__floatsidf+0x57>
c0028a78:	f7 db                	neg    ebx
c0028a7a:	0f bd cb             	bsr    ecx,ebx
c0028a7d:	83 f1 1f             	xor    ecx,0x1f
c0028a80:	d3 e3                	shl    ebx,cl
c0028a82:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a88:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028a8d:	29 c8                	sub    eax,ecx
c0028a8f:	c1 e0 14             	shl    eax,0x14
c0028a92:	89 c1                	mov    ecx,eax
c0028a94:	89 de                	mov    esi,ebx
c0028a96:	c1 ee 0b             	shr    esi,0xb
c0028a99:	09 f1                	or     ecx,esi
c0028a9b:	89 ca                	mov    edx,ecx
c0028a9d:	c1 e3 15             	shl    ebx,0x15
c0028aa0:	89 d8                	mov    eax,ebx
c0028aa2:	5b                   	pop    ebx
c0028aa3:	5e                   	pop    esi
c0028aa4:	5d                   	pop    ebp
c0028aa5:	c3                   	ret    

c0028aa6 <__floatunsidf>:
c0028aa6:	55                   	push   ebp
c0028aa7:	89 e5                	mov    ebp,esp
c0028aa9:	56                   	push   esi
c0028aaa:	53                   	push   ebx
c0028aab:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028aae:	85 db                	test   ebx,ebx
c0028ab0:	74 2a                	je     c0028adc <__floatunsidf+0x36>
c0028ab2:	0f bd cb             	bsr    ecx,ebx
c0028ab5:	83 f1 1f             	xor    ecx,0x1f
c0028ab8:	d3 e3                	shl    ebx,cl
c0028aba:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ac0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028ac5:	29 c8                	sub    eax,ecx
c0028ac7:	c1 e0 14             	shl    eax,0x14
c0028aca:	89 c1                	mov    ecx,eax
c0028acc:	89 de                	mov    esi,ebx
c0028ace:	c1 ee 0b             	shr    esi,0xb
c0028ad1:	09 f1                	or     ecx,esi
c0028ad3:	89 ca                	mov    edx,ecx
c0028ad5:	c1 e3 15             	shl    ebx,0x15
c0028ad8:	89 d8                	mov    eax,ebx
c0028ada:	eb 04                	jmp    c0028ae0 <__floatunsidf+0x3a>
c0028adc:	31 c0                	xor    eax,eax
c0028ade:	31 d2                	xor    edx,edx
c0028ae0:	5b                   	pop    ebx
c0028ae1:	5e                   	pop    esi
c0028ae2:	5d                   	pop    ebp
c0028ae3:	c3                   	ret    

c0028ae4 <__fixdfsi>:
c0028ae4:	55                   	push   ebp
c0028ae5:	89 e5                	mov    ebp,esp
c0028ae7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028aea:	89 d1                	mov    ecx,edx
c0028aec:	c1 e1 0b             	shl    ecx,0xb
c0028aef:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028af8:	c1 e8 15             	shr    eax,0x15
c0028afb:	09 c1                	or     ecx,eax
c0028afd:	c1 fa 14             	sar    edx,0x14
c0028b00:	78 1f                	js     c0028b21 <__fixdfsi+0x3d>
c0028b02:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028b08:	31 c0                	xor    eax,eax
c0028b0a:	83 fa 1e             	cmp    edx,0x1e
c0028b0d:	77 40                	ja     c0028b4f <__fixdfsi+0x6b>
c0028b0f:	89 c8                	mov    eax,ecx
c0028b11:	0d 00 00 00 80       	or     eax,0x80000000
c0028b16:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b1b:	29 d1                	sub    ecx,edx
c0028b1d:	d3 e8                	shr    eax,cl
c0028b1f:	eb 2e                	jmp    c0028b4f <__fixdfsi+0x6b>
c0028b21:	31 c0                	xor    eax,eax
c0028b23:	81 c2 01 04 00 00    	add    edx,0x401
c0028b29:	78 24                	js     c0028b4f <__fixdfsi+0x6b>
c0028b2b:	83 fa 1e             	cmp    edx,0x1e
c0028b2e:	7e 09                	jle    c0028b39 <__fixdfsi+0x55>
c0028b30:	83 fa 1f             	cmp    edx,0x1f
c0028b33:	75 18                	jne    c0028b4d <__fixdfsi+0x69>
c0028b35:	85 c9                	test   ecx,ecx
c0028b37:	75 14                	jne    c0028b4d <__fixdfsi+0x69>
c0028b39:	89 c8                	mov    eax,ecx
c0028b3b:	0d 00 00 00 80       	or     eax,0x80000000
c0028b40:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b45:	29 d1                	sub    ecx,edx
c0028b47:	d3 e8                	shr    eax,cl
c0028b49:	f7 d8                	neg    eax
c0028b4b:	eb 02                	jmp    c0028b4f <__fixdfsi+0x6b>
c0028b4d:	31 c0                	xor    eax,eax
c0028b4f:	5d                   	pop    ebp
c0028b50:	c3                   	ret    

c0028b51 <__fixunsdfsi>:
c0028b51:	55                   	push   ebp
c0028b52:	89 e5                	mov    ebp,esp
c0028b54:	53                   	push   ebx
c0028b55:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b58:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b5b:	89 d3                	mov    ebx,edx
c0028b5d:	c1 fb 14             	sar    ebx,0x14
c0028b60:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b66:	31 c0                	xor    eax,eax
c0028b68:	83 fb 1f             	cmp    ebx,0x1f
c0028b6b:	77 1d                	ja     c0028b8a <__fixunsdfsi+0x39>
c0028b6d:	89 d0                	mov    eax,edx
c0028b6f:	c1 e0 0b             	shl    eax,0xb
c0028b72:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b77:	c1 e9 15             	shr    ecx,0x15
c0028b7a:	09 c8                	or     eax,ecx
c0028b7c:	0d 00 00 00 80       	or     eax,0x80000000
c0028b81:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b86:	29 d9                	sub    ecx,ebx
c0028b88:	d3 e8                	shr    eax,cl
c0028b8a:	5b                   	pop    ebx
c0028b8b:	5d                   	pop    ebp
c0028b8c:	c3                   	ret    

c0028b8d <__cmpdf2>:
c0028b8d:	55                   	push   ebp
c0028b8e:	89 e5                	mov    ebp,esp
c0028b90:	57                   	push   edi
c0028b91:	56                   	push   esi
c0028b92:	53                   	push   ebx
c0028b93:	83 ec 0c             	sub    esp,0xc
c0028b96:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028b99:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028b9c:	89 ca                	mov    edx,ecx
c0028b9e:	c1 ea 14             	shr    edx,0x14
c0028ba1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028ba7:	89 cb                	mov    ebx,ecx
c0028ba9:	c1 fb 1f             	sar    ebx,0x1f
c0028bac:	31 da                	xor    edx,ebx
c0028bae:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028bb1:	89 df                	mov    edi,ebx
c0028bb3:	c1 e7 0b             	shl    edi,0xb
c0028bb6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028bb9:	c1 e1 0b             	shl    ecx,0xb
c0028bbc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bc2:	c1 eb 15             	shr    ebx,0x15
c0028bc5:	09 d9                	or     ecx,ebx
c0028bc7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028bca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028bcd:	89 ce                	mov    esi,ecx
c0028bcf:	c1 ee 14             	shr    esi,0x14
c0028bd2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028bd8:	89 cb                	mov    ebx,ecx
c0028bda:	c1 fb 1f             	sar    ebx,0x1f
c0028bdd:	31 de                	xor    esi,ebx
c0028bdf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028be2:	89 df                	mov    edi,ebx
c0028be4:	c1 e7 0b             	shl    edi,0xb
c0028be7:	c1 e1 0b             	shl    ecx,0xb
c0028bea:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bf0:	c1 eb 15             	shr    ebx,0x15
c0028bf3:	09 d9                	or     ecx,ebx
c0028bf5:	89 d3                	mov    ebx,edx
c0028bf7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bfd:	43                   	inc    ebx
c0028bfe:	83 fb 01             	cmp    ebx,0x1
c0028c01:	77 08                	ja     c0028c0b <__cmpdf2+0x7e>
c0028c03:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028c06:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028c09:	75 68                	jne    c0028c73 <__cmpdf2+0xe6>
c0028c0b:	89 f3                	mov    ebx,esi
c0028c0d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c13:	43                   	inc    ebx
c0028c14:	83 fb 01             	cmp    ebx,0x1
c0028c17:	77 06                	ja     c0028c1f <__cmpdf2+0x92>
c0028c19:	89 fb                	mov    ebx,edi
c0028c1b:	09 cb                	or     ebx,ecx
c0028c1d:	75 54                	jne    c0028c73 <__cmpdf2+0xe6>
c0028c1f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028c22:	09 f8                	or     eax,edi
c0028c24:	09 c8                	or     eax,ecx
c0028c26:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028c29:	75 12                	jne    c0028c3d <__cmpdf2+0xb0>
c0028c2b:	8d 42 01             	lea    eax,[edx+0x1]
c0028c2e:	83 f8 01             	cmp    eax,0x1
c0028c31:	77 0a                	ja     c0028c3d <__cmpdf2+0xb0>
c0028c33:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028c36:	31 c0                	xor    eax,eax
c0028c38:	83 fb 01             	cmp    ebx,0x1
c0028c3b:	76 36                	jbe    c0028c73 <__cmpdf2+0xe6>
c0028c3d:	b8 01 00 00 00       	mov    eax,0x1
c0028c42:	39 f2                	cmp    edx,esi
c0028c44:	7f 2d                	jg     c0028c73 <__cmpdf2+0xe6>
c0028c46:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c4b:	7c 26                	jl     c0028c73 <__cmpdf2+0xe6>
c0028c4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c50:	77 07                	ja     c0028c59 <__cmpdf2+0xcc>
c0028c52:	72 16                	jb     c0028c6a <__cmpdf2+0xdd>
c0028c54:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c57:	76 0a                	jbe    c0028c63 <__cmpdf2+0xd6>
c0028c59:	89 d0                	mov    eax,edx
c0028c5b:	c1 f8 1f             	sar    eax,0x1f
c0028c5e:	83 c8 01             	or     eax,0x1
c0028c61:	eb 10                	jmp    c0028c73 <__cmpdf2+0xe6>
c0028c63:	b8 00 00 00 00       	mov    eax,0x0
c0028c68:	73 09                	jae    c0028c73 <__cmpdf2+0xe6>
c0028c6a:	89 d0                	mov    eax,edx
c0028c6c:	c1 f8 1f             	sar    eax,0x1f
c0028c6f:	83 e0 02             	and    eax,0x2
c0028c72:	48                   	dec    eax
c0028c73:	83 c4 0c             	add    esp,0xc
c0028c76:	5b                   	pop    ebx
c0028c77:	5e                   	pop    esi
c0028c78:	5f                   	pop    edi
c0028c79:	5d                   	pop    ebp
c0028c7a:	c3                   	ret    

c0028c7b <__eqdf2>:
c0028c7b:	55                   	push   ebp
c0028c7c:	89 e5                	mov    ebp,esp
c0028c7e:	50                   	push   eax
c0028c7f:	6a 01                	push   0x1
c0028c81:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c84:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c87:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c8d:	e8 fb fe ff ff       	call   c0028b8d <__cmpdf2>
c0028c92:	83 c4 18             	add    esp,0x18
c0028c95:	c9                   	leave  
c0028c96:	c3                   	ret    

c0028c97 <__nedf2>:
c0028c97:	eb e2                	jmp    c0028c7b <__eqdf2>

c0028c99 <__gtdf2>:
c0028c99:	55                   	push   ebp
c0028c9a:	89 e5                	mov    ebp,esp
c0028c9c:	50                   	push   eax
c0028c9d:	6a ff                	push   0xffffffff
c0028c9f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028ca2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028ca5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028ca8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028cab:	e8 dd fe ff ff       	call   c0028b8d <__cmpdf2>
c0028cb0:	83 c4 18             	add    esp,0x18
c0028cb3:	c9                   	leave  
c0028cb4:	c3                   	ret    

c0028cb5 <__gedf2>:
c0028cb5:	eb e2                	jmp    c0028c99 <__gtdf2>

c0028cb7 <__ltdf2>:
c0028cb7:	eb c2                	jmp    c0028c7b <__eqdf2>

c0028cb9 <__ledf2>:
c0028cb9:	eb c0                	jmp    c0028c7b <__eqdf2>

c0028cbb <__truncdfsf2>:
c0028cbb:	55                   	push   ebp
c0028cbc:	89 e5                	mov    ebp,esp
c0028cbe:	57                   	push   edi
c0028cbf:	56                   	push   esi
c0028cc0:	53                   	push   ebx
c0028cc1:	83 ec 0c             	sub    esp,0xc
c0028cc4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028cc7:	89 d1                	mov    ecx,edx
c0028cc9:	c1 f9 14             	sar    ecx,0x14
c0028ccc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ccf:	89 df                	mov    edi,ebx
c0028cd1:	c1 e7 0b             	shl    edi,0xb
c0028cd4:	89 d0                	mov    eax,edx
c0028cd6:	c1 e0 0b             	shl    eax,0xb
c0028cd9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028cde:	c1 eb 15             	shr    ebx,0x15
c0028ce1:	09 d8                	or     eax,ebx
c0028ce3:	89 cb                	mov    ebx,ecx
c0028ce5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028ceb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028cf1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028cf7:	0f 86 9e 00 00 00    	jbe    c0028d9b <__truncdfsf2+0xe0>
c0028cfd:	85 db                	test   ebx,ebx
c0028cff:	75 0a                	jne    c0028d0b <__truncdfsf2+0x50>
c0028d01:	c1 fa 17             	sar    edx,0x17
c0028d04:	30 d2                	xor    dl,dl
c0028d06:	e9 84 00 00 00       	jmp    c0028d8f <__truncdfsf2+0xd4>
c0028d0b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028d11:	83 fe 83             	cmp    esi,0xffffff83
c0028d14:	7d 4b                	jge    c0028d61 <__truncdfsf2+0xa6>
c0028d16:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028d1b:	29 f1                	sub    ecx,esi
c0028d1d:	83 f9 1f             	cmp    ecx,0x1f
c0028d20:	7f 6b                	jg     c0028d8d <__truncdfsf2+0xd2>
c0028d22:	0d 00 00 00 80       	or     eax,0x80000000
c0028d27:	89 c3                	mov    ebx,eax
c0028d29:	d3 eb                	shr    ebx,cl
c0028d2b:	be 01 00 00 00       	mov    esi,0x1
c0028d30:	d3 e6                	shl    esi,cl
c0028d32:	4e                   	dec    esi
c0028d33:	21 f0                	and    eax,esi
c0028d35:	09 f8                	or     eax,edi
c0028d37:	0f 95 c0             	setne  al
c0028d3a:	0f b6 c0             	movzx  eax,al
c0028d3d:	09 c3                	or     ebx,eax
c0028d3f:	89 d9                	mov    ecx,ebx
c0028d41:	c1 e9 08             	shr    ecx,0x8
c0028d44:	f6 c3 7f             	test   bl,0x7f
c0028d47:	0f 95 c0             	setne  al
c0028d4a:	09 c8                	or     eax,ecx
c0028d4c:	83 e0 01             	and    eax,0x1
c0028d4f:	c1 eb 07             	shr    ebx,0x7
c0028d52:	21 c3                	and    ebx,eax
c0028d54:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d5a:	09 d1                	or     ecx,edx
c0028d5c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d5f:	eb 76                	jmp    c0028dd7 <__truncdfsf2+0x11c>
c0028d61:	83 c6 80             	add    esi,0xffffff80
c0028d64:	7e 1d                	jle    c0028d83 <__truncdfsf2+0xc8>
c0028d66:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d6c:	75 0b                	jne    c0028d79 <__truncdfsf2+0xbe>
c0028d6e:	09 f8                	or     eax,edi
c0028d70:	74 09                	je     c0028d7b <__truncdfsf2+0xc0>
c0028d72:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028d77:	eb 02                	jmp    c0028d7b <__truncdfsf2+0xc0>
c0028d79:	31 c0                	xor    eax,eax
c0028d7b:	c1 fa 17             	sar    edx,0x17
c0028d7e:	80 ca ff             	or     dl,0xff
c0028d81:	eb 0e                	jmp    c0028d91 <__truncdfsf2+0xd6>
c0028d83:	c1 fa 1f             	sar    edx,0x1f
c0028d86:	c1 e2 08             	shl    edx,0x8
c0028d89:	09 ca                	or     edx,ecx
c0028d8b:	eb 04                	jmp    c0028d91 <__truncdfsf2+0xd6>
c0028d8d:	31 d2                	xor    edx,edx
c0028d8f:	31 c0                	xor    eax,eax
c0028d91:	c1 e2 17             	shl    edx,0x17
c0028d94:	c1 e8 08             	shr    eax,0x8
c0028d97:	09 d0                	or     eax,edx
c0028d99:	eb 3c                	jmp    c0028dd7 <__truncdfsf2+0x11c>
c0028d9b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028da1:	89 ca                	mov    edx,ecx
c0028da3:	c1 fa 0b             	sar    edx,0xb
c0028da6:	c1 e2 08             	shl    edx,0x8
c0028da9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028dac:	31 db                	xor    ebx,ebx
c0028dae:	85 ff                	test   edi,edi
c0028db0:	0f 95 c3             	setne  bl
c0028db3:	09 d8                	or     eax,ebx
c0028db5:	89 c3                	mov    ebx,eax
c0028db7:	c1 eb 08             	shr    ebx,0x8
c0028dba:	a8 7f                	test   al,0x7f
c0028dbc:	0f 95 c2             	setne  dl
c0028dbf:	89 d6                	mov    esi,edx
c0028dc1:	09 de                	or     esi,ebx
c0028dc3:	83 e6 01             	and    esi,0x1
c0028dc6:	c1 e8 07             	shr    eax,0x7
c0028dc9:	21 f0                	and    eax,esi
c0028dcb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028dce:	09 ca                	or     edx,ecx
c0028dd0:	c1 e2 17             	shl    edx,0x17
c0028dd3:	09 da                	or     edx,ebx
c0028dd5:	01 d0                	add    eax,edx
c0028dd7:	83 c4 0c             	add    esp,0xc
c0028dda:	5b                   	pop    ebx
c0028ddb:	5e                   	pop    esi
c0028ddc:	5f                   	pop    edi
c0028ddd:	5d                   	pop    ebp
c0028dde:	c3                   	ret    

c0028ddf <__extendsfdf2>:
c0028ddf:	55                   	push   ebp
c0028de0:	89 e5                	mov    ebp,esp
c0028de2:	57                   	push   edi
c0028de3:	56                   	push   esi
c0028de4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028de7:	89 d1                	mov    ecx,edx
c0028de9:	c1 f9 17             	sar    ecx,0x17
c0028dec:	c1 e2 08             	shl    edx,0x8
c0028def:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028df5:	89 c8                	mov    eax,ecx
c0028df7:	80 e4 f8             	and    ah,0xf8
c0028dfa:	8d 71 01             	lea    esi,[ecx+0x1]
c0028dfd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028e03:	75 27                	jne    c0028e2c <__extendsfdf2+0x4d>
c0028e05:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028e0b:	75 18                	jne    c0028e25 <__extendsfdf2+0x46>
c0028e0d:	85 d2                	test   edx,edx
c0028e0f:	74 20                	je     c0028e31 <__extendsfdf2+0x52>
c0028e11:	41                   	inc    ecx
c0028e12:	01 d2                	add    edx,edx
c0028e14:	79 fb                	jns    c0028e11 <__extendsfdf2+0x32>
c0028e16:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e1c:	29 c8                	sub    eax,ecx
c0028e1e:	05 81 03 00 00       	add    eax,0x381
c0028e23:	eb 0c                	jmp    c0028e31 <__extendsfdf2+0x52>
c0028e25:	05 00 07 00 00       	add    eax,0x700
c0028e2a:	eb 05                	jmp    c0028e31 <__extendsfdf2+0x52>
c0028e2c:	05 80 03 00 00       	add    eax,0x380
c0028e31:	c1 e0 14             	shl    eax,0x14
c0028e34:	89 c1                	mov    ecx,eax
c0028e36:	89 d0                	mov    eax,edx
c0028e38:	c1 e8 0b             	shr    eax,0xb
c0028e3b:	09 c1                	or     ecx,eax
c0028e3d:	c1 e2 15             	shl    edx,0x15
c0028e40:	89 d0                	mov    eax,edx
c0028e42:	89 ca                	mov    edx,ecx
c0028e44:	5e                   	pop    esi
c0028e45:	5f                   	pop    edi
c0028e46:	5d                   	pop    ebp
c0028e47:	c3                   	ret    
c0028e48:	66 90                	xchg   ax,ax
c0028e4a:	66 90                	xchg   ax,ax
c0028e4c:	66 90                	xchg   ax,ax
c0028e4e:	66 90                	xchg   ax,ax

c0028e50 <fabs>:
c0028e50:	83 ec 0c             	sub    esp,0xc
c0028e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e57:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e5e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e67:	dd 04 24             	fld    QWORD PTR [esp]
c0028e6a:	83 c4 0c             	add    esp,0xc
c0028e6d:	c3                   	ret    
c0028e6e:	66 90                	xchg   ax,ax

c0028e70 <lrint>:
c0028e70:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028e74:	83 ec 04             	sub    esp,0x4
c0028e77:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e7a:	58                   	pop    eax
c0028e7b:	c3                   	ret    

c0028e7c <lrintf>:
c0028e7c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028e80:	83 ec 04             	sub    esp,0x4
c0028e83:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e86:	58                   	pop    eax
c0028e87:	c3                   	ret    

Disassembly of section .init:

c0028e88 <_init>:
c0028e88:	55                   	push   ebp
c0028e89:	89 e5                	mov    ebp,esp
c0028e8b:	e8 88 72 fd ff       	call   c0000118 <frame_dummy>
c0028e90:	e8 5b e0 ff ff       	call   c0026ef0 <__do_global_ctors_aux>
c0028e95:	5d                   	pop    ebp
c0028e96:	c3                   	ret    

Disassembly of section .fini:

c0028e97 <_fini>:
c0028e97:	55                   	push   ebp
c0028e98:	89 e5                	mov    ebp,esp
c0028e9a:	e8 09 72 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028e9f:	5d                   	pop    ebp
c0028ea0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028ea2 <Computer::~Computer()>:
c0028ea2:	83 ec 0c             	sub    esp,0xc
c0028ea5:	ba c8 aa 02 c0       	mov    edx,0xc002aac8
c0028eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eae:	89 10                	mov    DWORD PTR [eax],edx
c0028eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eb4:	83 ec 0c             	sub    esp,0xc
c0028eb7:	50                   	push   eax
c0028eb8:	e8 8b b2 fe ff       	call   c0014148 <Device::~Device()>
c0028ebd:	83 c4 10             	add    esp,0x10
c0028ec0:	90                   	nop
c0028ec1:	83 c4 0c             	add    esp,0xc
c0028ec4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028ec6 <Computer::~Computer()>:
c0028ec6:	83 ec 0c             	sub    esp,0xc
c0028ec9:	83 ec 0c             	sub    esp,0xc
c0028ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ed0:	e8 cd ff ff ff       	call   c0028ea2 <Computer::~Computer()>
c0028ed5:	83 c4 10             	add    esp,0x10
c0028ed8:	83 ec 08             	sub    esp,0x8
c0028edb:	68 ec 01 00 00       	push   0x1ec
c0028ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee4:	e8 78 9e fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0028ee9:	83 c4 10             	add    esp,0x10
c0028eec:	83 c4 0c             	add    esp,0xc
c0028eef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028ef0 <idleCommon()>:
c0028ef0:	83 ec 0c             	sub    esp,0xc
c0028ef3:	fa                   	cli    
c0028ef4:	ff 05 a8 23 03 c0    	inc    DWORD PTR ds:0xc00323a8
c0028efa:	e8 a1 55 ff ff       	call   c001e4a0 <schedule()>
c0028eff:	a1 a8 23 03 c0       	mov    eax,ds:0xc00323a8
c0028f04:	48                   	dec    eax
c0028f05:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c0028f0a:	75 01                	jne    c0028f0d <idleCommon()+0x1d>
c0028f0c:	fb                   	sti    
c0028f0d:	83 c4 0c             	add    esp,0xc
c0028f10:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028f12 <LinkedList<UnixFile>::~LinkedList()>:
c0028f12:	90                   	nop
c0028f13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028f14 <LinkedList<UnixFile>::LinkedList()>:
c0028f14:	83 ec 0c             	sub    esp,0xc
c0028f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f30:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f3b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f45:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f50:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f57:	83 ec 0c             	sub    esp,0xc
c0028f5a:	68 86 ad 02 c0       	push   0xc002ad86
c0028f5f:	e8 dd 9e fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0028f64:	83 c4 10             	add    esp,0x10
c0028f67:	90                   	nop
c0028f68:	83 c4 0c             	add    esp,0xc
c0028f6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f6c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f6c:	83 ec 0c             	sub    esp,0xc
c0028f6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f74:	75 10                	jne    c0028f86 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028f76:	83 ec 0c             	sub    esp,0xc
c0028f79:	68 a0 ad 02 c0       	push   0xc002ada0
c0028f7e:	e8 78 18 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0028f83:	83 c4 10             	add    esp,0x10
c0028f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f8c:	85 c0                	test   eax,eax
c0028f8e:	74 34                	je     c0028fc4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f97:	85 c0                	test   eax,eax
c0028f99:	74 29                	je     c0028fc4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fa2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fa6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fb1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fbb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fc2:	eb 65                	jmp    c0029029 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fca:	85 c0                	test   eax,eax
c0028fcc:	75 4b                	jne    c0029019 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fd5:	85 c0                	test   eax,eax
c0028fd7:	75 40                	jne    c0029019 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fdd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fe1:	89 10                	mov    DWORD PTR [eax],edx
c0028fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028feb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028ff5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029000:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029003:	85 c0                	test   eax,eax
c0029005:	74 22                	je     c0029029 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029007:	83 ec 0c             	sub    esp,0xc
c002900a:	68 c2 ad 02 c0       	push   0xc002adc2
c002900f:	e8 e7 17 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0029014:	83 c4 10             	add    esp,0x10
c0029017:	eb 10                	jmp    c0029029 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029019:	83 ec 0c             	sub    esp,0xc
c002901c:	68 cc ad 02 c0       	push   0xc002adcc
c0029021:	e8 d5 17 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0029026:	83 c4 10             	add    esp,0x10
c0029029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029030:	8d 50 01             	lea    edx,[eax+0x1]
c0029033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029037:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002903a:	90                   	nop
c002903b:	83 c4 0c             	add    esp,0xc
c002903e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029040 <LinkedList<UnixFile>::getFirstElement()>:
c0029040:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029044:	8b 00                	mov    eax,DWORD PTR [eax]
c0029046:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029048 <LinkedList<UnixFile>::removeFirst()>:
c0029048:	83 ec 0c             	sub    esp,0xc
c002904b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029051:	85 c0                	test   eax,eax
c0029053:	75 12                	jne    c0029067 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029055:	83 ec 0c             	sub    esp,0xc
c0029058:	68 d8 ad 02 c0       	push   0xc002add8
c002905d:	e8 99 17 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0029062:	83 c4 10             	add    esp,0x10
c0029065:	eb 7e                	jmp    c00290e5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002906e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029071:	85 c0                	test   eax,eax
c0029073:	74 10                	je     c0029085 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029075:	83 ec 0c             	sub    esp,0xc
c0029078:	68 23 ae 02 c0       	push   0xc002ae23
c002907d:	e8 79 17 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0029082:	83 c4 10             	add    esp,0x10
c0029085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029089:	8b 00                	mov    eax,DWORD PTR [eax]
c002908b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002908e:	85 c0                	test   eax,eax
c0029090:	75 33                	jne    c00290c5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029096:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002909c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290ae:	83 f8 01             	cmp    eax,0x1
c00290b1:	74 21                	je     c00290d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290b3:	83 ec 0c             	sub    esp,0xc
c00290b6:	68 fc ad 02 c0       	push   0xc002adfc
c00290bb:	e8 3b 17 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00290c0:	83 c4 10             	add    esp,0x10
c00290c3:	eb 0f                	jmp    c00290d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00290ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d2:	89 10                	mov    DWORD PTR [eax],edx
c00290d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290db:	8d 50 ff             	lea    edx,[eax-0x1]
c00290de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290e5:	83 c4 0c             	add    esp,0xc
c00290e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00290ea <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00290ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00290ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290f1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00290f2 <DriverlessDevice::~DriverlessDevice()>:
c00290f2:	ba a4 b5 02 c0       	mov    edx,0xc002b5a4
c00290f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290fb:	89 10                	mov    DWORD PTR [eax],edx
c00290fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029101:	50                   	push   eax
c0029102:	e8 41 b0 fe ff       	call   c0014148 <Device::~Device()>
c0029107:	83 c4 04             	add    esp,0x4
c002910a:	90                   	nop
c002910b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002910c <DriverlessDevice::~DriverlessDevice()>:
c002910c:	83 ec 0c             	sub    esp,0xc
c002910f:	83 ec 0c             	sub    esp,0xc
c0029112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029116:	e8 d7 ff ff ff       	call   c00290f2 <DriverlessDevice::~DriverlessDevice()>
c002911b:	83 c4 10             	add    esp,0x10
c002911e:	83 ec 08             	sub    esp,0x8
c0029121:	68 58 01 00 00       	push   0x158
c0029126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002912a:	e8 32 9c fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c002912f:	83 c4 10             	add    esp,0x10
c0029132:	83 c4 0c             	add    esp,0xc
c0029135:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029136 <LinkedList<Device>::addElement(Device*)>:
c0029136:	83 ec 0c             	sub    esp,0xc
c0029139:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002913e:	75 10                	jne    c0029150 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029140:	83 ec 0c             	sub    esp,0xc
c0029143:	68 a0 ad 02 c0       	push   0xc002ada0
c0029148:	e8 ae 16 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c002914d:	83 c4 10             	add    esp,0x10
c0029150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029154:	8b 00                	mov    eax,DWORD PTR [eax]
c0029156:	85 c0                	test   eax,eax
c0029158:	74 3a                	je     c0029194 <LinkedList<Device>::addElement(Device*)+0x5e>
c002915a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029161:	85 c0                	test   eax,eax
c0029163:	74 2f                	je     c0029194 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029169:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002916c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029170:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002917e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029185:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029188:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029192:	eb 68                	jmp    c00291fc <LinkedList<Device>::addElement(Device*)+0xc6>
c0029194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029198:	8b 00                	mov    eax,DWORD PTR [eax]
c002919a:	85 c0                	test   eax,eax
c002919c:	75 4e                	jne    c00291ec <LinkedList<Device>::addElement(Device*)+0xb6>
c002919e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291a5:	85 c0                	test   eax,eax
c00291a7:	75 43                	jne    c00291ec <LinkedList<Device>::addElement(Device*)+0xb6>
c00291a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291b1:	89 10                	mov    DWORD PTR [eax],edx
c00291b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291c5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291d6:	85 c0                	test   eax,eax
c00291d8:	74 22                	je     c00291fc <LinkedList<Device>::addElement(Device*)+0xc6>
c00291da:	83 ec 0c             	sub    esp,0xc
c00291dd:	68 c2 ad 02 c0       	push   0xc002adc2
c00291e2:	e8 14 16 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00291e7:	83 c4 10             	add    esp,0x10
c00291ea:	eb 10                	jmp    c00291fc <LinkedList<Device>::addElement(Device*)+0xc6>
c00291ec:	83 ec 0c             	sub    esp,0xc
c00291ef:	68 cc ad 02 c0       	push   0xc002adcc
c00291f4:	e8 02 16 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00291f9:	83 c4 10             	add    esp,0x10
c00291fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029200:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029203:	8d 50 01             	lea    edx,[eax+0x1]
c0029206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002920a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002920d:	90                   	nop
c002920e:	83 c4 0c             	add    esp,0xc
c0029211:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029212 <LinkedList<Device>::LinkedList()>:
c0029212:	83 ec 0c             	sub    esp,0xc
c0029215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029219:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002921f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029223:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002922a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029239:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002923f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029243:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002924a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002924e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029255:	83 ec 0c             	sub    esp,0xc
c0029258:	68 86 ad 02 c0       	push   0xc002ad86
c002925d:	e8 df 9b fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c0029262:	83 c4 10             	add    esp,0x10
c0029265:	90                   	nop
c0029266:	83 c4 0c             	add    esp,0xc
c0029269:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002926a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002926a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002926e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029270:	85 c0                	test   eax,eax
c0029272:	75 0e                	jne    c0029282 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029278:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002927b:	85 c0                	test   eax,eax
c002927d:	75 03                	jne    c0029282 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002927f:	b0 01                	mov    al,0x1
c0029281:	c3                   	ret    
c0029282:	b0 00                	mov    al,0x0
c0029284:	90                   	nop
c0029285:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029286 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002928a:	8b 00                	mov    eax,DWORD PTR [eax]
c002928c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002928e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002928e:	83 ec 0c             	sub    esp,0xc
c0029291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029295:	8b 00                	mov    eax,DWORD PTR [eax]
c0029297:	85 c0                	test   eax,eax
c0029299:	75 15                	jne    c00292b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002929b:	83 ec 0c             	sub    esp,0xc
c002929e:	68 d8 ad 02 c0       	push   0xc002add8
c00292a3:	e8 53 15 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00292a8:	83 c4 10             	add    esp,0x10
c00292ab:	e9 88 00 00 00       	jmp    c0029338 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00292b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292ba:	85 c0                	test   eax,eax
c00292bc:	0f 95 c0             	setne  al
c00292bf:	84 c0                	test   al,al
c00292c1:	74 10                	je     c00292d3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00292c3:	83 ec 0c             	sub    esp,0xc
c00292c6:	68 23 ae 02 c0       	push   0xc002ae23
c00292cb:	e8 2b 15 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00292d0:	83 c4 10             	add    esp,0x10
c00292d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00292d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292dc:	85 c0                	test   eax,eax
c00292de:	0f 94 c0             	sete   al
c00292e1:	84 c0                	test   al,al
c00292e3:	74 33                	je     c0029318 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00292e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029301:	83 f8 01             	cmp    eax,0x1
c0029304:	74 21                	je     c0029327 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029306:	83 ec 0c             	sub    esp,0xc
c0029309:	68 fc ad 02 c0       	push   0xc002adfc
c002930e:	e8 e8 14 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0029313:	83 c4 10             	add    esp,0x10
c0029316:	eb 0f                	jmp    c0029327 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931c:	8b 00                	mov    eax,DWORD PTR [eax]
c002931e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029325:	89 10                	mov    DWORD PTR [eax],edx
c0029327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002932e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029335:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029338:	83 c4 0c             	add    esp,0xc
c002933b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002933c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002933c:	83 ec 0c             	sub    esp,0xc
c002933f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029344:	75 10                	jne    c0029356 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029346:	83 ec 0c             	sub    esp,0xc
c0029349:	68 a0 ad 02 c0       	push   0xc002ada0
c002934e:	e8 a8 14 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0029353:	83 c4 10             	add    esp,0x10
c0029356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002935a:	8b 00                	mov    eax,DWORD PTR [eax]
c002935c:	85 c0                	test   eax,eax
c002935e:	74 34                	je     c0029394 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029364:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029367:	85 c0                	test   eax,eax
c0029369:	74 29                	je     c0029394 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002936b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029372:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029376:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002937d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029381:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029388:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002938b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029392:	eb 65                	jmp    c00293f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029398:	8b 00                	mov    eax,DWORD PTR [eax]
c002939a:	85 c0                	test   eax,eax
c002939c:	75 4b                	jne    c00293e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002939e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293a5:	85 c0                	test   eax,eax
c00293a7:	75 40                	jne    c00293e9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293b1:	89 10                	mov    DWORD PTR [eax],edx
c00293b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293c5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293d3:	85 c0                	test   eax,eax
c00293d5:	74 22                	je     c00293f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293d7:	83 ec 0c             	sub    esp,0xc
c00293da:	68 c2 ad 02 c0       	push   0xc002adc2
c00293df:	e8 17 14 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00293e4:	83 c4 10             	add    esp,0x10
c00293e7:	eb 10                	jmp    c00293f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293e9:	83 ec 0c             	sub    esp,0xc
c00293ec:	68 cc ad 02 c0       	push   0xc002adcc
c00293f1:	e8 05 14 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00293f6:	83 c4 10             	add    esp,0x10
c00293f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029400:	8d 50 01             	lea    edx,[eax+0x1]
c0029403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029407:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002940a:	90                   	nop
c002940b:	83 c4 0c             	add    esp,0xc
c002940e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029410 <ACPI::~ACPI()>:
c0029410:	83 ec 0c             	sub    esp,0xc
c0029413:	ba d0 bf 02 c0       	mov    edx,0xc002bfd0
c0029418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002941c:	89 10                	mov    DWORD PTR [eax],edx
c002941e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029422:	83 ec 0c             	sub    esp,0xc
c0029425:	50                   	push   eax
c0029426:	e8 1d ad fe ff       	call   c0014148 <Device::~Device()>
c002942b:	83 c4 10             	add    esp,0x10
c002942e:	90                   	nop
c002942f:	83 c4 0c             	add    esp,0xc
c0029432:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029434 <ACPI::~ACPI()>:
c0029434:	83 ec 0c             	sub    esp,0xc
c0029437:	83 ec 0c             	sub    esp,0xc
c002943a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002943e:	e8 cd ff ff ff       	call   c0029410 <ACPI::~ACPI()>
c0029443:	83 c4 10             	add    esp,0x10
c0029446:	83 ec 08             	sub    esp,0x8
c0029449:	68 68 12 00 00       	push   0x1268
c002944e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029452:	e8 0a 99 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0029457:	83 c4 10             	add    esp,0x10
c002945a:	83 c4 0c             	add    esp,0xc
c002945d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002945e <LinkedList<Device>::~LinkedList()>:
c002945e:	90                   	nop
c002945f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029460 <LinkedList<Device>::isEmpty()>:
c0029460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029464:	8b 00                	mov    eax,DWORD PTR [eax]
c0029466:	85 c0                	test   eax,eax
c0029468:	75 0e                	jne    c0029478 <LinkedList<Device>::isEmpty()+0x18>
c002946a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002946e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029471:	85 c0                	test   eax,eax
c0029473:	75 03                	jne    c0029478 <LinkedList<Device>::isEmpty()+0x18>
c0029475:	b0 01                	mov    al,0x1
c0029477:	c3                   	ret    
c0029478:	b0 00                	mov    al,0x0
c002947a:	90                   	nop
c002947b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002947c <LinkedList<Device>::getFirstElement()>:
c002947c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029480:	8b 00                	mov    eax,DWORD PTR [eax]
c0029482:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029484 <LinkedList<Device>::removeFirst()>:
c0029484:	83 ec 0c             	sub    esp,0xc
c0029487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948b:	8b 00                	mov    eax,DWORD PTR [eax]
c002948d:	85 c0                	test   eax,eax
c002948f:	75 15                	jne    c00294a6 <LinkedList<Device>::removeFirst()+0x22>
c0029491:	83 ec 0c             	sub    esp,0xc
c0029494:	68 d8 ad 02 c0       	push   0xc002add8
c0029499:	e8 5d 13 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c002949e:	83 c4 10             	add    esp,0x10
c00294a1:	e9 87 00 00 00       	jmp    c002952d <LinkedList<Device>::removeFirst()+0xa9>
c00294a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294ad:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294b3:	85 c0                	test   eax,eax
c00294b5:	74 10                	je     c00294c7 <LinkedList<Device>::removeFirst()+0x43>
c00294b7:	83 ec 0c             	sub    esp,0xc
c00294ba:	68 23 ae 02 c0       	push   0xc002ae23
c00294bf:	e8 37 13 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c00294c4:	83 c4 10             	add    esp,0x10
c00294c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00294cd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294d3:	85 c0                	test   eax,eax
c00294d5:	75 33                	jne    c002950a <LinkedList<Device>::removeFirst()+0x86>
c00294d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294f3:	83 f8 01             	cmp    eax,0x1
c00294f6:	74 24                	je     c002951c <LinkedList<Device>::removeFirst()+0x98>
c00294f8:	83 ec 0c             	sub    esp,0xc
c00294fb:	68 fc ad 02 c0       	push   0xc002adfc
c0029500:	e8 f6 12 ff ff       	call   c001a7fb <Krnl::panic(char const*)>
c0029505:	83 c4 10             	add    esp,0x10
c0029508:	eb 12                	jmp    c002951c <LinkedList<Device>::removeFirst()+0x98>
c002950a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029510:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002951a:	89 10                	mov    DWORD PTR [eax],edx
c002951c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029520:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029523:	8d 50 ff             	lea    edx,[eax-0x1]
c0029526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002952a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002952d:	83 c4 0c             	add    esp,0xc
c0029530:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029532 <CPU::~CPU()>:
c0029532:	83 ec 0c             	sub    esp,0xc
c0029535:	ba c0 c3 02 c0       	mov    edx,0xc002c3c0
c002953a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002953e:	89 10                	mov    DWORD PTR [eax],edx
c0029540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029544:	83 ec 0c             	sub    esp,0xc
c0029547:	50                   	push   eax
c0029548:	e8 fb ab fe ff       	call   c0014148 <Device::~Device()>
c002954d:	83 c4 10             	add    esp,0x10
c0029550:	90                   	nop
c0029551:	83 c4 0c             	add    esp,0xc
c0029554:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029556 <CPU::~CPU()>:
c0029556:	83 ec 0c             	sub    esp,0xc
c0029559:	83 ec 0c             	sub    esp,0xc
c002955c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029560:	e8 cd ff ff ff       	call   c0029532 <CPU::~CPU()>
c0029565:	83 c4 10             	add    esp,0x10
c0029568:	83 ec 08             	sub    esp,0x8
c002956b:	68 98 11 00 00       	push   0x1198
c0029570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029574:	e8 e8 97 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0029579:	83 c4 10             	add    esp,0x10
c002957c:	83 c4 0c             	add    esp,0xc
c002957f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029580 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029580:	90                   	nop
c0029581:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029582 <ThreadControlBlock::ThreadControlBlock()>:
c0029582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029586:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002958d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029591:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002959c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00295a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295a7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00295ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295b2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00295b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295bd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00295c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295c5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00295c9:	90                   	nop
c00295ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00295cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00295cc:	83 ec 0c             	sub    esp,0xc
c00295cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029608:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002960f:	83 ec 0c             	sub    esp,0xc
c0029612:	68 86 ad 02 c0       	push   0xc002ad86
c0029617:	e8 25 98 fe ff       	call   c0012e41 <Dbg::kprintf(char const*, ...)>
c002961c:	83 c4 10             	add    esp,0x10
c002961f:	90                   	nop
c0029620:	83 c4 0c             	add    esp,0xc
c0029623:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029624 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029628:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002962b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002962c <Vm::_FPUState::_FPUState()>:
c002962c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029630:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029637:	90                   	nop
c0029638:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002963a <PCI::~PCI()>:
c002963a:	83 ec 0c             	sub    esp,0xc
c002963d:	ba c4 d4 02 c0       	mov    edx,0xc002d4c4
c0029642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029646:	89 10                	mov    DWORD PTR [eax],edx
c0029648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002964c:	83 ec 0c             	sub    esp,0xc
c002964f:	50                   	push   eax
c0029650:	e8 c3 a4 fe ff       	call   c0013b18 <Bus::~Bus()>
c0029655:	83 c4 10             	add    esp,0x10
c0029658:	90                   	nop
c0029659:	83 c4 0c             	add    esp,0xc
c002965c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002965e <PCI::~PCI()>:
c002965e:	83 ec 0c             	sub    esp,0xc
c0029661:	83 ec 0c             	sub    esp,0xc
c0029664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029668:	e8 cd ff ff ff       	call   c002963a <PCI::~PCI()>
c002966d:	83 c4 10             	add    esp,0x10
c0029670:	83 ec 08             	sub    esp,0x8
c0029673:	68 58 01 00 00       	push   0x158
c0029678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002967c:	e8 e0 96 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0029681:	83 c4 10             	add    esp,0x10
c0029684:	83 c4 0c             	add    esp,0xc
c0029687:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029688 <IDE::~IDE()>:
c0029688:	83 ec 0c             	sub    esp,0xc
c002968b:	ba 28 d7 02 c0       	mov    edx,0xc002d728
c0029690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029694:	89 10                	mov    DWORD PTR [eax],edx
c0029696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002969a:	83 ec 0c             	sub    esp,0xc
c002969d:	50                   	push   eax
c002969e:	e8 8f af fe ff       	call   c0014632 <HardDiskController::~HardDiskController()>
c00296a3:	83 c4 10             	add    esp,0x10
c00296a6:	90                   	nop
c00296a7:	83 c4 0c             	add    esp,0xc
c00296aa:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00296ac <IDE::~IDE()>:
c00296ac:	83 ec 0c             	sub    esp,0xc
c00296af:	83 ec 0c             	sub    esp,0xc
c00296b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296b6:	e8 cd ff ff ff       	call   c0029688 <IDE::~IDE()>
c00296bb:	83 c4 10             	add    esp,0x10
c00296be:	83 ec 08             	sub    esp,0x8
c00296c1:	68 70 02 00 00       	push   0x270
c00296c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296ca:	e8 92 96 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c00296cf:	83 c4 10             	add    esp,0x10
c00296d2:	83 c4 0c             	add    esp,0xc
c00296d5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00296d6 <SATABus::~SATABus()>:
c00296d6:	83 ec 0c             	sub    esp,0xc
c00296d9:	ba 08 d8 02 c0       	mov    edx,0xc002d808
c00296de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e2:	89 10                	mov    DWORD PTR [eax],edx
c00296e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e8:	83 ec 0c             	sub    esp,0xc
c00296eb:	50                   	push   eax
c00296ec:	e8 41 af fe ff       	call   c0014632 <HardDiskController::~HardDiskController()>
c00296f1:	83 c4 10             	add    esp,0x10
c00296f4:	90                   	nop
c00296f5:	83 c4 0c             	add    esp,0xc
c00296f8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00296fa <SATABus::~SATABus()>:
c00296fa:	83 ec 0c             	sub    esp,0xc
c00296fd:	83 ec 0c             	sub    esp,0xc
c0029700:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029704:	e8 cd ff ff ff       	call   c00296d6 <SATABus::~SATABus()>
c0029709:	83 c4 10             	add    esp,0x10
c002970c:	83 ec 08             	sub    esp,0x8
c002970f:	68 64 01 00 00       	push   0x164
c0029714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029718:	e8 44 96 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c002971d:	83 c4 10             	add    esp,0x10
c0029720:	83 c4 0c             	add    esp,0xc
c0029723:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029724 <ATA::~ATA()>:
c0029724:	83 ec 0c             	sub    esp,0xc
c0029727:	ba 54 d8 02 c0       	mov    edx,0xc002d854
c002972c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029730:	89 10                	mov    DWORD PTR [eax],edx
c0029732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029736:	83 ec 0c             	sub    esp,0xc
c0029739:	50                   	push   eax
c002973a:	e8 e5 af fe ff       	call   c0014724 <PhysicalDisk::~PhysicalDisk()>
c002973f:	83 c4 10             	add    esp,0x10
c0029742:	90                   	nop
c0029743:	83 c4 0c             	add    esp,0xc
c0029746:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029748 <ATA::~ATA()>:
c0029748:	83 ec 0c             	sub    esp,0xc
c002974b:	83 ec 0c             	sub    esp,0xc
c002974e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029752:	e8 cd ff ff ff       	call   c0029724 <ATA::~ATA()>
c0029757:	83 c4 10             	add    esp,0x10
c002975a:	83 ec 08             	sub    esp,0x8
c002975d:	68 7c 01 00 00       	push   0x17c
c0029762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029766:	e8 f6 95 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c002976b:	83 c4 10             	add    esp,0x10
c002976e:	83 c4 0c             	add    esp,0xc
c0029771:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029772 <ATAPI::~ATAPI()>:
c0029772:	83 ec 0c             	sub    esp,0xc
c0029775:	ba 8c d8 02 c0       	mov    edx,0xc002d88c
c002977a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002977e:	89 10                	mov    DWORD PTR [eax],edx
c0029780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029784:	83 ec 0c             	sub    esp,0xc
c0029787:	50                   	push   eax
c0029788:	e8 97 af fe ff       	call   c0014724 <PhysicalDisk::~PhysicalDisk()>
c002978d:	83 c4 10             	add    esp,0x10
c0029790:	90                   	nop
c0029791:	83 c4 0c             	add    esp,0xc
c0029794:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029796 <ATAPI::~ATAPI()>:
c0029796:	83 ec 0c             	sub    esp,0xc
c0029799:	83 ec 0c             	sub    esp,0xc
c002979c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297a0:	e8 cd ff ff ff       	call   c0029772 <ATAPI::~ATAPI()>
c00297a5:	83 c4 10             	add    esp,0x10
c00297a8:	83 ec 08             	sub    esp,0x8
c00297ab:	68 80 01 00 00       	push   0x180
c00297b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297b4:	e8 a8 95 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c00297b9:	83 c4 10             	add    esp,0x10
c00297bc:	83 c4 0c             	add    esp,0xc
c00297bf:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00297c0 <SATA::~SATA()>:
c00297c0:	83 ec 0c             	sub    esp,0xc
c00297c3:	ba 40 d9 02 c0       	mov    edx,0xc002d940
c00297c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297cc:	89 10                	mov    DWORD PTR [eax],edx
c00297ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d2:	83 ec 0c             	sub    esp,0xc
c00297d5:	50                   	push   eax
c00297d6:	e8 49 af fe ff       	call   c0014724 <PhysicalDisk::~PhysicalDisk()>
c00297db:	83 c4 10             	add    esp,0x10
c00297de:	90                   	nop
c00297df:	83 c4 0c             	add    esp,0xc
c00297e2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00297e4 <SATA::~SATA()>:
c00297e4:	83 ec 0c             	sub    esp,0xc
c00297e7:	83 ec 0c             	sub    esp,0xc
c00297ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297ee:	e8 cd ff ff ff       	call   c00297c0 <SATA::~SATA()>
c00297f3:	83 c4 10             	add    esp,0x10
c00297f6:	83 ec 08             	sub    esp,0x8
c00297f9:	68 7c 01 00 00       	push   0x17c
c00297fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029802:	e8 5a 95 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0029807:	83 c4 10             	add    esp,0x10
c002980a:	83 c4 0c             	add    esp,0xc
c002980d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002980e <SATAPI::~SATAPI()>:
c002980e:	83 ec 0c             	sub    esp,0xc
c0029811:	ba 1c da 02 c0       	mov    edx,0xc002da1c
c0029816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002981a:	89 10                	mov    DWORD PTR [eax],edx
c002981c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029820:	83 ec 0c             	sub    esp,0xc
c0029823:	50                   	push   eax
c0029824:	e8 fb ae fe ff       	call   c0014724 <PhysicalDisk::~PhysicalDisk()>
c0029829:	83 c4 10             	add    esp,0x10
c002982c:	90                   	nop
c002982d:	83 c4 0c             	add    esp,0xc
c0029830:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029832 <SATAPI::~SATAPI()>:
c0029832:	83 ec 0c             	sub    esp,0xc
c0029835:	83 ec 0c             	sub    esp,0xc
c0029838:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002983c:	e8 cd ff ff ff       	call   c002980e <SATAPI::~SATAPI()>
c0029841:	83 c4 10             	add    esp,0x10
c0029844:	83 ec 08             	sub    esp,0x8
c0029847:	68 80 01 00 00       	push   0x180
c002984c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029850:	e8 0c 95 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0029855:	83 c4 10             	add    esp,0x10
c0029858:	83 c4 0c             	add    esp,0xc
c002985b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002985c <AVX::~AVX()>:
c002985c:	83 ec 0c             	sub    esp,0xc
c002985f:	ba 5c da 02 c0       	mov    edx,0xc002da5c
c0029864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029868:	89 10                	mov    DWORD PTR [eax],edx
c002986a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002986e:	83 ec 0c             	sub    esp,0xc
c0029871:	50                   	push   eax
c0029872:	e8 31 af fe ff       	call   c00147a8 <FPU::~FPU()>
c0029877:	83 c4 10             	add    esp,0x10
c002987a:	90                   	nop
c002987b:	83 c4 0c             	add    esp,0xc
c002987e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029880 <AVX::~AVX()>:
c0029880:	83 ec 0c             	sub    esp,0xc
c0029883:	83 ec 0c             	sub    esp,0xc
c0029886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002988a:	e8 cd ff ff ff       	call   c002985c <AVX::~AVX()>
c002988f:	83 c4 10             	add    esp,0x10
c0029892:	83 ec 08             	sub    esp,0x8
c0029895:	68 58 01 00 00       	push   0x158
c002989a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002989e:	e8 be 94 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c00298a3:	83 c4 10             	add    esp,0x10
c00298a6:	83 c4 0c             	add    esp,0xc
c00298a9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00298aa <MMX::~MMX()>:
c00298aa:	83 ec 0c             	sub    esp,0xc
c00298ad:	ba 9c da 02 c0       	mov    edx,0xc002da9c
c00298b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298b6:	89 10                	mov    DWORD PTR [eax],edx
c00298b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298bc:	83 ec 0c             	sub    esp,0xc
c00298bf:	50                   	push   eax
c00298c0:	e8 e3 ae fe ff       	call   c00147a8 <FPU::~FPU()>
c00298c5:	83 c4 10             	add    esp,0x10
c00298c8:	90                   	nop
c00298c9:	83 c4 0c             	add    esp,0xc
c00298cc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00298ce <MMX::~MMX()>:
c00298ce:	83 ec 0c             	sub    esp,0xc
c00298d1:	83 ec 0c             	sub    esp,0xc
c00298d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298d8:	e8 cd ff ff ff       	call   c00298aa <MMX::~MMX()>
c00298dd:	83 c4 10             	add    esp,0x10
c00298e0:	83 ec 08             	sub    esp,0x8
c00298e3:	68 58 01 00 00       	push   0x158
c00298e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ec:	e8 70 94 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c00298f1:	83 c4 10             	add    esp,0x10
c00298f4:	83 c4 0c             	add    esp,0xc
c00298f7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00298f8 <SSE::~SSE()>:
c00298f8:	83 ec 0c             	sub    esp,0xc
c00298fb:	ba dc da 02 c0       	mov    edx,0xc002dadc
c0029900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029904:	89 10                	mov    DWORD PTR [eax],edx
c0029906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002990a:	83 ec 0c             	sub    esp,0xc
c002990d:	50                   	push   eax
c002990e:	e8 95 ae fe ff       	call   c00147a8 <FPU::~FPU()>
c0029913:	83 c4 10             	add    esp,0x10
c0029916:	90                   	nop
c0029917:	83 c4 0c             	add    esp,0xc
c002991a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002991c <SSE::~SSE()>:
c002991c:	83 ec 0c             	sub    esp,0xc
c002991f:	83 ec 0c             	sub    esp,0xc
c0029922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029926:	e8 cd ff ff ff       	call   c00298f8 <SSE::~SSE()>
c002992b:	83 c4 10             	add    esp,0x10
c002992e:	83 ec 08             	sub    esp,0x8
c0029931:	68 58 01 00 00       	push   0x158
c0029936:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002993a:	e8 22 94 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c002993f:	83 c4 10             	add    esp,0x10
c0029942:	83 c4 0c             	add    esp,0xc
c0029945:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029946 <x87::~x87()>:
c0029946:	83 ec 0c             	sub    esp,0xc
c0029949:	ba 1c db 02 c0       	mov    edx,0xc002db1c
c002994e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029952:	89 10                	mov    DWORD PTR [eax],edx
c0029954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029958:	83 ec 0c             	sub    esp,0xc
c002995b:	50                   	push   eax
c002995c:	e8 47 ae fe ff       	call   c00147a8 <FPU::~FPU()>
c0029961:	83 c4 10             	add    esp,0x10
c0029964:	90                   	nop
c0029965:	83 c4 0c             	add    esp,0xc
c0029968:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002996a <x87::~x87()>:
c002996a:	83 ec 0c             	sub    esp,0xc
c002996d:	83 ec 0c             	sub    esp,0xc
c0029970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029974:	e8 cd ff ff ff       	call   c0029946 <x87::~x87()>
c0029979:	83 c4 10             	add    esp,0x10
c002997c:	83 ec 08             	sub    esp,0x8
c002997f:	68 58 01 00 00       	push   0x158
c0029984:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029988:	e8 d4 93 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c002998d:	83 c4 10             	add    esp,0x10
c0029990:	83 c4 0c             	add    esp,0xc
c0029993:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029994 <IOAPIC::~IOAPIC()>:
c0029994:	83 ec 0c             	sub    esp,0xc
c0029997:	ba 74 dc 02 c0       	mov    edx,0xc002dc74
c002999c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299a0:	89 10                	mov    DWORD PTR [eax],edx
c00299a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299a6:	83 ec 0c             	sub    esp,0xc
c00299a9:	50                   	push   eax
c00299aa:	e8 99 a7 fe ff       	call   c0014148 <Device::~Device()>
c00299af:	83 c4 10             	add    esp,0x10
c00299b2:	90                   	nop
c00299b3:	83 c4 0c             	add    esp,0xc
c00299b6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00299b8 <IOAPIC::~IOAPIC()>:
c00299b8:	83 ec 0c             	sub    esp,0xc
c00299bb:	83 ec 0c             	sub    esp,0xc
c00299be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299c2:	e8 cd ff ff ff       	call   c0029994 <IOAPIC::~IOAPIC()>
c00299c7:	83 c4 10             	add    esp,0x10
c00299ca:	83 ec 08             	sub    esp,0x8
c00299cd:	68 68 01 00 00       	push   0x168
c00299d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d6:	e8 86 93 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c00299db:	83 c4 10             	add    esp,0x10
c00299de:	83 c4 0c             	add    esp,0xc
c00299e1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00299e2 <APIC::~APIC()>:
c00299e2:	83 ec 0c             	sub    esp,0xc
c00299e5:	ba 2c dc 02 c0       	mov    edx,0xc002dc2c
c00299ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ee:	89 10                	mov    DWORD PTR [eax],edx
c00299f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299f4:	83 ec 0c             	sub    esp,0xc
c00299f7:	50                   	push   eax
c00299f8:	e8 75 b2 fe ff       	call   c0014c72 <InterruptController::~InterruptController()>
c00299fd:	83 c4 10             	add    esp,0x10
c0029a00:	90                   	nop
c0029a01:	83 c4 0c             	add    esp,0xc
c0029a04:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029a06 <APIC::~APIC()>:
c0029a06:	83 ec 0c             	sub    esp,0xc
c0029a09:	83 ec 0c             	sub    esp,0xc
c0029a0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a10:	e8 cd ff ff ff       	call   c00299e2 <APIC::~APIC()>
c0029a15:	83 c4 10             	add    esp,0x10
c0029a18:	83 ec 08             	sub    esp,0x8
c0029a1b:	68 58 21 00 00       	push   0x2158
c0029a20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a24:	e8 38 93 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0029a29:	83 c4 10             	add    esp,0x10
c0029a2c:	83 c4 0c             	add    esp,0xc
c0029a2f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029a30 <PIC::~PIC()>:
c0029a30:	83 ec 0c             	sub    esp,0xc
c0029a33:	ba c4 dc 02 c0       	mov    edx,0xc002dcc4
c0029a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a3c:	89 10                	mov    DWORD PTR [eax],edx
c0029a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a42:	83 ec 0c             	sub    esp,0xc
c0029a45:	50                   	push   eax
c0029a46:	e8 27 b2 fe ff       	call   c0014c72 <InterruptController::~InterruptController()>
c0029a4b:	83 c4 10             	add    esp,0x10
c0029a4e:	90                   	nop
c0029a4f:	83 c4 0c             	add    esp,0xc
c0029a52:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a54 <PIC::~PIC()>:
c0029a54:	83 ec 0c             	sub    esp,0xc
c0029a57:	83 ec 0c             	sub    esp,0xc
c0029a5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a5e:	e8 cd ff ff ff       	call   c0029a30 <PIC::~PIC()>
c0029a63:	83 c4 10             	add    esp,0x10
c0029a66:	83 ec 08             	sub    esp,0x8
c0029a69:	68 58 21 00 00       	push   0x2158
c0029a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a72:	e8 ea 92 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0029a77:	83 c4 10             	add    esp,0x10
c0029a7a:	83 c4 0c             	add    esp,0xc
c0029a7d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a7e <APICTimer::~APICTimer()>:
c0029a7e:	83 ec 0c             	sub    esp,0xc
c0029a81:	ba 18 dd 02 c0       	mov    edx,0xc002dd18
c0029a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a8a:	89 10                	mov    DWORD PTR [eax],edx
c0029a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a90:	83 ec 0c             	sub    esp,0xc
c0029a93:	50                   	push   eax
c0029a94:	e8 8f d2 fe ff       	call   c0016d28 <Timer::~Timer()>
c0029a99:	83 c4 10             	add    esp,0x10
c0029a9c:	90                   	nop
c0029a9d:	83 c4 0c             	add    esp,0xc
c0029aa0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029aa2 <APICTimer::~APICTimer()>:
c0029aa2:	83 ec 0c             	sub    esp,0xc
c0029aa5:	83 ec 0c             	sub    esp,0xc
c0029aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aac:	e8 cd ff ff ff       	call   c0029a7e <APICTimer::~APICTimer()>
c0029ab1:	83 c4 10             	add    esp,0x10
c0029ab4:	83 ec 08             	sub    esp,0x8
c0029ab7:	68 60 01 00 00       	push   0x160
c0029abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ac0:	e8 9c 92 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0029ac5:	83 c4 10             	add    esp,0x10
c0029ac8:	83 c4 0c             	add    esp,0xc
c0029acb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029acc <PIT::~PIT()>:
c0029acc:	83 ec 0c             	sub    esp,0xc
c0029acf:	ba 68 dd 02 c0       	mov    edx,0xc002dd68
c0029ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ad8:	89 10                	mov    DWORD PTR [eax],edx
c0029ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ade:	83 ec 0c             	sub    esp,0xc
c0029ae1:	50                   	push   eax
c0029ae2:	e8 41 d2 fe ff       	call   c0016d28 <Timer::~Timer()>
c0029ae7:	83 c4 10             	add    esp,0x10
c0029aea:	90                   	nop
c0029aeb:	83 c4 0c             	add    esp,0xc
c0029aee:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029af0 <PIT::~PIT()>:
c0029af0:	83 ec 0c             	sub    esp,0xc
c0029af3:	83 ec 0c             	sub    esp,0xc
c0029af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029afa:	e8 cd ff ff ff       	call   c0029acc <PIT::~PIT()>
c0029aff:	83 c4 10             	add    esp,0x10
c0029b02:	83 ec 08             	sub    esp,0x8
c0029b05:	68 5c 01 00 00       	push   0x15c
c0029b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b0e:	e8 4e 92 fe ff       	call   c0012d61 <operator delete(void*, unsigned long)>
c0029b13:	83 c4 10             	add    esp,0x10
c0029b16:	83 c4 0c             	add    esp,0xc
c0029b19:	c3                   	ret    
