
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 a8 f9 00 00       	call   c000f9c8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 8f 02 00       	call   c0028f98 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 2e 9c 02 c0       	mov    ebx,0xc0029c2e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 3c 9c 02 c0    	cmp    ebx,0xc0029c3c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 e7 02 c0       	mov    eax,0xc002e7f8
c0000049:	3d f8 e7 02 c0       	cmp    eax,0xc002e7f8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 e7 02 c0       	push   0xc002e7f8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 e7 02 c0       	mov    eax,0xc002e7f8
c0000075:	2d f8 e7 02 c0       	sub    eax,0xc002e7f8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 e7 02 c0       	push   0xc002e7f8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee28,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 44 9c 02 c0       	mov    ebx,0xc0029c44
c00000bb:	81 eb 40 9c 02 c0    	sub    ebx,0xc0029c40
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 40 9c 02 c0       	mov    esi,0xc0029c40
c00000ca:	a1 2c ee 02 c0       	mov    eax,ds:0xc002ee2c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c ee 02 c0       	mov    ds:0xc002ee2c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c ee 02 c0       	mov    eax,ds:0xc002ee2c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 e7 02 c0       	push   0xc002e7f8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee28,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 ee 02 c0       	push   0xc002ee30
c000012c:	68 f8 e7 02 c0       	push   0xc002e7f8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 c1 d6 01 00       	call   c001da64 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 08 24 01 00       	call   c00127c3 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 9f d6 01 00       	call   c001da64 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 47 db 01 00       	call   c001df2b <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 a5 e1 01 00       	call   c001e592 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 f2 02 c0 	lgdtd  ds:0xc002f270
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 19 41 01 00       	call   c00146fb <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 48 ee 02 c0       	mov    ds:0xc002ee48,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 48 ee 02 c0    	mov    DWORD PTR ds:0xc002ee48,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 9c 02 c0 02 	test   BYTE PTR [edx-0x3ffd63a0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 9c 02 c0 01 	test   BYTE PTR [edx-0x3ffd63a0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 9c 02 c0 08 	test   BYTE PTR [edx-0x3ffd63a0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 9c 02 c0 04 	test   BYTE PTR [ebx-0x3ffd63a0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 9c 02 c0 01 	test   BYTE PTR [edx-0x3ffd63a0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 60 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee60
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 60 ee 02 c0    	mov    DWORD PTR ds:0xc002ee60,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 64 ee 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd119c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 64 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd119c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 60 ee 02 c0    	mov    DWORD PTR ds:0xc002ee60,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 8c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee8c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 9c ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee9c
c0000e38:	c7 42 0c 94 ee 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ee94
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 9c ee 02 c0    	mov    DWORD PTR ds:0xc002ee9c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 8c ee 02 c0    	mov    DWORD PTR ds:0xc002ee8c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 60 ee 02 c0 02 	test   BYTE PTR ds:0xc002ee60,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 60 ee 02 c0       	mov    eax,0xc002ee60
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 45 e8 00 00       	call   c000f75e <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 87 e7 00 00       	call   c000f75e <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 71 e7 00 00       	call   c000f75e <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 4d e7 00 00       	call   c000f75e <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 60 ee 02 c0    	mov    edi,DWORD PTR ds:0xc002ee60
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 60 ee 02 c0       	mov    eax,0xc002ee60
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 64 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd119c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 64 ee 02 c0 	mov    DWORD PTR [edx*4-0x3ffd119c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 94 ee 02 c0 	lea    edx,[eax*8-0x3ffd116c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 60 ee 02 c0       	mov    eax,0xc002ee60
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d a0 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eea0
c00011ba:	81 fb 94 ee 02 c0    	cmp    ebx,0xc002ee94
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 94 ee 02 c0       	cmp    eax,0xc002ee94
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 90 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee90,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 9c ee 02 c0       	mov    ds:0xc002ee9c,eax
c00011f6:	a3 a0 ee 02 c0       	mov    ds:0xc002eea0,eax
c00011fb:	a3 90 ee 02 c0       	mov    ds:0xc002ee90,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 94 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ee94
c0001209:	c7 40 0c 94 ee 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ee94
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 a0 ee 02 c0       	mov    ds:0xc002eea0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 94 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ee94
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 58 ee 02 c0 	lea    ebp,[edx*4-0x3ffd11a8]
c000125a:	8b 14 95 60 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd11a0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 60 ee 02 c0 	lea    ecx,[edx*4-0x3ffd11a0]
c0001275:	8b 14 95 60 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd11a0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 94 f1 02 c0 	or     DWORD PTR [edi*4-0x3ffd0e6c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 94 ee 02 c0 	lea    eax,[eax*8-0x3ffd116c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 9c ee 02 c0    	mov    DWORD PTR ds:0xc002ee9c,ecx
c000132f:	89 0d a0 ee 02 c0    	mov    DWORD PTR ds:0xc002eea0,ecx
c0001335:	c7 41 08 94 ee 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ee94
c000133c:	c7 41 0c 94 ee 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ee94
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 8c ee 02 c0 	lea    edx,[ecx*8-0x3ffd1174]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 94 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e6c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 94 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e6c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 8c ee 02 c0 	lea    edx,[eax*4-0x3ffd1174]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 94 f1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0e6c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 9c ee 02 c0    	mov    DWORD PTR ds:0xc002ee9c,edi
c0001402:	89 3d a0 ee 02 c0    	mov    DWORD PTR ds:0xc002eea0,edi
c0001408:	c7 47 08 94 ee 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ee94
c000140f:	c7 47 0c 94 ee 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ee94
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 90 ee 02 c0    	mov    DWORD PTR ds:0xc002ee90,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 8c ee 02 c0       	mov    eax,ds:0xc002ee8c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 8c ee 02 c0    	mov    DWORD PTR ds:0xc002ee8c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 60 ee 02 c0       	mov    edx,0xc002ee60
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 60 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee60,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 60 ee 02 c0       	mov    eax,0xc002ee60
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d b4 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f1b4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 b4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1b4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d b4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1b4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 8c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee8c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 8c ee 02 c0    	mov    DWORD PTR ds:0xc002ee8c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 60 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee60,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 60 ee 02 c0       	mov    eax,0xc002ee60
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 bc f1 02 c0    	push   DWORD PTR ds:0xc002f1bc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 60 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee60,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 60 ee 02 c0       	mov    eax,0xc002ee60
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 bc f1 02 c0       	mov    eax,ds:0xc002f1bc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 60 ee 02 c0       	mov    eax,0xc002ee60
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 8c ee 02 c0 00 	cmp    DWORD PTR ds:0xc002ee8c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 60 ee 02 c0       	mov    eax,0xc002ee60
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 8c ee 02 c0       	mov    eax,ds:0xc002ee8c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 64 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd119c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 94 ee 02 c0       	mov    eax,0xc002ee94
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 8c f1 02 c0       	cmp    eax,0xc002f18c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 c8 f1 02 c0       	mov    eax,ds:0xc002f1c8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 b0 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1b0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 c4 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1c4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 d4 f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f1d4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 60 ee 02 c0       	mov    eax,0xc002ee60
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 9d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd629c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 60 ee 02 c0       	mov    eax,ds:0xc002ee60
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 60 ee 02 c0       	mov    ds:0xc002ee60,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d a4 f1 02 c0    	mov    DWORD PTR ds:0xc002f1a4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d a8 f1 02 c0    	mov    DWORD PTR ds:0xc002f1a8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ac f1 02 c0    	mov    DWORD PTR ds:0xc002f1ac,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 b4 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1b4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 20 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd6e0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 f0 f4 01 00       	jmp    c00210e2 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 20 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd6e0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 21 f5 01 00       	jmp    c0021129 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 20 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd6e0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 49 f5 01 00       	jmp    c0021170 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ea 53 02 00       	call   c00272f4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 9e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6180]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 9e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6180]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 9d 02 c0       	mov    edx,0xc0029d80
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 9e 02 c0       	mov    edx,0xc0029ea0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 58 d3 02 c0       	mov    edx,0xc002d358
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac 9e 02 c0       	mov    edx,0xc0029eac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 9e 02 c0       	mov    edx,0xc0029e90
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 00 f2 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0e00]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 e0 f1 02 c0    	mov    ax,ds:0xc002f1e0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 e0 f1 02 c0    	mov    ds:0xc002f1e0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 e7 41 02 00       	call   c00272f4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 9e 02 c0       	mov    eax,0xc0029eb2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 9e 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6200]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb 9e 02 c0       	mov    eax,0xc0029ebb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 9e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6180]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 b2 2b 02 00       	call   c00272f4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 9e 02 c0       	mov    edx,0xc0029e90
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 9d 02 c0       	mov    edx,0xc0029d80
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 9d 02 c0       	mov    edx,0xc0029d90
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 00 f2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0e00]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 00 f2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0e00],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 79 15 02 00       	call   c00272f4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 5f 15 02 00       	call   c00272f4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 9d 02 c0       	mov    eax,0xc0029dd7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 9d 02 c0       	mov    eax,0xc0029dd0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 00 f2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0e00]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 9d 02 c0       	mov    esi,0xc0029dc0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 a2 fc 01 00       	call   c00272f4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 9e 02 c0       	mov    edx,0xc0029ea0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 9d 02 c0       	mov    edx,0xc0029da0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 9d 02 c0       	mov    edx,0xc0029db0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 9e 02 c0       	mov    edx,0xc0029ec2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce 9e 02 c0       	mov    edx,0xc0029ece
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 9e 02 c0       	mov    edx,0xc0029ee2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 99 74 00 00       	call   c000f902 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 93 74 00 00       	call   c000f912 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 a2 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a200
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a200
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 9f 02 c0       	mov    eax,0xc0029f40
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 9f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6100]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 d8 71 00 00       	call   c000f912 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 c2 71 00 00       	call   c000f912 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 f6 05 02 00       	call   c0028dc7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 b9 05 02 00       	call   c0028da9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 8d 05 02 00       	call   c0028dc7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 40 fc 01 00       	call   c00284cc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 c2 06 02 00       	call   c0028f60 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 07 05 02 00       	call   c0028dc7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 49 04 02 00       	call   c0028dc7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 16 04 02 00       	call   c0028da9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 03 03 02 00       	call   c0028dc7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 cb 02 02 00       	call   c0028da9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 a1 6d 00 00       	call   c000f932 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 3c 6d 00 00       	call   c000f912 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 a3 02 c0       	mov    eax,0xc002a300
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 d7 00 02 00       	call   c0028dc7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 9c 00 02 00       	call   c0028da9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 ac fd 01 00       	call   c0028b5b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 2a f7 01 00       	call   c00284f8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 e6 ff 01 00       	call   c0028dcb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 d4 00 02 00       	call   c0028eef <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 be f6 01 00       	call   c00284f8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 69 ff 01 00       	call   c0028dc5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 4a ff 01 00       	call   c0028dc9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 e0 00 02 00       	call   c0028f80 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 8a fc 01 00       	call   c0028b5b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 08 f6 01 00       	call   c00284f8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 c4 fe 01 00       	call   c0028dcb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 b2 ff 01 00       	call   c0028eef <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 9c f5 01 00       	call   c00284f8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 47 fe 01 00       	call   c0028dc5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 27 fe 01 00       	call   c0028dc9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 bc ff 01 00       	call   c0028f80 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 62 fd 01 00       	call   c0028dc7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 20 fd 01 00       	call   c0028da9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 08 fd 01 00       	call   c0028dc7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 7a fa 01 00       	call   c0028b5b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 7c ed 01 00       	call   c0027e7b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 df f3 01 00       	call   c00284f8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 31 fa 01 00       	call   c0028b5b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 37 ed 01 00       	call   c0027e7b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 06 fa 01 00       	call   c0028b5b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 56 fc 01 00       	call   c0028dc5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 33 f3 01 00       	call   c00284cc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 b5 fd 01 00       	call   c0028f60 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 dc fb 01 00       	call   c0028da9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 d7 f2 01 00       	call   c00284cc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 55 f9 01 00       	call   c0028b5b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 d8 f2 01 00       	call   c00284f8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 2a f9 01 00       	call   c0028b5b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 91 f5 01 00       	call   c00287dc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 10 ec 01 00       	call   c0027e7b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 70 e5 01 00       	call   c0027810 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 47 fc 01 00       	call   c0028eef <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 30 f2 01 00       	call   c00284f8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 17 fc 01 00       	call   c0028eef <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 89 eb 01 00       	call   c0027e7b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 c2 fa 01 00       	call   c0028dcb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 aa f4 01 00       	call   c00287dc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 30 eb 01 00       	call   c0027e7b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 1e fc 01 00       	call   c0028f80 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 f0 f7 01 00       	call   c0028b5b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 47 f1 01 00       	call   c00284cc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 26 fa 01 00       	call   c0028dc7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 bf ea 01 00       	call   c0027e7b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 eb f0 01 00       	call   c00284cc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 8d fb 01 00       	call   c0028f80 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 3e f7 01 00       	call   c0028b5b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 bb f0 01 00       	call   c00284f8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 0e f7 01 00       	call   c0028b5b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 14 ea 01 00       	call   c0027e7b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 e4 f6 01 00       	call   c0028b5b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 36 f9 01 00       	call   c0028dc7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 0d f0 01 00       	call   c00284cc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 8f fa 01 00       	call   c0028f60 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 b6 f8 01 00       	call   c0028da9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 b0 ef 01 00       	call   c00284cc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 2e f6 01 00       	call   c0028b5b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 b1 ef 01 00       	call   c00284f8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 03 f6 01 00       	call   c0028b5b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 6a f2 01 00       	call   c00287dc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 e9 e8 01 00       	call   c0027e7b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 39 e2 01 00       	call   c0027810 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 10 f9 01 00       	call   c0028eef <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 f9 ee 01 00       	call   c00284f8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 e0 f8 01 00       	call   c0028eef <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 52 e8 01 00       	call   c0027e7b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 8b f7 01 00       	call   c0028dcb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 72 f1 01 00       	call   c00287dc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 f1 e7 01 00       	call   c0027e7b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 df f8 01 00       	call   c0028f80 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 b1 f4 01 00       	call   c0028b5b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 08 ee 01 00       	call   c00284cc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 e7 f6 01 00       	call   c0028dc7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 80 e7 01 00       	call   c0027e7b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 ac ed 01 00       	call   c00284cc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 21 f4 01 00       	call   c0028b5b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 27 e7 01 00       	call   c0027e7b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 a7 02 c0       	mov    eax,0xc002a7c0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 a7 02 c0       	mov    eax,0xc002a7d4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 d5 60 00 00       	call   c000f912 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 d7 60 00 00       	call   c000f932 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 9c f2 01 00       	call   c0028b5b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 1a ec 01 00       	call   c00284f8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 ac de 01 00       	call   c0027810 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 83 f5 01 00       	call   c0028eef <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 6c eb 01 00       	call   c00284f8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 4f f5 01 00       	call   c0028eef <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 c1 e4 01 00       	call   c0027e7b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 21 f5 01 00       	call   c0028eef <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 10 eb 01 00       	call   c00284f8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 79 e4 01 00       	call   c0027e7b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 9a dd 01 00       	call   c0027810 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 71 f4 01 00       	call   c0028eef <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 5a ea 01 00       	call   c00284f8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 3d f4 01 00       	call   c0028eef <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 af e3 01 00       	call   c0027e7b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 0f f4 01 00       	call   c0028eef <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 fe e9 01 00       	call   c00284f8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 67 e3 01 00       	call   c0027e7b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 45 e3 01 00       	call   c0027e7b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 21 dc 01 00       	call   c0027810 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 f8 f2 01 00       	call   c0028eef <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 e1 e8 01 00       	call   c00284f8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 c4 f2 01 00       	call   c0028eef <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 36 e2 01 00       	call   c0027e7b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 96 f2 01 00       	call   c0028eef <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 7f e8 01 00       	call   c00284f8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 e8 e1 01 00       	call   c0027e7b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 48 f2 01 00       	call   c0028eef <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 31 e8 01 00       	call   c00284f8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 9a e1 01 00       	call   c0027e7b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 af da 01 00       	call   c0027810 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 86 f1 01 00       	call   c0028eef <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 6f e7 01 00       	call   c00284f8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 56 f1 01 00       	call   c0028eef <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 c8 e0 01 00       	call   c0027e7b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 28 f1 01 00       	call   c0028eef <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 11 e7 01 00       	call   c00284f8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 7a e0 01 00       	call   c0027e7b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 da f0 01 00       	call   c0028eef <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 c3 e6 01 00       	call   c00284f8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 2c e0 01 00       	call   c0027e7b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 00 e0 01 00       	call   c0027e7b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 5d e6 01 00       	call   c00284f8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 19 ef 01 00       	call   c0028dcb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 a8 df 01 00       	call   c0027e7b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 05 e6 01 00       	call   c00284f8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 c1 ee 01 00       	call   c0028dcb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 3b d8 01 00       	call   c0027810 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 12 ef 01 00       	call   c0028eef <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 fb e4 01 00       	call   c00284f8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 de ee 01 00       	call   c0028eef <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 50 de 01 00       	call   c0027e7b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 b0 ee 01 00       	call   c0028eef <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 99 e4 01 00       	call   c00284f8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 02 de 01 00       	call   c0027e7b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 62 ee 01 00       	call   c0028eef <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 4b e4 01 00       	call   c00284f8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 b4 dd 01 00       	call   c0027e7b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 14 ee 01 00       	call   c0028eef <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 fd e3 01 00       	call   c00284f8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 66 dd 01 00       	call   c0027e7b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 c6 ed 01 00       	call   c0028eef <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 af e3 01 00       	call   c00284f8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 18 dd 01 00       	call   c0027e7b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 1a d6 01 00       	call   c0027810 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 f1 ec 01 00       	call   c0028eef <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 da e2 01 00       	call   c00284f8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 c1 ec 01 00       	call   c0028eef <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 33 dc 01 00       	call   c0027e7b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 93 ec 01 00       	call   c0028eef <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 7c e2 01 00       	call   c00284f8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 e5 db 01 00       	call   c0027e7b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 45 ec 01 00       	call   c0028eef <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 2e e2 01 00       	call   c00284f8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 97 db 01 00       	call   c0027e7b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 f7 eb 01 00       	call   c0028eef <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 e0 e1 01 00       	call   c00284f8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 49 db 01 00       	call   c0027e7b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 a9 eb 01 00       	call   c0028eef <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 92 e1 01 00       	call   c00284f8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 fb da 01 00       	call   c0027e7b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 cf da 01 00       	call   c0027e7b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 2c e1 01 00       	call   c00284f8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 e8 e9 01 00       	call   c0028dcb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 77 da 01 00       	call   c0027e7b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 d4 e0 01 00       	call   c00284f8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 90 e9 01 00       	call   c0028dcb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 1e da 01 00       	call   c0027e7b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 7b e0 01 00       	call   c00284f8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 37 e9 01 00       	call   c0028dcb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 c5 d9 01 00       	call   c0027e7b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 22 e0 01 00       	call   c00284f8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 de e8 01 00       	call   c0028dcb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 3c d2 01 00       	call   c0027810 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 13 e9 01 00       	call   c0028eef <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 fc de 01 00       	call   c00284f8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 df e8 01 00       	call   c0028eef <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 51 d8 01 00       	call   c0027e7b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 b1 e8 01 00       	call   c0028eef <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 9a de 01 00       	call   c00284f8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 03 d8 01 00       	call   c0027e7b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 63 e8 01 00       	call   c0028eef <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 4c de 01 00       	call   c00284f8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 b5 d7 01 00       	call   c0027e7b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 15 e8 01 00       	call   c0028eef <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 fe dd 01 00       	call   c00284f8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 67 d7 01 00       	call   c0027e7b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 c7 e7 01 00       	call   c0028eef <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 b0 dd 01 00       	call   c00284f8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 19 d7 01 00       	call   c0027e7b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 79 e7 01 00       	call   c0028eef <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 62 dd 01 00       	call   c00284f8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 c8 d6 01 00       	call   c0027e7b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 28 e7 01 00       	call   c0028eef <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 11 dd 01 00       	call   c00284f8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 7a d6 01 00       	call   c0027e7b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 74 cf 01 00       	call   c0027810 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 4b e6 01 00       	call   c0028eef <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 34 dc 01 00       	call   c00284f8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 14 e6 01 00       	call   c0028eef <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 86 d5 01 00       	call   c0027e7b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 e6 e5 01 00       	call   c0028eef <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 cf db 01 00       	call   c00284f8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 38 d5 01 00       	call   c0027e7b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 98 e5 01 00       	call   c0028eef <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 81 db 01 00       	call   c00284f8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 ea d4 01 00       	call   c0027e7b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 4a e5 01 00       	call   c0028eef <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 33 db 01 00       	call   c00284f8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 9c d4 01 00       	call   c0027e7b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 fc e4 01 00       	call   c0028eef <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 e5 da 01 00       	call   c00284f8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 4e d4 01 00       	call   c0027e7b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ae e4 01 00       	call   c0028eef <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 97 da 01 00       	call   c00284f8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 fd d3 01 00       	call   c0027e7b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 5d e4 01 00       	call   c0028eef <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 46 da 01 00       	call   c00284f8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 b5 d3 01 00       	call   c0027e7b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 8e d3 01 00       	call   c0027e7b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 ec d9 01 00       	call   c00284f8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 a8 e2 01 00       	call   c0028dcb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 37 d3 01 00       	call   c0027e7b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 95 d9 01 00       	call   c00284f8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 51 e2 01 00       	call   c0028dcb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 df d2 01 00       	call   c0027e7b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 3d d9 01 00       	call   c00284f8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 f9 e1 01 00       	call   c0028dcb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 87 d2 01 00       	call   c0027e7b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 e5 d8 01 00       	call   c00284f8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 a1 e1 01 00       	call   c0028dcb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 2f d2 01 00       	call   c0027e7b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 8d d8 01 00       	call   c00284f8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 49 e1 01 00       	call   c0028dcb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 dd d1 01 00       	call   c0027e7b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 3b d8 01 00       	call   c00284f8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 f7 e0 01 00       	call   c0028dcb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 0b ca 01 00       	call   c0027810 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 e2 e0 01 00       	call   c0028eef <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 cb d6 01 00       	call   c00284f8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 b2 e0 01 00       	call   c0028eef <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 24 d0 01 00       	call   c0027e7b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd57fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 58 e0 01 00       	call   c0028eef <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 41 d6 01 00       	call   c00284f8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 ac cf 01 00       	call   c0027e7b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 f9 df 01 00       	call   c0028eef <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 e2 d5 01 00       	call   c00284f8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 4d cf 01 00       	call   c0027e7b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 9a df 01 00       	call   c0028eef <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 83 d5 01 00       	call   c00284f8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 ee ce 01 00       	call   c0027e7b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 3b df 01 00       	call   c0028eef <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 24 d5 01 00       	call   c00284f8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 8f ce 01 00       	call   c0027e7b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 dc de 01 00       	call   c0028eef <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 c5 d4 01 00       	call   c00284f8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 30 ce 01 00       	call   c0027e7b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 7d de 01 00       	call   c0028eef <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 66 d4 01 00       	call   c00284f8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 d1 cd 01 00       	call   c0027e7b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 1e de 01 00       	call   c0028eef <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 07 d4 01 00       	call   c00284f8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 72 cd 01 00       	call   c0027e7b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 bf dd 01 00       	call   c0028eef <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 a8 d3 01 00       	call   c00284f8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 13 cd 01 00       	call   c0027e7b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 1d c6 01 00       	call   c0027810 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 f4 dc 01 00       	call   c0028eef <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 dd d2 01 00       	call   c00284f8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 c4 dc 01 00       	call   c0028eef <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 36 cc 01 00       	call   c0027e7b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd57e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 69 dc 01 00       	call   c0028eef <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 52 d2 01 00       	call   c00284f8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 bd cb 01 00       	call   c0027e7b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 09 dc 01 00       	call   c0028eef <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 f2 d1 01 00       	call   c00284f8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 5d cb 01 00       	call   c0027e7b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 a9 db 01 00       	call   c0028eef <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 92 d1 01 00       	call   c00284f8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 fd ca 01 00       	call   c0027e7b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 49 db 01 00       	call   c0028eef <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 32 d1 01 00       	call   c00284f8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 9d ca 01 00       	call   c0027e7b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 e9 da 01 00       	call   c0028eef <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 d2 d0 01 00       	call   c00284f8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 3d ca 01 00       	call   c0027e7b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 89 da 01 00       	call   c0028eef <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 72 d0 01 00       	call   c00284f8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 dd c9 01 00       	call   c0027e7b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 29 da 01 00       	call   c0028eef <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 12 d0 01 00       	call   c00284f8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 7d c9 01 00       	call   c0027e7b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 c9 d9 01 00       	call   c0028eef <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 b2 cf 01 00       	call   c00284f8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 1d c9 01 00       	call   c0027e7b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c a8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd57c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 c2 c8 01 00       	call   c0027e7b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 1f cf 01 00       	call   c00284f8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 db d7 01 00       	call   c0028dcb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 65 c8 01 00       	call   c0027e7b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 c2 ce 01 00       	call   c00284f8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 7e d7 01 00       	call   c0028dcb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 08 c8 01 00       	call   c0027e7b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 65 ce 01 00       	call   c00284f8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 21 d7 01 00       	call   c0028dcb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 ab c7 01 00       	call   c0027e7b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 08 ce 01 00       	call   c00284f8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 c4 d6 01 00       	call   c0028dcb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 4e c7 01 00       	call   c0027e7b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 ab cd 01 00       	call   c00284f8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 67 d6 01 00       	call   c0028dcb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 f1 c6 01 00       	call   c0027e7b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 4e cd 01 00       	call   c00284f8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 0a d6 01 00       	call   c0028dcb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 94 c6 01 00       	call   c0027e7b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 f1 cc 01 00       	call   c00284f8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 ad d5 01 00       	call   c0028dcb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 37 c6 01 00       	call   c0027e7b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 94 cc 01 00       	call   c00284f8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 50 d5 01 00       	call   c0028dcb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 4c cc 01 00       	call   c00284f8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 c4 d6 01 00       	jmp    c0028f80 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 2e d3 01 00       	call   c0028dc7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 ec d2 01 00       	call   c0028da9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 83 d0 01 00       	call   c0028b5b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 84 c3 01 00       	call   c0027e7b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 53 d0 01 00       	call   c0028b5b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ba cc 01 00       	call   c00287dc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 59 d2 01 00       	call   c0028da9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 5c d2 01 00       	call   c0028dc7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 2f d2 01 00       	call   c0028dc7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 28 cc 01 00       	call   c00287dc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 b2 d3 01 00       	call   c0028f80 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 8d d3 01 00       	call   c0028f80 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 5f cf 01 00       	call   c0028b5b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 b6 c8 01 00       	call   c00284cc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 95 d1 01 00       	call   c0028dc7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 2e c2 01 00       	call   c0027e7b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 52 c8 01 00       	call   c00284cc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 f4 d2 01 00       	call   c0028f80 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 2c cb 01 00       	call   c00287dc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 a9 c1 01 00       	call   c0027e7b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 d5 cd 01 00       	call   c0028b5b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 d5 c0 01 00       	call   c0027e7b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 b5 c0 01 00       	call   c0027e7b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 85 cd 01 00       	call   c0028b5b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 d5 cf 01 00       	call   c0028dc5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 b4 c6 01 00       	call   c00284cc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 36 d1 01 00       	call   c0028f60 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 5d cf 01 00       	call   c0028da9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 5b c6 01 00       	call   c00284cc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 d9 cc 01 00       	call   c0028b5b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 5c c6 01 00       	call   c00284f8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ae cc 01 00       	call   c0028b5b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 15 c9 01 00       	call   c00287dc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 94 bf 01 00       	call   c0027e7b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 5e cc 01 00       	call   c0028b5b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 aa ce 01 00       	call   c0028dc7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 9f c5 01 00       	call   c00284f8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 71 c5 01 00       	call   c00284f8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 aa cb 01 00       	call   c0028b5b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 0e c8 01 00       	call   c00287dc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 d6 c7 01 00       	call   c00287dc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 55 be 01 00       	call   c0027e7b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 42 cf 01 00       	call   c0028f80 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 14 cb 01 00       	call   c0028b5b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 6b c4 01 00       	call   c00284cc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 4a cd 01 00       	call   c0028dc7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 e2 bd 01 00       	call   c0027e7b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 06 c4 01 00       	call   c00284cc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 a8 ce 01 00       	call   c0028f80 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 69 cc 01 00       	call   c0028dc7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 27 cc 01 00       	call   c0028da9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 be c9 01 00       	call   c0028b5b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 bf bc 01 00       	call   c0027e7b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 8e c9 01 00       	call   c0028b5b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 f5 c5 01 00       	call   c00287dc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 94 cb 01 00       	call   c0028da9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 97 cb 01 00       	call   c0028dc7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 6a cb 01 00       	call   c0028dc7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 63 c5 01 00       	call   c00287dc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 ed cc 01 00       	call   c0028f80 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 c8 cc 01 00       	call   c0028f80 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 9a c8 01 00       	call   c0028b5b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 f1 c1 01 00       	call   c00284cc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 d0 ca 01 00       	call   c0028dc7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 69 bb 01 00       	call   c0027e7b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 8d c1 01 00       	call   c00284cc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 2f cc 01 00       	call   c0028f80 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 67 c4 01 00       	call   c00287dc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 e4 ba 01 00       	call   c0027e7b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 0f c7 01 00       	call   c0028b5b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 0f ba 01 00       	call   c0027e7b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ef b9 01 00       	call   c0027e7b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 bf c6 01 00       	call   c0028b5b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 0f c9 01 00       	call   c0028dc5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 ed bf 01 00       	call   c00284cc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 6f ca 01 00       	call   c0028f60 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 96 c8 01 00       	call   c0028da9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 93 bf 01 00       	call   c00284cc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 11 c6 01 00       	call   c0028b5b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 94 bf 01 00       	call   c00284f8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 e6 c5 01 00       	call   c0028b5b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 4d c2 01 00       	call   c00287dc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 cc b8 01 00       	call   c0027e7b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 96 c5 01 00       	call   c0028b5b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 e2 c7 01 00       	call   c0028dc7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 d7 be 01 00       	call   c00284f8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 a9 be 01 00       	call   c00284f8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 e0 c4 01 00       	call   c0028b5b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 44 c1 01 00       	call   c00287dc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 11 c1 01 00       	call   c00287dc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 90 b7 01 00       	call   c0027e7b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 7d c8 01 00       	call   c0028f80 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 4f c4 01 00       	call   c0028b5b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 a6 bd 01 00       	call   c00284cc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 85 c6 01 00       	call   c0028dc7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 1d b7 01 00       	call   c0027e7b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 41 bd 01 00       	call   c00284cc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 e3 c7 01 00       	call   c0028f80 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 a4 c5 01 00       	call   c0028dc7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 62 c5 01 00       	call   c0028da9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 f9 c2 01 00       	call   c0028b5b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 fa b5 01 00       	call   c0027e7b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 c9 c2 01 00       	call   c0028b5b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 30 bf 01 00       	call   c00287dc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 cf c4 01 00       	call   c0028da9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 d2 c4 01 00       	call   c0028dc7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 a5 c4 01 00       	call   c0028dc7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 9e be 01 00       	call   c00287dc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 28 c6 01 00       	call   c0028f80 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 03 c6 01 00       	call   c0028f80 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 d5 c1 01 00       	call   c0028b5b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 2c bb 01 00       	call   c00284cc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 0b c4 01 00       	call   c0028dc7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 a4 b4 01 00       	call   c0027e7b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 c8 ba 01 00       	call   c00284cc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 6a c5 01 00       	call   c0028f80 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 a2 bd 01 00       	call   c00287dc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 1f b4 01 00       	call   c0027e7b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 4a c0 01 00       	call   c0028b5b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 4a b3 01 00       	call   c0027e7b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 2a b3 01 00       	call   c0027e7b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 fa bf 01 00       	call   c0028b5b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 4a c2 01 00       	call   c0028dc5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 28 b9 01 00       	call   c00284cc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 aa c3 01 00       	call   c0028f60 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 d1 c1 01 00       	call   c0028da9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ce b8 01 00       	call   c00284cc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 4c bf 01 00       	call   c0028b5b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 cf b8 01 00       	call   c00284f8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 21 bf 01 00       	call   c0028b5b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 88 bb 01 00       	call   c00287dc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 07 b2 01 00       	call   c0027e7b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 d1 be 01 00       	call   c0028b5b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 1d c1 01 00       	call   c0028dc7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 12 b8 01 00       	call   c00284f8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 e4 b7 01 00       	call   c00284f8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 1b be 01 00       	call   c0028b5b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 7f ba 01 00       	call   c00287dc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 4c ba 01 00       	call   c00287dc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 cb b0 01 00       	call   c0027e7b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 b8 c1 01 00       	call   c0028f80 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 8a bd 01 00       	call   c0028b5b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 e1 b6 01 00       	call   c00284cc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 c0 bf 01 00       	call   c0028dc7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 58 b0 01 00       	call   c0027e7b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 7c b6 01 00       	call   c00284cc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 1e c1 01 00       	call   c0028f80 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 df be 01 00       	call   c0028dc7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 9d be 01 00       	call   c0028da9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 34 bc 01 00       	call   c0028b5b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 35 af 01 00       	call   c0027e7b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 04 bc 01 00       	call   c0028b5b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 6b b8 01 00       	call   c00287dc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 0a be 01 00       	call   c0028da9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 0d be 01 00       	call   c0028dc7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 e0 bd 01 00       	call   c0028dc7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 d9 b7 01 00       	call   c00287dc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 63 bf 01 00       	call   c0028f80 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 3e bf 01 00       	call   c0028f80 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 10 bb 01 00       	call   c0028b5b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 67 b4 01 00       	call   c00284cc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 46 bd 01 00       	call   c0028dc7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 df ad 01 00       	call   c0027e7b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 03 b4 01 00       	call   c00284cc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 a5 be 01 00       	call   c0028f80 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 dd b6 01 00       	call   c00287dc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 5a ad 01 00       	call   c0027e7b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 85 b9 01 00       	call   c0028b5b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 85 ac 01 00       	call   c0027e7b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 65 ac 01 00       	call   c0027e7b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 35 b9 01 00       	call   c0028b5b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 85 bb 01 00       	call   c0028dc5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 63 b2 01 00       	call   c00284cc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 e5 bc 01 00       	call   c0028f60 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 0c bb 01 00       	call   c0028da9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 09 b2 01 00       	call   c00284cc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 87 b8 01 00       	call   c0028b5b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 0a b2 01 00       	call   c00284f8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 5c b8 01 00       	call   c0028b5b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 c3 b4 01 00       	call   c00287dc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 42 ab 01 00       	call   c0027e7b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 0c b8 01 00       	call   c0028b5b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 58 ba 01 00       	call   c0028dc7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 4d b1 01 00       	call   c00284f8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 1f b1 01 00       	call   c00284f8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 56 b7 01 00       	call   c0028b5b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ba b3 01 00       	call   c00287dc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 87 b3 01 00       	call   c00287dc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 06 aa 01 00       	call   c0027e7b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 f3 ba 01 00       	call   c0028f80 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 c5 b6 01 00       	call   c0028b5b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 1c b0 01 00       	call   c00284cc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 fb b8 01 00       	call   c0028dc7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 93 a9 01 00       	call   c0027e7b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 b7 af 01 00       	call   c00284cc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 59 ba 01 00       	call   c0028f80 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 17 b8 01 00       	call   c0028dc7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 d5 b7 01 00       	call   c0028da9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 6c b5 01 00       	call   c0028b5b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 6d a8 01 00       	call   c0027e7b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 3c b5 01 00       	call   c0028b5b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 a3 b1 01 00       	call   c00287dc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 42 b7 01 00       	call   c0028da9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 45 b7 01 00       	call   c0028dc7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 18 b7 01 00       	call   c0028dc7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 11 b1 01 00       	call   c00287dc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 9b b8 01 00       	call   c0028f80 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 72 b8 01 00       	call   c0028f80 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 44 b4 01 00       	call   c0028b5b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 9b ad 01 00       	call   c00284cc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 7a b6 01 00       	call   c0028dc7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 13 a7 01 00       	call   c0027e7b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 3b ad 01 00       	call   c00284cc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 dd b7 01 00       	call   c0028f80 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 16 b0 01 00       	call   c00287dc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 93 a6 01 00       	call   c0027e7b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 bf b2 01 00       	call   c0028b5b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 bf a5 01 00       	call   c0027e7b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 9f a5 01 00       	call   c0027e7b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 6f b2 01 00       	call   c0028b5b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 a3 b4 01 00       	call   c0028da9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 9a ab 01 00       	call   c00284cc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 1c b6 01 00       	call   c0028f60 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 43 b4 01 00       	call   c0028da9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 3d ab 01 00       	call   c00284cc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 bb b1 01 00       	call   c0028b5b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 3e ab 01 00       	call   c00284f8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 90 b1 01 00       	call   c0028b5b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 f7 ad 01 00       	call   c00287dc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 76 a4 01 00       	call   c0027e7b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 40 b1 01 00       	call   c0028b5b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 8c b3 01 00       	call   c0028dc7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 81 aa 01 00       	call   c00284f8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 53 aa 01 00       	call   c00284f8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 97 b0 01 00       	call   c0028b5b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 fe ac 01 00       	call   c00287dc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 e7 a9 01 00       	call   c00284f8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 a3 b2 01 00       	call   c0028dcb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 96 ac 01 00       	call   c00287dc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 15 a3 01 00       	call   c0027e7b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 02 b4 01 00       	call   c0028f80 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 d4 af 01 00       	call   c0028b5b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 2b a9 01 00       	call   c00284cc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 0a b2 01 00       	call   c0028dc7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 a2 a2 01 00       	call   c0027e7b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ca a8 01 00       	call   c00284cc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 6c b3 01 00       	call   c0028f80 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd579c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 a8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd57a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 9b 1c 00 00       	call   c000f912 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 1f b0 01 00       	call   c0028dc7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 dd af 01 00       	call   c0028da9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 c9 af 01 00       	call   c0028dc7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 3b ad 01 00       	call   c0028b5b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 b9 a6 01 00       	call   c00284f8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 0b ad 01 00       	call   c0028b5b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 11 a0 01 00       	call   c0027e7b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 e0 ac 01 00       	call   c0028b5b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 30 af 01 00       	call   c0028dc5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 11 a6 01 00       	call   c00284cc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 93 b0 01 00       	call   c0028f60 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ba ae 01 00       	call   c0028da9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 b9 a5 01 00       	call   c00284cc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 37 ac 01 00       	call   c0028b5b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ba a5 01 00       	call   c00284f8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 0c ac 01 00       	call   c0028b5b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 73 a8 01 00       	call   c00287dc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 f2 9e 01 00       	call   c0027e7b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 1a a8 01 00       	call   c00287dc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 a0 9e 01 00       	call   c0027e7b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 8e af 01 00       	call   c0028f80 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 60 ab 01 00       	call   c0028b5b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 b7 a4 01 00       	call   c00284cc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 96 ad 01 00       	call   c0028dc7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 2f 9e 01 00       	call   c0027e7b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 5b a4 01 00       	call   c00284cc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 fd ae 01 00       	call   c0028f80 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 aa aa 01 00       	call   c0028b5b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 27 a4 01 00       	call   c00284f8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 78 aa 01 00       	call   c0028b5b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 7e 9d 01 00       	call   c0027e7b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 4e aa 01 00       	call   c0028b5b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 a2 ac 01 00       	call   c0028dc9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 7b a3 01 00       	call   c00284cc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 fd ad 01 00       	call   c0028f60 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 24 ac 01 00       	call   c0028da9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 22 a3 01 00       	call   c00284cc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 a0 a9 01 00       	call   c0028b5b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 23 a3 01 00       	call   c00284f8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 75 a9 01 00       	call   c0028b5b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 dc a5 01 00       	call   c00287dc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 5b 9c 01 00       	call   c0027e7b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 77 a5 01 00       	call   c00287dc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 f6 9b 01 00       	call   c0027e7b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 e4 ac 01 00       	call   c0028f80 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 b6 a8 01 00       	call   c0028b5b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 0d a2 01 00       	call   c00284cc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 ec aa 01 00       	call   c0028dc7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 85 9b 01 00       	call   c0027e7b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 b1 a1 01 00       	call   c00284cc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 22 a8 01 00       	call   c0028b5b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 28 9b 01 00       	call   c0027e7b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e a9 02 c0       	mov    eax,0xc002a97e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f a9 02 c0       	mov    eax,0xc002a98f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 dd 14 00 00       	call   c000f912 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 df 14 00 00       	call   c000f932 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 59 14 00 00       	jmp    c000f902 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 74 14 00 00       	jmp    c000f922 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c000e4e3:	ff 05 84 27 03 c0    	inc    DWORD PTR ds:0xc0032784
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 80 27 03 c0 00 	cmp    DWORD PTR ds:0xc0032780,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c000e50d:	e8 a6 fc 00 00       	call   c001e1b8 <schedule()>
c000e512:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c000e517:	48                   	dec    eax
c000e518:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 d0 f3 02 c0       	mov    eax,ds:0xc002f3d0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 a9 02 c0       	push   0xc002a9c6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 68 f2 02 c0       	mov    eax,0xc002f268
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf a9 02 c0       	push   0xc002a9cf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 f4 72 02 c0       	mov    eax,0xc00272f4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 a9 02 c0       	push   0xc002a9d9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 28 70 02 c0       	mov    eax,0xc0027028
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 a9 02 c0       	push   0xc002a9e2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 f4 73 02 c0       	mov    eax,0xc00273f4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec a9 02 c0       	push   0xc002a9ec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 74 71 02 c0       	mov    eax,0xc0027174
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 a9 02 c0       	push   0xc002a9f5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 6c f2 02 c0       	mov    eax,0xc002f26c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 aa 02 c0       	push   0xc002aa02
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 6d f2 02 c0       	mov    eax,0xc002f26d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 3b 59 00 00       	call   c0013fa8 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 0f aa 02 c0       	push   0xc002aa0f
c000e69e:	e8 b9 12 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 53 12 00 00       	call   c000f902 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c000e6be:	68 28 aa 02 c0       	push   0xc002aa28
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 b1 f6 00 00       	call   c001dd7c <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 95 f2 00 c0       	push   0xc000f295
c000e6da:	53                   	push   ebx
c000e6db:	e8 94 f8 00 00       	call   c001df74 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 f2 e9 01 c0       	push   0xc001e9f2
c000e6e9:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c000e6ef:	e8 80 f8 00 00       	call   c001df74 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 68 27 03 c0       	mov    ds:0xc0032768,eax
c000e6fc:	68 58 ac 02 c0       	push   0xc002ac58
c000e701:	c6 05 6d f2 02 c0 01 	mov    BYTE PTR ds:0xc002f26d,0x1
c000e708:	e8 4f 12 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e70d:	e8 17 07 01 00       	call   c001ee29 <Vm::initialise8086()>
c000e712:	e8 59 46 00 00       	call   c0012d70 <Fs::initVFS()>
c000e717:	c7 04 24 35 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa35
c000e71e:	e8 39 12 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e723:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 58 ac 02 c0       	push   0xc002ac58
c000e742:	e8 15 12 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e747:	e8 bd de 00 00       	call   c001c609 <Sys::loadSyscalls()>
c000e74c:	e8 7b bb 00 00       	call   c001a2cc <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 4f aa 02 c0       	push   0xc002aa4f
c000e75b:	68 58 aa 02 c0       	push   0xc002aa58
c000e760:	e8 56 ca 00 00       	call   c001b1bb <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 f3 50 00 00       	call   c0013860 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 7c ac 02 c0 	mov    DWORD PTR [esp],0xc002ac7c
c000e774:	e8 e3 11 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 de 57 00 00       	call   c0013f68 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 60 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa60
c000e791:	e8 c6 11 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e796:	e8 7d b6 00 00       	call   c0019e18 <Krnl::startCPUs()>
c000e79b:	c7 04 24 7a aa 02 c0 	mov    DWORD PTR [esp],0xc002aa7a
c000e7a2:	e8 b5 11 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 68 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f268
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 8b aa 02 c0       	push   0xc002aa8b
c000e7b6:	e8 1e f0 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 40 f2 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 e6 fb 00 00       	call   c001e3b7 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 a7 aa 02 c0       	push   0xc002aaa7
c000e7e5:	50                   	push   eax
c000e7e6:	e8 37 58 00 00       	call   c0014022 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 81 f2 02 c0 04 	test   BYTE PTR ds:0xc002f281,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 37 86 01 00       	call   c0026fb6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 6e a1 00 00       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 47 a1 00 00       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 25 a1 00 00       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 03 a1 00 00       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 80 f2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f280,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 11 a0 00 00       	call   c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 ec 9f 00 00       	call   c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 a1 84 01 00       	call   c0026f70 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 5e 84 01 00       	call   c0026f50 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 08 a0 00 00       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	53                   	push   ebx
c000eb3f:	83 ec 14             	sub    esp,0x14
c000eb42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb46:	68 b7 aa 02 c0       	push   0xc002aab7
c000eb4b:	e8 95 3e 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000eb50:	83 c4 10             	add    esp,0x10
c000eb53:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb5a:	0f 85 73 02 00 00    	jne    c000edd3 <Computer::displayFeatures()+0x295>
c000eb60:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000eb65:	83 ec 08             	sub    esp,0x8
c000eb68:	50                   	push   eax
c000eb69:	68 ca aa 02 c0       	push   0xc002aaca
c000eb6e:	e8 72 3e 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000eb73:	83 c4 10             	add    esp,0x10
c000eb76:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb7d:	0f 85 8c 02 00 00    	jne    c000ee0f <Computer::displayFeatures()+0x2d1>
c000eb83:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000eb88:	83 ec 08             	sub    esp,0x8
c000eb8b:	50                   	push   eax
c000eb8c:	68 db aa 02 c0       	push   0xc002aadb
c000eb91:	e8 4f 3e 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000eb96:	83 c4 10             	add    esp,0x10
c000eb99:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eba0:	0f 85 5f 02 00 00    	jne    c000ee05 <Computer::displayFeatures()+0x2c7>
c000eba6:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ebab:	83 ec 08             	sub    esp,0x8
c000ebae:	50                   	push   eax
c000ebaf:	68 ec aa 02 c0       	push   0xc002aaec
c000ebb4:	e8 2c 3e 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ebb9:	83 c4 10             	add    esp,0x10
c000ebbc:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ebc3:	0f 85 32 02 00 00    	jne    c000edfb <Computer::displayFeatures()+0x2bd>
c000ebc9:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ebce:	83 ec 08             	sub    esp,0x8
c000ebd1:	50                   	push   eax
c000ebd2:	68 fd aa 02 c0       	push   0xc002aafd
c000ebd7:	e8 09 3e 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ebdc:	83 c4 10             	add    esp,0x10
c000ebdf:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebe6:	0f 85 05 02 00 00    	jne    c000edf1 <Computer::displayFeatures()+0x2b3>
c000ebec:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ebf1:	83 ec 08             	sub    esp,0x8
c000ebf4:	50                   	push   eax
c000ebf5:	68 0e ab 02 c0       	push   0xc002ab0e
c000ebfa:	e8 e6 3d 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ebff:	83 c4 10             	add    esp,0x10
c000ec02:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec09:	0f 85 d8 01 00 00    	jne    c000ede7 <Computer::displayFeatures()+0x2a9>
c000ec0f:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ec14:	83 ec 08             	sub    esp,0x8
c000ec17:	50                   	push   eax
c000ec18:	68 1f ab 02 c0       	push   0xc002ab1f
c000ec1d:	e8 c3 3d 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ec22:	83 c4 10             	add    esp,0x10
c000ec25:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec2c:	0f 85 ab 01 00 00    	jne    c000eddd <Computer::displayFeatures()+0x29f>
c000ec32:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ec37:	83 ec 08             	sub    esp,0x8
c000ec3a:	50                   	push   eax
c000ec3b:	68 30 ab 02 c0       	push   0xc002ab30
c000ec40:	e8 a0 3d 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ec45:	83 c4 10             	add    esp,0x10
c000ec48:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec4f:	0f 88 1b 02 00 00    	js     c000ee70 <Computer::displayFeatures()+0x332>
c000ec55:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ec5a:	83 ec 08             	sub    esp,0x8
c000ec5d:	50                   	push   eax
c000ec5e:	68 41 ab 02 c0       	push   0xc002ab41
c000ec63:	e8 7d 3d 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ec68:	83 c4 10             	add    esp,0x10
c000ec6b:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec72:	0f 85 a1 01 00 00    	jne    c000ee19 <Computer::displayFeatures()+0x2db>
c000ec78:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ec7d:	83 ec 08             	sub    esp,0x8
c000ec80:	50                   	push   eax
c000ec81:	68 52 ab 02 c0       	push   0xc002ab52
c000ec86:	e8 5a 3d 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ec8b:	83 c4 10             	add    esp,0x10
c000ec8e:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec95:	0f 85 cb 01 00 00    	jne    c000ee66 <Computer::displayFeatures()+0x328>
c000ec9b:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000eca0:	83 ec 08             	sub    esp,0x8
c000eca3:	50                   	push   eax
c000eca4:	68 63 ab 02 c0       	push   0xc002ab63
c000eca9:	e8 37 3d 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ecae:	83 c4 10             	add    esp,0x10
c000ecb1:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ecb8:	0f 85 9e 01 00 00    	jne    c000ee5c <Computer::displayFeatures()+0x31e>
c000ecbe:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ecc3:	83 ec 08             	sub    esp,0x8
c000ecc6:	50                   	push   eax
c000ecc7:	68 74 ab 02 c0       	push   0xc002ab74
c000eccc:	e8 14 3d 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ecd1:	83 c4 10             	add    esp,0x10
c000ecd4:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ecdb:	0f 85 71 01 00 00    	jne    c000ee52 <Computer::displayFeatures()+0x314>
c000ece1:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ece6:	83 ec 08             	sub    esp,0x8
c000ece9:	50                   	push   eax
c000ecea:	68 85 ab 02 c0       	push   0xc002ab85
c000ecef:	e8 f1 3c 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ecf4:	83 c4 10             	add    esp,0x10
c000ecf7:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecfe:	0f 85 44 01 00 00    	jne    c000ee48 <Computer::displayFeatures()+0x30a>
c000ed04:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ed09:	83 ec 08             	sub    esp,0x8
c000ed0c:	50                   	push   eax
c000ed0d:	68 96 ab 02 c0       	push   0xc002ab96
c000ed12:	e8 ce 3c 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed21:	0f 85 17 01 00 00    	jne    c000ee3e <Computer::displayFeatures()+0x300>
c000ed27:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ed2c:	83 ec 08             	sub    esp,0x8
c000ed2f:	50                   	push   eax
c000ed30:	68 a7 ab 02 c0       	push   0xc002aba7
c000ed35:	e8 ab 3c 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ed3a:	83 c4 10             	add    esp,0x10
c000ed3d:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed44:	0f 85 ea 00 00 00    	jne    c000ee34 <Computer::displayFeatures()+0x2f6>
c000ed4a:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ed4f:	83 ec 08             	sub    esp,0x8
c000ed52:	50                   	push   eax
c000ed53:	68 b8 ab 02 c0       	push   0xc002abb8
c000ed58:	e8 88 3c 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ed5d:	83 c4 10             	add    esp,0x10
c000ed60:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed67:	0f 88 0d 01 00 00    	js     c000ee7a <Computer::displayFeatures()+0x33c>
c000ed6d:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ed72:	83 ec 08             	sub    esp,0x8
c000ed75:	50                   	push   eax
c000ed76:	68 c9 ab 02 c0       	push   0xc002abc9
c000ed7b:	e8 65 3c 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ed80:	83 c4 10             	add    esp,0x10
c000ed83:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed8a:	0f 85 9a 00 00 00    	jne    c000ee2a <Computer::displayFeatures()+0x2ec>
c000ed90:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000ed95:	83 ec 08             	sub    esp,0x8
c000ed98:	50                   	push   eax
c000ed99:	68 da ab 02 c0       	push   0xc002abda
c000ed9e:	e8 42 3c 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000eda3:	83 c4 10             	add    esp,0x10
c000eda6:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000edad:	75 74                	jne    c000ee23 <Computer::displayFeatures()+0x2e5>
c000edaf:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c000edb4:	83 ec 08             	sub    esp,0x8
c000edb7:	50                   	push   eax
c000edb8:	68 eb ab 02 c0       	push   0xc002abeb
c000edbd:	e8 23 3c 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000edc2:	c7 44 24 20 dc c6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c6dc
c000edca:	83 c4 18             	add    esp,0x18
c000edcd:	5b                   	pop    ebx
c000edce:	e9 12 3c 00 00       	jmp    c00129e5 <Dbg::kprintf(char const*, ...)>
c000edd3:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000edd8:	e9 88 fd ff ff       	jmp    c000eb65 <Computer::displayFeatures()+0x27>
c000eddd:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ede2:	e9 50 fe ff ff       	jmp    c000ec37 <Computer::displayFeatures()+0xf9>
c000ede7:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000edec:	e9 23 fe ff ff       	jmp    c000ec14 <Computer::displayFeatures()+0xd6>
c000edf1:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000edf6:	e9 f6 fd ff ff       	jmp    c000ebf1 <Computer::displayFeatures()+0xb3>
c000edfb:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee00:	e9 c9 fd ff ff       	jmp    c000ebce <Computer::displayFeatures()+0x90>
c000ee05:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee0a:	e9 9c fd ff ff       	jmp    c000ebab <Computer::displayFeatures()+0x6d>
c000ee0f:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee14:	e9 6f fd ff ff       	jmp    c000eb88 <Computer::displayFeatures()+0x4a>
c000ee19:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee1e:	e9 5a fe ff ff       	jmp    c000ec7d <Computer::displayFeatures()+0x13f>
c000ee23:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee28:	eb 8a                	jmp    c000edb4 <Computer::displayFeatures()+0x276>
c000ee2a:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee2f:	e9 61 ff ff ff       	jmp    c000ed95 <Computer::displayFeatures()+0x257>
c000ee34:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee39:	e9 11 ff ff ff       	jmp    c000ed4f <Computer::displayFeatures()+0x211>
c000ee3e:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee43:	e9 e4 fe ff ff       	jmp    c000ed2c <Computer::displayFeatures()+0x1ee>
c000ee48:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee4d:	e9 b7 fe ff ff       	jmp    c000ed09 <Computer::displayFeatures()+0x1cb>
c000ee52:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee57:	e9 8a fe ff ff       	jmp    c000ece6 <Computer::displayFeatures()+0x1a8>
c000ee5c:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee61:	e9 5d fe ff ff       	jmp    c000ecc3 <Computer::displayFeatures()+0x185>
c000ee66:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee6b:	e9 30 fe ff ff       	jmp    c000eca0 <Computer::displayFeatures()+0x162>
c000ee70:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee75:	e9 e0 fd ff ff       	jmp    c000ec5a <Computer::displayFeatures()+0x11c>
c000ee7a:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c000ee7f:	e9 ee fe ff ff       	jmp    c000ed72 <Computer::displayFeatures()+0x234>

c000ee84 <Computer::rdmsr(unsigned int)>:
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee8b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee92:	74 0a                	je     c000ee9e <Computer::rdmsr(unsigned int)+0x1a>
c000ee94:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee98:	0f 32                	rdmsr  
c000ee9a:	83 c4 0c             	add    esp,0xc
c000ee9d:	c3                   	ret    
c000ee9e:	83 ec 0c             	sub    esp,0xc
c000eea1:	68 fc ab 02 c0       	push   0xc002abfc
c000eea6:	e8 5a b5 00 00       	call   c001a405 <Krnl::panic(char const*)>
c000eeab:	83 c4 10             	add    esp,0x10
c000eeae:	eb e4                	jmp    c000ee94 <Computer::rdmsr(unsigned int)+0x10>

c000eeb0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eeb0:	57                   	push   edi
c000eeb1:	56                   	push   esi
c000eeb2:	52                   	push   edx
c000eeb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eeb7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eebb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eebf:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eec6:	74 0e                	je     c000eed6 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eec8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eecc:	89 f0                	mov    eax,esi
c000eece:	89 fa                	mov    edx,edi
c000eed0:	0f 30                	wrmsr  
c000eed2:	58                   	pop    eax
c000eed3:	5e                   	pop    esi
c000eed4:	5f                   	pop    edi
c000eed5:	c3                   	ret    
c000eed6:	83 ec 0c             	sub    esp,0xc
c000eed9:	68 02 ac 02 c0       	push   0xc002ac02
c000eede:	e8 22 b5 00 00       	call   c001a405 <Krnl::panic(char const*)>
c000eee3:	83 c4 10             	add    esp,0x10
c000eee6:	eb e0                	jmp    c000eec8 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eee8 <Computer::nmiEnabled()>:
c000eee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeec:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eef2:	c3                   	ret    
c000eef3:	90                   	nop

c000eef4 <Computer::readCMOS(unsigned char)>:
c000eef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eef8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eeff:	19 c0                	sbb    eax,eax
c000ef01:	83 e0 80             	and    eax,0xffffff80
c000ef04:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef08:	e6 70                	out    0x70,al
c000ef0a:	e4 71                	in     al,0x71
c000ef0c:	c3                   	ret    
c000ef0d:	90                   	nop

c000ef0e <Computer::enableNMI(bool)>:
c000ef0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef16:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef1c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef24:	eb ce                	jmp    c000eef4 <Computer::readCMOS(unsigned char)>

c000ef26 <Computer::open(int, int, void*)>:
c000ef26:	56                   	push   esi
c000ef27:	53                   	push   ebx
c000ef28:	83 ec 10             	sub    esp,0x10
c000ef2b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef2f:	68 9c ac 02 c0       	push   0xc002ac9c
c000ef34:	e8 23 0a 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000ef39:	f6 05 80 f2 02 c0 04 	test   BYTE PTR ds:0xc002f280,0x4
c000ef40:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ef47:	0f 94 05 a0 e1 02 c0 	sete   BYTE PTR ds:0xc002e1a0
c000ef4e:	e8 af 09 00 00       	call   c000f902 <malloc>
c000ef53:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef56:	89 c6                	mov    esi,eax
c000ef58:	e8 1d 8f 00 00       	call   c0017e7a <ACPI::ACPI()>
c000ef5d:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef63:	58                   	pop    eax
c000ef64:	5a                   	pop    edx
c000ef65:	56                   	push   esi
c000ef66:	53                   	push   ebx
c000ef67:	e8 b2 4e 00 00       	call   c0013e1e <Device::addChild(Device*)>
c000ef6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef6f:	e8 c0 f9 ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ef74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef77:	e8 c2 fb ff ff       	call   c000eb3e <Computer::displayFeatures()>
c000ef7c:	59                   	pop    ecx
c000ef7d:	5e                   	pop    esi
c000ef7e:	6a 01                	push   0x1
c000ef80:	53                   	push   ebx
c000ef81:	e8 88 ff ff ff       	call   c000ef0e <Computer::enableNMI(bool)>
c000ef86:	c7 04 24 60 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa60
c000ef8d:	e8 ca 09 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000ef92:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef99:	e8 64 09 00 00       	call   c000f902 <malloc>
c000ef9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000efa1:	89 c6                	mov    esi,eax
c000efa3:	e8 38 9c 00 00       	call   c0018be0 <CPU::CPU()>
c000efa8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000efae:	58                   	pop    eax
c000efaf:	5a                   	pop    edx
c000efb0:	56                   	push   esi
c000efb1:	53                   	push   ebx
c000efb2:	e8 67 4e 00 00       	call   c0013e1e <Device::addChild(Device*)>
c000efb7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000efbd:	8b 10                	mov    edx,DWORD PTR [eax]
c000efbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000efc3:	6a 00                	push   0x0
c000efc5:	6a 00                	push   0x0
c000efc7:	50                   	push   eax
c000efc8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efcb:	83 c4 20             	add    esp,0x20
c000efce:	e8 f3 53 00 00       	call   c00143c6 <setupFPU()>
c000efd3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000efd9:	85 c0                	test   eax,eax
c000efdb:	74 1f                	je     c000effc <Computer::open(int, int, void*)+0xd6>
c000efdd:	83 ec 08             	sub    esp,0x8
c000efe0:	50                   	push   eax
c000efe1:	53                   	push   ebx
c000efe2:	e8 37 4e 00 00       	call   c0013e1e <Device::addChild(Device*)>
c000efe7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000efed:	8b 10                	mov    edx,DWORD PTR [eax]
c000efef:	6a 00                	push   0x0
c000eff1:	6a 00                	push   0x0
c000eff3:	6a 00                	push   0x0
c000eff5:	50                   	push   eax
c000eff6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eff9:	83 c4 20             	add    esp,0x20
c000effc:	83 ec 0c             	sub    esp,0xc
c000efff:	68 08 ac 02 c0       	push   0xc002ac08
c000f004:	e8 53 09 00 00       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000f009:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000f010:	e8 81 f0 00 00       	call   c001e096 <setupMultitasking(void (*)())>
c000f015:	83 c4 14             	add    esp,0x14
c000f018:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f01d:	5b                   	pop    ebx
c000f01e:	5e                   	pop    esi
c000f01f:	c3                   	ret    

c000f020 <Computer::disableNMI()>:
c000f020:	6a 00                	push   0x0
c000f022:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f026:	e8 e3 fe ff ff       	call   c000ef0e <Computer::enableNMI(bool)>
c000f02b:	58                   	pop    eax
c000f02c:	5a                   	pop    edx
c000f02d:	c3                   	ret    

c000f02e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f032:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f039:	19 c0                	sbb    eax,eax
c000f03b:	83 e0 80             	and    eax,0xffffff80
c000f03e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f042:	e6 70                	out    0x70,al
c000f044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f048:	e6 71                	out    0x71,al
c000f04a:	c3                   	ret    
c000f04b:	90                   	nop

c000f04c <Computer::handleNMI()>:
c000f04c:	56                   	push   esi
c000f04d:	53                   	push   ebx
c000f04e:	83 ec 10             	sub    esp,0x10
c000f051:	e4 92                	in     al,0x92
c000f053:	89 c6                	mov    esi,eax
c000f055:	e4 61                	in     al,0x61
c000f057:	68 23 ac 02 c0       	push   0xc002ac23
c000f05c:	88 c3                	mov    bl,al
c000f05e:	e8 82 39 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000f063:	83 c4 10             	add    esp,0x10
c000f066:	83 e6 10             	and    esi,0x10
c000f069:	75 0d                	jne    c000f078 <Computer::handleNMI()+0x2c>
c000f06b:	f6 c3 40             	test   bl,0x40
c000f06e:	75 1d                	jne    c000f08d <Computer::handleNMI()+0x41>
c000f070:	84 db                	test   bl,bl
c000f072:	78 2d                	js     c000f0a1 <Computer::handleNMI()+0x55>
c000f074:	58                   	pop    eax
c000f075:	5b                   	pop    ebx
c000f076:	5e                   	pop    esi
c000f077:	c3                   	ret    
c000f078:	83 ec 0c             	sub    esp,0xc
c000f07b:	68 34 ac 02 c0       	push   0xc002ac34
c000f080:	e8 80 b3 00 00       	call   c001a405 <Krnl::panic(char const*)>
c000f085:	83 c4 10             	add    esp,0x10
c000f088:	f6 c3 40             	test   bl,0x40
c000f08b:	74 e3                	je     c000f070 <Computer::handleNMI()+0x24>
c000f08d:	83 ec 0c             	sub    esp,0xc
c000f090:	68 41 ac 02 c0       	push   0xc002ac41
c000f095:	e8 6b b3 00 00       	call   c001a405 <Krnl::panic(char const*)>
c000f09a:	83 c4 10             	add    esp,0x10
c000f09d:	84 db                	test   bl,bl
c000f09f:	79 d3                	jns    c000f074 <Computer::handleNMI()+0x28>
c000f0a1:	c7 44 24 10 4b ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac4b
c000f0a9:	5a                   	pop    edx
c000f0aa:	5b                   	pop    ebx
c000f0ab:	5e                   	pop    esi
c000f0ac:	e9 54 b3 00 00       	jmp    c001a405 <Krnl::panic(char const*)>
c000f0b1:	90                   	nop

c000f0b2 <Computer::setDiskActivityLight(int, bool)>:
c000f0b2:	56                   	push   esi
c000f0b3:	53                   	push   ebx
c000f0b4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0b8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f0bd:	77 1b                	ja     c000f0da <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0bf:	e4 92                	in     al,0x92
c000f0c1:	bb 40 00 00 00       	mov    ebx,0x40
c000f0c6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0ca:	89 da                	mov    edx,ebx
c000f0cc:	d3 e2                	shl    edx,cl
c000f0ce:	89 f1                	mov    ecx,esi
c000f0d0:	f7 d2                	not    edx
c000f0d2:	d3 e3                	shl    ebx,cl
c000f0d4:	21 d0                	and    eax,edx
c000f0d6:	09 d8                	or     eax,ebx
c000f0d8:	e6 92                	out    0x92,al
c000f0da:	5b                   	pop    ebx
c000f0db:	5e                   	pop    esi
c000f0dc:	c3                   	ret    
c000f0dd:	90                   	nop

c000f0de <GDTEntry::setBase(unsigned int)>:
c000f0de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0e2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f0e6:	89 c1                	mov    ecx,eax
c000f0e8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f0ec:	c1 e9 10             	shr    ecx,0x10
c000f0ef:	c1 e8 18             	shr    eax,0x18
c000f0f2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0f5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0f8:	c3                   	ret    
c000f0f9:	90                   	nop

c000f0fa <GDTEntry::setLimit(unsigned int)>:
c000f0fa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f102:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f105:	66 89 01             	mov    WORD PTR [ecx],ax
c000f108:	83 e2 f0             	and    edx,0xfffffff0
c000f10b:	c1 e8 10             	shr    eax,0x10
c000f10e:	83 e0 0f             	and    eax,0xf
c000f111:	09 d0                	or     eax,edx
c000f113:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f116:	c3                   	ret    
c000f117:	90                   	nop

c000f118 <GDT::GDT()>:
c000f118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f11c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f126:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f12c:	90                   	nop
c000f12d:	c3                   	ret    

c000f12e <GDT::addEntry(GDTEntry)>:
c000f12e:	53                   	push   ebx
c000f12f:	83 ec 0c             	sub    esp,0xc
c000f132:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f136:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f138:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f13f:	52                   	push   edx
c000f140:	50                   	push   eax
c000f141:	68 ec ac 02 c0       	push   0xc002acec
c000f146:	e8 9a 38 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000f14b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f14d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f151:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f155:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f159:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f15d:	8d 50 01             	lea    edx,[eax+0x1]
c000f160:	c1 e0 03             	shl    eax,0x3
c000f163:	89 13                	mov    DWORD PTR [ebx],edx
c000f165:	83 c4 18             	add    esp,0x18
c000f168:	5b                   	pop    ebx
c000f169:	c3                   	ret    

c000f16a <GDT::getNumberOfEntries()>:
c000f16a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f16e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f170:	c3                   	ret    
c000f171:	90                   	nop

c000f172 <GDT::flush()>:
c000f172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f176:	8b 10                	mov    edx,DWORD PTR [eax]
c000f178:	83 c0 04             	add    eax,0x4
c000f17b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f182:	a3 72 f2 02 c0       	mov    ds:0xc002f272,eax
c000f187:	66 89 15 70 f2 02 c0 	mov    WORD PTR ds:0xc002f270,dx
c000f18e:	e9 bd 12 ff ff       	jmp    c0000450 <loadGDT>
c000f193:	90                   	nop

c000f194 <GDT::setup()>:
c000f194:	55                   	push   ebp
c000f195:	57                   	push   edi
c000f196:	56                   	push   esi
c000f197:	53                   	push   ebx
c000f198:	83 ec 3c             	sub    esp,0x3c
c000f19b:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f19f:	6a 00                	push   0x0
c000f1a1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 33 ff ff ff       	call   c000f0de <GDTEntry::setBase(unsigned int)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 47 ff ff ff       	call   c000f0fa <GDTEntry::setLimit(unsigned int)>
c000f1b3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f1bb:	6a 00                	push   0x0
c000f1bd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1c1:	53                   	push   ebx
c000f1c2:	e8 17 ff ff ff       	call   c000f0de <GDTEntry::setBase(unsigned int)>
c000f1c7:	68 ff ff ff 00       	push   0xffffff
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 28 ff ff ff       	call   c000f0fa <GDTEntry::setLimit(unsigned int)>
c000f1d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1d6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1db:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f1e0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f1e4:	83 c4 20             	add    esp,0x20
c000f1e7:	6a 00                	push   0x0
c000f1e9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 eb fe ff ff       	call   c000f0de <GDTEntry::setBase(unsigned int)>
c000f1f3:	68 ff ff ff 00       	push   0xffffff
c000f1f8:	53                   	push   ebx
c000f1f9:	e8 fc fe ff ff       	call   c000f0fa <GDTEntry::setLimit(unsigned int)>
c000f1fe:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f202:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f206:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f20a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f20e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f212:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f217:	0d 00 92 c0 00       	or     eax,0xc09200
c000f21c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f220:	89 d8                	mov    eax,ebx
c000f222:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f226:	80 cc 60             	or     ah,0x60
c000f229:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f22d:	83 c4 0c             	add    esp,0xc
c000f230:	89 f8                	mov    eax,edi
c000f232:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f236:	80 cc 60             	or     ah,0x60
c000f239:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f23d:	89 c7                	mov    edi,eax
c000f23f:	55                   	push   ebp
c000f240:	e8 e9 fe ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c000f245:	83 c4 0c             	add    esp,0xc
c000f248:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f24c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f250:	55                   	push   ebp
c000f251:	e8 d8 fe ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c000f256:	83 c4 0c             	add    esp,0xc
c000f259:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f25d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f261:	55                   	push   ebp
c000f262:	e8 c7 fe ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c000f267:	83 c4 0c             	add    esp,0xc
c000f26a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f26e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f272:	53                   	push   ebx
c000f273:	51                   	push   ecx
c000f274:	55                   	push   ebp
c000f275:	e8 b4 fe ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c000f27a:	83 c4 0c             	add    esp,0xc
c000f27d:	57                   	push   edi
c000f27e:	56                   	push   esi
c000f27f:	55                   	push   ebp
c000f280:	e8 a9 fe ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c000f285:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f288:	e8 e5 fe ff ff       	call   c000f172 <GDT::flush()>
c000f28d:	83 c4 4c             	add    esp,0x4c
c000f290:	5b                   	pop    ebx
c000f291:	5e                   	pop    esi
c000f292:	5f                   	pop    edi
c000f293:	5d                   	pop    ebp
c000f294:	c3                   	ret    

c000f295 <idleFunction(void*)>:
c000f295:	53                   	push   ebx
c000f296:	83 ec 08             	sub    esp,0x8
c000f299:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c000f29e:	48                   	dec    eax
c000f29f:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c000f2a4:	75 01                	jne    c000f2a7 <idleFunction(void*)+0x12>
c000f2a6:	fb                   	sti    
c000f2a7:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c000f2ac:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f2b2:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f2b9:	74 3c                	je     c000f2f7 <idleFunction(void*)+0x62>
c000f2bb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f2c2:	74 33                	je     c000f2f7 <idleFunction(void*)+0x62>
c000f2c4:	31 db                	xor    ebx,ebx
c000f2c6:	52                   	push   edx
c000f2c7:	52                   	push   edx
c000f2c8:	68 e1 00 00 00       	push   0xe1
c000f2cd:	50                   	push   eax
c000f2ce:	e8 b1 fb ff ff       	call   c000ee84 <Computer::rdmsr(unsigned int)>
c000f2d3:	53                   	push   ebx
c000f2d4:	83 e0 02             	and    eax,0x2
c000f2d7:	50                   	push   eax
c000f2d8:	68 e1 00 00 00       	push   0xe1
c000f2dd:	ff 35 68 f2 02 c0    	push   DWORD PTR ds:0xc002f268
c000f2e3:	e8 c8 fb ff ff       	call   c000eeb0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f2e8:	83 c4 20             	add    esp,0x20
c000f2eb:	e8 8f 0f ff ff       	call   c000027f <doTPAUSE>
c000f2f0:	e8 0b 9d 01 00       	call   c0029000 <idleCommon()>
c000f2f5:	eb f4                	jmp    c000f2eb <idleFunction(void*)+0x56>
c000f2f7:	fb                   	sti    
c000f2f8:	f4                   	hlt    
c000f2f9:	e8 02 9d 01 00       	call   c0029000 <idleCommon()>
c000f2fe:	eb f7                	jmp    c000f2f7 <idleFunction(void*)+0x62>

c000f300 <IDTEntry::IDTEntry(bool)>:
c000f300:	83 ec 04             	sub    esp,0x4
c000f303:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f307:	88 04 24             	mov    BYTE PTR [esp],al
c000f30a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f30e:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f318:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f31c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f320:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f323:	83 e2 f0             	and    edx,0xfffffff0
c000f326:	83 ca 0e             	or     edx,0xe
c000f329:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f32c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f330:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f333:	83 e2 ef             	and    edx,0xffffffef
c000f336:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f339:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f33d:	74 04                	je     c000f343 <IDTEntry::IDTEntry(bool)+0x43>
c000f33f:	b2 03                	mov    dl,0x3
c000f341:	eb 02                	jmp    c000f345 <IDTEntry::IDTEntry(bool)+0x45>
c000f343:	b2 00                	mov    dl,0x0
c000f345:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f349:	83 e2 03             	and    edx,0x3
c000f34c:	88 d1                	mov    cl,dl
c000f34e:	c1 e1 05             	shl    ecx,0x5
c000f351:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f354:	83 e2 9f             	and    edx,0xffffff9f
c000f357:	09 ca                	or     edx,ecx
c000f359:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f35c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f360:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f363:	83 ca 80             	or     edx,0xffffff80
c000f366:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f369:	90                   	nop
c000f36a:	83 c4 04             	add    esp,0x4
c000f36d:	c3                   	ret    

c000f36e <IDTEntry::setOffset(unsigned int)>:
c000f36e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f372:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f376:	66 89 02             	mov    WORD PTR [edx],ax
c000f379:	c1 e8 10             	shr    eax,0x10
c000f37c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f380:	c3                   	ret    
c000f381:	90                   	nop

c000f382 <IDT::IDT()>:
c000f382:	90                   	nop
c000f383:	c3                   	ret    

c000f384 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f388:	83 c0 30             	add    eax,0x30
c000f38b:	c3                   	ret    

c000f38c <IDT::addEntry(IDTEntry, int)>:
c000f38c:	53                   	push   ebx
c000f38d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f391:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f395:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f399:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f39d:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f3a0:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f3a4:	5b                   	pop    ebx
c000f3a5:	c3                   	ret    

c000f3a6 <IDT::addEntry(int, void (*)(), bool)>:
c000f3a6:	53                   	push   ebx
c000f3a7:	83 ec 10             	sub    esp,0x10
c000f3aa:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3af:	50                   	push   eax
c000f3b0:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f3b4:	53                   	push   ebx
c000f3b5:	e8 46 ff ff ff       	call   c000f300 <IDTEntry::IDTEntry(bool)>
c000f3ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3be:	53                   	push   ebx
c000f3bf:	e8 aa ff ff ff       	call   c000f36e <IDTEntry::setOffset(unsigned int)>
c000f3c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3d4:	e8 b3 ff ff ff       	call   c000f38c <IDT::addEntry(IDTEntry, int)>
c000f3d9:	83 c4 30             	add    esp,0x30
c000f3dc:	5b                   	pop    ebx
c000f3dd:	c3                   	ret    

c000f3de <IDT::flush()>:
c000f3de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3e2:	66 c7 05 78 f2 02 c0 ff 07 	mov    WORD PTR ds:0xc002f278,0x7ff
c000f3eb:	a3 7a f2 02 c0       	mov    ds:0xc002f27a,eax
c000f3f0:	0f 01 1d 78 f2 02 c0 	lidtd  ds:0xc002f278
c000f3f7:	c3                   	ret    

c000f3f8 <IDT::setup()>:
c000f3f8:	57                   	push   edi
c000f3f9:	56                   	push   esi
c000f3fa:	53                   	push   ebx
c000f3fb:	83 ec 10             	sub    esp,0x10
c000f3fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f402:	6a 00                	push   0x0
c000f404:	68 70 04 00 c0       	push   0xc0000470
c000f409:	6a 00                	push   0x0
c000f40b:	53                   	push   ebx
c000f40c:	e8 95 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f411:	6a 00                	push   0x0
c000f413:	68 80 04 00 c0       	push   0xc0000480
c000f418:	6a 01                	push   0x1
c000f41a:	53                   	push   ebx
c000f41b:	e8 86 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f420:	83 c4 20             	add    esp,0x20
c000f423:	6a 00                	push   0x0
c000f425:	68 8a 04 00 c0       	push   0xc000048a
c000f42a:	6a 02                	push   0x2
c000f42c:	53                   	push   ebx
c000f42d:	e8 74 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f432:	6a 00                	push   0x0
c000f434:	68 94 04 00 c0       	push   0xc0000494
c000f439:	6a 03                	push   0x3
c000f43b:	53                   	push   ebx
c000f43c:	e8 65 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f441:	83 c4 20             	add    esp,0x20
c000f444:	6a 00                	push   0x0
c000f446:	68 9e 04 00 c0       	push   0xc000049e
c000f44b:	6a 04                	push   0x4
c000f44d:	53                   	push   ebx
c000f44e:	e8 53 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f453:	6a 00                	push   0x0
c000f455:	68 a8 04 00 c0       	push   0xc00004a8
c000f45a:	6a 05                	push   0x5
c000f45c:	53                   	push   ebx
c000f45d:	e8 44 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f462:	83 c4 20             	add    esp,0x20
c000f465:	6a 00                	push   0x0
c000f467:	68 b2 04 00 c0       	push   0xc00004b2
c000f46c:	6a 06                	push   0x6
c000f46e:	53                   	push   ebx
c000f46f:	e8 32 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f474:	6a 00                	push   0x0
c000f476:	68 bc 04 00 c0       	push   0xc00004bc
c000f47b:	6a 07                	push   0x7
c000f47d:	53                   	push   ebx
c000f47e:	e8 23 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f483:	83 c4 20             	add    esp,0x20
c000f486:	6a 00                	push   0x0
c000f488:	68 c6 04 00 c0       	push   0xc00004c6
c000f48d:	6a 08                	push   0x8
c000f48f:	53                   	push   ebx
c000f490:	e8 11 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f495:	6a 00                	push   0x0
c000f497:	68 ce 04 00 c0       	push   0xc00004ce
c000f49c:	6a 09                	push   0x9
c000f49e:	53                   	push   ebx
c000f49f:	e8 02 ff ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4a4:	83 c4 20             	add    esp,0x20
c000f4a7:	6a 00                	push   0x0
c000f4a9:	68 d8 04 00 c0       	push   0xc00004d8
c000f4ae:	6a 0a                	push   0xa
c000f4b0:	53                   	push   ebx
c000f4b1:	e8 f0 fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4b6:	6a 00                	push   0x0
c000f4b8:	68 e0 04 00 c0       	push   0xc00004e0
c000f4bd:	6a 0b                	push   0xb
c000f4bf:	53                   	push   ebx
c000f4c0:	e8 e1 fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4c5:	83 c4 20             	add    esp,0x20
c000f4c8:	6a 00                	push   0x0
c000f4ca:	68 e8 04 00 c0       	push   0xc00004e8
c000f4cf:	6a 0c                	push   0xc
c000f4d1:	53                   	push   ebx
c000f4d2:	e8 cf fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4d7:	6a 00                	push   0x0
c000f4d9:	68 f0 04 00 c0       	push   0xc00004f0
c000f4de:	6a 0d                	push   0xd
c000f4e0:	53                   	push   ebx
c000f4e1:	e8 c0 fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4e6:	83 c4 20             	add    esp,0x20
c000f4e9:	6a 00                	push   0x0
c000f4eb:	68 f8 04 00 c0       	push   0xc00004f8
c000f4f0:	6a 0e                	push   0xe
c000f4f2:	53                   	push   ebx
c000f4f3:	e8 ae fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f4f8:	6a 00                	push   0x0
c000f4fa:	68 00 05 00 c0       	push   0xc0000500
c000f4ff:	6a 0f                	push   0xf
c000f501:	53                   	push   ebx
c000f502:	e8 9f fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f507:	83 c4 20             	add    esp,0x20
c000f50a:	6a 00                	push   0x0
c000f50c:	68 0a 05 00 c0       	push   0xc000050a
c000f511:	6a 10                	push   0x10
c000f513:	53                   	push   ebx
c000f514:	e8 8d fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f519:	6a 00                	push   0x0
c000f51b:	68 14 05 00 c0       	push   0xc0000514
c000f520:	6a 11                	push   0x11
c000f522:	53                   	push   ebx
c000f523:	e8 7e fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f528:	83 c4 20             	add    esp,0x20
c000f52b:	6a 00                	push   0x0
c000f52d:	68 1e 05 00 c0       	push   0xc000051e
c000f532:	6a 12                	push   0x12
c000f534:	53                   	push   ebx
c000f535:	e8 6c fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f53a:	6a 01                	push   0x1
c000f53c:	68 b8 05 00 c0       	push   0xc00005b8
c000f541:	6a 60                	push   0x60
c000f543:	53                   	push   ebx
c000f544:	e8 5d fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f549:	83 c4 20             	add    esp,0x20
c000f54c:	6a 00                	push   0x0
c000f54e:	68 bf 05 00 c0       	push   0xc00005bf
c000f553:	6a 20                	push   0x20
c000f555:	53                   	push   ebx
c000f556:	e8 4b fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f55b:	6a 00                	push   0x0
c000f55d:	68 aa 05 00 c0       	push   0xc00005aa
c000f562:	6a 21                	push   0x21
c000f564:	53                   	push   ebx
c000f565:	e8 3c fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f56a:	83 c4 20             	add    esp,0x20
c000f56d:	6a 00                	push   0x0
c000f56f:	68 b1 05 00 c0       	push   0xc00005b1
c000f574:	6a 22                	push   0x22
c000f576:	53                   	push   ebx
c000f577:	e8 2a fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f57c:	6a 00                	push   0x0
c000f57e:	68 28 05 00 c0       	push   0xc0000528
c000f583:	6a 23                	push   0x23
c000f585:	53                   	push   ebx
c000f586:	e8 1b fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f58b:	83 c4 20             	add    esp,0x20
c000f58e:	6a 00                	push   0x0
c000f590:	68 32 05 00 c0       	push   0xc0000532
c000f595:	6a 24                	push   0x24
c000f597:	53                   	push   ebx
c000f598:	e8 09 fe ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f59d:	6a 00                	push   0x0
c000f59f:	68 3c 05 00 c0       	push   0xc000053c
c000f5a4:	6a 25                	push   0x25
c000f5a6:	53                   	push   ebx
c000f5a7:	e8 fa fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f5ac:	83 c4 20             	add    esp,0x20
c000f5af:	6a 00                	push   0x0
c000f5b1:	68 46 05 00 c0       	push   0xc0000546
c000f5b6:	6a 26                	push   0x26
c000f5b8:	53                   	push   ebx
c000f5b9:	e8 e8 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f5be:	6a 00                	push   0x0
c000f5c0:	68 50 05 00 c0       	push   0xc0000550
c000f5c5:	6a 27                	push   0x27
c000f5c7:	53                   	push   ebx
c000f5c8:	e8 d9 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f5cd:	83 c4 20             	add    esp,0x20
c000f5d0:	6a 00                	push   0x0
c000f5d2:	68 5a 05 00 c0       	push   0xc000055a
c000f5d7:	6a 28                	push   0x28
c000f5d9:	53                   	push   ebx
c000f5da:	e8 c7 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f5df:	6a 00                	push   0x0
c000f5e1:	68 64 05 00 c0       	push   0xc0000564
c000f5e6:	6a 29                	push   0x29
c000f5e8:	53                   	push   ebx
c000f5e9:	e8 b8 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f5ee:	83 c4 20             	add    esp,0x20
c000f5f1:	6a 00                	push   0x0
c000f5f3:	68 6e 05 00 c0       	push   0xc000056e
c000f5f8:	6a 2a                	push   0x2a
c000f5fa:	53                   	push   ebx
c000f5fb:	e8 a6 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f600:	6a 00                	push   0x0
c000f602:	68 78 05 00 c0       	push   0xc0000578
c000f607:	6a 2b                	push   0x2b
c000f609:	53                   	push   ebx
c000f60a:	e8 97 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f60f:	83 c4 20             	add    esp,0x20
c000f612:	6a 00                	push   0x0
c000f614:	68 82 05 00 c0       	push   0xc0000582
c000f619:	6a 2c                	push   0x2c
c000f61b:	53                   	push   ebx
c000f61c:	e8 85 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f621:	6a 00                	push   0x0
c000f623:	68 8c 05 00 c0       	push   0xc000058c
c000f628:	6a 2d                	push   0x2d
c000f62a:	53                   	push   ebx
c000f62b:	e8 76 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f630:	83 c4 20             	add    esp,0x20
c000f633:	6a 00                	push   0x0
c000f635:	68 96 05 00 c0       	push   0xc0000596
c000f63a:	6a 2e                	push   0x2e
c000f63c:	53                   	push   ebx
c000f63d:	e8 64 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f642:	6a 00                	push   0x0
c000f644:	68 a0 05 00 c0       	push   0xc00005a0
c000f649:	6a 2f                	push   0x2f
c000f64b:	53                   	push   ebx
c000f64c:	e8 55 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f651:	83 c4 20             	add    esp,0x20
c000f654:	6a 00                	push   0x0
c000f656:	68 f6 05 00 c0       	push   0xc00005f6
c000f65b:	6a 30                	push   0x30
c000f65d:	53                   	push   ebx
c000f65e:	e8 43 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f663:	6a 00                	push   0x0
c000f665:	68 00 06 00 c0       	push   0xc0000600
c000f66a:	6a 31                	push   0x31
c000f66c:	53                   	push   ebx
c000f66d:	e8 34 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f672:	83 c4 20             	add    esp,0x20
c000f675:	6a 00                	push   0x0
c000f677:	68 0a 06 00 c0       	push   0xc000060a
c000f67c:	6a 32                	push   0x32
c000f67e:	53                   	push   ebx
c000f67f:	e8 22 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f684:	6a 00                	push   0x0
c000f686:	68 14 06 00 c0       	push   0xc0000614
c000f68b:	6a 33                	push   0x33
c000f68d:	53                   	push   ebx
c000f68e:	e8 13 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f693:	83 c4 20             	add    esp,0x20
c000f696:	6a 00                	push   0x0
c000f698:	68 1e 06 00 c0       	push   0xc000061e
c000f69d:	6a 34                	push   0x34
c000f69f:	53                   	push   ebx
c000f6a0:	e8 01 fd ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f6a5:	6a 00                	push   0x0
c000f6a7:	68 28 06 00 c0       	push   0xc0000628
c000f6ac:	6a 35                	push   0x35
c000f6ae:	53                   	push   ebx
c000f6af:	e8 f2 fc ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f6b4:	83 c4 20             	add    esp,0x20
c000f6b7:	6a 00                	push   0x0
c000f6b9:	68 32 06 00 c0       	push   0xc0000632
c000f6be:	6a 36                	push   0x36
c000f6c0:	53                   	push   ebx
c000f6c1:	e8 e0 fc ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f6c6:	6a 00                	push   0x0
c000f6c8:	68 3c 06 00 c0       	push   0xc000063c
c000f6cd:	6a 37                	push   0x37
c000f6cf:	53                   	push   ebx
c000f6d0:	e8 d1 fc ff ff       	call   c000f3a6 <IDT::addEntry(int, void (*)(), bool)>
c000f6d5:	83 c4 1c             	add    esp,0x1c
c000f6d8:	6a 03                	push   0x3
c000f6da:	6a 02                	push   0x2
c000f6dc:	ff 35 d0 f3 02 c0    	push   DWORD PTR ds:0xc002f3d0
c000f6e2:	e8 31 28 00 00       	call   c0011f18 <VAS::allocatePages(int, int)>
c000f6e7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f6ee:	89 c6                	mov    esi,eax
c000f6f0:	e8 0d 02 00 00       	call   c000f902 <malloc>
c000f6f5:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6fb:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6fe:	89 c7                	mov    edi,eax
c000f700:	e8 0b 18 00 00       	call   c0010f10 <TSS::TSS()>
c000f705:	83 c4 0c             	add    esp,0xc
c000f708:	68 c6 04 00 c0       	push   0xc00004c6
c000f70d:	56                   	push   esi
c000f70e:	57                   	push   edi
c000f70f:	e8 3c 18 00 00       	call   c0010f50 <TSS::setup(unsigned long, unsigned long)>
c000f714:	89 c6                	mov    esi,eax
c000f716:	58                   	pop    eax
c000f717:	5a                   	pop    edx
c000f718:	6a 00                	push   0x0
c000f71a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f71e:	50                   	push   eax
c000f71f:	e8 dc fb ff ff       	call   c000f300 <IDTEntry::IDTEntry(bool)>
c000f724:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f728:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f72d:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f734:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f73a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f73e:	80 ce 05             	or     dh,0x5
c000f741:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f744:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f748:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f74c:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f74f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f752:	e8 87 fc ff ff       	call   c000f3de <IDT::flush()>
c000f757:	83 c4 20             	add    esp,0x20
c000f75a:	5b                   	pop    ebx
c000f75b:	5e                   	pop    esi
c000f75c:	5f                   	pop    edi
c000f75d:	c3                   	ret    

c000f75e <sbrk>:
c000f75e:	55                   	push   ebp
c000f75f:	57                   	push   edi
c000f760:	56                   	push   esi
c000f761:	53                   	push   ebx
c000f762:	83 ec 1c             	sub    esp,0x1c
c000f765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f769:	85 c0                	test   eax,eax
c000f76b:	74 3e                	je     c000f7ab <sbrk+0x4d>
c000f76d:	78 43                	js     c000f7b2 <sbrk+0x54>
c000f76f:	8b 15 68 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f268
c000f775:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f77b:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f781:	83 e2 01             	and    edx,0x1
c000f784:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f788:	8b 0d 2c e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e02c
c000f78e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f792:	05 ff 0f 00 00       	add    eax,0xfff
c000f797:	89 c2                	mov    edx,eax
c000f799:	78 2f                	js     c000f7ca <sbrk+0x6c>
c000f79b:	c1 fa 0c             	sar    edx,0xc
c000f79e:	89 d7                	mov    edi,edx
c000f7a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f7a4:	be 00 00 00 00       	mov    esi,0x0
c000f7a9:	eb 36                	jmp    c000f7e1 <sbrk+0x83>
c000f7ab:	a1 2c e0 02 c0       	mov    eax,ds:0xc002e02c
c000f7b0:	eb 73                	jmp    c000f825 <sbrk+0xc7>
c000f7b2:	83 ec 08             	sub    esp,0x8
c000f7b5:	50                   	push   eax
c000f7b6:	68 08 ad 02 c0       	push   0xc002ad08
c000f7bb:	e8 25 32 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000f7c0:	83 c4 10             	add    esp,0x10
c000f7c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7c8:	eb 5b                	jmp    c000f825 <sbrk+0xc7>
c000f7ca:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7d0:	eb c9                	jmp    c000f79b <sbrk+0x3d>
c000f7d2:	81 05 2c e0 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e02c,0x1000
c000f7dc:	46                   	inc    esi
c000f7dd:	39 f7                	cmp    edi,esi
c000f7df:	74 33                	je     c000f814 <sbrk+0xb6>
c000f7e1:	8b 1d d0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3d0
c000f7e7:	8b 2d 2c e0 02 c0    	mov    ebp,DWORD PTR ds:0xc002e02c
c000f7ed:	e8 b4 04 00 00       	call   c000fca6 <Phys::allocatePage()>
c000f7f2:	68 01 0c 00 00       	push   0xc01
c000f7f7:	55                   	push   ebp
c000f7f8:	50                   	push   eax
c000f7f9:	53                   	push   ebx
c000f7fa:	e8 17 26 00 00       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7ff:	83 c4 10             	add    esp,0x10
c000f802:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f807:	74 c9                	je     c000f7d2 <sbrk+0x74>
c000f809:	8b 1d 2c e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e02c
c000f80f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f812:	eb be                	jmp    c000f7d2 <sbrk+0x74>
c000f814:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f819:	75 12                	jne    c000f82d <sbrk+0xcf>
c000f81b:	0f 20 d8             	mov    eax,cr3
c000f81e:	0f 22 d8             	mov    cr3,eax
c000f821:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f825:	83 c4 1c             	add    esp,0x1c
c000f828:	5b                   	pop    ebx
c000f829:	5e                   	pop    esi
c000f82a:	5f                   	pop    edi
c000f82b:	5d                   	pop    ebp
c000f82c:	c3                   	ret    
c000f82d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f831:	89 cb                	mov    ebx,ecx
c000f833:	c1 eb 0a             	shr    ebx,0xa
c000f836:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f83c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f846:	c1 e0 0c             	shl    eax,0xc
c000f849:	01 c8                	add    eax,ecx
c000f84b:	c1 e8 0a             	shr    eax,0xa
c000f84e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f853:	2d 00 00 40 00       	sub    eax,0x400000
c000f858:	39 c3                	cmp    ebx,eax
c000f85a:	77 c5                	ja     c000f821 <sbrk+0xc3>
c000f85c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f85f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f865:	39 d8                	cmp    eax,ebx
c000f867:	73 f3                	jae    c000f85c <sbrk+0xfe>
c000f869:	eb b6                	jmp    c000f821 <sbrk+0xc3>

c000f86b <mmap>:
c000f86b:	83 ec 18             	sub    esp,0x18
c000f86e:	68 38 ad 02 c0       	push   0xc002ad38
c000f873:	e8 8d ab 00 00       	call   c001a405 <Krnl::panic(char const*)>
c000f878:	b8 00 00 00 00       	mov    eax,0x0
c000f87d:	83 c4 1c             	add    esp,0x1c
c000f880:	c3                   	ret    

c000f881 <munmap>:
c000f881:	83 ec 18             	sub    esp,0x18
c000f884:	68 3d ad 02 c0       	push   0xc002ad3d
c000f889:	e8 77 ab 00 00       	call   c001a405 <Krnl::panic(char const*)>
c000f88e:	b8 00 00 00 00       	mov    eax,0x0
c000f893:	83 c4 1c             	add    esp,0x1c
c000f896:	c3                   	ret    

c000f897 <liballoc_lock()>:
c000f897:	fa                   	cli    
c000f898:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c000f89e:	b8 00 00 00 00       	mov    eax,0x0
c000f8a3:	c3                   	ret    

c000f8a4 <liballoc_unlock()>:
c000f8a4:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c000f8a9:	48                   	dec    eax
c000f8aa:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c000f8af:	75 01                	jne    c000f8b2 <liballoc_unlock()+0xe>
c000f8b1:	fb                   	sti    
c000f8b2:	b8 00 00 00 00       	mov    eax,0x0
c000f8b7:	c3                   	ret    

c000f8b8 <liballoc_alloc(int)>:
c000f8b8:	83 ec 10             	sub    esp,0x10
c000f8bb:	68 01 08 00 00       	push   0x801
c000f8c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8c4:	ff 35 d0 f3 02 c0    	push   DWORD PTR ds:0xc002f3d0
c000f8ca:	e8 49 26 00 00       	call   c0011f18 <VAS::allocatePages(int, int)>
c000f8cf:	83 c4 1c             	add    esp,0x1c
c000f8d2:	c3                   	ret    

c000f8d3 <liballoc_free(void*, int)>:
c000f8d3:	83 ec 14             	sub    esp,0x14
c000f8d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8da:	ff 35 d0 f3 02 c0    	push   DWORD PTR ds:0xc002f3d0
c000f8e0:	e8 dd 22 00 00       	call   c0011bc2 <VAS::freeAllocatedPages(unsigned long)>
c000f8e5:	b8 00 00 00 00       	mov    eax,0x0
c000f8ea:	83 c4 1c             	add    esp,0x1c
c000f8ed:	c3                   	ret    

c000f8ee <realloc>:
c000f8ee:	83 ec 14             	sub    esp,0x14
c000f8f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8f9:	e8 2e 1d ff ff       	call   c000162c <dlrealloc>
c000f8fe:	83 c4 1c             	add    esp,0x1c
c000f901:	c3                   	ret    

c000f902 <malloc>:
c000f902:	83 ec 18             	sub    esp,0x18
c000f905:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f909:	e8 e1 17 ff ff       	call   c00010ef <dlmalloc>
c000f90e:	83 c4 1c             	add    esp,0x1c
c000f911:	c3                   	ret    

c000f912 <free>:
c000f912:	83 ec 18             	sub    esp,0x18
c000f915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f919:	e8 76 14 ff ff       	call   c0000d94 <dlfree>
c000f91e:	83 c4 1c             	add    esp,0x1c
c000f921:	c3                   	ret    

c000f922 <rfree>:
c000f922:	83 ec 18             	sub    esp,0x18
c000f925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f929:	e8 66 14 ff ff       	call   c0000d94 <dlfree>
c000f92e:	83 c4 1c             	add    esp,0x1c
c000f931:	c3                   	ret    

c000f932 <calloc>:
c000f932:	56                   	push   esi
c000f933:	53                   	push   ebx
c000f934:	83 ec 10             	sub    esp,0x10
c000f937:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f93b:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f940:	53                   	push   ebx
c000f941:	e8 bc ff ff ff       	call   c000f902 <malloc>
c000f946:	89 c6                	mov    esi,eax
c000f948:	83 c4 0c             	add    esp,0xc
c000f94b:	53                   	push   ebx
c000f94c:	6a 00                	push   0x0
c000f94e:	50                   	push   eax
c000f94f:	e8 fc 0d ff ff       	call   c0000750 <memset>
c000f954:	89 f0                	mov    eax,esi
c000f956:	83 c4 14             	add    esp,0x14
c000f959:	5b                   	pop    ebx
c000f95a:	5e                   	pop    esi
c000f95b:	c3                   	ret    

c000f95c <Krnl::setBootMessage(char const*)>:
c000f95c:	57                   	push   edi
c000f95d:	56                   	push   esi
c000f95e:	53                   	push   ebx
c000f95f:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f965:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f96c:	68 9e 00 00 00       	push   0x9e
c000f971:	6a 00                	push   0x0
c000f973:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f977:	56                   	push   esi
c000f978:	e8 d3 0d ff ff       	call   c0000750 <memset>
c000f97d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f980:	e8 e7 0d ff ff       	call   c000076c <strlen>
c000f985:	ba 50 00 00 00       	mov    edx,0x50
c000f98a:	83 c4 10             	add    esp,0x10
c000f98d:	29 c2                	sub    edx,eax
c000f98f:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f993:	d1 ea                	shr    edx,1
c000f995:	84 c0                	test   al,al
c000f997:	74 19                	je     c000f9b2 <Krnl::setBootMessage(char const*)+0x56>
c000f999:	01 d2                	add    edx,edx
c000f99b:	43                   	inc    ebx
c000f99c:	01 f2                	add    edx,esi
c000f99e:	80 cc 0f             	or     ah,0xf
c000f9a1:	83 c2 02             	add    edx,0x2
c000f9a4:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f9a8:	43                   	inc    ebx
c000f9a9:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f9ae:	84 c0                	test   al,al
c000f9b0:	75 ec                	jne    c000f99e <Krnl::setBootMessage(char const*)+0x42>
c000f9b2:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f9b7:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f9bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9be:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f9c4:	5b                   	pop    ebx
c000f9c5:	5e                   	pop    esi
c000f9c6:	5f                   	pop    edi
c000f9c7:	c3                   	ret    

c000f9c8 <kernel_main>:
c000f9c8:	57                   	push   edi
c000f9c9:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9ce:	56                   	push   esi
c000f9cf:	89 fa                	mov    edx,edi
c000f9d1:	53                   	push   ebx
c000f9d2:	31 f6                	xor    esi,esi
c000f9d4:	83 ec 2c             	sub    esp,0x2c
c000f9d7:	89 f0                	mov    eax,esi
c000f9d9:	ee                   	out    dx,al
c000f9da:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9df:	b0 80                	mov    al,0x80
c000f9e1:	89 da                	mov    edx,ebx
c000f9e3:	ee                   	out    dx,al
c000f9e4:	b1 03                	mov    cl,0x3
c000f9e6:	ba f8 03 00 00       	mov    edx,0x3f8
c000f9eb:	88 c8                	mov    al,cl
c000f9ed:	ee                   	out    dx,al
c000f9ee:	89 f0                	mov    eax,esi
c000f9f0:	89 fa                	mov    edx,edi
c000f9f2:	ee                   	out    dx,al
c000f9f3:	88 c8                	mov    al,cl
c000f9f5:	89 da                	mov    edx,ebx
c000f9f7:	ee                   	out    dx,al
c000f9f8:	b0 c7                	mov    al,0xc7
c000f9fa:	ba fa 03 00 00       	mov    edx,0x3fa
c000f9ff:	ee                   	out    dx,al
c000fa00:	b0 0b                	mov    al,0xb
c000fa02:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa07:	ee                   	out    dx,al
c000fa08:	68 44 ad 02 c0       	push   0xc002ad44
c000fa0d:	e8 d3 2f 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000fa12:	e8 11 09 00 00       	call   c0010328 <installVgaTextImplementation()>
c000fa17:	0f b6 05 40 e0 02 c0 	movzx  eax,BYTE PTR ds:0xc002e040
c000fa1e:	83 c4 10             	add    esp,0x10
c000fa21:	84 c0                	test   al,al
c000fa23:	74 6c                	je     c000fa91 <kernel_main+0xc9>
c000fa25:	31 db                	xor    ebx,ebx
c000fa27:	bf 0a 00 00 00       	mov    edi,0xa
c000fa2c:	be 05 00 00 00       	mov    esi,0x5
c000fa31:	31 c9                	xor    ecx,ecx
c000fa33:	eb 2a                	jmp    c000fa5f <kernel_main+0x97>
c000fa35:	3c 0d                	cmp    al,0xd
c000fa37:	74 1a                	je     c000fa53 <kernel_main+0x8b>
c000fa39:	3c 0a                	cmp    al,0xa
c000fa3b:	74 40                	je     c000fa7d <kernel_main+0xb5>
c000fa3d:	8d 14 b6             	lea    edx,[esi+esi*4]
c000fa40:	80 cc 0e             	or     ah,0xe
c000fa43:	c1 e2 04             	shl    edx,0x4
c000fa46:	01 ca                	add    edx,ecx
c000fa48:	41                   	inc    ecx
c000fa49:	01 fa                	add    edx,edi
c000fa4b:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000fa53:	43                   	inc    ebx
c000fa54:	0f b6 83 40 e0 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd1fc0]
c000fa5b:	84 c0                	test   al,al
c000fa5d:	74 32                	je     c000fa91 <kernel_main+0xc9>
c000fa5f:	80 b9 76 e0 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd1f8a],0xdb
c000fa66:	75 cd                	jne    c000fa35 <kernel_main+0x6d>
c000fa68:	0f b6 91 75 e0 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd1f8b]
c000fa6f:	83 e2 fe             	and    edx,0xfffffffe
c000fa72:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fa78:	75 bb                	jne    c000fa35 <kernel_main+0x6d>
c000fa7a:	47                   	inc    edi
c000fa7b:	eb b8                	jmp    c000fa35 <kernel_main+0x6d>
c000fa7d:	43                   	inc    ebx
c000fa7e:	46                   	inc    esi
c000fa7f:	31 c9                	xor    ecx,ecx
c000fa81:	0f b6 83 40 e0 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd1fc0]
c000fa88:	bf 0a 00 00 00       	mov    edi,0xa
c000fa8d:	84 c0                	test   al,al
c000fa8f:	75 ce                	jne    c000fa5f <kernel_main+0x97>
c000fa91:	83 ec 0c             	sub    esp,0xc
c000fa94:	68 5c ad 02 c0       	push   0xc002ad5c
c000fa99:	e8 be fe ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c000fa9e:	a1 00 05 00 00       	mov    eax,ds:0x500
c000faa3:	a3 80 f2 02 c0       	mov    ds:0xc002f280,eax
c000faa8:	a1 24 05 00 00       	mov    eax,ds:0x524
c000faad:	05 ff 0f 00 00       	add    eax,0xfff
c000fab2:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fab7:	89 04 24             	mov    DWORD PTR [esp],eax
c000faba:	e8 30 03 00 00       	call   c000fdef <Phys::physicalMemorySetup(unsigned int)>
c000fabf:	e8 da 1c 00 00       	call   c001179e <Virt::virtualMemorySetup()>
c000fac4:	58                   	pop    eax
c000fac5:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fac9:	53                   	push   ebx
c000faca:	e8 1b 1f 00 00       	call   c00119ea <VAS::VAS()>
c000facf:	89 1d d0 f3 02 c0    	mov    DWORD PTR ds:0xc002f3d0,ebx
c000fad5:	e8 46 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fada:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fae1:	e8 1c fe ff ff       	call   c000f902 <malloc>
c000fae6:	89 04 24             	mov    DWORD PTR [esp],eax
c000fae9:	89 c6                	mov    esi,eax
c000faeb:	e8 e6 ec ff ff       	call   c000e7d6 <Computer::Computer()>
c000faf0:	6a 00                	push   0x0
c000faf2:	89 35 68 f2 02 c0    	mov    DWORD PTR ds:0xc002f268,esi
c000faf8:	6a 00                	push   0x0
c000fafa:	6a 00                	push   0x0
c000fafc:	56                   	push   esi
c000fafd:	e8 24 f4 ff ff       	call   c000ef26 <Computer::open(int, int, void*)>
c000fb02:	83 c4 14             	add    esp,0x14
c000fb05:	53                   	push   ebx
c000fb06:	e8 8f 21 00 00       	call   c0011c9a <VAS::~VAS()>
c000fb0b:	83 c4 30             	add    esp,0x30
c000fb0e:	5b                   	pop    ebx
c000fb0f:	5e                   	pop    esi
c000fb10:	5f                   	pop    edi
c000fb11:	c3                   	ret    

c000fb12 <Phys::allocateDMA(unsigned long)>:
c000fb12:	55                   	push   ebp
c000fb13:	31 d2                	xor    edx,edx
c000fb15:	57                   	push   edi
c000fb16:	31 ed                	xor    ebp,ebp
c000fb18:	56                   	push   esi
c000fb19:	31 c9                	xor    ecx,ecx
c000fb1b:	53                   	push   ebx
c000fb1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb20:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fb26:	31 c0                	xor    eax,eax
c000fb28:	c1 ee 0c             	shr    esi,0xc
c000fb2b:	eb 17                	jmp    c000fb44 <Phys::allocateDMA(unsigned long)+0x32>
c000fb2d:	85 c9                	test   ecx,ecx
c000fb2f:	75 04                	jne    c000fb35 <Phys::allocateDMA(unsigned long)+0x23>
c000fb31:	89 d5                	mov    ebp,edx
c000fb33:	89 d0                	mov    eax,edx
c000fb35:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb38:	39 de                	cmp    esi,ebx
c000fb3a:	74 20                	je     c000fb5c <Phys::allocateDMA(unsigned long)+0x4a>
c000fb3c:	42                   	inc    edx
c000fb3d:	89 d9                	mov    ecx,ebx
c000fb3f:	83 fa 2f             	cmp    edx,0x2f
c000fb42:	7f 11                	jg     c000fb55 <Phys::allocateDMA(unsigned long)+0x43>
c000fb44:	80 ba c0 f2 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0d40],0x0
c000fb4b:	74 e0                	je     c000fb2d <Phys::allocateDMA(unsigned long)+0x1b>
c000fb4d:	31 c9                	xor    ecx,ecx
c000fb4f:	42                   	inc    edx
c000fb50:	83 fa 2f             	cmp    edx,0x2f
c000fb53:	7e ef                	jle    c000fb44 <Phys::allocateDMA(unsigned long)+0x32>
c000fb55:	5b                   	pop    ebx
c000fb56:	31 c0                	xor    eax,eax
c000fb58:	5e                   	pop    esi
c000fb59:	5f                   	pop    edi
c000fb5a:	5d                   	pop    ebp
c000fb5b:	c3                   	ret    
c000fb5c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb5f:	89 d7                	mov    edi,edx
c000fb61:	4f                   	dec    edi
c000fb62:	79 03                	jns    c000fb67 <Phys::allocateDMA(unsigned long)+0x55>
c000fb64:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb67:	c1 ff 04             	sar    edi,0x4
c000fb6a:	89 c2                	mov    edx,eax
c000fb6c:	c1 fa 04             	sar    edx,0x4
c000fb6f:	39 fa                	cmp    edx,edi
c000fb71:	75 2f                	jne    c000fba2 <Phys::allocateDMA(unsigned long)+0x90>
c000fb73:	85 db                	test   ebx,ebx
c000fb75:	74 1a                	je     c000fb91 <Phys::allocateDMA(unsigned long)+0x7f>
c000fb77:	be c0 f2 02 c0       	mov    esi,0xc002f2c0
c000fb7c:	8d 90 c0 f2 02 c0    	lea    edx,[eax-0x3ffd0d40]
c000fb82:	f7 d6                	not    esi
c000fb84:	29 c6                	sub    esi,eax
c000fb86:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb89:	42                   	inc    edx
c000fb8a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb8d:	39 d9                	cmp    ecx,ebx
c000fb8f:	7f f5                	jg     c000fb86 <Phys::allocateDMA(unsigned long)+0x74>
c000fb91:	85 ff                	test   edi,edi
c000fb93:	74 13                	je     c000fba8 <Phys::allocateDMA(unsigned long)+0x96>
c000fb95:	5b                   	pop    ebx
c000fb96:	05 50 20 0c 00       	add    eax,0xc2050
c000fb9b:	5e                   	pop    esi
c000fb9c:	c1 e0 0c             	shl    eax,0xc
c000fb9f:	5f                   	pop    edi
c000fba0:	5d                   	pop    ebp
c000fba1:	c3                   	ret    
c000fba2:	89 ea                	mov    edx,ebp
c000fba4:	31 c9                	xor    ecx,ecx
c000fba6:	eb a7                	jmp    c000fb4f <Phys::allocateDMA(unsigned long)+0x3d>
c000fba8:	5b                   	pop    ebx
c000fba9:	c1 e0 0c             	shl    eax,0xc
c000fbac:	5e                   	pop    esi
c000fbad:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fbb2:	5f                   	pop    edi
c000fbb3:	5d                   	pop    ebp
c000fbb4:	c3                   	ret    

c000fbb5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fbb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fbbd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fbc3:	c1 e9 0c             	shr    ecx,0xc
c000fbc6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fbcb:	76 25                	jbe    c000fbf2 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fbcd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fbd2:	c1 e8 0c             	shr    eax,0xc
c000fbd5:	8d 50 10             	lea    edx,[eax+0x10]
c000fbd8:	85 c9                	test   ecx,ecx
c000fbda:	74 15                	je     c000fbf1 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbdc:	8d 82 c0 f2 02 c0    	lea    eax,[edx-0x3ffd0d40]
c000fbe2:	8d 94 11 c0 f2 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0d40]
c000fbe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbec:	40                   	inc    eax
c000fbed:	39 d0                	cmp    eax,edx
c000fbef:	75 f8                	jne    c000fbe9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbf1:	c3                   	ret    
c000fbf2:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbf8:	c1 ea 0c             	shr    edx,0xc
c000fbfb:	eb db                	jmp    c000fbd8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbfd <Phys::setPageState(unsigned long, bool)>:
c000fbfd:	56                   	push   esi
c000fbfe:	ba 01 00 00 00       	mov    edx,0x1
c000fc03:	53                   	push   ebx
c000fc04:	8b 35 84 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e184
c000fc0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc12:	89 c8                	mov    eax,ecx
c000fc14:	83 e1 07             	and    ecx,0x7
c000fc17:	c1 e8 03             	shr    eax,0x3
c000fc1a:	d3 e3                	shl    ebx,cl
c000fc1c:	01 c6                	add    esi,eax
c000fc1e:	d3 e2                	shl    edx,cl
c000fc20:	f7 d2                	not    edx
c000fc22:	20 16                	and    BYTE PTR [esi],dl
c000fc24:	03 05 84 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e184
c000fc2a:	08 18                	or     BYTE PTR [eax],bl
c000fc2c:	5b                   	pop    ebx
c000fc2d:	5e                   	pop    esi
c000fc2e:	c3                   	ret    

c000fc2f <Phys::getPageState(unsigned long)>:
c000fc2f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc33:	8b 15 84 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e184
c000fc39:	89 c8                	mov    eax,ecx
c000fc3b:	83 e1 07             	and    ecx,0x7
c000fc3e:	c1 e8 03             	shr    eax,0x3
c000fc41:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc45:	d3 f8                	sar    eax,cl
c000fc47:	83 e0 01             	and    eax,0x1
c000fc4a:	c3                   	ret    

c000fc4b <Phys::freePage(unsigned long)>:
c000fc4b:	53                   	push   ebx
c000fc4c:	83 ec 08             	sub    esp,0x8
c000fc4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc53:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000fc58:	76 3a                	jbe    c000fc94 <Phys::freePage(unsigned long)+0x49>
c000fc5a:	c1 e8 0c             	shr    eax,0xc
c000fc5d:	50                   	push   eax
c000fc5e:	89 c3                	mov    ebx,eax
c000fc60:	e8 ca ff ff ff       	call   c000fc2f <Phys::getPageState(unsigned long)>
c000fc65:	5a                   	pop    edx
c000fc66:	84 c0                	test   al,al
c000fc68:	74 19                	je     c000fc83 <Phys::freePage(unsigned long)+0x38>
c000fc6a:	83 ec 08             	sub    esp,0x8
c000fc6d:	ff 0d b0 f2 02 c0    	dec    DWORD PTR ds:0xc002f2b0
c000fc73:	6a 00                	push   0x0
c000fc75:	53                   	push   ebx
c000fc76:	e8 82 ff ff ff       	call   c000fbfd <Phys::setPageState(unsigned long, bool)>
c000fc7b:	83 c4 10             	add    esp,0x10
c000fc7e:	83 c4 08             	add    esp,0x8
c000fc81:	5b                   	pop    ebx
c000fc82:	c3                   	ret    
c000fc83:	c7 44 24 10 7b ad 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ad7b
c000fc8b:	83 c4 08             	add    esp,0x8
c000fc8e:	5b                   	pop    ebx
c000fc8f:	e9 71 a7 00 00       	jmp    c001a405 <Krnl::panic(char const*)>
c000fc94:	68 00 10 00 00       	push   0x1000
c000fc99:	50                   	push   eax
c000fc9a:	e8 16 ff ff ff       	call   c000fbb5 <Phys::freeDMA(unsigned long, unsigned long)>
c000fc9f:	59                   	pop    ecx
c000fca0:	5b                   	pop    ebx
c000fca1:	83 c4 08             	add    esp,0x8
c000fca4:	5b                   	pop    ebx
c000fca5:	c3                   	ret    

c000fca6 <Phys::allocatePage()>:
c000fca6:	56                   	push   esi
c000fca7:	53                   	push   ebx
c000fca8:	51                   	push   ecx
c000fca9:	8b 35 a4 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f2a4
c000fcaf:	89 f3                	mov    ebx,esi
c000fcb1:	eb 0a                	jmp    c000fcbd <Phys::allocatePage()+0x17>
c000fcb3:	89 1d a4 f2 02 c0    	mov    DWORD PTR ds:0xc002f2a4,ebx
c000fcb9:	39 de                	cmp    esi,ebx
c000fcbb:	74 24                	je     c000fce1 <Phys::allocatePage()+0x3b>
c000fcbd:	53                   	push   ebx
c000fcbe:	e8 6c ff ff ff       	call   c000fc2f <Phys::getPageState(unsigned long)>
c000fcc3:	5a                   	pop    edx
c000fcc4:	84 c0                	test   al,al
c000fcc6:	74 77                	je     c000fd3f <Phys::allocatePage()+0x99>
c000fcc8:	43                   	inc    ebx
c000fcc9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fccf:	75 e2                	jne    c000fcb3 <Phys::allocatePage()+0xd>
c000fcd1:	31 db                	xor    ebx,ebx
c000fcd3:	c7 05 a4 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f2a4,0x0
c000fcdd:	39 de                	cmp    esi,ebx
c000fcdf:	75 dc                	jne    c000fcbd <Phys::allocatePage()+0x17>
c000fce1:	83 ec 0c             	sub    esp,0xc
c000fce4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fce9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fcec:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fcf2:	e8 1b 2a 00 00       	call   c0012712 <VAS::scanForEviction()>
c000fcf7:	83 c4 10             	add    esp,0x10
c000fcfa:	85 c0                	test   eax,eax
c000fcfc:	75 59                	jne    c000fd57 <Phys::allocatePage()+0xb1>
c000fcfe:	83 ec 0c             	sub    esp,0xc
c000fd01:	68 91 ad 02 c0       	push   0xc002ad91
c000fd06:	e8 da 2c 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000fd0b:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fd12:	e8 fb fd ff ff       	call   c000fb12 <Phys::allocateDMA(unsigned long)>
c000fd17:	83 c4 10             	add    esp,0x10
c000fd1a:	85 c0                	test   eax,eax
c000fd1c:	75 39                	jne    c000fd57 <Phys::allocatePage()+0xb1>
c000fd1e:	83 ec 0c             	sub    esp,0xc
c000fd21:	68 a2 ad 02 c0       	push   0xc002ada2
c000fd26:	e8 da a6 00 00       	call   c001a405 <Krnl::panic(char const*)>
c000fd2b:	83 c4 10             	add    esp,0x10
c000fd2e:	8b 1d a4 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2a4
c000fd34:	53                   	push   ebx
c000fd35:	e8 f5 fe ff ff       	call   c000fc2f <Phys::getPageState(unsigned long)>
c000fd3a:	5a                   	pop    edx
c000fd3b:	84 c0                	test   al,al
c000fd3d:	75 89                	jne    c000fcc8 <Phys::allocatePage()+0x22>
c000fd3f:	6a 01                	push   0x1
c000fd41:	53                   	push   ebx
c000fd42:	e8 b6 fe ff ff       	call   c000fbfd <Phys::setPageState(unsigned long, bool)>
c000fd47:	a1 a4 f2 02 c0       	mov    eax,ds:0xc002f2a4
c000fd4c:	59                   	pop    ecx
c000fd4d:	ff 05 b0 f2 02 c0    	inc    DWORD PTR ds:0xc002f2b0
c000fd53:	c1 e0 0c             	shl    eax,0xc
c000fd56:	5b                   	pop    ebx
c000fd57:	5a                   	pop    edx
c000fd58:	5b                   	pop    ebx
c000fd59:	5e                   	pop    esi
c000fd5a:	c3                   	ret    

c000fd5b <Phys::allocateContiguousPages(int)>:
c000fd5b:	57                   	push   edi
c000fd5c:	56                   	push   esi
c000fd5d:	53                   	push   ebx
c000fd5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fd62:	fa                   	cli    
c000fd63:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c000fd69:	31 db                	xor    ebx,ebx
c000fd6b:	85 db                	test   ebx,ebx
c000fd6d:	75 11                	jne    c000fd80 <Phys::allocateContiguousPages(int)+0x25>
c000fd6f:	e8 32 ff ff ff       	call   c000fca6 <Phys::allocatePage()>
c000fd74:	83 fe 01             	cmp    esi,0x1
c000fd77:	89 c7                	mov    edi,eax
c000fd79:	74 21                	je     c000fd9c <Phys::allocateContiguousPages(int)+0x41>
c000fd7b:	bb 01 00 00 00       	mov    ebx,0x1
c000fd80:	e8 21 ff ff ff       	call   c000fca6 <Phys::allocatePage()>
c000fd85:	89 da                	mov    edx,ebx
c000fd87:	c1 e2 0c             	shl    edx,0xc
c000fd8a:	01 fa                	add    edx,edi
c000fd8c:	39 c2                	cmp    edx,eax
c000fd8e:	74 20                	je     c000fdb0 <Phys::allocateContiguousPages(int)+0x55>
c000fd90:	bb 01 00 00 00       	mov    ebx,0x1
c000fd95:	89 c7                	mov    edi,eax
c000fd97:	83 fe 01             	cmp    esi,0x1
c000fd9a:	75 e4                	jne    c000fd80 <Phys::allocateContiguousPages(int)+0x25>
c000fd9c:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c000fda1:	48                   	dec    eax
c000fda2:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c000fda7:	75 01                	jne    c000fdaa <Phys::allocateContiguousPages(int)+0x4f>
c000fda9:	fb                   	sti    
c000fdaa:	89 f8                	mov    eax,edi
c000fdac:	5b                   	pop    ebx
c000fdad:	5e                   	pop    esi
c000fdae:	5f                   	pop    edi
c000fdaf:	c3                   	ret    
c000fdb0:	43                   	inc    ebx
c000fdb1:	39 f3                	cmp    ebx,esi
c000fdb3:	75 b6                	jne    c000fd6b <Phys::allocateContiguousPages(int)+0x10>
c000fdb5:	eb e5                	jmp    c000fd9c <Phys::allocateContiguousPages(int)+0x41>

c000fdb7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fdb7:	56                   	push   esi
c000fdb8:	53                   	push   ebx
c000fdb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdbd:	39 1d a8 f2 02 c0    	cmp    DWORD PTR ds:0xc002f2a8,ebx
c000fdc3:	73 06                	jae    c000fdcb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fdc5:	89 1d a8 f2 02 c0    	mov    DWORD PTR ds:0xc002f2a8,ebx
c000fdcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdcf:	c1 eb 0c             	shr    ebx,0xc
c000fdd2:	c1 e8 0c             	shr    eax,0xc
c000fdd5:	39 d8                	cmp    eax,ebx
c000fdd7:	73 13                	jae    c000fdec <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fdd9:	6a 00                	push   0x0
c000fddb:	8d 70 01             	lea    esi,[eax+0x1]
c000fdde:	50                   	push   eax
c000fddf:	e8 19 fe ff ff       	call   c000fbfd <Phys::setPageState(unsigned long, bool)>
c000fde4:	5a                   	pop    edx
c000fde5:	89 f0                	mov    eax,esi
c000fde7:	59                   	pop    ecx
c000fde8:	39 f3                	cmp    ebx,esi
c000fdea:	75 ed                	jne    c000fdd9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fdec:	5b                   	pop    ebx
c000fded:	5e                   	pop    esi
c000fdee:	c3                   	ret    

c000fdef <Phys::physicalMemorySetup(unsigned int)>:
c000fdef:	55                   	push   ebp
c000fdf0:	57                   	push   edi
c000fdf1:	56                   	push   esi
c000fdf2:	53                   	push   ebx
c000fdf3:	31 db                	xor    ebx,ebx
c000fdf5:	83 ec 40             	sub    esp,0x40
c000fdf8:	6a 30                	push   0x30
c000fdfa:	6a 00                	push   0x0
c000fdfc:	68 c0 f2 02 c0       	push   0xc002f2c0
c000fe01:	e8 4a 09 ff ff       	call   c0000750 <memset>
c000fe06:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe0a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe0f:	05 00 10 00 00       	add    eax,0x1000
c000fe14:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe18:	83 c4 10             	add    esp,0x10
c000fe1b:	83 ec 08             	sub    esp,0x8
c000fe1e:	6a 01                	push   0x1
c000fe20:	53                   	push   ebx
c000fe21:	43                   	inc    ebx
c000fe22:	e8 d6 fd ff ff       	call   c000fbfd <Phys::setPageState(unsigned long, bool)>
c000fe27:	83 c4 10             	add    esp,0x10
c000fe2a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe30:	75 e9                	jne    c000fe1b <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe32:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe39:	66 85 c0             	test   ax,ax
c000fe3c:	0f 84 8e 01 00 00    	je     c000ffd0 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe42:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe46:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe52:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe5b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe63:	eb 15                	jmp    c000fe7a <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe65:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe69:	83 c3 18             	add    ebx,0x18
c000fe6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe70:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe74:	0f 84 66 01 00 00    	je     c000ffe0 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe7a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe7d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe80:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe8b:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe8d:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe90:	01 f0                	add    eax,esi
c000fe92:	55                   	push   ebp
c000fe93:	11 fa                	adc    edx,edi
c000fe95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe99:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fe9d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fea1:	56                   	push   esi
c000fea2:	68 dc ad 02 c0       	push   0xc002addc
c000fea7:	e8 39 2b 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000feac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feb0:	83 c4 10             	add    esp,0x10
c000feb3:	09 f8                	or     eax,edi
c000feb5:	0f 85 25 01 00 00    	jne    c000ffe0 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000febb:	4d                   	dec    ebp
c000febc:	75 a7                	jne    c000fe65 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000febe:	ba 00 00 08 00       	mov    edx,0x80000
c000fec3:	89 c1                	mov    ecx,eax
c000fec5:	39 f2                	cmp    edx,esi
c000fec7:	19 f9                	sbb    ecx,edi
c000fec9:	0f 82 a7 00 00 00    	jb     c000ff76 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fecf:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fed3:	89 c1                	mov    ecx,eax
c000fed5:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fed9:	0f 83 97 00 00 00    	jae    c000ff76 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fedf:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fee4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fee8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000feec:	39 fa                	cmp    edx,edi
c000feee:	19 e8                	sbb    eax,ebp
c000fef0:	0f 82 14 01 00 00    	jb     c001000a <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fef6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fefa:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fefe:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff04:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff09:	83 d5 ff             	adc    ebp,0xffffffff
c000ff0c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff10:	31 c0                	xor    eax,eax
c000ff12:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff16:	39 fa                	cmp    edx,edi
c000ff18:	89 c1                	mov    ecx,eax
c000ff1a:	19 e9                	sbb    ecx,ebp
c000ff1c:	0f 83 43 ff ff ff    	jae    c000fe65 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff22:	be 00 00 08 00       	mov    esi,0x80000
c000ff27:	50                   	push   eax
c000ff28:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff2c:	57                   	push   edi
c000ff2d:	56                   	push   esi
c000ff2e:	68 00 ae 02 c0       	push   0xc002ae00
c000ff33:	e8 ad 2a 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ff38:	5a                   	pop    edx
c000ff39:	59                   	pop    ecx
c000ff3a:	57                   	push   edi
c000ff3b:	56                   	push   esi
c000ff3c:	e8 76 fe ff ff       	call   c000fdb7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff41:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff49:	83 c4 0c             	add    esp,0xc
c000ff4c:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff50:	03 05 b4 f2 02 c0    	add    eax,DWORD PTR ds:0xc002f2b4
c000ff56:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff5d:	a3 b4 f2 02 c0       	mov    ds:0xc002f2b4,eax
c000ff62:	52                   	push   edx
c000ff63:	50                   	push   eax
c000ff64:	68 be ad 02 c0       	push   0xc002adbe
c000ff69:	e8 77 2a 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c000ff6e:	83 c4 10             	add    esp,0x10
c000ff71:	e9 ef fe ff ff       	jmp    c000fe65 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff76:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff82:	39 ea                	cmp    edx,ebp
c000ff84:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff88:	0f 82 d7 fe ff ff    	jb     c000fe65 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff8e:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff93:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ff97:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ff9b:	0f 83 c4 fe ff ff    	jae    c000fe65 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffa1:	39 ee                	cmp    esi,ebp
c000ffa3:	89 f8                	mov    eax,edi
c000ffa5:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffa9:	0f 83 78 ff ff ff    	jae    c000ff27 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffb7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffbb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffbf:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffc7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffcb:	e9 57 ff ff ff       	jmp    c000ff27 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffd0:	83 ec 0c             	sub    esp,0xc
c000ffd3:	68 b0 ad 02 c0       	push   0xc002adb0
c000ffd8:	e8 28 a4 00 00       	call   c001a405 <Krnl::panic(char const*)>
c000ffdd:	83 c4 10             	add    esp,0x10
c000ffe0:	bb 40 01 00 00       	mov    ebx,0x140
c000ffe5:	83 ec 08             	sub    esp,0x8
c000ffe8:	6a 00                	push   0x0
c000ffea:	53                   	push   ebx
c000ffeb:	43                   	inc    ebx
c000ffec:	e8 0c fc ff ff       	call   c000fbfd <Phys::setPageState(unsigned long, bool)>
c000fff1:	ff 05 b4 f2 02 c0    	inc    DWORD PTR ds:0xc002f2b4
c000fff7:	83 c4 10             	add    esp,0x10
c000fffa:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010000:	75 e3                	jne    c000ffe5 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010002:	83 c4 3c             	add    esp,0x3c
c0010005:	5b                   	pop    ebx
c0010006:	5e                   	pop    esi
c0010007:	5f                   	pop    edi
c0010008:	5d                   	pop    ebp
c0010009:	c3                   	ret    
c001000a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010012:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001001a:	e9 d7 fe ff ff       	jmp    c000fef6 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001001f:	90                   	nop

c0010020 <Pipe::isAtty()>:
c0010020:	31 c0                	xor    eax,eax
c0010022:	c3                   	ret    
c0010023:	90                   	nop

c0010024 <Pipe::~Pipe()>:
c0010024:	83 ec 0c             	sub    esp,0xc
c0010027:	ba 6c ae 02 c0       	mov    edx,0xc002ae6c
c001002c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010030:	89 10                	mov    DWORD PTR [eax],edx
c0010032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010036:	83 ec 0c             	sub    esp,0xc
c0010039:	50                   	push   eax
c001003a:	e8 3f 13 00 00       	call   c001137e <UnixFile::~UnixFile()>
c001003f:	83 c4 10             	add    esp,0x10
c0010042:	90                   	nop
c0010043:	83 c4 0c             	add    esp,0xc
c0010046:	c3                   	ret    
c0010047:	90                   	nop

c0010048 <Pipe::~Pipe()>:
c0010048:	83 ec 0c             	sub    esp,0xc
c001004b:	83 ec 0c             	sub    esp,0xc
c001004e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010052:	e8 cd ff ff ff       	call   c0010024 <Pipe::~Pipe()>
c0010057:	83 c4 10             	add    esp,0x10
c001005a:	83 ec 08             	sub    esp,0x8
c001005d:	6a 20                	push   0x20
c001005f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010063:	e8 9d 28 00 00       	call   c0012905 <operator delete(void*, unsigned long)>
c0010068:	83 c4 10             	add    esp,0x10
c001006b:	83 c4 0c             	add    esp,0xc
c001006e:	c3                   	ret    
c001006f:	90                   	nop

c0010070 <Pipe::read(unsigned long long, void*, int*)>:
c0010070:	55                   	push   ebp
c0010071:	57                   	push   edi
c0010072:	56                   	push   esi
c0010073:	53                   	push   ebx
c0010074:	83 ec 1c             	sub    esp,0x1c
c0010077:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001007b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001007f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010083:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010086:	89 c8                	mov    eax,ecx
c0010088:	99                   	cdq    
c0010089:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001008d:	74 24                	je     c00100b3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c001008f:	39 f9                	cmp    ecx,edi
c0010091:	89 d1                	mov    ecx,edx
c0010093:	19 f1                	sbb    ecx,esi
c0010095:	73 1c                	jae    c00100b3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010097:	fa                   	cli    
c0010098:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001009e:	e8 15 e1 00 00       	call   c001e1b8 <schedule()>
c00100a3:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c00100a8:	48                   	dec    eax
c00100a9:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c00100ae:	75 d3                	jne    c0010083 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100b0:	fb                   	sti    
c00100b1:	eb d0                	jmp    c0010083 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100b3:	39 f8                	cmp    eax,edi
c00100b5:	89 d1                	mov    ecx,edx
c00100b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100ba:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00100be:	19 f1                	sbb    ecx,esi
c00100c0:	73 07                	jae    c00100c9 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00100c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00100c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00100c9:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00100cc:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00100cf:	29 f7                	sub    edi,esi
c00100d1:	89 f8                	mov    eax,edi
c00100d3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00100d7:	99                   	cdq    
c00100d8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00100db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100df:	19 d0                	sbb    eax,edx
c00100e1:	73 07                	jae    c00100ea <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00100e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00100e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100ea:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00100ed:	89 ea                	mov    edx,ebp
c00100ef:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00100f3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00100f8:	74 0d                	je     c0010107 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00100fa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00100fd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010105:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010107:	85 d2                	test   edx,edx
c0010109:	74 11                	je     c001011c <Pipe::read(unsigned long long, void*, int*)+0xac>
c001010b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001010f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0010112:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010116:	89 d1                	mov    ecx,edx
c0010118:	89 c7                	mov    edi,eax
c001011a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001011c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001011f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0010122:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010125:	99                   	cdq    
c0010126:	89 f7                	mov    edi,esi
c0010128:	03 04 24             	add    eax,DWORD PTR [esp]
c001012b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001012f:	c1 ff 1f             	sar    edi,0x1f
c0010132:	57                   	push   edi
c0010133:	56                   	push   esi
c0010134:	52                   	push   edx
c0010135:	50                   	push   eax
c0010136:	e8 b9 72 01 00       	call   c00273f4 <__umoddi3>
c001013b:	83 c4 10             	add    esp,0x10
c001013e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010141:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010146:	75 10                	jne    c0010158 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010148:	83 ec 0c             	sub    esp,0xc
c001014b:	68 29 ae 02 c0       	push   0xc002ae29
c0010150:	e8 b0 a2 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0010155:	83 c4 10             	add    esp,0x10
c0010158:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001015c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001015f:	89 10                	mov    DWORD PTR [eax],edx
c0010161:	83 c4 1c             	add    esp,0x1c
c0010164:	31 c0                	xor    eax,eax
c0010166:	5b                   	pop    ebx
c0010167:	5e                   	pop    esi
c0010168:	5f                   	pop    edi
c0010169:	5d                   	pop    ebp
c001016a:	c3                   	ret    
c001016b:	90                   	nop

c001016c <Pipe::write(unsigned long long, void*, int*)>:
c001016c:	55                   	push   ebp
c001016d:	57                   	push   edi
c001016e:	56                   	push   esi
c001016f:	53                   	push   ebx
c0010170:	83 ec 1c             	sub    esp,0x1c
c0010173:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010177:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001017b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001017e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010182:	89 04 24             	mov    DWORD PTR [esp],eax
c0010185:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010189:	89 d8                	mov    eax,ebx
c001018b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001018e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010192:	89 d6                	mov    esi,edx
c0010194:	89 d7                	mov    edi,edx
c0010196:	c1 ff 1f             	sar    edi,0x1f
c0010199:	03 34 24             	add    esi,DWORD PTR [esp]
c001019c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00101a0:	c1 f8 1f             	sar    eax,0x1f
c00101a3:	39 f3                	cmp    ebx,esi
c00101a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101ad:	19 f8                	sbb    eax,edi
c00101af:	b8 01 00 00 00       	mov    eax,0x1
c00101b4:	72 6e                	jb     c0010224 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00101b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101b9:	01 d0                	add    eax,edx
c00101bb:	99                   	cdq    
c00101bc:	f7 fb                	idiv   ebx
c00101be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c2:	29 d3                	sub    ebx,edx
c00101c4:	89 d7                	mov    edi,edx
c00101c6:	89 de                	mov    esi,ebx
c00101c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00101cb:	c1 fb 1f             	sar    ebx,0x1f
c00101ce:	39 f2                	cmp    edx,esi
c00101d0:	19 d8                	sbb    eax,ebx
c00101d2:	b8 00 00 00 00       	mov    eax,0x0
c00101d7:	72 04                	jb     c00101dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00101d9:	89 d0                	mov    eax,edx
c00101db:	29 f0                	sub    eax,esi
c00101dd:	89 d3                	mov    ebx,edx
c00101df:	29 c3                	sub    ebx,eax
c00101e1:	74 0b                	je     c00101ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00101e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00101ea:	89 d9                	mov    ecx,ebx
c00101ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ee:	85 c0                	test   eax,eax
c00101f0:	74 0d                	je     c00101ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00101f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00101f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00101f9:	89 de                	mov    esi,ebx
c00101fb:	89 c1                	mov    ecx,eax
c00101fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010202:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010207:	75 10                	jne    c0010219 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010209:	83 ec 0c             	sub    esp,0xc
c001020c:	68 45 ae 02 c0       	push   0xc002ae45
c0010211:	e8 ef a1 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0010216:	83 c4 10             	add    esp,0x10
c0010219:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001021d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0010220:	89 08                	mov    DWORD PTR [eax],ecx
c0010222:	31 c0                	xor    eax,eax
c0010224:	83 c4 1c             	add    esp,0x1c
c0010227:	5b                   	pop    ebx
c0010228:	5e                   	pop    esi
c0010229:	5f                   	pop    edi
c001022a:	5d                   	pop    ebp
c001022b:	c3                   	ret    

c001022c <Pipe::Pipe(int)>:
c001022c:	83 ec 0c             	sub    esp,0xc
c001022f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010233:	83 ec 08             	sub    esp,0x8
c0010236:	6a 00                	push   0x0
c0010238:	50                   	push   eax
c0010239:	e8 5e 0f 00 00       	call   c001119c <UnixFile::UnixFile(int)>
c001023e:	83 c4 10             	add    esp,0x10
c0010241:	ba 6c ae 02 c0       	mov    edx,0xc002ae6c
c0010246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001024a:	89 10                	mov    DWORD PTR [eax],edx
c001024c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010250:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010254:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010266:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001026d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010271:	83 ec 0c             	sub    esp,0xc
c0010274:	50                   	push   eax
c0010275:	e8 88 f6 ff ff       	call   c000f902 <malloc>
c001027a:	83 c4 10             	add    esp,0x10
c001027d:	89 c2                	mov    edx,eax
c001027f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010283:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001028a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001028e:	90                   	nop
c001028f:	83 c4 0c             	add    esp,0xc
c0010292:	c3                   	ret    
c0010293:	90                   	nop

c0010294 <VgaText::isAtty()>:
c0010294:	b0 01                	mov    al,0x1
c0010296:	c3                   	ret    
c0010297:	90                   	nop

c0010298 <VgaText::~VgaText()>:
c0010298:	83 ec 0c             	sub    esp,0xc
c001029b:	ba 28 af 02 c0       	mov    edx,0xc002af28
c00102a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102a4:	89 10                	mov    DWORD PTR [eax],edx
c00102a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102aa:	83 ec 0c             	sub    esp,0xc
c00102ad:	50                   	push   eax
c00102ae:	e8 cb 10 00 00       	call   c001137e <UnixFile::~UnixFile()>
c00102b3:	83 c4 10             	add    esp,0x10
c00102b6:	90                   	nop
c00102b7:	83 c4 0c             	add    esp,0xc
c00102ba:	c3                   	ret    
c00102bb:	90                   	nop

c00102bc <VgaText::~VgaText()>:
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	83 ec 0c             	sub    esp,0xc
c00102c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c6:	e8 cd ff ff ff       	call   c0010298 <VgaText::~VgaText()>
c00102cb:	83 c4 10             	add    esp,0x10
c00102ce:	83 ec 08             	sub    esp,0x8
c00102d1:	68 c4 02 00 00       	push   0x2c4
c00102d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102da:	e8 26 26 00 00       	call   c0012905 <operator delete(void*, unsigned long)>
c00102df:	83 c4 10             	add    esp,0x10
c00102e2:	83 c4 0c             	add    esp,0xc
c00102e5:	c3                   	ret    

c00102e6 <VgaText::read(unsigned long long, void*, int*)>:
c00102e6:	83 ec 10             	sub    esp,0x10
c00102e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f5:	e8 a0 5b 00 00       	call   c0015e9a <readKeyboard(VgaText*, char*, unsigned long)>
c00102fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00102fe:	89 02                	mov    DWORD PTR [edx],eax
c0010300:	31 c0                	xor    eax,eax
c0010302:	83 c4 1c             	add    esp,0x1c
c0010305:	c3                   	ret    

c0010306 <setTerminalScrollLock(bool)>:
c0010306:	c3                   	ret    

c0010307 <addToTerminalCycle(VgaText*)>:
c0010307:	8b 15 20 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f320
c001030d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010311:	85 d2                	test   edx,edx
c0010313:	75 09                	jne    c001031e <addToTerminalCycle(VgaText*)+0x17>
c0010315:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010318:	a3 20 f3 02 c0       	mov    ds:0xc002f320,eax
c001031d:	c3                   	ret    
c001031e:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010321:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010324:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010327:	c3                   	ret    

c0010328 <installVgaTextImplementation()>:
c0010328:	83 ec 10             	sub    esp,0x10
c001032b:	6a 20                	push   0x20
c001032d:	6a 00                	push   0x0
c001032f:	68 00 f3 02 c0       	push   0xc002f300
c0010334:	e8 17 04 ff ff       	call   c0000750 <memset>
c0010339:	83 c4 1c             	add    esp,0x1c
c001033c:	c3                   	ret    

c001033d <scrollTerminalScrollLock(int)>:
c001033d:	c3                   	ret    

c001033e <VgaText::updateTitle()>:
c001033e:	53                   	push   ebx
c001033f:	31 c0                	xor    eax,eax
c0010341:	83 ec 58             	sub    esp,0x58
c0010344:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010348:	89 e1                	mov    ecx,esp
c001034a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001034e:	40                   	inc    eax
c001034f:	83 f8 50             	cmp    eax,0x50
c0010352:	75 f6                	jne    c001034a <VgaText::updateTitle()+0xc>
c0010354:	31 c0                	xor    eax,eax
c0010356:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001035d:	84 db                	test   bl,bl
c001035f:	74 06                	je     c0010367 <VgaText::updateTitle()+0x29>
c0010361:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010364:	40                   	inc    eax
c0010365:	eb ef                	jmp    c0010356 <VgaText::updateTitle()+0x18>
c0010367:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c001036a:	85 c0                	test   eax,eax
c001036c:	74 09                	je     c0010377 <VgaText::updateTitle()+0x39>
c001036e:	53                   	push   ebx
c001036f:	53                   	push   ebx
c0010370:	51                   	push   ecx
c0010371:	52                   	push   edx
c0010372:	ff d0                	call   eax
c0010374:	83 c4 10             	add    esp,0x10
c0010377:	83 c4 58             	add    esp,0x58
c001037a:	5b                   	pop    ebx
c001037b:	c3                   	ret    

c001037c <VgaText::load()>:
c001037c:	53                   	push   ebx
c001037d:	31 c0                	xor    eax,eax
c001037f:	83 ec 58             	sub    esp,0x58
c0010382:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010386:	89 e2                	mov    edx,esp
c0010388:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001038c:	40                   	inc    eax
c001038d:	83 f8 50             	cmp    eax,0x50
c0010390:	75 f6                	jne    c0010388 <VgaText::load()+0xc>
c0010392:	31 c0                	xor    eax,eax
c0010394:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c001039b:	84 c9                	test   cl,cl
c001039d:	74 06                	je     c00103a5 <VgaText::load()+0x29>
c001039f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00103a2:	40                   	inc    eax
c00103a3:	eb ef                	jmp    c0010394 <VgaText::load()+0x18>
c00103a5:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00103a8:	85 c0                	test   eax,eax
c00103aa:	74 09                	je     c00103b5 <VgaText::load()+0x39>
c00103ac:	51                   	push   ecx
c00103ad:	51                   	push   ecx
c00103ae:	52                   	push   edx
c00103af:	53                   	push   ebx
c00103b0:	ff d0                	call   eax
c00103b2:	83 c4 10             	add    esp,0x10
c00103b5:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00103b8:	85 c0                	test   eax,eax
c00103ba:	74 09                	je     c00103c5 <VgaText::load()+0x49>
c00103bc:	83 ec 0c             	sub    esp,0xc
c00103bf:	53                   	push   ebx
c00103c0:	ff d0                	call   eax
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	83 c4 58             	add    esp,0x58
c00103c8:	5b                   	pop    ebx
c00103c9:	c3                   	ret    

c00103ca <VgaText::updateCursor()>:
c00103ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ce:	39 05 24 f3 02 c0    	cmp    DWORD PTR ds:0xc002f324,eax
c00103d4:	75 09                	jne    c00103df <VgaText::updateCursor()+0x15>
c00103d6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00103d9:	85 c0                	test   eax,eax
c00103db:	74 02                	je     c00103df <VgaText::updateCursor()+0x15>
c00103dd:	ff e0                	jmp    eax
c00103df:	c3                   	ret    

c00103e0 <VgaText::showCursor(bool)>:
c00103e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103e8:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00103eb:	c3                   	ret    

c00103ec <VgaText::disableBlink(bool)>:
c00103ec:	56                   	push   esi
c00103ed:	53                   	push   ebx
c00103ee:	51                   	push   ecx
c00103ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103f7:	39 1d 24 f3 02 c0    	cmp    DWORD PTR ds:0xc002f324,ebx
c00103fd:	75 15                	jne    c0010414 <VgaText::disableBlink(bool)+0x28>
c00103ff:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010402:	85 c0                	test   eax,eax
c0010404:	74 0e                	je     c0010414 <VgaText::disableBlink(bool)+0x28>
c0010406:	89 f1                	mov    ecx,esi
c0010408:	52                   	push   edx
c0010409:	52                   	push   edx
c001040a:	0f b6 d1             	movzx  edx,cl
c001040d:	52                   	push   edx
c001040e:	53                   	push   ebx
c001040f:	ff d0                	call   eax
c0010411:	83 c4 10             	add    esp,0x10
c0010414:	89 f0                	mov    eax,esi
c0010416:	83 f0 01             	xor    eax,0x1
c0010419:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001041c:	58                   	pop    eax
c001041d:	5b                   	pop    ebx
c001041e:	5e                   	pop    esi
c001041f:	c3                   	ret    

c0010420 <VgaText::doANSI_SGR(int)>:
c0010420:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010428:	85 d2                	test   edx,edx
c001042a:	75 0b                	jne    c0010437 <VgaText::doANSI_SGR(int)+0x17>
c001042c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001042f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010432:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010435:	eb 59                	jmp    c0010490 <VgaText::doANSI_SGR(int)+0x70>
c0010437:	83 fa 07             	cmp    edx,0x7
c001043a:	75 0b                	jne    c0010447 <VgaText::doANSI_SGR(int)+0x27>
c001043c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001043f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010442:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010445:	eb 49                	jmp    c0010490 <VgaText::doANSI_SGR(int)+0x70>
c0010447:	83 fa 1b             	cmp    edx,0x1b
c001044a:	74 e0                	je     c001042c <VgaText::doANSI_SGR(int)+0xc>
c001044c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001044f:	83 f9 07             	cmp    ecx,0x7
c0010452:	77 09                	ja     c001045d <VgaText::doANSI_SGR(int)+0x3d>
c0010454:	8b 14 8d c0 e1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1e40]
c001045b:	eb 20                	jmp    c001047d <VgaText::doANSI_SGR(int)+0x5d>
c001045d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010460:	83 f9 07             	cmp    ecx,0x7
c0010463:	77 09                	ja     c001046e <VgaText::doANSI_SGR(int)+0x4e>
c0010465:	8b 14 8d c0 e1 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1e40]
c001046c:	eb 22                	jmp    c0010490 <VgaText::doANSI_SGR(int)+0x70>
c001046e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010471:	83 f9 07             	cmp    ecx,0x7
c0010474:	77 0b                	ja     c0010481 <VgaText::doANSI_SGR(int)+0x61>
c0010476:	8b 14 95 78 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f88]
c001047d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010480:	c3                   	ret    
c0010481:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010484:	83 f9 07             	cmp    ecx,0x7
c0010487:	77 0a                	ja     c0010493 <VgaText::doANSI_SGR(int)+0x73>
c0010489:	8b 14 95 50 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1fb0]
c0010490:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010493:	c3                   	ret    

c0010494 <VgaText::setDefaultBgColour(VgaColour)>:
c0010494:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010498:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001049c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001049f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00104a2:	c3                   	ret    
c00104a3:	90                   	nop

c00104a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00104a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00104af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00104b2:	c3                   	ret    
c00104b3:	90                   	nop

c00104b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00104b4:	53                   	push   ebx
c00104b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00104bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104c1:	51                   	push   ecx
c00104c2:	e8 cd ff ff ff       	call   c0010494 <VgaText::setDefaultBgColour(VgaColour)>
c00104c7:	58                   	pop    eax
c00104c8:	5a                   	pop    edx
c00104c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00104cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00104d1:	5b                   	pop    ebx
c00104d2:	eb d0                	jmp    c00104a4 <VgaText::setDefaultFgColour(VgaColour)>

c00104d4 <VgaText::setTitleTextColour(VgaColour)>:
c00104d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00104df:	e9 5a fe ff ff       	jmp    c001033e <VgaText::updateTitle()>

c00104e4 <VgaText::setTitleColour(VgaColour)>:
c00104e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00104ef:	e9 4a fe ff ff       	jmp    c001033e <VgaText::updateTitle()>

c00104f4 <VgaText::setTitle(char*)>:
c00104f4:	53                   	push   ebx
c00104f5:	83 ec 10             	sub    esp,0x10
c00104f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00104fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010500:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010506:	50                   	push   eax
c0010507:	e8 00 03 ff ff       	call   c000080c <strcpy>
c001050c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010510:	83 c4 18             	add    esp,0x18
c0010513:	5b                   	pop    ebx
c0010514:	e9 25 fe ff ff       	jmp    c001033e <VgaText::updateTitle()>
c0010519:	90                   	nop

c001051a <VgaText::combineColours(unsigned char, unsigned char)>:
c001051a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001051e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010523:	83 e0 0f             	and    eax,0xf
c0010526:	c1 e2 04             	shl    edx,0x4
c0010529:	09 d0                	or     eax,edx
c001052b:	c3                   	ret    

c001052c <VgaText::scrollScreen()>:
c001052c:	55                   	push   ebp
c001052d:	b9 01 00 00 00       	mov    ecx,0x1
c0010532:	57                   	push   edi
c0010533:	56                   	push   esi
c0010534:	53                   	push   ebx
c0010535:	83 ec 0c             	sub    esp,0xc
c0010538:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001053c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010542:	31 ff                	xor    edi,edi
c0010544:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010547:	83 f9 17             	cmp    ecx,0x17
c001054a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001054d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010554:	75 27                	jne    c001057d <VgaText::scrollScreen()+0x51>
c0010556:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010559:	01 f5                	add    ebp,esi
c001055b:	f7 c7 01 00 00 00    	test   edi,0x1
c0010561:	74 16                	je     c0010579 <VgaText::scrollScreen()+0x4d>
c0010563:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010567:	50                   	push   eax
c0010568:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001056c:	50                   	push   eax
c001056d:	e8 a8 ff ff ff       	call   c001051a <VgaText::combineColours(unsigned char, unsigned char)>
c0010572:	5a                   	pop    edx
c0010573:	5a                   	pop    edx
c0010574:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010577:	eb 04                	jmp    c001057d <VgaText::scrollScreen()+0x51>
c0010579:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001057d:	47                   	inc    edi
c001057e:	46                   	inc    esi
c001057f:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010585:	75 bd                	jne    c0010544 <VgaText::scrollScreen()+0x18>
c0010587:	41                   	inc    ecx
c0010588:	83 f9 18             	cmp    ecx,0x18
c001058b:	75 af                	jne    c001053c <VgaText::scrollScreen()+0x10>
c001058d:	39 1d 24 f3 02 c0    	cmp    DWORD PTR ds:0xc002f324,ebx
c0010593:	75 1b                	jne    c00105b0 <VgaText::scrollScreen()+0x84>
c0010595:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010599:	74 05                	je     c00105a0 <VgaText::scrollScreen()+0x74>
c001059b:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001059e:	eb 10                	jmp    c00105b0 <VgaText::scrollScreen()+0x84>
c00105a0:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00105a3:	85 c0                	test   eax,eax
c00105a5:	74 09                	je     c00105b0 <VgaText::scrollScreen()+0x84>
c00105a7:	83 ec 0c             	sub    esp,0xc
c00105aa:	53                   	push   ebx
c00105ab:	ff d0                	call   eax
c00105ad:	83 c4 10             	add    esp,0x10
c00105b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00105b4:	83 c4 0c             	add    esp,0xc
c00105b7:	5b                   	pop    ebx
c00105b8:	5e                   	pop    esi
c00105b9:	5f                   	pop    edi
c00105ba:	5d                   	pop    ebp
c00105bb:	e9 0a fe ff ff       	jmp    c00103ca <VgaText::updateCursor()>

c00105c0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00105c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00105c5:	c1 e0 08             	shl    eax,0x8
c00105c8:	89 c2                	mov    edx,eax
c00105ca:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00105cf:	09 d0                	or     eax,edx
c00105d1:	c3                   	ret    

c00105d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105d2:	56                   	push   esi
c00105d3:	53                   	push   ebx
c00105d4:	51                   	push   ecx
c00105d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105d9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105de:	50                   	push   eax
c00105df:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105e4:	50                   	push   eax
c00105e5:	e8 30 ff ff ff       	call   c001051a <VgaText::combineColours(unsigned char, unsigned char)>
c00105ea:	5b                   	pop    ebx
c00105eb:	0f b6 c0             	movzx  eax,al
c00105ee:	5e                   	pop    esi
c00105ef:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105f4:	50                   	push   eax
c00105f5:	53                   	push   ebx
c00105f6:	e8 c5 ff ff ff       	call   c00105c0 <VgaText::combineCharAndColour(char, unsigned char)>
c00105fb:	5a                   	pop    edx
c00105fc:	5e                   	pop    esi
c00105fd:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010600:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010606:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001060a:	0f b7 d2             	movzx  edx,dx
c001060d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010611:	39 0d 24 f3 02 c0    	cmp    DWORD PTR ds:0xc002f324,ecx
c0010617:	75 10                	jne    c0010629 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010619:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001061c:	85 c0                	test   eax,eax
c001061e:	74 09                	je     c0010629 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010620:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010624:	5a                   	pop    edx
c0010625:	5b                   	pop    ebx
c0010626:	5e                   	pop    esi
c0010627:	ff e0                	jmp    eax
c0010629:	58                   	pop    eax
c001062a:	5b                   	pop    ebx
c001062b:	5e                   	pop    esi
c001062c:	c3                   	ret    
c001062d:	90                   	nop

c001062e <VgaText::getCursorX()>:
c001062e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010632:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010635:	c3                   	ret    

c0010636 <VgaText::getCursorY()>:
c0010636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001063a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001063d:	c3                   	ret    

c001063e <VgaText::setCursor(int, int)>:
c001063e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010642:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010646:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001064d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010650:	e9 75 fd ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010655:	90                   	nop

c0010656 <VgaText::setCursorX(int)>:
c0010656:	83 ec 10             	sub    esp,0x10
c0010659:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001065d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010660:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010664:	50                   	push   eax
c0010665:	e8 d4 ff ff ff       	call   c001063e <VgaText::setCursor(int, int)>
c001066a:	83 c4 1c             	add    esp,0x1c
c001066d:	c3                   	ret    

c001066e <VgaText::setCursorY(int)>:
c001066e:	83 ec 10             	sub    esp,0x10
c0010671:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010675:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010679:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001067c:	50                   	push   eax
c001067d:	e8 bc ff ff ff       	call   c001063e <VgaText::setCursor(int, int)>
c0010682:	83 c4 1c             	add    esp,0x1c
c0010685:	c3                   	ret    

c0010686 <VgaText::incrementCursor(bool)>:
c0010686:	56                   	push   esi
c0010687:	53                   	push   ebx
c0010688:	51                   	push   ecx
c0010689:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001068d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010691:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0010694:	40                   	inc    eax
c0010695:	83 f8 50             	cmp    eax,0x50
c0010698:	74 05                	je     c001069f <VgaText::incrementCursor(bool)+0x19>
c001069a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001069d:	eb 24                	jmp    c00106c3 <VgaText::incrementCursor(bool)+0x3d>
c001069f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00106a2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00106a9:	8d 50 01             	lea    edx,[eax+0x1]
c00106ac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00106af:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00106b2:	75 0f                	jne    c00106c3 <VgaText::incrementCursor(bool)+0x3d>
c00106b4:	83 ec 0c             	sub    esp,0xc
c00106b7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00106ba:	53                   	push   ebx
c00106bb:	e8 6c fe ff ff       	call   c001052c <VgaText::scrollScreen()>
c00106c0:	83 c4 10             	add    esp,0x10
c00106c3:	89 f0                	mov    eax,esi
c00106c5:	84 c0                	test   al,al
c00106c7:	74 0c                	je     c00106d5 <VgaText::incrementCursor(bool)+0x4f>
c00106c9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106cd:	5a                   	pop    edx
c00106ce:	5b                   	pop    ebx
c00106cf:	5e                   	pop    esi
c00106d0:	e9 f5 fc ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c00106d5:	58                   	pop    eax
c00106d6:	5b                   	pop    ebx
c00106d7:	5e                   	pop    esi
c00106d8:	c3                   	ret    
c00106d9:	90                   	nop

c00106da <VgaText::decrementCursor(bool)>:
c00106da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00106de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106e2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00106e5:	85 c0                	test   eax,eax
c00106e7:	74 04                	je     c00106ed <VgaText::decrementCursor(bool)+0x13>
c00106e9:	48                   	dec    eax
c00106ea:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00106ed:	84 c9                	test   cl,cl
c00106ef:	74 09                	je     c00106fa <VgaText::decrementCursor(bool)+0x20>
c00106f1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106f5:	e9 d0 fc ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c00106fa:	c3                   	ret    
c00106fb:	90                   	nop

c00106fc <VgaText::putchar(char, VgaColour, VgaColour)>:
c00106fc:	53                   	push   ebx
c00106fd:	83 ec 08             	sub    esp,0x8
c0010700:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010704:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010708:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001070c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010710:	3c 07                	cmp    al,0x7
c0010712:	75 2a                	jne    c001073e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010714:	a1 d8 f3 02 c0       	mov    eax,ds:0xc002f3d8
c0010719:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010721:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010729:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010731:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010735:	83 c4 08             	add    esp,0x8
c0010738:	5b                   	pop    ebx
c0010739:	e9 b4 30 00 00       	jmp    c00137f2 <Buzzer::beep(int, int, bool)>
c001073e:	3c 0d                	cmp    al,0xd
c0010740:	75 09                	jne    c001074b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010742:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010749:	eb 2c                	jmp    c0010777 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c001074b:	3c 0a                	cmp    al,0xa
c001074d:	75 31                	jne    c0010780 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c001074f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010752:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010759:	8d 50 01             	lea    edx,[eax+0x1]
c001075c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001075f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010762:	75 0f                	jne    c0010773 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010764:	83 ec 0c             	sub    esp,0xc
c0010767:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001076a:	53                   	push   ebx
c001076b:	e8 bc fd ff ff       	call   c001052c <VgaText::scrollScreen()>
c0010770:	83 c4 10             	add    esp,0x10
c0010773:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010777:	83 c4 08             	add    esp,0x8
c001077a:	5b                   	pop    ebx
c001077b:	e9 4a fc ff ff       	jmp    c00103ca <VgaText::updateCursor()>
c0010780:	3c 08                	cmp    al,0x8
c0010782:	75 25                	jne    c00107a9 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010784:	50                   	push   eax
c0010785:	50                   	push   eax
c0010786:	6a 01                	push   0x1
c0010788:	53                   	push   ebx
c0010789:	e8 4c ff ff ff       	call   c00106da <VgaText::decrementCursor(bool)>
c001078e:	5a                   	pop    edx
c001078f:	59                   	pop    ecx
c0010790:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010793:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010796:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010799:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001079c:	6a 20                	push   0x20
c001079e:	53                   	push   ebx
c001079f:	e8 2e fe ff ff       	call   c00105d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107a4:	83 c4 28             	add    esp,0x28
c00107a7:	5b                   	pop    ebx
c00107a8:	c3                   	ret    
c00107a9:	83 ec 08             	sub    esp,0x8
c00107ac:	0f be c0             	movsx  eax,al
c00107af:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00107b2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00107b5:	51                   	push   ecx
c00107b6:	52                   	push   edx
c00107b7:	50                   	push   eax
c00107b8:	53                   	push   ebx
c00107b9:	e8 14 fe ff ff       	call   c00105d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00107be:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00107c2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00107ca:	83 c4 28             	add    esp,0x28
c00107cd:	5b                   	pop    ebx
c00107ce:	e9 b3 fe ff ff       	jmp    c0010686 <VgaText::incrementCursor(bool)>
c00107d3:	90                   	nop

c00107d4 <VgaText::isShowingCursor()>:
c00107d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107d8:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00107db:	c3                   	ret    

c00107dc <VgaText::isBlinkDisabled()>:
c00107dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107e0:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c00107e3:	83 f0 01             	xor    eax,0x1
c00107e6:	c3                   	ret    
c00107e7:	90                   	nop

c00107e8 <VgaText::setCursorHeight(int)>:
c00107e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107f0:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00107f3:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c00107f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107fb:	e9 e0 fb ff ff       	jmp    c00103e0 <VgaText::showCursor(bool)>

c0010800 <VgaText::getCursorHeight()>:
c0010800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010804:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010807:	c3                   	ret    

c0010808 <setActiveTerminal(VgaText*)>:
c0010808:	53                   	push   ebx
c0010809:	83 ec 08             	sub    esp,0x8
c001080c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010810:	85 db                	test   ebx,ebx
c0010812:	75 11                	jne    c0010825 <setActiveTerminal(VgaText*)+0x1d>
c0010814:	c7 44 24 10 80 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae80
c001081c:	83 c4 08             	add    esp,0x8
c001081f:	5b                   	pop    ebx
c0010820:	e9 e0 9b 00 00       	jmp    c001a405 <Krnl::panic(char const*)>
c0010825:	50                   	push   eax
c0010826:	50                   	push   eax
c0010827:	53                   	push   ebx
c0010828:	68 8e ae 02 c0       	push   0xc002ae8e
c001082d:	e8 b3 21 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0010832:	a1 24 f3 02 c0       	mov    eax,ds:0xc002f324
c0010837:	83 c4 10             	add    esp,0x10
c001083a:	85 c0                	test   eax,eax
c001083c:	74 0c                	je     c001084a <setActiveTerminal(VgaText*)+0x42>
c001083e:	83 ec 0c             	sub    esp,0xc
c0010841:	50                   	push   eax
c0010842:	e8 83 fb ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010847:	83 c4 10             	add    esp,0x10
c001084a:	89 1d 24 f3 02 c0    	mov    DWORD PTR ds:0xc002f324,ebx
c0010850:	51                   	push   ecx
c0010851:	51                   	push   ecx
c0010852:	53                   	push   ebx
c0010853:	68 a6 ae 02 c0       	push   0xc002aea6
c0010858:	e8 88 21 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001085d:	83 c4 0c             	add    esp,0xc
c0010860:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010863:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010866:	53                   	push   ebx
c0010867:	e8 d2 fd ff ff       	call   c001063e <VgaText::setCursor(int, int)>
c001086c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001086f:	e8 68 ff ff ff       	call   c00107dc <VgaText::isBlinkDisabled()>
c0010874:	5a                   	pop    edx
c0010875:	0f b6 c0             	movzx  eax,al
c0010878:	59                   	pop    ecx
c0010879:	50                   	push   eax
c001087a:	53                   	push   ebx
c001087b:	e8 6c fb ff ff       	call   c00103ec <VgaText::disableBlink(bool)>
c0010880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010883:	e8 78 ff ff ff       	call   c0010800 <VgaText::getCursorHeight()>
c0010888:	5a                   	pop    edx
c0010889:	59                   	pop    ecx
c001088a:	50                   	push   eax
c001088b:	53                   	push   ebx
c001088c:	e8 57 ff ff ff       	call   c00107e8 <VgaText::setCursorHeight(int)>
c0010891:	83 c4 10             	add    esp,0x10
c0010894:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010898:	75 07                	jne    c00108a1 <setActiveTerminal(VgaText*)+0x99>
c001089a:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c00108a1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108a5:	83 c4 08             	add    esp,0x8
c00108a8:	5b                   	pop    ebx
c00108a9:	e9 ce fa ff ff       	jmp    c001037c <VgaText::load()>

c00108ae <doTerminalCycle()>:
c00108ae:	83 ec 18             	sub    esp,0x18
c00108b1:	a1 20 f3 02 c0       	mov    eax,ds:0xc002f320
c00108b6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00108b9:	50                   	push   eax
c00108ba:	a3 20 f3 02 c0       	mov    ds:0xc002f320,eax
c00108bf:	e8 44 ff ff ff       	call   c0010808 <setActiveTerminal(VgaText*)>
c00108c4:	83 c4 1c             	add    esp,0x1c
c00108c7:	c3                   	ret    

c00108c8 <VgaText::doUpdate()>:
c00108c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108cc:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00108cf:	85 c0                	test   eax,eax
c00108d1:	74 02                	je     c00108d5 <VgaText::doUpdate()+0xd>
c00108d3:	ff e0                	jmp    eax
c00108d5:	c3                   	ret    

c00108d6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00108d6:	55                   	push   ebp
c00108d7:	31 ed                	xor    ebp,ebp
c00108d9:	57                   	push   edi
c00108da:	56                   	push   esi
c00108db:	53                   	push   ebx
c00108dc:	83 ec 1c             	sub    esp,0x1c
c00108df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00108e3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00108e8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00108ef:	50                   	push   eax
c00108f0:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00108f5:	50                   	push   eax
c00108f6:	e8 1f fc ff ff       	call   c001051a <VgaText::combineColours(unsigned char, unsigned char)>
c00108fb:	59                   	pop    ecx
c00108fc:	0f b6 c0             	movzx  eax,al
c00108ff:	5e                   	pop    esi
c0010900:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010905:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010909:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001090c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010910:	0f b7 f6             	movzx  esi,si
c0010913:	01 f6                	add    esi,esi
c0010915:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010918:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001091b:	84 c0                	test   al,al
c001091d:	0f 84 fd 00 00 00    	je     c0010a20 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010923:	3c 0d                	cmp    al,0xd
c0010925:	75 0c                	jne    c0010933 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010927:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001092e:	e9 e7 00 00 00       	jmp    c0010a1a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010933:	3c 0a                	cmp    al,0xa
c0010935:	75 47                	jne    c001097e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010937:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001093a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010941:	8d 48 01             	lea    ecx,[eax+0x1]
c0010944:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010947:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c001094a:	75 0f                	jne    c001095b <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c001094c:	83 ec 0c             	sub    esp,0xc
c001094f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010952:	53                   	push   ebx
c0010953:	e8 d4 fb ff ff       	call   c001052c <VgaText::scrollScreen()>
c0010958:	83 c4 10             	add    esp,0x10
c001095b:	83 ec 0c             	sub    esp,0xc
c001095e:	31 ed                	xor    ebp,ebp
c0010960:	53                   	push   ebx
c0010961:	e8 64 fa ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010966:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001096b:	83 c4 10             	add    esp,0x10
c001096e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010971:	0f b7 f6             	movzx  esi,si
c0010974:	01 f6                	add    esi,esi
c0010976:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010979:	e9 9c 00 00 00       	jmp    c0010a1a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001097e:	3c 08                	cmp    al,0x8
c0010980:	75 35                	jne    c00109b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010982:	56                   	push   esi
c0010983:	56                   	push   esi
c0010984:	6a 01                	push   0x1
c0010986:	53                   	push   ebx
c0010987:	e8 4e fd ff ff       	call   c00106da <VgaText::decrementCursor(bool)>
c001098c:	58                   	pop    eax
c001098d:	5a                   	pop    edx
c001098e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010991:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010994:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010997:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001099a:	6a 20                	push   0x20
c001099c:	53                   	push   ebx
c001099d:	e8 30 fc ff ff       	call   c00105d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00109a2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00109a7:	83 c4 20             	add    esp,0x20
c00109aa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00109ad:	0f b7 f6             	movzx  esi,si
c00109b0:	01 f6                	add    esi,esi
c00109b2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00109b5:	eb 63                	jmp    c0010a1a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00109b7:	51                   	push   ecx
c00109b8:	51                   	push   ecx
c00109b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00109bd:	50                   	push   eax
c00109be:	e8 fd fb ff ff       	call   c00105c0 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c3:	83 c4 10             	add    esp,0x10
c00109c6:	66 89 06             	mov    WORD PTR [esi],ax
c00109c9:	39 1d 24 f3 02 c0    	cmp    DWORD PTR ds:0xc002f324,ebx
c00109cf:	75 21                	jne    c00109f2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00109d1:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00109d4:	85 c0                	test   eax,eax
c00109d6:	74 1a                	je     c00109f2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00109d8:	52                   	push   edx
c00109d9:	52                   	push   edx
c00109da:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00109dd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00109e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00109e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00109e8:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00109eb:	51                   	push   ecx
c00109ec:	53                   	push   ebx
c00109ed:	ff d0                	call   eax
c00109ef:	83 c4 20             	add    esp,0x20
c00109f2:	83 c6 02             	add    esi,0x2
c00109f5:	50                   	push   eax
c00109f6:	50                   	push   eax
c00109f7:	6a 00                	push   0x0
c00109f9:	53                   	push   ebx
c00109fa:	e8 87 fc ff ff       	call   c0010686 <VgaText::incrementCursor(bool)>
c00109ff:	83 c4 10             	add    esp,0x10
c0010a02:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010a06:	75 0d                	jne    c0010a15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010a08:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010a0d:	0f b7 f6             	movzx  esi,si
c0010a10:	01 f6                	add    esi,esi
c0010a12:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010a15:	bd 01 00 00 00       	mov    ebp,0x1
c0010a1a:	47                   	inc    edi
c0010a1b:	e9 f8 fe ff ff       	jmp    c0010918 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010a20:	83 ec 0c             	sub    esp,0xc
c0010a23:	53                   	push   ebx
c0010a24:	e8 a1 f9 ff ff       	call   c00103ca <VgaText::updateCursor()>
c0010a29:	83 c4 10             	add    esp,0x10
c0010a2c:	89 e8                	mov    eax,ebp
c0010a2e:	84 c0                	test   al,al
c0010a30:	74 0c                	je     c0010a3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010a32:	83 ec 0c             	sub    esp,0xc
c0010a35:	53                   	push   ebx
c0010a36:	e8 8d fe ff ff       	call   c00108c8 <VgaText::doUpdate()>
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010a45:	83 c4 1c             	add    esp,0x1c
c0010a48:	5b                   	pop    ebx
c0010a49:	5e                   	pop    esi
c0010a4a:	5f                   	pop    edi
c0010a4b:	5d                   	pop    ebp
c0010a4c:	c3                   	ret    
c0010a4d:	90                   	nop

c0010a4e <VgaText::clearScreen()>:
c0010a4e:	57                   	push   edi
c0010a4f:	56                   	push   esi
c0010a50:	31 f6                	xor    esi,esi
c0010a52:	53                   	push   ebx
c0010a53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a57:	52                   	push   edx
c0010a58:	6a 00                	push   0x0
c0010a5a:	6a 00                	push   0x0
c0010a5c:	53                   	push   ebx
c0010a5d:	e8 dc fb ff ff       	call   c001063e <VgaText::setCursor(int, int)>
c0010a62:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010a69:	83 c4 10             	add    esp,0x10
c0010a6c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010a6f:	7e 20                	jle    c0010a91 <VgaText::clearScreen()+0x43>
c0010a71:	31 ff                	xor    edi,edi
c0010a73:	50                   	push   eax
c0010a74:	50                   	push   eax
c0010a75:	56                   	push   esi
c0010a76:	57                   	push   edi
c0010a77:	47                   	inc    edi
c0010a78:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a7b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a7e:	6a 20                	push   0x20
c0010a80:	53                   	push   ebx
c0010a81:	e8 4c fb ff ff       	call   c00105d2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a86:	83 c4 20             	add    esp,0x20
c0010a89:	83 ff 50             	cmp    edi,0x50
c0010a8c:	75 e5                	jne    c0010a73 <VgaText::clearScreen()+0x25>
c0010a8e:	46                   	inc    esi
c0010a8f:	eb db                	jmp    c0010a6c <VgaText::clearScreen()+0x1e>
c0010a91:	83 ec 0c             	sub    esp,0xc
c0010a94:	53                   	push   ebx
c0010a95:	e8 2e fe ff ff       	call   c00108c8 <VgaText::doUpdate()>
c0010a9a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010aa1:	83 c4 10             	add    esp,0x10
c0010aa4:	5b                   	pop    ebx
c0010aa5:	5e                   	pop    esi
c0010aa6:	5f                   	pop    edi
c0010aa7:	c3                   	ret    

c0010aa8 <VgaText::putchar(char)>:
c0010aa8:	56                   	push   esi
c0010aa9:	53                   	push   ebx
c0010aaa:	83 ec 14             	sub    esp,0x14
c0010aad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ab1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ab5:	3c 5b                	cmp    al,0x5b
c0010ab7:	75 18                	jne    c0010ad1 <VgaText::putchar(char)+0x29>
c0010ab9:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010abd:	74 1f                	je     c0010ade <VgaText::putchar(char)+0x36>
c0010abf:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010ac5:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010acc:	e9 bd 00 00 00       	jmp    c0010b8e <VgaText::putchar(char)+0xe6>
c0010ad1:	3c 1b                	cmp    al,0x1b
c0010ad3:	75 09                	jne    c0010ade <VgaText::putchar(char)+0x36>
c0010ad5:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010ad9:	e9 b0 00 00 00       	jmp    c0010b8e <VgaText::putchar(char)+0xe6>
c0010ade:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010ae1:	84 c9                	test   cl,cl
c0010ae3:	0f 84 92 00 00 00    	je     c0010b7b <VgaText::putchar(char)+0xd3>
c0010ae9:	8d 50 c0             	lea    edx,[eax-0x40]
c0010aec:	80 fa 3e             	cmp    dl,0x3e
c0010aef:	77 76                	ja     c0010b67 <VgaText::putchar(char)+0xbf>
c0010af1:	3c 6d                	cmp    al,0x6d
c0010af3:	75 47                	jne    c0010b3c <VgaText::putchar(char)+0x94>
c0010af5:	31 f6                	xor    esi,esi
c0010af7:	31 d2                	xor    edx,edx
c0010af9:	31 c0                	xor    eax,eax
c0010afb:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010afe:	7e 2d                	jle    c0010b2d <VgaText::putchar(char)+0x85>
c0010b00:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010b05:	80 fa 3b             	cmp    dl,0x3b
c0010b08:	75 17                	jne    c0010b21 <VgaText::putchar(char)+0x79>
c0010b0a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010b0e:	50                   	push   eax
c0010b0f:	53                   	push   ebx
c0010b10:	e8 0b f9 ff ff       	call   c0010420 <VgaText::doANSI_SGR(int)>
c0010b15:	59                   	pop    ecx
c0010b16:	31 d2                	xor    edx,edx
c0010b18:	58                   	pop    eax
c0010b19:	31 c0                	xor    eax,eax
c0010b1b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b1f:	eb 09                	jmp    c0010b2a <VgaText::putchar(char)+0x82>
c0010b21:	6b c0 0a             	imul   eax,eax,0xa
c0010b24:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010b28:	88 ca                	mov    dl,cl
c0010b2a:	46                   	inc    esi
c0010b2b:	eb ce                	jmp    c0010afb <VgaText::putchar(char)+0x53>
c0010b2d:	84 d2                	test   dl,dl
c0010b2f:	74 2e                	je     c0010b5f <VgaText::putchar(char)+0xb7>
c0010b31:	50                   	push   eax
c0010b32:	53                   	push   ebx
c0010b33:	e8 e8 f8 ff ff       	call   c0010420 <VgaText::doANSI_SGR(int)>
c0010b38:	58                   	pop    eax
c0010b39:	5a                   	pop    edx
c0010b3a:	eb 23                	jmp    c0010b5f <VgaText::putchar(char)+0xb7>
c0010b3c:	3c 4a                	cmp    al,0x4a
c0010b3e:	75 1f                	jne    c0010b5f <VgaText::putchar(char)+0xb7>
c0010b40:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010b44:	75 19                	jne    c0010b5f <VgaText::putchar(char)+0xb7>
c0010b46:	83 ec 0c             	sub    esp,0xc
c0010b49:	53                   	push   ebx
c0010b4a:	e8 ff fe ff ff       	call   c0010a4e <VgaText::clearScreen()>
c0010b4f:	83 c4 0c             	add    esp,0xc
c0010b52:	6a 00                	push   0x0
c0010b54:	6a 00                	push   0x0
c0010b56:	53                   	push   ebx
c0010b57:	e8 e2 fa ff ff       	call   c001063e <VgaText::setCursor(int, int)>
c0010b5c:	83 c4 10             	add    esp,0x10
c0010b5f:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010b65:	eb 27                	jmp    c0010b8e <VgaText::putchar(char)+0xe6>
c0010b67:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010b6a:	83 fa 0e             	cmp    edx,0xe
c0010b6d:	7f 1f                	jg     c0010b8e <VgaText::putchar(char)+0xe6>
c0010b6f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010b72:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010b75:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010b79:	eb 13                	jmp    c0010b8e <VgaText::putchar(char)+0xe6>
c0010b7b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010b7e:	0f be c0             	movsx  eax,al
c0010b81:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010b84:	50                   	push   eax
c0010b85:	53                   	push   ebx
c0010b86:	e8 71 fb ff ff       	call   c00106fc <VgaText::putchar(char, VgaColour, VgaColour)>
c0010b8b:	83 c4 10             	add    esp,0x10
c0010b8e:	83 c4 14             	add    esp,0x14
c0010b91:	5b                   	pop    ebx
c0010b92:	5e                   	pop    esi
c0010b93:	c3                   	ret    

c0010b94 <VgaText::putx(unsigned int)>:
c0010b94:	57                   	push   edi
c0010b95:	b9 11 00 00 00       	mov    ecx,0x11
c0010b9a:	56                   	push   esi
c0010b9b:	be c2 ae 02 c0       	mov    esi,0xc002aec2
c0010ba0:	53                   	push   ebx
c0010ba1:	83 ec 20             	sub    esp,0x20
c0010ba4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ba8:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010bac:	fc                   	cld    
c0010bad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010baf:	be 08 00 00 00       	mov    esi,0x8
c0010bb4:	50                   	push   eax
c0010bb5:	50                   	push   eax
c0010bb6:	89 d8                	mov    eax,ebx
c0010bb8:	c1 e3 04             	shl    ebx,0x4
c0010bbb:	c1 e8 1c             	shr    eax,0x1c
c0010bbe:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010bc3:	50                   	push   eax
c0010bc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010bc8:	e8 db fe ff ff       	call   c0010aa8 <VgaText::putchar(char)>
c0010bcd:	83 c4 10             	add    esp,0x10
c0010bd0:	4e                   	dec    esi
c0010bd1:	75 e1                	jne    c0010bb4 <VgaText::putx(unsigned int)+0x20>
c0010bd3:	83 c4 20             	add    esp,0x20
c0010bd6:	5b                   	pop    ebx
c0010bd7:	5e                   	pop    esi
c0010bd8:	5f                   	pop    edi
c0010bd9:	c3                   	ret    

c0010bda <VgaText::puts(char const*)>:
c0010bda:	53                   	push   ebx
c0010bdb:	83 ec 08             	sub    esp,0x8
c0010bde:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010be2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010be5:	84 c0                	test   al,al
c0010be7:	74 12                	je     c0010bfb <VgaText::puts(char const*)+0x21>
c0010be9:	43                   	inc    ebx
c0010bea:	51                   	push   ecx
c0010beb:	51                   	push   ecx
c0010bec:	50                   	push   eax
c0010bed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf1:	e8 b2 fe ff ff       	call   c0010aa8 <VgaText::putchar(char)>
c0010bf6:	83 c4 10             	add    esp,0x10
c0010bf9:	eb e7                	jmp    c0010be2 <VgaText::puts(char const*)+0x8>
c0010bfb:	83 c4 08             	add    esp,0x8
c0010bfe:	5b                   	pop    ebx
c0010bff:	c3                   	ret    

c0010c00 <VgaText::VgaText(char const*)>:
c0010c00:	57                   	push   edi
c0010c01:	56                   	push   esi
c0010c02:	53                   	push   ebx
c0010c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c07:	83 ec 08             	sub    esp,0x8
c0010c0a:	6a 00                	push   0x0
c0010c0c:	50                   	push   eax
c0010c0d:	e8 8a 05 00 00       	call   c001119c <UnixFile::UnixFile(int)>
c0010c12:	83 c4 10             	add    esp,0x10
c0010c15:	ba 28 af 02 c0       	mov    edx,0xc002af28
c0010c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c1e:	89 10                	mov    DWORD PTR [eax],edx
c0010c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c24:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c2f:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c3a:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c42:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c4a:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010c51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c55:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c60:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c6b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c76:	8d 50 60             	lea    edx,[eax+0x60]
c0010c79:	bb 00 f3 02 c0       	mov    ebx,0xc002f300
c0010c7e:	b8 08 00 00 00       	mov    eax,0x8
c0010c83:	fc                   	cld    
c0010c84:	89 d7                	mov    edi,edx
c0010c86:	89 de                	mov    esi,ebx
c0010c88:	89 c1                	mov    ecx,eax
c0010c8a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c90:	05 82 00 00 00       	add    eax,0x82
c0010c95:	83 ec 08             	sub    esp,0x8
c0010c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c9c:	50                   	push   eax
c0010c9d:	e8 6a fb fe ff       	call   c000080c <strcpy>
c0010ca2:	83 c4 10             	add    esp,0x10
c0010ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ca9:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010cb0:	83 ec 0c             	sub    esp,0xc
c0010cb3:	6a 01                	push   0x1
c0010cb5:	e8 25 09 00 00       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c0010cba:	83 c4 10             	add    esp,0x10
c0010cbd:	89 c2                	mov    edx,eax
c0010cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010cc6:	8b 1d d0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3d0
c0010ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010cd3:	89 c6                	mov    esi,eax
c0010cd5:	e8 cc ef ff ff       	call   c000fca6 <Phys::allocatePage()>
c0010cda:	6a 05                	push   0x5
c0010cdc:	56                   	push   esi
c0010cdd:	50                   	push   eax
c0010cde:	53                   	push   ebx
c0010cdf:	e8 32 11 00 00       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010ce4:	83 c4 10             	add    esp,0x10
c0010ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ceb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010cee:	83 ec 04             	sub    esp,0x4
c0010cf1:	68 00 0f 00 00       	push   0xf00
c0010cf6:	6a 00                	push   0x0
c0010cf8:	50                   	push   eax
c0010cf9:	e8 52 fa fe ff       	call   c0000750 <memset>
c0010cfe:	83 c4 10             	add    esp,0x10
c0010d01:	83 ec 04             	sub    esp,0x4
c0010d04:	6a 00                	push   0x0
c0010d06:	6a 07                	push   0x7
c0010d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d0c:	e8 a3 f7 ff ff       	call   c00104b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010d11:	83 c4 10             	add    esp,0x10
c0010d14:	83 ec 08             	sub    esp,0x8
c0010d17:	6a 02                	push   0x2
c0010d19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d1d:	e8 c6 fa ff ff       	call   c00107e8 <VgaText::setCursorHeight(int)>
c0010d22:	83 c4 10             	add    esp,0x10
c0010d25:	83 ec 04             	sub    esp,0x4
c0010d28:	6a 00                	push   0x0
c0010d2a:	6a 00                	push   0x0
c0010d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d30:	e8 09 f9 ff ff       	call   c001063e <VgaText::setCursor(int, int)>
c0010d35:	83 c4 10             	add    esp,0x10
c0010d38:	83 ec 08             	sub    esp,0x8
c0010d3b:	6a 01                	push   0x1
c0010d3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d41:	e8 9a f6 ff ff       	call   c00103e0 <VgaText::showCursor(bool)>
c0010d46:	83 c4 10             	add    esp,0x10
c0010d49:	83 ec 08             	sub    esp,0x8
c0010d4c:	6a 01                	push   0x1
c0010d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d52:	e8 95 f6 ff ff       	call   c00103ec <VgaText::disableBlink(bool)>
c0010d57:	83 c4 10             	add    esp,0x10
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010d61:	e8 e8 fc ff ff       	call   c0010a4e <VgaText::clearScreen()>
c0010d66:	83 c4 10             	add    esp,0x10
c0010d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d6d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d75:	05 02 01 00 00       	add    eax,0x102
c0010d7a:	83 ec 04             	sub    esp,0x4
c0010d7d:	68 96 00 00 00       	push   0x96
c0010d82:	6a 00                	push   0x0
c0010d84:	50                   	push   eax
c0010d85:	e8 c6 f9 fe ff       	call   c0000750 <memset>
c0010d8a:	83 c4 10             	add    esp,0x10
c0010d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d91:	05 98 01 00 00       	add    eax,0x198
c0010d96:	83 ec 04             	sub    esp,0x4
c0010d99:	68 2c 01 00 00       	push   0x12c
c0010d9e:	6a 00                	push   0x0
c0010da0:	50                   	push   eax
c0010da1:	e8 aa f9 fe ff       	call   c0000750 <memset>
c0010da6:	83 c4 10             	add    esp,0x10
c0010da9:	90                   	nop
c0010daa:	5b                   	pop    ebx
c0010dab:	5e                   	pop    esi
c0010dac:	5f                   	pop    edi
c0010dad:	c3                   	ret    

c0010dae <VgaText::receiveKey(unsigned char)>:
c0010dae:	55                   	push   ebp
c0010daf:	57                   	push   edi
c0010db0:	56                   	push   esi
c0010db1:	53                   	push   ebx
c0010db2:	83 ec 1c             	sub    esp,0x1c
c0010db5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010db9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010dbd:	84 db                	test   bl,bl
c0010dbf:	0f 84 c9 00 00 00    	je     c0010e8e <VgaText::receiveKey(unsigned char)+0xe0>
c0010dc5:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010dcb:	80 fb 08             	cmp    bl,0x8
c0010dce:	75 2c                	jne    c0010dfc <VgaText::receiveKey(unsigned char)+0x4e>
c0010dd0:	83 ec 0c             	sub    esp,0xc
c0010dd3:	57                   	push   edi
c0010dd4:	e8 93 f9 fe ff       	call   c000076c <strlen>
c0010dd9:	83 c4 10             	add    esp,0x10
c0010ddc:	85 c0                	test   eax,eax
c0010dde:	74 41                	je     c0010e21 <VgaText::receiveKey(unsigned char)+0x73>
c0010de0:	50                   	push   eax
c0010de1:	50                   	push   eax
c0010de2:	6a 08                	push   0x8
c0010de4:	56                   	push   esi
c0010de5:	e8 be fc ff ff       	call   c0010aa8 <VgaText::putchar(char)>
c0010dea:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ded:	e8 7a f9 fe ff       	call   c000076c <strlen>
c0010df2:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010dfa:	eb 22                	jmp    c0010e1e <VgaText::receiveKey(unsigned char)+0x70>
c0010dfc:	0f be c3             	movsx  eax,bl
c0010dff:	52                   	push   edx
c0010e00:	52                   	push   edx
c0010e01:	50                   	push   eax
c0010e02:	56                   	push   esi
c0010e03:	e8 a0 fc ff ff       	call   c0010aa8 <VgaText::putchar(char)>
c0010e08:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010e0c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010e11:	59                   	pop    ecx
c0010e12:	5d                   	pop    ebp
c0010e13:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010e17:	50                   	push   eax
c0010e18:	57                   	push   edi
c0010e19:	e8 2e fb fe ff       	call   c000094c <strcat>
c0010e1e:	83 c4 10             	add    esp,0x10
c0010e21:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010e28:	75 05                	jne    c0010e2f <VgaText::receiveKey(unsigned char)+0x81>
c0010e2a:	80 fb 0a             	cmp    bl,0xa
c0010e2d:	75 53                	jne    c0010e82 <VgaText::receiveKey(unsigned char)+0xd4>
c0010e2f:	83 ec 0c             	sub    esp,0xc
c0010e32:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010e38:	53                   	push   ebx
c0010e39:	e8 2e f9 fe ff       	call   c000076c <strlen>
c0010e3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e41:	89 c5                	mov    ebp,eax
c0010e43:	e8 24 f9 fe ff       	call   c000076c <strlen>
c0010e48:	83 c4 10             	add    esp,0x10
c0010e4b:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010e4f:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010e54:	76 10                	jbe    c0010e66 <VgaText::receiveKey(unsigned char)+0xb8>
c0010e56:	83 ec 0c             	sub    esp,0xc
c0010e59:	68 d3 ae 02 c0       	push   0xc002aed3
c0010e5e:	e8 a2 95 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0010e63:	83 c4 10             	add    esp,0x10
c0010e66:	50                   	push   eax
c0010e67:	50                   	push   eax
c0010e68:	57                   	push   edi
c0010e69:	53                   	push   ebx
c0010e6a:	e8 dd fa fe ff       	call   c000094c <strcat>
c0010e6f:	83 c4 0c             	add    esp,0xc
c0010e72:	68 96 00 00 00       	push   0x96
c0010e77:	6a 00                	push   0x0
c0010e79:	57                   	push   edi
c0010e7a:	e8 d1 f8 fe ff       	call   c0000750 <memset>
c0010e7f:	83 c4 10             	add    esp,0x10
c0010e82:	83 ec 0c             	sub    esp,0xc
c0010e85:	56                   	push   esi
c0010e86:	e8 3d fa ff ff       	call   c00108c8 <VgaText::doUpdate()>
c0010e8b:	83 c4 10             	add    esp,0x10
c0010e8e:	83 c4 1c             	add    esp,0x1c
c0010e91:	5b                   	pop    ebx
c0010e92:	5e                   	pop    esi
c0010e93:	5f                   	pop    edi
c0010e94:	5d                   	pop    ebp
c0010e95:	c3                   	ret    

c0010e96 <VgaText::write(unsigned long long, void*, int*)>:
c0010e96:	55                   	push   ebp
c0010e97:	57                   	push   edi
c0010e98:	56                   	push   esi
c0010e99:	53                   	push   ebx
c0010e9a:	83 ec 0c             	sub    esp,0xc
c0010e9d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ea1:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ea5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ea9:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010eb0:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010eb3:	39 eb                	cmp    ebx,ebp
c0010eb5:	74 13                	je     c0010eca <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010eb7:	43                   	inc    ebx
c0010eb8:	50                   	push   eax
c0010eb9:	50                   	push   eax
c0010eba:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010ebe:	50                   	push   eax
c0010ebf:	56                   	push   esi
c0010ec0:	e8 e3 fb ff ff       	call   c0010aa8 <VgaText::putchar(char)>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	eb e9                	jmp    c0010eb3 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010eca:	83 ec 0c             	sub    esp,0xc
c0010ecd:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010ed4:	56                   	push   esi
c0010ed5:	e8 ee f9 ff ff       	call   c00108c8 <VgaText::doUpdate()>
c0010eda:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ede:	89 38                	mov    DWORD PTR [eax],edi
c0010ee0:	83 c4 1c             	add    esp,0x1c
c0010ee3:	31 c0                	xor    eax,eax
c0010ee5:	5b                   	pop    ebx
c0010ee6:	5e                   	pop    esi
c0010ee7:	5f                   	pop    edi
c0010ee8:	5d                   	pop    ebp
c0010ee9:	c3                   	ret    

c0010eea <newTerminal(char*)>:
c0010eea:	83 ec 28             	sub    esp,0x28
c0010eed:	68 c4 02 00 00       	push   0x2c4
c0010ef2:	e8 0b ea ff ff       	call   c000f902 <malloc>
c0010ef7:	5a                   	pop    edx
c0010ef8:	59                   	pop    ecx
c0010ef9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010efd:	50                   	push   eax
c0010efe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f02:	e8 f9 fc ff ff       	call   c0010c00 <VgaText::VgaText(char const*)>
c0010f07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f0b:	83 c4 2c             	add    esp,0x2c
c0010f0e:	c3                   	ret    
c0010f0f:	90                   	nop

c0010f10 <TSS::TSS()>:
c0010f10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f1b:	90                   	nop
c0010f1c:	c3                   	ret    
c0010f1d:	90                   	nop

c0010f1e <TSS::setESP(unsigned long)>:
c0010f1e:	55                   	push   ebp
c0010f1f:	89 e5                	mov    ebp,esp
c0010f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f27:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010f2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f2d:	90                   	nop
c0010f2e:	5d                   	pop    ebp
c0010f2f:	c3                   	ret    

c0010f30 <TSS::flush()>:
c0010f30:	55                   	push   ebp
c0010f31:	89 e5                	mov    ebp,esp
c0010f33:	83 ec 10             	sub    esp,0x10
c0010f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f39:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f3b:	83 c8 03             	or     eax,0x3
c0010f3e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010f42:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010f46:	66 89 d0             	mov    ax,dx
c0010f49:	0f 00 d8             	ltr    ax
c0010f4c:	90                   	nop
c0010f4d:	c9                   	leave  
c0010f4e:	c3                   	ret    
c0010f4f:	90                   	nop

c0010f50 <TSS::setup(unsigned long, unsigned long)>:
c0010f50:	55                   	push   ebp
c0010f51:	89 e5                	mov    ebp,esp
c0010f53:	83 ec 18             	sub    esp,0x18
c0010f56:	83 ec 0c             	sub    esp,0xc
c0010f59:	6a 68                	push   0x68
c0010f5b:	e8 a2 e9 ff ff       	call   c000f902 <malloc>
c0010f60:	83 c4 10             	add    esp,0x10
c0010f63:	89 c2                	mov    edx,eax
c0010f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f68:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f71:	83 ec 04             	sub    esp,0x4
c0010f74:	6a 68                	push   0x68
c0010f76:	6a 00                	push   0x0
c0010f78:	50                   	push   eax
c0010f79:	e8 d2 f7 fe ff       	call   c0000750 <memset>
c0010f7e:	83 c4 10             	add    esp,0x10
c0010f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f87:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010f8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f93:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f9f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010fa2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fa8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fab:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010fb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fcf:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fdb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010fe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010fed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ff0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ff6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ffc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fff:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011002:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011008:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011015:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011018:	0f 20 da             	mov    edx,cr3
c001101b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001101e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011021:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011027:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001102a:	83 ec 08             	sub    esp,0x8
c001102d:	50                   	push   eax
c001102e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011031:	50                   	push   eax
c0011032:	e8 a7 e0 ff ff       	call   c000f0de <GDTEntry::setBase(unsigned int)>
c0011037:	83 c4 10             	add    esp,0x10
c001103a:	83 ec 08             	sub    esp,0x8
c001103d:	6a 68                	push   0x68
c001103f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011042:	50                   	push   eax
c0011043:	e8 b2 e0 ff ff       	call   c000f0fa <GDTEntry::setLimit(unsigned int)>
c0011048:	83 c4 10             	add    esp,0x10
c001104b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001104f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011052:	83 e0 0f             	and    eax,0xf
c0011055:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011058:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001105b:	83 c8 40             	or     eax,0x40
c001105e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011061:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0011066:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001106c:	05 78 01 00 00       	add    eax,0x178
c0011071:	83 ec 04             	sub    esp,0x4
c0011074:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011077:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001107a:	50                   	push   eax
c001107b:	e8 ae e0 ff ff       	call   c000f12e <GDT::addEntry(GDTEntry)>
c0011080:	83 c4 10             	add    esp,0x10
c0011083:	89 c2                	mov    edx,eax
c0011085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011088:	89 10                	mov    DWORD PTR [eax],edx
c001108a:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001108f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011095:	05 78 01 00 00       	add    eax,0x178
c001109a:	83 ec 0c             	sub    esp,0xc
c001109d:	50                   	push   eax
c001109e:	e8 cf e0 ff ff       	call   c000f172 <GDT::flush()>
c00110a3:	83 c4 10             	add    esp,0x10
c00110a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00110ab:	83 ec 08             	sub    esp,0x8
c00110ae:	50                   	push   eax
c00110af:	68 3c af 02 c0       	push   0xc002af3c
c00110b4:	e8 2c 19 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00110b9:	83 c4 10             	add    esp,0x10
c00110bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00110bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00110c1:	c9                   	leave  
c00110c2:	c3                   	ret    
c00110c3:	90                   	nop

c00110c4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00110c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00110cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110cf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00110d4:	75 08                	jne    c00110de <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00110d6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00110dc:	eb 38                	jmp    c0011116 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00110de:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00110e3:	75 17                	jne    c00110fc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00110e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110ea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110ed:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00110f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00110f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110f9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00110fc:	89 c1                	mov    ecx,eax
c00110fe:	83 e1 fd             	and    ecx,0xfffffffd
c0011101:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011107:	74 cd                	je     c00110d6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011109:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001110e:	83 e0 ef             	and    eax,0xffffffef
c0011111:	83 f8 08             	cmp    eax,0x8
c0011114:	76 c0                	jbe    c00110d6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011116:	31 c0                	xor    eax,eax
c0011118:	c3                   	ret    
c0011119:	90                   	nop

c001111a <ReservedFilename::isAtty()>:
c001111a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001111e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011121:	31 c0                	xor    eax,eax
c0011123:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011129:	74 09                	je     c0011134 <ReservedFilename::isAtty()+0x1a>
c001112b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011131:	0f 94 c0             	sete   al
c0011134:	c3                   	ret    
c0011135:	90                   	nop

c0011136 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001113a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001113e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011141:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011145:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001114a:	75 08                	jne    c0011154 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001114c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011152:	eb 3d                	jmp    c0011191 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011154:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011159:	75 17                	jne    c0011172 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001115b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011160:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011163:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011169:	8b 10                	mov    edx,DWORD PTR [eax]
c001116b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001116f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011172:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011177:	75 04                	jne    c001117d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011179:	89 0a                	mov    DWORD PTR [edx],ecx
c001117b:	eb 14                	jmp    c0011191 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001117d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011182:	74 c8                	je     c001114c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011184:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011189:	83 e0 ef             	and    eax,0xffffffef
c001118c:	83 f8 08             	cmp    eax,0x8
c001118f:	76 bb                	jbe    c001114c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011191:	31 c0                	xor    eax,eax
c0011193:	c3                   	ret    

c0011194 <UnixFile::getFileDescriptor()>:
c0011194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011198:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001119b:	c3                   	ret    

c001119c <UnixFile::UnixFile(int)>:
c001119c:	53                   	push   ebx
c001119d:	83 ec 28             	sub    esp,0x28
c00111a0:	ba 28 b0 02 c0       	mov    edx,0xc002b028
c00111a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111a9:	89 10                	mov    DWORD PTR [eax],edx
c00111ab:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00111b3:	0f 8f 8c 01 00 00    	jg     c0011345 <UnixFile::UnixFile(int)+0x1a9>
c00111b9:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c00111be:	8d 50 01             	lea    edx,[eax+0x1]
c00111c1:	89 15 00 e2 02 c0    	mov    DWORD PTR ds:0xc002e200,edx
c00111c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00111cb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00111ce:	83 ec 08             	sub    esp,0x8
c00111d1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00111d5:	68 b8 f3 02 c0       	push   0xc002f3b8
c00111da:	e8 9d 7e 01 00       	call   c002907c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00111df:	83 c4 10             	add    esp,0x10
c00111e2:	a0 b4 f3 02 c0       	mov    al,ds:0xc002f3b4
c00111e7:	83 f0 01             	xor    eax,0x1
c00111ea:	84 c0                	test   al,al
c00111ec:	0f 84 54 01 00 00    	je     c0011346 <UnixFile::UnixFile(int)+0x1aa>
c00111f2:	c6 05 b4 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f3b4,0x1
c00111f9:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011201:	83 ec 0c             	sub    esp,0xc
c0011204:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011208:	e8 f5 e6 ff ff       	call   c000f902 <malloc>
c001120d:	83 c4 10             	add    esp,0x10
c0011210:	89 c3                	mov    ebx,eax
c0011212:	83 ec 08             	sub    esp,0x8
c0011215:	68 03 ff ff 0f       	push   0xfffff03
c001121a:	53                   	push   ebx
c001121b:	e8 2c 01 00 00       	call   c001134c <ReservedFilename::ReservedFilename(int)>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	89 1d ac f3 02 c0    	mov    DWORD PTR ds:0xc002f3ac,ebx
c0011229:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011231:	83 ec 0c             	sub    esp,0xc
c0011234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011238:	e8 c5 e6 ff ff       	call   c000f902 <malloc>
c001123d:	83 c4 10             	add    esp,0x10
c0011240:	89 c3                	mov    ebx,eax
c0011242:	83 ec 08             	sub    esp,0x8
c0011245:	68 01 ff ff 0f       	push   0xfffff01
c001124a:	53                   	push   ebx
c001124b:	e8 fc 00 00 00       	call   c001134c <ReservedFilename::ReservedFilename(int)>
c0011250:	83 c4 10             	add    esp,0x10
c0011253:	89 1d b0 f3 02 c0    	mov    DWORD PTR ds:0xc002f3b0,ebx
c0011259:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011261:	83 ec 0c             	sub    esp,0xc
c0011264:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011268:	e8 95 e6 ff ff       	call   c000f902 <malloc>
c001126d:	83 c4 10             	add    esp,0x10
c0011270:	89 c3                	mov    ebx,eax
c0011272:	83 ec 08             	sub    esp,0x8
c0011275:	68 00 ff ff 0f       	push   0xfffff00
c001127a:	53                   	push   ebx
c001127b:	e8 cc 00 00 00       	call   c001134c <ReservedFilename::ReservedFilename(int)>
c0011280:	83 c4 10             	add    esp,0x10
c0011283:	89 1d a4 f3 02 c0    	mov    DWORD PTR ds:0xc002f3a4,ebx
c0011289:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011298:	e8 65 e6 ff ff       	call   c000f902 <malloc>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	89 c3                	mov    ebx,eax
c00112a2:	83 ec 08             	sub    esp,0x8
c00112a5:	68 02 ff ff 0f       	push   0xfffff02
c00112aa:	53                   	push   ebx
c00112ab:	e8 9c 00 00 00       	call   c001134c <ReservedFilename::ReservedFilename(int)>
c00112b0:	83 c4 10             	add    esp,0x10
c00112b3:	89 1d a8 f3 02 c0    	mov    DWORD PTR ds:0xc002f3a8,ebx
c00112b9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00112c1:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00112c6:	7f 7e                	jg     c0011346 <UnixFile::UnixFile(int)+0x1aa>
c00112c8:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00112d0:	83 ec 0c             	sub    esp,0xc
c00112d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112d7:	e8 26 e6 ff ff       	call   c000f902 <malloc>
c00112dc:	83 c4 10             	add    esp,0x10
c00112df:	89 c3                	mov    ebx,eax
c00112e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112e5:	05 10 ff ff 0f       	add    eax,0xfffff10
c00112ea:	83 ec 08             	sub    esp,0x8
c00112ed:	50                   	push   eax
c00112ee:	53                   	push   ebx
c00112ef:	e8 58 00 00 00       	call   c001134c <ReservedFilename::ReservedFilename(int)>
c00112f4:	83 c4 10             	add    esp,0x10
c00112f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112fb:	89 1c 85 80 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c80],ebx
c0011302:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001130a:	83 ec 0c             	sub    esp,0xc
c001130d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011311:	e8 ec e5 ff ff       	call   c000f902 <malloc>
c0011316:	83 c4 10             	add    esp,0x10
c0011319:	89 c3                	mov    ebx,eax
c001131b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001131f:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011324:	83 ec 08             	sub    esp,0x8
c0011327:	50                   	push   eax
c0011328:	53                   	push   ebx
c0011329:	e8 1e 00 00 00       	call   c001134c <ReservedFilename::ReservedFilename(int)>
c001132e:	83 c4 10             	add    esp,0x10
c0011331:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011335:	89 1c 85 40 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0cc0],ebx
c001133c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011340:	e9 7c ff ff ff       	jmp    c00112c1 <UnixFile::UnixFile(int)+0x125>
c0011345:	90                   	nop
c0011346:	83 c4 28             	add    esp,0x28
c0011349:	5b                   	pop    ebx
c001134a:	c3                   	ret    
c001134b:	90                   	nop

c001134c <ReservedFilename::ReservedFilename(int)>:
c001134c:	83 ec 0c             	sub    esp,0xc
c001134f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011353:	83 ec 08             	sub    esp,0x8
c0011356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001135a:	50                   	push   eax
c001135b:	e8 3c fe ff ff       	call   c001119c <UnixFile::UnixFile(int)>
c0011360:	83 c4 10             	add    esp,0x10
c0011363:	ba 44 b0 02 c0       	mov    edx,0xc002b044
c0011368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001136c:	89 10                	mov    DWORD PTR [eax],edx
c001136e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011372:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011376:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011379:	90                   	nop
c001137a:	83 c4 0c             	add    esp,0xc
c001137d:	c3                   	ret    

c001137e <UnixFile::~UnixFile()>:
c001137e:	83 ec 1c             	sub    esp,0x1c
c0011381:	ba 28 b0 02 c0       	mov    edx,0xc002b028
c0011386:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001138a:	89 10                	mov    DWORD PTR [eax],edx
c001138c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011393:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011398:	7f 73                	jg     c001140d <UnixFile::~UnixFile()+0x8f>
c001139a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113a2:	83 ec 0c             	sub    esp,0xc
c00113a5:	68 b8 f3 02 c0       	push   0xc002f3b8
c00113aa:	e8 a1 7d 01 00       	call   c0029150 <LinkedList<UnixFile>::getFirstElement()>
c00113af:	83 c4 10             	add    esp,0x10
c00113b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00113b6:	83 ec 0c             	sub    esp,0xc
c00113b9:	68 b8 f3 02 c0       	push   0xc002f3b8
c00113be:	e8 95 7d 01 00       	call   c0029158 <LinkedList<UnixFile>::removeFirst()>
c00113c3:	83 c4 10             	add    esp,0x10
c00113c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00113ca:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00113ce:	74 40                	je     c0011410 <UnixFile::~UnixFile()+0x92>
c00113d0:	83 ec 08             	sub    esp,0x8
c00113d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00113d7:	68 b8 f3 02 c0       	push   0xc002f3b8
c00113dc:	e8 9b 7c 01 00       	call   c002907c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00113e1:	83 c4 10             	add    esp,0x10
c00113e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113e8:	8d 50 01             	lea    edx,[eax+0x1]
c00113eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00113ef:	3d 88 13 00 00       	cmp    eax,0x1388
c00113f4:	0f 94 c0             	sete   al
c00113f7:	84 c0                	test   al,al
c00113f9:	74 a7                	je     c00113a2 <UnixFile::~UnixFile()+0x24>
c00113fb:	83 ec 0c             	sub    esp,0xc
c00113fe:	68 00 b0 02 c0       	push   0xc002b000
c0011403:	e8 fd 8f 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0011408:	83 c4 10             	add    esp,0x10
c001140b:	eb 95                	jmp    c00113a2 <UnixFile::~UnixFile()+0x24>
c001140d:	90                   	nop
c001140e:	eb 01                	jmp    c0011411 <UnixFile::~UnixFile()+0x93>
c0011410:	90                   	nop
c0011411:	90                   	nop
c0011412:	83 c4 1c             	add    esp,0x1c
c0011415:	c3                   	ret    

c0011416 <UnixFile::~UnixFile()>:
c0011416:	83 ec 0c             	sub    esp,0xc
c0011419:	83 ec 0c             	sub    esp,0xc
c001141c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011420:	e8 59 ff ff ff       	call   c001137e <UnixFile::~UnixFile()>
c0011425:	83 c4 10             	add    esp,0x10
c0011428:	83 ec 08             	sub    esp,0x8
c001142b:	6a 0c                	push   0xc
c001142d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011431:	e8 cf 14 00 00       	call   c0012905 <operator delete(void*, unsigned long)>
c0011436:	83 c4 10             	add    esp,0x10
c0011439:	83 c4 0c             	add    esp,0xc
c001143c:	c3                   	ret    
c001143d:	90                   	nop

c001143e <ReservedFilename::~ReservedFilename()>:
c001143e:	83 ec 0c             	sub    esp,0xc
c0011441:	ba 44 b0 02 c0       	mov    edx,0xc002b044
c0011446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001144a:	89 10                	mov    DWORD PTR [eax],edx
c001144c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011450:	83 ec 0c             	sub    esp,0xc
c0011453:	50                   	push   eax
c0011454:	e8 25 ff ff ff       	call   c001137e <UnixFile::~UnixFile()>
c0011459:	83 c4 10             	add    esp,0x10
c001145c:	90                   	nop
c001145d:	83 c4 0c             	add    esp,0xc
c0011460:	c3                   	ret    
c0011461:	90                   	nop

c0011462 <ReservedFilename::~ReservedFilename()>:
c0011462:	83 ec 0c             	sub    esp,0xc
c0011465:	83 ec 0c             	sub    esp,0xc
c0011468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001146c:	e8 cd ff ff ff       	call   c001143e <ReservedFilename::~ReservedFilename()>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	83 ec 08             	sub    esp,0x8
c0011477:	6a 0c                	push   0xc
c0011479:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001147d:	e8 83 14 00 00       	call   c0012905 <operator delete(void*, unsigned long)>
c0011482:	83 c4 10             	add    esp,0x10
c0011485:	83 c4 0c             	add    esp,0xc
c0011488:	c3                   	ret    

c0011489 <getFromFileDescriptor(int)>:
c0011489:	53                   	push   ebx
c001148a:	83 ec 08             	sub    esp,0x8
c001148d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011491:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011497:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001149d:	7f 2c                	jg     c00114cb <getFromFileDescriptor(int)+0x42>
c001149f:	83 ec 0c             	sub    esp,0xc
c00114a2:	68 b8 f3 02 c0       	push   0xc002f3b8
c00114a7:	e8 a4 7c 01 00       	call   c0029150 <LinkedList<UnixFile>::getFirstElement()>
c00114ac:	83 c4 10             	add    esp,0x10
c00114af:	85 c0                	test   eax,eax
c00114b1:	75 04                	jne    c00114b7 <getFromFileDescriptor(int)+0x2e>
c00114b3:	31 c0                	xor    eax,eax
c00114b5:	eb 6e                	jmp    c0011525 <getFromFileDescriptor(int)+0x9c>
c00114b7:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00114ba:	74 69                	je     c0011525 <getFromFileDescriptor(int)+0x9c>
c00114bc:	52                   	push   edx
c00114bd:	52                   	push   edx
c00114be:	50                   	push   eax
c00114bf:	68 b8 f3 02 c0       	push   0xc002f3b8
c00114c4:	e8 31 7d 01 00       	call   c00291fa <LinkedList<UnixFile>::getNext(UnixFile*)>
c00114c9:	eb e1                	jmp    c00114ac <getFromFileDescriptor(int)+0x23>
c00114cb:	a1 ac f3 02 c0       	mov    eax,ds:0xc002f3ac
c00114d0:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00114d6:	74 4d                	je     c0011525 <getFromFileDescriptor(int)+0x9c>
c00114d8:	a1 b0 f3 02 c0       	mov    eax,ds:0xc002f3b0
c00114dd:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00114e3:	74 40                	je     c0011525 <getFromFileDescriptor(int)+0x9c>
c00114e5:	a1 a8 f3 02 c0       	mov    eax,ds:0xc002f3a8
c00114ea:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00114f0:	74 33                	je     c0011525 <getFromFileDescriptor(int)+0x9c>
c00114f2:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c00114f7:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00114fd:	74 26                	je     c0011525 <getFromFileDescriptor(int)+0x9c>
c00114ff:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011505:	83 f8 08             	cmp    eax,0x8
c0011508:	77 09                	ja     c0011513 <getFromFileDescriptor(int)+0x8a>
c001150a:	8b 04 85 80 f3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c80]
c0011511:	eb 12                	jmp    c0011525 <getFromFileDescriptor(int)+0x9c>
c0011513:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011519:	83 fb 08             	cmp    ebx,0x8
c001151c:	77 95                	ja     c00114b3 <getFromFileDescriptor(int)+0x2a>
c001151e:	8b 04 9d 40 f3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0cc0]
c0011525:	83 c4 08             	add    esp,0x8
c0011528:	5b                   	pop    ebx
c0011529:	c3                   	ret    

c001152a <__static_initialization_and_destruction_0(int, int)>:
c001152a:	83 ec 0c             	sub    esp,0xc
c001152d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011532:	75 34                	jne    c0011568 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011534:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001153c:	75 2a                	jne    c0011568 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001153e:	83 ec 0c             	sub    esp,0xc
c0011541:	68 b8 f3 02 c0       	push   0xc002f3b8
c0011546:	e8 d9 7a 01 00       	call   c0029024 <LinkedList<UnixFile>::LinkedList()>
c001154b:	83 c4 10             	add    esp,0x10
c001154e:	83 ec 04             	sub    esp,0x4
c0011551:	68 28 e0 02 c0       	push   0xc002e028
c0011556:	68 b8 f3 02 c0       	push   0xc002f3b8
c001155b:	68 22 90 02 c0       	push   0xc0029022
c0011560:	e8 1a 13 00 00       	call   c001287f <__cxa_atexit>
c0011565:	83 c4 10             	add    esp,0x10
c0011568:	90                   	nop
c0011569:	83 c4 0c             	add    esp,0xc
c001156c:	c3                   	ret    

c001156d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001156d:	83 ec 0c             	sub    esp,0xc
c0011570:	83 ec 08             	sub    esp,0x8
c0011573:	68 ff ff 00 00       	push   0xffff
c0011578:	6a 01                	push   0x1
c001157a:	e8 ab ff ff ff       	call   c001152a <__static_initialization_and_destruction_0(int, int)>
c001157f:	83 c4 10             	add    esp,0x10
c0011582:	83 c4 0c             	add    esp,0xc
c0011585:	c3                   	ret    

c0011586 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011586:	53                   	push   ebx
c0011587:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001158b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001158f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011595:	89 c8                	mov    eax,ecx
c0011597:	d1 e8                	shr    eax,1
c0011599:	03 05 08 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e208
c001159f:	83 e1 01             	and    ecx,0x1
c00115a2:	8a 10                	mov    dl,BYTE PTR [eax]
c00115a4:	75 09                	jne    c00115af <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00115a6:	83 e2 f0             	and    edx,0xfffffff0
c00115a9:	09 da                	or     edx,ebx
c00115ab:	88 10                	mov    BYTE PTR [eax],dl
c00115ad:	5b                   	pop    ebx
c00115ae:	c3                   	ret    
c00115af:	c1 e3 04             	shl    ebx,0x4
c00115b2:	83 e2 0f             	and    edx,0xf
c00115b5:	09 da                	or     edx,ebx
c00115b7:	88 10                	mov    BYTE PTR [eax],dl
c00115b9:	5b                   	pop    ebx
c00115ba:	c3                   	ret    

c00115bb <Virt::getPageState(unsigned long)>:
c00115bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115bf:	8b 0d 08 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e208
c00115c5:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00115cb:	89 d0                	mov    eax,edx
c00115cd:	d1 e8                	shr    eax,1
c00115cf:	83 e2 01             	and    edx,0x1
c00115d2:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00115d5:	75 04                	jne    c00115db <Virt::getPageState(unsigned long)+0x20>
c00115d7:	83 e0 0f             	and    eax,0xf
c00115da:	c3                   	ret    
c00115db:	c0 e8 04             	shr    al,0x4
c00115de:	c3                   	ret    

c00115df <Virt::allocateKernelVirtualPages(int)>:
c00115df:	55                   	push   ebp
c00115e0:	31 ed                	xor    ebp,ebp
c00115e2:	57                   	push   edi
c00115e3:	56                   	push   esi
c00115e4:	53                   	push   ebx
c00115e5:	31 db                	xor    ebx,ebx
c00115e7:	83 ec 1c             	sub    esp,0x1c
c00115ea:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115ee:	8b 3d 04 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e204
c00115f4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00115f9:	57                   	push   edi
c00115fa:	e8 bc ff ff ff       	call   c00115bb <Virt::getPageState(unsigned long)>
c00115ff:	5a                   	pop    edx
c0011600:	84 c0                	test   al,al
c0011602:	75 3a                	jne    c001163e <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011604:	85 db                	test   ebx,ebx
c0011606:	75 02                	jne    c001160a <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011608:	89 fd                	mov    ebp,edi
c001160a:	43                   	inc    ebx
c001160b:	39 f3                	cmp    ebx,esi
c001160d:	74 5a                	je     c0011669 <Virt::allocateKernelVirtualPages(int)+0x8a>
c001160f:	47                   	inc    edi
c0011610:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011616:	76 31                	jbe    c0011649 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011618:	c7 05 04 e2 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e204,0xc8000
c0011622:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011627:	75 28                	jne    c0011651 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011629:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001162e:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011633:	57                   	push   edi
c0011634:	e8 82 ff ff ff       	call   c00115bb <Virt::getPageState(unsigned long)>
c0011639:	5a                   	pop    edx
c001163a:	84 c0                	test   al,al
c001163c:	74 c6                	je     c0011604 <Virt::allocateKernelVirtualPages(int)+0x25>
c001163e:	31 db                	xor    ebx,ebx
c0011640:	47                   	inc    edi
c0011641:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011647:	77 cf                	ja     c0011618 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011649:	89 3d 04 e2 02 c0    	mov    DWORD PTR ds:0xc002e204,edi
c001164f:	eb a8                	jmp    c00115f9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011651:	83 ec 0c             	sub    esp,0xc
c0011654:	68 58 b0 02 c0       	push   0xc002b058
c0011659:	e8 a7 8d 00 00       	call   c001a405 <Krnl::panic(char const*)>
c001165e:	8b 3d 04 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e204
c0011664:	83 c4 10             	add    esp,0x10
c0011667:	eb 90                	jmp    c00115f9 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011669:	89 2d 04 e2 02 c0    	mov    DWORD PTR ds:0xc002e204,ebp
c001166f:	4b                   	dec    ebx
c0011670:	74 5f                	je     c00116d1 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011672:	85 f6                	test   esi,esi
c0011674:	74 3d                	je     c00116b3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011676:	89 e8                	mov    eax,ebp
c0011678:	31 db                	xor    ebx,ebx
c001167a:	8d 7e ff             	lea    edi,[esi-0x1]
c001167d:	eb 14                	jmp    c0011693 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001167f:	6a 01                	push   0x1
c0011681:	43                   	inc    ebx
c0011682:	50                   	push   eax
c0011683:	e8 fe fe ff ff       	call   c0011586 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011688:	58                   	pop    eax
c0011689:	39 f3                	cmp    ebx,esi
c001168b:	5a                   	pop    edx
c001168c:	74 25                	je     c00116b3 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001168e:	a1 04 e2 02 c0       	mov    eax,ds:0xc002e204
c0011693:	8d 50 01             	lea    edx,[eax+0x1]
c0011696:	85 db                	test   ebx,ebx
c0011698:	89 15 04 e2 02 c0    	mov    DWORD PTR ds:0xc002e204,edx
c001169e:	74 20                	je     c00116c0 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00116a0:	39 df                	cmp    edi,ebx
c00116a2:	75 db                	jne    c001167f <Virt::allocateKernelVirtualPages(int)+0xa0>
c00116a4:	6a 03                	push   0x3
c00116a6:	43                   	inc    ebx
c00116a7:	50                   	push   eax
c00116a8:	e8 d9 fe ff ff       	call   c0011586 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116ad:	59                   	pop    ecx
c00116ae:	39 f3                	cmp    ebx,esi
c00116b0:	58                   	pop    eax
c00116b1:	75 db                	jne    c001168e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00116b3:	83 c4 1c             	add    esp,0x1c
c00116b6:	89 e8                	mov    eax,ebp
c00116b8:	5b                   	pop    ebx
c00116b9:	c1 e0 0c             	shl    eax,0xc
c00116bc:	5e                   	pop    esi
c00116bd:	5f                   	pop    edi
c00116be:	5d                   	pop    ebp
c00116bf:	c3                   	ret    
c00116c0:	6a 02                	push   0x2
c00116c2:	bb 01 00 00 00       	mov    ebx,0x1
c00116c7:	50                   	push   eax
c00116c8:	e8 b9 fe ff ff       	call   c0011586 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116cd:	58                   	pop    eax
c00116ce:	5a                   	pop    edx
c00116cf:	eb bd                	jmp    c001168e <Virt::allocateKernelVirtualPages(int)+0xaf>
c00116d1:	6a 04                	push   0x4
c00116d3:	8d 45 01             	lea    eax,[ebp+0x1]
c00116d6:	55                   	push   ebp
c00116d7:	a3 04 e2 02 c0       	mov    ds:0xc002e204,eax
c00116dc:	e8 a5 fe ff ff       	call   c0011586 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116e1:	59                   	pop    ecx
c00116e2:	89 e8                	mov    eax,ebp
c00116e4:	5b                   	pop    ebx
c00116e5:	c1 e0 0c             	shl    eax,0xc
c00116e8:	83 c4 1c             	add    esp,0x1c
c00116eb:	5b                   	pop    ebx
c00116ec:	5e                   	pop    esi
c00116ed:	5f                   	pop    edi
c00116ee:	5d                   	pop    ebp
c00116ef:	c3                   	ret    

c00116f0 <Virt::freeSwapfilePage(unsigned long)>:
c00116f0:	53                   	push   ebx
c00116f1:	8b 15 cc f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3cc
c00116f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116fb:	b8 01 00 00 00       	mov    eax,0x1
c0011700:	89 cb                	mov    ebx,ecx
c0011702:	d3 e0                	shl    eax,cl
c0011704:	c1 eb 05             	shr    ebx,0x5
c0011707:	f7 d0                	not    eax
c0011709:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c001170c:	5b                   	pop    ebx
c001170d:	c3                   	ret    

c001170e <Virt::swapIDToSector(unsigned long)>:
c001170e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011712:	0f af 05 0c e2 02 c0 	imul   eax,DWORD PTR ds:0xc002e20c
c0011719:	03 05 14 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e214
c001171f:	c3                   	ret    

c0011720 <Virt::allocateSwapfilePage()>:
c0011720:	55                   	push   ebp
c0011721:	31 d2                	xor    edx,edx
c0011723:	57                   	push   edi
c0011724:	56                   	push   esi
c0011725:	53                   	push   ebx
c0011726:	83 ec 0c             	sub    esp,0xc
c0011729:	8b 0d 0c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e20c
c001172f:	a1 10 e2 02 c0       	mov    eax,ds:0xc002e210
c0011734:	f7 f1                	div    ecx
c0011736:	39 0d 10 e2 02 c0    	cmp    DWORD PTR ds:0xc002e210,ecx
c001173c:	72 2d                	jb     c001176b <Virt::allocateSwapfilePage()+0x4b>
c001173e:	8b 35 cc f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f3cc
c0011744:	8b 16                	mov    edx,DWORD PTR [esi]
c0011746:	f6 c2 01             	test   dl,0x1
c0011749:	74 3c                	je     c0011787 <Virt::allocateSwapfilePage()+0x67>
c001174b:	31 c9                	xor    ecx,ecx
c001174d:	bf 01 00 00 00       	mov    edi,0x1
c0011752:	eb 12                	jmp    c0011766 <Virt::allocateSwapfilePage()+0x46>
c0011754:	89 fd                	mov    ebp,edi
c0011756:	89 ca                	mov    edx,ecx
c0011758:	d3 e5                	shl    ebp,cl
c001175a:	c1 ea 05             	shr    edx,0x5
c001175d:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011760:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011762:	85 ea                	test   edx,ebp
c0011764:	74 2a                	je     c0011790 <Virt::allocateSwapfilePage()+0x70>
c0011766:	41                   	inc    ecx
c0011767:	39 c8                	cmp    eax,ecx
c0011769:	77 e9                	ja     c0011754 <Virt::allocateSwapfilePage()+0x34>
c001176b:	83 ec 0c             	sub    esp,0xc
c001176e:	68 df b1 02 c0       	push   0xc002b1df
c0011773:	e8 8d 8c 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0011778:	83 c4 10             	add    esp,0x10
c001177b:	31 c9                	xor    ecx,ecx
c001177d:	83 c4 0c             	add    esp,0xc
c0011780:	89 c8                	mov    eax,ecx
c0011782:	5b                   	pop    ebx
c0011783:	5e                   	pop    esi
c0011784:	5f                   	pop    edi
c0011785:	5d                   	pop    ebp
c0011786:	c3                   	ret    
c0011787:	89 f3                	mov    ebx,esi
c0011789:	bd 01 00 00 00       	mov    ebp,0x1
c001178e:	31 c9                	xor    ecx,ecx
c0011790:	09 ea                	or     edx,ebp
c0011792:	89 c8                	mov    eax,ecx
c0011794:	89 13                	mov    DWORD PTR [ebx],edx
c0011796:	83 c4 0c             	add    esp,0xc
c0011799:	5b                   	pop    ebx
c001179a:	5e                   	pop    esi
c001179b:	5f                   	pop    edi
c001179c:	5d                   	pop    ebp
c001179d:	c3                   	ret    

c001179e <Virt::virtualMemorySetup()>:
c001179e:	53                   	push   ebx
c001179f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117a4:	83 ec 08             	sub    esp,0x8
c00117a7:	6a 0f                	push   0xf
c00117a9:	53                   	push   ebx
c00117aa:	43                   	inc    ebx
c00117ab:	e8 d6 fd ff ff       	call   c0011586 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117b0:	59                   	pop    ecx
c00117b1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117b7:	58                   	pop    eax
c00117b8:	75 ed                	jne    c00117a7 <Virt::virtualMemorySetup()+0x9>
c00117ba:	83 ec 08             	sub    esp,0x8
c00117bd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00117c2:	68 00 00 00 c8       	push   0xc8000000
c00117c7:	68 f6 b1 02 c0       	push   0xc002b1f6
c00117cc:	e8 14 12 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00117d1:	58                   	pop    eax
c00117d2:	5a                   	pop    edx
c00117d3:	68 00 f0 ff ef       	push   0xeffff000
c00117d8:	68 0a b2 02 c0       	push   0xc002b20a
c00117dd:	e8 03 12 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00117e2:	83 c4 10             	add    esp,0x10
c00117e5:	83 ec 08             	sub    esp,0x8
c00117e8:	6a 00                	push   0x0
c00117ea:	53                   	push   ebx
c00117eb:	43                   	inc    ebx
c00117ec:	e8 95 fd ff ff       	call   c0011586 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00117f1:	83 c4 10             	add    esp,0x10
c00117f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00117fa:	75 e9                	jne    c00117e5 <Virt::virtualMemorySetup()+0x47>
c00117fc:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011801:	83 ec 08             	sub    esp,0x8
c0011804:	6a 0f                	push   0xf
c0011806:	53                   	push   ebx
c0011807:	43                   	inc    ebx
c0011808:	e8 79 fd ff ff       	call   c0011586 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011816:	75 e9                	jne    c0011801 <Virt::virtualMemorySetup()+0x63>
c0011818:	83 c4 08             	add    esp,0x8
c001181b:	5b                   	pop    ebx
c001181c:	c3                   	ret    

c001181d <Virt::setupPageSwapping(int)>:
c001181d:	57                   	push   edi
c001181e:	56                   	push   esi
c001181f:	53                   	push   ebx
c0011820:	83 ec 1c             	sub    esp,0x1c
c0011823:	68 1e b2 02 c0       	push   0xc002b21e
c0011828:	e8 b8 11 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001182d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011834:	e8 c9 e0 ff ff       	call   c000f902 <malloc>
c0011839:	83 c4 0c             	add    esp,0xc
c001183c:	89 c6                	mov    esi,eax
c001183e:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c0011844:	68 32 b2 02 c0       	push   0xc002b232
c0011849:	50                   	push   eax
c001184a:	e8 f5 16 00 00       	call   c0012f44 <File::File(char const*, Process*)>
c001184f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011852:	e8 c9 18 00 00       	call   c0013120 <File::unlink()>
c0011857:	59                   	pop    ecx
c0011858:	5b                   	pop    ebx
c0011859:	6a 12                	push   0x12
c001185b:	56                   	push   esi
c001185c:	e8 47 17 00 00       	call   c0012fa8 <File::open(FileOpenMode)>
c0011861:	83 c4 10             	add    esp,0x10
c0011864:	85 c0                	test   eax,eax
c0011866:	0f 85 5b 01 00 00    	jne    c00119c7 <Virt::setupPageSwapping(int)+0x1aa>
c001186c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011870:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011878:	c1 e3 08             	shl    ebx,0x8
c001187b:	83 ec 0c             	sub    esp,0xc
c001187e:	68 00 00 01 00       	push   0x10000
c0011883:	e8 7a e0 ff ff       	call   c000f902 <malloc>
c0011888:	83 c4 0c             	add    esp,0xc
c001188b:	89 c7                	mov    edi,eax
c001188d:	68 00 00 01 00       	push   0x10000
c0011892:	68 ee 00 00 00       	push   0xee
c0011897:	50                   	push   eax
c0011898:	e8 b3 ee fe ff       	call   c0000750 <memset>
c001189d:	83 c4 10             	add    esp,0x10
c00118a0:	85 db                	test   ebx,ebx
c00118a2:	79 03                	jns    c00118a7 <Virt::setupPageSwapping(int)+0x8a>
c00118a4:	83 c3 0f             	add    ebx,0xf
c00118a7:	c1 fb 04             	sar    ebx,0x4
c00118aa:	4b                   	dec    ebx
c00118ab:	83 fb ff             	cmp    ebx,0xffffffff
c00118ae:	74 4f                	je     c00118ff <Virt::setupPageSwapping(int)+0xe2>
c00118b0:	83 ec 0c             	sub    esp,0xc
c00118b3:	8b 06                	mov    eax,DWORD PTR [esi]
c00118b5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00118b9:	52                   	push   edx
c00118ba:	57                   	push   edi
c00118bb:	6a 00                	push   0x0
c00118bd:	68 00 00 01 00       	push   0x10000
c00118c2:	56                   	push   esi
c00118c3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00118c6:	83 c4 20             	add    esp,0x20
c00118c9:	85 c0                	test   eax,eax
c00118cb:	0f 85 e0 00 00 00    	jne    c00119b1 <Virt::setupPageSwapping(int)+0x194>
c00118d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118d5:	3d 00 00 01 00       	cmp    eax,0x10000
c00118da:	74 ce                	je     c00118aa <Virt::setupPageSwapping(int)+0x8d>
c00118dc:	83 ec 08             	sub    esp,0x8
c00118df:	4b                   	dec    ebx
c00118e0:	50                   	push   eax
c00118e1:	68 85 b2 02 c0       	push   0xc002b285
c00118e6:	e8 fa 10 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00118eb:	c7 04 24 8e b2 02 c0 	mov    DWORD PTR [esp],0xc002b28e
c00118f2:	e8 0e 8b 00 00       	call   c001a405 <Krnl::panic(char const*)>
c00118f7:	83 c4 10             	add    esp,0x10
c00118fa:	83 fb ff             	cmp    ebx,0xffffffff
c00118fd:	75 b1                	jne    c00118b0 <Virt::setupPageSwapping(int)+0x93>
c00118ff:	83 ec 0c             	sub    esp,0xc
c0011902:	56                   	push   esi
c0011903:	e8 fe 16 00 00       	call   c0013006 <File::close()>
c0011908:	89 3c 24             	mov    DWORD PTR [esp],edi
c001190b:	e8 12 e0 ff ff       	call   c000f922 <rfree>
c0011910:	83 c4 10             	add    esp,0x10
c0011913:	85 f6                	test   esi,esi
c0011915:	74 0c                	je     c0011923 <Virt::setupPageSwapping(int)+0x106>
c0011917:	83 ec 0c             	sub    esp,0xc
c001191a:	8b 06                	mov    eax,DWORD PTR [esi]
c001191c:	56                   	push   esi
c001191d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011920:	83 c4 10             	add    esp,0x10
c0011923:	83 ec 08             	sub    esp,0x8
c0011926:	a1 68 f8 02 c0       	mov    eax,ds:0xc002f868
c001192b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011931:	8b 10                	mov    edx,DWORD PTR [eax]
c0011933:	68 32 b2 02 c0       	push   0xc002b232
c0011938:	50                   	push   eax
c0011939:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c001193c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011940:	c6 05 18 e2 02 c0 43 	mov    BYTE PTR ds:0xc002e218,0x43
c0011947:	c1 e2 0b             	shl    edx,0xb
c001194a:	a3 14 e2 02 c0       	mov    ds:0xc002e214,eax
c001194f:	89 15 10 e2 02 c0    	mov    DWORD PTR ds:0xc002e210,edx
c0011955:	c7 05 0c e2 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e20c,0x8
c001195f:	c1 ea 08             	shr    edx,0x8
c0011962:	89 14 24             	mov    DWORD PTR [esp],edx
c0011965:	e8 98 df ff ff       	call   c000f902 <malloc>
c001196a:	83 c4 0c             	add    esp,0xc
c001196d:	89 c1                	mov    ecx,eax
c001196f:	a3 cc f3 02 c0       	mov    ds:0xc002f3cc,eax
c0011974:	31 d2                	xor    edx,edx
c0011976:	a1 10 e2 02 c0       	mov    eax,ds:0xc002e210
c001197b:	f7 35 0c e2 02 c0    	div    DWORD PTR ds:0xc002e20c
c0011981:	c1 e8 05             	shr    eax,0x5
c0011984:	50                   	push   eax
c0011985:	6a 00                	push   0x0
c0011987:	51                   	push   ecx
c0011988:	e8 c3 ed fe ff       	call   c0000750 <memset>
c001198d:	58                   	pop    eax
c001198e:	a1 10 e2 02 c0       	mov    eax,ds:0xc002e210
c0011993:	5a                   	pop    edx
c0011994:	31 d2                	xor    edx,edx
c0011996:	f7 35 0c e2 02 c0    	div    DWORD PTR ds:0xc002e20c
c001199c:	c1 e8 05             	shr    eax,0x5
c001199f:	50                   	push   eax
c00119a0:	68 94 b2 02 c0       	push   0xc002b294
c00119a5:	e8 3b 10 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00119aa:	83 c4 20             	add    esp,0x20
c00119ad:	5b                   	pop    ebx
c00119ae:	5e                   	pop    esi
c00119af:	5f                   	pop    edi
c00119b0:	c3                   	ret    
c00119b1:	83 ec 08             	sub    esp,0x8
c00119b4:	50                   	push   eax
c00119b5:	68 6d b2 02 c0       	push   0xc002b26d
c00119ba:	e8 26 10 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00119bf:	83 c4 10             	add    esp,0x10
c00119c2:	e9 0a ff ff ff       	jmp    c00118d1 <Virt::setupPageSwapping(int)+0xb4>
c00119c7:	83 ec 08             	sub    esp,0x8
c00119ca:	50                   	push   eax
c00119cb:	68 49 b2 02 c0       	push   0xc002b249
c00119d0:	e8 10 10 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00119d5:	c7 04 24 52 b2 02 c0 	mov    DWORD PTR [esp],0xc002b252
c00119dc:	e8 24 8a 00 00       	call   c001a405 <Krnl::panic(char const*)>
c00119e1:	83 c4 10             	add    esp,0x10
c00119e4:	e9 83 fe ff ff       	jmp    c001186c <Virt::setupPageSwapping(int)+0x4f>
c00119e9:	90                   	nop

c00119ea <VAS::VAS()>:
c00119ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119ee:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119f9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a04:	a3 d0 f3 02 c0       	mov    ds:0xc002f3d0,eax
c0011a09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a0d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a15:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a1c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011a23:	90                   	nop
c0011a24:	c3                   	ret    
c0011a25:	90                   	nop

c0011a26 <VAS::VAS(VAS*)>:
c0011a26:	83 ec 0c             	sub    esp,0xc
c0011a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a38:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011a3f:	83 ec 0c             	sub    esp,0xc
c0011a42:	68 78 b0 02 c0       	push   0xc002b078
c0011a47:	e8 b9 89 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	90                   	nop
c0011a50:	83 c4 0c             	add    esp,0xc
c0011a53:	c3                   	ret    

c0011a54 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011a54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a58:	89 c2                	mov    edx,eax
c0011a5a:	c1 e8 0a             	shr    eax,0xa
c0011a5d:	c1 ea 16             	shr    edx,0x16
c0011a60:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011a65:	19 c9                	sbb    ecx,ecx
c0011a67:	c1 e2 0c             	shl    edx,0xc
c0011a6a:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011a70:	25 fc 0f 00 00       	and    eax,0xffc
c0011a75:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011a7c:	01 d0                	add    eax,edx
c0011a7e:	c3                   	ret    
c0011a7f:	90                   	nop

c0011a80 <VAS::getPageTableEntry(unsigned long)>:
c0011a80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011a84:	89 ca                	mov    edx,ecx
c0011a86:	c1 e9 0a             	shr    ecx,0xa
c0011a89:	c1 ea 16             	shr    edx,0x16
c0011a8c:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011a92:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011a98:	c1 e0 0c             	shl    eax,0xc
c0011a9b:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011a9e:	c3                   	ret    

c0011a9f <Virt::freeKernelVirtualPages(unsigned long)>:
c0011a9f:	57                   	push   edi
c0011aa0:	56                   	push   esi
c0011aa1:	be 01 00 00 00       	mov    esi,0x1
c0011aa6:	53                   	push   ebx
c0011aa7:	83 ec 10             	sub    esp,0x10
c0011aaa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011aae:	c1 eb 0c             	shr    ebx,0xc
c0011ab1:	eb 3f                	jmp    c0011af2 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011ab3:	83 ec 08             	sub    esp,0x8
c0011ab6:	57                   	push   edi
c0011ab7:	ff 35 d0 f3 02 c0    	push   DWORD PTR ds:0xc002f3d0
c0011abd:	e8 be ff ff ff       	call   c0011a80 <VAS::getPageTableEntry(unsigned long)>
c0011ac2:	83 c4 10             	add    esp,0x10
c0011ac5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ac7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011acb:	f6 c4 04             	test   ah,0x4
c0011ace:	75 5f                	jne    c0011b2f <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011ad0:	80 fa 04             	cmp    dl,0x4
c0011ad3:	74 78                	je     c0011b4d <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011ad5:	80 fa 02             	cmp    dl,0x2
c0011ad8:	0f 84 88 00 00 00    	je     c0011b66 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011ade:	80 fa 03             	cmp    dl,0x3
c0011ae1:	0f 84 ad 00 00 00    	je     c0011b94 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011ae7:	fe ca                	dec    dl
c0011ae9:	0f 84 92 00 00 00    	je     c0011b81 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011aef:	43                   	inc    ebx
c0011af0:	31 f6                	xor    esi,esi
c0011af2:	53                   	push   ebx
c0011af3:	89 df                	mov    edi,ebx
c0011af5:	e8 c1 fa ff ff       	call   c00115bb <Virt::getPageState(unsigned long)>
c0011afa:	c1 e7 0c             	shl    edi,0xc
c0011afd:	59                   	pop    ecx
c0011afe:	84 c0                	test   al,al
c0011b00:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b04:	75 ad                	jne    c0011ab3 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011b06:	83 ec 0c             	sub    esp,0xc
c0011b09:	68 af b2 02 c0       	push   0xc002b2af
c0011b0e:	e8 f2 88 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0011b13:	58                   	pop    eax
c0011b14:	5a                   	pop    edx
c0011b15:	57                   	push   edi
c0011b16:	ff 35 d0 f3 02 c0    	push   DWORD PTR ds:0xc002f3d0
c0011b1c:	e8 5f ff ff ff       	call   c0011a80 <VAS::getPageTableEntry(unsigned long)>
c0011b21:	83 c4 10             	add    esp,0x10
c0011b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b26:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b2a:	f6 c4 04             	test   ah,0x4
c0011b2d:	74 c0                	je     c0011aef <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b2f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011b33:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011b38:	83 ec 0c             	sub    esp,0xc
c0011b3b:	50                   	push   eax
c0011b3c:	e8 0a e1 ff ff       	call   c000fc4b <Phys::freePage(unsigned long)>
c0011b41:	83 c4 10             	add    esp,0x10
c0011b44:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b48:	80 fa 04             	cmp    dl,0x4
c0011b4b:	75 88                	jne    c0011ad5 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011b4d:	89 f0                	mov    eax,esi
c0011b4f:	84 c0                	test   al,al
c0011b51:	75 47                	jne    c0011b9a <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011b53:	c7 44 24 20 9c b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b09c
c0011b5b:	83 c4 10             	add    esp,0x10
c0011b5e:	5b                   	pop    ebx
c0011b5f:	5e                   	pop    esi
c0011b60:	5f                   	pop    edi
c0011b61:	e9 9f 88 00 00       	jmp    c001a405 <Krnl::panic(char const*)>
c0011b66:	89 f0                	mov    eax,esi
c0011b68:	84 c0                	test   al,al
c0011b6a:	75 15                	jne    c0011b81 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b6c:	83 ec 0c             	sub    esp,0xc
c0011b6f:	68 cb b2 02 c0       	push   0xc002b2cb
c0011b74:	e8 8c 88 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	e9 6e ff ff ff       	jmp    c0011aef <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b81:	83 ec 08             	sub    esp,0x8
c0011b84:	6a 00                	push   0x0
c0011b86:	53                   	push   ebx
c0011b87:	e8 fa f9 ff ff       	call   c0011586 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b8c:	83 c4 10             	add    esp,0x10
c0011b8f:	e9 5b ff ff ff       	jmp    c0011aef <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011b94:	89 f0                	mov    eax,esi
c0011b96:	84 c0                	test   al,al
c0011b98:	75 15                	jne    c0011baf <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011b9a:	83 ec 08             	sub    esp,0x8
c0011b9d:	6a 00                	push   0x0
c0011b9f:	53                   	push   ebx
c0011ba0:	e8 e1 f9 ff ff       	call   c0011586 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ba5:	83 c4 10             	add    esp,0x10
c0011ba8:	83 c4 10             	add    esp,0x10
c0011bab:	5b                   	pop    ebx
c0011bac:	5e                   	pop    esi
c0011bad:	5f                   	pop    edi
c0011bae:	c3                   	ret    
c0011baf:	c7 44 24 20 e7 b2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b2e7
c0011bb7:	83 c4 10             	add    esp,0x10
c0011bba:	5b                   	pop    ebx
c0011bbb:	5e                   	pop    esi
c0011bbc:	5f                   	pop    edi
c0011bbd:	e9 43 88 00 00       	jmp    c001a405 <Krnl::panic(char const*)>

c0011bc2 <VAS::freeAllocatedPages(unsigned long)>:
c0011bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011bca:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011bce:	74 09                	je     c0011bd9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011bd0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011bd4:	e9 c6 fe ff ff       	jmp    c0011a9f <Virt::freeKernelVirtualPages(unsigned long)>
c0011bd9:	c7 44 24 04 c0 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b0c0
c0011be1:	e9 ff 0d 00 00       	jmp    c00129e5 <Dbg::kprintf(char const*, ...)>

c0011be6 <VAS::virtualToPhysical(unsigned long)>:
c0011be6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011bea:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011bee:	e8 8d fe ff ff       	call   c0011a80 <VAS::getPageTableEntry(unsigned long)>
c0011bf3:	5a                   	pop    edx
c0011bf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf6:	59                   	pop    ecx
c0011bf7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bfc:	c3                   	ret    
c0011bfd:	90                   	nop

c0011bfe <VAS::reflagRange(unsigned long, int, int, int)>:
c0011bfe:	55                   	push   ebp
c0011bff:	57                   	push   edi
c0011c00:	56                   	push   esi
c0011c01:	53                   	push   ebx
c0011c02:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011c06:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011c0a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011c0e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011c12:	85 db                	test   ebx,ebx
c0011c14:	7e 22                	jle    c0011c38 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011c16:	c1 e3 0c             	shl    ebx,0xc
c0011c19:	01 f3                	add    ebx,esi
c0011c1b:	56                   	push   esi
c0011c1c:	81 c6 00 10 00 00    	add    esi,0x1000
c0011c22:	55                   	push   ebp
c0011c23:	e8 58 fe ff ff       	call   c0011a80 <VAS::getPageTableEntry(unsigned long)>
c0011c28:	5a                   	pop    edx
c0011c29:	59                   	pop    ecx
c0011c2a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011c2c:	21 f9                	and    ecx,edi
c0011c2e:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011c32:	39 f3                	cmp    ebx,esi
c0011c34:	89 08                	mov    DWORD PTR [eax],ecx
c0011c36:	75 e3                	jne    c0011c1b <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011c38:	5b                   	pop    ebx
c0011c39:	5e                   	pop    esi
c0011c3a:	5f                   	pop    edi
c0011c3b:	5d                   	pop    ebp
c0011c3c:	c3                   	ret    
c0011c3d:	90                   	nop

c0011c3e <VAS::setToWriteCombining(unsigned long, int)>:
c0011c3e:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0011c43:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c49:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011c50:	75 01                	jne    c0011c53 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011c52:	c3                   	ret    
c0011c53:	68 80 00 00 00       	push   0x80
c0011c58:	6a ff                	push   0xffffffff
c0011c5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c66:	e8 93 ff ff ff       	call   c0011bfe <VAS::reflagRange(unsigned long, int, int, int)>
c0011c6b:	83 c4 14             	add    esp,0x14
c0011c6e:	c3                   	ret    
c0011c6f:	90                   	nop

c0011c70 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011c70:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c79:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c80:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011c83:	19 c0                	sbb    eax,eax
c0011c85:	83 ca 03             	or     edx,0x3
c0011c88:	83 e0 fc             	and    eax,0xfffffffc
c0011c8b:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011c92:	0f 20 d8             	mov    eax,cr3
c0011c95:	0f 22 d8             	mov    cr3,eax
c0011c98:	c3                   	ret    
c0011c99:	90                   	nop

c0011c9a <VAS::~VAS()>:
c0011c9a:	83 ec 2c             	sub    esp,0x2c
c0011c9d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ca5:	fa                   	cli    
c0011ca6:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0011cab:	40                   	inc    eax
c0011cac:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c0011cb1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011cb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cb8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011cbb:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011cc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011cc5:	6a 01                	push   0x1
c0011cc7:	50                   	push   eax
c0011cc8:	e8 a3 ff ff ff       	call   c0011c70 <VAS::mapOtherVASIn(bool, VAS*)>
c0011ccd:	83 c4 0c             	add    esp,0xc
c0011cd0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011cd8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011ce0:	0f 8f d4 00 00 00    	jg     c0011dba <VAS::~VAS()+0x120>
c0011ce6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ced:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011cf1:	c1 e2 02             	shl    edx,0x2
c0011cf4:	01 d0                	add    eax,edx
c0011cf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d00:	83 e0 01             	and    eax,0x1
c0011d03:	0f 84 a8 00 00 00    	je     c0011db1 <VAS::~VAS()+0x117>
c0011d09:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011d11:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011d19:	7f 72                	jg     c0011d8d <VAS::~VAS()+0xf3>
c0011d1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011d1f:	c1 e0 0a             	shl    eax,0xa
c0011d22:	89 c2                	mov    edx,eax
c0011d24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d28:	01 d0                	add    eax,edx
c0011d2a:	c1 e0 0c             	shl    eax,0xc
c0011d2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d31:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d36:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d38:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d3b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d41:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011d45:	6a 01                	push   0x1
c0011d47:	50                   	push   eax
c0011d48:	e8 07 fd ff ff       	call   c0011a54 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011d4d:	83 c4 0c             	add    esp,0xc
c0011d50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011d58:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d62:	25 01 04 00 00       	and    eax,0x401
c0011d67:	3d 01 04 00 00       	cmp    eax,0x401
c0011d6c:	75 19                	jne    c0011d87 <VAS::~VAS()+0xed>
c0011d6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d77:	83 ec 0c             	sub    esp,0xc
c0011d7a:	50                   	push   eax
c0011d7b:	e8 cb de ff ff       	call   c000fc4b <Phys::freePage(unsigned long)>
c0011d80:	83 c4 10             	add    esp,0x10
c0011d83:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011d87:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011d8b:	eb 84                	jmp    c0011d11 <VAS::~VAS()+0x77>
c0011d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d91:	25 00 04 00 00       	and    eax,0x400
c0011d96:	74 19                	je     c0011db1 <VAS::~VAS()+0x117>
c0011d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011da1:	83 ec 0c             	sub    esp,0xc
c0011da4:	50                   	push   eax
c0011da5:	e8 a1 de ff ff       	call   c000fc4b <Phys::freePage(unsigned long)>
c0011daa:	83 c4 10             	add    esp,0x10
c0011dad:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011db1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011db5:	e9 1e ff ff ff       	jmp    c0011cd8 <VAS::~VAS()+0x3e>
c0011dba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011dbe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011dc1:	83 ec 0c             	sub    esp,0xc
c0011dc4:	50                   	push   eax
c0011dc5:	e8 d5 fc ff ff       	call   c0011a9f <Virt::freeKernelVirtualPages(unsigned long)>
c0011dca:	83 c4 10             	add    esp,0x10
c0011dcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011dd1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011dd4:	83 ec 0c             	sub    esp,0xc
c0011dd7:	50                   	push   eax
c0011dd8:	e8 6e de ff ff       	call   c000fc4b <Phys::freePage(unsigned long)>
c0011ddd:	83 c4 10             	add    esp,0x10
c0011de0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011de4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011de8:	c1 e0 02             	shl    eax,0x2
c0011deb:	83 ec 08             	sub    esp,0x8
c0011dee:	50                   	push   eax
c0011def:	68 e4 b0 02 c0       	push   0xc002b0e4
c0011df4:	e8 ec 0b 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0011e01:	48                   	dec    eax
c0011e02:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c0011e07:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0011e0c:	85 c0                	test   eax,eax
c0011e0e:	75 01                	jne    c0011e11 <VAS::~VAS()+0x177>
c0011e10:	fb                   	sti    
c0011e11:	90                   	nop
c0011e12:	83 c4 2c             	add    esp,0x2c
c0011e15:	c3                   	ret    

c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011e16:	55                   	push   ebp
c0011e17:	57                   	push   edi
c0011e18:	56                   	push   esi
c0011e19:	53                   	push   ebx
c0011e1a:	83 ec 1c             	sub    esp,0x1c
c0011e1d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011e21:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e25:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011e2b:	77 08                	ja     c0011e35 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011e2d:	0f 20 d8             	mov    eax,cr3
c0011e30:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011e33:	75 47                	jne    c0011e7c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011e35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e39:	09 d8                	or     eax,ebx
c0011e3b:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e40:	75 57                	jne    c0011e99 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011e42:	89 de                	mov    esi,ebx
c0011e44:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e47:	c1 ee 16             	shr    esi,0x16
c0011e4a:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011e51:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011e55:	74 54                	je     c0011eab <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e5b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011e61:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011e65:	c1 e6 0c             	shl    esi,0xc
c0011e68:	c1 eb 0a             	shr    ebx,0xa
c0011e6b:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011e71:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011e74:	83 c4 1c             	add    esp,0x1c
c0011e77:	5b                   	pop    ebx
c0011e78:	5e                   	pop    esi
c0011e79:	5f                   	pop    edi
c0011e7a:	5d                   	pop    ebp
c0011e7b:	c3                   	ret    
c0011e7c:	83 ec 0c             	sub    esp,0xc
c0011e7f:	68 04 b1 02 c0       	push   0xc002b104
c0011e84:	e8 5c 0b 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0011e89:	83 c4 10             	add    esp,0x10
c0011e8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e90:	09 d8                	or     eax,ebx
c0011e92:	a9 ff 0f 00 00       	test   eax,0xfff
c0011e97:	74 a9                	je     c0011e42 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011e99:	83 ec 0c             	sub    esp,0xc
c0011e9c:	68 6c b1 02 c0       	push   0xc002b16c
c0011ea1:	e8 5f 85 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0011ea6:	83 c4 10             	add    esp,0x10
c0011ea9:	eb 97                	jmp    c0011e42 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011eab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011eaf:	e8 f2 dd ff ff       	call   c000fca6 <Phys::allocatePage()>
c0011eb4:	83 ec 0c             	sub    esp,0xc
c0011eb7:	89 c5                	mov    ebp,eax
c0011eb9:	8b 0d d0 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f3d0
c0011ebf:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011ec3:	6a 01                	push   0x1
c0011ec5:	e8 15 f7 ff ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c0011eca:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011ed1:	6a 01                	push   0x1
c0011ed3:	50                   	push   eax
c0011ed4:	55                   	push   ebp
c0011ed5:	81 cd 07 04 00 00    	or     ebp,0x407
c0011edb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011edf:	51                   	push   ecx
c0011ee0:	e8 27 02 00 00       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ee5:	83 c4 1c             	add    esp,0x1c
c0011ee8:	68 00 10 00 00       	push   0x1000
c0011eed:	6a 00                	push   0x0
c0011eef:	50                   	push   eax
c0011ef0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011ef4:	e8 57 e8 fe ff       	call   c0000750 <memset>
c0011ef9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011efd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f00:	e8 9a fb ff ff       	call   c0011a9f <Virt::freeKernelVirtualPages(unsigned long)>
c0011f05:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f09:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011f0c:	83 c4 10             	add    esp,0x10
c0011f0f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011f12:	e9 40 ff ff ff       	jmp    c0011e57 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011f17:	90                   	nop

c0011f18 <VAS::allocatePages(int, int)>:
c0011f18:	55                   	push   ebp
c0011f19:	57                   	push   edi
c0011f1a:	56                   	push   esi
c0011f1b:	53                   	push   ebx
c0011f1c:	83 ec 1c             	sub    esp,0x1c
c0011f1f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011f23:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0011f28:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f2e:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011f34:	83 e0 01             	and    eax,0x1
c0011f37:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011f3b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011f3f:	0f 85 cc 00 00 00    	jne    c0012011 <VAS::allocatePages(int, int)+0xf9>
c0011f45:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011f48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f4c:	85 c0                	test   eax,eax
c0011f4e:	0f 84 a1 00 00 00    	je     c0011ff5 <VAS::allocatePages(int, int)+0xdd>
c0011f54:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011f58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f5c:	c1 e6 0c             	shl    esi,0xc
c0011f5f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011f63:	85 c0                	test   eax,eax
c0011f65:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011f68:	7e 33                	jle    c0011f9d <VAS::allocatePages(int, int)+0x85>
c0011f6a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011f6e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f72:	81 cd 00 04 00 00    	or     ebp,0x400
c0011f78:	e8 29 dd ff ff       	call   c000fca6 <Phys::allocatePage()>
c0011f7d:	55                   	push   ebp
c0011f7e:	53                   	push   ebx
c0011f7f:	50                   	push   eax
c0011f80:	57                   	push   edi
c0011f81:	e8 90 fe ff ff       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f86:	83 c4 10             	add    esp,0x10
c0011f89:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f8e:	74 03                	je     c0011f93 <VAS::allocatePages(int, int)+0x7b>
c0011f90:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f93:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f99:	39 de                	cmp    esi,ebx
c0011f9b:	75 db                	jne    c0011f78 <VAS::allocatePages(int, int)+0x60>
c0011f9d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011fa2:	75 12                	jne    c0011fb6 <VAS::allocatePages(int, int)+0x9e>
c0011fa4:	0f 20 d8             	mov    eax,cr3
c0011fa7:	0f 22 d8             	mov    cr3,eax
c0011faa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fae:	83 c4 1c             	add    esp,0x1c
c0011fb1:	5b                   	pop    ebx
c0011fb2:	5e                   	pop    esi
c0011fb3:	5f                   	pop    edi
c0011fb4:	5d                   	pop    ebp
c0011fb5:	c3                   	ret    
c0011fb6:	c1 ee 0a             	shr    esi,0xa
c0011fb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011fbd:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011fc3:	c1 eb 0a             	shr    ebx,0xa
c0011fc6:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011fcc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011fd2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011fd8:	39 c3                	cmp    ebx,eax
c0011fda:	77 ce                	ja     c0011faa <VAS::allocatePages(int, int)+0x92>
c0011fdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011fdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fe5:	39 d8                	cmp    eax,ebx
c0011fe7:	73 f3                	jae    c0011fdc <VAS::allocatePages(int, int)+0xc4>
c0011fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fed:	83 c4 1c             	add    esp,0x1c
c0011ff0:	5b                   	pop    ebx
c0011ff1:	5e                   	pop    esi
c0011ff2:	5f                   	pop    edi
c0011ff3:	5d                   	pop    ebp
c0011ff4:	c3                   	ret    
c0011ff5:	83 ec 0c             	sub    esp,0xc
c0011ff8:	68 90 b1 02 c0       	push   0xc002b190
c0011ffd:	e8 03 84 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0012002:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012005:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012009:	83 c4 10             	add    esp,0x10
c001200c:	e9 43 ff ff ff       	jmp    c0011f54 <VAS::allocatePages(int, int)+0x3c>
c0012011:	83 ec 0c             	sub    esp,0xc
c0012014:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012018:	e8 c2 f5 ff ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c001201d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012021:	83 c4 10             	add    esp,0x10
c0012024:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012029:	0f 87 9b 00 00 00    	ja     c00120ca <VAS::allocatePages(int, int)+0x1b2>
c001202f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012033:	85 d2                	test   edx,edx
c0012035:	7e 3c                	jle    c0012073 <VAS::allocatePages(int, int)+0x15b>
c0012037:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001203b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001203f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012043:	c1 e5 0c             	shl    ebp,0xc
c0012046:	81 ce 00 04 00 00    	or     esi,0x400
c001204c:	01 dd                	add    ebp,ebx
c001204e:	e8 53 dc ff ff       	call   c000fca6 <Phys::allocatePage()>
c0012053:	56                   	push   esi
c0012054:	53                   	push   ebx
c0012055:	50                   	push   eax
c0012056:	57                   	push   edi
c0012057:	e8 ba fd ff ff       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c001205c:	83 c4 10             	add    esp,0x10
c001205f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012064:	74 03                	je     c0012069 <VAS::allocatePages(int, int)+0x151>
c0012066:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012069:	81 c3 00 10 00 00    	add    ebx,0x1000
c001206f:	39 dd                	cmp    ebp,ebx
c0012071:	75 db                	jne    c001204e <VAS::allocatePages(int, int)+0x136>
c0012073:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012078:	0f 84 26 ff ff ff    	je     c0011fa4 <VAS::allocatePages(int, int)+0x8c>
c001207e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012082:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012086:	89 d3                	mov    ebx,edx
c0012088:	c1 e0 0c             	shl    eax,0xc
c001208b:	c1 eb 0a             	shr    ebx,0xa
c001208e:	01 d0                	add    eax,edx
c0012090:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012096:	c1 e8 0a             	shr    eax,0xa
c0012099:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001209f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120a4:	2d 00 00 40 00       	sub    eax,0x400000
c00120a9:	39 c3                	cmp    ebx,eax
c00120ab:	0f 87 f9 fe ff ff    	ja     c0011faa <VAS::allocatePages(int, int)+0x92>
c00120b1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120b4:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120ba:	39 d8                	cmp    eax,ebx
c00120bc:	73 f3                	jae    c00120b1 <VAS::allocatePages(int, int)+0x199>
c00120be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120c2:	83 c4 1c             	add    esp,0x1c
c00120c5:	5b                   	pop    ebx
c00120c6:	5e                   	pop    esi
c00120c7:	5f                   	pop    edi
c00120c8:	5d                   	pop    ebp
c00120c9:	c3                   	ret    
c00120ca:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00120cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120d5:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00120dc:	0f 84 4d ff ff ff    	je     c001202f <VAS::allocatePages(int, int)+0x117>
c00120e2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00120ea:	e9 40 ff ff ff       	jmp    c001202f <VAS::allocatePages(int, int)+0x117>
c00120ef:	90                   	nop

c00120f0 <VAS::setCPUSpecific(unsigned long)>:
c00120f0:	83 ec 0c             	sub    esp,0xc
c00120f3:	6a 05                	push   0x5
c00120f5:	68 00 00 40 c2       	push   0xc2400000
c00120fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012102:	e8 0f fd ff ff       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012107:	83 c4 1c             	add    esp,0x1c
c001210a:	c3                   	ret    
c001210b:	90                   	nop

c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001210c:	55                   	push   ebp
c001210d:	57                   	push   edi
c001210e:	56                   	push   esi
c001210f:	53                   	push   ebx
c0012110:	83 ec 1c             	sub    esp,0x1c
c0012113:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0012118:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001211c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012122:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012126:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001212c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012130:	83 e0 01             	and    eax,0x1
c0012133:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012137:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001213b:	85 c0                	test   eax,eax
c001213d:	7e 39                	jle    c0012178 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001213f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012143:	89 f3                	mov    ebx,esi
c0012145:	c1 e0 0c             	shl    eax,0xc
c0012148:	01 f0                	add    eax,esi
c001214a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001214e:	55                   	push   ebp
c001214f:	53                   	push   ebx
c0012150:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012154:	29 f0                	sub    eax,esi
c0012156:	01 d8                	add    eax,ebx
c0012158:	50                   	push   eax
c0012159:	57                   	push   edi
c001215a:	e8 b7 fc ff ff       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c001215f:	83 c4 10             	add    esp,0x10
c0012162:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012167:	74 03                	je     c001216c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012169:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001216c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012172:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012176:	75 d6                	jne    c001214e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012178:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001217d:	75 10                	jne    c001218f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001217f:	0f 20 d8             	mov    eax,cr3
c0012182:	0f 22 d8             	mov    cr3,eax
c0012185:	83 c4 1c             	add    esp,0x1c
c0012188:	89 f0                	mov    eax,esi
c001218a:	5b                   	pop    ebx
c001218b:	5e                   	pop    esi
c001218c:	5f                   	pop    edi
c001218d:	5d                   	pop    ebp
c001218e:	c3                   	ret    
c001218f:	89 f3                	mov    ebx,esi
c0012191:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012195:	c1 eb 0a             	shr    ebx,0xa
c0012198:	c1 e0 0c             	shl    eax,0xc
c001219b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00121a1:	01 f0                	add    eax,esi
c00121a3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00121a9:	c1 e8 0a             	shr    eax,0xa
c00121ac:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121b1:	2d 00 00 40 00       	sub    eax,0x400000
c00121b6:	39 c3                	cmp    ebx,eax
c00121b8:	77 cb                	ja     c0012185 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00121ba:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121bd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121c3:	39 d8                	cmp    eax,ebx
c00121c5:	73 f3                	jae    c00121ba <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00121c7:	83 c4 1c             	add    esp,0x1c
c00121ca:	89 f0                	mov    eax,esi
c00121cc:	5b                   	pop    ebx
c00121cd:	5e                   	pop    esi
c00121ce:	5f                   	pop    edi
c00121cf:	5d                   	pop    ebp
c00121d0:	c3                   	ret    
c00121d1:	90                   	nop

c00121d2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00121d2:	55                   	push   ebp
c00121d3:	57                   	push   edi
c00121d4:	56                   	push   esi
c00121d5:	53                   	push   ebx
c00121d6:	83 ec 1c             	sub    esp,0x1c
c00121d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00121dd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121e1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00121e5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00121e9:	a9 ff 0f 00 00       	test   eax,0xfff
c00121ee:	75 4a                	jne    c001223a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00121f0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00121f4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00121f7:	c1 eb 16             	shr    ebx,0x16
c00121fa:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012201:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012205:	74 4d                	je     c0012254 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012207:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001220b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001220f:	c1 e8 0a             	shr    eax,0xa
c0012212:	80 fa 01             	cmp    dl,0x1
c0012215:	19 d2                	sbb    edx,edx
c0012217:	c1 e3 0c             	shl    ebx,0xc
c001221a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001221e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012224:	25 fc 0f 00 00       	and    eax,0xffc
c0012229:	01 d8                	add    eax,ebx
c001222b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012232:	83 c4 1c             	add    esp,0x1c
c0012235:	5b                   	pop    ebx
c0012236:	5e                   	pop    esi
c0012237:	5f                   	pop    edi
c0012238:	5d                   	pop    ebp
c0012239:	c3                   	ret    
c001223a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001223e:	83 ec 0c             	sub    esp,0xc
c0012241:	68 bc b1 02 c0       	push   0xc002b1bc
c0012246:	e8 ba 81 00 00       	call   c001a405 <Krnl::panic(char const*)>
c001224b:	83 c4 10             	add    esp,0x10
c001224e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012252:	eb 9c                	jmp    c00121f0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012254:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012258:	e8 49 da ff ff       	call   c000fca6 <Phys::allocatePage()>
c001225d:	83 ec 0c             	sub    esp,0xc
c0012260:	89 c5                	mov    ebp,eax
c0012262:	8b 0d d0 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f3d0
c0012268:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001226c:	6a 01                	push   0x1
c001226e:	e8 6c f3 ff ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c0012273:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001227a:	6a 01                	push   0x1
c001227c:	50                   	push   eax
c001227d:	55                   	push   ebp
c001227e:	81 cd 07 04 00 00    	or     ebp,0x407
c0012284:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012288:	51                   	push   ecx
c0012289:	e8 7e fe ff ff       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001228e:	83 c4 1c             	add    esp,0x1c
c0012291:	68 00 10 00 00       	push   0x1000
c0012296:	6a 00                	push   0x0
c0012298:	50                   	push   eax
c0012299:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001229d:	e8 ae e4 fe ff       	call   c0000750 <memset>
c00122a2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00122a6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00122a9:	e8 f1 f7 ff ff       	call   c0011a9f <Virt::freeKernelVirtualPages(unsigned long)>
c00122ae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122b1:	83 c4 10             	add    esp,0x10
c00122b4:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00122b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00122bb:	e9 47 ff ff ff       	jmp    c0012207 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00122c0 <VAS::VAS(bool)>:
c00122c0:	53                   	push   ebx
c00122c1:	83 ec 28             	sub    esp,0x28
c00122c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00122cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122db:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00122e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00122ea:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00122ed:	e8 b4 d9 ff ff       	call   c000fca6 <Phys::allocatePage()>
c00122f2:	89 c2                	mov    edx,eax
c00122f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122f8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00122fb:	8b 1d d0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3d0
c0012301:	83 ec 0c             	sub    esp,0xc
c0012304:	6a 01                	push   0x1
c0012306:	e8 d4 f2 ff ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c001230b:	83 c4 10             	add    esp,0x10
c001230e:	89 c2                	mov    edx,eax
c0012310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012314:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012317:	83 ec 0c             	sub    esp,0xc
c001231a:	6a 03                	push   0x3
c001231c:	6a 01                	push   0x1
c001231e:	52                   	push   edx
c001231f:	50                   	push   eax
c0012320:	53                   	push   ebx
c0012321:	e8 e6 fd ff ff       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012326:	83 c4 20             	add    esp,0x20
c0012329:	89 c2                	mov    edx,eax
c001232b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012332:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001233a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012342:	7f 1c                	jg     c0012360 <VAS::VAS(bool)+0xa0>
c0012344:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012348:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001234b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001234f:	c1 e2 02             	shl    edx,0x2
c0012352:	01 d0                	add    eax,edx
c0012354:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001235a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001235e:	eb da                	jmp    c001233a <VAS::VAS(bool)+0x7a>
c0012360:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012368:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012370:	7f 7a                	jg     c00123ec <VAS::VAS(bool)+0x12c>
c0012372:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012376:	2d 00 02 00 00       	sub    eax,0x200
c001237b:	c1 e0 0c             	shl    eax,0xc
c001237e:	83 c8 03             	or     eax,0x3
c0012381:	89 c2                	mov    edx,eax
c0012383:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0012388:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001238e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012394:	83 e0 10             	and    eax,0x10
c0012397:	84 c0                	test   al,al
c0012399:	74 07                	je     c00123a2 <VAS::VAS(bool)+0xe2>
c001239b:	b8 00 01 00 00       	mov    eax,0x100
c00123a0:	eb 05                	jmp    c00123a7 <VAS::VAS(bool)+0xe7>
c00123a2:	b8 00 00 00 00       	mov    eax,0x0
c00123a7:	09 d0                	or     eax,edx
c00123a9:	89 c1                	mov    ecx,eax
c00123ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00123b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123b6:	c1 e2 02             	shl    edx,0x2
c00123b9:	01 d0                	add    eax,edx
c00123bb:	89 ca                	mov    edx,ecx
c00123bd:	89 10                	mov    DWORD PTR [eax],edx
c00123bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123c3:	2d 40 03 00 00       	sub    eax,0x340
c00123c8:	83 f8 7f             	cmp    eax,0x7f
c00123cb:	77 16                	ja     c00123e3 <VAS::VAS(bool)+0x123>
c00123cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123d1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00123d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00123d8:	c1 e2 02             	shl    edx,0x2
c00123db:	01 d0                	add    eax,edx
c00123dd:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00123e3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00123e7:	e9 7c ff ff ff       	jmp    c0012368 <VAS::VAS(bool)+0xa8>
c00123ec:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00123f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123f7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00123fd:	83 e0 10             	and    eax,0x10
c0012400:	84 c0                	test   al,al
c0012402:	74 07                	je     c001240b <VAS::VAS(bool)+0x14b>
c0012404:	b8 03 41 00 00       	mov    eax,0x4103
c0012409:	eb 05                	jmp    c0012410 <VAS::VAS(bool)+0x150>
c001240b:	b8 03 40 00 00       	mov    eax,0x4003
c0012410:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012414:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012417:	81 c2 20 0c 00 00    	add    edx,0xc20
c001241d:	89 02                	mov    DWORD PTR [edx],eax
c001241f:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0012424:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001242a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012430:	83 ec 08             	sub    esp,0x8
c0012433:	50                   	push   eax
c0012434:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012438:	e8 b3 fc ff ff       	call   c00120f0 <VAS::setCPUSpecific(unsigned long)>
c001243d:	83 c4 10             	add    esp,0x10
c0012440:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012444:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012447:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001244c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012452:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012458:	83 e0 10             	and    eax,0x10
c001245b:	84 c0                	test   al,al
c001245d:	74 07                	je     c0012466 <VAS::VAS(bool)+0x1a6>
c001245f:	b8 00 01 00 00       	mov    eax,0x100
c0012464:	eb 05                	jmp    c001246b <VAS::VAS(bool)+0x1ab>
c0012466:	b8 00 00 00 00       	mov    eax,0x0
c001246b:	09 c2                	or     edx,eax
c001246d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012471:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012474:	05 fc 0f 00 00       	add    eax,0xffc
c0012479:	83 ca 03             	or     edx,0x3
c001247c:	89 10                	mov    DWORD PTR [eax],edx
c001247e:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0012483:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012489:	83 ec 0c             	sub    esp,0xc
c001248c:	50                   	push   eax
c001248d:	e8 8c 1c 00 00       	call   c001411e <Device::getName()>
c0012492:	83 c4 10             	add    esp,0x10
c0012495:	83 ec 08             	sub    esp,0x8
c0012498:	68 01 b3 02 c0       	push   0xc002b301
c001249d:	50                   	push   eax
c001249e:	e8 f5 e3 fe ff       	call   c0000898 <strcmp>
c00124a3:	83 c4 10             	add    esp,0x10
c00124a6:	85 c0                	test   eax,eax
c00124a8:	0f 94 c0             	sete   al
c00124ab:	84 c0                	test   al,al
c00124ad:	0f 84 87 00 00 00    	je     c001253a <VAS::VAS(bool)+0x27a>
c00124b3:	fa                   	cli    
c00124b4:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c00124b9:	40                   	inc    eax
c00124ba:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c00124bf:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00124c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124ca:	05 7c 09 00 00       	add    eax,0x97c
c00124cf:	83 ec 0c             	sub    esp,0xc
c00124d2:	50                   	push   eax
c00124d3:	e8 ac ce ff ff       	call   c000f384 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00124d8:	83 c4 10             	add    esp,0x10
c00124db:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124e0:	89 c3                	mov    ebx,eax
c00124e2:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00124e7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124ed:	05 7c 09 00 00       	add    eax,0x97c
c00124f2:	83 ec 0c             	sub    esp,0xc
c00124f5:	50                   	push   eax
c00124f6:	e8 89 ce ff ff       	call   c000f384 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00124fb:	83 c4 10             	add    esp,0x10
c00124fe:	83 ec 08             	sub    esp,0x8
c0012501:	50                   	push   eax
c0012502:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012506:	e8 75 f5 ff ff       	call   c0011a80 <VAS::getPageTableEntry(unsigned long)>
c001250b:	83 c4 10             	add    esp,0x10
c001250e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012510:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012515:	6a 11                	push   0x11
c0012517:	53                   	push   ebx
c0012518:	50                   	push   eax
c0012519:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001251d:	e8 f4 f8 ff ff       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012522:	83 c4 10             	add    esp,0x10
c0012525:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001252a:	48                   	dec    eax
c001252b:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c0012530:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0012535:	85 c0                	test   eax,eax
c0012537:	75 01                	jne    c001253a <VAS::VAS(bool)+0x27a>
c0012539:	fb                   	sti    
c001253a:	90                   	nop
c001253b:	83 c4 28             	add    esp,0x28
c001253e:	5b                   	pop    ebx
c001253f:	c3                   	ret    

c0012540 <VAS::evict(unsigned long)>:
c0012540:	55                   	push   ebp
c0012541:	57                   	push   edi
c0012542:	56                   	push   esi
c0012543:	53                   	push   ebx
c0012544:	83 ec 1c             	sub    esp,0x1c
c0012547:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001254b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001254f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012553:	e8 c8 f1 ff ff       	call   c0011720 <Virt::allocateSwapfilePage()>
c0012558:	89 c7                	mov    edi,eax
c001255a:	a1 0c e2 02 c0       	mov    eax,ds:0xc002e20c
c001255f:	85 c0                	test   eax,eax
c0012561:	7e 3d                	jle    c00125a0 <VAS::evict(unsigned long)+0x60>
c0012563:	89 ee                	mov    esi,ebp
c0012565:	31 db                	xor    ebx,ebx
c0012567:	83 ec 0c             	sub    esp,0xc
c001256a:	57                   	push   edi
c001256b:	e8 9e f1 ff ff       	call   c001170e <Virt::swapIDToSector(unsigned long)>
c0012570:	89 34 24             	mov    DWORD PTR [esp],esi
c0012573:	01 d8                	add    eax,ebx
c0012575:	6a 01                	push   0x1
c0012577:	31 d2                	xor    edx,edx
c0012579:	43                   	inc    ebx
c001257a:	52                   	push   edx
c001257b:	81 c6 00 02 00 00    	add    esi,0x200
c0012581:	50                   	push   eax
c0012582:	0f be 05 18 e2 02 c0 	movsx  eax,BYTE PTR ds:0xc002e218
c0012589:	ff 34 85 5c f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd08a4]
c0012590:	e8 39 3e 00 00       	call   c00163ce <LogicalDisk::write(unsigned long long, int, void*)>
c0012595:	83 c4 20             	add    esp,0x20
c0012598:	39 1d 0c e2 02 c0    	cmp    DWORD PTR ds:0xc002e20c,ebx
c001259e:	7f c7                	jg     c0012567 <VAS::evict(unsigned long)+0x27>
c00125a0:	83 ec 08             	sub    esp,0x8
c00125a3:	c1 e7 0b             	shl    edi,0xb
c00125a6:	55                   	push   ebp
c00125a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00125ab:	e8 d0 f4 ff ff       	call   c0011a80 <VAS::getPageTableEntry(unsigned long)>
c00125b0:	83 c4 0c             	add    esp,0xc
c00125b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00125b5:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00125bb:	09 d7                	or     edi,edx
c00125bd:	89 38                	mov    DWORD PTR [eax],edi
c00125bf:	a1 c8 f3 02 c0       	mov    eax,ds:0xc002f3c8
c00125c4:	40                   	inc    eax
c00125c5:	a3 c8 f3 02 c0       	mov    ds:0xc002f3c8,eax
c00125ca:	0f 20 da             	mov    edx,cr3
c00125cd:	0f 22 da             	mov    cr3,edx
c00125d0:	50                   	push   eax
c00125d1:	55                   	push   ebp
c00125d2:	68 0f b3 02 c0       	push   0xc002b30f
c00125d7:	e8 09 04 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00125dc:	a1 c4 f3 02 c0       	mov    eax,ds:0xc002f3c4
c00125e1:	c7 44 24 40 24 b3 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b324
c00125e9:	8d 50 01             	lea    edx,[eax+0x1]
c00125ec:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00125f0:	89 15 c4 f3 02 c0    	mov    DWORD PTR ds:0xc002f3c4,edx
c00125f6:	83 c4 2c             	add    esp,0x2c
c00125f9:	5b                   	pop    ebx
c00125fa:	5e                   	pop    esi
c00125fb:	5f                   	pop    edi
c00125fc:	5d                   	pop    ebp
c00125fd:	e9 e3 03 00 00       	jmp    c00129e5 <Dbg::kprintf(char const*, ...)>

c0012602 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012602:	55                   	push   ebp
c0012603:	57                   	push   edi
c0012604:	56                   	push   esi
c0012605:	53                   	push   ebx
c0012606:	83 ec 0c             	sub    esp,0xc
c0012609:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001260d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012613:	0f 84 dc 00 00 00    	je     c00126f5 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012619:	56                   	push   esi
c001261a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001261e:	e8 5d f4 ff ff       	call   c0011a80 <VAS::getPageTableEntry(unsigned long)>
c0012623:	5b                   	pop    ebx
c0012624:	85 c0                	test   eax,eax
c0012626:	5f                   	pop    edi
c0012627:	89 c3                	mov    ebx,eax
c0012629:	0f 84 c6 00 00 00    	je     c00126f5 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c001262f:	8b 38                	mov    edi,DWORD PTR [eax]
c0012631:	31 c0                	xor    eax,eax
c0012633:	89 fa                	mov    edx,edi
c0012635:	81 e2 01 04 00 00    	and    edx,0x401
c001263b:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012641:	0f 85 b0 00 00 00    	jne    c00126f7 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012647:	e8 5a d6 ff ff       	call   c000fca6 <Phys::allocatePage()>
c001264c:	c1 ef 0b             	shr    edi,0xb
c001264f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012651:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012657:	09 c2                	or     edx,eax
c0012659:	81 ca 01 08 00 00    	or     edx,0x801
c001265f:	89 13                	mov    DWORD PTR [ebx],edx
c0012661:	8b 0d 0c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e20c
c0012667:	85 c9                	test   ecx,ecx
c0012669:	7e 3d                	jle    c00126a8 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c001266b:	89 f5                	mov    ebp,esi
c001266d:	31 db                	xor    ebx,ebx
c001266f:	83 ec 0c             	sub    esp,0xc
c0012672:	57                   	push   edi
c0012673:	e8 96 f0 ff ff       	call   c001170e <Virt::swapIDToSector(unsigned long)>
c0012678:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001267b:	01 d8                	add    eax,ebx
c001267d:	6a 01                	push   0x1
c001267f:	31 d2                	xor    edx,edx
c0012681:	43                   	inc    ebx
c0012682:	52                   	push   edx
c0012683:	81 c5 00 02 00 00    	add    ebp,0x200
c0012689:	50                   	push   eax
c001268a:	0f be 05 18 e2 02 c0 	movsx  eax,BYTE PTR ds:0xc002e218
c0012691:	ff 34 85 5c f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd08a4]
c0012698:	e8 c5 3c 00 00       	call   c0016362 <LogicalDisk::read(unsigned long long, int, void*)>
c001269d:	83 c4 20             	add    esp,0x20
c00126a0:	39 1d 0c e2 02 c0    	cmp    DWORD PTR ds:0xc002e20c,ebx
c00126a6:	7f c7                	jg     c001266f <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c00126a8:	a1 c8 f3 02 c0       	mov    eax,ds:0xc002f3c8
c00126ad:	48                   	dec    eax
c00126ae:	52                   	push   edx
c00126af:	a3 c8 f3 02 c0       	mov    ds:0xc002f3c8,eax
c00126b4:	50                   	push   eax
c00126b5:	56                   	push   esi
c00126b6:	68 35 b3 02 c0       	push   0xc002b335
c00126bb:	e8 25 03 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00126c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00126c3:	e8 28 f0 ff ff       	call   c00116f0 <Virt::freeSwapfilePage(unsigned long)>
c00126c8:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c00126cd:	83 c4 10             	add    esp,0x10
c00126d0:	48                   	dec    eax
c00126d1:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c00126d6:	85 c0                	test   eax,eax
c00126d8:	75 01                	jne    c00126db <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c00126da:	fb                   	sti    
c00126db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00126df:	25 ff 0f 00 00       	and    eax,0xfff
c00126e4:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00126e9:	77 14                	ja     c00126ff <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c00126eb:	0f 20 d8             	mov    eax,cr3
c00126ee:	0f 22 d8             	mov    cr3,eax
c00126f1:	b0 01                	mov    al,0x1
c00126f3:	eb 02                	jmp    c00126f7 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c00126f5:	31 c0                	xor    eax,eax
c00126f7:	83 c4 0c             	add    esp,0xc
c00126fa:	5b                   	pop    ebx
c00126fb:	5e                   	pop    esi
c00126fc:	5f                   	pop    edi
c00126fd:	5d                   	pop    ebp
c00126fe:	c3                   	ret    
c00126ff:	83 ec 0c             	sub    esp,0xc
c0012702:	68 4a b3 02 c0       	push   0xc002b34a
c0012707:	e8 d9 02 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001270c:	83 c4 10             	add    esp,0x10
c001270f:	eb da                	jmp    c00126eb <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012711:	90                   	nop

c0012712 <VAS::scanForEviction()>:
c0012712:	57                   	push   edi
c0012713:	56                   	push   esi
c0012714:	53                   	push   ebx
c0012715:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012719:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001271c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012722:	75 0e                	jne    c0012732 <VAS::scanForEviction()+0x20>
c0012724:	89 da                	mov    edx,ebx
c0012726:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012729:	c1 ea 16             	shr    edx,0x16
c001272c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012730:	74 48                	je     c001277a <VAS::scanForEviction()+0x68>
c0012732:	53                   	push   ebx
c0012733:	56                   	push   esi
c0012734:	e8 47 f3 ff ff       	call   c0011a80 <VAS::getPageTableEntry(unsigned long)>
c0012739:	5a                   	pop    edx
c001273a:	8b 38                	mov    edi,DWORD PTR [eax]
c001273c:	59                   	pop    ecx
c001273d:	89 fa                	mov    edx,edi
c001273f:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012745:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c001274b:	74 3d                	je     c001278a <VAS::scanForEviction()+0x78>
c001274d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012753:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012759:	76 2a                	jbe    c0012785 <VAS::scanForEviction()+0x73>
c001275b:	31 db                	xor    ebx,ebx
c001275d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012764:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001276a:	75 c6                	jne    c0012732 <VAS::scanForEviction()+0x20>
c001276c:	89 da                	mov    edx,ebx
c001276e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012771:	c1 ea 16             	shr    edx,0x16
c0012774:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012778:	75 b8                	jne    c0012732 <VAS::scanForEviction()+0x20>
c001277a:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012780:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012783:	eb 97                	jmp    c001271c <VAS::scanForEviction()+0xa>
c0012785:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012788:	eb 92                	jmp    c001271c <VAS::scanForEviction()+0xa>
c001278a:	f7 c7 01 00 00 00    	test   edi,0x1
c0012790:	74 bb                	je     c001274d <VAS::scanForEviction()+0x3b>
c0012792:	f7 c7 20 00 00 00    	test   edi,0x20
c0012798:	74 0a                	je     c00127a4 <VAS::scanForEviction()+0x92>
c001279a:	83 e7 df             	and    edi,0xffffffdf
c001279d:	89 38                	mov    DWORD PTR [eax],edi
c001279f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00127a2:	eb a9                	jmp    c001274d <VAS::scanForEviction()+0x3b>
c00127a4:	83 ec 08             	sub    esp,0x8
c00127a7:	53                   	push   ebx
c00127a8:	56                   	push   esi
c00127a9:	e8 92 fd ff ff       	call   c0012540 <VAS::evict(unsigned long)>
c00127ae:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c00127b5:	83 c4 10             	add    esp,0x10
c00127b8:	89 f8                	mov    eax,edi
c00127ba:	5b                   	pop    ebx
c00127bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00127c0:	5e                   	pop    esi
c00127c1:	5f                   	pop    edi
c00127c2:	c3                   	ret    

c00127c3 <mapVASFirstTime>:
c00127c3:	55                   	push   ebp
c00127c4:	57                   	push   edi
c00127c5:	56                   	push   esi
c00127c6:	53                   	push   ebx
c00127c7:	83 ec 0c             	sub    esp,0xc
c00127ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127cf:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00127d2:	4a                   	dec    edx
c00127d3:	0f 84 8e 00 00 00    	je     c0012867 <mapVASFirstTime+0xa4>
c00127d9:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00127dc:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00127df:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00127e4:	c1 e5 15             	shl    ebp,0x15
c00127e7:	be 00 90 e7 01       	mov    esi,0x1e79000
c00127ec:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00127f2:	29 eb                	sub    ebx,ebp
c00127f4:	29 ee                	sub    esi,ebp
c00127f6:	e8 ab d4 ff ff       	call   c000fca6 <Phys::allocatePage()>
c00127fb:	83 ec 0c             	sub    esp,0xc
c00127fe:	68 03 04 00 00       	push   0x403
c0012803:	6a 01                	push   0x1
c0012805:	53                   	push   ebx
c0012806:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001280c:	50                   	push   eax
c001280d:	57                   	push   edi
c001280e:	e8 f9 f8 ff ff       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012813:	83 c4 20             	add    esp,0x20
c0012816:	39 f3                	cmp    ebx,esi
c0012818:	75 dc                	jne    c00127f6 <mapVASFirstTime+0x33>
c001281a:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001281f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012824:	29 ee                	sub    esi,ebp
c0012826:	29 e8                	sub    eax,ebp
c0012828:	89 c5                	mov    ebp,eax
c001282a:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001282e:	19 db                	sbb    ebx,ebx
c0012830:	e8 71 d4 ff ff       	call   c000fca6 <Phys::allocatePage()>
c0012835:	83 e3 04             	and    ebx,0x4
c0012838:	83 ec 0c             	sub    esp,0xc
c001283b:	81 c3 03 04 00 00    	add    ebx,0x403
c0012841:	53                   	push   ebx
c0012842:	6a 01                	push   0x1
c0012844:	56                   	push   esi
c0012845:	81 ee 00 10 00 00    	sub    esi,0x1000
c001284b:	50                   	push   eax
c001284c:	57                   	push   edi
c001284d:	e8 ba f8 ff ff       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012852:	83 c4 20             	add    esp,0x20
c0012855:	39 f5                	cmp    ebp,esi
c0012857:	75 d1                	jne    c001282a <mapVASFirstTime+0x67>
c0012859:	0f 20 d8             	mov    eax,cr3
c001285c:	0f 22 d8             	mov    cr3,eax
c001285f:	83 c4 0c             	add    esp,0xc
c0012862:	5b                   	pop    ebx
c0012863:	5e                   	pop    esi
c0012864:	5f                   	pop    edi
c0012865:	5d                   	pop    ebp
c0012866:	c3                   	ret    
c0012867:	83 ec 0c             	sub    esp,0xc
c001286a:	68 5a b3 02 c0       	push   0xc002b35a
c001286f:	e8 71 01 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0012874:	83 c4 10             	add    esp,0x10
c0012877:	83 c4 0c             	add    esp,0xc
c001287a:	5b                   	pop    ebx
c001287b:	5e                   	pop    esi
c001287c:	5f                   	pop    edi
c001287d:	5d                   	pop    ebp
c001287e:	c3                   	ret    

c001287f <__cxa_atexit>:
c001287f:	31 c0                	xor    eax,eax
c0012881:	c3                   	ret    

c0012882 <__cxa_finalize>:
c0012882:	c3                   	ret    

c0012883 <__stack_chk_fail>:
c0012883:	55                   	push   ebp
c0012884:	89 e5                	mov    ebp,esp
c0012886:	83 ec 14             	sub    esp,0x14
c0012889:	68 73 b3 02 c0       	push   0xc002b373
c001288e:	e8 52 01 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0012893:	58                   	pop    eax
c0012894:	5a                   	pop    edx
c0012895:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012898:	68 c3 b3 02 c0       	push   0xc002b3c3
c001289d:	e8 43 01 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00128a2:	59                   	pop    ecx
c00128a3:	58                   	pop    eax
c00128a4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128a7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128aa:	68 c3 b3 02 c0       	push   0xc002b3c3
c00128af:	e8 31 01 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00128b4:	5a                   	pop    edx
c00128b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128b8:	59                   	pop    ecx
c00128b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00128bb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128be:	68 c3 b3 02 c0       	push   0xc002b3c3
c00128c3:	e8 1d 01 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00128c8:	5a                   	pop    edx
c00128c9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128cc:	59                   	pop    ecx
c00128cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00128cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00128d1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00128d4:	68 c3 b3 02 c0       	push   0xc002b3c3
c00128d9:	e8 07 01 00 00       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00128de:	c7 04 24 cb b3 02 c0 	mov    DWORD PTR [esp],0xc002b3cb
c00128e5:	e8 1b 7b 00 00       	call   c001a405 <Krnl::panic(char const*)>
c00128ea:	83 c4 10             	add    esp,0x10
c00128ed:	c9                   	leave  
c00128ee:	c3                   	ret    

c00128ef <__cxa_pure_virtual>:
c00128ef:	83 ec 18             	sub    esp,0x18
c00128f2:	68 e3 b3 02 c0       	push   0xc002b3e3
c00128f7:	e8 09 7b 00 00       	call   c001a405 <Krnl::panic(char const*)>
c00128fc:	83 c4 1c             	add    esp,0x1c
c00128ff:	c3                   	ret    

c0012900 <operator new[](unsigned long)>:
c0012900:	e9 fd cf ff ff       	jmp    c000f902 <malloc>

c0012905 <operator delete(void*, unsigned long)>:
c0012905:	e9 18 d0 ff ff       	jmp    c000f922 <rfree>

c001290a <operator delete[](void*)>:
c001290a:	e9 13 d0 ff ff       	jmp    c000f922 <rfree>

c001290f <operator delete[](void*, unsigned long)>:
c001290f:	e9 0e d0 ff ff       	jmp    c000f922 <rfree>

c0012914 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012914:	57                   	push   edi
c0012915:	b9 3f 00 00 00       	mov    ecx,0x3f
c001291a:	56                   	push   esi
c001291b:	be f8 b3 02 c0       	mov    esi,0xc002b3f8
c0012920:	53                   	push   ebx
c0012921:	83 ec 40             	sub    esp,0x40
c0012924:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012928:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001292c:	fc                   	cld    
c001292d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001292f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012933:	83 f9 3e             	cmp    ecx,0x3e
c0012936:	7e 05                	jle    c001293d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012938:	b9 3e 00 00 00       	mov    ecx,0x3e
c001293d:	89 df                	mov    edi,ebx
c001293f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012943:	eb 02                	jmp    c0012947 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012945:	89 c7                	mov    edi,eax
c0012947:	31 d2                	xor    edx,edx
c0012949:	46                   	inc    esi
c001294a:	89 f8                	mov    eax,edi
c001294c:	f7 f1                	div    ecx
c001294e:	39 cf                	cmp    edi,ecx
c0012950:	73 f3                	jae    c0012945 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012952:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012955:	eb 02                	jmp    c0012959 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012957:	89 c3                	mov    ebx,eax
c0012959:	31 d2                	xor    edx,edx
c001295b:	4e                   	dec    esi
c001295c:	89 d8                	mov    eax,ebx
c001295e:	f7 f1                	div    ecx
c0012960:	39 cb                	cmp    ebx,ecx
c0012962:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012966:	88 16                	mov    BYTE PTR [esi],dl
c0012968:	73 ed                	jae    c0012957 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c001296a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001296e:	83 c4 40             	add    esp,0x40
c0012971:	5b                   	pop    ebx
c0012972:	5e                   	pop    esi
c0012973:	5f                   	pop    edi
c0012974:	c3                   	ret    

c0012975 <Dbg::logc(char)>:
c0012975:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012979:	ba fd 03 00 00       	mov    edx,0x3fd
c001297e:	ec                   	in     al,dx
c001297f:	a8 20                	test   al,0x20
c0012981:	74 fb                	je     c001297e <Dbg::logc(char)+0x9>
c0012983:	ba f8 03 00 00       	mov    edx,0x3f8
c0012988:	88 c8                	mov    al,cl
c001298a:	ee                   	out    dx,al
c001298b:	c3                   	ret    

c001298c <Dbg::logs(char*)>:
c001298c:	53                   	push   ebx
c001298d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012991:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012994:	84 c0                	test   al,al
c0012996:	74 0f                	je     c00129a7 <Dbg::logs(char*)+0x1b>
c0012998:	50                   	push   eax
c0012999:	43                   	inc    ebx
c001299a:	e8 d6 ff ff ff       	call   c0012975 <Dbg::logc(char)>
c001299f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00129a2:	5a                   	pop    edx
c00129a3:	84 c0                	test   al,al
c00129a5:	75 f1                	jne    c0012998 <Dbg::logs(char*)+0xc>
c00129a7:	5b                   	pop    ebx
c00129a8:	c3                   	ret    

c00129a9 <Dbg::logWriteInt(unsigned int)>:
c00129a9:	83 ec 10             	sub    esp,0x10
c00129ac:	6a 0a                	push   0xa
c00129ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00129b2:	50                   	push   eax
c00129b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b7:	e8 58 ff ff ff       	call   c0012914 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00129bc:	50                   	push   eax
c00129bd:	e8 ca ff ff ff       	call   c001298c <Dbg::logs(char*)>
c00129c2:	83 c4 20             	add    esp,0x20
c00129c5:	c3                   	ret    

c00129c6 <Dbg::logWriteIntBase(unsigned int, int)>:
c00129c6:	83 ec 10             	sub    esp,0x10
c00129c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129cd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00129d1:	50                   	push   eax
c00129d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129d6:	e8 39 ff ff ff       	call   c0012914 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00129db:	50                   	push   eax
c00129dc:	e8 ab ff ff ff       	call   c001298c <Dbg::logs(char*)>
c00129e1:	83 c4 20             	add    esp,0x20
c00129e4:	c3                   	ret    

c00129e5 <Dbg::kprintf(char const*, ...)>:
c00129e5:	55                   	push   ebp
c00129e6:	57                   	push   edi
c00129e7:	56                   	push   esi
c00129e8:	53                   	push   ebx
c00129e9:	83 ec 0c             	sub    esp,0xc
c00129ec:	8d 44 24 24          	lea    eax,[esp+0x24]
c00129f0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00129f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00129f8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00129fb:	84 c0                	test   al,al
c00129fd:	74 4a                	je     c0012a49 <Dbg::kprintf(char const*, ...)+0x64>
c00129ff:	31 db                	xor    ebx,ebx
c0012a01:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012a04:	3c 25                	cmp    al,0x25
c0012a06:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012a09:	0f 85 e4 00 00 00    	jne    c0012af3 <Dbg::kprintf(char const*, ...)+0x10e>
c0012a0f:	83 c3 02             	add    ebx,0x2
c0012a12:	8a 07                	mov    al,BYTE PTR [edi]
c0012a14:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012a17:	83 e8 25             	sub    eax,0x25
c0012a1a:	3c 53                	cmp    al,0x53
c0012a1c:	0f 87 ba 00 00 00    	ja     c0012adc <Dbg::kprintf(char const*, ...)+0xf7>
c0012a22:	0f b6 c0             	movzx  eax,al
c0012a25:	ff 24 85 38 b4 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4bc8]
c0012a2c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a30:	89 c8                	mov    eax,ecx
c0012a32:	83 c1 04             	add    ecx,0x4
c0012a35:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a39:	ff 30                	push   DWORD PTR [eax]
c0012a3b:	e8 4c ff ff ff       	call   c001298c <Dbg::logs(char*)>
c0012a40:	58                   	pop    eax
c0012a41:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012a45:	84 c0                	test   al,al
c0012a47:	75 b8                	jne    c0012a01 <Dbg::kprintf(char const*, ...)+0x1c>
c0012a49:	83 c4 0c             	add    esp,0xc
c0012a4c:	5b                   	pop    ebx
c0012a4d:	5e                   	pop    esi
c0012a4e:	5f                   	pop    edi
c0012a4f:	5d                   	pop    ebp
c0012a50:	c3                   	ret    
c0012a51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a55:	89 d0                	mov    eax,edx
c0012a57:	83 c2 04             	add    edx,0x4
c0012a5a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a5e:	ff 30                	push   DWORD PTR [eax]
c0012a60:	e8 44 ff ff ff       	call   c00129a9 <Dbg::logWriteInt(unsigned int)>
c0012a65:	58                   	pop    eax
c0012a66:	eb d9                	jmp    c0012a41 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012a6c:	89 d0                	mov    eax,edx
c0012a6e:	83 c2 04             	add    edx,0x4
c0012a71:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012a74:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012a78:	50                   	push   eax
c0012a79:	e8 f7 fe ff ff       	call   c0012975 <Dbg::logc(char)>
c0012a7e:	58                   	pop    eax
c0012a7f:	eb c0                	jmp    c0012a41 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a81:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a85:	89 c8                	mov    eax,ecx
c0012a87:	83 c1 04             	add    ecx,0x4
c0012a8a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012a8e:	ff 30                	push   DWORD PTR [eax]
c0012a90:	e8 14 ff ff ff       	call   c00129a9 <Dbg::logWriteInt(unsigned int)>
c0012a95:	5f                   	pop    edi
c0012a96:	eb a9                	jmp    c0012a41 <Dbg::kprintf(char const*, ...)+0x5c>
c0012a98:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a9c:	89 c8                	mov    eax,ecx
c0012a9e:	83 c1 04             	add    ecx,0x4
c0012aa1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012aa5:	6a 10                	push   0x10
c0012aa7:	ff 30                	push   DWORD PTR [eax]
c0012aa9:	e8 18 ff ff ff       	call   c00129c6 <Dbg::logWriteIntBase(unsigned int, int)>
c0012aae:	59                   	pop    ecx
c0012aaf:	5f                   	pop    edi
c0012ab0:	eb 8f                	jmp    c0012a41 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ab2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ab6:	89 d0                	mov    eax,edx
c0012ab8:	83 c2 08             	add    edx,0x8
c0012abb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012abf:	6a 10                	push   0x10
c0012ac1:	ff 30                	push   DWORD PTR [eax]
c0012ac3:	e8 fe fe ff ff       	call   c00129c6 <Dbg::logWriteIntBase(unsigned int, int)>
c0012ac8:	58                   	pop    eax
c0012ac9:	5a                   	pop    edx
c0012aca:	e9 72 ff ff ff       	jmp    c0012a41 <Dbg::kprintf(char const*, ...)+0x5c>
c0012acf:	6a 25                	push   0x25
c0012ad1:	e8 9f fe ff ff       	call   c0012975 <Dbg::logc(char)>
c0012ad6:	58                   	pop    eax
c0012ad7:	e9 65 ff ff ff       	jmp    c0012a41 <Dbg::kprintf(char const*, ...)+0x5c>
c0012adc:	6a 25                	push   0x25
c0012ade:	e8 92 fe ff ff       	call   c0012975 <Dbg::logc(char)>
c0012ae3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012ae6:	50                   	push   eax
c0012ae7:	e8 89 fe ff ff       	call   c0012975 <Dbg::logc(char)>
c0012aec:	5a                   	pop    edx
c0012aed:	59                   	pop    ecx
c0012aee:	e9 4e ff ff ff       	jmp    c0012a41 <Dbg::kprintf(char const*, ...)+0x5c>
c0012af3:	50                   	push   eax
c0012af4:	89 eb                	mov    ebx,ebp
c0012af6:	e8 7a fe ff ff       	call   c0012975 <Dbg::logc(char)>
c0012afb:	89 fd                	mov    ebp,edi
c0012afd:	58                   	pop    eax
c0012afe:	e9 3e ff ff ff       	jmp    c0012a41 <Dbg::kprintf(char const*, ...)+0x5c>
c0012b03:	90                   	nop

c0012b04 <File::read(unsigned long long, void*, int*)>:
c0012b04:	53                   	push   ebx
c0012b05:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b0d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b14:	3c 19                	cmp    al,0x19
c0012b16:	77 35                	ja     c0012b4d <File::read(unsigned long long, void*, int*)+0x49>
c0012b18:	8b 04 85 60 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07a0]
c0012b1f:	85 c0                	test   eax,eax
c0012b21:	74 2a                	je     c0012b4d <File::read(unsigned long long, void*, int*)+0x49>
c0012b23:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b29:	85 c0                	test   eax,eax
c0012b2b:	74 20                	je     c0012b4d <File::read(unsigned long long, void*, int*)+0x49>
c0012b2d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b31:	74 21                	je     c0012b54 <File::read(unsigned long long, void*, int*)+0x50>
c0012b33:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b35:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b39:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b47:	5b                   	pop    ebx
c0012b48:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012b4b:	ff e0                	jmp    eax
c0012b4d:	b8 0b 00 00 00       	mov    eax,0xb
c0012b52:	eb 05                	jmp    c0012b59 <File::read(unsigned long long, void*, int*)+0x55>
c0012b54:	b8 05 00 00 00       	mov    eax,0x5
c0012b59:	5b                   	pop    ebx
c0012b5a:	c3                   	ret    
c0012b5b:	90                   	nop

c0012b5c <File::write(unsigned long long, void*, int*)>:
c0012b5c:	53                   	push   ebx
c0012b5d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012b65:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012b6c:	3c 19                	cmp    al,0x19
c0012b6e:	77 35                	ja     c0012ba5 <File::write(unsigned long long, void*, int*)+0x49>
c0012b70:	8b 04 85 60 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07a0]
c0012b77:	85 c0                	test   eax,eax
c0012b79:	74 2a                	je     c0012ba5 <File::write(unsigned long long, void*, int*)+0x49>
c0012b7b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b81:	85 c0                	test   eax,eax
c0012b83:	74 20                	je     c0012ba5 <File::write(unsigned long long, void*, int*)+0x49>
c0012b85:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b89:	74 21                	je     c0012bac <File::write(unsigned long long, void*, int*)+0x50>
c0012b8b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012b8d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012b91:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012b97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b9f:	5b                   	pop    ebx
c0012ba0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012ba3:	ff e0                	jmp    eax
c0012ba5:	b8 0b 00 00 00       	mov    eax,0xb
c0012baa:	eb 05                	jmp    c0012bb1 <File::write(unsigned long long, void*, int*)+0x55>
c0012bac:	b8 05 00 00 00       	mov    eax,0x5
c0012bb1:	5b                   	pop    ebx
c0012bb2:	c3                   	ret    
c0012bb3:	90                   	nop

c0012bb4 <Directory::read(unsigned long long, void*, int*)>:
c0012bb4:	53                   	push   ebx
c0012bb5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012bb9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012bbd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012bc4:	3c 19                	cmp    al,0x19
c0012bc6:	77 35                	ja     c0012bfd <Directory::read(unsigned long long, void*, int*)+0x49>
c0012bc8:	8b 04 85 60 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07a0]
c0012bcf:	85 c0                	test   eax,eax
c0012bd1:	74 2a                	je     c0012bfd <Directory::read(unsigned long long, void*, int*)+0x49>
c0012bd3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012bd9:	85 c0                	test   eax,eax
c0012bdb:	74 20                	je     c0012bfd <Directory::read(unsigned long long, void*, int*)+0x49>
c0012bdd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012be1:	74 21                	je     c0012c04 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012be3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012be5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012be9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012bef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012bf7:	5b                   	pop    ebx
c0012bf8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012bfb:	ff e0                	jmp    eax
c0012bfd:	b8 0b 00 00 00       	mov    eax,0xb
c0012c02:	eb 05                	jmp    c0012c09 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012c04:	b8 05 00 00 00       	mov    eax,0x5
c0012c09:	5b                   	pop    ebx
c0012c0a:	c3                   	ret    
c0012c0b:	90                   	nop

c0012c0c <Directory::write(unsigned long long, void*, int*)>:
c0012c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c10:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012c17:	b8 0b 00 00 00       	mov    eax,0xb
c0012c1c:	80 fa 19             	cmp    dl,0x19
c0012c1f:	77 18                	ja     c0012c39 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012c21:	8b 14 95 60 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07a0]
c0012c28:	85 d2                	test   edx,edx
c0012c2a:	74 0d                	je     c0012c39 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012c2c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012c33:	19 c0                	sbb    eax,eax
c0012c35:	83 e0 0a             	and    eax,0xa
c0012c38:	40                   	inc    eax
c0012c39:	c3                   	ret    

c0012c3a <File::isAtty()>:
c0012c3a:	31 c0                	xor    eax,eax
c0012c3c:	c3                   	ret    
c0012c3d:	90                   	nop

c0012c3e <Directory::isAtty()>:
c0012c3e:	31 c0                	xor    eax,eax
c0012c40:	c3                   	ret    
c0012c41:	90                   	nop

c0012c42 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012c42:	b8 0a 00 00 00       	mov    eax,0xa
c0012c47:	c3                   	ret    

c0012c48 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012c48:	b8 0a 00 00 00       	mov    eax,0xa
c0012c4d:	c3                   	ret    

c0012c4e <Filesystem::getFileFirstSector(char const*)>:
c0012c4e:	31 c0                	xor    eax,eax
c0012c50:	31 d2                	xor    edx,edx
c0012c52:	c3                   	ret    
c0012c53:	90                   	nop

c0012c54 <File::~File()>:
c0012c54:	83 ec 0c             	sub    esp,0xc
c0012c57:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c0012c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c60:	89 10                	mov    DWORD PTR [eax],edx
c0012c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c66:	83 ec 0c             	sub    esp,0xc
c0012c69:	50                   	push   eax
c0012c6a:	e8 0f e7 ff ff       	call   c001137e <UnixFile::~UnixFile()>
c0012c6f:	83 c4 10             	add    esp,0x10
c0012c72:	90                   	nop
c0012c73:	83 c4 0c             	add    esp,0xc
c0012c76:	c3                   	ret    
c0012c77:	90                   	nop

c0012c78 <File::~File()>:
c0012c78:	83 ec 0c             	sub    esp,0xc
c0012c7b:	83 ec 0c             	sub    esp,0xc
c0012c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c82:	e8 cd ff ff ff       	call   c0012c54 <File::~File()>
c0012c87:	83 c4 10             	add    esp,0x10
c0012c8a:	83 ec 08             	sub    esp,0x8
c0012c8d:	68 14 01 00 00       	push   0x114
c0012c92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c96:	e8 6a fc ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0012c9b:	83 c4 10             	add    esp,0x10
c0012c9e:	83 c4 0c             	add    esp,0xc
c0012ca1:	c3                   	ret    

c0012ca2 <Directory::~Directory()>:
c0012ca2:	83 ec 0c             	sub    esp,0xc
c0012ca5:	ba 14 b6 02 c0       	mov    edx,0xc002b614
c0012caa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cae:	89 10                	mov    DWORD PTR [eax],edx
c0012cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cb4:	83 ec 0c             	sub    esp,0xc
c0012cb7:	50                   	push   eax
c0012cb8:	e8 c1 e6 ff ff       	call   c001137e <UnixFile::~UnixFile()>
c0012cbd:	83 c4 10             	add    esp,0x10
c0012cc0:	90                   	nop
c0012cc1:	83 c4 0c             	add    esp,0xc
c0012cc4:	c3                   	ret    
c0012cc5:	90                   	nop

c0012cc6 <Directory::~Directory()>:
c0012cc6:	83 ec 0c             	sub    esp,0xc
c0012cc9:	83 ec 0c             	sub    esp,0xc
c0012ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cd0:	e8 cd ff ff ff       	call   c0012ca2 <Directory::~Directory()>
c0012cd5:	83 c4 10             	add    esp,0x10
c0012cd8:	83 ec 08             	sub    esp,0x8
c0012cdb:	68 14 01 00 00       	push   0x114
c0012ce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ce4:	e8 1c fc ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0012ce9:	83 c4 10             	add    esp,0x10
c0012cec:	83 c4 0c             	add    esp,0xc
c0012cef:	c3                   	ret    

c0012cf0 <Filesystem::Filesystem()>:
c0012cf0:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c0012cf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012cf9:	89 10                	mov    DWORD PTR [eax],edx
c0012cfb:	8b 15 d4 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3d4
c0012d01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d05:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d0c:	a3 d4 f3 02 c0       	mov    ds:0xc002f3d4,eax
c0012d11:	90                   	nop
c0012d12:	c3                   	ret    
c0012d13:	90                   	nop

c0012d14 <Filesystem::~Filesystem()>:
c0012d14:	ba 90 b5 02 c0       	mov    edx,0xc002b590
c0012d19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d1d:	89 10                	mov    DWORD PTR [eax],edx
c0012d1f:	90                   	nop
c0012d20:	c3                   	ret    
c0012d21:	90                   	nop

c0012d22 <Filesystem::~Filesystem()>:
c0012d22:	83 ec 0c             	sub    esp,0xc
c0012d25:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012d29:	e8 e6 ff ff ff       	call   c0012d14 <Filesystem::~Filesystem()>
c0012d2e:	83 c4 04             	add    esp,0x4
c0012d31:	83 ec 08             	sub    esp,0x8
c0012d34:	6a 08                	push   0x8
c0012d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d3a:	e8 c6 fb ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0012d3f:	83 c4 10             	add    esp,0x10
c0012d42:	83 c4 0c             	add    esp,0xc
c0012d45:	c3                   	ret    

c0012d46 <Fs::getcwd(Process*, char*, int)>:
c0012d46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d4a:	31 c0                	xor    eax,eax
c0012d4c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012d4f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012d53:	7d 15                	jge    c0012d6a <Fs::getcwd(Process*, char*, int)+0x24>
c0012d55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012d59:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012d60:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012d63:	84 c9                	test   cl,cl
c0012d65:	74 06                	je     c0012d6d <Fs::getcwd(Process*, char*, int)+0x27>
c0012d67:	40                   	inc    eax
c0012d68:	eb e2                	jmp    c0012d4c <Fs::getcwd(Process*, char*, int)+0x6>
c0012d6a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012d6d:	31 c0                	xor    eax,eax
c0012d6f:	c3                   	ret    

c0012d70 <Fs::initVFS()>:
c0012d70:	83 ec 18             	sub    esp,0x18
c0012d73:	6a 08                	push   0x8
c0012d75:	e8 88 cb ff ff       	call   c000f902 <malloc>
c0012d7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d7d:	e8 f2 e4 00 00       	call   c0021274 <FAT::FAT()>
c0012d82:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012d89:	e8 74 cb ff ff       	call   c000f902 <malloc>
c0012d8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d91:	e8 1a f7 00 00       	call   c00224b0 <ISO9660::ISO9660()>
c0012d96:	83 c4 1c             	add    esp,0x1c
c0012d99:	c3                   	ret    

c0012d9a <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012d9a:	55                   	push   ebp
c0012d9b:	57                   	push   edi
c0012d9c:	56                   	push   esi
c0012d9d:	53                   	push   ebx
c0012d9e:	81 ec 10 04 00 00    	sub    esp,0x410
c0012da4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012dab:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012db2:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012db9:	68 00 04 00 00       	push   0x400
c0012dbe:	6a 00                	push   0x0
c0012dc0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012dc4:	56                   	push   esi
c0012dc5:	e8 86 d9 fe ff       	call   c0000750 <memset>
c0012dca:	83 c4 10             	add    esp,0x10
c0012dcd:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012dd1:	75 0b                	jne    c0012dde <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012dd3:	50                   	push   eax
c0012dd4:	50                   	push   eax
c0012dd5:	57                   	push   edi
c0012dd6:	56                   	push   esi
c0012dd7:	e8 30 da fe ff       	call   c000080c <strcpy>
c0012ddc:	eb 41                	jmp    c0012e1f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012dde:	8a 07                	mov    al,BYTE PTR [edi]
c0012de0:	3c 5c                	cmp    al,0x5c
c0012de2:	74 04                	je     c0012de8 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012de4:	3c 2f                	cmp    al,0x2f
c0012de6:	75 18                	jne    c0012e00 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012de8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012deb:	3c 60                	cmp    al,0x60
c0012ded:	7e 03                	jle    c0012df2 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012def:	83 e8 20             	sub    eax,0x20
c0012df2:	88 04 24             	mov    BYTE PTR [esp],al
c0012df5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012dfc:	50                   	push   eax
c0012dfd:	50                   	push   eax
c0012dfe:	eb 18                	jmp    c0012e18 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012e00:	50                   	push   eax
c0012e01:	50                   	push   eax
c0012e02:	55                   	push   ebp
c0012e03:	56                   	push   esi
c0012e04:	e8 03 da fe ff       	call   c000080c <strcpy>
c0012e09:	5a                   	pop    edx
c0012e0a:	59                   	pop    ecx
c0012e0b:	68 d9 cd 02 c0       	push   0xc002cdd9
c0012e10:	56                   	push   esi
c0012e11:	e8 36 db fe ff       	call   c000094c <strcat>
c0012e16:	5d                   	pop    ebp
c0012e17:	58                   	pop    eax
c0012e18:	57                   	push   edi
c0012e19:	56                   	push   esi
c0012e1a:	e8 2d db fe ff       	call   c000094c <strcat>
c0012e1f:	83 c4 10             	add    esp,0x10
c0012e22:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012e25:	3c 60                	cmp    al,0x60
c0012e27:	7e 03                	jle    c0012e2c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012e29:	83 e8 20             	sub    eax,0x20
c0012e2c:	88 04 24             	mov    BYTE PTR [esp],al
c0012e2f:	88 03                	mov    BYTE PTR [ebx],al
c0012e31:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012e38:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012e3e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012e42:	bf 03 00 00 00       	mov    edi,0x3
c0012e47:	b8 03 00 00 00       	mov    eax,0x3
c0012e4c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012e4f:	84 d2                	test   dl,dl
c0012e51:	0f 84 91 00 00 00    	je     c0012ee8 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012e57:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012e5a:	80 fa 5c             	cmp    dl,0x5c
c0012e5d:	74 05                	je     c0012e64 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012e5f:	80 fa 2f             	cmp    dl,0x2f
c0012e62:	75 12                	jne    c0012e76 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012e64:	89 c5                	mov    ebp,eax
c0012e66:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e6b:	74 09                	je     c0012e76 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012e6d:	40                   	inc    eax
c0012e6e:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012e72:	89 cf                	mov    edi,ecx
c0012e74:	eb d6                	jmp    c0012e4c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012e76:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012e7b:	75 5b                	jne    c0012ed8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012e7d:	80 fa 2e             	cmp    dl,0x2e
c0012e80:	75 56                	jne    c0012ed8 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012e82:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012e86:	74 19                	je     c0012ea1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012e88:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012e8d:	74 53                	je     c0012ee2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012e8f:	89 f9                	mov    ecx,edi
c0012e91:	41                   	inc    ecx
c0012e92:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012e95:	80 fa 2f             	cmp    dl,0x2f
c0012e98:	74 f7                	je     c0012e91 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012e9a:	80 fa 5c             	cmp    dl,0x5c
c0012e9d:	74 f2                	je     c0012e91 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012e9f:	eb d1                	jmp    c0012e72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ea1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012ea6:	74 3a                	je     c0012ee2 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012ea8:	83 f8 03             	cmp    eax,0x3
c0012eab:	74 c5                	je     c0012e72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ead:	41                   	inc    ecx
c0012eae:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012eb1:	80 fa 2f             	cmp    dl,0x2f
c0012eb4:	74 f7                	je     c0012ead <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012eb6:	80 fa 5c             	cmp    dl,0x5c
c0012eb9:	74 f2                	je     c0012ead <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012ebb:	48                   	dec    eax
c0012ebc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ec0:	75 06                	jne    c0012ec8 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ec2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ec6:	eb f3                	jmp    c0012ebb <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012ec8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012ecc:	74 07                	je     c0012ed5 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012ece:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ed2:	48                   	dec    eax
c0012ed3:	eb f3                	jmp    c0012ec8 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ed5:	40                   	inc    eax
c0012ed6:	eb 9a                	jmp    c0012e72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ed8:	80 fa 2f             	cmp    dl,0x2f
c0012edb:	74 95                	je     c0012e72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012edd:	80 fa 5c             	cmp    dl,0x5c
c0012ee0:	74 90                	je     c0012e72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ee2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012ee5:	40                   	inc    eax
c0012ee6:	eb 8a                	jmp    c0012e72 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ee8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012eec:	83 ec 0c             	sub    esp,0xc
c0012eef:	53                   	push   ebx
c0012ef0:	e8 77 d8 fe ff       	call   c000076c <strlen>
c0012ef5:	83 c4 10             	add    esp,0x10
c0012ef8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012efd:	75 26                	jne    c0012f25 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012eff:	83 ec 0c             	sub    esp,0xc
c0012f02:	53                   	push   ebx
c0012f03:	e8 64 d8 fe ff       	call   c000076c <strlen>
c0012f08:	83 c4 10             	add    esp,0x10
c0012f0b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012f10:	74 26                	je     c0012f38 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012f12:	83 ec 0c             	sub    esp,0xc
c0012f15:	53                   	push   ebx
c0012f16:	e8 51 d8 fe ff       	call   c000076c <strlen>
c0012f1b:	83 c4 10             	add    esp,0x10
c0012f1e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012f23:	eb c7                	jmp    c0012eec <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012f25:	83 ec 0c             	sub    esp,0xc
c0012f28:	53                   	push   ebx
c0012f29:	e8 3e d8 fe ff       	call   c000076c <strlen>
c0012f2e:	83 c4 10             	add    esp,0x10
c0012f31:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012f36:	74 c7                	je     c0012eff <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012f38:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012f3e:	5b                   	pop    ebx
c0012f3f:	5e                   	pop    esi
c0012f40:	5f                   	pop    edi
c0012f41:	5d                   	pop    ebp
c0012f42:	c3                   	ret    
c0012f43:	90                   	nop

c0012f44 <File::File(char const*, Process*)>:
c0012f44:	83 ec 0c             	sub    esp,0xc
c0012f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f4b:	83 ec 08             	sub    esp,0x8
c0012f4e:	6a 00                	push   0x0
c0012f50:	50                   	push   eax
c0012f51:	e8 46 e2 ff ff       	call   c001119c <UnixFile::UnixFile(int)>
c0012f56:	83 c4 10             	add    esp,0x10
c0012f59:	ba f8 b5 02 c0       	mov    edx,0xc002b5f8
c0012f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f62:	89 10                	mov    DWORD PTR [eax],edx
c0012f64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f68:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f72:	83 c0 0d             	add    eax,0xd
c0012f75:	83 ec 04             	sub    esp,0x4
c0012f78:	52                   	push   edx
c0012f79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f7d:	50                   	push   eax
c0012f7e:	e8 17 fe ff ff       	call   c0012d9a <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f83:	83 c4 10             	add    esp,0x10
c0012f86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012f8d:	8d 50 bf             	lea    edx,[eax-0x41]
c0012f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f94:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f9e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012fa2:	90                   	nop
c0012fa3:	83 c4 0c             	add    esp,0xc
c0012fa6:	c3                   	ret    
c0012fa7:	90                   	nop

c0012fa8 <File::open(FileOpenMode)>:
c0012fa8:	53                   	push   ebx
c0012fa9:	b8 0b 00 00 00       	mov    eax,0xb
c0012fae:	83 ec 08             	sub    esp,0x8
c0012fb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fb5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012fbc:	80 fa 19             	cmp    dl,0x19
c0012fbf:	77 40                	ja     c0013001 <File::open(FileOpenMode)+0x59>
c0012fc1:	8b 14 95 60 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07a0]
c0012fc8:	85 d2                	test   edx,edx
c0012fca:	74 35                	je     c0013001 <File::open(FileOpenMode)+0x59>
c0012fcc:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fd2:	85 d2                	test   edx,edx
c0012fd4:	74 2b                	je     c0013001 <File::open(FileOpenMode)+0x59>
c0012fd6:	b8 06 00 00 00       	mov    eax,0x6
c0012fdb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012fdf:	75 20                	jne    c0013001 <File::open(FileOpenMode)+0x59>
c0012fe1:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fe3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012fe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fed:	51                   	push   ecx
c0012fee:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012ff1:	51                   	push   ecx
c0012ff2:	52                   	push   edx
c0012ff3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ff6:	83 c4 10             	add    esp,0x10
c0012ff9:	85 c0                	test   eax,eax
c0012ffb:	75 04                	jne    c0013001 <File::open(FileOpenMode)+0x59>
c0012ffd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013001:	83 c4 08             	add    esp,0x8
c0013004:	5b                   	pop    ebx
c0013005:	c3                   	ret    

c0013006 <File::close()>:
c0013006:	53                   	push   ebx
c0013007:	b8 0b 00 00 00       	mov    eax,0xb
c001300c:	83 ec 08             	sub    esp,0x8
c001300f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013013:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001301a:	80 fa 19             	cmp    dl,0x19
c001301d:	77 41                	ja     c0013060 <File::close()+0x5a>
c001301f:	8b 1c 95 60 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd07a0]
c0013026:	85 db                	test   ebx,ebx
c0013028:	74 36                	je     c0013060 <File::close()+0x5a>
c001302a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013031:	74 2d                	je     c0013060 <File::close()+0x5a>
c0013033:	b8 05 00 00 00       	mov    eax,0x5
c0013038:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001303c:	74 22                	je     c0013060 <File::close()+0x5a>
c001303e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013042:	8b 04 95 60 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd07a0]
c0013049:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001304f:	53                   	push   ebx
c0013050:	53                   	push   ebx
c0013051:	8b 10                	mov    edx,DWORD PTR [eax]
c0013053:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013059:	50                   	push   eax
c001305a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c001305d:	83 c4 10             	add    esp,0x10
c0013060:	83 c4 08             	add    esp,0x8
c0013063:	5b                   	pop    ebx
c0013064:	c3                   	ret    
c0013065:	90                   	nop

c0013066 <File::seek(unsigned long long)>:
c0013066:	56                   	push   esi
c0013067:	53                   	push   ebx
c0013068:	b8 0b 00 00 00       	mov    eax,0xb
c001306d:	51                   	push   ecx
c001306e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013072:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013076:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001307d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013081:	80 fa 19             	cmp    dl,0x19
c0013084:	77 31                	ja     c00130b7 <File::seek(unsigned long long)+0x51>
c0013086:	8b 14 95 60 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07a0]
c001308d:	85 d2                	test   edx,edx
c001308f:	74 26                	je     c00130b7 <File::seek(unsigned long long)+0x51>
c0013091:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013097:	85 d2                	test   edx,edx
c0013099:	74 1c                	je     c00130b7 <File::seek(unsigned long long)+0x51>
c001309b:	b8 05 00 00 00       	mov    eax,0x5
c00130a0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00130a4:	74 11                	je     c00130b7 <File::seek(unsigned long long)+0x51>
c00130a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00130a8:	53                   	push   ebx
c00130a9:	51                   	push   ecx
c00130aa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00130b0:	52                   	push   edx
c00130b1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00130b4:	83 c4 10             	add    esp,0x10
c00130b7:	5a                   	pop    edx
c00130b8:	5b                   	pop    ebx
c00130b9:	5e                   	pop    esi
c00130ba:	c3                   	ret    
c00130bb:	90                   	nop

c00130bc <File::tell(unsigned long long*)>:
c00130bc:	83 ec 0c             	sub    esp,0xc
c00130bf:	b8 0b 00 00 00       	mov    eax,0xb
c00130c4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130c8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00130cf:	80 fa 19             	cmp    dl,0x19
c00130d2:	77 34                	ja     c0013108 <File::tell(unsigned long long*)+0x4c>
c00130d4:	8b 14 95 60 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07a0]
c00130db:	85 d2                	test   edx,edx
c00130dd:	74 29                	je     c0013108 <File::tell(unsigned long long*)+0x4c>
c00130df:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00130e5:	85 d2                	test   edx,edx
c00130e7:	74 1f                	je     c0013108 <File::tell(unsigned long long*)+0x4c>
c00130e9:	b8 05 00 00 00       	mov    eax,0x5
c00130ee:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00130f2:	74 14                	je     c0013108 <File::tell(unsigned long long*)+0x4c>
c00130f4:	50                   	push   eax
c00130f5:	8b 02                	mov    eax,DWORD PTR [edx]
c00130f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130fb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013101:	52                   	push   edx
c0013102:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013105:	83 c4 10             	add    esp,0x10
c0013108:	83 c4 0c             	add    esp,0xc
c001310b:	c3                   	ret    

c001310c <File::rewind()>:
c001310c:	83 ec 10             	sub    esp,0x10
c001310f:	6a 00                	push   0x0
c0013111:	6a 00                	push   0x0
c0013113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013117:	e8 4a ff ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001311c:	83 c4 1c             	add    esp,0x1c
c001311f:	c3                   	ret    

c0013120 <File::unlink()>:
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	b8 0b 00 00 00       	mov    eax,0xb
c0013128:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001312c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013133:	80 f9 19             	cmp    cl,0x19
c0013136:	77 2f                	ja     c0013167 <File::unlink()+0x47>
c0013138:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c001313f:	85 c9                	test   ecx,ecx
c0013141:	74 24                	je     c0013167 <File::unlink()+0x47>
c0013143:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013149:	85 c9                	test   ecx,ecx
c001314b:	74 1a                	je     c0013167 <File::unlink()+0x47>
c001314d:	b8 06 00 00 00       	mov    eax,0x6
c0013152:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013156:	75 0f                	jne    c0013167 <File::unlink()+0x47>
c0013158:	83 c2 0d             	add    edx,0xd
c001315b:	50                   	push   eax
c001315c:	50                   	push   eax
c001315d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001315f:	52                   	push   edx
c0013160:	51                   	push   ecx
c0013161:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013164:	83 c4 10             	add    esp,0x10
c0013167:	83 c4 0c             	add    esp,0xc
c001316a:	c3                   	ret    
c001316b:	90                   	nop

c001316c <File::rename(char const*)>:
c001316c:	83 ec 0c             	sub    esp,0xc
c001316f:	b8 0b 00 00 00       	mov    eax,0xb
c0013174:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013178:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001317f:	80 f9 19             	cmp    cl,0x19
c0013182:	77 32                	ja     c00131b6 <File::rename(char const*)+0x4a>
c0013184:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c001318b:	85 c9                	test   ecx,ecx
c001318d:	74 27                	je     c00131b6 <File::rename(char const*)+0x4a>
c001318f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013195:	85 c9                	test   ecx,ecx
c0013197:	74 1d                	je     c00131b6 <File::rename(char const*)+0x4a>
c0013199:	b8 06 00 00 00       	mov    eax,0x6
c001319e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131a2:	75 12                	jne    c00131b6 <File::rename(char const*)+0x4a>
c00131a4:	83 c2 0d             	add    edx,0xd
c00131a7:	50                   	push   eax
c00131a8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131ae:	52                   	push   edx
c00131af:	51                   	push   ecx
c00131b0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00131b3:	83 c4 10             	add    esp,0x10
c00131b6:	83 c4 0c             	add    esp,0xc
c00131b9:	c3                   	ret    

c00131ba <File::chfatattr(unsigned char, unsigned char)>:
c00131ba:	57                   	push   edi
c00131bb:	b8 0b 00 00 00       	mov    eax,0xb
c00131c0:	56                   	push   esi
c00131c1:	53                   	push   ebx
c00131c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131c6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00131ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131d1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00131d5:	80 f9 19             	cmp    cl,0x19
c00131d8:	77 37                	ja     c0013211 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131da:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c00131e1:	85 c9                	test   ecx,ecx
c00131e3:	74 2c                	je     c0013211 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131e5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131eb:	85 c9                	test   ecx,ecx
c00131ed:	74 22                	je     c0013211 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131ef:	b8 06 00 00 00       	mov    eax,0x6
c00131f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131f8:	75 17                	jne    c0013211 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00131fa:	8b 39                	mov    edi,DWORD PTR [ecx]
c00131fc:	89 f0                	mov    eax,esi
c00131fe:	83 c2 0d             	add    edx,0xd
c0013201:	0f b6 f0             	movzx  esi,al
c0013204:	0f b6 db             	movzx  ebx,bl
c0013207:	56                   	push   esi
c0013208:	53                   	push   ebx
c0013209:	52                   	push   edx
c001320a:	51                   	push   ecx
c001320b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001320e:	83 c4 10             	add    esp,0x10
c0013211:	5b                   	pop    ebx
c0013212:	5e                   	pop    esi
c0013213:	5f                   	pop    edi
c0013214:	c3                   	ret    
c0013215:	90                   	nop

c0013216 <File::exists()>:
c0013216:	83 ec 0c             	sub    esp,0xc
c0013219:	31 c0                	xor    eax,eax
c001321b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001321f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013226:	80 f9 19             	cmp    cl,0x19
c0013229:	77 24                	ja     c001324f <File::exists()+0x39>
c001322b:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c0013232:	85 c9                	test   ecx,ecx
c0013234:	74 19                	je     c001324f <File::exists()+0x39>
c0013236:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001323c:	85 c9                	test   ecx,ecx
c001323e:	74 0f                	je     c001324f <File::exists()+0x39>
c0013240:	83 c2 0d             	add    edx,0xd
c0013243:	50                   	push   eax
c0013244:	50                   	push   eax
c0013245:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013247:	52                   	push   edx
c0013248:	51                   	push   ecx
c0013249:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001324c:	83 c4 10             	add    esp,0x10
c001324f:	83 c4 0c             	add    esp,0xc
c0013252:	c3                   	ret    
c0013253:	90                   	nop

c0013254 <File::stat(unsigned long long*, bool*)>:
c0013254:	56                   	push   esi
c0013255:	53                   	push   ebx
c0013256:	50                   	push   eax
c0013257:	b8 0b 00 00 00       	mov    eax,0xb
c001325c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013260:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013264:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001326b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001326f:	80 f9 19             	cmp    cl,0x19
c0013272:	77 3d                	ja     c00132b1 <File::stat(unsigned long long*, bool*)+0x5d>
c0013274:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c001327b:	85 c9                	test   ecx,ecx
c001327d:	74 32                	je     c00132b1 <File::stat(unsigned long long*, bool*)+0x5d>
c001327f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013285:	85 c9                	test   ecx,ecx
c0013287:	74 28                	je     c00132b1 <File::stat(unsigned long long*, bool*)+0x5d>
c0013289:	8b 01                	mov    eax,DWORD PTR [ecx]
c001328b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001328f:	74 13                	je     c00132a4 <File::stat(unsigned long long*, bool*)+0x50>
c0013291:	83 ec 04             	sub    esp,0x4
c0013294:	56                   	push   esi
c0013295:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001329b:	51                   	push   ecx
c001329c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001329f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00132a2:	eb 0a                	jmp    c00132ae <File::stat(unsigned long long*, bool*)+0x5a>
c00132a4:	53                   	push   ebx
c00132a5:	83 c2 0d             	add    edx,0xd
c00132a8:	56                   	push   esi
c00132a9:	52                   	push   edx
c00132aa:	51                   	push   ecx
c00132ab:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	5a                   	pop    edx
c00132b2:	5b                   	pop    ebx
c00132b3:	5e                   	pop    esi
c00132b4:	c3                   	ret    

c00132b5 <Fs::setcwd(Process*, char*)>:
c00132b5:	55                   	push   ebp
c00132b6:	57                   	push   edi
c00132b7:	56                   	push   esi
c00132b8:	53                   	push   ebx
c00132b9:	81 ec 20 02 00 00    	sub    esp,0x220
c00132bf:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00132c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00132cc:	57                   	push   edi
c00132cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00132d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00132d8:	56                   	push   esi
c00132d9:	e8 bc fa ff ff       	call   c0012d9a <Fs::standardiseFiles(char*, char const*, char const*)>
c00132de:	89 34 24             	mov    DWORD PTR [esp],esi
c00132e1:	e8 86 d4 fe ff       	call   c000076c <strlen>
c00132e6:	83 c4 10             	add    esp,0x10
c00132e9:	83 f8 02             	cmp    eax,0x2
c00132ec:	77 17                	ja     c0013305 <Fs::setcwd(Process*, char*)+0x50>
c00132ee:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00132f3:	83 e8 41             	sub    eax,0x41
c00132f6:	83 f8 19             	cmp    eax,0x19
c00132f9:	76 24                	jbe    c001331f <Fs::setcwd(Process*, char*)+0x6a>
c00132fb:	b8 03 00 00 00       	mov    eax,0x3
c0013300:	e9 e0 00 00 00       	jmp    c00133e5 <Fs::setcwd(Process*, char*)+0x130>
c0013305:	83 ec 0c             	sub    esp,0xc
c0013308:	56                   	push   esi
c0013309:	e8 5e d4 fe ff       	call   c000076c <strlen>
c001330e:	83 c4 10             	add    esp,0x10
c0013311:	83 f8 03             	cmp    eax,0x3
c0013314:	75 34                	jne    c001334a <Fs::setcwd(Process*, char*)+0x95>
c0013316:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001331b:	75 2d                	jne    c001334a <Fs::setcwd(Process*, char*)+0x95>
c001331d:	eb cf                	jmp    c00132ee <Fs::setcwd(Process*, char*)+0x39>
c001331f:	8b 14 85 60 f8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd07a0]
c0013326:	b8 05 00 00 00       	mov    eax,0x5
c001332b:	85 d2                	test   edx,edx
c001332d:	0f 84 b2 00 00 00    	je     c00133e5 <Fs::setcwd(Process*, char*)+0x130>
c0013333:	b8 06 00 00 00       	mov    eax,0x6
c0013338:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001333f:	0f 85 92 00 00 00    	jne    c00133d7 <Fs::setcwd(Process*, char*)+0x122>
c0013345:	e9 9b 00 00 00       	jmp    c00133e5 <Fs::setcwd(Process*, char*)+0x130>
c001334a:	83 ec 0c             	sub    esp,0xc
c001334d:	68 14 01 00 00       	push   0x114
c0013352:	e8 ab c5 ff ff       	call   c000f902 <malloc>
c0013357:	83 c4 0c             	add    esp,0xc
c001335a:	89 c3                	mov    ebx,eax
c001335c:	55                   	push   ebp
c001335d:	56                   	push   esi
c001335e:	50                   	push   eax
c001335f:	e8 e0 fb ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c0013364:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013369:	83 c4 0c             	add    esp,0xc
c001336c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013370:	50                   	push   eax
c0013371:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013375:	50                   	push   eax
c0013376:	53                   	push   ebx
c0013377:	e8 d8 fe ff ff       	call   c0013254 <File::stat(unsigned long long*, bool*)>
c001337c:	83 c4 10             	add    esp,0x10
c001337f:	83 f8 02             	cmp    eax,0x2
c0013382:	74 04                	je     c0013388 <Fs::setcwd(Process*, char*)+0xd3>
c0013384:	85 c0                	test   eax,eax
c0013386:	74 1c                	je     c00133a4 <Fs::setcwd(Process*, char*)+0xef>
c0013388:	b8 01 00 00 00       	mov    eax,0x1
c001338d:	85 db                	test   ebx,ebx
c001338f:	74 54                	je     c00133e5 <Fs::setcwd(Process*, char*)+0x130>
c0013391:	83 ec 0c             	sub    esp,0xc
c0013394:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013396:	53                   	push   ebx
c0013397:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001339a:	83 c4 10             	add    esp,0x10
c001339d:	b8 01 00 00 00       	mov    eax,0x1
c00133a2:	eb 41                	jmp    c00133e5 <Fs::setcwd(Process*, char*)+0x130>
c00133a4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00133a9:	75 1c                	jne    c00133c7 <Fs::setcwd(Process*, char*)+0x112>
c00133ab:	b8 02 00 00 00       	mov    eax,0x2
c00133b0:	85 db                	test   ebx,ebx
c00133b2:	74 31                	je     c00133e5 <Fs::setcwd(Process*, char*)+0x130>
c00133b4:	83 ec 0c             	sub    esp,0xc
c00133b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133b9:	53                   	push   ebx
c00133ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133bd:	83 c4 10             	add    esp,0x10
c00133c0:	b8 02 00 00 00       	mov    eax,0x2
c00133c5:	eb 1e                	jmp    c00133e5 <Fs::setcwd(Process*, char*)+0x130>
c00133c7:	85 db                	test   ebx,ebx
c00133c9:	74 0c                	je     c00133d7 <Fs::setcwd(Process*, char*)+0x122>
c00133cb:	83 ec 0c             	sub    esp,0xc
c00133ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133d0:	53                   	push   ebx
c00133d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133d4:	83 c4 10             	add    esp,0x10
c00133d7:	50                   	push   eax
c00133d8:	50                   	push   eax
c00133d9:	56                   	push   esi
c00133da:	57                   	push   edi
c00133db:	e8 2c d4 fe ff       	call   c000080c <strcpy>
c00133e0:	83 c4 10             	add    esp,0x10
c00133e3:	31 c0                	xor    eax,eax
c00133e5:	81 c4 1c 02 00 00    	add    esp,0x21c
c00133eb:	5b                   	pop    ebx
c00133ec:	5e                   	pop    esi
c00133ed:	5f                   	pop    edi
c00133ee:	5d                   	pop    ebp
c00133ef:	c3                   	ret    

c00133f0 <Directory::Directory(char const*, Process*)>:
c00133f0:	83 ec 0c             	sub    esp,0xc
c00133f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f7:	83 ec 08             	sub    esp,0x8
c00133fa:	6a 00                	push   0x0
c00133fc:	50                   	push   eax
c00133fd:	e8 9a dd ff ff       	call   c001119c <UnixFile::UnixFile(int)>
c0013402:	83 c4 10             	add    esp,0x10
c0013405:	ba 14 b6 02 c0       	mov    edx,0xc002b614
c001340a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340e:	89 10                	mov    DWORD PTR [eax],edx
c0013410:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013414:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001341a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001341e:	83 c0 0d             	add    eax,0xd
c0013421:	83 ec 04             	sub    esp,0x4
c0013424:	52                   	push   edx
c0013425:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013429:	50                   	push   eax
c001342a:	e8 6b f9 ff ff       	call   c0012d9a <Fs::standardiseFiles(char*, char const*, char const*)>
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013436:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013439:	8d 50 bf             	lea    edx,[eax-0x41]
c001343c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013440:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001344e:	90                   	nop
c001344f:	83 c4 0c             	add    esp,0xc
c0013452:	c3                   	ret    
c0013453:	90                   	nop

c0013454 <Directory::open()>:
c0013454:	53                   	push   ebx
c0013455:	b8 0b 00 00 00       	mov    eax,0xb
c001345a:	83 ec 08             	sub    esp,0x8
c001345d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013461:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013468:	80 fa 19             	cmp    dl,0x19
c001346b:	77 3d                	ja     c00134aa <Directory::open()+0x56>
c001346d:	8b 14 95 60 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07a0]
c0013474:	85 d2                	test   edx,edx
c0013476:	74 32                	je     c00134aa <Directory::open()+0x56>
c0013478:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001347e:	85 d2                	test   edx,edx
c0013480:	74 28                	je     c00134aa <Directory::open()+0x56>
c0013482:	b8 06 00 00 00       	mov    eax,0x6
c0013487:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001348b:	75 1d                	jne    c00134aa <Directory::open()+0x56>
c001348d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013493:	50                   	push   eax
c0013494:	8b 02                	mov    eax,DWORD PTR [edx]
c0013496:	51                   	push   ecx
c0013497:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001349a:	51                   	push   ecx
c001349b:	52                   	push   edx
c001349c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001349f:	83 c4 10             	add    esp,0x10
c00134a2:	85 c0                	test   eax,eax
c00134a4:	75 04                	jne    c00134aa <Directory::open()+0x56>
c00134a6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134aa:	83 c4 08             	add    esp,0x8
c00134ad:	5b                   	pop    ebx
c00134ae:	c3                   	ret    
c00134af:	90                   	nop

c00134b0 <Directory::close()>:
c00134b0:	53                   	push   ebx
c00134b1:	b8 0b 00 00 00       	mov    eax,0xb
c00134b6:	83 ec 08             	sub    esp,0x8
c00134b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134bd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134c4:	80 fa 19             	cmp    dl,0x19
c00134c7:	77 41                	ja     c001350a <Directory::close()+0x5a>
c00134c9:	8b 1c 95 60 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd07a0]
c00134d0:	85 db                	test   ebx,ebx
c00134d2:	74 36                	je     c001350a <Directory::close()+0x5a>
c00134d4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134db:	74 2d                	je     c001350a <Directory::close()+0x5a>
c00134dd:	b8 05 00 00 00       	mov    eax,0x5
c00134e2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134e6:	74 22                	je     c001350a <Directory::close()+0x5a>
c00134e8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134ec:	8b 04 95 60 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd07a0]
c00134f3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134f9:	53                   	push   ebx
c00134fa:	53                   	push   ebx
c00134fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00134fd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013503:	50                   	push   eax
c0013504:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013507:	83 c4 10             	add    esp,0x10
c001350a:	83 c4 08             	add    esp,0x8
c001350d:	5b                   	pop    ebx
c001350e:	c3                   	ret    
c001350f:	90                   	nop

c0013510 <Directory::unlink()>:
c0013510:	83 ec 0c             	sub    esp,0xc
c0013513:	b8 0b 00 00 00       	mov    eax,0xb
c0013518:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001351c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013523:	80 f9 19             	cmp    cl,0x19
c0013526:	77 2f                	ja     c0013557 <Directory::unlink()+0x47>
c0013528:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c001352f:	85 c9                	test   ecx,ecx
c0013531:	74 24                	je     c0013557 <Directory::unlink()+0x47>
c0013533:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013539:	85 c9                	test   ecx,ecx
c001353b:	74 1a                	je     c0013557 <Directory::unlink()+0x47>
c001353d:	b8 06 00 00 00       	mov    eax,0x6
c0013542:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013546:	75 0f                	jne    c0013557 <Directory::unlink()+0x47>
c0013548:	83 c2 0d             	add    edx,0xd
c001354b:	50                   	push   eax
c001354c:	50                   	push   eax
c001354d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001354f:	52                   	push   edx
c0013550:	51                   	push   ecx
c0013551:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013554:	83 c4 10             	add    esp,0x10
c0013557:	83 c4 0c             	add    esp,0xc
c001355a:	c3                   	ret    
c001355b:	90                   	nop

c001355c <Directory::rename(char const*)>:
c001355c:	83 ec 0c             	sub    esp,0xc
c001355f:	b8 0b 00 00 00       	mov    eax,0xb
c0013564:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013568:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001356f:	80 f9 19             	cmp    cl,0x19
c0013572:	77 32                	ja     c00135a6 <Directory::rename(char const*)+0x4a>
c0013574:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c001357b:	85 c9                	test   ecx,ecx
c001357d:	74 27                	je     c00135a6 <Directory::rename(char const*)+0x4a>
c001357f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013585:	85 c9                	test   ecx,ecx
c0013587:	74 1d                	je     c00135a6 <Directory::rename(char const*)+0x4a>
c0013589:	b8 06 00 00 00       	mov    eax,0x6
c001358e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013592:	75 12                	jne    c00135a6 <Directory::rename(char const*)+0x4a>
c0013594:	83 c2 0d             	add    edx,0xd
c0013597:	50                   	push   eax
c0013598:	8b 01                	mov    eax,DWORD PTR [ecx]
c001359a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001359e:	52                   	push   edx
c001359f:	51                   	push   ecx
c00135a0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00135a3:	83 c4 10             	add    esp,0x10
c00135a6:	83 c4 0c             	add    esp,0xc
c00135a9:	c3                   	ret    

c00135aa <Directory::exists()>:
c00135aa:	83 ec 0c             	sub    esp,0xc
c00135ad:	31 c0                	xor    eax,eax
c00135af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135b3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135ba:	80 f9 19             	cmp    cl,0x19
c00135bd:	77 24                	ja     c00135e3 <Directory::exists()+0x39>
c00135bf:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c00135c6:	85 c9                	test   ecx,ecx
c00135c8:	74 19                	je     c00135e3 <Directory::exists()+0x39>
c00135ca:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135d0:	85 c9                	test   ecx,ecx
c00135d2:	74 0f                	je     c00135e3 <Directory::exists()+0x39>
c00135d4:	83 c2 0d             	add    edx,0xd
c00135d7:	50                   	push   eax
c00135d8:	50                   	push   eax
c00135d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135db:	52                   	push   edx
c00135dc:	51                   	push   ecx
c00135dd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00135e0:	83 c4 10             	add    esp,0x10
c00135e3:	83 c4 0c             	add    esp,0xc
c00135e6:	c3                   	ret    
c00135e7:	90                   	nop

c00135e8 <Directory::read(dirent*)>:
c00135e8:	83 ec 1c             	sub    esp,0x1c
c00135eb:	b8 0b 00 00 00       	mov    eax,0xb
c00135f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00135f4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135fb:	80 fa 19             	cmp    dl,0x19
c00135fe:	77 30                	ja     c0013630 <Directory::read(dirent*)+0x48>
c0013600:	8b 14 95 60 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd07a0]
c0013607:	85 d2                	test   edx,edx
c0013609:	74 25                	je     c0013630 <Directory::read(dirent*)+0x48>
c001360b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013612:	74 1c                	je     c0013630 <Directory::read(dirent*)+0x48>
c0013614:	83 ec 0c             	sub    esp,0xc
c0013617:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013619:	8d 54 24 18          	lea    edx,[esp+0x18]
c001361d:	52                   	push   edx
c001361e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013622:	6a 00                	push   0x0
c0013624:	68 10 01 00 00       	push   0x110
c0013629:	51                   	push   ecx
c001362a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001362d:	83 c4 20             	add    esp,0x20
c0013630:	83 c4 1c             	add    esp,0x1c
c0013633:	c3                   	ret    

c0013634 <Directory::create()>:
c0013634:	83 ec 0c             	sub    esp,0xc
c0013637:	b8 0b 00 00 00       	mov    eax,0xb
c001363c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013640:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013647:	80 f9 19             	cmp    cl,0x19
c001364a:	77 2f                	ja     c001367b <Directory::create()+0x47>
c001364c:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c0013653:	85 c9                	test   ecx,ecx
c0013655:	74 24                	je     c001367b <Directory::create()+0x47>
c0013657:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001365d:	85 c9                	test   ecx,ecx
c001365f:	74 1a                	je     c001367b <Directory::create()+0x47>
c0013661:	b8 06 00 00 00       	mov    eax,0x6
c0013666:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001366a:	75 0f                	jne    c001367b <Directory::create()+0x47>
c001366c:	83 c2 0d             	add    edx,0xd
c001366f:	50                   	push   eax
c0013670:	50                   	push   eax
c0013671:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013673:	52                   	push   edx
c0013674:	51                   	push   ecx
c0013675:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013678:	83 c4 10             	add    esp,0x10
c001367b:	83 c4 0c             	add    esp,0xc
c001367e:	c3                   	ret    
c001367f:	90                   	nop

c0013680 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013680:	b8 0a 00 00 00       	mov    eax,0xa
c0013685:	c3                   	ret    

c0013686 <Bus::Bus(char const*)>:
c0013686:	83 ec 0c             	sub    esp,0xc
c0013689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001368d:	83 ec 08             	sub    esp,0x8
c0013690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013694:	50                   	push   eax
c0013695:	e8 88 09 00 00       	call   c0014022 <Device::Device(char const*)>
c001369a:	83 c4 10             	add    esp,0x10
c001369d:	ba 30 b6 02 c0       	mov    edx,0xc002b630
c00136a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136a6:	89 10                	mov    DWORD PTR [eax],edx
c00136a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ac:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00136b6:	90                   	nop
c00136b7:	83 c4 0c             	add    esp,0xc
c00136ba:	c3                   	ret    
c00136bb:	90                   	nop

c00136bc <Bus::~Bus()>:
c00136bc:	83 ec 0c             	sub    esp,0xc
c00136bf:	ba 30 b6 02 c0       	mov    edx,0xc002b630
c00136c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136c8:	89 10                	mov    DWORD PTR [eax],edx
c00136ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00136ce:	83 ec 0c             	sub    esp,0xc
c00136d1:	50                   	push   eax
c00136d2:	e8 15 06 00 00       	call   c0013cec <Device::~Device()>
c00136d7:	83 c4 10             	add    esp,0x10
c00136da:	90                   	nop
c00136db:	83 c4 0c             	add    esp,0xc
c00136de:	c3                   	ret    
c00136df:	90                   	nop

c00136e0 <Bus::~Bus()>:
c00136e0:	83 ec 0c             	sub    esp,0xc
c00136e3:	83 ec 0c             	sub    esp,0xc
c00136e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ea:	e8 cd ff ff ff       	call   c00136bc <Bus::~Bus()>
c00136ef:	83 c4 10             	add    esp,0x10
c00136f2:	83 ec 08             	sub    esp,0x8
c00136f5:	68 58 01 00 00       	push   0x158
c00136fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136fe:	e8 02 f2 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0013703:	83 c4 10             	add    esp,0x10
c0013706:	83 c4 0c             	add    esp,0xc
c0013709:	c3                   	ret    

c001370a <Buzzer::Buzzer(char const*)>:
c001370a:	83 ec 0c             	sub    esp,0xc
c001370d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013711:	83 ec 08             	sub    esp,0x8
c0013714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013718:	50                   	push   eax
c0013719:	e8 04 09 00 00       	call   c0014022 <Device::Device(char const*)>
c001371e:	83 c4 10             	add    esp,0x10
c0013721:	ba 5c b6 02 c0       	mov    edx,0xc002b65c
c0013726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001372a:	89 10                	mov    DWORD PTR [eax],edx
c001372c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013730:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001373a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001373e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013748:	90                   	nop
c0013749:	83 c4 0c             	add    esp,0xc
c001374c:	c3                   	ret    
c001374d:	90                   	nop

c001374e <Buzzer::~Buzzer()>:
c001374e:	83 ec 0c             	sub    esp,0xc
c0013751:	ba 5c b6 02 c0       	mov    edx,0xc002b65c
c0013756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001375a:	89 10                	mov    DWORD PTR [eax],edx
c001375c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013760:	83 ec 0c             	sub    esp,0xc
c0013763:	50                   	push   eax
c0013764:	e8 83 05 00 00       	call   c0013cec <Device::~Device()>
c0013769:	83 c4 10             	add    esp,0x10
c001376c:	90                   	nop
c001376d:	83 c4 0c             	add    esp,0xc
c0013770:	c3                   	ret    
c0013771:	90                   	nop

c0013772 <Buzzer::~Buzzer()>:
c0013772:	83 ec 0c             	sub    esp,0xc
c0013775:	83 ec 0c             	sub    esp,0xc
c0013778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001377c:	e8 cd ff ff ff       	call   c001374e <Buzzer::~Buzzer()>
c0013781:	83 c4 10             	add    esp,0x10
c0013784:	83 ec 08             	sub    esp,0x8
c0013787:	68 5c 01 00 00       	push   0x15c
c001378c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013790:	e8 70 f1 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0013795:	83 c4 10             	add    esp,0x10
c0013798:	83 c4 0c             	add    esp,0xc
c001379b:	c3                   	ret    

c001379c <Buzzer::stop()>:
c001379c:	83 ec 14             	sub    esp,0x14
c001379f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00137a5:	6a 00                	push   0x0
c00137a7:	50                   	push   eax
c00137a8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00137ab:	83 c4 1c             	add    esp,0x1c
c00137ae:	c3                   	ret    

c00137af <beepThread(void*)>:
c00137af:	53                   	push   ebx
c00137b0:	83 ec 08             	sub    esp,0x8
c00137b3:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c00137b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137bc:	48                   	dec    eax
c00137bd:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c00137c2:	75 01                	jne    c00137c5 <beepThread(void*)+0x16>
c00137c4:	fb                   	sti    
c00137c5:	50                   	push   eax
c00137c6:	50                   	push   eax
c00137c7:	b8 40 42 0f 00       	mov    eax,0xf4240
c00137cc:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00137d2:	52                   	push   edx
c00137d3:	50                   	push   eax
c00137d4:	e8 e2 ac 00 00       	call   c001e4bb <nanoSleep(unsigned long long)>
c00137d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137dc:	e8 bb ff ff ff       	call   c001379c <Buzzer::stop()>
c00137e1:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00137e9:	83 c4 18             	add    esp,0x18
c00137ec:	5b                   	pop    ebx
c00137ed:	e9 c5 ab 00 00       	jmp    c001e3b7 <blockTask(TaskState)>

c00137f2 <Buzzer::beep(int, int, bool)>:
c00137f2:	57                   	push   edi
c00137f3:	56                   	push   esi
c00137f4:	53                   	push   ebx
c00137f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00137fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013801:	52                   	push   edx
c0013802:	52                   	push   edx
c0013803:	8b 06                	mov    eax,DWORD PTR [esi]
c0013805:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013809:	56                   	push   esi
c001380a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001380d:	83 c4 10             	add    esp,0x10
c0013810:	89 f8                	mov    eax,edi
c0013812:	84 c0                	test   al,al
c0013814:	74 1f                	je     c0013835 <Buzzer::beep(int, int, bool)+0x43>
c0013816:	50                   	push   eax
c0013817:	50                   	push   eax
c0013818:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001381e:	99                   	cdq    
c001381f:	52                   	push   edx
c0013820:	50                   	push   eax
c0013821:	e8 95 ac 00 00       	call   c001e4bb <nanoSleep(unsigned long long)>
c0013826:	83 c4 10             	add    esp,0x10
c0013829:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001382d:	5b                   	pop    ebx
c001382e:	5e                   	pop    esi
c001382f:	5f                   	pop    edi
c0013830:	e9 67 ff ff ff       	jmp    c001379c <Buzzer::stop()>
c0013835:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001383b:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0013840:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013848:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001384c:	c7 44 24 14 af 37 01 c0 	mov    DWORD PTR [esp+0x14],0xc00137af
c0013854:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013858:	5b                   	pop    ebx
c0013859:	5e                   	pop    esi
c001385a:	5f                   	pop    edi
c001385b:	e9 14 a7 00 00       	jmp    c001df74 <Process::createThread(void (*)(void*), void*, int)>

c0013860 <User::loadClockSettings(int)>:
c0013860:	53                   	push   ebx
c0013861:	83 ec 14             	sub    esp,0x14
c0013864:	68 14 01 00 00       	push   0x114
c0013869:	e8 94 c0 ff ff       	call   c000f902 <malloc>
c001386e:	83 c4 0c             	add    esp,0xc
c0013871:	89 c3                	mov    ebx,eax
c0013873:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c0013879:	68 84 b6 02 c0       	push   0xc002b684
c001387e:	50                   	push   eax
c001387f:	e8 c0 f6 ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c0013884:	58                   	pop    eax
c0013885:	5a                   	pop    edx
c0013886:	6a 01                	push   0x1
c0013888:	53                   	push   ebx
c0013889:	e8 1a f7 ff ff       	call   c0012fa8 <File::open(FileOpenMode)>
c001388e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013891:	e8 70 f7 ff ff       	call   c0013006 <File::close()>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	85 db                	test   ebx,ebx
c001389b:	74 0f                	je     c00138ac <User::loadClockSettings(int)+0x4c>
c001389d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001389f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00138a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00138a6:	83 c4 08             	add    esp,0x8
c00138a9:	5b                   	pop    ebx
c00138aa:	ff e0                	jmp    eax
c00138ac:	83 c4 08             	add    esp,0x8
c00138af:	5b                   	pop    ebx
c00138b0:	c3                   	ret    
c00138b1:	90                   	nop

c00138b2 <Clock::Clock(char const*)>:
c00138b2:	83 ec 0c             	sub    esp,0xc
c00138b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b9:	83 ec 08             	sub    esp,0x8
c00138bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c0:	50                   	push   eax
c00138c1:	e8 5c 07 00 00       	call   c0014022 <Device::Device(char const*)>
c00138c6:	83 c4 10             	add    esp,0x10
c00138c9:	ba ac b6 02 c0       	mov    edx,0xc002b6ac
c00138ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d2:	89 10                	mov    DWORD PTR [eax],edx
c00138d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138d8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00138e2:	90                   	nop
c00138e3:	83 c4 0c             	add    esp,0xc
c00138e6:	c3                   	ret    
c00138e7:	90                   	nop

c00138e8 <Clock::~Clock()>:
c00138e8:	83 ec 0c             	sub    esp,0xc
c00138eb:	ba ac b6 02 c0       	mov    edx,0xc002b6ac
c00138f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f4:	89 10                	mov    DWORD PTR [eax],edx
c00138f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fa:	83 ec 0c             	sub    esp,0xc
c00138fd:	50                   	push   eax
c00138fe:	e8 e9 03 00 00       	call   c0013cec <Device::~Device()>
c0013903:	83 c4 10             	add    esp,0x10
c0013906:	90                   	nop
c0013907:	83 c4 0c             	add    esp,0xc
c001390a:	c3                   	ret    
c001390b:	90                   	nop

c001390c <Clock::~Clock()>:
c001390c:	83 ec 0c             	sub    esp,0xc
c001390f:	83 ec 0c             	sub    esp,0xc
c0013912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013916:	e8 cd ff ff ff       	call   c00138e8 <Clock::~Clock()>
c001391b:	83 c4 10             	add    esp,0x10
c001391e:	83 ec 08             	sub    esp,0x8
c0013921:	68 58 01 00 00       	push   0x158
c0013926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001392a:	e8 d6 ef ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c001392f:	83 c4 10             	add    esp,0x10
c0013932:	83 c4 0c             	add    esp,0xc
c0013935:	c3                   	ret    

c0013936 <Clock::timeInSecondsLocal()>:
c0013936:	53                   	push   ebx
c0013937:	83 ec 14             	sub    esp,0x14
c001393a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001393e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013940:	50                   	push   eax
c0013941:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013944:	0f b6 0d dc f3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f3dc
c001394b:	03 0d e0 f3 02 c0    	add    ecx,DWORD PTR ds:0xc002f3e0
c0013951:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013957:	89 cb                	mov    ebx,ecx
c0013959:	c1 fb 1f             	sar    ebx,0x1f
c001395c:	01 c8                	add    eax,ecx
c001395e:	11 da                	adc    edx,ebx
c0013960:	83 c4 10             	add    esp,0x10
c0013963:	31 c9                	xor    ecx,ecx
c0013965:	80 3d dd f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f3dd,0x0
c001396c:	74 05                	je     c0013973 <Clock::timeInSecondsLocal()+0x3d>
c001396e:	b9 08 07 00 00       	mov    ecx,0x708
c0013973:	31 db                	xor    ebx,ebx
c0013975:	01 c8                	add    eax,ecx
c0013977:	11 da                	adc    edx,ebx
c0013979:	83 c4 08             	add    esp,0x8
c001397c:	5b                   	pop    ebx
c001397d:	c3                   	ret    

c001397e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001397e:	57                   	push   edi
c001397f:	56                   	push   esi
c0013980:	53                   	push   ebx
c0013981:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013985:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013989:	8b 01                	mov    eax,DWORD PTR [ecx]
c001398b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001398f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013992:	0f b6 05 dc f3 02 c0 	movzx  eax,BYTE PTR ds:0xc002f3dc
c0013999:	03 05 e0 f3 02 c0    	add    eax,DWORD PTR ds:0xc002f3e0
c001399f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00139a5:	99                   	cdq    
c00139a6:	29 c6                	sub    esi,eax
c00139a8:	19 d7                	sbb    edi,edx
c00139aa:	89 f0                	mov    eax,esi
c00139ac:	89 fa                	mov    edx,edi
c00139ae:	31 f6                	xor    esi,esi
c00139b0:	80 3d dd f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f3dd,0x0
c00139b7:	74 05                	je     c00139be <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00139b9:	be 08 07 00 00       	mov    esi,0x708
c00139be:	31 ff                	xor    edi,edi
c00139c0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00139c4:	29 f0                	sub    eax,esi
c00139c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139ca:	19 fa                	sbb    edx,edi
c00139cc:	89 d8                	mov    eax,ebx
c00139ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139d2:	5b                   	pop    ebx
c00139d3:	5e                   	pop    esi
c00139d4:	5f                   	pop    edi
c00139d5:	ff e0                	jmp    eax

c00139d7 <datetimeToSeconds(datetime_t)>:
c00139d7:	55                   	push   ebp
c00139d8:	57                   	push   edi
c00139d9:	56                   	push   esi
c00139da:	53                   	push   ebx
c00139db:	83 ec 14             	sub    esp,0x14
c00139de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00139e2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00139e6:	89 d3                	mov    ebx,edx
c00139e8:	0f b6 c6             	movzx  eax,dh
c00139eb:	c1 eb 10             	shr    ebx,0x10
c00139ee:	48                   	dec    eax
c00139ef:	66 81 eb 6c 07       	sub    bx,0x76c
c00139f4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00139f8:	0f b6 f5             	movzx  esi,ch
c00139fb:	89 cf                	mov    edi,ecx
c00139fd:	6b f6 3c             	imul   esi,esi,0x3c
c0013a00:	c1 ef 10             	shr    edi,0x10
c0013a03:	0f b6 c9             	movzx  ecx,cl
c0013a06:	89 f8                	mov    eax,edi
c0013a08:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a0e:	0f b6 f8             	movzx  edi,al
c0013a11:	0f b6 d2             	movzx  edx,dl
c0013a14:	01 fe                	add    esi,edi
c0013a16:	01 f1                	add    ecx,esi
c0013a18:	0f b7 f3             	movzx  esi,bx
c0013a1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013a1f:	c1 f9 1f             	sar    ecx,0x1f
c0013a22:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013a27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a2b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013a30:	8b 0c 8d e0 b6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4920]
c0013a37:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013a3b:	76 29                	jbe    c0013a66 <datetimeToSeconds(datetime_t)+0x8f>
c0013a3d:	f6 c3 03             	test   bl,0x3
c0013a40:	75 24                	jne    c0013a66 <datetimeToSeconds(datetime_t)+0x8f>
c0013a42:	31 d2                	xor    edx,edx
c0013a44:	bf 64 00 00 00       	mov    edi,0x64
c0013a49:	89 d8                	mov    eax,ebx
c0013a4b:	66 f7 f7             	div    di
c0013a4e:	66 85 d2             	test   dx,dx
c0013a51:	75 12                	jne    c0013a65 <datetimeToSeconds(datetime_t)+0x8e>
c0013a53:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013a59:	bf 90 01 00 00       	mov    edi,0x190
c0013a5e:	99                   	cdq    
c0013a5f:	f7 ff                	idiv   edi
c0013a61:	85 d2                	test   edx,edx
c0013a63:	75 01                	jne    c0013a66 <datetimeToSeconds(datetime_t)+0x8f>
c0013a65:	41                   	inc    ecx
c0013a66:	66 83 fb 46          	cmp    bx,0x46
c0013a6a:	76 45                	jbe    c0013ab1 <datetimeToSeconds(datetime_t)+0xda>
c0013a6c:	bb 46 00 00 00       	mov    ebx,0x46
c0013a71:	bf 64 00 00 00       	mov    edi,0x64
c0013a76:	bd 90 01 00 00       	mov    ebp,0x190
c0013a7b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013a80:	f6 c3 03             	test   bl,0x3
c0013a83:	75 23                	jne    c0013aa8 <datetimeToSeconds(datetime_t)+0xd1>
c0013a85:	89 d8                	mov    eax,ebx
c0013a87:	99                   	cdq    
c0013a88:	f7 ff                	idiv   edi
c0013a8a:	b8 6e 01 00 00       	mov    eax,0x16e
c0013a8f:	85 d2                	test   edx,edx
c0013a91:	75 15                	jne    c0013aa8 <datetimeToSeconds(datetime_t)+0xd1>
c0013a93:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013a99:	99                   	cdq    
c0013a9a:	f7 fd                	idiv   ebp
c0013a9c:	83 fa 01             	cmp    edx,0x1
c0013a9f:	19 c0                	sbb    eax,eax
c0013aa1:	f7 d0                	not    eax
c0013aa3:	05 6e 01 00 00       	add    eax,0x16e
c0013aa8:	01 c1                	add    ecx,eax
c0013aaa:	43                   	inc    ebx
c0013aab:	39 f3                	cmp    ebx,esi
c0013aad:	7c cc                	jl     c0013a7b <datetimeToSeconds(datetime_t)+0xa4>
c0013aaf:	eb 35                	jmp    c0013ae6 <datetimeToSeconds(datetime_t)+0x10f>
c0013ab1:	74 33                	je     c0013ae6 <datetimeToSeconds(datetime_t)+0x10f>
c0013ab3:	b8 45 00 00 00       	mov    eax,0x45
c0013ab8:	89 c2                	mov    edx,eax
c0013aba:	83 e2 03             	and    edx,0x3
c0013abd:	39 f0                	cmp    eax,esi
c0013abf:	7e 0f                	jle    c0013ad0 <datetimeToSeconds(datetime_t)+0xf9>
c0013ac1:	83 fa 01             	cmp    edx,0x1
c0013ac4:	19 d2                	sbb    edx,edx
c0013ac6:	48                   	dec    eax
c0013ac7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013ace:	eb e8                	jmp    c0013ab8 <datetimeToSeconds(datetime_t)+0xe1>
c0013ad0:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ad5:	85 d2                	test   edx,edx
c0013ad7:	75 0b                	jne    c0013ae4 <datetimeToSeconds(datetime_t)+0x10d>
c0013ad9:	66 83 fb 01          	cmp    bx,0x1
c0013add:	19 c0                	sbb    eax,eax
c0013adf:	05 6e 01 00 00       	add    eax,0x16e
c0013ae4:	29 c1                	sub    ecx,eax
c0013ae6:	b8 80 51 01 00       	mov    eax,0x15180
c0013aeb:	f7 e9                	imul   ecx
c0013aed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013af1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013af5:	83 c4 14             	add    esp,0x14
c0013af8:	5b                   	pop    ebx
c0013af9:	5e                   	pop    esi
c0013afa:	5f                   	pop    edi
c0013afb:	5d                   	pop    ebp
c0013afc:	c3                   	ret    
c0013afd:	90                   	nop

c0013afe <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013afe:	57                   	push   edi
c0013aff:	56                   	push   esi
c0013b00:	53                   	push   ebx
c0013b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b05:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b07:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013b0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b12:	e8 c0 fe ff ff       	call   c00139d7 <datetimeToSeconds(datetime_t)>
c0013b17:	59                   	pop    ecx
c0013b18:	0f b6 0d dc f3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f3dc
c0013b1f:	5b                   	pop    ebx
c0013b20:	03 0d e0 f3 02 c0    	add    ecx,DWORD PTR ds:0xc002f3e0
c0013b26:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b2c:	89 cb                	mov    ebx,ecx
c0013b2e:	c1 fb 1f             	sar    ebx,0x1f
c0013b31:	29 c8                	sub    eax,ecx
c0013b33:	19 da                	sbb    edx,ebx
c0013b35:	31 c9                	xor    ecx,ecx
c0013b37:	80 3d dd f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f3dd,0x0
c0013b3e:	74 05                	je     c0013b45 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013b40:	b9 08 07 00 00       	mov    ecx,0x708
c0013b45:	31 db                	xor    ebx,ebx
c0013b47:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013b4b:	29 c8                	sub    eax,ecx
c0013b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b51:	19 da                	sbb    edx,ebx
c0013b53:	89 f8                	mov    eax,edi
c0013b55:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013b59:	5b                   	pop    ebx
c0013b5a:	5e                   	pop    esi
c0013b5b:	5f                   	pop    edi
c0013b5c:	ff e0                	jmp    eax

c0013b5e <secondsToDatetime(unsigned long long)>:
c0013b5e:	55                   	push   ebp
c0013b5f:	57                   	push   edi
c0013b60:	56                   	push   esi
c0013b61:	53                   	push   ebx
c0013b62:	83 ec 1c             	sub    esp,0x1c
c0013b65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b69:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013b6d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013b71:	6a 00                	push   0x0
c0013b73:	68 80 51 01 00       	push   0x15180
c0013b78:	55                   	push   ebp
c0013b79:	57                   	push   edi
c0013b7a:	e8 75 37 01 00       	call   c00272f4 <__udivdi3>
c0013b7f:	83 c4 10             	add    esp,0x10
c0013b82:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013b88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b8c:	6a 00                	push   0x0
c0013b8e:	68 80 51 01 00       	push   0x15180
c0013b93:	55                   	push   ebp
c0013b94:	57                   	push   edi
c0013b95:	bf 10 0e 00 00       	mov    edi,0xe10
c0013b9a:	e8 55 38 01 00       	call   c00273f4 <__umoddi3>
c0013b9f:	83 c4 10             	add    esp,0x10
c0013ba2:	99                   	cdq    
c0013ba3:	f7 ff                	idiv   edi
c0013ba5:	bf 3c 00 00 00       	mov    edi,0x3c
c0013baa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013bad:	89 d0                	mov    eax,edx
c0013baf:	99                   	cdq    
c0013bb0:	f7 ff                	idiv   edi
c0013bb2:	85 db                	test   ebx,ebx
c0013bb4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013bb7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013bba:	79 11                	jns    c0013bcd <secondsToDatetime(unsigned long long)+0x6f>
c0013bbc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013bc0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013bc6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013bcb:	eb 07                	jmp    c0013bd4 <secondsToDatetime(unsigned long long)+0x76>
c0013bcd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013bd2:	89 d8                	mov    eax,ebx
c0013bd4:	bf b4 05 00 00       	mov    edi,0x5b4
c0013bd9:	99                   	cdq    
c0013bda:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013bdf:	f7 f9                	idiv   ecx
c0013be1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013be6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013bea:	31 d2                	xor    edx,edx
c0013bec:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013bf4:	01 c3                	add    ebx,eax
c0013bf6:	89 d8                	mov    eax,ebx
c0013bf8:	f7 f1                	div    ecx
c0013bfa:	31 d2                	xor    edx,edx
c0013bfc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013bff:	89 d8                	mov    eax,ebx
c0013c01:	f7 f7                	div    edi
c0013c03:	31 d2                	xor    edx,edx
c0013c05:	29 c1                	sub    ecx,eax
c0013c07:	89 d8                	mov    eax,ebx
c0013c09:	f7 f5                	div    ebp
c0013c0b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013c10:	29 c1                	sub    ecx,eax
c0013c12:	31 d2                	xor    edx,edx
c0013c14:	89 c8                	mov    eax,ecx
c0013c16:	f7 f5                	div    ebp
c0013c18:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013c1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013c21:	31 d2                	xor    edx,edx
c0013c23:	89 c8                	mov    eax,ecx
c0013c25:	f7 f5                	div    ebp
c0013c27:	31 d2                	xor    edx,edx
c0013c29:	01 c3                	add    ebx,eax
c0013c2b:	89 c8                	mov    eax,ecx
c0013c2d:	f7 f7                	div    edi
c0013c2f:	bf 99 00 00 00       	mov    edi,0x99
c0013c34:	29 c3                	sub    ebx,eax
c0013c36:	31 d2                	xor    edx,edx
c0013c38:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013c40:	29 c3                	sub    ebx,eax
c0013c42:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013c45:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013c48:	bb 05 00 00 00       	mov    ebx,0x5
c0013c4d:	83 c1 02             	add    ecx,0x2
c0013c50:	89 c8                	mov    eax,ecx
c0013c52:	f7 f7                	div    edi
c0013c54:	31 d2                	xor    edx,edx
c0013c56:	89 c7                	mov    edi,eax
c0013c58:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013c5e:	83 c0 02             	add    eax,0x2
c0013c61:	f7 f3                	div    ebx
c0013c63:	89 eb                	mov    ebx,ebp
c0013c65:	29 c3                	sub    ebx,eax
c0013c67:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013c6d:	88 1e                	mov    BYTE PTR [esi],bl
c0013c6f:	19 c0                	sbb    eax,eax
c0013c71:	31 d2                	xor    edx,edx
c0013c73:	83 e0 0c             	and    eax,0xc
c0013c76:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013c7a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013c82:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013c86:	83 f9 01             	cmp    ecx,0x1
c0013c89:	0f 96 c2             	setbe  dl
c0013c8c:	41                   	inc    ecx
c0013c8d:	01 d0                	add    eax,edx
c0013c8f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013c92:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013c96:	83 c4 1c             	add    esp,0x1c
c0013c99:	89 f0                	mov    eax,esi
c0013c9b:	5b                   	pop    ebx
c0013c9c:	5e                   	pop    esi
c0013c9d:	5f                   	pop    edi
c0013c9e:	5d                   	pop    ebp
c0013c9f:	c2 04 00             	ret    0x4

c0013ca2 <Clock::timeInDatetimeLocal()>:
c0013ca2:	53                   	push   ebx
c0013ca3:	83 ec 14             	sub    esp,0x14
c0013ca6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013caa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013cae:	e8 83 fc ff ff       	call   c0013936 <Clock::timeInSecondsLocal()>
c0013cb3:	83 c4 0c             	add    esp,0xc
c0013cb6:	52                   	push   edx
c0013cb7:	50                   	push   eax
c0013cb8:	53                   	push   ebx
c0013cb9:	e8 a0 fe ff ff       	call   c0013b5e <secondsToDatetime(unsigned long long)>
c0013cbe:	89 d8                	mov    eax,ebx
c0013cc0:	83 c4 14             	add    esp,0x14
c0013cc3:	5b                   	pop    ebx
c0013cc4:	c2 04 00             	ret    0x4
c0013cc7:	90                   	nop

c0013cc8 <Device::hibernate()>:
c0013cc8:	c3                   	ret    
c0013cc9:	90                   	nop

c0013cca <Device::wake()>:
c0013cca:	c3                   	ret    
c0013ccb:	90                   	nop

c0013ccc <Device::detect()>:
c0013ccc:	c3                   	ret    
c0013ccd:	90                   	nop

c0013cce <Device::disableLegacy()>:
c0013cce:	c3                   	ret    
c0013ccf:	90                   	nop

c0013cd0 <Device::powerSaving(PowerSavingLevel)>:
c0013cd0:	c3                   	ret    
c0013cd1:	90                   	nop

c0013cd2 <DriverlessDevice::close(int, int, void*)>:
c0013cd2:	31 c0                	xor    eax,eax
c0013cd4:	c3                   	ret    
c0013cd5:	90                   	nop

c0013cd6 <DriverlessDevice::detect()>:
c0013cd6:	c3                   	ret    
c0013cd7:	90                   	nop

c0013cd8 <DriverlessDevice::open(int, int, void*)>:
c0013cd8:	83 ec 18             	sub    esp,0x18
c0013cdb:	68 10 b7 02 c0       	push   0xc002b710
c0013ce0:	e8 20 67 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0013ce5:	83 c8 ff             	or     eax,0xffffffff
c0013ce8:	83 c4 1c             	add    esp,0x1c
c0013ceb:	c3                   	ret    

c0013cec <Device::~Device()>:
c0013cec:	ba 70 b7 02 c0       	mov    edx,0xc002b770
c0013cf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cf5:	89 10                	mov    DWORD PTR [eax],edx
c0013cf7:	90                   	nop
c0013cf8:	c3                   	ret    
c0013cf9:	90                   	nop

c0013cfa <Device::~Device()>:
c0013cfa:	83 ec 0c             	sub    esp,0xc
c0013cfd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d01:	e8 e6 ff ff ff       	call   c0013cec <Device::~Device()>
c0013d06:	83 c4 04             	add    esp,0x4
c0013d09:	83 ec 08             	sub    esp,0x8
c0013d0c:	68 58 01 00 00       	push   0x158
c0013d11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d15:	e8 eb eb ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0013d1a:	83 c4 10             	add    esp,0x10
c0013d1d:	83 c4 0c             	add    esp,0xc
c0013d20:	c3                   	ret    
c0013d21:	90                   	nop

c0013d22 <Device::findAndLoadDriver()>:
c0013d22:	c7 44 24 04 2e b7 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b72e
c0013d2a:	e9 b6 ec ff ff       	jmp    c00129e5 <Dbg::kprintf(char const*, ...)>
c0013d2f:	90                   	nop

c0013d30 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013d30:	57                   	push   edi
c0013d31:	b9 09 00 00 00       	mov    ecx,0x9
c0013d36:	56                   	push   esi
c0013d37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d3b:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013d3f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013d49:	81 c7 18 01 00 00    	add    edi,0x118
c0013d4f:	fc                   	cld    
c0013d50:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013d52:	5e                   	pop    esi
c0013d53:	5f                   	pop    edi
c0013d54:	c3                   	ret    
c0013d55:	90                   	nop

c0013d56 <Device::preOpenACPI(void*, char*, char*)>:
c0013d56:	57                   	push   edi
c0013d57:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013d5c:	56                   	push   esi
c0013d5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d65:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013d6f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013d75:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013d7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013d7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d81:	b9 0e 00 00 00       	mov    ecx,0xe
c0013d86:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013d8c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013d90:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013d92:	5e                   	pop    esi
c0013d93:	5f                   	pop    edi
c0013d94:	c3                   	ret    
c0013d95:	90                   	nop

c0013d96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d9a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013d9f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013da6:	75 0b                	jne    c0013db3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013da8:	8b 00                	mov    eax,DWORD PTR [eax]
c0013daa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013dae:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013db1:	eb 1e                	jmp    c0013dd1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013db3:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0013db8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013dbe:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013dc4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013dc6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013dca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013dce:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013dd1:	ff e0                	jmp    eax
c0013dd3:	90                   	nop

c0013dd4 <Device::getParent()>:
c0013dd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013dd8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013dde:	c3                   	ret    
c0013ddf:	90                   	nop

c0013de0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013de4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013de9:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013df0:	75 0b                	jne    c0013dfd <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013df2:	8b 00                	mov    eax,DWORD PTR [eax]
c0013df4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013df8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013dfb:	eb 1e                	jmp    c0013e1b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013dfd:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0013e02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013e08:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013e0e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013e10:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013e14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013e18:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013e1b:	ff e0                	jmp    eax
c0013e1d:	90                   	nop

c0013e1e <Device::addChild(Device*)>:
c0013e1e:	53                   	push   ebx
c0013e1f:	83 ec 08             	sub    esp,0x8
c0013e22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e2a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013e30:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013e36:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013e38:	85 d2                	test   edx,edx
c0013e3a:	74 04                	je     c0013e40 <Device::addChild(Device*)+0x22>
c0013e3c:	89 d3                	mov    ebx,edx
c0013e3e:	eb f6                	jmp    c0013e36 <Device::addChild(Device*)+0x18>
c0013e40:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013e43:	83 ec 0c             	sub    esp,0xc
c0013e46:	6a 08                	push   0x8
c0013e48:	e8 b5 ba ff ff       	call   c000f902 <malloc>
c0013e4d:	89 03                	mov    DWORD PTR [ebx],eax
c0013e4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e5c:	83 c4 18             	add    esp,0x18
c0013e5f:	5b                   	pop    ebx
c0013e60:	c3                   	ret    
c0013e61:	90                   	nop

c0013e62 <Device::removeAllChildren()>:
c0013e62:	56                   	push   esi
c0013e63:	53                   	push   ebx
c0013e64:	52                   	push   edx
c0013e65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e69:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013e6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e72:	74 17                	je     c0013e8b <Device::removeAllChildren()+0x29>
c0013e74:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013e77:	85 c0                	test   eax,eax
c0013e79:	74 0c                	je     c0013e87 <Device::removeAllChildren()+0x25>
c0013e7b:	83 ec 0c             	sub    esp,0xc
c0013e7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e80:	50                   	push   eax
c0013e81:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013e84:	83 c4 10             	add    esp,0x10
c0013e87:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e89:	eb e4                	jmp    c0013e6f <Device::removeAllChildren()+0xd>
c0013e8b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013e91:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e97:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013e9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013ea4:	58                   	pop    eax
c0013ea5:	5b                   	pop    ebx
c0013ea6:	5e                   	pop    esi
c0013ea7:	c3                   	ret    

c0013ea8 <Device::hibernateAll()>:
c0013ea8:	53                   	push   ebx
c0013ea9:	83 ec 14             	sub    esp,0x14
c0013eac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013eb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013eb2:	53                   	push   ebx
c0013eb3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013eb6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ebc:	83 c4 10             	add    esp,0x10
c0013ebf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ec2:	74 0f                	je     c0013ed3 <Device::hibernateAll()+0x2b>
c0013ec4:	83 ec 0c             	sub    esp,0xc
c0013ec7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eca:	e8 d9 ff ff ff       	call   c0013ea8 <Device::hibernateAll()>
c0013ecf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ed1:	eb e9                	jmp    c0013ebc <Device::hibernateAll()+0x14>
c0013ed3:	83 c4 08             	add    esp,0x8
c0013ed6:	5b                   	pop    ebx
c0013ed7:	c3                   	ret    

c0013ed8 <Device::wakeAll()>:
c0013ed8:	53                   	push   ebx
c0013ed9:	83 ec 14             	sub    esp,0x14
c0013edc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ee2:	53                   	push   ebx
c0013ee3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013ee6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ef2:	74 0f                	je     c0013f03 <Device::wakeAll()+0x2b>
c0013ef4:	83 ec 0c             	sub    esp,0xc
c0013ef7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013efa:	e8 d9 ff ff ff       	call   c0013ed8 <Device::wakeAll()>
c0013eff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f01:	eb e9                	jmp    c0013eec <Device::wakeAll()+0x14>
c0013f03:	83 c4 08             	add    esp,0x8
c0013f06:	5b                   	pop    ebx
c0013f07:	c3                   	ret    

c0013f08 <Device::detectAll()>:
c0013f08:	53                   	push   ebx
c0013f09:	83 ec 14             	sub    esp,0x14
c0013f0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f12:	53                   	push   ebx
c0013f13:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013f16:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f1c:	83 c4 10             	add    esp,0x10
c0013f1f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f22:	74 0f                	je     c0013f33 <Device::detectAll()+0x2b>
c0013f24:	83 ec 0c             	sub    esp,0xc
c0013f27:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f2a:	e8 d9 ff ff ff       	call   c0013f08 <Device::detectAll()>
c0013f2f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f31:	eb e9                	jmp    c0013f1c <Device::detectAll()+0x14>
c0013f33:	83 c4 08             	add    esp,0x8
c0013f36:	5b                   	pop    ebx
c0013f37:	c3                   	ret    

c0013f38 <Device::disableLegacyAll()>:
c0013f38:	53                   	push   ebx
c0013f39:	83 ec 14             	sub    esp,0x14
c0013f3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f42:	53                   	push   ebx
c0013f43:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013f46:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f4c:	83 c4 10             	add    esp,0x10
c0013f4f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f52:	74 0f                	je     c0013f63 <Device::disableLegacyAll()+0x2b>
c0013f54:	83 ec 0c             	sub    esp,0xc
c0013f57:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f5a:	e8 d9 ff ff ff       	call   c0013f38 <Device::disableLegacyAll()>
c0013f5f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f61:	eb e9                	jmp    c0013f4c <Device::disableLegacyAll()+0x14>
c0013f63:	83 c4 08             	add    esp,0x8
c0013f66:	5b                   	pop    ebx
c0013f67:	c3                   	ret    

c0013f68 <Device::loadDriversForAll()>:
c0013f68:	53                   	push   ebx
c0013f69:	83 ec 08             	sub    esp,0x8
c0013f6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f70:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013f77:	75 0c                	jne    c0013f85 <Device::loadDriversForAll()+0x1d>
c0013f79:	83 ec 0c             	sub    esp,0xc
c0013f7c:	53                   	push   ebx
c0013f7d:	e8 a0 fd ff ff       	call   c0013d22 <Device::findAndLoadDriver()>
c0013f82:	83 c4 10             	add    esp,0x10
c0013f85:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013f8b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013f8e:	74 12                	je     c0013fa2 <Device::loadDriversForAll()+0x3a>
c0013f90:	83 ec 0c             	sub    esp,0xc
c0013f93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f96:	e8 cd ff ff ff       	call   c0013f68 <Device::loadDriversForAll()>
c0013f9b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f9d:	83 c4 10             	add    esp,0x10
c0013fa0:	eb e9                	jmp    c0013f8b <Device::loadDriversForAll()+0x23>
c0013fa2:	83 c4 08             	add    esp,0x8
c0013fa5:	5b                   	pop    ebx
c0013fa6:	c3                   	ret    
c0013fa7:	90                   	nop

c0013fa8 <Device::closeAll()>:
c0013fa8:	53                   	push   ebx
c0013fa9:	83 ec 08             	sub    esp,0x8
c0013fac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fb2:	6a 00                	push   0x0
c0013fb4:	6a 00                	push   0x0
c0013fb6:	6a 00                	push   0x0
c0013fb8:	53                   	push   ebx
c0013fb9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fbc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013fc2:	83 c4 10             	add    esp,0x10
c0013fc5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fc8:	74 0f                	je     c0013fd9 <Device::closeAll()+0x31>
c0013fca:	83 ec 0c             	sub    esp,0xc
c0013fcd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013fd0:	e8 d3 ff ff ff       	call   c0013fa8 <Device::closeAll()>
c0013fd5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013fd7:	eb e9                	jmp    c0013fc2 <Device::closeAll()+0x1a>
c0013fd9:	83 c4 08             	add    esp,0x8
c0013fdc:	5b                   	pop    ebx
c0013fdd:	c3                   	ret    

c0013fde <Device::powerSavingAll(PowerSavingLevel)>:
c0013fde:	56                   	push   esi
c0013fdf:	53                   	push   ebx
c0013fe0:	83 ec 0c             	sub    esp,0xc
c0013fe3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013fe7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013feb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fed:	56                   	push   esi
c0013fee:	53                   	push   ebx
c0013fef:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ff2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ff8:	83 c4 10             	add    esp,0x10
c0013ffb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ffe:	74 0f                	je     c001400f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014000:	52                   	push   edx
c0014001:	52                   	push   edx
c0014002:	56                   	push   esi
c0014003:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014006:	e8 d3 ff ff ff       	call   c0013fde <Device::powerSavingAll(PowerSavingLevel)>
c001400b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001400d:	eb e9                	jmp    c0013ff8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001400f:	58                   	pop    eax
c0014010:	5b                   	pop    ebx
c0014011:	5e                   	pop    esi
c0014012:	c3                   	ret    
c0014013:	90                   	nop

c0014014 <Device::setName(char const*)>:
c0014014:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001401c:	e9 eb c7 fe ff       	jmp    c000080c <strcpy>
c0014021:	90                   	nop

c0014022 <Device::Device(char const*)>:
c0014022:	83 ec 1c             	sub    esp,0x1c
c0014025:	ba 70 b7 02 c0       	mov    edx,0xc002b770
c001402a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001402e:	89 10                	mov    DWORD PTR [eax],edx
c0014030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014034:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001403e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014042:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001404c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014050:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001405a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001405e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014068:	83 ec 08             	sub    esp,0x8
c001406b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001406f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014073:	e8 9c ff ff ff       	call   c0014014 <Device::setName(char const*)>
c0014078:	83 c4 10             	add    esp,0x10
c001407b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014083:	83 ec 0c             	sub    esp,0xc
c0014086:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001408a:	e8 73 b8 ff ff       	call   c000f902 <malloc>
c001408f:	83 c4 10             	add    esp,0x10
c0014092:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014098:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001409f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140a3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00140a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140ad:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00140b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00140b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140bd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00140c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00140ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140ce:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00140d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140d9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00140e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140e4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00140ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140f2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00140fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014100:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001410a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001410e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014118:	90                   	nop
c0014119:	83 c4 1c             	add    esp,0x1c
c001411c:	c3                   	ret    
c001411d:	90                   	nop

c001411e <Device::getName()>:
c001411e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014122:	05 d0 00 00 00       	add    eax,0xd0
c0014127:	c3                   	ret    

c0014128 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014128:	83 ec 0c             	sub    esp,0xc
c001412b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412f:	83 ec 08             	sub    esp,0x8
c0014132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014136:	50                   	push   eax
c0014137:	e8 e6 fe ff ff       	call   c0014022 <Device::Device(char const*)>
c001413c:	83 c4 10             	add    esp,0x10
c001413f:	ba 9c b7 02 c0       	mov    edx,0xc002b79c
c0014144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014148:	89 10                	mov    DWORD PTR [eax],edx
c001414a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001414e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014158:	90                   	nop
c0014159:	83 c4 0c             	add    esp,0xc
c001415c:	c3                   	ret    
c001415d:	90                   	nop

c001415e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001415e:	57                   	push   edi
c001415f:	56                   	push   esi
c0014160:	53                   	push   ebx
c0014161:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014165:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014169:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001416d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014173:	75 0c                	jne    c0014181 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014175:	52                   	push   edx
c0014176:	52                   	push   edx
c0014177:	53                   	push   ebx
c0014178:	56                   	push   esi
c0014179:	e8 c8 50 01 00       	call   c0029246 <LinkedList<Device>::addElement(Device*)>
c001417e:	83 c4 10             	add    esp,0x10
c0014181:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014187:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001418a:	74 12                	je     c001419e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001418c:	50                   	push   eax
c001418d:	57                   	push   edi
c001418e:	56                   	push   esi
c001418f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014192:	e8 c7 ff ff ff       	call   c001415e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014197:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014199:	83 c4 10             	add    esp,0x10
c001419c:	eb e9                	jmp    c0014187 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001419e:	5b                   	pop    ebx
c001419f:	5e                   	pop    esi
c00141a0:	5f                   	pop    edi
c00141a1:	c3                   	ret    

c00141a2 <getDevicesOfType(DeviceType)>:
c00141a2:	53                   	push   ebx
c00141a3:	83 ec 14             	sub    esp,0x14
c00141a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141aa:	53                   	push   ebx
c00141ab:	e8 72 51 01 00       	call   c0029322 <LinkedList<Device>::LinkedList()>
c00141b0:	83 c4 0c             	add    esp,0xc
c00141b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141b7:	53                   	push   ebx
c00141b8:	ff 35 68 f2 02 c0    	push   DWORD PTR ds:0xc002f268
c00141be:	e8 9b ff ff ff       	call   c001415e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00141c3:	89 d8                	mov    eax,ebx
c00141c5:	83 c4 18             	add    esp,0x18
c00141c8:	5b                   	pop    ebx
c00141c9:	c2 04 00             	ret    0x4

c00141cc <HardDiskController::HardDiskController(char const*)>:
c00141cc:	83 ec 0c             	sub    esp,0xc
c00141cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141d3:	83 ec 08             	sub    esp,0x8
c00141d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141da:	50                   	push   eax
c00141db:	e8 42 fe ff ff       	call   c0014022 <Device::Device(char const*)>
c00141e0:	83 c4 10             	add    esp,0x10
c00141e3:	ba c8 b7 02 c0       	mov    edx,0xc002b7c8
c00141e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ec:	89 10                	mov    DWORD PTR [eax],edx
c00141ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00141fc:	90                   	nop
c00141fd:	83 c4 0c             	add    esp,0xc
c0014200:	c3                   	ret    
c0014201:	90                   	nop

c0014202 <HardDiskController::~HardDiskController()>:
c0014202:	83 ec 0c             	sub    esp,0xc
c0014205:	ba c8 b7 02 c0       	mov    edx,0xc002b7c8
c001420a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001420e:	89 10                	mov    DWORD PTR [eax],edx
c0014210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014214:	83 ec 0c             	sub    esp,0xc
c0014217:	50                   	push   eax
c0014218:	e8 cf fa ff ff       	call   c0013cec <Device::~Device()>
c001421d:	83 c4 10             	add    esp,0x10
c0014220:	90                   	nop
c0014221:	83 c4 0c             	add    esp,0xc
c0014224:	c3                   	ret    
c0014225:	90                   	nop

c0014226 <HardDiskController::~HardDiskController()>:
c0014226:	83 ec 0c             	sub    esp,0xc
c0014229:	83 ec 0c             	sub    esp,0xc
c001422c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014230:	e8 cd ff ff ff       	call   c0014202 <HardDiskController::~HardDiskController()>
c0014235:	83 c4 10             	add    esp,0x10
c0014238:	83 ec 08             	sub    esp,0x8
c001423b:	68 58 01 00 00       	push   0x158
c0014240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014244:	e8 bc e6 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0014249:	83 c4 10             	add    esp,0x10
c001424c:	83 c4 0c             	add    esp,0xc
c001424f:	c3                   	ret    

c0014250 <PhysicalDisk::eject()>:
c0014250:	83 ec 18             	sub    esp,0x18
c0014253:	68 ec b7 02 c0       	push   0xc002b7ec
c0014258:	e8 88 e7 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001425d:	83 c8 ff             	or     eax,0xffffffff
c0014260:	83 c4 1c             	add    esp,0x1c
c0014263:	c3                   	ret    

c0014264 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001426b:	83 ec 08             	sub    esp,0x8
c001426e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014272:	50                   	push   eax
c0014273:	e8 aa fd ff ff       	call   c0014022 <Device::Device(char const*)>
c0014278:	83 c4 10             	add    esp,0x10
c001427b:	ba 1c b8 02 c0       	mov    edx,0xc002b81c
c0014280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014284:	89 10                	mov    DWORD PTR [eax],edx
c0014286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001428a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014295:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001429c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142a0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00142aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142b2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00142b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142bc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00142c6:	90                   	nop
c00142c7:	83 c4 0c             	add    esp,0xc
c00142ca:	c3                   	ret    
c00142cb:	90                   	nop

c00142cc <PhysicalDisk::startCache()>:
c00142cc:	56                   	push   esi
c00142cd:	53                   	push   ebx
c00142ce:	83 ec 10             	sub    esp,0x10
c00142d1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142d5:	6a 44                	push   0x44
c00142d7:	e8 26 b6 ff ff       	call   c000f902 <malloc>
c00142dc:	89 c6                	mov    esi,eax
c00142de:	58                   	pop    eax
c00142df:	5a                   	pop    edx
c00142e0:	53                   	push   ebx
c00142e1:	56                   	push   esi
c00142e2:	e8 a9 28 00 00       	call   c0016b90 <VCache::VCache(PhysicalDisk*)>
c00142e7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00142ed:	83 c4 14             	add    esp,0x14
c00142f0:	5b                   	pop    ebx
c00142f1:	5e                   	pop    esi
c00142f2:	c3                   	ret    
c00142f3:	90                   	nop

c00142f4 <PhysicalDisk::~PhysicalDisk()>:
c00142f4:	83 ec 0c             	sub    esp,0xc
c00142f7:	ba 1c b8 02 c0       	mov    edx,0xc002b81c
c00142fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014300:	89 10                	mov    DWORD PTR [eax],edx
c0014302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014306:	83 ec 0c             	sub    esp,0xc
c0014309:	50                   	push   eax
c001430a:	e8 dd f9 ff ff       	call   c0013cec <Device::~Device()>
c001430f:	83 c4 10             	add    esp,0x10
c0014312:	90                   	nop
c0014313:	83 c4 0c             	add    esp,0xc
c0014316:	c3                   	ret    
c0014317:	90                   	nop

c0014318 <PhysicalDisk::~PhysicalDisk()>:
c0014318:	83 ec 0c             	sub    esp,0xc
c001431b:	83 ec 0c             	sub    esp,0xc
c001431e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014322:	e8 cd ff ff ff       	call   c00142f4 <PhysicalDisk::~PhysicalDisk()>
c0014327:	83 c4 10             	add    esp,0x10
c001432a:	83 ec 08             	sub    esp,0x8
c001432d:	68 6c 01 00 00       	push   0x16c
c0014332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014336:	e8 ca e5 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c001433b:	83 c4 10             	add    esp,0x10
c001433e:	83 c4 0c             	add    esp,0xc
c0014341:	c3                   	ret    

c0014342 <FPU::FPU(char const*)>:
c0014342:	83 ec 0c             	sub    esp,0xc
c0014345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014349:	83 ec 08             	sub    esp,0x8
c001434c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014350:	50                   	push   eax
c0014351:	e8 cc fc ff ff       	call   c0014022 <Device::Device(char const*)>
c0014356:	83 c4 10             	add    esp,0x10
c0014359:	ba 60 b8 02 c0       	mov    edx,0xc002b860
c001435e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014362:	89 10                	mov    DWORD PTR [eax],edx
c0014364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014368:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014372:	90                   	nop
c0014373:	83 c4 0c             	add    esp,0xc
c0014376:	c3                   	ret    
c0014377:	90                   	nop

c0014378 <FPU::~FPU()>:
c0014378:	83 ec 0c             	sub    esp,0xc
c001437b:	ba 60 b8 02 c0       	mov    edx,0xc002b860
c0014380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014384:	89 10                	mov    DWORD PTR [eax],edx
c0014386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438a:	83 ec 0c             	sub    esp,0xc
c001438d:	50                   	push   eax
c001438e:	e8 59 f9 ff ff       	call   c0013cec <Device::~Device()>
c0014393:	83 c4 10             	add    esp,0x10
c0014396:	90                   	nop
c0014397:	83 c4 0c             	add    esp,0xc
c001439a:	c3                   	ret    
c001439b:	90                   	nop

c001439c <FPU::~FPU()>:
c001439c:	83 ec 0c             	sub    esp,0xc
c001439f:	83 ec 0c             	sub    esp,0xc
c00143a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143a6:	e8 cd ff ff ff       	call   c0014378 <FPU::~FPU()>
c00143ab:	83 c4 10             	add    esp,0x10
c00143ae:	83 ec 08             	sub    esp,0x8
c00143b1:	68 58 01 00 00       	push   0x158
c00143b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143ba:	e8 46 e5 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c00143bf:	83 c4 10             	add    esp,0x10
c00143c2:	83 c4 0c             	add    esp,0xc
c00143c5:	c3                   	ret    

c00143c6 <setupFPU()>:
c00143c6:	53                   	push   ebx
c00143c7:	83 ec 08             	sub    esp,0x8
c00143ca:	8b 15 68 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f268
c00143d0:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00143d7:	74 19                	je     c00143f2 <setupFPU()+0x2c>
c00143d9:	83 ec 0c             	sub    esp,0xc
c00143dc:	68 58 01 00 00       	push   0x158
c00143e1:	e8 1c b5 ff ff       	call   c000f902 <malloc>
c00143e6:	89 c3                	mov    ebx,eax
c00143e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00143eb:	e8 8c 1a 01 00       	call   c0025e7c <AVX::AVX()>
c00143f0:	eb 5b                	jmp    c001444d <setupFPU()+0x87>
c00143f2:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00143f8:	84 c0                	test   al,al
c00143fa:	79 19                	jns    c0014415 <setupFPU()+0x4f>
c00143fc:	83 ec 0c             	sub    esp,0xc
c00143ff:	68 58 01 00 00       	push   0x158
c0014404:	e8 f9 b4 ff ff       	call   c000f902 <malloc>
c0014409:	89 c3                	mov    ebx,eax
c001440b:	89 04 24             	mov    DWORD PTR [esp],eax
c001440e:	e8 8f 1b 01 00       	call   c0025fa2 <SSE::SSE()>
c0014413:	eb 38                	jmp    c001444d <setupFPU()+0x87>
c0014415:	a8 20                	test   al,0x20
c0014417:	74 19                	je     c0014432 <setupFPU()+0x6c>
c0014419:	83 ec 0c             	sub    esp,0xc
c001441c:	68 58 01 00 00       	push   0x158
c0014421:	e8 dc b4 ff ff       	call   c000f902 <malloc>
c0014426:	89 c3                	mov    ebx,eax
c0014428:	89 04 24             	mov    DWORD PTR [esp],eax
c001442b:	e8 dc 1a 01 00       	call   c0025f0c <MMX::MMX()>
c0014430:	eb 1b                	jmp    c001444d <setupFPU()+0x87>
c0014432:	a8 10                	test   al,0x10
c0014434:	74 1c                	je     c0014452 <setupFPU()+0x8c>
c0014436:	83 ec 0c             	sub    esp,0xc
c0014439:	68 58 01 00 00       	push   0x158
c001443e:	e8 bf b4 ff ff       	call   c000f902 <malloc>
c0014443:	89 c3                	mov    ebx,eax
c0014445:	89 04 24             	mov    DWORD PTR [esp],eax
c0014448:	e8 e3 1b 01 00       	call   c0026030 <x87::x87()>
c001444d:	83 c4 10             	add    esp,0x10
c0014450:	eb 24                	jmp    c0014476 <setupFPU()+0xb0>
c0014452:	83 e0 ef             	and    eax,0xffffffef
c0014455:	83 ec 0c             	sub    esp,0xc
c0014458:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001445e:	68 4c b8 02 c0       	push   0xc002b84c
c0014463:	e8 7d e5 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014468:	0f 20 c0             	mov    eax,cr0
c001446b:	83 c8 04             	or     eax,0x4
c001446e:	0f 22 c0             	mov    cr0,eax
c0014471:	31 db                	xor    ebx,ebx
c0014473:	83 c4 10             	add    esp,0x10
c0014476:	89 d8                	mov    eax,ebx
c0014478:	83 c4 08             	add    esp,0x8
c001447b:	5b                   	pop    ebx
c001447c:	c3                   	ret    
c001447d:	90                   	nop

c001447e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001447e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014482:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014486:	c1 e0 04             	shl    eax,0x4
c0014489:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001448d:	8d 50 10             	lea    edx,[eax+0x10]
c0014490:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014496:	74 08                	je     c00144a0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014498:	83 c0 04             	add    eax,0x4
c001449b:	39 d0                	cmp    eax,edx
c001449d:	75 f1                	jne    c0014490 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001449f:	c3                   	ret    
c00144a0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00144aa:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00144b4:	eb e2                	jmp    c0014498 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00144b6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00144b6:	57                   	push   edi
c00144b7:	31 c0                	xor    eax,eax
c00144b9:	56                   	push   esi
c00144ba:	53                   	push   ebx
c00144bb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00144bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00144c3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00144c7:	89 da                	mov    edx,ebx
c00144c9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00144cd:	c1 e2 04             	shl    edx,0x4
c00144d0:	01 ca                	add    edx,ecx
c00144d2:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00144da:	74 16                	je     c00144f2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00144dc:	40                   	inc    eax
c00144dd:	83 f8 04             	cmp    eax,0x4
c00144e0:	75 f0                	jne    c00144d2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00144e2:	c7 44 24 10 90 b8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b890
c00144ea:	5b                   	pop    ebx
c00144eb:	5e                   	pop    esi
c00144ec:	5f                   	pop    edi
c00144ed:	e9 13 5f 00 00       	jmp    c001a405 <Krnl::panic(char const*)>
c00144f2:	8d 04 98             	lea    eax,[eax+ebx*4]
c00144f5:	8d 04 81             	lea    eax,[ecx+eax*4]
c00144f8:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00144fe:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014504:	5b                   	pop    ebx
c0014505:	5e                   	pop    esi
c0014506:	5f                   	pop    edi
c0014507:	c3                   	ret    

c0014508 <doubleFault(regs*, void*)>:
c0014508:	55                   	push   ebp
c0014509:	89 e5                	mov    ebp,esp
c001450b:	83 ec 08             	sub    esp,0x8
c001450e:	83 ec 0c             	sub    esp,0xc
c0014511:	68 cb b8 02 c0       	push   0xc002b8cb
c0014516:	e8 ea 5e 00 00       	call   c001a405 <Krnl::panic(char const*)>
c001451b:	83 c4 10             	add    esp,0x10
c001451e:	90                   	nop
c001451f:	c9                   	leave  
c0014520:	c3                   	ret    
c0014521:	90                   	nop

c0014522 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014522:	56                   	push   esi
c0014523:	53                   	push   ebx
c0014524:	50                   	push   eax
c0014525:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014529:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001452d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014532:	75 35                	jne    c0014569 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014534:	8d 43 20             	lea    eax,[ebx+0x20]
c0014537:	31 d2                	xor    edx,edx
c0014539:	89 c1                	mov    ecx,eax
c001453b:	c1 e1 04             	shl    ecx,0x4
c001453e:	01 f1                	add    ecx,esi
c0014540:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014548:	74 3e                	je     c0014588 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001454a:	42                   	inc    edx
c001454b:	83 fa 04             	cmp    edx,0x4
c001454e:	75 f0                	jne    c0014540 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014550:	83 ec 0c             	sub    esp,0xc
c0014553:	68 10 b9 02 c0       	push   0xc002b910
c0014558:	e8 a8 5e 00 00       	call   c001a405 <Krnl::panic(char const*)>
c001455d:	83 c4 10             	add    esp,0x10
c0014560:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014565:	5a                   	pop    edx
c0014566:	5b                   	pop    ebx
c0014567:	5e                   	pop    esi
c0014568:	c3                   	ret    
c0014569:	83 ec 0c             	sub    esp,0xc
c001456c:	56                   	push   esi
c001456d:	e8 ac fb ff ff       	call   c001411e <Device::getName()>
c0014572:	83 c4 10             	add    esp,0x10
c0014575:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014578:	75 ba                	jne    c0014534 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001457a:	83 fb 0f             	cmp    ebx,0xf
c001457d:	7f 29                	jg     c00145a8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001457f:	0f b6 9b c0 e4 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1b40]
c0014586:	eb ac                	jmp    c0014534 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014588:	8d 04 82             	lea    eax,[edx+eax*4]
c001458b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001458f:	8d 04 86             	lea    eax,[esi+eax*4]
c0014592:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014598:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001459c:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00145a2:	89 d8                	mov    eax,ebx
c00145a4:	5a                   	pop    edx
c00145a5:	5b                   	pop    ebx
c00145a6:	5e                   	pop    esi
c00145a7:	c3                   	ret    
c00145a8:	83 ec 0c             	sub    esp,0xc
c00145ab:	68 d8 b8 02 c0       	push   0xc002b8d8
c00145b0:	e8 50 5e 00 00       	call   c001a405 <Krnl::panic(char const*)>
c00145b5:	83 c4 10             	add    esp,0x10
c00145b8:	e9 77 ff ff ff       	jmp    c0014534 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00145bd:	90                   	nop

c00145be <InterruptController::clearAllHandlers(int, bool)>:
c00145be:	56                   	push   esi
c00145bf:	53                   	push   ebx
c00145c0:	52                   	push   edx
c00145c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145c9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00145ce:	75 61                	jne    c0014631 <InterruptController::clearAllHandlers(int, bool)+0x73>
c00145d0:	8d 46 20             	lea    eax,[esi+0x20]
c00145d3:	c1 e6 04             	shl    esi,0x4
c00145d6:	c1 e0 04             	shl    eax,0x4
c00145d9:	01 de                	add    esi,ebx
c00145db:	01 d8                	add    eax,ebx
c00145dd:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00145e7:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00145f1:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00145fb:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014605:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001460f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014619:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014623:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001462d:	58                   	pop    eax
c001462e:	5b                   	pop    ebx
c001462f:	5e                   	pop    esi
c0014630:	c3                   	ret    
c0014631:	83 ec 0c             	sub    esp,0xc
c0014634:	53                   	push   ebx
c0014635:	e8 e4 fa ff ff       	call   c001411e <Device::getName()>
c001463a:	83 c4 10             	add    esp,0x10
c001463d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014640:	75 8e                	jne    c00145d0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014642:	83 fe 0f             	cmp    esi,0xf
c0014645:	7f 09                	jg     c0014650 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014647:	0f b6 b6 c0 e4 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1b40]
c001464e:	eb 80                	jmp    c00145d0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014650:	83 ec 0c             	sub    esp,0xc
c0014653:	68 4c b9 02 c0       	push   0xc002b94c
c0014658:	e8 a8 5d 00 00       	call   c001a405 <Krnl::panic(char const*)>
c001465d:	83 c4 10             	add    esp,0x10
c0014660:	e9 6b ff ff ff       	jmp    c00145d0 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014665:	90                   	nop

c0014666 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014666:	56                   	push   esi
c0014667:	53                   	push   ebx
c0014668:	52                   	push   edx
c0014669:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001466d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014671:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014676:	75 3a                	jne    c00146b2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014678:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001467c:	8d 50 20             	lea    edx,[eax+0x20]
c001467f:	c1 e2 04             	shl    edx,0x4
c0014682:	8d 04 16             	lea    eax,[esi+edx*1]
c0014685:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014689:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001468f:	74 0b                	je     c001469c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014691:	83 c0 04             	add    eax,0x4
c0014694:	39 d0                	cmp    eax,edx
c0014696:	75 f1                	jne    c0014689 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014698:	58                   	pop    eax
c0014699:	5b                   	pop    ebx
c001469a:	5e                   	pop    esi
c001469b:	c3                   	ret    
c001469c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00146a6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00146b0:	eb df                	jmp    c0014691 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00146b2:	83 ec 0c             	sub    esp,0xc
c00146b5:	56                   	push   esi
c00146b6:	e8 63 fa ff ff       	call   c001411e <Device::getName()>
c00146bb:	83 c4 10             	add    esp,0x10
c00146be:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00146c1:	75 b5                	jne    c0014678 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00146c3:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00146c8:	7f 11                	jg     c00146db <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00146ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146ce:	0f b6 80 c0 e4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1b40]
c00146d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146d9:	eb 9d                	jmp    c0014678 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00146db:	83 ec 0c             	sub    esp,0xc
c00146de:	68 4c b9 02 c0       	push   0xc002b94c
c00146e3:	e8 1d 5d 00 00       	call   c001a405 <Krnl::panic(char const*)>
c00146e8:	83 c4 10             	add    esp,0x10
c00146eb:	eb 8b                	jmp    c0014678 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00146ed <nmiHandler(regs*, void*)>:
c00146ed:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00146f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146f6:	e9 51 a9 ff ff       	jmp    c000f04c <Computer::handleNMI()>

c00146fb <int_handler>:
c00146fb:	55                   	push   ebp
c00146fc:	57                   	push   edi
c00146fd:	56                   	push   esi
c00146fe:	53                   	push   ebx
c00146ff:	83 ec 0c             	sub    esp,0xc
c0014702:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014706:	80 3d a4 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031da4,0x0
c001470d:	74 0b                	je     c001471a <int_handler+0x1f>
c001470f:	fa                   	cli    
c0014710:	f4                   	hlt    
c0014711:	80 3d a4 1d 03 c0 00 	cmp    BYTE PTR ds:0xc0031da4,0x0
c0014718:	75 f5                	jne    c001470f <int_handler+0x14>
c001471a:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001471f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014722:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014728:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001472e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014731:	83 f8 17             	cmp    eax,0x17
c0014734:	77 13                	ja     c0014749 <int_handler+0x4e>
c0014736:	83 ec 08             	sub    esp,0x8
c0014739:	8b 17                	mov    edx,DWORD PTR [edi]
c001473b:	8d 43 e0             	lea    eax,[ebx-0x20]
c001473e:	0f b6 c0             	movzx  eax,al
c0014741:	50                   	push   eax
c0014742:	57                   	push   edi
c0014743:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014746:	83 c4 10             	add    esp,0x10
c0014749:	83 c3 15             	add    ebx,0x15
c001474c:	c1 e3 04             	shl    ebx,0x4
c001474f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014753:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001475a:	31 db                	xor    ebx,ebx
c001475c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014760:	85 c0                	test   eax,eax
c0014762:	74 13                	je     c0014777 <int_handler+0x7c>
c0014764:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014767:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c001476b:	74 1c                	je     c0014789 <int_handler+0x8e>
c001476d:	83 ec 08             	sub    esp,0x8
c0014770:	52                   	push   edx
c0014771:	56                   	push   esi
c0014772:	ff d0                	call   eax
c0014774:	83 c4 10             	add    esp,0x10
c0014777:	43                   	inc    ebx
c0014778:	83 fb 04             	cmp    ebx,0x4
c001477b:	75 df                	jne    c001475c <int_handler+0x61>
c001477d:	83 c4 0c             	add    esp,0xc
c0014780:	31 c0                	xor    eax,eax
c0014782:	5b                   	pop    ebx
c0014783:	31 d2                	xor    edx,edx
c0014785:	5e                   	pop    esi
c0014786:	5f                   	pop    edi
c0014787:	5d                   	pop    ebp
c0014788:	c3                   	ret    
c0014789:	83 ec 08             	sub    esp,0x8
c001478c:	52                   	push   edx
c001478d:	56                   	push   esi
c001478e:	ff d0                	call   eax
c0014790:	83 c4 10             	add    esp,0x10
c0014793:	83 c4 0c             	add    esp,0xc
c0014796:	5b                   	pop    ebx
c0014797:	5e                   	pop    esi
c0014798:	5f                   	pop    edi
c0014799:	5d                   	pop    ebp
c001479a:	c3                   	ret    
c001479b:	90                   	nop

c001479c <InterruptController::InterruptController(char const*)>:
c001479c:	83 ec 1c             	sub    esp,0x1c
c001479f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147a3:	83 ec 08             	sub    esp,0x8
c00147a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00147aa:	50                   	push   eax
c00147ab:	e8 72 f8 ff ff       	call   c0014022 <Device::Device(char const*)>
c00147b0:	83 c4 10             	add    esp,0x10
c00147b3:	ba 0c bc 02 c0       	mov    edx,0xc002bc0c
c00147b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147bc:	89 10                	mov    DWORD PTR [eax],edx
c00147be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147c2:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00147cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147d4:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00147dc:	7f 5e                	jg     c001483c <InterruptController::InterruptController(char const*)+0xa0>
c00147de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147e6:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00147eb:	7f 49                	jg     c0014836 <InterruptController::InterruptController(char const*)+0x9a>
c00147ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00147f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00147f5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00147fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014800:	01 ca                	add    edx,ecx
c0014802:	83 c2 54             	add    edx,0x54
c0014805:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001480d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014811:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014815:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001481c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014820:	01 ca                	add    edx,ecx
c0014822:	81 c2 54 04 00 00    	add    edx,0x454
c0014828:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014830:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014834:	eb b0                	jmp    c00147e6 <InterruptController::InterruptController(char const*)+0x4a>
c0014836:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001483a:	eb 98                	jmp    c00147d4 <InterruptController::InterruptController(char const*)+0x38>
c001483c:	90                   	nop
c001483d:	83 c4 1c             	add    esp,0x1c
c0014840:	c3                   	ret    
c0014841:	90                   	nop

c0014842 <InterruptController::~InterruptController()>:
c0014842:	83 ec 0c             	sub    esp,0xc
c0014845:	ba 0c bc 02 c0       	mov    edx,0xc002bc0c
c001484a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001484e:	89 10                	mov    DWORD PTR [eax],edx
c0014850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014854:	83 ec 0c             	sub    esp,0xc
c0014857:	50                   	push   eax
c0014858:	e8 8f f4 ff ff       	call   c0013cec <Device::~Device()>
c001485d:	83 c4 10             	add    esp,0x10
c0014860:	90                   	nop
c0014861:	83 c4 0c             	add    esp,0xc
c0014864:	c3                   	ret    
c0014865:	90                   	nop

c0014866 <InterruptController::~InterruptController()>:
c0014866:	83 ec 0c             	sub    esp,0xc
c0014869:	83 ec 0c             	sub    esp,0xc
c001486c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014870:	e8 cd ff ff ff       	call   c0014842 <InterruptController::~InterruptController()>
c0014875:	83 c4 10             	add    esp,0x10
c0014878:	83 ec 08             	sub    esp,0x8
c001487b:	68 58 21 00 00       	push   0x2158
c0014880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014884:	e8 7c e0 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0014889:	83 c4 10             	add    esp,0x10
c001488c:	83 c4 0c             	add    esp,0xc
c001488f:	c3                   	ret    

c0014890 <displayDebugInfo(regs*)>:
c0014890:	55                   	push   ebp
c0014891:	57                   	push   edi
c0014892:	56                   	push   esi
c0014893:	53                   	push   ebx
c0014894:	83 ec 24             	sub    esp,0x24
c0014897:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001489b:	0f 20 c2             	mov    edx,cr0
c001489e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00148a2:	0f 20 d7             	mov    edi,cr2
c00148a5:	0f 20 de             	mov    esi,cr3
c00148a8:	0f 20 e5             	mov    ebp,cr4
c00148ab:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00148ae:	68 86 b9 02 c0       	push   0xc002b986
c00148b3:	e8 2d e1 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00148b8:	59                   	pop    ecx
c00148b9:	58                   	pop    eax
c00148ba:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00148bd:	68 91 b9 02 c0       	push   0xc002b991
c00148c2:	e8 1e e1 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00148c7:	58                   	pop    eax
c00148c8:	5a                   	pop    edx
c00148c9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00148cc:	68 9c b9 02 c0       	push   0xc002b99c
c00148d1:	e8 0f e1 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00148d6:	59                   	pop    ecx
c00148d7:	58                   	pop    eax
c00148d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00148db:	68 a7 b9 02 c0       	push   0xc002b9a7
c00148e0:	e8 00 e1 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00148e5:	58                   	pop    eax
c00148e6:	5a                   	pop    edx
c00148e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00148ea:	68 b2 b9 02 c0       	push   0xc002b9b2
c00148ef:	e8 f1 e0 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00148f4:	59                   	pop    ecx
c00148f5:	58                   	pop    eax
c00148f6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00148f9:	68 bd b9 02 c0       	push   0xc002b9bd
c00148fe:	e8 e2 e0 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014903:	58                   	pop    eax
c0014904:	5a                   	pop    edx
c0014905:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014908:	68 c8 b9 02 c0       	push   0xc002b9c8
c001490d:	e8 d3 e0 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014912:	59                   	pop    ecx
c0014913:	58                   	pop    eax
c0014914:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014917:	68 d3 b9 02 c0       	push   0xc002b9d3
c001491c:	e8 c4 e0 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014921:	58                   	pop    eax
c0014922:	5a                   	pop    edx
c0014923:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014926:	68 de b9 02 c0       	push   0xc002b9de
c001492b:	e8 b5 e0 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014930:	59                   	pop    ecx
c0014931:	58                   	pop    eax
c0014932:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014935:	68 ed b9 02 c0       	push   0xc002b9ed
c001493a:	e8 a6 e0 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001493f:	58                   	pop    eax
c0014940:	5a                   	pop    edx
c0014941:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014944:	68 f8 b9 02 c0       	push   0xc002b9f8
c0014949:	e8 97 e0 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001494e:	59                   	pop    ecx
c001494f:	58                   	pop    eax
c0014950:	57                   	push   edi
c0014951:	68 03 ba 02 c0       	push   0xc002ba03
c0014956:	e8 8a e0 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001495b:	58                   	pop    eax
c001495c:	5a                   	pop    edx
c001495d:	56                   	push   esi
c001495e:	68 0e ba 02 c0       	push   0xc002ba0e
c0014963:	e8 7d e0 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014968:	59                   	pop    ecx
c0014969:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001496e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014974:	e8 8f be ff ff       	call   c0010808 <setActiveTerminal(VgaText*)>
c0014979:	58                   	pop    eax
c001497a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001497d:	5a                   	pop    edx
c001497e:	c1 e0 05             	shl    eax,0x5
c0014981:	05 20 e2 02 c0       	add    eax,0xc002e220
c0014986:	50                   	push   eax
c0014987:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001498c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014992:	e8 43 c2 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014997:	59                   	pop    ecx
c0014998:	58                   	pop    eax
c0014999:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001499e:	68 19 ba 02 c0       	push   0xc002ba19
c00149a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a9:	e8 2c c2 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c00149ae:	58                   	pop    eax
c00149af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149b4:	5a                   	pop    edx
c00149b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149b8:	83 c0 0c             	add    eax,0xc
c00149bb:	50                   	push   eax
c00149bc:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c00149c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149c7:	e8 0e c2 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c00149cc:	59                   	pop    ecx
c00149cd:	58                   	pop    eax
c00149ce:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c00149d3:	68 22 ba 02 c0       	push   0xc002ba22
c00149d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149de:	e8 f7 c1 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c00149e3:	58                   	pop    eax
c00149e4:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c00149e9:	5a                   	pop    edx
c00149ea:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f3:	e8 9c c1 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c00149f8:	59                   	pop    ecx
c00149f9:	58                   	pop    eax
c00149fa:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c00149ff:	68 2a ba 02 c0       	push   0xc002ba2a
c0014a04:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a0a:	e8 cb c1 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014a0f:	58                   	pop    eax
c0014a10:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014a15:	5a                   	pop    edx
c0014a16:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014a19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a1f:	e8 70 c1 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014a24:	59                   	pop    ecx
c0014a25:	58                   	pop    eax
c0014a26:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014a2b:	68 32 ba 02 c0       	push   0xc002ba32
c0014a30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a36:	e8 9f c1 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014a3b:	58                   	pop    eax
c0014a3c:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014a41:	5a                   	pop    edx
c0014a42:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a4b:	e8 44 c1 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014a50:	59                   	pop    ecx
c0014a51:	58                   	pop    eax
c0014a52:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014a57:	68 3a ba 02 c0       	push   0xc002ba3a
c0014a5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a62:	e8 73 c1 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014a67:	58                   	pop    eax
c0014a68:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014a6d:	5a                   	pop    edx
c0014a6e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014a71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a77:	e8 18 c1 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014a7c:	59                   	pop    ecx
c0014a7d:	58                   	pop    eax
c0014a7e:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014a83:	68 42 ba 02 c0       	push   0xc002ba42
c0014a88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a8e:	e8 47 c1 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014a93:	58                   	pop    eax
c0014a94:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014a99:	5a                   	pop    edx
c0014a9a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa3:	e8 ec c0 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014aa8:	59                   	pop    ecx
c0014aa9:	58                   	pop    eax
c0014aaa:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014aaf:	68 4a ba 02 c0       	push   0xc002ba4a
c0014ab4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aba:	e8 1b c1 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014abf:	58                   	pop    eax
c0014ac0:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014ac5:	5a                   	pop    edx
c0014ac6:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014ac9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014acf:	e8 c0 c0 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014ad4:	59                   	pop    ecx
c0014ad5:	58                   	pop    eax
c0014ad6:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014adb:	68 52 ba 02 c0       	push   0xc002ba52
c0014ae0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ae6:	e8 ef c0 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014aeb:	58                   	pop    eax
c0014aec:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014af1:	5a                   	pop    edx
c0014af2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014af6:	52                   	push   edx
c0014af7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014afd:	e8 92 c0 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014b02:	59                   	pop    ecx
c0014b03:	58                   	pop    eax
c0014b04:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014b09:	68 5b ba 02 c0       	push   0xc002ba5b
c0014b0e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b14:	e8 c1 c0 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014b19:	58                   	pop    eax
c0014b1a:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014b1f:	5a                   	pop    edx
c0014b20:	57                   	push   edi
c0014b21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b27:	e8 68 c0 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014b2c:	59                   	pop    ecx
c0014b2d:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014b32:	5f                   	pop    edi
c0014b33:	68 63 ba 02 c0       	push   0xc002ba63
c0014b38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b3e:	e8 97 c0 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014b43:	58                   	pop    eax
c0014b44:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014b49:	5a                   	pop    edx
c0014b4a:	56                   	push   esi
c0014b4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b51:	e8 3e c0 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014b56:	59                   	pop    ecx
c0014b57:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014b5c:	5e                   	pop    esi
c0014b5d:	68 6b ba 02 c0       	push   0xc002ba6b
c0014b62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b68:	e8 6d c0 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014b6d:	5f                   	pop    edi
c0014b6e:	58                   	pop    eax
c0014b6f:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014b74:	55                   	push   ebp
c0014b75:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b7b:	e8 14 c0 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014b80:	58                   	pop    eax
c0014b81:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014b86:	5a                   	pop    edx
c0014b87:	68 73 ba 02 c0       	push   0xc002ba73
c0014b8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b92:	e8 43 c0 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014b97:	0f 21 c0             	mov    eax,db0
c0014b9a:	59                   	pop    ecx
c0014b9b:	5e                   	pop    esi
c0014b9c:	50                   	push   eax
c0014b9d:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014ba2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba8:	e8 e7 bf ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014bad:	5f                   	pop    edi
c0014bae:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014bb3:	5d                   	pop    ebp
c0014bb4:	68 7c ba 02 c0       	push   0xc002ba7c
c0014bb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bbf:	e8 16 c0 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014bc4:	0f 21 c8             	mov    eax,db1
c0014bc7:	5a                   	pop    edx
c0014bc8:	59                   	pop    ecx
c0014bc9:	50                   	push   eax
c0014bca:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014bcf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd5:	e8 ba bf ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014bda:	5e                   	pop    esi
c0014bdb:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014be0:	5f                   	pop    edi
c0014be1:	68 84 ba 02 c0       	push   0xc002ba84
c0014be6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bec:	e8 e9 bf ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014bf1:	0f 21 d0             	mov    eax,db2
c0014bf4:	5d                   	pop    ebp
c0014bf5:	5a                   	pop    edx
c0014bf6:	50                   	push   eax
c0014bf7:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014bfc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c02:	e8 8d bf ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014c07:	59                   	pop    ecx
c0014c08:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014c0d:	5e                   	pop    esi
c0014c0e:	68 8c ba 02 c0       	push   0xc002ba8c
c0014c13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c19:	e8 bc bf ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014c1e:	0f 21 d8             	mov    eax,db3
c0014c21:	5f                   	pop    edi
c0014c22:	5d                   	pop    ebp
c0014c23:	50                   	push   eax
c0014c24:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014c29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c2f:	e8 60 bf ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014c34:	58                   	pop    eax
c0014c35:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014c3a:	5a                   	pop    edx
c0014c3b:	68 94 ba 02 c0       	push   0xc002ba94
c0014c40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c46:	e8 8f bf ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014c4b:	0f 21 f0             	mov    eax,db6
c0014c4e:	59                   	pop    ecx
c0014c4f:	5e                   	pop    esi
c0014c50:	50                   	push   eax
c0014c51:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014c56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c5c:	e8 33 bf ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014c61:	5f                   	pop    edi
c0014c62:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014c67:	5d                   	pop    ebp
c0014c68:	68 9c ba 02 c0       	push   0xc002ba9c
c0014c6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c73:	e8 62 bf ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014c78:	0f 21 f8             	mov    eax,db7
c0014c7b:	5a                   	pop    edx
c0014c7c:	59                   	pop    ecx
c0014c7d:	50                   	push   eax
c0014c7e:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014c83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c89:	e8 06 bf ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014c8e:	5e                   	pop    esi
c0014c8f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014c92:	e8 f1 8a 00 00       	call   c001d788 <Thr::getDriverNameFromAddress(unsigned long)>
c0014c97:	83 c4 10             	add    esp,0x10
c0014c9a:	85 c0                	test   eax,eax
c0014c9c:	74 7d                	je     c0014d1b <displayDebugInfo(regs*)+0x48b>
c0014c9e:	89 c6                	mov    esi,eax
c0014ca0:	50                   	push   eax
c0014ca1:	50                   	push   eax
c0014ca2:	56                   	push   esi
c0014ca3:	68 a4 ba 02 c0       	push   0xc002baa4
c0014ca8:	e8 38 dd ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014cad:	5a                   	pop    edx
c0014cae:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014cb3:	59                   	pop    ecx
c0014cb4:	68 b2 ba 02 c0       	push   0xc002bab2
c0014cb9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cbf:	e8 16 bf ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014cc4:	5f                   	pop    edi
c0014cc5:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014cca:	5d                   	pop    ebp
c0014ccb:	56                   	push   esi
c0014ccc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd2:	e8 03 bf ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014cd7:	58                   	pop    eax
c0014cd8:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014cdd:	5a                   	pop    edx
c0014cde:	68 be ba 02 c0       	push   0xc002babe
c0014ce3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ce9:	e8 ec be ff ff       	call   c0010bda <VgaText::puts(char const*)>
c0014cee:	59                   	pop    ecx
c0014cef:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0014cf4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014cfa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014cfd:	e8 bd 8a 00 00       	call   c001d7bf <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014d02:	5b                   	pop    ebx
c0014d03:	5d                   	pop    ebp
c0014d04:	50                   	push   eax
c0014d05:	57                   	push   edi
c0014d06:	e8 89 be ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c0014d0b:	58                   	pop    eax
c0014d0c:	5a                   	pop    edx
c0014d0d:	56                   	push   esi
c0014d0e:	68 ca ba 02 c0       	push   0xc002baca
c0014d13:	e8 cd dc ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014d18:	83 c4 10             	add    esp,0x10
c0014d1b:	fa                   	cli    
c0014d1c:	f4                   	hlt    
c0014d1d:	eb fe                	jmp    c0014d1d <displayDebugInfo(regs*)+0x48d>

c0014d1f <x87EmulHandler(regs*, void*)>:
c0014d1f:	83 ec 0c             	sub    esp,0xc
c0014d22:	0f 20 c2             	mov    edx,cr0
c0014d25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d2a:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014d2e:	75 4b                	jne    c0014d7b <x87EmulHandler(regs*, void*)+0x5c>
c0014d30:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0014d35:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014d3b:	85 c0                	test   eax,eax
c0014d3d:	74 05                	je     c0014d44 <x87EmulHandler(regs*, void*)+0x25>
c0014d3f:	83 e2 08             	and    edx,0x8
c0014d42:	75 17                	jne    c0014d5b <x87EmulHandler(regs*, void*)+0x3c>
c0014d44:	83 ec 0c             	sub    esp,0xc
c0014d47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d4b:	e8 2f af 00 00       	call   c001fc7f <Vm::x87Handler(regs*)>
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	84 c0                	test   al,al
c0014d55:	74 24                	je     c0014d7b <x87EmulHandler(regs*, void*)+0x5c>
c0014d57:	83 c4 0c             	add    esp,0xc
c0014d5a:	c3                   	ret    
c0014d5b:	83 ec 0c             	sub    esp,0xc
c0014d5e:	68 f0 ba 02 c0       	push   0xc002baf0
c0014d63:	e8 7d dc ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014d68:	0f 06                	clts   
c0014d6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d6f:	83 c4 10             	add    esp,0x10
c0014d72:	a3 e8 f3 02 c0       	mov    ds:0xc002f3e8,eax
c0014d77:	83 c4 0c             	add    esp,0xc
c0014d7a:	c3                   	ret    
c0014d7b:	83 ec 0c             	sub    esp,0xc
c0014d7e:	68 da ba 02 c0       	push   0xc002bada
c0014d83:	e8 5d dc ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014d88:	5a                   	pop    edx
c0014d89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d8d:	e8 fe fa ff ff       	call   c0014890 <displayDebugInfo(regs*)>

c0014d92 <gpFault(regs*, void*)>:
c0014d92:	53                   	push   ebx
c0014d93:	83 ec 14             	sub    esp,0x14
c0014d96:	c7 05 e4 f3 02 c0 58 f1 01 c0 	mov    DWORD PTR ds:0xc002f3e4,0xc001f158
c0014da0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014da4:	53                   	push   ebx
c0014da5:	e8 ae a3 00 00       	call   c001f158 <Vm::faultHandler(regs*)>
c0014daa:	83 c4 10             	add    esp,0x10
c0014dad:	84 c0                	test   al,al
c0014daf:	74 05                	je     c0014db6 <gpFault(regs*, void*)+0x24>
c0014db1:	83 c4 08             	add    esp,0x8
c0014db4:	5b                   	pop    ebx
c0014db5:	c3                   	ret    
c0014db6:	83 ec 0c             	sub    esp,0xc
c0014db9:	68 fd ba 02 c0       	push   0xc002bafd
c0014dbe:	e8 22 dc ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014dc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014dc6:	e8 c5 fa ff ff       	call   c0014890 <displayDebugInfo(regs*)>

c0014dcb <pgFault(regs*, void*)>:
c0014dcb:	83 ec 18             	sub    esp,0x18
c0014dce:	68 18 bb 02 c0       	push   0xc002bb18
c0014dd3:	e8 0d dc ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014dd8:	58                   	pop    eax
c0014dd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ddd:	e8 ae fa ff ff       	call   c0014890 <displayDebugInfo(regs*)>

c0014de2 <otherISRHandler(regs*, void*)>:
c0014de2:	53                   	push   ebx
c0014de3:	83 ec 0c             	sub    esp,0xc
c0014de6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014dea:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ded:	50                   	push   eax
c0014dee:	50                   	push   eax
c0014def:	68 25 bb 02 c0       	push   0xc002bb25
c0014df4:	e8 ec db ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014df9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014dfc:	e8 8f fa ff ff       	call   c0014890 <displayDebugInfo(regs*)>

c0014e01 <opcodeFault(regs*, void*)>:
c0014e01:	55                   	push   ebp
c0014e02:	89 e5                	mov    ebp,esp
c0014e04:	56                   	push   esi
c0014e05:	53                   	push   ebx
c0014e06:	83 ec 40             	sub    esp,0x40
c0014e09:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0014e0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014e14:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014e1a:	84 c0                	test   al,al
c0014e1c:	74 24                	je     c0014e42 <opcodeFault(regs*, void*)+0x41>
c0014e1e:	83 ec 0c             	sub    esp,0xc
c0014e21:	68 44 bb 02 c0       	push   0xc002bb44
c0014e26:	e8 ba db ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014e2b:	83 c4 10             	add    esp,0x10
c0014e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e31:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e34:	8d 50 19             	lea    edx,[eax+0x19]
c0014e37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e3d:	e9 d5 05 00 00       	jmp    c0015417 <opcodeFault(regs*, void*)+0x616>
c0014e42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e45:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e48:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014e4b:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014e4f:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e56:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e59:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014e5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e61:	3c f0                	cmp    al,0xf0
c0014e63:	75 17                	jne    c0014e7c <opcodeFault(regs*, void*)+0x7b>
c0014e65:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e6e:	8d 50 01             	lea    edx,[eax+0x1]
c0014e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e74:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e77:	e9 da 00 00 00       	jmp    c0014f56 <opcodeFault(regs*, void*)+0x155>
c0014e7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e7f:	8a 00                	mov    al,BYTE PTR [eax]
c0014e81:	3c f2                	cmp    al,0xf2
c0014e83:	74 09                	je     c0014e8e <opcodeFault(regs*, void*)+0x8d>
c0014e85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e88:	8a 00                	mov    al,BYTE PTR [eax]
c0014e8a:	3c f3                	cmp    al,0xf3
c0014e8c:	75 1b                	jne    c0014ea9 <opcodeFault(regs*, void*)+0xa8>
c0014e8e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e92:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e98:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e9b:	8d 50 01             	lea    edx,[eax+0x1]
c0014e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ea4:	e9 ad 00 00 00       	jmp    c0014f56 <opcodeFault(regs*, void*)+0x155>
c0014ea9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eac:	8a 00                	mov    al,BYTE PTR [eax]
c0014eae:	3c 66                	cmp    al,0x66
c0014eb0:	75 1f                	jne    c0014ed1 <opcodeFault(regs*, void*)+0xd0>
c0014eb2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014eb6:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014eba:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ec3:	8d 50 01             	lea    edx,[eax+0x1]
c0014ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ecc:	e9 85 00 00 00       	jmp    c0014f56 <opcodeFault(regs*, void*)+0x155>
c0014ed1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed6:	3c 67                	cmp    al,0x67
c0014ed8:	75 18                	jne    c0014ef2 <opcodeFault(regs*, void*)+0xf1>
c0014eda:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ede:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ee7:	8d 50 01             	lea    edx,[eax+0x1]
c0014eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef0:	eb 64                	jmp    c0014f56 <opcodeFault(regs*, void*)+0x155>
c0014ef2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ef5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ef7:	3c 2e                	cmp    al,0x2e
c0014ef9:	74 09                	je     c0014f04 <opcodeFault(regs*, void*)+0x103>
c0014efb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014efe:	8a 00                	mov    al,BYTE PTR [eax]
c0014f00:	3c 3e                	cmp    al,0x3e
c0014f02:	75 18                	jne    c0014f1c <opcodeFault(regs*, void*)+0x11b>
c0014f04:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f08:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f0e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f11:	8d 50 01             	lea    edx,[eax+0x1]
c0014f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f17:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f1a:	eb 3a                	jmp    c0014f56 <opcodeFault(regs*, void*)+0x155>
c0014f1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f1f:	8a 00                	mov    al,BYTE PTR [eax]
c0014f21:	3c 36                	cmp    al,0x36
c0014f23:	74 1b                	je     c0014f40 <opcodeFault(regs*, void*)+0x13f>
c0014f25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f28:	8a 00                	mov    al,BYTE PTR [eax]
c0014f2a:	3c 26                	cmp    al,0x26
c0014f2c:	74 12                	je     c0014f40 <opcodeFault(regs*, void*)+0x13f>
c0014f2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f31:	8a 00                	mov    al,BYTE PTR [eax]
c0014f33:	3c 64                	cmp    al,0x64
c0014f35:	74 09                	je     c0014f40 <opcodeFault(regs*, void*)+0x13f>
c0014f37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014f3c:	3c 65                	cmp    al,0x65
c0014f3e:	75 16                	jne    c0014f56 <opcodeFault(regs*, void*)+0x155>
c0014f40:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014f44:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f4d:	8d 50 01             	lea    edx,[eax+0x1]
c0014f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f53:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f59:	8a 00                	mov    al,BYTE PTR [eax]
c0014f5b:	3c 0f                	cmp    al,0xf
c0014f5d:	0f 85 ad 00 00 00    	jne    c0015010 <opcodeFault(regs*, void*)+0x20f>
c0014f63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f66:	40                   	inc    eax
c0014f67:	8a 00                	mov    al,BYTE PTR [eax]
c0014f69:	3c c2                	cmp    al,0xc2
c0014f6b:	74 0e                	je     c0014f7b <opcodeFault(regs*, void*)+0x17a>
c0014f6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f70:	40                   	inc    eax
c0014f71:	8a 00                	mov    al,BYTE PTR [eax]
c0014f73:	3c c3                	cmp    al,0xc3
c0014f75:	0f 85 95 00 00 00    	jne    c0015010 <opcodeFault(regs*, void*)+0x20f>
c0014f7b:	83 ec 0c             	sub    esp,0xc
c0014f7e:	68 67 bb 02 c0       	push   0xc002bb67
c0014f83:	e8 5d da ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0014f88:	83 c4 10             	add    esp,0x10
c0014f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f91:	8d 50 01             	lea    edx,[eax+0x1]
c0014f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f97:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f9a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f9d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa0:	8a 00                	mov    al,BYTE PTR [eax]
c0014fa2:	8d 50 fe             	lea    edx,[eax-0x2]
c0014fa5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fa8:	88 10                	mov    BYTE PTR [eax],dl
c0014faa:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014fad:	50                   	push   eax
c0014fae:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014fb1:	50                   	push   eax
c0014fb2:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014fb5:	50                   	push   eax
c0014fb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fb9:	e8 14 4b 00 00       	call   c0019ad2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014fbe:	83 c4 10             	add    esp,0x10
c0014fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fc7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014fca:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014fcd:	01 d0                	add    eax,edx
c0014fcf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fd8:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014fdb:	48                   	dec    eax
c0014fdc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014fe5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014feb:	83 ec 04             	sub    esp,0x4
c0014fee:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ff1:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014ff4:	50                   	push   eax
c0014ff5:	e8 ba b1 fe ff       	call   c00001b4 <voodooXADD>
c0014ffa:	83 c4 10             	add    esp,0x10
c0014ffd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015000:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015003:	01 c2                	add    edx,eax
c0015005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015008:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001500b:	e9 07 04 00 00       	jmp    c0015417 <opcodeFault(regs*, void*)+0x616>
c0015010:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015013:	8a 00                	mov    al,BYTE PTR [eax]
c0015015:	3c 0f                	cmp    al,0xf
c0015017:	0f 85 8b 01 00 00    	jne    c00151a8 <opcodeFault(regs*, void*)+0x3a7>
c001501d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015020:	40                   	inc    eax
c0015021:	8a 00                	mov    al,BYTE PTR [eax]
c0015023:	3c c7                	cmp    al,0xc7
c0015025:	0f 86 7d 01 00 00    	jbe    c00151a8 <opcodeFault(regs*, void*)+0x3a7>
c001502b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001502e:	40                   	inc    eax
c001502f:	8a 00                	mov    al,BYTE PTR [eax]
c0015031:	3c cf                	cmp    al,0xcf
c0015033:	0f 87 6f 01 00 00    	ja     c00151a8 <opcodeFault(regs*, void*)+0x3a7>
c0015039:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001503c:	40                   	inc    eax
c001503d:	8a 00                	mov    al,BYTE PTR [eax]
c001503f:	83 c0 38             	add    eax,0x38
c0015042:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015045:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015049:	75 0b                	jne    c0015056 <opcodeFault(regs*, void*)+0x255>
c001504b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504e:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015051:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015054:	eb 75                	jmp    c00150cb <opcodeFault(regs*, void*)+0x2ca>
c0015056:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001505a:	75 0b                	jne    c0015067 <opcodeFault(regs*, void*)+0x266>
c001505c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015062:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015065:	eb 64                	jmp    c00150cb <opcodeFault(regs*, void*)+0x2ca>
c0015067:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001506b:	75 0b                	jne    c0015078 <opcodeFault(regs*, void*)+0x277>
c001506d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015070:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015073:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015076:	eb 53                	jmp    c00150cb <opcodeFault(regs*, void*)+0x2ca>
c0015078:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001507c:	75 0b                	jne    c0015089 <opcodeFault(regs*, void*)+0x288>
c001507e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015081:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015084:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015087:	eb 42                	jmp    c00150cb <opcodeFault(regs*, void*)+0x2ca>
c0015089:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001508d:	75 0b                	jne    c001509a <opcodeFault(regs*, void*)+0x299>
c001508f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015092:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015095:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015098:	eb 31                	jmp    c00150cb <opcodeFault(regs*, void*)+0x2ca>
c001509a:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001509e:	75 0b                	jne    c00150ab <opcodeFault(regs*, void*)+0x2aa>
c00150a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00150a6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150a9:	eb 20                	jmp    c00150cb <opcodeFault(regs*, void*)+0x2ca>
c00150ab:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00150af:	75 0b                	jne    c00150bc <opcodeFault(regs*, void*)+0x2bb>
c00150b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00150b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150ba:	eb 0f                	jmp    c00150cb <opcodeFault(regs*, void*)+0x2ca>
c00150bc:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00150c0:	75 09                	jne    c00150cb <opcodeFault(regs*, void*)+0x2ca>
c00150c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00150c8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00150cb:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00150cf:	74 10                	je     c00150e1 <opcodeFault(regs*, void*)+0x2e0>
c00150d1:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00150d8:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00150df:	eb 2d                	jmp    c001510e <opcodeFault(regs*, void*)+0x30d>
c00150e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00150e4:	c1 e0 18             	shl    eax,0x18
c00150e7:	89 c2                	mov    edx,eax
c00150e9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00150ec:	c1 e0 08             	shl    eax,0x8
c00150ef:	25 00 00 ff 00       	and    eax,0xff0000
c00150f4:	09 c2                	or     edx,eax
c00150f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00150f9:	c1 e8 08             	shr    eax,0x8
c00150fc:	25 00 ff 00 00       	and    eax,0xff00
c0015101:	09 c2                	or     edx,eax
c0015103:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015106:	c1 e8 18             	shr    eax,0x18
c0015109:	09 d0                	or     eax,edx
c001510b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001510e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015112:	75 0b                	jne    c001511f <opcodeFault(regs*, void*)+0x31e>
c0015114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015117:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001511a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001511d:	eb 75                	jmp    c0015194 <opcodeFault(regs*, void*)+0x393>
c001511f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015123:	75 0b                	jne    c0015130 <opcodeFault(regs*, void*)+0x32f>
c0015125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015128:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001512b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001512e:	eb 64                	jmp    c0015194 <opcodeFault(regs*, void*)+0x393>
c0015130:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015134:	75 0b                	jne    c0015141 <opcodeFault(regs*, void*)+0x340>
c0015136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015139:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001513c:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001513f:	eb 53                	jmp    c0015194 <opcodeFault(regs*, void*)+0x393>
c0015141:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015145:	75 0b                	jne    c0015152 <opcodeFault(regs*, void*)+0x351>
c0015147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001514d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015150:	eb 42                	jmp    c0015194 <opcodeFault(regs*, void*)+0x393>
c0015152:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015156:	75 0b                	jne    c0015163 <opcodeFault(regs*, void*)+0x362>
c0015158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001515e:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015161:	eb 31                	jmp    c0015194 <opcodeFault(regs*, void*)+0x393>
c0015163:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015167:	75 0b                	jne    c0015174 <opcodeFault(regs*, void*)+0x373>
c0015169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001516f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015172:	eb 20                	jmp    c0015194 <opcodeFault(regs*, void*)+0x393>
c0015174:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015178:	75 0b                	jne    c0015185 <opcodeFault(regs*, void*)+0x384>
c001517a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015180:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015183:	eb 0f                	jmp    c0015194 <opcodeFault(regs*, void*)+0x393>
c0015185:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015189:	75 09                	jne    c0015194 <opcodeFault(regs*, void*)+0x393>
c001518b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015191:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015194:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015197:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001519a:	8d 50 02             	lea    edx,[eax+0x2]
c001519d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151a3:	e9 6f 02 00 00       	jmp    c0015417 <opcodeFault(regs*, void*)+0x616>
c00151a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ab:	8a 00                	mov    al,BYTE PTR [eax]
c00151ad:	3c 0f                	cmp    al,0xf
c00151af:	0f 85 8d 01 00 00    	jne    c0015342 <opcodeFault(regs*, void*)+0x541>
c00151b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151b8:	40                   	inc    eax
c00151b9:	8a 00                	mov    al,BYTE PTR [eax]
c00151bb:	3c c7                	cmp    al,0xc7
c00151bd:	0f 85 7f 01 00 00    	jne    c0015342 <opcodeFault(regs*, void*)+0x541>
c00151c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00151c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151cc:	8d 50 01             	lea    edx,[eax+0x1]
c00151cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151d5:	8d 45 ba             	lea    eax,[ebp-0x46]
c00151d8:	50                   	push   eax
c00151d9:	8d 45 bb             	lea    eax,[ebp-0x45]
c00151dc:	50                   	push   eax
c00151dd:	8d 45 bc             	lea    eax,[ebp-0x44]
c00151e0:	50                   	push   eax
c00151e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151e4:	e8 e9 48 00 00       	call   c0019ad2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00151ef:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00151f2:	83 f0 01             	xor    eax,0x1
c00151f5:	84 c0                	test   al,al
c00151f7:	0f 84 45 01 00 00    	je     c0015342 <opcodeFault(regs*, void*)+0x541>
c00151fd:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015200:	3c 01                	cmp    al,0x1
c0015202:	0f 85 3a 01 00 00    	jne    c0015342 <opcodeFault(regs*, void*)+0x541>
c0015208:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001520b:	83 f0 01             	xor    eax,0x1
c001520e:	84 c0                	test   al,al
c0015210:	0f 84 2c 01 00 00    	je     c0015342 <opcodeFault(regs*, void*)+0x541>
c0015216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015219:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001521c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001521f:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015226:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015229:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001522c:	89 c2                	mov    edx,eax
c001522e:	b8 00 00 00 00       	mov    eax,0x0
c0015233:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015236:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001523f:	ba 00 00 00 00       	mov    edx,0x0
c0015244:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015247:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001524a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015250:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015253:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001525a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001525d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015260:	89 c2                	mov    edx,eax
c0015262:	b8 00 00 00 00       	mov    eax,0x0
c0015267:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001526a:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c001526d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015270:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015273:	ba 00 00 00 00       	mov    edx,0x0
c0015278:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001527b:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c001527e:	fa                   	cli    
c001527f:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0015284:	40                   	inc    eax
c0015285:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001528a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001528d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015290:	8b 00                	mov    eax,DWORD PTR [eax]
c0015292:	89 c1                	mov    ecx,eax
c0015294:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015297:	89 cb                	mov    ebx,ecx
c0015299:	89 d0                	mov    eax,edx
c001529b:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001529e:	89 c6                	mov    esi,eax
c00152a0:	89 f0                	mov    eax,esi
c00152a2:	09 d8                	or     eax,ebx
c00152a4:	85 c0                	test   eax,eax
c00152a6:	75 21                	jne    c00152c9 <opcodeFault(regs*, void*)+0x4c8>
c00152a8:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00152ab:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00152ae:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00152b1:	89 01                	mov    DWORD PTR [ecx],eax
c00152b3:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00152b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152bc:	83 c8 40             	or     eax,0x40
c00152bf:	89 c2                	mov    edx,eax
c00152c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c4:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00152c7:	eb 3e                	jmp    c0015307 <opcodeFault(regs*, void*)+0x506>
c00152c9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00152cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00152cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00152d4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00152d7:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00152da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152dd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00152e0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00152e3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00152e6:	89 d0                	mov    eax,edx
c00152e8:	31 d2                	xor    edx,edx
c00152ea:	89 c3                	mov    ebx,eax
c00152ec:	89 d6                	mov    esi,edx
c00152ee:	89 da                	mov    edx,ebx
c00152f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f3:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00152f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152fc:	83 e0 bf             	and    eax,0xffffffbf
c00152ff:	89 c2                	mov    edx,eax
c0015301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015304:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015307:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001530c:	48                   	dec    eax
c001530d:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c0015312:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0015317:	85 c0                	test   eax,eax
c0015319:	75 01                	jne    c001531c <opcodeFault(regs*, void*)+0x51b>
c001531b:	fb                   	sti    
c001531c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015322:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015325:	01 c2                	add    edx,eax
c0015327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001532d:	83 ec 0c             	sub    esp,0xc
c0015330:	68 76 bb 02 c0       	push   0xc002bb76
c0015335:	e8 ab d6 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001533a:	83 c4 10             	add    esp,0x10
c001533d:	e9 d5 00 00 00       	jmp    c0015417 <opcodeFault(regs*, void*)+0x616>
c0015342:	83 ec 0c             	sub    esp,0xc
c0015345:	68 89 bb 02 c0       	push   0xc002bb89
c001534a:	e8 96 d6 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001534f:	83 c4 10             	add    esp,0x10
c0015352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015355:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001535e:	c1 e0 04             	shl    eax,0x4
c0015361:	01 d0                	add    eax,edx
c0015363:	83 c0 03             	add    eax,0x3
c0015366:	8a 00                	mov    al,BYTE PTR [eax]
c0015368:	0f b6 d8             	movzx  ebx,al
c001536b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015374:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015377:	c1 e0 04             	shl    eax,0x4
c001537a:	01 d0                	add    eax,edx
c001537c:	83 c0 02             	add    eax,0x2
c001537f:	8a 00                	mov    al,BYTE PTR [eax]
c0015381:	0f b6 c8             	movzx  ecx,al
c0015384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015387:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001538a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015390:	c1 e0 04             	shl    eax,0x4
c0015393:	01 d0                	add    eax,edx
c0015395:	40                   	inc    eax
c0015396:	8a 00                	mov    al,BYTE PTR [eax]
c0015398:	0f b6 d0             	movzx  edx,al
c001539b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001539e:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00153a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153a7:	c1 e0 04             	shl    eax,0x4
c00153aa:	01 f0                	add    eax,esi
c00153ac:	8a 00                	mov    al,BYTE PTR [eax]
c00153ae:	0f b6 c0             	movzx  eax,al
c00153b1:	83 ec 0c             	sub    esp,0xc
c00153b4:	53                   	push   ebx
c00153b5:	51                   	push   ecx
c00153b6:	52                   	push   edx
c00153b7:	50                   	push   eax
c00153b8:	68 9c bb 02 c0       	push   0xc002bb9c
c00153bd:	e8 23 d6 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00153c2:	83 c4 20             	add    esp,0x20
c00153c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153cb:	83 c0 03             	add    eax,0x3
c00153ce:	8a 00                	mov    al,BYTE PTR [eax]
c00153d0:	0f b6 d8             	movzx  ebx,al
c00153d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153d9:	83 c0 02             	add    eax,0x2
c00153dc:	8a 00                	mov    al,BYTE PTR [eax]
c00153de:	0f b6 c8             	movzx  ecx,al
c00153e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153e7:	40                   	inc    eax
c00153e8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ea:	0f b6 d0             	movzx  edx,al
c00153ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f3:	8a 00                	mov    al,BYTE PTR [eax]
c00153f5:	0f b6 c0             	movzx  eax,al
c00153f8:	83 ec 0c             	sub    esp,0xc
c00153fb:	53                   	push   ebx
c00153fc:	51                   	push   ecx
c00153fd:	52                   	push   edx
c00153fe:	50                   	push   eax
c00153ff:	68 c4 bb 02 c0       	push   0xc002bbc4
c0015404:	e8 dc d5 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0015409:	83 c4 20             	add    esp,0x20
c001540c:	83 ec 0c             	sub    esp,0xc
c001540f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015412:	e8 79 f4 ff ff       	call   c0014890 <displayDebugInfo(regs*)>
c0015417:	8d 65 f8             	lea    esp,[ebp-0x8]
c001541a:	5b                   	pop    ebx
c001541b:	5e                   	pop    esi
c001541c:	5d                   	pop    ebp
c001541d:	c3                   	ret    

c001541e <displayProgramFault(char const*)>:
c001541e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015423:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015426:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001542c:	85 c0                	test   eax,eax
c001542e:	74 15                	je     c0015445 <displayProgramFault(char const*)+0x27>
c0015430:	83 ec 0c             	sub    esp,0xc
c0015433:	6a 04                	push   0x4
c0015435:	6a 0f                	push   0xf
c0015437:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001543b:	50                   	push   eax
c001543c:	e8 95 b4 ff ff       	call   c00108d6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015441:	83 c4 1c             	add    esp,0x1c
c0015444:	c3                   	ret    
c0015445:	c3                   	ret    

c0015446 <setupInterruptController()>:
c0015446:	55                   	push   ebp
c0015447:	89 e5                	mov    ebp,esp
c0015449:	53                   	push   ebx
c001544a:	83 ec 24             	sub    esp,0x24
c001544d:	b8 00 00 00 00       	mov    eax,0x0
c0015452:	85 c0                	test   eax,eax
c0015454:	0f 95 c0             	setne  al
c0015457:	84 c0                	test   al,al
c0015459:	74 5b                	je     c00154b6 <setupInterruptController()+0x70>
c001545b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015462:	83 ec 0c             	sub    esp,0xc
c0015465:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015468:	e8 95 a4 ff ff       	call   c000f902 <malloc>
c001546d:	83 c4 10             	add    esp,0x10
c0015470:	89 c3                	mov    ebx,eax
c0015472:	83 ec 0c             	sub    esp,0xc
c0015475:	53                   	push   ebx
c0015476:	e8 f3 0d 01 00       	call   c002626e <APIC::APIC()>
c001547b:	83 c4 10             	add    esp,0x10
c001547e:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015481:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015484:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015487:	8b 00                	mov    eax,DWORD PTR [eax]
c0015489:	83 c0 08             	add    eax,0x8
c001548c:	8b 00                	mov    eax,DWORD PTR [eax]
c001548e:	6a 00                	push   0x0
c0015490:	6a 00                	push   0x0
c0015492:	6a 00                	push   0x0
c0015494:	52                   	push   edx
c0015495:	ff d0                	call   eax
c0015497:	83 c4 10             	add    esp,0x10
c001549a:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001549f:	83 ec 08             	sub    esp,0x8
c00154a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00154a5:	50                   	push   eax
c00154a6:	e8 73 e9 ff ff       	call   c0013e1e <Device::addChild(Device*)>
c00154ab:	83 c4 10             	add    esp,0x10
c00154ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00154b1:	e9 89 03 00 00       	jmp    c001583f <setupInterruptController()+0x3f9>
c00154b6:	a0 e0 1b 03 c0       	mov    al,ds:0xc0031be0
c00154bb:	84 c0                	test   al,al
c00154bd:	75 24                	jne    c00154e3 <setupInterruptController()+0x9d>
c00154bf:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00154c4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00154ca:	83 e2 fe             	and    edx,0xfffffffe
c00154cd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00154d3:	83 ec 0c             	sub    esp,0xc
c00154d6:	68 e9 bb 02 c0       	push   0xc002bbe9
c00154db:	e8 05 d5 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00154e0:	83 c4 10             	add    esp,0x10
c00154e3:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00154e8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00154ee:	83 e0 01             	and    eax,0x1
c00154f1:	84 c0                	test   al,al
c00154f3:	0f 95 c0             	setne  al
c00154f6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00154f9:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015500:	83 ec 0c             	sub    esp,0xc
c0015503:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015506:	e8 f7 a3 ff ff       	call   c000f902 <malloc>
c001550b:	83 c4 10             	add    esp,0x10
c001550e:	89 c3                	mov    ebx,eax
c0015510:	83 ec 0c             	sub    esp,0xc
c0015513:	53                   	push   ebx
c0015514:	e8 ad 12 01 00       	call   c00267c6 <PIC::PIC()>
c0015519:	83 c4 10             	add    esp,0x10
c001551c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001551f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015522:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015525:	8b 00                	mov    eax,DWORD PTR [eax]
c0015527:	83 c0 08             	add    eax,0x8
c001552a:	8b 00                	mov    eax,DWORD PTR [eax]
c001552c:	6a 00                	push   0x0
c001552e:	6a 00                	push   0x0
c0015530:	6a 00                	push   0x0
c0015532:	52                   	push   edx
c0015533:	ff d0                	call   eax
c0015535:	83 c4 10             	add    esp,0x10
c0015538:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001553c:	74 73                	je     c00155b1 <setupInterruptController()+0x16b>
c001553e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015541:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015544:	8b 00                	mov    eax,DWORD PTR [eax]
c0015546:	83 c0 0c             	add    eax,0xc
c0015549:	8b 00                	mov    eax,DWORD PTR [eax]
c001554b:	6a 00                	push   0x0
c001554d:	6a 00                	push   0x0
c001554f:	6a 00                	push   0x0
c0015551:	52                   	push   edx
c0015552:	ff d0                	call   eax
c0015554:	83 c4 10             	add    esp,0x10
c0015557:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001555b:	74 15                	je     c0015572 <setupInterruptController()+0x12c>
c001555d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015560:	8b 00                	mov    eax,DWORD PTR [eax]
c0015562:	83 c0 04             	add    eax,0x4
c0015565:	8b 00                	mov    eax,DWORD PTR [eax]
c0015567:	83 ec 0c             	sub    esp,0xc
c001556a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001556d:	ff d0                	call   eax
c001556f:	83 c4 10             	add    esp,0x10
c0015572:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015579:	83 ec 0c             	sub    esp,0xc
c001557c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001557f:	e8 7e a3 ff ff       	call   c000f902 <malloc>
c0015584:	83 c4 10             	add    esp,0x10
c0015587:	89 c3                	mov    ebx,eax
c0015589:	83 ec 0c             	sub    esp,0xc
c001558c:	53                   	push   ebx
c001558d:	e8 dc 0c 01 00       	call   c002626e <APIC::APIC()>
c0015592:	83 c4 10             	add    esp,0x10
c0015595:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015598:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001559b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001559e:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a0:	83 c0 08             	add    eax,0x8
c00155a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a5:	6a 00                	push   0x0
c00155a7:	6a 00                	push   0x0
c00155a9:	6a 00                	push   0x0
c00155ab:	52                   	push   edx
c00155ac:	ff d0                	call   eax
c00155ae:	83 c4 10             	add    esp,0x10
c00155b1:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00155b6:	83 ec 08             	sub    esp,0x8
c00155b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155bc:	50                   	push   eax
c00155bd:	e8 5c e8 ff ff       	call   c0013e1e <Device::addChild(Device*)>
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	c7 05 e8 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f3e8,0x0
c00155cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d4:	83 c0 24             	add    eax,0x24
c00155d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d9:	6a 00                	push   0x0
c00155db:	68 e2 4d 01 c0       	push   0xc0014de2
c00155e0:	6a 00                	push   0x0
c00155e2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155e5:	ff d0                	call   eax
c00155e7:	83 c4 10             	add    esp,0x10
c00155ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ef:	83 c0 24             	add    eax,0x24
c00155f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f4:	6a 00                	push   0x0
c00155f6:	68 e2 4d 01 c0       	push   0xc0014de2
c00155fb:	6a 01                	push   0x1
c00155fd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015600:	ff d0                	call   eax
c0015602:	83 c4 10             	add    esp,0x10
c0015605:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015608:	8b 00                	mov    eax,DWORD PTR [eax]
c001560a:	83 c0 24             	add    eax,0x24
c001560d:	8b 00                	mov    eax,DWORD PTR [eax]
c001560f:	6a 00                	push   0x0
c0015611:	68 ed 46 01 c0       	push   0xc00146ed
c0015616:	6a 02                	push   0x2
c0015618:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001561b:	ff d0                	call   eax
c001561d:	83 c4 10             	add    esp,0x10
c0015620:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015623:	8b 00                	mov    eax,DWORD PTR [eax]
c0015625:	83 c0 24             	add    eax,0x24
c0015628:	8b 00                	mov    eax,DWORD PTR [eax]
c001562a:	6a 00                	push   0x0
c001562c:	68 e2 4d 01 c0       	push   0xc0014de2
c0015631:	6a 03                	push   0x3
c0015633:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015636:	ff d0                	call   eax
c0015638:	83 c4 10             	add    esp,0x10
c001563b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001563e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015640:	83 c0 24             	add    eax,0x24
c0015643:	8b 00                	mov    eax,DWORD PTR [eax]
c0015645:	6a 00                	push   0x0
c0015647:	68 e2 4d 01 c0       	push   0xc0014de2
c001564c:	6a 04                	push   0x4
c001564e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015651:	ff d0                	call   eax
c0015653:	83 c4 10             	add    esp,0x10
c0015656:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015659:	8b 00                	mov    eax,DWORD PTR [eax]
c001565b:	83 c0 24             	add    eax,0x24
c001565e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015660:	6a 00                	push   0x0
c0015662:	68 e2 4d 01 c0       	push   0xc0014de2
c0015667:	6a 05                	push   0x5
c0015669:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001566c:	ff d0                	call   eax
c001566e:	83 c4 10             	add    esp,0x10
c0015671:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015674:	8b 00                	mov    eax,DWORD PTR [eax]
c0015676:	83 c0 24             	add    eax,0x24
c0015679:	8b 00                	mov    eax,DWORD PTR [eax]
c001567b:	6a 00                	push   0x0
c001567d:	68 01 4e 01 c0       	push   0xc0014e01
c0015682:	6a 06                	push   0x6
c0015684:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015687:	ff d0                	call   eax
c0015689:	83 c4 10             	add    esp,0x10
c001568c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001568f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015691:	83 c0 24             	add    eax,0x24
c0015694:	8b 00                	mov    eax,DWORD PTR [eax]
c0015696:	6a 00                	push   0x0
c0015698:	68 1f 4d 01 c0       	push   0xc0014d1f
c001569d:	6a 07                	push   0x7
c001569f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156a2:	ff d0                	call   eax
c00156a4:	83 c4 10             	add    esp,0x10
c00156a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ac:	83 c0 24             	add    eax,0x24
c00156af:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b1:	6a 00                	push   0x0
c00156b3:	68 08 45 01 c0       	push   0xc0014508
c00156b8:	6a 08                	push   0x8
c00156ba:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156bd:	ff d0                	call   eax
c00156bf:	83 c4 10             	add    esp,0x10
c00156c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c7:	83 c0 24             	add    eax,0x24
c00156ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00156cc:	6a 00                	push   0x0
c00156ce:	68 e2 4d 01 c0       	push   0xc0014de2
c00156d3:	6a 09                	push   0x9
c00156d5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d8:	ff d0                	call   eax
c00156da:	83 c4 10             	add    esp,0x10
c00156dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e2:	83 c0 24             	add    eax,0x24
c00156e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00156e7:	6a 00                	push   0x0
c00156e9:	68 e2 4d 01 c0       	push   0xc0014de2
c00156ee:	6a 0a                	push   0xa
c00156f0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156f3:	ff d0                	call   eax
c00156f5:	83 c4 10             	add    esp,0x10
c00156f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fd:	83 c0 24             	add    eax,0x24
c0015700:	8b 00                	mov    eax,DWORD PTR [eax]
c0015702:	6a 00                	push   0x0
c0015704:	68 e2 4d 01 c0       	push   0xc0014de2
c0015709:	6a 0b                	push   0xb
c001570b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001570e:	ff d0                	call   eax
c0015710:	83 c4 10             	add    esp,0x10
c0015713:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015716:	8b 00                	mov    eax,DWORD PTR [eax]
c0015718:	83 c0 24             	add    eax,0x24
c001571b:	8b 00                	mov    eax,DWORD PTR [eax]
c001571d:	6a 00                	push   0x0
c001571f:	68 e2 4d 01 c0       	push   0xc0014de2
c0015724:	6a 0c                	push   0xc
c0015726:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015729:	ff d0                	call   eax
c001572b:	83 c4 10             	add    esp,0x10
c001572e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015731:	8b 00                	mov    eax,DWORD PTR [eax]
c0015733:	83 c0 24             	add    eax,0x24
c0015736:	8b 00                	mov    eax,DWORD PTR [eax]
c0015738:	6a 00                	push   0x0
c001573a:	68 92 4d 01 c0       	push   0xc0014d92
c001573f:	6a 0d                	push   0xd
c0015741:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015744:	ff d0                	call   eax
c0015746:	83 c4 10             	add    esp,0x10
c0015749:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001574c:	8b 00                	mov    eax,DWORD PTR [eax]
c001574e:	83 c0 24             	add    eax,0x24
c0015751:	8b 00                	mov    eax,DWORD PTR [eax]
c0015753:	6a 00                	push   0x0
c0015755:	68 cb 4d 01 c0       	push   0xc0014dcb
c001575a:	6a 0e                	push   0xe
c001575c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001575f:	ff d0                	call   eax
c0015761:	83 c4 10             	add    esp,0x10
c0015764:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015767:	8b 00                	mov    eax,DWORD PTR [eax]
c0015769:	83 c0 24             	add    eax,0x24
c001576c:	8b 00                	mov    eax,DWORD PTR [eax]
c001576e:	6a 00                	push   0x0
c0015770:	68 e2 4d 01 c0       	push   0xc0014de2
c0015775:	6a 0f                	push   0xf
c0015777:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001577a:	ff d0                	call   eax
c001577c:	83 c4 10             	add    esp,0x10
c001577f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015782:	8b 00                	mov    eax,DWORD PTR [eax]
c0015784:	83 c0 24             	add    eax,0x24
c0015787:	8b 00                	mov    eax,DWORD PTR [eax]
c0015789:	6a 00                	push   0x0
c001578b:	68 e2 4d 01 c0       	push   0xc0014de2
c0015790:	6a 10                	push   0x10
c0015792:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015795:	ff d0                	call   eax
c0015797:	83 c4 10             	add    esp,0x10
c001579a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001579d:	8b 00                	mov    eax,DWORD PTR [eax]
c001579f:	83 c0 24             	add    eax,0x24
c00157a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a4:	6a 00                	push   0x0
c00157a6:	68 e2 4d 01 c0       	push   0xc0014de2
c00157ab:	6a 11                	push   0x11
c00157ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157b0:	ff d0                	call   eax
c00157b2:	83 c4 10             	add    esp,0x10
c00157b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ba:	83 c0 24             	add    eax,0x24
c00157bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00157bf:	6a 00                	push   0x0
c00157c1:	68 e2 4d 01 c0       	push   0xc0014de2
c00157c6:	6a 12                	push   0x12
c00157c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157cb:	ff d0                	call   eax
c00157cd:	83 c4 10             	add    esp,0x10
c00157d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00157d5:	83 c0 24             	add    eax,0x24
c00157d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00157da:	6a 00                	push   0x0
c00157dc:	68 e2 4d 01 c0       	push   0xc0014de2
c00157e1:	6a 13                	push   0x13
c00157e3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157e6:	ff d0                	call   eax
c00157e8:	83 c4 10             	add    esp,0x10
c00157eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f0:	83 c0 24             	add    eax,0x24
c00157f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f5:	6a 00                	push   0x0
c00157f7:	68 e2 4d 01 c0       	push   0xc0014de2
c00157fc:	6a 14                	push   0x14
c00157fe:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015801:	ff d0                	call   eax
c0015803:	83 c4 10             	add    esp,0x10
c0015806:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015809:	8b 00                	mov    eax,DWORD PTR [eax]
c001580b:	83 c0 24             	add    eax,0x24
c001580e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015810:	6a 00                	push   0x0
c0015812:	68 e2 4d 01 c0       	push   0xc0014de2
c0015817:	6a 1e                	push   0x1e
c0015819:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001581c:	ff d0                	call   eax
c001581e:	83 c4 10             	add    esp,0x10
c0015821:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015824:	8b 00                	mov    eax,DWORD PTR [eax]
c0015826:	83 c0 24             	add    eax,0x24
c0015829:	8b 00                	mov    eax,DWORD PTR [eax]
c001582b:	6a 00                	push   0x0
c001582d:	68 fe c7 01 c0       	push   0xc001c7fe
c0015832:	6a 60                	push   0x60
c0015834:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015837:	ff d0                	call   eax
c0015839:	83 c4 10             	add    esp,0x10
c001583c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001583f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015842:	c9                   	leave  
c0015843:	c3                   	ret    

c0015844 <InterruptController::convertLegacyIRQNumber(int)>:
c0015844:	55                   	push   ebp
c0015845:	89 e5                	mov    ebp,esp
c0015847:	83 ec 08             	sub    esp,0x8
c001584a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584d:	83 ec 0c             	sub    esp,0xc
c0015850:	50                   	push   eax
c0015851:	e8 c8 e8 ff ff       	call   c001411e <Device::getName()>
c0015856:	83 c4 10             	add    esp,0x10
c0015859:	8a 00                	mov    al,BYTE PTR [eax]
c001585b:	3c 41                	cmp    al,0x41
c001585d:	0f 94 c0             	sete   al
c0015860:	84 c0                	test   al,al
c0015862:	74 28                	je     c001588c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015864:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015868:	7f 12                	jg     c001587c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001586a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001586d:	05 c0 e4 02 c0       	add    eax,0xc002e4c0
c0015872:	8a 00                	mov    al,BYTE PTR [eax]
c0015874:	0f b6 c0             	movzx  eax,al
c0015877:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001587a:	eb 10                	jmp    c001588c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001587c:	83 ec 0c             	sub    esp,0xc
c001587f:	68 d8 b8 02 c0       	push   0xc002b8d8
c0015884:	e8 7c 4b 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0015889:	83 c4 10             	add    esp,0x10
c001588c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001588f:	c9                   	leave  
c0015890:	c3                   	ret    
c0015891:	90                   	nop

c0015892 <startGUI(void*)>:
c0015892:	55                   	push   ebp
c0015893:	89 e5                	mov    ebp,esp
c0015895:	53                   	push   ebx
c0015896:	83 ec 04             	sub    esp,0x4
c0015899:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001589e:	48                   	dec    eax
c001589f:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c00158a4:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c00158a9:	85 c0                	test   eax,eax
c00158ab:	75 01                	jne    c00158ae <startGUI(void*)+0x1c>
c00158ad:	fb                   	sti    
c00158ae:	8b 1d 68 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f268
c00158b4:	83 ec 08             	sub    esp,0x8
c00158b7:	6a 01                	push   0x1
c00158b9:	68 4c bc 02 c0       	push   0xc002bc4c
c00158be:	e8 16 7f 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c00158c3:	83 c4 10             	add    esp,0x10
c00158c6:	83 ec 08             	sub    esp,0x8
c00158c9:	53                   	push   ebx
c00158ca:	50                   	push   eax
c00158cb:	e8 34 81 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c00158d0:	83 c4 10             	add    esp,0x10
c00158d3:	8b 1d 68 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f268
c00158d9:	83 ec 08             	sub    esp,0x8
c00158dc:	6a 01                	push   0x1
c00158de:	68 66 bc 02 c0       	push   0xc002bc66
c00158e3:	e8 f1 7e 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c00158e8:	83 c4 10             	add    esp,0x10
c00158eb:	83 ec 08             	sub    esp,0x8
c00158ee:	53                   	push   ebx
c00158ef:	50                   	push   eax
c00158f0:	e8 0f 81 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c00158f5:	83 c4 10             	add    esp,0x10
c00158f8:	90                   	nop
c00158f9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00158fc:	c9                   	leave  
c00158fd:	c3                   	ret    

c00158fe <startGUIVESA(void*)>:
c00158fe:	55                   	push   ebp
c00158ff:	89 e5                	mov    ebp,esp
c0015901:	53                   	push   ebx
c0015902:	83 ec 04             	sub    esp,0x4
c0015905:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001590a:	48                   	dec    eax
c001590b:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c0015910:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0015915:	85 c0                	test   eax,eax
c0015917:	75 01                	jne    c001591a <startGUIVESA(void*)+0x1c>
c0015919:	fb                   	sti    
c001591a:	8b 1d 68 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f268
c0015920:	83 ec 08             	sub    esp,0x8
c0015923:	6a 01                	push   0x1
c0015925:	68 80 bc 02 c0       	push   0xc002bc80
c001592a:	e8 aa 7e 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c001592f:	83 c4 10             	add    esp,0x10
c0015932:	83 ec 08             	sub    esp,0x8
c0015935:	53                   	push   ebx
c0015936:	50                   	push   eax
c0015937:	e8 c8 80 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	8b 1d 68 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f268
c0015945:	83 ec 08             	sub    esp,0x8
c0015948:	6a 01                	push   0x1
c001594a:	68 66 bc 02 c0       	push   0xc002bc66
c001594f:	e8 85 7e 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c0015954:	83 c4 10             	add    esp,0x10
c0015957:	83 ec 08             	sub    esp,0x8
c001595a:	53                   	push   ebx
c001595b:	50                   	push   eax
c001595c:	e8 a3 80 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c0015961:	83 c4 10             	add    esp,0x10
c0015964:	90                   	nop
c0015965:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015968:	c9                   	leave  
c0015969:	c3                   	ret    

c001596a <sendKeyToTerminal(unsigned char)>:
c001596a:	55                   	push   ebp
c001596b:	89 e5                	mov    ebp,esp
c001596d:	83 ec 28             	sub    esp,0x28
c0015970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015973:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015976:	a1 24 f3 02 c0       	mov    eax,ds:0xc002f324
c001597b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001597f:	83 ec 08             	sub    esp,0x8
c0015982:	52                   	push   edx
c0015983:	50                   	push   eax
c0015984:	e8 25 b4 ff ff       	call   c0010dae <VgaText::receiveKey(unsigned char)>
c0015989:	83 c4 10             	add    esp,0x10
c001598c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015990:	0f 85 8f 00 00 00    	jne    c0015a25 <sendKeyToTerminal(unsigned char)+0xbb>
c0015996:	fa                   	cli    
c0015997:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001599c:	40                   	inc    eax
c001599d:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c00159a2:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c00159a7:	40                   	inc    eax
c00159a8:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c00159ad:	a1 00 f4 02 c0       	mov    eax,ds:0xc002f400
c00159b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159b5:	c7 05 00 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f400,0x0
c00159bf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159c3:	74 1f                	je     c00159e4 <sendKeyToTerminal(unsigned char)+0x7a>
c00159c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00159cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159ce:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00159d1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00159d4:	83 ec 0c             	sub    esp,0xc
c00159d7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159da:	e8 9d 8c 00 00       	call   c001e67c <unblockTask(ThreadControlBlock*)>
c00159df:	83 c4 10             	add    esp,0x10
c00159e2:	eb db                	jmp    c00159bf <sendKeyToTerminal(unsigned char)+0x55>
c00159e4:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c00159e9:	48                   	dec    eax
c00159ea:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c00159ef:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c00159f4:	85 c0                	test   eax,eax
c00159f6:	75 18                	jne    c0015a10 <sendKeyToTerminal(unsigned char)+0xa6>
c00159f8:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c00159fd:	85 c0                	test   eax,eax
c00159ff:	74 0f                	je     c0015a10 <sendKeyToTerminal(unsigned char)+0xa6>
c0015a01:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c0015a0b:	e8 a8 87 00 00       	call   c001e1b8 <schedule()>
c0015a10:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0015a15:	48                   	dec    eax
c0015a16:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c0015a1b:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0015a20:	85 c0                	test   eax,eax
c0015a22:	75 01                	jne    c0015a25 <sendKeyToTerminal(unsigned char)+0xbb>
c0015a24:	fb                   	sti    
c0015a25:	90                   	nop
c0015a26:	c9                   	leave  
c0015a27:	c3                   	ret    

c0015a28 <sendKeyboardToken(KeyboardToken)>:
c0015a28:	55                   	push   ebp
c0015a29:	89 e5                	mov    ebp,esp
c0015a2b:	83 ec 18             	sub    esp,0x18
c0015a2e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a34:	0f b7 c0             	movzx  eax,ax
c0015a37:	83 f2 01             	xor    edx,0x1
c0015a3a:	88 90 20 f4 02 c0    	mov    BYTE PTR [eax-0x3ffd0be0],dl
c0015a40:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0015a45:	85 c0                	test   eax,eax
c0015a47:	74 24                	je     c0015a6d <sendKeyboardToken(KeyboardToken)+0x45>
c0015a49:	8b 0d 08 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f408
c0015a4f:	83 ec 04             	sub    esp,0x4
c0015a52:	68 20 f4 02 c0       	push   0xc002f420
c0015a57:	83 ec 08             	sub    esp,0x8
c0015a5a:	89 e2                	mov    edx,esp
c0015a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5f:	89 02                	mov    DWORD PTR [edx],eax
c0015a61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a64:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015a68:	ff d1                	call   ecx
c0015a6a:	83 c4 10             	add    esp,0x10
c0015a6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a70:	66 3d 03 02          	cmp    ax,0x203
c0015a74:	75 07                	jne    c0015a7d <sendKeyboardToken(KeyboardToken)+0x55>
c0015a76:	a0 20 f5 02 c0       	mov    al,ds:0xc002f520
c0015a7b:	84 c0                	test   al,al
c0015a7d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015a81:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015a84:	a0 28 f8 02 c0       	mov    al,ds:0xc002f828
c0015a89:	38 c2                	cmp    dl,al
c0015a8b:	74 1c                	je     c0015aa9 <sendKeyboardToken(KeyboardToken)+0x81>
c0015a8d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015a90:	a2 28 f8 02 c0       	mov    ds:0xc002f828,al
c0015a95:	a0 28 f8 02 c0       	mov    al,ds:0xc002f828
c0015a9a:	0f b6 c0             	movzx  eax,al
c0015a9d:	83 ec 0c             	sub    esp,0xc
c0015aa0:	50                   	push   eax
c0015aa1:	e8 60 a8 ff ff       	call   c0010306 <setTerminalScrollLock(bool)>
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015aac:	84 c0                	test   al,al
c0015aae:	0f 84 ae 00 00 00    	je     c0015b62 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015ab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab7:	66 3d 10 03          	cmp    ax,0x310
c0015abb:	75 06                	jne    c0015ac3 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015abd:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015ac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac6:	66 3d 11 03          	cmp    ax,0x311
c0015aca:	75 06                	jne    c0015ad2 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015acc:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad5:	66 3d 12 03          	cmp    ax,0x312
c0015ad9:	75 06                	jne    c0015ae1 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015adb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015ae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae4:	66 3d 13 03          	cmp    ax,0x313
c0015ae8:	75 06                	jne    c0015af0 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015aea:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af3:	66 3d 14 03          	cmp    ax,0x314
c0015af7:	75 06                	jne    c0015aff <sendKeyboardToken(KeyboardToken)+0xd7>
c0015af9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015aff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b02:	66 3d 15 03          	cmp    ax,0x315
c0015b06:	75 06                	jne    c0015b0e <sendKeyboardToken(KeyboardToken)+0xe6>
c0015b08:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b11:	66 3d 16 03          	cmp    ax,0x316
c0015b15:	75 06                	jne    c0015b1d <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b17:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b20:	66 3d 17 03          	cmp    ax,0x317
c0015b24:	75 06                	jne    c0015b2c <sendKeyboardToken(KeyboardToken)+0x104>
c0015b26:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b2f:	66 3d 18 03          	cmp    ax,0x318
c0015b33:	75 06                	jne    c0015b3b <sendKeyboardToken(KeyboardToken)+0x113>
c0015b35:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015b3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3e:	66 3d 19 03          	cmp    ax,0x319
c0015b42:	75 06                	jne    c0015b4a <sendKeyboardToken(KeyboardToken)+0x122>
c0015b44:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4d:	66 3d 1a 03          	cmp    ax,0x31a
c0015b51:	0f 85 c9 00 00 00    	jne    c0015c20 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b57:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015b5d:	e9 be 00 00 00       	jmp    c0015c20 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b65:	66 3d 10 03          	cmp    ax,0x310
c0015b69:	75 0a                	jne    c0015b75 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015b6b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015b71:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b78:	66 3d 11 03          	cmp    ax,0x311
c0015b7c:	75 0a                	jne    c0015b88 <sendKeyboardToken(KeyboardToken)+0x160>
c0015b7e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015b84:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8b:	66 3d 12 03          	cmp    ax,0x312
c0015b8f:	75 0a                	jne    c0015b9b <sendKeyboardToken(KeyboardToken)+0x173>
c0015b91:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015b97:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9e:	66 3d 13 03          	cmp    ax,0x313
c0015ba2:	75 0a                	jne    c0015bae <sendKeyboardToken(KeyboardToken)+0x186>
c0015ba4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015baa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb1:	66 3d 14 03          	cmp    ax,0x314
c0015bb5:	75 0a                	jne    c0015bc1 <sendKeyboardToken(KeyboardToken)+0x199>
c0015bb7:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015bbd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc4:	66 3d 15 03          	cmp    ax,0x315
c0015bc8:	75 0a                	jne    c0015bd4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015bca:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015bd0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bd7:	66 3d 16 03          	cmp    ax,0x316
c0015bdb:	75 0a                	jne    c0015be7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015bdd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015be3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015be7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bea:	66 3d 17 03          	cmp    ax,0x317
c0015bee:	75 0a                	jne    c0015bfa <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015bf0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015bf6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bfd:	66 3d 18 03          	cmp    ax,0x318
c0015c01:	75 0a                	jne    c0015c0d <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015c03:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015c09:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c10:	66 3d 19 03          	cmp    ax,0x319
c0015c14:	75 0a                	jne    c0015c20 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c16:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015c1c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c23:	66 3d 00 02          	cmp    ax,0x200
c0015c27:	75 2c                	jne    c0015c55 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c29:	a0 20 f8 02 c0       	mov    al,ds:0xc002f820
c0015c2e:	83 f0 01             	xor    eax,0x1
c0015c31:	84 c0                	test   al,al
c0015c33:	74 20                	je     c0015c55 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c35:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0015c3a:	6a 01                	push   0x1
c0015c3c:	6a 00                	push   0x0
c0015c3e:	68 92 58 01 c0       	push   0xc0015892
c0015c43:	50                   	push   eax
c0015c44:	e8 2b 83 00 00       	call   c001df74 <Process::createThread(void (*)(void*), void*, int)>
c0015c49:	83 c4 10             	add    esp,0x10
c0015c4c:	c6 05 20 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f820,0x1
c0015c53:	eb 33                	jmp    c0015c88 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c58:	66 3d 01 02          	cmp    ax,0x201
c0015c5c:	75 2a                	jne    c0015c88 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c5e:	a0 20 f8 02 c0       	mov    al,ds:0xc002f820
c0015c63:	83 f0 01             	xor    eax,0x1
c0015c66:	84 c0                	test   al,al
c0015c68:	74 1e                	je     c0015c88 <sendKeyboardToken(KeyboardToken)+0x260>
c0015c6a:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0015c6f:	6a 01                	push   0x1
c0015c71:	6a 00                	push   0x0
c0015c73:	68 fe 58 01 c0       	push   0xc00158fe
c0015c78:	50                   	push   eax
c0015c79:	e8 f6 82 00 00       	call   c001df74 <Process::createThread(void (*)(void*), void*, int)>
c0015c7e:	83 c4 10             	add    esp,0x10
c0015c81:	c6 05 20 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f820,0x1
c0015c88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c8b:	66 3d 1d 03          	cmp    ax,0x31d
c0015c8f:	75 06                	jne    c0015c97 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015c91:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c9a:	66 3d 1c 03          	cmp    ax,0x31c
c0015c9e:	75 06                	jne    c0015ca6 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015ca0:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca9:	66 3d 1b 03          	cmp    ax,0x31b
c0015cad:	75 06                	jne    c0015cb5 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015caf:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb8:	66 3d 1e 03          	cmp    ax,0x31e
c0015cbc:	75 06                	jne    c0015cc4 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015cbe:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc7:	66 3d 1f 03          	cmp    ax,0x31f
c0015ccb:	75 06                	jne    c0015cd3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015ccd:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015cd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cd6:	66 3d 1a 03          	cmp    ax,0x31a
c0015cda:	75 06                	jne    c0015ce2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015cdc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015ce2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015ce6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ce9:	83 f0 01             	xor    eax,0x1
c0015cec:	84 c0                	test   al,al
c0015cee:	74 77                	je     c0015d67 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015cf0:	a0 21 f5 02 c0       	mov    al,ds:0xc002f521
c0015cf5:	84 c0                	test   al,al
c0015cf7:	74 41                	je     c0015d3a <sendKeyboardToken(KeyboardToken)+0x312>
c0015cf9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015cfd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015d01:	74 2b                	je     c0015d2e <sendKeyboardToken(KeyboardToken)+0x306>
c0015d03:	8b 15 24 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f824
c0015d09:	89 d0                	mov    eax,edx
c0015d0b:	c1 e0 02             	shl    eax,0x2
c0015d0e:	01 d0                	add    eax,edx
c0015d10:	01 c0                	add    eax,eax
c0015d12:	a3 24 f8 02 c0       	mov    ds:0xc002f824,eax
c0015d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d1a:	0f b7 c0             	movzx  eax,ax
c0015d1d:	8d 50 d0             	lea    edx,[eax-0x30]
c0015d20:	a1 24 f8 02 c0       	mov    eax,ds:0xc002f824
c0015d25:	01 d0                	add    eax,edx
c0015d27:	a3 24 f8 02 c0       	mov    ds:0xc002f824,eax
c0015d2c:	eb 6d                	jmp    c0015d9b <sendKeyboardToken(KeyboardToken)+0x373>
c0015d2e:	c7 05 24 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f824,0x0
c0015d38:	eb 61                	jmp    c0015d9b <sendKeyboardToken(KeyboardToken)+0x373>
c0015d3a:	a1 24 f8 02 c0       	mov    eax,ds:0xc002f824
c0015d3f:	85 c0                	test   eax,eax
c0015d41:	74 18                	je     c0015d5b <sendKeyboardToken(KeyboardToken)+0x333>
c0015d43:	a1 24 f8 02 c0       	mov    eax,ds:0xc002f824
c0015d48:	0f b6 c0             	movzx  eax,al
c0015d4b:	83 ec 0c             	sub    esp,0xc
c0015d4e:	50                   	push   eax
c0015d4f:	e8 16 fc ff ff       	call   c001596a <sendKeyToTerminal(unsigned char)>
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d5b:	c7 05 24 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f824,0x0
c0015d65:	eb 34                	jmp    c0015d9b <sendKeyboardToken(KeyboardToken)+0x373>
c0015d67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d6a:	66 3d 01 01          	cmp    ax,0x101
c0015d6e:	75 2b                	jne    c0015d9b <sendKeyboardToken(KeyboardToken)+0x373>
c0015d70:	a1 24 f8 02 c0       	mov    eax,ds:0xc002f824
c0015d75:	85 c0                	test   eax,eax
c0015d77:	74 18                	je     c0015d91 <sendKeyboardToken(KeyboardToken)+0x369>
c0015d79:	a1 24 f8 02 c0       	mov    eax,ds:0xc002f824
c0015d7e:	0f b6 c0             	movzx  eax,al
c0015d81:	83 ec 0c             	sub    esp,0xc
c0015d84:	50                   	push   eax
c0015d85:	e8 e0 fb ff ff       	call   c001596a <sendKeyToTerminal(unsigned char)>
c0015d8a:	83 c4 10             	add    esp,0x10
c0015d8d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d91:	c7 05 24 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f824,0x0
c0015d9b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015d9e:	83 f0 01             	xor    eax,0x1
c0015da1:	84 c0                	test   al,al
c0015da3:	74 4c                	je     c0015df1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015da5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015da8:	83 f0 01             	xor    eax,0x1
c0015dab:	84 c0                	test   al,al
c0015dad:	74 42                	je     c0015df1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015daf:	a0 20 f5 02 c0       	mov    al,ds:0xc002f520
c0015db4:	83 f0 01             	xor    eax,0x1
c0015db7:	84 c0                	test   al,al
c0015db9:	74 36                	je     c0015df1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dbe:	66 83 f8 1f          	cmp    ax,0x1f
c0015dc2:	76 09                	jbe    c0015dcd <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015dc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc7:	66 83 f8 7e          	cmp    ax,0x7e
c0015dcb:	76 12                	jbe    c0015ddf <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015dcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd0:	66 83 f8 0a          	cmp    ax,0xa
c0015dd4:	74 09                	je     c0015ddf <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015dd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd9:	66 83 f8 08          	cmp    ax,0x8
c0015ddd:	75 12                	jne    c0015df1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de2:	0f b6 c0             	movzx  eax,al
c0015de5:	83 ec 0c             	sub    esp,0xc
c0015de8:	50                   	push   eax
c0015de9:	e8 7c fb ff ff       	call   c001596a <sendKeyToTerminal(unsigned char)>
c0015dee:	83 c4 10             	add    esp,0x10
c0015df1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015df4:	83 f0 01             	xor    eax,0x1
c0015df7:	84 c0                	test   al,al
c0015df9:	74 4f                	je     c0015e4a <sendKeyboardToken(KeyboardToken)+0x422>
c0015dfb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015dfe:	83 f0 01             	xor    eax,0x1
c0015e01:	84 c0                	test   al,al
c0015e03:	74 45                	je     c0015e4a <sendKeyboardToken(KeyboardToken)+0x422>
c0015e05:	a0 20 f5 02 c0       	mov    al,ds:0xc002f520
c0015e0a:	84 c0                	test   al,al
c0015e0c:	74 3c                	je     c0015e4a <sendKeyboardToken(KeyboardToken)+0x422>
c0015e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e11:	66 83 f8 3f          	cmp    ax,0x3f
c0015e15:	76 33                	jbe    c0015e4a <sendKeyboardToken(KeyboardToken)+0x422>
c0015e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e1a:	66 83 f8 7f          	cmp    ax,0x7f
c0015e1e:	77 2a                	ja     c0015e4a <sendKeyboardToken(KeyboardToken)+0x422>
c0015e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e23:	88 c2                	mov    dl,al
c0015e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e28:	66 83 f8 5f          	cmp    ax,0x5f
c0015e2c:	76 04                	jbe    c0015e32 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015e2e:	b0 20                	mov    al,0x20
c0015e30:	eb 02                	jmp    c0015e34 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015e32:	b0 00                	mov    al,0x0
c0015e34:	29 c2                	sub    edx,eax
c0015e36:	88 d0                	mov    al,dl
c0015e38:	83 e8 40             	sub    eax,0x40
c0015e3b:	0f b6 c0             	movzx  eax,al
c0015e3e:	83 ec 0c             	sub    esp,0xc
c0015e41:	50                   	push   eax
c0015e42:	e8 23 fb ff ff       	call   c001596a <sendKeyToTerminal(unsigned char)>
c0015e47:	83 c4 10             	add    esp,0x10
c0015e4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e4d:	66 3d 00 03          	cmp    ax,0x300
c0015e51:	75 0f                	jne    c0015e62 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e53:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e56:	83 f0 01             	xor    eax,0x1
c0015e59:	84 c0                	test   al,al
c0015e5b:	74 05                	je     c0015e62 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015e5d:	e8 4c aa ff ff       	call   c00108ae <doTerminalCycle()>
c0015e62:	90                   	nop
c0015e63:	c9                   	leave  
c0015e64:	c3                   	ret    

c0015e65 <clearInternalKeybuffer(VgaText*)>:
c0015e65:	55                   	push   ebp
c0015e66:	89 e5                	mov    ebp,esp
c0015e68:	83 ec 08             	sub    esp,0x8
c0015e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e6e:	05 98 01 00 00       	add    eax,0x198
c0015e73:	83 ec 0c             	sub    esp,0xc
c0015e76:	50                   	push   eax
c0015e77:	e8 f0 a8 fe ff       	call   c000076c <strlen>
c0015e7c:	83 c4 10             	add    esp,0x10
c0015e7f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e82:	81 c2 98 01 00 00    	add    edx,0x198
c0015e88:	83 ec 04             	sub    esp,0x4
c0015e8b:	50                   	push   eax
c0015e8c:	6a 00                	push   0x0
c0015e8e:	52                   	push   edx
c0015e8f:	e8 bc a8 fe ff       	call   c0000750 <memset>
c0015e94:	83 c4 10             	add    esp,0x10
c0015e97:	90                   	nop
c0015e98:	c9                   	leave  
c0015e99:	c3                   	ret    

c0015e9a <readKeyboard(VgaText*, char*, unsigned long)>:
c0015e9a:	55                   	push   ebp
c0015e9b:	89 e5                	mov    ebp,esp
c0015e9d:	83 ec 18             	sub    esp,0x18
c0015ea0:	a1 08 f4 02 c0       	mov    eax,ds:0xc002f408
c0015ea5:	85 c0                	test   eax,eax
c0015ea7:	74 2a                	je     c0015ed3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015ea9:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015eaf:	8b 0d 08 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f408
c0015eb5:	83 ec 04             	sub    esp,0x4
c0015eb8:	68 20 f4 02 c0       	push   0xc002f420
c0015ebd:	83 ec 08             	sub    esp,0x8
c0015ec0:	89 e2                	mov    edx,esp
c0015ec2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015ec5:	89 02                	mov    DWORD PTR [edx],eax
c0015ec7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015eca:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ece:	ff d1                	call   ecx
c0015ed0:	83 c4 10             	add    esp,0x10
c0015ed3:	83 ec 0c             	sub    esp,0xc
c0015ed6:	68 9b bc 02 c0       	push   0xc002bc9b
c0015edb:	e8 05 cb ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0015ee0:	83 c4 10             	add    esp,0x10
c0015ee3:	fb                   	sti    
c0015ee4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015eeb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015eef:	0f 84 a1 00 00 00    	je     c0015f96 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ef8:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015efe:	84 c0                	test   al,al
c0015f00:	75 28                	jne    c0015f2a <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015f02:	fa                   	cli    
c0015f03:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0015f08:	40                   	inc    eax
c0015f09:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c0015f0e:	e8 a5 82 00 00       	call   c001e1b8 <schedule()>
c0015f13:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0015f18:	48                   	dec    eax
c0015f19:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c0015f1e:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0015f23:	85 c0                	test   eax,eax
c0015f25:	75 ce                	jne    c0015ef5 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015f27:	fb                   	sti    
c0015f28:	eb cb                	jmp    c0015ef5 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015f2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f2d:	8d 50 01             	lea    edx,[eax+0x1]
c0015f30:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015f33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f36:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015f3c:	88 10                	mov    BYTE PTR [eax],dl
c0015f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f41:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015f47:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015f4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f4d:	05 98 01 00 00       	add    eax,0x198
c0015f52:	83 ec 0c             	sub    esp,0xc
c0015f55:	50                   	push   eax
c0015f56:	e8 11 a8 fe ff       	call   c000076c <strlen>
c0015f5b:	83 c4 10             	add    esp,0x10
c0015f5e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f61:	81 c2 98 01 00 00    	add    edx,0x198
c0015f67:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015f6a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f6d:	81 c2 98 01 00 00    	add    edx,0x198
c0015f73:	83 ec 04             	sub    esp,0x4
c0015f76:	50                   	push   eax
c0015f77:	51                   	push   ecx
c0015f78:	52                   	push   edx
c0015f79:	e8 0a a7 fe ff       	call   c0000688 <memmove>
c0015f7e:	83 c4 10             	add    esp,0x10
c0015f81:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015f84:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015f87:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015f8b:	0f 85 5a ff ff ff    	jne    c0015eeb <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0015f91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f94:	eb 03                	jmp    c0015f99 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0015f96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f99:	c9                   	leave  
c0015f9a:	c3                   	ret    
c0015f9b:	90                   	nop

c0015f9c <Keyboard::Keyboard(char const*)>:
c0015f9c:	83 ec 0c             	sub    esp,0xc
c0015f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa3:	83 ec 08             	sub    esp,0x8
c0015fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015faa:	50                   	push   eax
c0015fab:	e8 72 e0 ff ff       	call   c0014022 <Device::Device(char const*)>
c0015fb0:	83 c4 10             	add    esp,0x10
c0015fb3:	ba bc bc 02 c0       	mov    edx,0xc002bcbc
c0015fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fbc:	89 10                	mov    DWORD PTR [eax],edx
c0015fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fc2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015fcc:	c6 05 04 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f404,0x1
c0015fd3:	90                   	nop
c0015fd4:	83 c4 0c             	add    esp,0xc
c0015fd7:	c3                   	ret    

c0015fd8 <Keyboard::~Keyboard()>:
c0015fd8:	83 ec 0c             	sub    esp,0xc
c0015fdb:	ba bc bc 02 c0       	mov    edx,0xc002bcbc
c0015fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fe4:	89 10                	mov    DWORD PTR [eax],edx
c0015fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fea:	83 ec 0c             	sub    esp,0xc
c0015fed:	50                   	push   eax
c0015fee:	e8 f9 dc ff ff       	call   c0013cec <Device::~Device()>
c0015ff3:	83 c4 10             	add    esp,0x10
c0015ff6:	90                   	nop
c0015ff7:	83 c4 0c             	add    esp,0xc
c0015ffa:	c3                   	ret    
c0015ffb:	90                   	nop

c0015ffc <Keyboard::~Keyboard()>:
c0015ffc:	83 ec 0c             	sub    esp,0xc
c0015fff:	83 ec 0c             	sub    esp,0xc
c0016002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016006:	e8 cd ff ff ff       	call   c0015fd8 <Keyboard::~Keyboard()>
c001600b:	83 c4 10             	add    esp,0x10
c001600e:	83 ec 08             	sub    esp,0x8
c0016011:	68 5c 01 00 00       	push   0x15c
c0016016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001601a:	e8 e6 c8 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c001601f:	83 c4 10             	add    esp,0x10
c0016022:	83 c4 0c             	add    esp,0xc
c0016025:	c3                   	ret    

c0016026 <LogicalDisk::close(int, int, void*)>:
c0016026:	83 c8 ff             	or     eax,0xffffffff
c0016029:	c3                   	ret    

c001602a <LogicalDisk::~LogicalDisk()>:
c001602a:	83 ec 0c             	sub    esp,0xc
c001602d:	ba 6c bd 02 c0       	mov    edx,0xc002bd6c
c0016032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016036:	89 10                	mov    DWORD PTR [eax],edx
c0016038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001603c:	83 ec 0c             	sub    esp,0xc
c001603f:	50                   	push   eax
c0016040:	e8 a7 dc ff ff       	call   c0013cec <Device::~Device()>
c0016045:	83 c4 10             	add    esp,0x10
c0016048:	90                   	nop
c0016049:	83 c4 0c             	add    esp,0xc
c001604c:	c3                   	ret    
c001604d:	90                   	nop

c001604e <LogicalDisk::~LogicalDisk()>:
c001604e:	83 ec 0c             	sub    esp,0xc
c0016051:	83 ec 0c             	sub    esp,0xc
c0016054:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016058:	e8 cd ff ff ff       	call   c001602a <LogicalDisk::~LogicalDisk()>
c001605d:	83 c4 10             	add    esp,0x10
c0016060:	83 ec 08             	sub    esp,0x8
c0016063:	68 74 01 00 00       	push   0x174
c0016068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001606c:	e8 94 c8 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0016071:	83 c4 10             	add    esp,0x10
c0016074:	83 c4 0c             	add    esp,0xc
c0016077:	c3                   	ret    

c0016078 <LogicalDisk::open(int, int, void*)>:
c0016078:	83 ec 18             	sub    esp,0x18
c001607b:	68 e8 bc 02 c0       	push   0xc002bce8
c0016080:	e8 80 43 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0016085:	83 c8 ff             	or     eax,0xffffffff
c0016088:	83 c4 1c             	add    esp,0x1c
c001608b:	c3                   	ret    

c001608c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001608c:	53                   	push   ebx
c001608d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016091:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016095:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016099:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001609f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00160a5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00160ab:	77 10                	ja     c00160bd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00160ad:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00160b3:	89 d3                	mov    ebx,edx
c00160b5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00160bb:	72 05                	jb     c00160c2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00160bd:	83 c8 ff             	or     eax,0xffffffff
c00160c0:	89 c2                	mov    edx,eax
c00160c2:	5b                   	pop    ebx
c00160c3:	c3                   	ret    

c00160c4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00160c4:	56                   	push   esi
c00160c5:	83 c8 ff             	or     eax,0xffffffff
c00160c8:	53                   	push   ebx
c00160c9:	89 c2                	mov    edx,eax
c00160cb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00160cf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00160d3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160d7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160dd:	77 27                	ja     c0016106 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00160df:	89 d8                	mov    eax,ebx
c00160e1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00160e7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00160ed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160f2:	89 c2                	mov    edx,eax
c00160f4:	73 10                	jae    c0016106 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00160f6:	89 c8                	mov    eax,ecx
c00160f8:	89 da                	mov    edx,ebx
c00160fa:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016100:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016106:	5b                   	pop    ebx
c0016107:	5e                   	pop    esi
c0016108:	c3                   	ret    
c0016109:	90                   	nop

c001610a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001610a:	83 ec 1c             	sub    esp,0x1c
c001610d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016111:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016115:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016119:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001611d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016121:	89 04 24             	mov    DWORD PTR [esp],eax
c0016124:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016128:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001612c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016130:	83 ec 08             	sub    esp,0x8
c0016133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016137:	50                   	push   eax
c0016138:	e8 e5 de ff ff       	call   c0014022 <Device::Device(char const*)>
c001613d:	83 c4 10             	add    esp,0x10
c0016140:	ba 6c bd 02 c0       	mov    edx,0xc002bd6c
c0016145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016149:	89 10                	mov    DWORD PTR [eax],edx
c001614b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001614f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016156:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001615a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016161:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016165:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001616f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016173:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016177:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001617b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016181:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016187:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001618b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001618e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016192:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016198:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001619e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00161a6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00161ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161b0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161ba:	90                   	nop
c00161bb:	83 c4 1c             	add    esp,0x1c
c00161be:	c3                   	ret    
c00161bf:	90                   	nop

c00161c0 <LogicalDisk::assignDriveLetter()>:
c00161c0:	55                   	push   ebp
c00161c1:	57                   	push   edi
c00161c2:	56                   	push   esi
c00161c3:	53                   	push   ebx
c00161c4:	83 ec 14             	sub    esp,0x14
c00161c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161cb:	8b 3d 40 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f840
c00161d1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00161d7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00161db:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00161e1:	8b 3d 44 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f844
c00161e7:	3c 01                	cmp    al,0x1
c00161e9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00161ed:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00161f1:	19 c0                	sbb    eax,eax
c00161f3:	83 e0 02             	and    eax,0x2
c00161f6:	83 c0 41             	add    eax,0x41
c00161f9:	0f be e8             	movsx  ebp,al
c00161fc:	3c 43                	cmp    al,0x43
c00161fe:	75 10                	jne    c0016210 <LogicalDisk::assignDriveLetter()+0x50>
c0016200:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016207:	75 5d                	jne    c0016266 <LogicalDisk::assignDriveLetter()+0xa6>
c0016209:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001620e:	75 56                	jne    c0016266 <LogicalDisk::assignDriveLetter()+0xa6>
c0016210:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016213:	ba 01 00 00 00       	mov    edx,0x1
c0016218:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001621c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016220:	d3 e2                	shl    edx,cl
c0016222:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016226:	89 d7                	mov    edi,edx
c0016228:	89 d6                	mov    esi,edx
c001622a:	c1 ff 1f             	sar    edi,0x1f
c001622d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0016231:	21 f9                	and    ecx,edi
c0016233:	09 d1                	or     ecx,edx
c0016235:	75 2f                	jne    c0016266 <LogicalDisk::assignDriveLetter()+0xa6>
c0016237:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001623b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001623f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0016245:	09 f2                	or     edx,esi
c0016247:	89 15 40 f8 02 c0    	mov    DWORD PTR ds:0xc002f840,edx
c001624d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016251:	09 fa                	or     edx,edi
c0016253:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016257:	89 15 44 f8 02 c0    	mov    DWORD PTR ds:0xc002f844,edx
c001625d:	89 1c bd 60 f8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd07a0],ebx
c0016264:	eb 08                	jmp    c001626e <LogicalDisk::assignDriveLetter()+0xae>
c0016266:	45                   	inc    ebp
c0016267:	40                   	inc    eax
c0016268:	3c 5b                	cmp    al,0x5b
c001626a:	75 90                	jne    c00161fc <LogicalDisk::assignDriveLetter()+0x3c>
c001626c:	31 c0                	xor    eax,eax
c001626e:	83 c4 14             	add    esp,0x14
c0016271:	5b                   	pop    ebx
c0016272:	5e                   	pop    esi
c0016273:	5f                   	pop    edi
c0016274:	5d                   	pop    ebp
c0016275:	c3                   	ret    

c0016276 <LogicalDisk::mount()>:
c0016276:	56                   	push   esi
c0016277:	53                   	push   ebx
c0016278:	50                   	push   eax
c0016279:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001627d:	8b 1d d4 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3d4
c0016283:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001628d:	85 db                	test   ebx,ebx
c001628f:	74 50                	je     c00162e1 <LogicalDisk::mount()+0x6b>
c0016291:	50                   	push   eax
c0016292:	50                   	push   eax
c0016293:	ff 35 88 27 03 c0    	push   DWORD PTR ds:0xc0032788
c0016299:	68 0c bd 02 c0       	push   0xc002bd0c
c001629e:	e8 42 c7 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00162a3:	83 c4 0c             	add    esp,0xc
c00162a6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00162ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c00162af:	83 e8 41             	sub    eax,0x41
c00162b2:	50                   	push   eax
c00162b3:	56                   	push   esi
c00162b4:	53                   	push   ebx
c00162b5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00162b8:	83 c4 10             	add    esp,0x10
c00162bb:	84 c0                	test   al,al
c00162bd:	74 08                	je     c00162c7 <LogicalDisk::mount()+0x51>
c00162bf:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00162c5:	eb 1c                	jmp    c00162e3 <LogicalDisk::mount()+0x6d>
c00162c7:	51                   	push   ecx
c00162c8:	51                   	push   ecx
c00162c9:	ff 35 88 27 03 c0    	push   DWORD PTR ds:0xc0032788
c00162cf:	68 27 bd 02 c0       	push   0xc002bd27
c00162d4:	e8 0c c7 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00162d9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00162dc:	83 c4 10             	add    esp,0x10
c00162df:	eb ac                	jmp    c001628d <LogicalDisk::mount()+0x17>
c00162e1:	31 c0                	xor    eax,eax
c00162e3:	5a                   	pop    edx
c00162e4:	5b                   	pop    ebx
c00162e5:	5e                   	pop    esi
c00162e6:	c3                   	ret    
c00162e7:	90                   	nop

c00162e8 <LogicalDisk::unmount()>:
c00162e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162ec:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00162f6:	c3                   	ret    
c00162f7:	90                   	nop

c00162f8 <LogicalDisk::eject()>:
c00162f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162fc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016302:	8b 10                	mov    edx,DWORD PTR [eax]
c0016304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016308:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001630b:	90                   	nop

c001630c <LogicalDisk::unassignDriveLetter()>:
c001630c:	57                   	push   edi
c001630d:	56                   	push   esi
c001630e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016312:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016319:	84 c9                	test   cl,cl
c001631b:	75 0f                	jne    c001632c <LogicalDisk::unassignDriveLetter()+0x20>
c001631d:	c7 44 24 0c 42 bd 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bd42
c0016325:	5e                   	pop    esi
c0016326:	5f                   	pop    edi
c0016327:	e9 d9 40 00 00       	jmp    c001a405 <Krnl::panic(char const*)>
c001632c:	83 e9 41             	sub    ecx,0x41
c001632f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016336:	b8 01 00 00 00       	mov    eax,0x1
c001633b:	c7 04 8d 60 f8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd07a0],0x0
c0016346:	d3 e0                	shl    eax,cl
c0016348:	89 c7                	mov    edi,eax
c001634a:	f7 d0                	not    eax
c001634c:	c1 ff 1f             	sar    edi,0x1f
c001634f:	21 05 40 f8 02 c0    	and    DWORD PTR ds:0xc002f840,eax
c0016355:	89 fe                	mov    esi,edi
c0016357:	f7 d6                	not    esi
c0016359:	21 35 44 f8 02 c0    	and    DWORD PTR ds:0xc002f844,esi
c001635f:	5e                   	pop    esi
c0016360:	5f                   	pop    edi
c0016361:	c3                   	ret    

c0016362 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016362:	57                   	push   edi
c0016363:	56                   	push   esi
c0016364:	53                   	push   ebx
c0016365:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016369:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001636d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016371:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016375:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001637b:	77 41                	ja     c00163be <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001637d:	99                   	cdq    
c001637e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016384:	01 c8                	add    eax,ecx
c0016386:	11 da                	adc    edx,ebx
c0016388:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001638e:	19 d7                	sbb    edi,edx
c0016390:	72 33                	jb     c00163c5 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016392:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016398:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001639e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00163a2:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00163a6:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00163ac:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163b6:	5b                   	pop    ebx
c00163b7:	5e                   	pop    esi
c00163b8:	5f                   	pop    edi
c00163b9:	e9 ec 0a 00 00       	jmp    c0016eaa <VCache::read(unsigned long long, int, void*)>
c00163be:	b8 05 00 00 00       	mov    eax,0x5
c00163c3:	eb 05                	jmp    c00163ca <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00163c5:	b8 07 00 00 00       	mov    eax,0x7
c00163ca:	5b                   	pop    ebx
c00163cb:	5e                   	pop    esi
c00163cc:	5f                   	pop    edi
c00163cd:	c3                   	ret    

c00163ce <LogicalDisk::write(unsigned long long, int, void*)>:
c00163ce:	57                   	push   edi
c00163cf:	56                   	push   esi
c00163d0:	53                   	push   ebx
c00163d1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00163d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00163dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00163e7:	77 41                	ja     c001642a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00163e9:	99                   	cdq    
c00163ea:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00163f0:	01 c8                	add    eax,ecx
c00163f2:	11 da                	adc    edx,ebx
c00163f4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00163fa:	19 d7                	sbb    edi,edx
c00163fc:	72 33                	jb     c0016431 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00163fe:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016404:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001640a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001640e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016412:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016418:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001641e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016422:	5b                   	pop    ebx
c0016423:	5e                   	pop    esi
c0016424:	5f                   	pop    edi
c0016425:	e9 96 09 00 00       	jmp    c0016dc0 <VCache::write(unsigned long long, int, void*)>
c001642a:	b8 05 00 00 00       	mov    eax,0x5
c001642f:	eb 05                	jmp    c0016436 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016431:	b8 07 00 00 00       	mov    eax,0x7
c0016436:	5b                   	pop    ebx
c0016437:	5e                   	pop    esi
c0016438:	5f                   	pop    edi
c0016439:	c3                   	ret    

c001643a <Mouse::Mouse(char const*)>:
c001643a:	83 ec 0c             	sub    esp,0xc
c001643d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016441:	83 ec 08             	sub    esp,0x8
c0016444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016448:	50                   	push   eax
c0016449:	e8 d4 db ff ff       	call   c0014022 <Device::Device(char const*)>
c001644e:	83 c4 10             	add    esp,0x10
c0016451:	ba 98 bd 02 c0       	mov    edx,0xc002bd98
c0016456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645a:	89 10                	mov    DWORD PTR [eax],edx
c001645c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016460:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001646a:	90                   	nop
c001646b:	83 c4 0c             	add    esp,0xc
c001646e:	c3                   	ret    
c001646f:	90                   	nop

c0016470 <Mouse::~Mouse()>:
c0016470:	83 ec 0c             	sub    esp,0xc
c0016473:	ba 98 bd 02 c0       	mov    edx,0xc002bd98
c0016478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647c:	89 10                	mov    DWORD PTR [eax],edx
c001647e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016482:	83 ec 0c             	sub    esp,0xc
c0016485:	50                   	push   eax
c0016486:	e8 61 d8 ff ff       	call   c0013cec <Device::~Device()>
c001648b:	83 c4 10             	add    esp,0x10
c001648e:	90                   	nop
c001648f:	83 c4 0c             	add    esp,0xc
c0016492:	c3                   	ret    
c0016493:	90                   	nop

c0016494 <Mouse::~Mouse()>:
c0016494:	83 ec 0c             	sub    esp,0xc
c0016497:	83 ec 0c             	sub    esp,0xc
c001649a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001649e:	e8 cd ff ff ff       	call   c0016470 <Mouse::~Mouse()>
c00164a3:	83 c4 10             	add    esp,0x10
c00164a6:	83 ec 08             	sub    esp,0x8
c00164a9:	68 58 01 00 00       	push   0x158
c00164ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b2:	e8 4e c4 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c00164b7:	83 c4 10             	add    esp,0x10
c00164ba:	83 c4 0c             	add    esp,0xc
c00164bd:	c3                   	ret    

c00164be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164be:	55                   	push   ebp
c00164bf:	57                   	push   edi
c00164c0:	56                   	push   esi
c00164c1:	53                   	push   ebx
c00164c2:	81 ec 20 01 00 00    	sub    esp,0x120
c00164c8:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00164cf:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00164d6:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00164dd:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00164e4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00164e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00164f0:	56                   	push   esi
c00164f1:	68 bc bd 02 c0       	push   0xc002bdbc
c00164f6:	e8 ea c4 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00164fb:	58                   	pop    eax
c00164fc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016503:	e8 16 dc ff ff       	call   c001411e <Device::getName()>
c0016508:	5a                   	pop    edx
c0016509:	59                   	pop    ecx
c001650a:	50                   	push   eax
c001650b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001650f:	53                   	push   ebx
c0016510:	e8 f7 a2 fe ff       	call   c000080c <strcpy>
c0016515:	5d                   	pop    ebp
c0016516:	58                   	pop    eax
c0016517:	68 ed bd 02 c0       	push   0xc002bded
c001651c:	53                   	push   ebx
c001651d:	e8 2a a4 fe ff       	call   c000094c <strcat>
c0016522:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016529:	e8 d4 93 ff ff       	call   c000f902 <malloc>
c001652e:	83 c4 0c             	add    esp,0xc
c0016531:	89 c5                	mov    ebp,eax
c0016533:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016537:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001653b:	57                   	push   edi
c001653c:	56                   	push   esi
c001653d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016544:	53                   	push   ebx
c0016545:	50                   	push   eax
c0016546:	e8 bf fb ff ff       	call   c001610a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001654b:	83 c4 14             	add    esp,0x14
c001654e:	55                   	push   ebp
c001654f:	e8 6c fc ff ff       	call   c00161c0 <LogicalDisk::assignDriveLetter()>
c0016554:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016557:	0f be d8             	movsx  ebx,al
c001655a:	e8 17 fd ff ff       	call   c0016276 <LogicalDisk::mount()>
c001655f:	58                   	pop    eax
c0016560:	5a                   	pop    edx
c0016561:	55                   	push   ebp
c0016562:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016569:	e8 b0 d8 ff ff       	call   c0013e1e <Device::addChild(Device*)>
c001656e:	59                   	pop    ecx
c001656f:	5e                   	pop    esi
c0016570:	53                   	push   ebx
c0016571:	68 f8 bd 02 c0       	push   0xc002bdf8
c0016576:	e8 6a c4 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001657b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016581:	5b                   	pop    ebx
c0016582:	5e                   	pop    esi
c0016583:	5f                   	pop    edi
c0016584:	5d                   	pop    ebp
c0016585:	c3                   	ret    

c0016586 <createPartitionsForDisk(PhysicalDisk*)>:
c0016586:	55                   	push   ebp
c0016587:	57                   	push   edi
c0016588:	56                   	push   esi
c0016589:	53                   	push   ebx
c001658a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016590:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016597:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001659d:	3d 00 02 00 00       	cmp    eax,0x200
c00165a2:	74 27                	je     c00165cb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00165a4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00165aa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00165b0:	83 ec 10             	sub    esp,0x10
c00165b3:	0f a4 f7 0a          	shld   edi,esi,0xa
c00165b7:	99                   	cdq    
c00165b8:	c1 e6 0a             	shl    esi,0xa
c00165bb:	52                   	push   edx
c00165bc:	89 fd                	mov    ebp,edi
c00165be:	50                   	push   eax
c00165bf:	55                   	push   ebp
c00165c0:	56                   	push   esi
c00165c1:	e8 2e 0d 01 00       	call   c00272f4 <__udivdi3>
c00165c6:	e9 b1 00 00 00       	jmp    c001667c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165cb:	83 ec 0c             	sub    esp,0xc
c00165ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165d0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00165d4:	56                   	push   esi
c00165d5:	6a 01                	push   0x1
c00165d7:	6a 00                	push   0x0
c00165d9:	6a 00                	push   0x0
c00165db:	53                   	push   ebx
c00165dc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00165df:	83 c4 20             	add    esp,0x20
c00165e2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00165ea:	75 0a                	jne    c00165f6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00165ec:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00165f4:	74 2c                	je     c0016622 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00165f6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165fc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016602:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016608:	83 ec 10             	sub    esp,0x10
c001660b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001660f:	89 f7                	mov    edi,esi
c0016611:	c1 e0 0a             	shl    eax,0xa
c0016614:	c1 ff 1f             	sar    edi,0x1f
c0016617:	57                   	push   edi
c0016618:	56                   	push   esi
c0016619:	52                   	push   edx
c001661a:	50                   	push   eax
c001661b:	e8 d4 0c 01 00       	call   c00272f4 <__udivdi3>
c0016620:	eb 5a                	jmp    c001667c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016622:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016629:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016630:	83 e1 7f             	and    ecx,0x7f
c0016633:	83 e0 7f             	and    eax,0x7f
c0016636:	01 c1                	add    ecx,eax
c0016638:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001663f:	83 e0 7f             	and    eax,0x7f
c0016642:	01 c1                	add    ecx,eax
c0016644:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001664b:	83 e0 7f             	and    eax,0x7f
c001664e:	00 c1                	add    cl,al
c0016650:	74 41                	je     c0016693 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016652:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016658:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001665e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016664:	83 ec 10             	sub    esp,0x10
c0016667:	0f a4 c2 0a          	shld   edx,eax,0xa
c001666b:	89 f7                	mov    edi,esi
c001666d:	c1 e0 0a             	shl    eax,0xa
c0016670:	c1 ff 1f             	sar    edi,0x1f
c0016673:	57                   	push   edi
c0016674:	56                   	push   esi
c0016675:	52                   	push   edx
c0016676:	50                   	push   eax
c0016677:	e8 78 0c 01 00       	call   c00272f4 <__udivdi3>
c001667c:	83 c4 14             	add    esp,0x14
c001667f:	52                   	push   edx
c0016680:	50                   	push   eax
c0016681:	6a 00                	push   0x0
c0016683:	6a 00                	push   0x0
c0016685:	53                   	push   ebx
c0016686:	e8 33 fe ff ff       	call   c00164be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001668b:	83 c4 20             	add    esp,0x20
c001668e:	e9 79 01 00 00       	jmp    c001680c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016693:	89 f0                	mov    eax,esi
c0016695:	31 f6                	xor    esi,esi
c0016697:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001669e:	75 02                	jne    c00166a2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00166a0:	89 f1                	mov    ecx,esi
c00166a2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00166a9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00166b0:	c1 e2 08             	shl    edx,0x8
c00166b3:	c1 e7 10             	shl    edi,0x10
c00166b6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00166be:	09 fa                	or     edx,edi
c00166c0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00166c8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00166cf:	83 c0 10             	add    eax,0x10
c00166d2:	09 fa                	or     edx,edi
c00166d4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00166db:	c1 e7 18             	shl    edi,0x18
c00166de:	09 fa                	or     edx,edi
c00166e0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00166e7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00166eb:	c1 e7 10             	shl    edi,0x10
c00166ee:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00166f5:	c1 e2 08             	shl    edx,0x8
c00166f8:	09 fa                	or     edx,edi
c00166fa:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016701:	09 fa                	or     edx,edi
c0016703:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c001670a:	c1 e7 18             	shl    edi,0x18
c001670d:	09 fa                	or     edx,edi
c001670f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016713:	46                   	inc    esi
c0016714:	83 fe 04             	cmp    esi,0x4
c0016717:	0f 85 7a ff ff ff    	jne    c0016697 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001671d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016721:	83 f0 01             	xor    eax,0x1
c0016724:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016728:	75 57                	jne    c0016781 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001672a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001672e:	83 f0 01             	xor    eax,0x1
c0016731:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016735:	75 4a                	jne    c0016781 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016737:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001673b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016743:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001674b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016751:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016757:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001675d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016761:	89 f7                	mov    edi,esi
c0016763:	c1 e0 0a             	shl    eax,0xa
c0016766:	c1 ff 1f             	sar    edi,0x1f
c0016769:	57                   	push   edi
c001676a:	56                   	push   esi
c001676b:	52                   	push   edx
c001676c:	50                   	push   eax
c001676d:	e8 82 0b 01 00       	call   c00272f4 <__udivdi3>
c0016772:	83 c4 10             	add    esp,0x10
c0016775:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016779:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001677d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016781:	84 c9                	test   cl,cl
c0016783:	74 53                	je     c00167d8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016785:	0f b6 c9             	movzx  ecx,cl
c0016788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001678c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016790:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016794:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016798:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001679c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00167a0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00167a4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00167a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00167b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167b8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00167bc:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00167c0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00167c4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00167c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00167cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00167d0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00167d4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00167d8:	31 ed                	xor    ebp,ebp
c00167da:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00167de:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00167e2:	89 f8                	mov    eax,edi
c00167e4:	09 f0                	or     eax,esi
c00167e6:	74 1e                	je     c0016806 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00167e8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00167ec:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00167f0:	89 d1                	mov    ecx,edx
c00167f2:	09 c1                	or     ecx,eax
c00167f4:	74 10                	je     c0016806 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00167f6:	83 ec 0c             	sub    esp,0xc
c00167f9:	57                   	push   edi
c00167fa:	56                   	push   esi
c00167fb:	52                   	push   edx
c00167fc:	50                   	push   eax
c00167fd:	53                   	push   ebx
c00167fe:	e8 bb fc ff ff       	call   c00164be <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016803:	83 c4 20             	add    esp,0x20
c0016806:	45                   	inc    ebp
c0016807:	83 fd 04             	cmp    ebp,0x4
c001680a:	75 ce                	jne    c00167da <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001680c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016812:	5b                   	pop    ebx
c0016813:	5e                   	pop    esi
c0016814:	5f                   	pop    edi
c0016815:	5d                   	pop    ebp
c0016816:	c3                   	ret    
c0016817:	90                   	nop

c0016818 <Serial::Serial(char const*)>:
c0016818:	83 ec 0c             	sub    esp,0xc
c001681b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001681f:	83 ec 08             	sub    esp,0x8
c0016822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016826:	50                   	push   eax
c0016827:	e8 f6 d7 ff ff       	call   c0014022 <Device::Device(char const*)>
c001682c:	83 c4 10             	add    esp,0x10
c001682f:	ba 24 be 02 c0       	mov    edx,0xc002be24
c0016834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016838:	89 10                	mov    DWORD PTR [eax],edx
c001683a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016848:	90                   	nop
c0016849:	83 c4 0c             	add    esp,0xc
c001684c:	c3                   	ret    
c001684d:	90                   	nop

c001684e <Serial::~Serial()>:
c001684e:	83 ec 0c             	sub    esp,0xc
c0016851:	ba 24 be 02 c0       	mov    edx,0xc002be24
c0016856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001685a:	89 10                	mov    DWORD PTR [eax],edx
c001685c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016860:	83 ec 0c             	sub    esp,0xc
c0016863:	50                   	push   eax
c0016864:	e8 83 d4 ff ff       	call   c0013cec <Device::~Device()>
c0016869:	83 c4 10             	add    esp,0x10
c001686c:	90                   	nop
c001686d:	83 c4 0c             	add    esp,0xc
c0016870:	c3                   	ret    
c0016871:	90                   	nop

c0016872 <Serial::~Serial()>:
c0016872:	83 ec 0c             	sub    esp,0xc
c0016875:	83 ec 0c             	sub    esp,0xc
c0016878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001687c:	e8 cd ff ff ff       	call   c001684e <Serial::~Serial()>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	83 ec 08             	sub    esp,0x8
c0016887:	68 58 01 00 00       	push   0x158
c001688c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016890:	e8 70 c0 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0016895:	83 c4 10             	add    esp,0x10
c0016898:	83 c4 0c             	add    esp,0xc
c001689b:	c3                   	ret    

c001689c <Timer::Timer(char const*)>:
c001689c:	83 ec 0c             	sub    esp,0xc
c001689f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168a3:	83 ec 08             	sub    esp,0x8
c00168a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168aa:	50                   	push   eax
c00168ab:	e8 72 d7 ff ff       	call   c0014022 <Device::Device(char const*)>
c00168b0:	83 c4 10             	add    esp,0x10
c00168b3:	ba 68 be 02 c0       	mov    edx,0xc002be68
c00168b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168bc:	89 10                	mov    DWORD PTR [eax],edx
c00168be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168c2:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00168cc:	90                   	nop
c00168cd:	83 c4 0c             	add    esp,0xc
c00168d0:	c3                   	ret    
c00168d1:	90                   	nop

c00168d2 <Timer::~Timer()>:
c00168d2:	83 ec 0c             	sub    esp,0xc
c00168d5:	ba 68 be 02 c0       	mov    edx,0xc002be68
c00168da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168de:	89 10                	mov    DWORD PTR [eax],edx
c00168e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	50                   	push   eax
c00168e8:	e8 ff d3 ff ff       	call   c0013cec <Device::~Device()>
c00168ed:	83 c4 10             	add    esp,0x10
c00168f0:	90                   	nop
c00168f1:	83 c4 0c             	add    esp,0xc
c00168f4:	c3                   	ret    
c00168f5:	90                   	nop

c00168f6 <Timer::~Timer()>:
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	83 ec 0c             	sub    esp,0xc
c00168fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016900:	e8 cd ff ff ff       	call   c00168d2 <Timer::~Timer()>
c0016905:	83 c4 10             	add    esp,0x10
c0016908:	83 ec 08             	sub    esp,0x8
c001690b:	68 5c 01 00 00       	push   0x15c
c0016910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016914:	e8 ec bf ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0016919:	83 c4 10             	add    esp,0x10
c001691c:	83 c4 0c             	add    esp,0xc
c001691f:	c3                   	ret    

c0016920 <Timer::read()>:
c0016920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016924:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001692a:	c3                   	ret    

c001692b <timerHandler(unsigned long long)>:
c001692b:	55                   	push   ebp
c001692c:	57                   	push   edi
c001692d:	56                   	push   esi
c001692e:	53                   	push   ebx
c001692f:	83 ec 0c             	sub    esp,0xc
c0016932:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016936:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001693a:	01 35 d0 f8 02 c0    	add    DWORD PTR ds:0xc002f8d0,esi
c0016940:	11 3d d4 f8 02 c0    	adc    DWORD PTR ds:0xc002f8d4,edi
c0016946:	80 3d 6d f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f26d,0x0
c001694d:	0f 84 42 01 00 00    	je     c0016a95 <timerHandler(unsigned long long)+0x16a>
c0016953:	fa                   	cli    
c0016954:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001695a:	83 ec 0c             	sub    esp,0xc
c001695d:	ff 05 84 27 03 c0    	inc    DWORD PTR ds:0xc0032784
c0016963:	68 98 27 03 c0       	push   0xc0032798
c0016968:	e8 0d 2a 01 00       	call   c002937a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001696d:	83 c4 10             	add    esp,0x10
c0016970:	84 c0                	test   al,al
c0016972:	0f 85 a2 00 00 00    	jne    c0016a1a <timerHandler(unsigned long long)+0xef>
c0016978:	83 ec 0c             	sub    esp,0xc
c001697b:	68 98 27 03 c0       	push   0xc0032798
c0016980:	e8 11 2a 01 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016985:	83 c4 10             	add    esp,0x10
c0016988:	89 c3                	mov    ebx,eax
c001698a:	83 ec 0c             	sub    esp,0xc
c001698d:	68 98 27 03 c0       	push   0xc0032798
c0016992:	e8 ff 29 01 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016997:	c7 04 24 98 27 03 c0 	mov    DWORD PTR [esp],0xc0032798
c001699e:	89 c5                	mov    ebp,eax
c00169a0:	e8 f9 29 01 00       	call   c002939e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169a5:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00169a8:	83 c4 10             	add    esp,0x10
c00169ab:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00169ae:	39 15 d0 f8 02 c0    	cmp    DWORD PTR ds:0xc002f8d0,edx
c00169b4:	a1 d4 f8 02 c0       	mov    eax,ds:0xc002f8d4
c00169b9:	19 c8                	sbb    eax,ecx
c00169bb:	72 21                	jb     c00169de <timerHandler(unsigned long long)+0xb3>
c00169bd:	83 ec 0c             	sub    esp,0xc
c00169c0:	55                   	push   ebp
c00169c1:	e8 b6 7c 00 00       	call   c001e67c <unblockTask(ThreadControlBlock*)>
c00169c6:	83 c4 10             	add    esp,0x10
c00169c9:	39 eb                	cmp    ebx,ebp
c00169cb:	75 21                	jne    c00169ee <timerHandler(unsigned long long)+0xc3>
c00169cd:	83 ec 0c             	sub    esp,0xc
c00169d0:	68 98 27 03 c0       	push   0xc0032798
c00169d5:	e8 bc 29 01 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169da:	89 c3                	mov    ebx,eax
c00169dc:	eb 0d                	jmp    c00169eb <timerHandler(unsigned long long)+0xc0>
c00169de:	50                   	push   eax
c00169df:	50                   	push   eax
c00169e0:	55                   	push   ebp
c00169e1:	68 98 27 03 c0       	push   0xc0032798
c00169e6:	e8 61 2a 01 00       	call   c002944c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00169eb:	83 c4 10             	add    esp,0x10
c00169ee:	83 ec 0c             	sub    esp,0xc
c00169f1:	68 98 27 03 c0       	push   0xc0032798
c00169f6:	e8 7f 29 01 00       	call   c002937a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169fb:	83 c4 10             	add    esp,0x10
c00169fe:	84 c0                	test   al,al
c0016a00:	75 18                	jne    c0016a1a <timerHandler(unsigned long long)+0xef>
c0016a02:	83 ec 0c             	sub    esp,0xc
c0016a05:	68 98 27 03 c0       	push   0xc0032798
c0016a0a:	e8 87 29 01 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016a0f:	83 c4 10             	add    esp,0x10
c0016a12:	39 d8                	cmp    eax,ebx
c0016a14:	0f 85 70 ff ff ff    	jne    c001698a <timerHandler(unsigned long long)+0x5f>
c0016a1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a1f:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016a23:	74 3d                	je     c0016a62 <timerHandler(unsigned long long)+0x137>
c0016a25:	80 3d 6c f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f26c,0x0
c0016a2c:	74 34                	je     c0016a62 <timerHandler(unsigned long long)+0x137>
c0016a2e:	fa                   	cli    
c0016a2f:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c0016a35:	31 d2                	xor    edx,edx
c0016a37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a3c:	89 f9                	mov    ecx,edi
c0016a3e:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016a41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a46:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a49:	39 c6                	cmp    esi,eax
c0016a4b:	19 d1                	sbb    ecx,edx
c0016a4d:	72 05                	jb     c0016a54 <timerHandler(unsigned long long)+0x129>
c0016a4f:	e8 64 77 00 00       	call   c001e1b8 <schedule()>
c0016a54:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0016a59:	48                   	dec    eax
c0016a5a:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c0016a5f:	75 01                	jne    c0016a62 <timerHandler(unsigned long long)+0x137>
c0016a61:	fb                   	sti    
c0016a62:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c0016a67:	48                   	dec    eax
c0016a68:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c0016a6d:	75 18                	jne    c0016a87 <timerHandler(unsigned long long)+0x15c>
c0016a6f:	83 3d 80 27 03 c0 00 	cmp    DWORD PTR ds:0xc0032780,0x0
c0016a76:	74 0f                	je     c0016a87 <timerHandler(unsigned long long)+0x15c>
c0016a78:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c0016a82:	e8 31 77 00 00       	call   c001e1b8 <schedule()>
c0016a87:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0016a8c:	48                   	dec    eax
c0016a8d:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c0016a92:	75 01                	jne    c0016a95 <timerHandler(unsigned long long)+0x16a>
c0016a94:	fb                   	sti    
c0016a95:	83 c4 0c             	add    esp,0xc
c0016a98:	5b                   	pop    ebx
c0016a99:	5e                   	pop    esi
c0016a9a:	5f                   	pop    edi
c0016a9b:	5d                   	pop    ebp
c0016a9c:	c3                   	ret    

c0016a9d <setupTimer(int)>:
c0016a9d:	57                   	push   edi
c0016a9e:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0016aa3:	56                   	push   esi
c0016aa4:	53                   	push   ebx
c0016aa5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016aa9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016aaf:	83 ec 0c             	sub    esp,0xc
c0016ab2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016ab8:	e8 61 d6 ff ff       	call   c001411e <Device::getName()>
c0016abd:	83 c4 10             	add    esp,0x10
c0016ac0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016ac3:	0f 85 8d 00 00 00    	jne    c0016b56 <setupTimer(int)+0xb9>
c0016ac9:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0016ace:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016ad5:	74 7f                	je     c0016b56 <setupTimer(int)+0xb9>
c0016ad7:	83 ec 0c             	sub    esp,0xc
c0016ada:	68 5c 01 00 00       	push   0x15c
c0016adf:	e8 1e 8e ff ff       	call   c000f902 <malloc>
c0016ae4:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ae7:	89 c3                	mov    ebx,eax
c0016ae9:	e8 e2 03 01 00       	call   c0026ed0 <PIT::PIT()>
c0016aee:	59                   	pop    ecx
c0016aef:	5f                   	pop    edi
c0016af0:	53                   	push   ebx
c0016af1:	ff 35 68 f2 02 c0    	push   DWORD PTR ds:0xc002f268
c0016af7:	e8 22 d3 ff ff       	call   c0013e1e <Device::addChild(Device*)>
c0016afc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016afe:	6a 00                	push   0x0
c0016b00:	6a 00                	push   0x0
c0016b02:	56                   	push   esi
c0016b03:	53                   	push   ebx
c0016b04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b07:	83 c4 14             	add    esp,0x14
c0016b0a:	68 60 01 00 00       	push   0x160
c0016b0f:	e8 ee 8d ff ff       	call   c000f902 <malloc>
c0016b14:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b17:	89 c7                	mov    edi,eax
c0016b19:	e8 62 02 01 00       	call   c0026d80 <APICTimer::APICTimer()>
c0016b1e:	6a 00                	push   0x0
c0016b20:	6a 00                	push   0x0
c0016b22:	56                   	push   esi
c0016b23:	57                   	push   edi
c0016b24:	e8 59 01 01 00       	call   c0026c82 <APICTimer::open(int, int, void*)>
c0016b29:	83 c4 20             	add    esp,0x20
c0016b2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b2e:	6a 00                	push   0x0
c0016b30:	6a 00                	push   0x0
c0016b32:	6a 00                	push   0x0
c0016b34:	53                   	push   ebx
c0016b35:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b38:	58                   	pop    eax
c0016b39:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0016b3e:	5a                   	pop    edx
c0016b3f:	57                   	push   edi
c0016b40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b46:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016b4c:	e8 cd d2 ff ff       	call   c0013e1e <Device::addChild(Device*)>
c0016b51:	83 c4 10             	add    esp,0x10
c0016b54:	eb 33                	jmp    c0016b89 <setupTimer(int)+0xec>
c0016b56:	83 ec 0c             	sub    esp,0xc
c0016b59:	68 5c 01 00 00       	push   0x15c
c0016b5e:	e8 9f 8d ff ff       	call   c000f902 <malloc>
c0016b63:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b66:	89 c3                	mov    ebx,eax
c0016b68:	e8 63 03 01 00       	call   c0026ed0 <PIT::PIT()>
c0016b6d:	58                   	pop    eax
c0016b6e:	5a                   	pop    edx
c0016b6f:	53                   	push   ebx
c0016b70:	ff 35 68 f2 02 c0    	push   DWORD PTR ds:0xc002f268
c0016b76:	e8 a3 d2 ff ff       	call   c0013e1e <Device::addChild(Device*)>
c0016b7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b7d:	6a 00                	push   0x0
c0016b7f:	6a 00                	push   0x0
c0016b81:	56                   	push   esi
c0016b82:	53                   	push   ebx
c0016b83:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b86:	83 c4 20             	add    esp,0x20
c0016b89:	89 d8                	mov    eax,ebx
c0016b8b:	5b                   	pop    ebx
c0016b8c:	5e                   	pop    esi
c0016b8d:	5f                   	pop    edi
c0016b8e:	c3                   	ret    
c0016b8f:	90                   	nop

c0016b90 <VCache::VCache(PhysicalDisk*)>:
c0016b90:	53                   	push   ebx
c0016b91:	83 ec 18             	sub    esp,0x18
c0016b94:	ba 98 be 02 c0       	mov    edx,0xc002be98
c0016b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b9d:	89 10                	mov    DWORD PTR [eax],edx
c0016b9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016baa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bae:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016bb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016bc0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bcb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016bd2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016bd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bdd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bf0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016bf7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016bfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c02:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016c0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c12:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016c16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c1a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016c21:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016c29:	83 ec 0c             	sub    esp,0xc
c0016c2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c30:	e8 cd 8c ff ff       	call   c000f902 <malloc>
c0016c35:	83 c4 10             	add    esp,0x10
c0016c38:	89 c3                	mov    ebx,eax
c0016c3a:	83 ec 0c             	sub    esp,0xc
c0016c3d:	53                   	push   ebx
c0016c3e:	e8 1f 73 00 00       	call   c001df62 <Mutex::Mutex()>
c0016c43:	83 c4 10             	add    esp,0x10
c0016c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c4a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016c4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016c55:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016c58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c5c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016c63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c67:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016c6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c71:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016c74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c78:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016c7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c84:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c88:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016c8b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c92:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ca0:	05 00 01 00 00       	add    eax,0x100
c0016ca5:	c1 e0 04             	shl    eax,0x4
c0016ca8:	83 ec 0c             	sub    esp,0xc
c0016cab:	50                   	push   eax
c0016cac:	e8 51 8c ff ff       	call   c000f902 <malloc>
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	89 c2                	mov    edx,eax
c0016cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cba:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016cbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cc1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016cc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ccc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016cd0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016cd4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cda:	c1 e0 07             	shl    eax,0x7
c0016cdd:	83 ec 0c             	sub    esp,0xc
c0016ce0:	50                   	push   eax
c0016ce1:	e8 1c 8c ff ff       	call   c000f902 <malloc>
c0016ce6:	83 c4 10             	add    esp,0x10
c0016ce9:	89 c2                	mov    edx,eax
c0016ceb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cef:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016cf2:	90                   	nop
c0016cf3:	83 c4 18             	add    esp,0x18
c0016cf6:	5b                   	pop    ebx
c0016cf7:	c3                   	ret    

c0016cf8 <VCache::invalidateReadBuffer()>:
c0016cf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cfc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016d02:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016d06:	c3                   	ret    
c0016d07:	90                   	nop

c0016d08 <VCache::writeWriteBuffer()>:
c0016d08:	53                   	push   ebx
c0016d09:	83 ec 14             	sub    esp,0x14
c0016d0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016d10:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d13:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d15:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016d18:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016d1b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016d1e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016d21:	50                   	push   eax
c0016d22:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016d2c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016d33:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016d37:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016d3e:	83 c4 28             	add    esp,0x28
c0016d41:	5b                   	pop    ebx
c0016d42:	c3                   	ret    
c0016d43:	90                   	nop

c0016d44 <VCache::~VCache()>:
c0016d44:	83 ec 0c             	sub    esp,0xc
c0016d47:	ba 98 be 02 c0       	mov    edx,0xc002be98
c0016d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d50:	89 10                	mov    DWORD PTR [eax],edx
c0016d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d56:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016d59:	84 c0                	test   al,al
c0016d5b:	74 0f                	je     c0016d6c <VCache::~VCache()+0x28>
c0016d5d:	83 ec 0c             	sub    esp,0xc
c0016d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d64:	e8 9f ff ff ff       	call   c0016d08 <VCache::writeWriteBuffer()>
c0016d69:	83 c4 10             	add    esp,0x10
c0016d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d70:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016d73:	83 ec 0c             	sub    esp,0xc
c0016d76:	50                   	push   eax
c0016d77:	e8 96 8b ff ff       	call   c000f912 <free>
c0016d7c:	83 c4 10             	add    esp,0x10
c0016d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d83:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	50                   	push   eax
c0016d8a:	e8 83 8b ff ff       	call   c000f912 <free>
c0016d8f:	83 c4 10             	add    esp,0x10
c0016d92:	90                   	nop
c0016d93:	83 c4 0c             	add    esp,0xc
c0016d96:	c3                   	ret    
c0016d97:	90                   	nop

c0016d98 <VCache::~VCache()>:
c0016d98:	83 ec 0c             	sub    esp,0xc
c0016d9b:	83 ec 0c             	sub    esp,0xc
c0016d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016da2:	e8 9d ff ff ff       	call   c0016d44 <VCache::~VCache()>
c0016da7:	83 c4 10             	add    esp,0x10
c0016daa:	83 ec 08             	sub    esp,0x8
c0016dad:	6a 44                	push   0x44
c0016daf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016db3:	e8 4d bb ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0016db8:	83 c4 10             	add    esp,0x10
c0016dbb:	83 c4 0c             	add    esp,0xc
c0016dbe:	c3                   	ret    
c0016dbf:	90                   	nop

c0016dc0 <VCache::write(unsigned long long, int, void*)>:
c0016dc0:	55                   	push   ebp
c0016dc1:	57                   	push   edi
c0016dc2:	56                   	push   esi
c0016dc3:	53                   	push   ebx
c0016dc4:	83 ec 18             	sub    esp,0x18
c0016dc7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016dcb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016dcf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016dd3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dd6:	e8 15 77 00 00       	call   c001e4f0 <Semaphore::acquire()>
c0016ddb:	83 c4 10             	add    esp,0x10
c0016dde:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016de2:	74 0c                	je     c0016df0 <VCache::write(unsigned long long, int, void*)+0x30>
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	53                   	push   ebx
c0016de8:	e8 0b ff ff ff       	call   c0016cf8 <VCache::invalidateReadBuffer()>
c0016ded:	83 c4 10             	add    esp,0x10
c0016df0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016df4:	74 5c                	je     c0016e52 <VCache::write(unsigned long long, int, void*)+0x92>
c0016df6:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016df9:	89 e8                	mov    eax,ebp
c0016dfb:	99                   	cdq    
c0016dfc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016dff:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016e02:	89 c1                	mov    ecx,eax
c0016e04:	89 d0                	mov    eax,edx
c0016e06:	31 f1                	xor    ecx,esi
c0016e08:	31 f8                	xor    eax,edi
c0016e0a:	09 c1                	or     ecx,eax
c0016e0c:	75 38                	jne    c0016e46 <VCache::write(unsigned long long, int, void*)+0x86>
c0016e0e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016e13:	75 31                	jne    c0016e46 <VCache::write(unsigned long long, int, void*)+0x86>
c0016e15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e18:	89 ef                	mov    edi,ebp
c0016e1a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e20:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e24:	0f af f9             	imul   edi,ecx
c0016e27:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016e2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e2c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e2f:	40                   	inc    eax
c0016e30:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016e33:	83 c0 80             	add    eax,0xffffff80
c0016e36:	75 5c                	jne    c0016e94 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016e38:	83 ec 0c             	sub    esp,0xc
c0016e3b:	53                   	push   ebx
c0016e3c:	e8 c7 fe ff ff       	call   c0016d08 <VCache::writeWriteBuffer()>
c0016e41:	83 c4 10             	add    esp,0x10
c0016e44:	eb 4e                	jmp    c0016e94 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016e46:	83 ec 0c             	sub    esp,0xc
c0016e49:	53                   	push   ebx
c0016e4a:	e8 b9 fe ff ff       	call   c0016d08 <VCache::writeWriteBuffer()>
c0016e4f:	83 c4 10             	add    esp,0x10
c0016e52:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e55:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016e5a:	7f 22                	jg     c0016e7e <VCache::write(unsigned long long, int, void*)+0xbe>
c0016e5c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016e5f:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016e62:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016e66:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016e6a:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016e6d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016e70:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e76:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e7c:	eb 16                	jmp    c0016e94 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016e7e:	83 ec 0c             	sub    esp,0xc
c0016e81:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016e87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016e8b:	57                   	push   edi
c0016e8c:	56                   	push   esi
c0016e8d:	50                   	push   eax
c0016e8e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016e91:	83 c4 20             	add    esp,0x20
c0016e94:	83 ec 0c             	sub    esp,0xc
c0016e97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e9a:	e8 8b 7d 00 00       	call   c001ec2a <Semaphore::release()>
c0016e9f:	83 c4 1c             	add    esp,0x1c
c0016ea2:	31 c0                	xor    eax,eax
c0016ea4:	5b                   	pop    ebx
c0016ea5:	5e                   	pop    esi
c0016ea6:	5f                   	pop    edi
c0016ea7:	5d                   	pop    ebp
c0016ea8:	c3                   	ret    
c0016ea9:	90                   	nop

c0016eaa <VCache::read(unsigned long long, int, void*)>:
c0016eaa:	55                   	push   ebp
c0016eab:	57                   	push   edi
c0016eac:	56                   	push   esi
c0016ead:	53                   	push   ebx
c0016eae:	83 ec 28             	sub    esp,0x28
c0016eb1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016eb5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016eb9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ebd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016ec1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016ec4:	e8 27 76 00 00       	call   c001e4f0 <Semaphore::acquire()>
c0016ec9:	83 c4 10             	add    esp,0x10
c0016ecc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016ed0:	74 0c                	je     c0016ede <VCache::read(unsigned long long, int, void*)+0x34>
c0016ed2:	83 ec 0c             	sub    esp,0xc
c0016ed5:	53                   	push   ebx
c0016ed6:	e8 2d fe ff ff       	call   c0016d08 <VCache::writeWriteBuffer()>
c0016edb:	83 c4 10             	add    esp,0x10
c0016ede:	83 fd 01             	cmp    ebp,0x1
c0016ee1:	0f 85 80 00 00 00    	jne    c0016f67 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016ee7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016eea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016eee:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016ef5:	75 70                	jne    c0016f67 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016ef7:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016efa:	89 e9                	mov    ecx,ebp
c0016efc:	f7 d9                	neg    ecx
c0016efe:	89 c8                	mov    eax,ecx
c0016f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016f04:	c1 f8 1f             	sar    eax,0x1f
c0016f07:	21 f1                	and    ecx,esi
c0016f09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f0d:	89 c8                	mov    eax,ecx
c0016f0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f13:	21 f9                	and    ecx,edi
c0016f15:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016f19:	89 ca                	mov    edx,ecx
c0016f1b:	74 0a                	je     c0016f27 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016f1d:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016f20:	75 05                	jne    c0016f27 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016f22:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016f25:	74 23                	je     c0016f4a <VCache::read(unsigned long long, int, void*)+0xa0>
c0016f27:	83 ec 0c             	sub    esp,0xc
c0016f2a:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016f2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016f32:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016f35:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016f38:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016f3a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016f3d:	55                   	push   ebp
c0016f3e:	52                   	push   edx
c0016f3f:	50                   	push   eax
c0016f40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016f44:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016f47:	83 c4 20             	add    esp,0x20
c0016f4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f4d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016f51:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016f57:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f5a:	48                   	dec    eax
c0016f5b:	21 c6                	and    esi,eax
c0016f5d:	0f af f1             	imul   esi,ecx
c0016f60:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016f63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f65:	eb 1d                	jmp    c0016f84 <VCache::read(unsigned long long, int, void*)+0xda>
c0016f67:	83 ec 0c             	sub    esp,0xc
c0016f6a:	53                   	push   ebx
c0016f6b:	e8 88 fd ff ff       	call   c0016cf8 <VCache::invalidateReadBuffer()>
c0016f70:	5a                   	pop    edx
c0016f71:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f74:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f76:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016f7a:	55                   	push   ebp
c0016f7b:	57                   	push   edi
c0016f7c:	56                   	push   esi
c0016f7d:	50                   	push   eax
c0016f7e:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016f81:	83 c4 20             	add    esp,0x20
c0016f84:	83 ec 0c             	sub    esp,0xc
c0016f87:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f8a:	e8 9b 7c 00 00       	call   c001ec2a <Semaphore::release()>
c0016f8f:	83 c4 2c             	add    esp,0x2c
c0016f92:	31 c0                	xor    eax,eax
c0016f94:	5b                   	pop    ebx
c0016f95:	5e                   	pop    esi
c0016f96:	5f                   	pop    edi
c0016f97:	5d                   	pop    ebp
c0016f98:	c3                   	ret    
c0016f99:	90                   	nop

c0016f9a <Video::putrect(int, int, int, int, unsigned int)>:
c0016f9a:	55                   	push   ebp
c0016f9b:	57                   	push   edi
c0016f9c:	56                   	push   esi
c0016f9d:	53                   	push   ebx
c0016f9e:	83 ec 1c             	sub    esp,0x1c
c0016fa1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016fa5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fa9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016fad:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016fb1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fb9:	01 df                	add    edi,ebx
c0016fbb:	39 fb                	cmp    ebx,edi
c0016fbd:	7d 1f                	jge    c0016fde <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016fbf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016fc3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016fc7:	7d 12                	jge    c0016fdb <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016fc9:	8b 16                	mov    edx,DWORD PTR [esi]
c0016fcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016fcf:	53                   	push   ebx
c0016fd0:	55                   	push   ebp
c0016fd1:	45                   	inc    ebp
c0016fd2:	56                   	push   esi
c0016fd3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016fd6:	83 c4 10             	add    esp,0x10
c0016fd9:	eb e8                	jmp    c0016fc3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016fdb:	43                   	inc    ebx
c0016fdc:	eb dd                	jmp    c0016fbb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016fde:	83 c4 1c             	add    esp,0x1c
c0016fe1:	5b                   	pop    ebx
c0016fe2:	5e                   	pop    esi
c0016fe3:	5f                   	pop    edi
c0016fe4:	5d                   	pop    ebp
c0016fe5:	c3                   	ret    

c0016fe6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016fe6:	55                   	push   ebp
c0016fe7:	57                   	push   edi
c0016fe8:	31 ff                	xor    edi,edi
c0016fea:	56                   	push   esi
c0016feb:	53                   	push   ebx
c0016fec:	83 ec 1c             	sub    esp,0x1c
c0016fef:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ff3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ff7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ffe:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017007:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001700b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001700f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017012:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017016:	01 f9                	add    ecx,edi
c0017018:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001701c:	7d 2f                	jge    c001704d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001701e:	31 f6                	xor    esi,esi
c0017020:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017024:	01 f2                	add    edx,esi
c0017026:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001702a:	7d 1a                	jge    c0017046 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001702c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001702f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017032:	46                   	inc    esi
c0017033:	51                   	push   ecx
c0017034:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017038:	52                   	push   edx
c0017039:	55                   	push   ebp
c001703a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001703d:	83 c4 10             	add    esp,0x10
c0017040:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017044:	eb da                	jmp    c0017020 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017046:	47                   	inc    edi
c0017047:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001704b:	eb c5                	jmp    c0017012 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001704d:	83 c4 1c             	add    esp,0x1c
c0017050:	5b                   	pop    ebx
c0017051:	5e                   	pop    esi
c0017052:	5f                   	pop    edi
c0017053:	5d                   	pop    ebp
c0017054:	c3                   	ret    
c0017055:	90                   	nop

c0017056 <Video::blit(unsigned int*, int, int, int, int)>:
c0017056:	55                   	push   ebp
c0017057:	57                   	push   edi
c0017058:	56                   	push   esi
c0017059:	53                   	push   ebx
c001705a:	83 ec 1c             	sub    esp,0x1c
c001705d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017061:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017065:	85 c0                	test   eax,eax
c0017067:	79 02                	jns    c001706b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017069:	31 c0                	xor    eax,eax
c001706b:	c1 e0 02             	shl    eax,0x2
c001706e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017072:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017076:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001707a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001707e:	39 d8                	cmp    eax,ebx
c0017080:	7e 49                	jle    c00170cb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017082:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017088:	7c 41                	jl     c00170cb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001708a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001708e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017092:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017096:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001709a:	39 f9                	cmp    ecx,edi
c001709c:	7e 22                	jle    c00170c0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001709e:	83 c5 04             	add    ebp,0x4
c00170a1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00170a7:	7c 14                	jl     c00170bd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00170a9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00170ab:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00170ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00170b6:	56                   	push   esi
c00170b7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00170ba:	83 c4 10             	add    esp,0x10
c00170bd:	47                   	inc    edi
c00170be:	eb d2                	jmp    c0017092 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00170c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170c4:	43                   	inc    ebx
c00170c5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00170c9:	eb ab                	jmp    c0017076 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00170cb:	83 c4 1c             	add    esp,0x1c
c00170ce:	5b                   	pop    ebx
c00170cf:	5e                   	pop    esi
c00170d0:	5f                   	pop    edi
c00170d1:	5d                   	pop    ebp
c00170d2:	c3                   	ret    
c00170d3:	90                   	nop

c00170d4 <Video::clearScreen(unsigned int)>:
c00170d4:	57                   	push   edi
c00170d5:	56                   	push   esi
c00170d6:	53                   	push   ebx
c00170d7:	31 db                	xor    ebx,ebx
c00170d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00170dd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00170e3:	7e 1f                	jle    c0017104 <Video::clearScreen(unsigned int)+0x30>
c00170e5:	31 ff                	xor    edi,edi
c00170e7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00170ed:	7e 12                	jle    c0017101 <Video::clearScreen(unsigned int)+0x2d>
c00170ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00170f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170f5:	53                   	push   ebx
c00170f6:	57                   	push   edi
c00170f7:	47                   	inc    edi
c00170f8:	56                   	push   esi
c00170f9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170fc:	83 c4 10             	add    esp,0x10
c00170ff:	eb e6                	jmp    c00170e7 <Video::clearScreen(unsigned int)+0x13>
c0017101:	43                   	inc    ebx
c0017102:	eb d9                	jmp    c00170dd <Video::clearScreen(unsigned int)+0x9>
c0017104:	5b                   	pop    ebx
c0017105:	5e                   	pop    esi
c0017106:	5f                   	pop    edi
c0017107:	c3                   	ret    

c0017108 <Video::putpixel(int, int, unsigned int)>:
c0017108:	c7 44 24 04 a0 be 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bea0
c0017110:	e9 f0 32 00 00       	jmp    c001a405 <Krnl::panic(char const*)>
c0017115:	90                   	nop

c0017116 <Video::Video(char const*)>:
c0017116:	83 ec 0c             	sub    esp,0xc
c0017119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001711d:	83 ec 08             	sub    esp,0x8
c0017120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017124:	50                   	push   eax
c0017125:	e8 f8 ce ff ff       	call   c0014022 <Device::Device(char const*)>
c001712a:	83 c4 10             	add    esp,0x10
c001712d:	ba 24 bf 02 c0       	mov    edx,0xc002bf24
c0017132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017136:	89 10                	mov    DWORD PTR [eax],edx
c0017138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001713c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017146:	90                   	nop
c0017147:	83 c4 0c             	add    esp,0xc
c001714a:	c3                   	ret    
c001714b:	90                   	nop

c001714c <Video::~Video()>:
c001714c:	83 ec 0c             	sub    esp,0xc
c001714f:	ba 24 bf 02 c0       	mov    edx,0xc002bf24
c0017154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017158:	89 10                	mov    DWORD PTR [eax],edx
c001715a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001715e:	83 ec 0c             	sub    esp,0xc
c0017161:	50                   	push   eax
c0017162:	e8 85 cb ff ff       	call   c0013cec <Device::~Device()>
c0017167:	83 c4 10             	add    esp,0x10
c001716a:	90                   	nop
c001716b:	83 c4 0c             	add    esp,0xc
c001716e:	c3                   	ret    
c001716f:	90                   	nop

c0017170 <Video::~Video()>:
c0017170:	83 ec 0c             	sub    esp,0xc
c0017173:	83 ec 0c             	sub    esp,0xc
c0017176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001717a:	e8 cd ff ff ff       	call   c001714c <Video::~Video()>
c001717f:	83 c4 10             	add    esp,0x10
c0017182:	83 ec 08             	sub    esp,0x8
c0017185:	68 64 01 00 00       	push   0x164
c001718a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001718e:	e8 72 b7 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0017193:	83 c4 10             	add    esp,0x10
c0017196:	83 c4 0c             	add    esp,0xc
c0017199:	c3                   	ret    

c001719a <Video::isMonochrome()>:
c001719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001719e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00171a4:	c3                   	ret    
c00171a5:	90                   	nop

c00171a6 <Video::getWidth()>:
c00171a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00171b0:	c3                   	ret    
c00171b1:	90                   	nop

c00171b2 <Video::getHeight()>:
c00171b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00171b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171bc:	c3                   	ret    
c00171bd:	90                   	nop

c00171be <Video::drawCursor(int, int, unsigned char*, int)>:
c00171be:	55                   	push   ebp
c00171bf:	57                   	push   edi
c00171c0:	56                   	push   esi
c00171c1:	53                   	push   ebx
c00171c2:	83 ec 2c             	sub    esp,0x2c
c00171c5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00171c9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00171cd:	83 f8 01             	cmp    eax,0x1
c00171d0:	19 c9                	sbb    ecx,ecx
c00171d2:	31 db                	xor    ebx,ebx
c00171d4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00171d8:	89 cd                	mov    ebp,ecx
c00171da:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00171e2:	f7 d5                	not    ebp
c00171e4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00171ea:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00171ee:	01 d8                	add    eax,ebx
c00171f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171f4:	56                   	push   esi
c00171f5:	e8 b8 ff ff ff       	call   c00171b2 <Video::getHeight()>
c00171fa:	59                   	pop    ecx
c00171fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00171ff:	7e 70                	jle    c0017271 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017201:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017205:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017209:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001720c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017210:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017214:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001721b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001721f:	89 f8                	mov    eax,edi
c0017221:	83 c0 20             	add    eax,0x20
c0017224:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017228:	56                   	push   esi
c0017229:	e8 78 ff ff ff       	call   c00171a6 <Video::getWidth()>
c001722e:	5a                   	pop    edx
c001722f:	39 c7                	cmp    edi,eax
c0017231:	7d 34                	jge    c0017267 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017233:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017238:	74 05                	je     c001723f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001723a:	8b 06                	mov    eax,DWORD PTR [esi]
c001723c:	55                   	push   ebp
c001723d:	eb 0d                	jmp    c001724c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001723f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017244:	74 12                	je     c0017258 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017246:	8b 06                	mov    eax,DWORD PTR [esi]
c0017248:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001724c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017250:	57                   	push   edi
c0017251:	56                   	push   esi
c0017252:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017255:	83 c4 10             	add    esp,0x10
c0017258:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001725c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017260:	47                   	inc    edi
c0017261:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017265:	75 c1                	jne    c0017228 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017267:	43                   	inc    ebx
c0017268:	83 fb 20             	cmp    ebx,0x20
c001726b:	0f 85 79 ff ff ff    	jne    c00171ea <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017271:	83 c4 2c             	add    esp,0x2c
c0017274:	5b                   	pop    ebx
c0017275:	5e                   	pop    esi
c0017276:	5f                   	pop    edi
c0017277:	5d                   	pop    ebp
c0017278:	c3                   	ret    
c0017279:	90                   	nop

c001727a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001727a:	55                   	push   ebp
c001727b:	57                   	push   edi
c001727c:	56                   	push   esi
c001727d:	53                   	push   ebx
c001727e:	83 ec 28             	sub    esp,0x28
c0017281:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017285:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017289:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001728d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017291:	c1 e7 08             	shl    edi,0x8
c0017294:	01 c7                	add    edi,eax
c0017296:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001729a:	c1 e0 08             	shl    eax,0x8
c001729d:	01 d0                	add    eax,edx
c001729f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172a7:	0f af c7             	imul   eax,edi
c00172aa:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00172b1:	50                   	push   eax
c00172b2:	e8 4b 86 ff ff       	call   c000f902 <malloc>
c00172b7:	83 c4 10             	add    esp,0x10
c00172ba:	89 c5                	mov    ebp,eax
c00172bc:	85 c0                	test   eax,eax
c00172be:	75 15                	jne    c00172d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00172c0:	83 ec 0c             	sub    esp,0xc
c00172c3:	68 c1 be 02 c0       	push   0xc002bec1
c00172c8:	e8 18 b7 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00172cd:	83 c4 10             	add    esp,0x10
c00172d0:	e9 1c 01 00 00       	jmp    c00173f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00172d5:	be 12 00 00 00       	mov    esi,0x12
c00172da:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00172de:	74 11                	je     c00172f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00172e0:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00172e4:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00172e8:	c1 fe 03             	sar    esi,0x3
c00172eb:	0f af f0             	imul   esi,eax
c00172ee:	83 c6 12             	add    esi,0x12
c00172f1:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00172f5:	74 04                	je     c00172fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00172f7:	85 ff                	test   edi,edi
c00172f9:	75 12                	jne    c001730d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00172fb:	83 ec 0c             	sub    esp,0xc
c00172fe:	68 d8 be 02 c0       	push   0xc002bed8
c0017303:	e8 dd b6 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0017308:	e9 ce 00 00 00       	jmp    c00173db <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001730d:	52                   	push   edx
c001730e:	52                   	push   edx
c001730f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017313:	50                   	push   eax
c0017314:	68 ed be 02 c0       	push   0xc002beed
c0017319:	e8 c7 b6 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001731e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017322:	83 c4 10             	add    esp,0x10
c0017325:	80 fa 02             	cmp    dl,0x2
c0017328:	0f 85 98 00 00 00    	jne    c00173c6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001732e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017333:	75 10                	jne    c0017345 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017335:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017339:	75 0a                	jne    c0017345 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001733b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001733e:	83 e8 18             	sub    eax,0x18
c0017341:	a8 f7                	test   al,0xf7
c0017343:	74 0a                	je     c001734f <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017345:	83 ec 0c             	sub    esp,0xc
c0017348:	68 fa be 02 c0       	push   0xc002befa
c001734d:	eb 7f                	jmp    c00173ce <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001734f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017357:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001735f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017363:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001736b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001736f:	75 0c                	jne    c001737d <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017371:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017376:	c1 e0 18             	shl    eax,0x18
c0017379:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001737d:	41                   	inc    ecx
c001737e:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017383:	c1 e2 10             	shl    edx,0x10
c0017386:	89 d0                	mov    eax,edx
c0017388:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001738d:	c1 e2 08             	shl    edx,0x8
c0017390:	09 c2                	or     edx,eax
c0017392:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017396:	09 c2                	or     edx,eax
c0017398:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001739c:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00173a0:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00173a4:	c1 f8 03             	sar    eax,0x3
c00173a7:	01 c6                	add    esi,eax
c00173a9:	89 c8                	mov    eax,ecx
c00173ab:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00173af:	39 c7                	cmp    edi,eax
c00173b1:	7f b0                	jg     c0017363 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00173b3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00173b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00173bb:	39 14 24             	cmp    DWORD PTR [esp],edx
c00173be:	7e 22                	jle    c00173e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00173c0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00173c4:	eb 99                	jmp    c001735f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00173c6:	50                   	push   eax
c00173c7:	50                   	push   eax
c00173c8:	52                   	push   edx
c00173c9:	68 08 bf 02 c0       	push   0xc002bf08
c00173ce:	e8 12 b6 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00173d3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173d6:	e8 37 85 ff ff       	call   c000f912 <free>
c00173db:	83 c4 10             	add    esp,0x10
c00173de:	31 ed                	xor    ebp,ebp
c00173e0:	eb 0f                	jmp    c00173f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00173e2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173e6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00173e9:	89 38                	mov    DWORD PTR [eax],edi
c00173eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173ef:	89 08                	mov    DWORD PTR [eax],ecx
c00173f1:	83 c4 1c             	add    esp,0x1c
c00173f4:	89 e8                	mov    eax,ebp
c00173f6:	5b                   	pop    ebx
c00173f7:	5e                   	pop    esi
c00173f8:	5f                   	pop    edi
c00173f9:	5d                   	pop    ebp
c00173fa:	c3                   	ret    
c00173fb:	90                   	nop

c00173fc <Video::putTGA(int, int, unsigned char*, int)>:
c00173fc:	55                   	push   ebp
c00173fd:	57                   	push   edi
c00173fe:	56                   	push   esi
c00173ff:	53                   	push   ebx
c0017400:	83 ec 28             	sub    esp,0x28
c0017403:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017407:	8d 44 24 18          	lea    eax,[esp+0x18]
c001740b:	50                   	push   eax
c001740c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017410:	50                   	push   eax
c0017411:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017415:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017419:	56                   	push   esi
c001741a:	e8 5b fe ff ff       	call   c001727a <Video::tgaParse(unsigned char*, int, int*, int*)>
c001741f:	83 c4 20             	add    esp,0x20
c0017422:	85 c0                	test   eax,eax
c0017424:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017428:	74 35                	je     c001745f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001742a:	89 c7                	mov    edi,eax
c001742c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017430:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017434:	39 d8                	cmp    eax,ebx
c0017436:	7e 27                	jle    c001745f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017438:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001743c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017440:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017444:	39 e8                	cmp    eax,ebp
c0017446:	7e 14                	jle    c001745c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017448:	8b 06                	mov    eax,DWORD PTR [esi]
c001744a:	83 c7 04             	add    edi,0x4
c001744d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017450:	53                   	push   ebx
c0017451:	55                   	push   ebp
c0017452:	45                   	inc    ebp
c0017453:	56                   	push   esi
c0017454:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017457:	83 c4 10             	add    esp,0x10
c001745a:	eb e0                	jmp    c001743c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001745c:	43                   	inc    ebx
c001745d:	eb cd                	jmp    c001742c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001745f:	83 c4 1c             	add    esp,0x1c
c0017462:	5b                   	pop    ebx
c0017463:	5e                   	pop    esi
c0017464:	5f                   	pop    edi
c0017465:	5d                   	pop    ebp
c0017466:	c3                   	ret    
c0017467:	90                   	nop

c0017468 <ACPI::close(int, int, void*)>:
c0017468:	83 ec 1c             	sub    esp,0x1c
c001746b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017473:	74 0a                	je     c001747f <ACPI::close(int, int, void*)+0x17>
c0017475:	b8 00 00 00 00       	mov    eax,0x0
c001747a:	e9 9a 00 00 00       	jmp    c0017519 <ACPI::close(int, int, void*)+0xb1>
c001747f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017484:	75 37                	jne    c00174bd <ACPI::close(int, int, void*)+0x55>
c0017486:	83 ec 0c             	sub    esp,0xc
c0017489:	68 64 bf 02 c0       	push   0xc002bf64
c001748e:	e8 52 b5 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0017493:	83 c4 10             	add    esp,0x10
c0017496:	a1 08 19 03 c0       	mov    eax,ds:0xc0031908
c001749b:	85 c0                	test   eax,eax
c001749d:	74 07                	je     c00174a6 <ACPI::close(int, int, void*)+0x3e>
c001749f:	a1 08 19 03 c0       	mov    eax,ds:0xc0031908
c00174a4:	ff d0                	call   eax
c00174a6:	83 ec 0c             	sub    esp,0xc
c00174a9:	68 c8 c0 02 c0       	push   0xc002c0c8
c00174ae:	e8 52 2f 00 00       	call   c001a405 <Krnl::panic(char const*)>
c00174b3:	83 c4 10             	add    esp,0x10
c00174b6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00174bb:	eb 5c                	jmp    c0017519 <ACPI::close(int, int, void*)+0xb1>
c00174bd:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00174c2:	75 50                	jne    c0017514 <ACPI::close(int, int, void*)+0xac>
c00174c4:	a1 04 19 03 c0       	mov    eax,ds:0xc0031904
c00174c9:	85 c0                	test   eax,eax
c00174cb:	74 07                	je     c00174d4 <ACPI::close(int, int, void*)+0x6c>
c00174cd:	a1 04 19 03 c0       	mov    eax,ds:0xc0031904
c00174d2:	ff d0                	call   eax
c00174d4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00174d9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00174de:	83 e0 02             	and    eax,0x2
c00174e1:	74 1c                	je     c00174ff <ACPI::close(int, int, void*)+0x97>
c00174e3:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00174ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174ee:	89 c2                	mov    edx,eax
c00174f0:	ec                   	in     al,dx
c00174f1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00174f5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00174f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00174fd:	eb da                	jmp    c00174d9 <ACPI::close(int, int, void*)+0x71>
c00174ff:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017506:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001750b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001750f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017513:	ee                   	out    dx,al
c0017514:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017519:	83 c4 1c             	add    esp,0x1c
c001751c:	c3                   	ret    

c001751d <findRSDP()>:
c001751d:	83 ec 1c             	sub    esp,0x1c
c0017520:	83 ec 0c             	sub    esp,0xc
c0017523:	68 71 bf 02 c0       	push   0xc002bf71
c0017528:	e8 b8 b4 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0017535:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001753b:	83 e0 04             	and    eax,0x4
c001753e:	84 c0                	test   al,al
c0017540:	75 07                	jne    c0017549 <findRSDP()+0x2c>
c0017542:	b8 00 00 00 00       	mov    eax,0x0
c0017547:	eb 6a                	jmp    c00175b3 <findRSDP()+0x96>
c0017549:	a1 b4 f2 02 c0       	mov    eax,ds:0xc002f2b4
c001754e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017553:	7f 1b                	jg     c0017570 <findRSDP()+0x53>
c0017555:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001755a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017560:	83 e2 fb             	and    edx,0xfffffffb
c0017563:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017569:	b8 00 00 00 00       	mov    eax,0x0
c001756e:	eb 43                	jmp    c00175b3 <findRSDP()+0x96>
c0017570:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017578:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017580:	77 2c                	ja     c00175ae <findRSDP()+0x91>
c0017582:	83 ec 04             	sub    esp,0x4
c0017585:	6a 08                	push   0x8
c0017587:	68 7f bf 02 c0       	push   0xc002bf7f
c001758c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017590:	e8 b7 90 fe ff       	call   c000064c <memcmp>
c0017595:	83 c4 10             	add    esp,0x10
c0017598:	85 c0                	test   eax,eax
c001759a:	0f 94 c0             	sete   al
c001759d:	84 c0                	test   al,al
c001759f:	74 06                	je     c00175a7 <findRSDP()+0x8a>
c00175a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175a5:	eb 0c                	jmp    c00175b3 <findRSDP()+0x96>
c00175a7:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00175ac:	eb ca                	jmp    c0017578 <findRSDP()+0x5b>
c00175ae:	b8 00 00 00 00       	mov    eax,0x0
c00175b3:	83 c4 1c             	add    esp,0x1c
c00175b6:	c3                   	ret    

c00175b7 <loadACPITables(unsigned char*)>:
c00175b7:	57                   	push   edi
c00175b8:	56                   	push   esi
c00175b9:	53                   	push   ebx
c00175ba:	83 ec 60             	sub    esp,0x60
c00175bd:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00175c2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175c8:	83 e0 04             	and    eax,0x4
c00175cb:	84 c0                	test   al,al
c00175cd:	0f 84 33 02 00 00    	je     c0017806 <loadACPITables(unsigned char*)+0x24f>
c00175d3:	a0 20 1b 03 c0       	mov    al,ds:0xc0031b20
c00175d8:	84 c0                	test   al,al
c00175da:	74 75                	je     c0017651 <loadACPITables(unsigned char*)+0x9a>
c00175dc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00175e0:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00175e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175eb:	83 e8 24             	sub    eax,0x24
c00175ee:	c1 e8 03             	shr    eax,0x3
c00175f1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00175f5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00175fd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017601:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017605:	0f 8d b2 00 00 00    	jge    c00176bd <loadACPITables(unsigned char*)+0x106>
c001760b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001760f:	83 c0 24             	add    eax,0x24
c0017612:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017616:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001761a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001761e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017622:	c1 e0 03             	shl    eax,0x3
c0017625:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017629:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001762d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017630:	8b 00                	mov    eax,DWORD PTR [eax]
c0017632:	89 c1                	mov    ecx,eax
c0017634:	a1 0c 19 03 c0       	mov    eax,ds:0xc003190c
c0017639:	8d 50 01             	lea    edx,[eax+0x1]
c001763c:	89 15 0c 19 03 c0    	mov    DWORD PTR ds:0xc003190c,edx
c0017642:	89 ca                	mov    edx,ecx
c0017644:	89 14 c5 24 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce6dc],edx
c001764b:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001764f:	eb ac                	jmp    c00175fd <loadACPITables(unsigned char*)+0x46>
c0017651:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017655:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017659:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001765d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017660:	83 e8 24             	sub    eax,0x24
c0017663:	c1 e8 02             	shr    eax,0x2
c0017666:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001766a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017672:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017676:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001767a:	7d 41                	jge    c00176bd <loadACPITables(unsigned char*)+0x106>
c001767c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017680:	83 c0 24             	add    eax,0x24
c0017683:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017687:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001768b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001768f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017693:	c1 e0 02             	shl    eax,0x2
c0017696:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001769a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001769e:	8b 08                	mov    ecx,DWORD PTR [eax]
c00176a0:	a1 0c 19 03 c0       	mov    eax,ds:0xc003190c
c00176a5:	8d 50 01             	lea    edx,[eax+0x1]
c00176a8:	89 15 0c 19 03 c0    	mov    DWORD PTR ds:0xc003190c,edx
c00176ae:	89 ca                	mov    edx,ecx
c00176b0:	89 14 c5 24 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce6dc],edx
c00176b7:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00176bb:	eb b5                	jmp    c0017672 <loadACPITables(unsigned char*)+0xbb>
c00176bd:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00176c5:	a1 0c 19 03 c0       	mov    eax,ds:0xc003190c
c00176ca:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00176ce:	0f 8d 33 01 00 00    	jge    c0017807 <loadACPITables(unsigned char*)+0x250>
c00176d4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176d8:	8b 04 c5 24 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce6dc]
c00176df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00176eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00176ef:	25 ff 0f 00 00       	and    eax,0xfff
c00176f4:	89 c6                	mov    esi,eax
c00176f6:	8b 1d d0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3d0
c00176fc:	83 ec 0c             	sub    esp,0xc
c00176ff:	6a 01                	push   0x1
c0017701:	e8 d9 9e ff ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c0017706:	83 c4 10             	add    esp,0x10
c0017709:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001770d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017713:	83 ec 0c             	sub    esp,0xc
c0017716:	6a 01                	push   0x1
c0017718:	6a 01                	push   0x1
c001771a:	50                   	push   eax
c001771b:	52                   	push   edx
c001771c:	53                   	push   ebx
c001771d:	e8 ea a9 ff ff       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017722:	83 c4 20             	add    esp,0x20
c0017725:	09 f0                	or     eax,esi
c0017727:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001772b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001772f:	c1 e0 03             	shl    eax,0x3
c0017732:	05 20 19 03 c0       	add    eax,0xc0031920
c0017737:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001773b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001773f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017743:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001774b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001774f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017753:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017757:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001775b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001775f:	89 c6                	mov    esi,eax
c0017761:	89 d7                	mov    edi,edx
c0017763:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017765:	89 c8                	mov    eax,ecx
c0017767:	89 fa                	mov    edx,edi
c0017769:	89 f3                	mov    ebx,esi
c001776b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001776f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017773:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017777:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001777b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001777e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017782:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017786:	05 00 10 00 00       	add    eax,0x1000
c001778b:	c1 e8 0c             	shr    eax,0xc
c001778e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017792:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017796:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001779a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001779e:	25 ff 0f 00 00       	and    eax,0xfff
c00177a3:	89 c6                	mov    esi,eax
c00177a5:	8b 1d d0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3d0
c00177ab:	83 ec 0c             	sub    esp,0xc
c00177ae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00177b2:	e8 28 9e ff ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c00177b7:	83 c4 10             	add    esp,0x10
c00177ba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177be:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177c4:	83 ec 0c             	sub    esp,0xc
c00177c7:	6a 01                	push   0x1
c00177c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00177cd:	50                   	push   eax
c00177ce:	52                   	push   edx
c00177cf:	53                   	push   ebx
c00177d0:	e8 37 a9 ff ff       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177d5:	83 c4 20             	add    esp,0x20
c00177d8:	09 f0                	or     eax,esi
c00177da:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177e2:	83 ec 0c             	sub    esp,0xc
c00177e5:	50                   	push   eax
c00177e6:	e8 b4 a2 ff ff       	call   c0011a9f <Virt::freeKernelVirtualPages(unsigned long)>
c00177eb:	83 c4 10             	add    esp,0x10
c00177ee:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00177f2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00177f6:	89 14 c5 24 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce6dc],edx
c00177fd:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017801:	e9 bf fe ff ff       	jmp    c00176c5 <loadACPITables(unsigned char*)+0x10e>
c0017806:	90                   	nop
c0017807:	83 c4 60             	add    esp,0x60
c001780a:	5b                   	pop    ebx
c001780b:	5e                   	pop    esi
c001780c:	5f                   	pop    edi
c001780d:	c3                   	ret    

c001780e <findRSDT(unsigned char*)>:
c001780e:	57                   	push   edi
c001780f:	56                   	push   esi
c0017810:	53                   	push   ebx
c0017811:	83 ec 50             	sub    esp,0x50
c0017814:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0017819:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001781f:	83 e0 04             	and    eax,0x4
c0017822:	84 c0                	test   al,al
c0017824:	75 0a                	jne    c0017830 <findRSDT(unsigned char*)+0x22>
c0017826:	b8 00 00 00 00       	mov    eax,0x0
c001782b:	e9 21 01 00 00       	jmp    c0017951 <findRSDT(unsigned char*)+0x143>
c0017830:	89 e0                	mov    eax,esp
c0017832:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017836:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001783a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001783e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017846:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001784a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001784e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017852:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017856:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001785a:	89 c6                	mov    esi,eax
c001785c:	89 d7                	mov    edi,edx
c001785e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017860:	89 c8                	mov    eax,ecx
c0017862:	89 fa                	mov    edx,edi
c0017864:	89 f3                	mov    ebx,esi
c0017866:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001786a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001786e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017872:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017876:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001787a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017882:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017886:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001788a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001788e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017892:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017896:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001789a:	25 ff 0f 00 00       	and    eax,0xfff
c001789f:	89 c6                	mov    esi,eax
c00178a1:	8b 1d d0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3d0
c00178a7:	83 ec 0c             	sub    esp,0xc
c00178aa:	6a 02                	push   0x2
c00178ac:	e8 2e 9d ff ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c00178b1:	83 c4 10             	add    esp,0x10
c00178b4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00178b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00178be:	83 ec 0c             	sub    esp,0xc
c00178c1:	6a 01                	push   0x1
c00178c3:	6a 02                	push   0x2
c00178c5:	50                   	push   eax
c00178c6:	52                   	push   edx
c00178c7:	53                   	push   ebx
c00178c8:	e8 3f a8 ff ff       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00178cd:	83 c4 20             	add    esp,0x20
c00178d0:	09 f0                	or     eax,esi
c00178d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00178d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00178da:	25 ff 0f 00 00       	and    eax,0xfff
c00178df:	89 c6                	mov    esi,eax
c00178e1:	8b 1d d0 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3d0
c00178e7:	83 ec 0c             	sub    esp,0xc
c00178ea:	6a 02                	push   0x2
c00178ec:	e8 ee 9c ff ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c00178f1:	83 c4 10             	add    esp,0x10
c00178f4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00178f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00178fe:	83 ec 0c             	sub    esp,0xc
c0017901:	6a 01                	push   0x1
c0017903:	6a 02                	push   0x2
c0017905:	50                   	push   eax
c0017906:	52                   	push   edx
c0017907:	53                   	push   ebx
c0017908:	e8 ff a7 ff ff       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001790d:	83 c4 20             	add    esp,0x20
c0017910:	09 f0                	or     eax,esi
c0017912:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017916:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c001791b:	75 11                	jne    c001792e <findRSDT(unsigned char*)+0x120>
c001791d:	c6 05 20 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031b20,0x0
c0017924:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017928:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001792c:	eb 1f                	jmp    c001794d <findRSDT(unsigned char*)+0x13f>
c001792e:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017933:	75 11                	jne    c0017946 <findRSDT(unsigned char*)+0x138>
c0017935:	c6 05 20 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b20,0x1
c001793c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017940:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017944:	eb 07                	jmp    c001794d <findRSDT(unsigned char*)+0x13f>
c0017946:	b8 00 00 00 00       	mov    eax,0x0
c001794b:	eb 04                	jmp    c0017951 <findRSDT(unsigned char*)+0x143>
c001794d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017951:	83 c4 50             	add    esp,0x50
c0017954:	5b                   	pop    ebx
c0017955:	5e                   	pop    esi
c0017956:	5f                   	pop    edi
c0017957:	c3                   	ret    

c0017958 <findDataTable(unsigned char*, char*)>:
c0017958:	83 ec 1c             	sub    esp,0x1c
c001795b:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0017960:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017966:	83 e0 04             	and    eax,0x4
c0017969:	84 c0                	test   al,al
c001796b:	75 07                	jne    c0017974 <findDataTable(unsigned char*, char*)+0x1c>
c001796d:	b8 00 00 00 00       	mov    eax,0x0
c0017972:	eb 7c                	jmp    c00179f0 <findDataTable(unsigned char*, char*)+0x98>
c0017974:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001797c:	a1 0c 19 03 c0       	mov    eax,ds:0xc003190c
c0017981:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017985:	7d 3a                	jge    c00179c1 <findDataTable(unsigned char*, char*)+0x69>
c0017987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001798b:	c1 e0 03             	shl    eax,0x3
c001798e:	05 20 19 03 c0       	add    eax,0xc0031920
c0017993:	83 ec 04             	sub    esp,0x4
c0017996:	6a 04                	push   0x4
c0017998:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001799c:	50                   	push   eax
c001799d:	e8 aa 8c fe ff       	call   c000064c <memcmp>
c00179a2:	83 c4 10             	add    esp,0x10
c00179a5:	85 c0                	test   eax,eax
c00179a7:	0f 94 c0             	sete   al
c00179aa:	84 c0                	test   al,al
c00179ac:	74 0d                	je     c00179bb <findDataTable(unsigned char*, char*)+0x63>
c00179ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179b2:	8b 04 c5 24 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce6dc]
c00179b9:	eb 35                	jmp    c00179f0 <findDataTable(unsigned char*, char*)+0x98>
c00179bb:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00179bf:	eb bb                	jmp    c001797c <findDataTable(unsigned char*, char*)+0x24>
c00179c1:	a0 20 1b 03 c0       	mov    al,ds:0xc0031b20
c00179c6:	84 c0                	test   al,al
c00179c8:	74 07                	je     c00179d1 <findDataTable(unsigned char*, char*)+0x79>
c00179ca:	b8 58 00 00 00       	mov    eax,0x58
c00179cf:	eb 05                	jmp    c00179d6 <findDataTable(unsigned char*, char*)+0x7e>
c00179d1:	b8 52 00 00 00       	mov    eax,0x52
c00179d6:	83 ec 04             	sub    esp,0x4
c00179d9:	50                   	push   eax
c00179da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00179de:	68 ec c0 02 c0       	push   0xc002c0ec
c00179e3:	e8 fd af ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00179e8:	83 c4 10             	add    esp,0x10
c00179eb:	b8 00 00 00 00       	mov    eax,0x0
c00179f0:	83 c4 1c             	add    esp,0x1c
c00179f3:	c3                   	ret    

c00179f4 <scanMADT()>:
c00179f4:	53                   	push   ebx
c00179f5:	83 ec 38             	sub    esp,0x38
c00179f8:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00179fd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a03:	83 e0 04             	and    eax,0x4
c0017a06:	84 c0                	test   al,al
c0017a08:	0f 84 63 04 00 00    	je     c0017e71 <scanMADT()+0x47d>
c0017a0e:	e8 0a fb ff ff       	call   c001751d <findRSDP()>
c0017a13:	a3 2c 1b 03 c0       	mov    ds:0xc0031b2c,eax
c0017a18:	a1 2c 1b 03 c0       	mov    eax,ds:0xc0031b2c
c0017a1d:	85 c0                	test   eax,eax
c0017a1f:	75 19                	jne    c0017a3a <scanMADT()+0x46>
c0017a21:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0017a26:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a2c:	83 e2 fb             	and    edx,0xfffffffb
c0017a2f:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a35:	e9 3b 04 00 00       	jmp    c0017e75 <scanMADT()+0x481>
c0017a3a:	a1 2c 1b 03 c0       	mov    eax,ds:0xc0031b2c
c0017a3f:	83 ec 0c             	sub    esp,0xc
c0017a42:	50                   	push   eax
c0017a43:	e8 c6 fd ff ff       	call   c001780e <findRSDT(unsigned char*)>
c0017a48:	83 c4 10             	add    esp,0x10
c0017a4b:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c0017a50:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c0017a55:	85 c0                	test   eax,eax
c0017a57:	75 19                	jne    c0017a72 <scanMADT()+0x7e>
c0017a59:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0017a5e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a64:	83 e2 fb             	and    edx,0xfffffffb
c0017a67:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a6d:	e9 03 04 00 00       	jmp    c0017e75 <scanMADT()+0x481>
c0017a72:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c0017a77:	83 ec 0c             	sub    esp,0xc
c0017a7a:	50                   	push   eax
c0017a7b:	e8 37 fb ff ff       	call   c00175b7 <loadACPITables(unsigned char*)>
c0017a80:	83 c4 10             	add    esp,0x10
c0017a83:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c0017a88:	83 ec 08             	sub    esp,0x8
c0017a8b:	68 88 bf 02 c0       	push   0xc002bf88
c0017a90:	50                   	push   eax
c0017a91:	e8 c2 fe ff ff       	call   c0017958 <findDataTable(unsigned char*, char*)>
c0017a96:	83 c4 10             	add    esp,0x10
c0017a99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a9d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017aa2:	75 19                	jne    c0017abd <scanMADT()+0xc9>
c0017aa4:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0017aa9:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017aaf:	83 e2 fe             	and    edx,0xfffffffe
c0017ab2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ab8:	e9 b8 03 00 00       	jmp    c0017e75 <scanMADT()+0x481>
c0017abd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ac5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ac9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017acc:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017ad0:	0f 87 9f 03 00 00    	ja     c0017e75 <scanMADT()+0x481>
c0017ad6:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ade:	0f 87 91 03 00 00    	ja     c0017e75 <scanMADT()+0x481>
c0017ae4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017aec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017af0:	8d 50 01             	lea    edx,[eax+0x1]
c0017af3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017af7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017afb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017aff:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017b03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b07:	8d 50 01             	lea    edx,[eax+0x1]
c0017b0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b12:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b16:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017b1a:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017b1f:	0f 86 4f 03 00 00    	jbe    c0017e74 <scanMADT()+0x480>
c0017b25:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017b2a:	75 57                	jne    c0017b83 <scanMADT()+0x18f>
c0017b2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b30:	8d 50 01             	lea    edx,[eax+0x1]
c0017b33:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b37:	8a 15 20 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d20
c0017b3d:	0f b6 d2             	movzx  edx,dl
c0017b40:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b44:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b48:	88 82 60 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce2a0],al
c0017b4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b52:	8d 50 01             	lea    edx,[eax+0x1]
c0017b55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b59:	8a 15 20 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031d20
c0017b5f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017b62:	88 0d 20 1d 03 c0    	mov    BYTE PTR ds:0xc0031d20,cl
c0017b68:	0f b6 d2             	movzx  edx,dl
c0017b6b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b6f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b73:	88 82 40 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce2c0],al
c0017b79:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b7e:	e9 da 02 00 00       	jmp    c0017e5d <scanMADT()+0x469>
c0017b83:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017b88:	0f 85 14 01 00 00    	jne    c0017ca2 <scanMADT()+0x2ae>
c0017b8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b92:	8d 50 01             	lea    edx,[eax+0x1]
c0017b95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b99:	8a 15 e0 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031be0
c0017b9f:	0f b6 d2             	movzx  edx,dl
c0017ba2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ba6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017baa:	88 82 00 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce400],al
c0017bb0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017bb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bbc:	01 d0                	add    eax,edx
c0017bbe:	83 c0 2c             	add    eax,0x2c
c0017bc1:	8a 00                	mov    al,BYTE PTR [eax]
c0017bc3:	0f b6 d0             	movzx  edx,al
c0017bc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bca:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017bd5:	0f b6 c0             	movzx  eax,al
c0017bd8:	c1 e0 08             	shl    eax,0x8
c0017bdb:	89 d1                	mov    ecx,edx
c0017bdd:	09 c1                	or     ecx,eax
c0017bdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017be3:	8d 50 02             	lea    edx,[eax+0x2]
c0017be6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bee:	0f b6 c0             	movzx  eax,al
c0017bf1:	c1 e0 10             	shl    eax,0x10
c0017bf4:	09 c1                	or     ecx,eax
c0017bf6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bfa:	8d 50 03             	lea    edx,[eax+0x3]
c0017bfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c01:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c05:	0f b6 c0             	movzx  eax,al
c0017c08:	c1 e0 18             	shl    eax,0x18
c0017c0b:	09 c1                	or     ecx,eax
c0017c0d:	89 ca                	mov    edx,ecx
c0017c0f:	a0 e0 1b 03 c0       	mov    al,ds:0xc0031be0
c0017c14:	0f b6 c0             	movzx  eax,al
c0017c17:	89 14 85 20 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce3e0],edx
c0017c1e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c23:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c2b:	01 d0                	add    eax,edx
c0017c2d:	83 c0 2c             	add    eax,0x2c
c0017c30:	8a 00                	mov    al,BYTE PTR [eax]
c0017c32:	0f b6 d0             	movzx  edx,al
c0017c35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c39:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c40:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c44:	0f b6 c0             	movzx  eax,al
c0017c47:	c1 e0 08             	shl    eax,0x8
c0017c4a:	89 d1                	mov    ecx,edx
c0017c4c:	09 c1                	or     ecx,eax
c0017c4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c52:	8d 50 02             	lea    edx,[eax+0x2]
c0017c55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c59:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c5d:	0f b6 c0             	movzx  eax,al
c0017c60:	c1 e0 10             	shl    eax,0x10
c0017c63:	09 c1                	or     ecx,eax
c0017c65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c69:	8d 50 03             	lea    edx,[eax+0x3]
c0017c6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c70:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c74:	0f b6 c0             	movzx  eax,al
c0017c77:	c1 e0 18             	shl    eax,0x18
c0017c7a:	09 c1                	or     ecx,eax
c0017c7c:	89 ca                	mov    edx,ecx
c0017c7e:	a0 e0 1b 03 c0       	mov    al,ds:0xc0031be0
c0017c83:	0f b6 c0             	movzx  eax,al
c0017c86:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0017c8d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c92:	a0 e0 1b 03 c0       	mov    al,ds:0xc0031be0
c0017c97:	40                   	inc    eax
c0017c98:	a2 e0 1b 03 c0       	mov    ds:0xc0031be0,al
c0017c9d:	e9 bb 01 00 00       	jmp    c0017e5d <scanMADT()+0x469>
c0017ca2:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017ca7:	0f 85 e9 00 00 00    	jne    c0017d96 <scanMADT()+0x3a2>
c0017cad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cb1:	8d 50 01             	lea    edx,[eax+0x1]
c0017cb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017cb8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cbc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cc0:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017cc4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cc8:	8d 50 01             	lea    edx,[eax+0x1]
c0017ccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ccf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cd3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cd7:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017cdb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ce3:	01 d0                	add    eax,edx
c0017ce5:	83 c0 2c             	add    eax,0x2c
c0017ce8:	8a 00                	mov    al,BYTE PTR [eax]
c0017cea:	0f b6 d0             	movzx  edx,al
c0017ced:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cf1:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cf4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cf8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cfc:	0f b6 c0             	movzx  eax,al
c0017cff:	c1 e0 08             	shl    eax,0x8
c0017d02:	89 d1                	mov    ecx,edx
c0017d04:	09 c1                	or     ecx,eax
c0017d06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d0a:	8d 50 02             	lea    edx,[eax+0x2]
c0017d0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d11:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d15:	0f b6 c0             	movzx  eax,al
c0017d18:	c1 e0 10             	shl    eax,0x10
c0017d1b:	09 c1                	or     ecx,eax
c0017d1d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d21:	8d 50 03             	lea    edx,[eax+0x3]
c0017d24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d28:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017d2c:	0f b6 c0             	movzx  eax,al
c0017d2f:	c1 e0 18             	shl    eax,0x18
c0017d32:	09 c8                	or     eax,ecx
c0017d34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d38:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017d3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d45:	01 d0                	add    eax,edx
c0017d47:	83 c0 2c             	add    eax,0x2c
c0017d4a:	8a 00                	mov    al,BYTE PTR [eax]
c0017d4c:	0f b6 c0             	movzx  eax,al
c0017d4f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017d53:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017d56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d5a:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017d5e:	0f b6 d2             	movzx  edx,dl
c0017d61:	c1 e2 08             	shl    edx,0x8
c0017d64:	09 d0                	or     eax,edx
c0017d66:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017d6b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d70:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017d75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017d79:	88 90 c0 e4 02 c0    	mov    BYTE PTR [eax-0x3ffd1b40],dl
c0017d7f:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017d84:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017d89:	66 89 84 12 c0 1b 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce440],ax
c0017d91:	e9 c7 00 00 00       	jmp    c0017e5d <scanMADT()+0x469>
c0017d96:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017d9b:	0f 85 b0 00 00 00    	jne    c0017e51 <scanMADT()+0x45d>
c0017da1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017da5:	8d 50 01             	lea    edx,[eax+0x1]
c0017da8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017dac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017db0:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017db4:	0f b6 c0             	movzx  eax,al
c0017db7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017dbb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dc3:	01 d0                	add    eax,edx
c0017dc5:	83 c0 2c             	add    eax,0x2c
c0017dc8:	8a 00                	mov    al,BYTE PTR [eax]
c0017dca:	0f b6 d0             	movzx  edx,al
c0017dcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017dd1:	8d 48 01             	lea    ecx,[eax+0x1]
c0017dd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017dd8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ddc:	0f b6 c0             	movzx  eax,al
c0017ddf:	c1 e0 08             	shl    eax,0x8
c0017de2:	09 d0                	or     eax,edx
c0017de4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017de8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017ded:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017df1:	8d 50 01             	lea    edx,[eax+0x1]
c0017df4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017df8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017dfc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017e00:	0f b6 c0             	movzx  eax,al
c0017e03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e0b:	c1 e0 08             	shl    eax,0x8
c0017e0e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017e12:	89 c1                	mov    ecx,eax
c0017e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e18:	c1 e0 18             	shl    eax,0x18
c0017e1b:	89 c3                	mov    ebx,eax
c0017e1d:	a1 30 1b 03 c0       	mov    eax,ds:0xc0031b30
c0017e22:	8d 50 01             	lea    edx,[eax+0x1]
c0017e25:	89 15 30 1b 03 c0    	mov    DWORD PTR ds:0xc0031b30,edx
c0017e2b:	09 d9                	or     ecx,ebx
c0017e2d:	89 ca                	mov    edx,ecx
c0017e2f:	89 14 85 40 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce4c0],edx
c0017e36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e42:	68 1c c1 02 c0       	push   0xc002c11c
c0017e47:	e8 99 ab ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0017e4c:	83 c4 10             	add    esp,0x10
c0017e4f:	eb 0c                	jmp    c0017e5d <scanMADT()+0x469>
c0017e51:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017e56:	75 05                	jne    c0017e5d <scanMADT()+0x469>
c0017e58:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017e5d:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017e62:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e66:	01 d0                	add    eax,edx
c0017e68:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017e6c:	e9 54 fc ff ff       	jmp    c0017ac5 <scanMADT()+0xd1>
c0017e71:	90                   	nop
c0017e72:	eb 01                	jmp    c0017e75 <scanMADT()+0x481>
c0017e74:	90                   	nop
c0017e75:	83 c4 38             	add    esp,0x38
c0017e78:	5b                   	pop    ebx
c0017e79:	c3                   	ret    

c0017e7a <ACPI::ACPI()>:
c0017e7a:	83 ec 0c             	sub    esp,0xc
c0017e7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e81:	83 ec 08             	sub    esp,0x8
c0017e84:	68 8d bf 02 c0       	push   0xc002bf8d
c0017e89:	50                   	push   eax
c0017e8a:	e8 93 c1 ff ff       	call   c0014022 <Device::Device(char const*)>
c0017e8f:	83 c4 10             	add    esp,0x10
c0017e92:	ba d8 c1 02 c0       	mov    edx,0xc002c1d8
c0017e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e9b:	89 10                	mov    DWORD PTR [eax],edx
c0017e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ea1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eac:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eba:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017ec4:	e8 2b fb ff ff       	call   c00179f4 <scanMADT()>
c0017ec9:	90                   	nop
c0017eca:	83 c4 0c             	add    esp,0xc
c0017ecd:	c3                   	ret    

c0017ece <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017ece:	83 ec 2c             	sub    esp,0x2c
c0017ed1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017ed5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ed9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017edd:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017ee1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017ee6:	88 d0                	mov    al,dl
c0017ee8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017eec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ef1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017ef9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017efd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f03:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017f07:	0f 8d 97 00 00 00    	jge    c0017fa4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f15:	83 c2 2a             	add    edx,0x2a
c0017f18:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017f1c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017f21:	75 78                	jne    c0017f9b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017f23:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f27:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f2b:	83 c2 2a             	add    edx,0x2a
c0017f2e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017f32:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017f36:	75 63                	jne    c0017f9b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017f38:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017f3d:	74 3a                	je     c0017f79 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017f3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f47:	83 c2 2a             	add    edx,0x2a
c0017f4a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017f4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f55:	39 c2                	cmp    edx,eax
c0017f57:	74 10                	je     c0017f69 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017f59:	83 ec 0c             	sub    esp,0xc
c0017f5c:	68 58 c1 02 c0       	push   0xc002c158
c0017f61:	e8 9f 24 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0017f66:	83 c4 10             	add    esp,0x10
c0017f69:	83 ec 0c             	sub    esp,0xc
c0017f6c:	68 92 bf 02 c0       	push   0xc002bf92
c0017f71:	e8 8f 24 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0017f76:	83 c4 10             	add    esp,0x10
c0017f79:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017f7d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017f81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f85:	83 c2 2a             	add    edx,0x2a
c0017f88:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017f8c:	8b 02                	mov    eax,DWORD PTR [edx]
c0017f8e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017f91:	89 01                	mov    DWORD PTR [ecx],eax
c0017f93:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017f96:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f9b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017f9f:	e9 55 ff ff ff       	jmp    c0017ef9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017fa4:	90                   	nop
c0017fa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017fa9:	83 c4 2c             	add    esp,0x2c
c0017fac:	c2 04 00             	ret    0x4
c0017faf:	90                   	nop

c0017fb0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017fb0:	83 ec 1c             	sub    esp,0x1c
c0017fb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fb7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017fbb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017fbf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017fc4:	88 c8                	mov    al,cl
c0017fc6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017fca:	88 d0                	mov    al,dl
c0017fcc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fde:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017fe1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017fe5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017fe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ff3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ff7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ffe:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018007:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001800d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018011:	8d 48 01             	lea    ecx,[eax+0x1]
c0018014:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018018:	83 c2 2a             	add    edx,0x2a
c001801b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001801f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018023:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001802d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018030:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018034:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018038:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001803c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018042:	8d 50 01             	lea    edx,[eax+0x1]
c0018045:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018049:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001804f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018053:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018059:	3d 00 02 00 00       	cmp    eax,0x200
c001805e:	75 10                	jne    c0018070 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018060:	83 ec 0c             	sub    esp,0xc
c0018063:	68 a1 bf 02 c0       	push   0xc002bfa1
c0018068:	e8 98 23 00 00       	call   c001a405 <Krnl::panic(char const*)>
c001806d:	83 c4 10             	add    esp,0x10
c0018070:	90                   	nop
c0018071:	83 c4 1c             	add    esp,0x1c
c0018074:	c3                   	ret    
c0018075:	90                   	nop

c0018076 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018076:	b8 00 00 00 00       	mov    eax,0x0
c001807b:	c3                   	ret    

c001807c <ACPI::detectPCI()>:
c001807c:	83 ec 1c             	sub    esp,0x1c
c001807f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018084:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0018089:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001808e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018094:	83 e0 04             	and    eax,0x4
c0018097:	84 c0                	test   al,al
c0018099:	74 2b                	je     c00180c6 <ACPI::detectPCI()+0x4a>
c001809b:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c00180a0:	83 ec 08             	sub    esp,0x8
c00180a3:	68 be bf 02 c0       	push   0xc002bfbe
c00180a8:	50                   	push   eax
c00180a9:	e8 aa f8 ff ff       	call   c0017958 <findDataTable(unsigned char*, char*)>
c00180ae:	83 c4 10             	add    esp,0x10
c00180b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180b5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00180ba:	74 0a                	je     c00180c6 <ACPI::detectPCI()+0x4a>
c00180bc:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00180c1:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00180c6:	c7 44 24 04 5f 0c 00 00 	mov    DWORD PTR [esp+0x4],0xc5f
c00180ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180d2:	8a 00                	mov    al,BYTE PTR [eax]
c00180d4:	3c 01                	cmp    al,0x1
c00180d6:	75 0c                	jne    c00180e4 <ACPI::detectPCI()+0x68>
c00180d8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00180dd:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00180e2:	eb 26                	jmp    c001810a <ACPI::detectPCI()+0x8e>
c00180e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180e8:	8a 00                	mov    al,BYTE PTR [eax]
c00180ea:	3c 02                	cmp    al,0x2
c00180ec:	75 1c                	jne    c001810a <ACPI::detectPCI()+0x8e>
c00180ee:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00180f3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00180f8:	74 10                	je     c001810a <ACPI::detectPCI()+0x8e>
c00180fa:	83 ec 0c             	sub    esp,0xc
c00180fd:	68 88 c1 02 c0       	push   0xc002c188
c0018102:	e8 fe 22 00 00       	call   c001a405 <Krnl::panic(char const*)>
c0018107:	83 c4 10             	add    esp,0x10
c001810a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001810e:	83 f0 01             	xor    eax,0x1
c0018111:	84 c0                	test   al,al
c0018113:	74 3c                	je     c0018151 <ACPI::detectPCI()+0xd5>
c0018115:	e8 36 80 fe ff       	call   c0000150 <manualPCIProbe>
c001811a:	89 04 24             	mov    DWORD PTR [esp],eax
c001811d:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c0018121:	75 0c                	jne    c001812f <ACPI::detectPCI()+0xb3>
c0018123:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0018128:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001812d:	eb 22                	jmp    c0018151 <ACPI::detectPCI()+0xd5>
c001812f:	83 3c 24 02          	cmp    DWORD PTR [esp],0x2
c0018133:	75 1c                	jne    c0018151 <ACPI::detectPCI()+0xd5>
c0018135:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001813a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001813f:	74 10                	je     c0018151 <ACPI::detectPCI()+0xd5>
c0018141:	83 ec 0c             	sub    esp,0xc
c0018144:	68 88 c1 02 c0       	push   0xc002c188
c0018149:	e8 b7 22 00 00       	call   c001a405 <Krnl::panic(char const*)>
c001814e:	83 c4 10             	add    esp,0x10
c0018151:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0018156:	74 0d                	je     c0018165 <ACPI::detectPCI()+0xe9>
c0018158:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001815c:	83 f0 01             	xor    eax,0x1
c001815f:	0f b6 c0             	movzx  eax,al
c0018162:	40                   	inc    eax
c0018163:	eb 05                	jmp    c001816a <ACPI::detectPCI()+0xee>
c0018165:	b8 00 00 00 00       	mov    eax,0x0
c001816a:	83 ec 08             	sub    esp,0x8
c001816d:	50                   	push   eax
c001816e:	68 c3 bf 02 c0       	push   0xc002bfc3
c0018173:	e8 6d a8 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018178:	83 c4 10             	add    esp,0x10
c001817b:	83 ec 0c             	sub    esp,0xc
c001817e:	68 cc bf 02 c0       	push   0xc002bfcc
c0018183:	e8 5d a8 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018188:	83 c4 10             	add    esp,0x10
c001818b:	83 ec 0c             	sub    esp,0xc
c001818e:	68 cc bf 02 c0       	push   0xc002bfcc
c0018193:	e8 c4 77 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c0018198:	83 c4 10             	add    esp,0x10
c001819b:	90                   	nop
c001819c:	83 c4 1c             	add    esp,0x1c
c001819f:	c3                   	ret    

c00181a0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00181a0:	83 ec 1c             	sub    esp,0x1c
c00181a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00181a7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00181aa:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00181ae:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00181b3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00181b8:	83 ec 08             	sub    esp,0x8
c00181bb:	52                   	push   edx
c00181bc:	50                   	push   eax
c00181bd:	e8 32 6d ff ff       	call   c000eef4 <Computer::readCMOS(unsigned char)>
c00181c2:	83 c4 10             	add    esp,0x10
c00181c5:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00181c9:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00181ce:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00181d3:	83 ec 04             	sub    esp,0x4
c00181d6:	6a 01                	push   0x1
c00181d8:	52                   	push   edx
c00181d9:	50                   	push   eax
c00181da:	e8 4f 6e ff ff       	call   c000f02e <Computer::writeCMOS(unsigned char, unsigned char)>
c00181df:	83 c4 10             	add    esp,0x10
c00181e2:	90                   	nop
c00181e3:	83 c4 1c             	add    esp,0x1c
c00181e6:	c3                   	ret    
c00181e7:	90                   	nop

c00181e8 <ACPI::sleep()>:
c00181e8:	83 ec 0c             	sub    esp,0xc
c00181eb:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c00181f0:	85 c0                	test   eax,eax
c00181f2:	74 07                	je     c00181fb <ACPI::sleep()+0x13>
c00181f4:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c00181f9:	ff d0                	call   eax
c00181fb:	90                   	nop
c00181fc:	83 c4 0c             	add    esp,0xc
c00181ff:	c3                   	ret    

c0018200 <ACPI::open(int, int, void*)>:
c0018200:	57                   	push   edi
c0018201:	56                   	push   esi
c0018202:	53                   	push   ebx
c0018203:	81 ec 60 01 00 00    	sub    esp,0x160
c0018209:	83 ec 0c             	sub    esp,0xc
c001820c:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018213:	e8 64 fe ff ff       	call   c001807c <ACPI::detectPCI()>
c0018218:	83 c4 10             	add    esp,0x10
c001821b:	83 ec 0c             	sub    esp,0xc
c001821e:	68 b0 c1 02 c0       	push   0xc002c1b0
c0018223:	e8 34 77 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c0018228:	83 c4 10             	add    esp,0x10
c001822b:	83 ec 0c             	sub    esp,0xc
c001822e:	68 e3 bf 02 c0       	push   0xc002bfe3
c0018233:	e8 2a 4b 00 00       	call   c001cd62 <Thr::loadKernelSymbolTable(char const*)>
c0018238:	83 c4 10             	add    esp,0x10
c001823b:	83 ec 0c             	sub    esp,0xc
c001823e:	68 01 c0 02 c0       	push   0xc002c001
c0018243:	e8 14 77 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c0018248:	83 c4 10             	add    esp,0x10
c001824b:	83 ec 04             	sub    esp,0x4
c001824e:	6a 0c                	push   0xc
c0018250:	68 1c c0 02 c0       	push   0xc002c01c
c0018255:	68 2d c0 02 c0       	push   0xc002c02d
c001825a:	e8 5c 2f 00 00       	call   c001b1bb <Reg::readIntWithDefault(char*, char*, int)>
c001825f:	83 c4 10             	add    esp,0x10
c0018262:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018269:	83 ec 0c             	sub    esp,0xc
c001826c:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018273:	e8 a5 95 ff ff       	call   c001181d <Virt::setupPageSwapping(int)>
c0018278:	83 c4 10             	add    esp,0x10
c001827b:	83 ec 0c             	sub    esp,0xc
c001827e:	68 35 aa 02 c0       	push   0xc002aa35
c0018283:	e8 d4 76 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c0018288:	83 c4 10             	add    esp,0x10
c001828b:	8b 1d 68 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f268
c0018291:	83 ec 08             	sub    esp,0x8
c0018294:	6a 01                	push   0x1
c0018296:	68 34 c0 02 c0       	push   0xc002c034
c001829b:	e8 39 55 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c00182a0:	83 c4 10             	add    esp,0x10
c00182a3:	83 ec 08             	sub    esp,0x8
c00182a6:	53                   	push   ebx
c00182a7:	50                   	push   eax
c00182a8:	e8 57 57 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c00182ad:	83 c4 10             	add    esp,0x10
c00182b0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00182b7:	83 ec 08             	sub    esp,0x8
c00182ba:	6a 12                	push   0x12
c00182bc:	50                   	push   eax
c00182bd:	e8 e0 be ff ff       	call   c00141a2 <getDevicesOfType(DeviceType)>
c00182c2:	83 c4 0c             	add    esp,0xc
c00182c5:	83 ec 0c             	sub    esp,0xc
c00182c8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00182cf:	50                   	push   eax
c00182d0:	e8 9b 12 01 00       	call   c0029570 <LinkedList<Device>::isEmpty()>
c00182d5:	83 c4 10             	add    esp,0x10
c00182d8:	83 f0 01             	xor    eax,0x1
c00182db:	84 c0                	test   al,al
c00182dd:	0f 84 43 01 00 00    	je     c0018426 <ACPI::open(int, int, void*)+0x226>
c00182e3:	83 ec 0c             	sub    esp,0xc
c00182e6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00182ed:	50                   	push   eax
c00182ee:	e8 99 12 01 00       	call   c002958c <LinkedList<Device>::getFirstElement()>
c00182f3:	83 c4 10             	add    esp,0x10
c00182f6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00182fd:	83 ec 0c             	sub    esp,0xc
c0018300:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018307:	50                   	push   eax
c0018308:	e8 87 12 01 00       	call   c0029594 <LinkedList<Device>::removeFirst()>
c001830d:	83 c4 10             	add    esp,0x10
c0018310:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018317:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001831e:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018325:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018329:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001832f:	ba 09 00 00 00       	mov    edx,0x9
c0018334:	fc                   	cld    
c0018335:	89 c7                	mov    edi,eax
c0018337:	89 de                	mov    esi,ebx
c0018339:	89 d1                	mov    ecx,edx
c001833b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001833d:	83 ec 08             	sub    esp,0x8
c0018340:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018344:	50                   	push   eax
c0018345:	83 ec 24             	sub    esp,0x24
c0018348:	89 e0                	mov    eax,esp
c001834a:	89 c3                	mov    ebx,eax
c001834c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018350:	ba 09 00 00 00       	mov    edx,0x9
c0018355:	89 df                	mov    edi,ebx
c0018357:	89 c6                	mov    esi,eax
c0018359:	89 d1                	mov    ecx,edx
c001835b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001835d:	e8 3e af 00 00       	call   c00232a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018362:	83 c4 30             	add    esp,0x30
c0018365:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c001836c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018374:	0f 84 4b ff ff ff    	je     c00182c5 <ACPI::open(int, int, void*)+0xc5>
c001837a:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018385:	83 ec 0c             	sub    esp,0xc
c0018388:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001838f:	e8 6e 75 ff ff       	call   c000f902 <malloc>
c0018394:	83 c4 10             	add    esp,0x10
c0018397:	89 c3                	mov    ebx,eax
c0018399:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001839e:	83 ec 04             	sub    esp,0x4
c00183a1:	50                   	push   eax
c00183a2:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00183a9:	53                   	push   ebx
c00183aa:	e8 95 ab ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c00183af:	83 c4 10             	add    esp,0x10
c00183b2:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00183b9:	83 ec 0c             	sub    esp,0xc
c00183bc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00183c3:	e8 4e ae ff ff       	call   c0013216 <File::exists()>
c00183c8:	83 c4 10             	add    esp,0x10
c00183cb:	84 c0                	test   al,al
c00183cd:	74 27                	je     c00183f6 <ACPI::open(int, int, void*)+0x1f6>
c00183cf:	83 ec 08             	sub    esp,0x8
c00183d2:	6a 01                	push   0x1
c00183d4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00183db:	e8 f9 53 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c00183e0:	83 c4 10             	add    esp,0x10
c00183e3:	83 ec 08             	sub    esp,0x8
c00183e6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00183ed:	50                   	push   eax
c00183ee:	e8 11 56 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c00183f3:	83 c4 10             	add    esp,0x10
c00183f6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00183fe:	0f 84 c1 fe ff ff    	je     c00182c5 <ACPI::open(int, int, void*)+0xc5>
c0018404:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001840b:	8b 00                	mov    eax,DWORD PTR [eax]
c001840d:	83 c0 08             	add    eax,0x8
c0018410:	8b 00                	mov    eax,DWORD PTR [eax]
c0018412:	83 ec 0c             	sub    esp,0xc
c0018415:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001841c:	ff d0                	call   eax
c001841e:	83 c4 10             	add    esp,0x10
c0018421:	e9 9f fe ff ff       	jmp    c00182c5 <ACPI::open(int, int, void*)+0xc5>
c0018426:	83 ec 0c             	sub    esp,0xc
c0018429:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018430:	50                   	push   eax
c0018431:	e8 38 11 01 00       	call   c002956e <LinkedList<Device>::~LinkedList()>
c0018436:	83 c4 10             	add    esp,0x10
c0018439:	8b 1d 68 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f268
c001843f:	83 ec 08             	sub    esp,0x8
c0018442:	6a 01                	push   0x1
c0018444:	68 4f c0 02 c0       	push   0xc002c04f
c0018449:	e8 8b 53 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c001844e:	83 c4 10             	add    esp,0x10
c0018451:	83 ec 08             	sub    esp,0x8
c0018454:	53                   	push   ebx
c0018455:	50                   	push   eax
c0018456:	e8 a9 55 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c001845b:	83 c4 10             	add    esp,0x10
c001845e:	8b 1d 68 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f268
c0018464:	83 ec 08             	sub    esp,0x8
c0018467:	6a 01                	push   0x1
c0018469:	68 6c c0 02 c0       	push   0xc002c06c
c001846e:	e8 66 53 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c0018473:	83 c4 10             	add    esp,0x10
c0018476:	83 ec 08             	sub    esp,0x8
c0018479:	53                   	push   ebx
c001847a:	50                   	push   eax
c001847b:	e8 84 55 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c0018480:	83 c4 10             	add    esp,0x10
c0018483:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0018488:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001848e:	83 e0 04             	and    eax,0x4
c0018491:	84 c0                	test   al,al
c0018493:	0f 84 0d 01 00 00    	je     c00185a6 <ACPI::open(int, int, void*)+0x3a6>
c0018499:	83 ec 0c             	sub    esp,0xc
c001849c:	68 89 c0 02 c0       	push   0xc002c089
c00184a1:	e8 b6 74 ff ff       	call   c000f95c <Krnl::setBootMessage(char const*)>
c00184a6:	83 c4 10             	add    esp,0x10
c00184a9:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00184b4:	83 ec 0c             	sub    esp,0xc
c00184b7:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00184be:	e8 3f 74 ff ff       	call   c000f902 <malloc>
c00184c3:	83 c4 10             	add    esp,0x10
c00184c6:	89 c3                	mov    ebx,eax
c00184c8:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c00184cd:	83 ec 04             	sub    esp,0x4
c00184d0:	50                   	push   eax
c00184d1:	68 a6 c0 02 c0       	push   0xc002c0a6
c00184d6:	53                   	push   ebx
c00184d7:	e8 68 aa ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c00184dc:	83 c4 10             	add    esp,0x10
c00184df:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00184e6:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00184ee:	74 1a                	je     c001850a <ACPI::open(int, int, void*)+0x30a>
c00184f0:	83 ec 0c             	sub    esp,0xc
c00184f3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00184fa:	e8 17 ad ff ff       	call   c0013216 <File::exists()>
c00184ff:	83 c4 10             	add    esp,0x10
c0018502:	84 c0                	test   al,al
c0018504:	74 04                	je     c001850a <ACPI::open(int, int, void*)+0x30a>
c0018506:	b0 01                	mov    al,0x1
c0018508:	eb 02                	jmp    c001850c <ACPI::open(int, int, void*)+0x30c>
c001850a:	b0 00                	mov    al,0x0
c001850c:	84 c0                	test   al,al
c001850e:	74 25                	je     c0018535 <ACPI::open(int, int, void*)+0x335>
c0018510:	83 ec 08             	sub    esp,0x8
c0018513:	6a 01                	push   0x1
c0018515:	68 a6 c0 02 c0       	push   0xc002c0a6
c001851a:	e8 ba 52 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c001851f:	83 c4 10             	add    esp,0x10
c0018522:	83 ec 08             	sub    esp,0x8
c0018525:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001852c:	50                   	push   eax
c001852d:	e8 d2 54 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c0018532:	83 c4 10             	add    esp,0x10
c0018535:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001853d:	74 27                	je     c0018566 <ACPI::open(int, int, void*)+0x366>
c001853f:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018547:	74 1d                	je     c0018566 <ACPI::open(int, int, void*)+0x366>
c0018549:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018550:	8b 00                	mov    eax,DWORD PTR [eax]
c0018552:	83 c0 08             	add    eax,0x8
c0018555:	8b 00                	mov    eax,DWORD PTR [eax]
c0018557:	83 ec 0c             	sub    esp,0xc
c001855a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018561:	ff d0                	call   eax
c0018563:	83 c4 10             	add    esp,0x10
c0018566:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c001856b:	83 ec 08             	sub    esp,0x8
c001856e:	68 c3 c0 02 c0       	push   0xc002c0c3
c0018573:	50                   	push   eax
c0018574:	e8 df f3 ff ff       	call   c0017958 <findDataTable(unsigned char*, char*)>
c0018579:	83 c4 10             	add    esp,0x10
c001857c:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018583:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001858b:	74 19                	je     c00185a6 <ACPI::open(int, int, void*)+0x3a6>
c001858d:	83 ec 08             	sub    esp,0x8
c0018590:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018597:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001859e:	e8 fd fb ff ff       	call   c00181a0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00185a3:	83 c4 10             	add    esp,0x10
c00185a6:	b8 00 00 00 00       	mov    eax,0x0
c00185ab:	81 c4 60 01 00 00    	add    esp,0x160
c00185b1:	5b                   	pop    ebx
c00185b2:	5e                   	pop    esi
c00185b3:	5f                   	pop    edi
c00185b4:	c3                   	ret    
c00185b5:	90                   	nop

c00185b6 <CPU::close(int, int, void*)>:
c00185b6:	31 c0                	xor    eax,eax
c00185b8:	c3                   	ret    
c00185b9:	90                   	nop

c00185ba <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00185ba:	55                   	push   ebp
c00185bb:	57                   	push   edi
c00185bc:	56                   	push   esi
c00185bd:	53                   	push   ebx
c00185be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00185c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185c6:	89 ce                	mov    esi,ecx
c00185c8:	89 d5                	mov    ebp,edx
c00185ca:	80 f9 04             	cmp    cl,0x4
c00185cd:	75 28                	jne    c00185f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00185cf:	8d 42 f9             	lea    eax,[edx-0x7]
c00185d2:	3c 03                	cmp    al,0x3
c00185d4:	0f 86 63 01 00 00    	jbe    c001873d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00185da:	80 fa 03             	cmp    dl,0x3
c00185dd:	0f 84 5a 01 00 00    	je     c001873d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00185e3:	8d 7a f2             	lea    edi,[edx-0xe]
c00185e6:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c00185eb:	89 fb                	mov    ebx,edi
c00185ed:	80 fb 01             	cmp    bl,0x1
c00185f0:	77 4e                	ja     c0018640 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00185f2:	e9 52 01 00 00       	jmp    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185f7:	80 f9 05             	cmp    cl,0x5
c00185fa:	75 4d                	jne    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00185fc:	b8 a0 e6 02 c0       	mov    eax,0xc002e6a0
c0018601:	80 fa 03             	cmp    dl,0x3
c0018604:	0f 86 3f 01 00 00    	jbe    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001860a:	8d 7a fa             	lea    edi,[edx-0x6]
c001860d:	b8 b0 e6 02 c0       	mov    eax,0xc002e6b0
c0018612:	89 fb                	mov    ebx,edi
c0018614:	80 fb 01             	cmp    bl,0x1
c0018617:	0f 86 2c 01 00 00    	jbe    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001861d:	b8 c0 e6 02 c0       	mov    eax,0xc002e6c0
c0018622:	80 fa 08             	cmp    dl,0x8
c0018625:	0f 84 1e 01 00 00    	je     c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001862b:	89 d7                	mov    edi,edx
c001862d:	b8 d0 e6 02 c0       	mov    eax,0xc002e6d0
c0018632:	83 e7 fb             	and    edi,0xfffffffb
c0018635:	89 fb                	mov    ebx,edi
c0018637:	80 fb 09             	cmp    bl,0x9
c001863a:	0f 84 09 01 00 00    	je     c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018640:	31 c0                	xor    eax,eax
c0018642:	89 eb                	mov    ebx,ebp
c0018644:	0f b6 fb             	movzx  edi,bl
c0018647:	eb 30                	jmp    c0018679 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018649:	31 c0                	xor    eax,eax
c001864b:	80 f9 06             	cmp    cl,0x6
c001864e:	75 f2                	jne    c0018642 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018650:	80 fa 0a             	cmp    dl,0xa
c0018653:	77 ed                	ja     c0018642 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018655:	bf de 05 00 00       	mov    edi,0x5de
c001865a:	0f a3 d7             	bt     edi,edx
c001865d:	73 e3                	jae    c0018642 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001865f:	b8 e0 e6 02 c0       	mov    eax,0xc002e6e0
c0018664:	e9 e0 00 00 00       	jmp    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018669:	39 c7                	cmp    edi,eax
c001866b:	0f 84 d3 00 00 00    	je     c0018744 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018671:	40                   	inc    eax
c0018672:	3d d0 00 00 00       	cmp    eax,0xd0
c0018677:	74 09                	je     c0018682 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018679:	89 f3                	mov    ebx,esi
c001867b:	80 fb 0f             	cmp    bl,0xf
c001867e:	75 f1                	jne    c0018671 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018680:	eb e7                	jmp    c0018669 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018682:	80 f9 10             	cmp    cl,0x10
c0018685:	75 14                	jne    c001869b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018687:	8d 42 fc             	lea    eax,[edx-0x4]
c001868a:	83 e0 fb             	and    eax,0xfffffffb
c001868d:	3c 02                	cmp    al,0x2
c001868f:	76 34                	jbe    c00186c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018691:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c0018696:	80 fa 02             	cmp    dl,0x2
c0018699:	eb 24                	jmp    c00186bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001869b:	80 f9 11             	cmp    cl,0x11
c001869e:	75 13                	jne    c00186b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00186a0:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c00186a5:	80 fa 03             	cmp    dl,0x3
c00186a8:	0f 85 9b 00 00 00    	jne    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186ae:	e9 91 00 00 00       	jmp    c0018744 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00186b3:	80 f9 12             	cmp    cl,0x12
c00186b6:	75 14                	jne    c00186cc <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00186b8:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c00186bd:	fe ca                	dec    dl
c00186bf:	0f 85 84 00 00 00    	jne    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186c5:	b8 00 e7 02 c0       	mov    eax,0xc002e700
c00186ca:	eb 7d                	jmp    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186cc:	80 f9 14             	cmp    cl,0x14
c00186cf:	75 12                	jne    c00186e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00186d1:	4a                   	dec    edx
c00186d2:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c00186d7:	80 fa 01             	cmp    dl,0x1
c00186da:	77 6d                	ja     c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186dc:	b8 10 e7 02 c0       	mov    eax,0xc002e710
c00186e1:	eb 66                	jmp    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186e3:	80 f9 15             	cmp    cl,0x15
c00186e6:	75 31                	jne    c0018719 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00186e8:	b8 20 e7 02 c0       	mov    eax,0xc002e720
c00186ed:	80 fa 01             	cmp    dl,0x1
c00186f0:	74 57                	je     c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00186f2:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c00186f7:	80 fa 13             	cmp    dl,0x13
c00186fa:	76 0c                	jbe    c0018708 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00186fc:	80 fa 30             	cmp    dl,0x30
c00186ff:	75 48                	jne    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018701:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c0018706:	eb 41                	jmp    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018708:	b9 04 00 09 00       	mov    ecx,0x90004
c001870d:	0f a3 d1             	bt     ecx,edx
c0018710:	73 37                	jae    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018712:	b8 30 e7 02 c0       	mov    eax,0xc002e730
c0018717:	eb 30                	jmp    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018719:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c001871e:	80 f9 16             	cmp    cl,0x16
c0018721:	75 26                	jne    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018723:	b8 50 e7 02 c0       	mov    eax,0xc002e750
c0018728:	84 d2                	test   dl,dl
c001872a:	74 1d                	je     c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001872c:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c0018731:	80 fa 30             	cmp    dl,0x30
c0018734:	75 13                	jne    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018736:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c001873b:	eb 0c                	jmp    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001873d:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018742:	eb 05                	jmp    c0018749 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018744:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c0018749:	5b                   	pop    ebx
c001874a:	5e                   	pop    esi
c001874b:	5f                   	pop    edi
c001874c:	5d                   	pop    ebp
c001874d:	c3                   	ret    

c001874e <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001874e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018752:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018756:	80 f9 04             	cmp    cl,0x4
c0018759:	75 6b                	jne    c00187c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001875b:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018760:	80 fa 01             	cmp    dl,0x1
c0018763:	0f 86 92 02 00 00    	jbe    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018769:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c001876e:	80 fa 02             	cmp    dl,0x2
c0018771:	0f 84 84 02 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018777:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c001877c:	80 fa 03             	cmp    dl,0x3
c001877f:	0f 84 76 02 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018785:	b8 10 e5 02 c0       	mov    eax,0xc002e510
c001878a:	80 fa 04             	cmp    dl,0x4
c001878d:	0f 84 68 02 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018793:	b8 20 e5 02 c0       	mov    eax,0xc002e520
c0018798:	80 fa 05             	cmp    dl,0x5
c001879b:	0f 84 5a 02 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a1:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c00187a6:	80 fa 07             	cmp    dl,0x7
c00187a9:	0f 84 4c 02 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187af:	83 ea 08             	sub    edx,0x8
c00187b2:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c00187b7:	80 fa 01             	cmp    dl,0x1
c00187ba:	0f 87 3b 02 00 00    	ja     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c0:	b8 30 e5 02 c0       	mov    eax,0xc002e530
c00187c5:	c3                   	ret    
c00187c6:	80 f9 05             	cmp    cl,0x5
c00187c9:	75 45                	jne    c0018810 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00187cb:	8d 4a ff             	lea    ecx,[edx-0x1]
c00187ce:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c00187d3:	80 f9 02             	cmp    cl,0x2
c00187d6:	0f 86 1f 02 00 00    	jbe    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187dc:	80 fa 04             	cmp    dl,0x4
c00187df:	0f 84 f3 01 00 00    	je     c00189d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00187e5:	80 fa 07             	cmp    dl,0x7
c00187e8:	0f 84 0d 02 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ee:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c00187f3:	80 fa 08             	cmp    dl,0x8
c00187f6:	0f 84 ff 01 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187fc:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c0018801:	80 fa 09             	cmp    dl,0x9
c0018804:	0f 85 f1 01 00 00    	jne    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880a:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c001880f:	c3                   	ret    
c0018810:	80 f9 06             	cmp    cl,0x6
c0018813:	0f 85 85 01 00 00    	jne    c001899e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018819:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c001881e:	80 fa 01             	cmp    dl,0x1
c0018821:	0f 84 d4 01 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018827:	8d 42 fb             	lea    eax,[edx-0x5]
c001882a:	3c 01                	cmp    al,0x1
c001882c:	0f 86 ac 01 00 00    	jbe    c00189de <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018832:	80 fa 03             	cmp    dl,0x3
c0018835:	0f 84 a3 01 00 00    	je     c00189de <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001883b:	8d 4a f9             	lea    ecx,[edx-0x7]
c001883e:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c0018843:	80 f9 01             	cmp    cl,0x1
c0018846:	0f 86 af 01 00 00    	jbe    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001884c:	80 fa 09             	cmp    dl,0x9
c001884f:	0f 84 8f 01 00 00    	je     c00189e4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018855:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018858:	80 f9 01             	cmp    cl,0x1
c001885b:	0f 86 9a 01 00 00    	jbe    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018861:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0018866:	80 fa 0d             	cmp    dl,0xd
c0018869:	0f 84 8c 01 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886f:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c0018874:	80 fa 0e             	cmp    dl,0xe
c0018877:	0f 84 7e 01 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887d:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c0018882:	80 fa 0f             	cmp    dl,0xf
c0018885:	0f 84 70 01 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001888b:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0018890:	80 fa 15             	cmp    dl,0x15
c0018893:	0f 84 62 01 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018899:	8d 4a ea             	lea    ecx,[edx-0x16]
c001889c:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c00188a1:	80 f9 01             	cmp    cl,0x1
c00188a4:	0f 86 51 01 00 00    	jbe    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188aa:	80 fa 1a             	cmp    dl,0x1a
c00188ad:	0f 84 37 01 00 00    	je     c00189ea <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00188b3:	80 fa 1c             	cmp    dl,0x1c
c00188b6:	0f 84 34 01 00 00    	je     c00189f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00188bc:	80 fa 1d             	cmp    dl,0x1d
c00188bf:	0f 84 36 01 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c5:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c00188ca:	80 fa 25             	cmp    dl,0x25
c00188cd:	0f 84 28 01 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d3:	8d 4a da             	lea    ecx,[edx-0x26]
c00188d6:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c00188db:	80 f9 01             	cmp    cl,0x1
c00188de:	0f 86 17 01 00 00    	jbe    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188e4:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c00188e9:	80 fa 2a             	cmp    dl,0x2a
c00188ec:	0f 84 09 01 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188f2:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c00188f7:	80 fa 2c             	cmp    dl,0x2c
c00188fa:	0f 84 fb 00 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018900:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018905:	80 fa 2d             	cmp    dl,0x2d
c0018908:	0f 84 ed 00 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001890e:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c0018913:	80 fa 2e             	cmp    dl,0x2e
c0018916:	0f 84 df 00 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001891c:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c0018921:	80 fa 2f             	cmp    dl,0x2f
c0018924:	0f 84 d1 00 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001892a:	8d 4a cb             	lea    ecx,[edx-0x35]
c001892d:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c0018932:	80 f9 01             	cmp    cl,0x1
c0018935:	0f 86 c0 00 00 00    	jbe    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001893b:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c0018940:	80 fa 37             	cmp    dl,0x37
c0018943:	0f 84 b2 00 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018949:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c001894e:	80 fa 3a             	cmp    dl,0x3a
c0018951:	0f 84 a4 00 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018957:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c001895c:	80 fa 3c             	cmp    dl,0x3c
c001895f:	0f 84 96 00 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018965:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c001896a:	80 fa 3d             	cmp    dl,0x3d
c001896d:	0f 84 88 00 00 00    	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018973:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c0018978:	80 fa 3e             	cmp    dl,0x3e
c001897b:	74 7e                	je     c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001897d:	8d 42 bb             	lea    eax,[edx-0x45]
c0018980:	3c 01                	cmp    al,0x1
c0018982:	76 72                	jbe    c00189f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018984:	80 fa 3f             	cmp    dl,0x3f
c0018987:	74 6d                	je     c00189f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018989:	80 fa 4a             	cmp    dl,0x4a
c001898c:	74 0a                	je     c0018998 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001898e:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c0018993:	80 fa 4d             	cmp    dl,0x4d
c0018996:	75 63                	jne    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018998:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c001899d:	c3                   	ret    
c001899e:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c00189a3:	80 f9 0b             	cmp    cl,0xb
c00189a6:	75 0a                	jne    c00189b2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00189a8:	fe ca                	dec    dl
c00189aa:	75 4f                	jne    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189ac:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c00189b1:	c3                   	ret    
c00189b2:	80 f9 0f             	cmp    cl,0xf
c00189b5:	75 44                	jne    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189b7:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c00189bc:	80 fa 02             	cmp    dl,0x2
c00189bf:	76 3a                	jbe    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189c1:	8d 42 fd             	lea    eax,[edx-0x3]
c00189c4:	3c 01                	cmp    al,0x1
c00189c6:	76 0a                	jbe    c00189d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00189c8:	b8 ee c4 02 c0       	mov    eax,0xc002c4ee
c00189cd:	80 fa 06             	cmp    dl,0x6
c00189d0:	75 29                	jne    c00189fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189d2:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c00189d7:	c3                   	ret    
c00189d8:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c00189dd:	c3                   	ret    
c00189de:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c00189e3:	c3                   	ret    
c00189e4:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c00189e9:	c3                   	ret    
c00189ea:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c00189ef:	c3                   	ret    
c00189f0:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c00189f5:	c3                   	ret    
c00189f6:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c00189fb:	c3                   	ret    

c00189fc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00189fc:	60                   	pusha  
c00189fd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a09:	9c                   	pushf  
c0018a0a:	fa                   	cli    
c0018a0b:	0f 09                	wbinvd 
c0018a0d:	0f 30                	wrmsr  
c0018a0f:	9d                   	popf   
c0018a10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a14:	89 02                	mov    DWORD PTR [edx],eax
c0018a16:	61                   	popa   
c0018a17:	c3                   	ret    

c0018a18 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018a18:	60                   	pusha  
c0018a19:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018a1d:	9c                   	pushf  
c0018a1e:	fa                   	cli    
c0018a1f:	0f 09                	wbinvd 
c0018a21:	31 c0                	xor    eax,eax
c0018a23:	31 d2                	xor    edx,edx
c0018a25:	0f 32                	rdmsr  
c0018a27:	9d                   	popf   
c0018a28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018a2c:	89 02                	mov    DWORD PTR [edx],eax
c0018a2e:	61                   	popa   
c0018a2f:	c3                   	ret    

c0018a30 <CPU::AMD_K6_writeback(int, int, int)>:
c0018a30:	56                   	push   esi
c0018a31:	53                   	push   ebx
c0018a32:	83 ec 10             	sub    esp,0x10
c0018a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a39:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018a3e:	75 5d                	jne    c0018a9d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a40:	83 f8 08             	cmp    eax,0x8
c0018a43:	75 09                	jne    c0018a4e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018a45:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018a4a:	7e 13                	jle    c0018a5f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018a4c:	eb 30                	jmp    c0018a7e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018a4e:	83 f8 06             	cmp    eax,0x6
c0018a51:	7c 4a                	jl     c0018a9d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a53:	83 f8 07             	cmp    eax,0x7
c0018a56:	7e 07                	jle    c0018a5f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018a58:	83 f8 09             	cmp    eax,0x9
c0018a5b:	74 21                	je     c0018a7e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018a5d:	eb 3e                	jmp    c0018a9d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018a5f:	89 e6                	mov    esi,esp
c0018a61:	8b 1d a8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2a8
c0018a67:	56                   	push   esi
c0018a68:	c1 eb 15             	shr    ebx,0x15
c0018a6b:	68 82 00 00 c0       	push   0xc0000082
c0018a70:	83 e3 7e             	and    ebx,0x7e
c0018a73:	e8 a0 ff ff ff       	call   c0018a18 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018a78:	56                   	push   esi
c0018a79:	6a 00                	push   0x0
c0018a7b:	53                   	push   ebx
c0018a7c:	eb 12                	jmp    c0018a90 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018a7e:	89 e3                	mov    ebx,esp
c0018a80:	53                   	push   ebx
c0018a81:	68 82 00 00 c0       	push   0xc0000082
c0018a86:	e8 8d ff ff ff       	call   c0018a18 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018a8b:	53                   	push   ebx
c0018a8c:	6a 00                	push   0x0
c0018a8e:	6a 00                	push   0x0
c0018a90:	68 82 00 00 c0       	push   0xc0000082
c0018a95:	e8 62 ff ff ff       	call   c00189fc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018a9a:	83 c4 18             	add    esp,0x18
c0018a9d:	83 c4 10             	add    esp,0x10
c0018aa0:	5b                   	pop    ebx
c0018aa1:	5e                   	pop    esi
c0018aa2:	c3                   	ret    
c0018aa3:	90                   	nop

c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018aa4:	55                   	push   ebp
c0018aa5:	57                   	push   edi
c0018aa6:	56                   	push   esi
c0018aa7:	53                   	push   ebx
c0018aa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018aac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ab0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018ab4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ab8:	39 05 80 e7 02 c0    	cmp    DWORD PTR ds:0xc002e780,eax
c0018abe:	75 23                	jne    c0018ae3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018ac0:	a1 8c 1d 03 c0       	mov    eax,ds:0xc0031d8c
c0018ac5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ac9:	89 06                	mov    DWORD PTR [esi],eax
c0018acb:	a1 88 1d 03 c0       	mov    eax,ds:0xc0031d88
c0018ad0:	89 07                	mov    DWORD PTR [edi],eax
c0018ad2:	a1 84 1d 03 c0       	mov    eax,ds:0xc0031d84
c0018ad7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018ada:	a1 80 1d 03 c0       	mov    eax,ds:0xc0031d80
c0018adf:	89 02                	mov    DWORD PTR [edx],eax
c0018ae1:	eb 3f                	jmp    c0018b22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018ae3:	31 c9                	xor    ecx,ecx
c0018ae5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ae9:	0f a2                	cpuid  
c0018aeb:	89 06                	mov    DWORD PTR [esi],eax
c0018aed:	89 1f                	mov    DWORD PTR [edi],ebx
c0018aef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018af3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018af6:	89 10                	mov    DWORD PTR [eax],edx
c0018af8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018afc:	a3 80 e7 02 c0       	mov    ds:0xc002e780,eax
c0018b01:	8b 06                	mov    eax,DWORD PTR [esi]
c0018b03:	a3 8c 1d 03 c0       	mov    ds:0xc0031d8c,eax
c0018b08:	8b 07                	mov    eax,DWORD PTR [edi]
c0018b0a:	a3 88 1d 03 c0       	mov    ds:0xc0031d88,eax
c0018b0f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b12:	a3 84 1d 03 c0       	mov    ds:0xc0031d84,eax
c0018b17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b1d:	a3 80 1d 03 c0       	mov    ds:0xc0031d80,eax
c0018b22:	5b                   	pop    ebx
c0018b23:	5e                   	pop    esi
c0018b24:	5f                   	pop    edi
c0018b25:	5d                   	pop    ebp
c0018b26:	c3                   	ret    
c0018b27:	90                   	nop

c0018b28 <CPU::cpuidCheckEDX(unsigned int)>:
c0018b28:	83 ec 10             	sub    esp,0x10
c0018b2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b2f:	50                   	push   eax
c0018b30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b34:	50                   	push   eax
c0018b35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b39:	50                   	push   eax
c0018b3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b3e:	50                   	push   eax
c0018b3f:	6a 01                	push   0x1
c0018b41:	e8 5e ff ff ff       	call   c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b4a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018b4e:	0f 95 c0             	setne  al
c0018b51:	83 c4 24             	add    esp,0x24
c0018b54:	c3                   	ret    
c0018b55:	90                   	nop

c0018b56 <CPU::cpuidCheckECX(unsigned int)>:
c0018b56:	83 ec 10             	sub    esp,0x10
c0018b59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b5d:	50                   	push   eax
c0018b5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b62:	50                   	push   eax
c0018b63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b67:	50                   	push   eax
c0018b68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b6c:	50                   	push   eax
c0018b6d:	6a 01                	push   0x1
c0018b6f:	e8 30 ff ff ff       	call   c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b78:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018b7c:	0f 95 c0             	setne  al
c0018b7f:	83 c4 24             	add    esp,0x24
c0018b82:	c3                   	ret    
c0018b83:	90                   	nop

c0018b84 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018b84:	83 ec 10             	sub    esp,0x10
c0018b87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b8b:	50                   	push   eax
c0018b8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b90:	50                   	push   eax
c0018b91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b95:	50                   	push   eax
c0018b96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018b9a:	50                   	push   eax
c0018b9b:	6a 07                	push   0x7
c0018b9d:	e8 02 ff ff ff       	call   c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ba2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ba6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018baa:	0f 95 c0             	setne  al
c0018bad:	83 c4 24             	add    esp,0x24
c0018bb0:	c3                   	ret    
c0018bb1:	90                   	nop

c0018bb2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018bb2:	83 ec 10             	sub    esp,0x10
c0018bb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bb9:	50                   	push   eax
c0018bba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bbe:	50                   	push   eax
c0018bbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc3:	50                   	push   eax
c0018bc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bc8:	50                   	push   eax
c0018bc9:	6a 07                	push   0x7
c0018bcb:	e8 d4 fe ff ff       	call   c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018bd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018bd4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018bd8:	0f 95 c0             	setne  al
c0018bdb:	83 c4 24             	add    esp,0x24
c0018bde:	c3                   	ret    
c0018bdf:	90                   	nop

c0018be0 <CPU::CPU()>:
c0018be0:	83 ec 0c             	sub    esp,0xc
c0018be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018be7:	83 ec 08             	sub    esp,0x8
c0018bea:	68 ee c4 02 c0       	push   0xc002c4ee
c0018bef:	50                   	push   eax
c0018bf0:	e8 2d b4 ff ff       	call   c0014022 <Device::Device(char const*)>
c0018bf5:	83 c4 10             	add    esp,0x10
c0018bf8:	ba c8 c5 02 c0       	mov    edx,0xc002c5c8
c0018bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c01:	89 10                	mov    DWORD PTR [eax],edx
c0018c03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c07:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c15:	05 78 01 00 00       	add    eax,0x178
c0018c1a:	83 ec 0c             	sub    esp,0xc
c0018c1d:	50                   	push   eax
c0018c1e:	e8 f5 64 ff ff       	call   c000f118 <GDT::GDT()>
c0018c23:	83 c4 10             	add    esp,0x10
c0018c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c2a:	05 7c 09 00 00       	add    eax,0x97c
c0018c2f:	83 ec 0c             	sub    esp,0xc
c0018c32:	50                   	push   eax
c0018c33:	e8 4a 67 ff ff       	call   c000f382 <IDT::IDT()>
c0018c38:	83 c4 10             	add    esp,0x10
c0018c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c3f:	05 7c 11 00 00       	add    eax,0x117c
c0018c44:	83 ec 0c             	sub    esp,0xc
c0018c47:	50                   	push   eax
c0018c48:	e8 c3 82 ff ff       	call   c0010f10 <TSS::TSS()>
c0018c4d:	83 c4 10             	add    esp,0x10
c0018c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c54:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018c5f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018c69:	90                   	nop
c0018c6a:	83 c4 0c             	add    esp,0xc
c0018c6d:	c3                   	ret    

c0018c6e <CPU::displayFeatures()>:
c0018c6e:	53                   	push   ebx
c0018c6f:	83 ec 10             	sub    esp,0x10
c0018c72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018c76:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018c7c:	68 fc c1 02 c0       	push   0xc002c1fc
c0018c81:	e8 5f 9d ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018c86:	59                   	pop    ecx
c0018c87:	58                   	pop    eax
c0018c88:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018c8e:	50                   	push   eax
c0018c8f:	68 0d c2 02 c0       	push   0xc002c20d
c0018c94:	e8 4c 9d ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018c99:	58                   	pop    eax
c0018c9a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ca0:	5a                   	pop    edx
c0018ca1:	c1 e8 0e             	shr    eax,0xe
c0018ca4:	0f b6 c0             	movzx  eax,al
c0018ca7:	50                   	push   eax
c0018ca8:	68 1e c2 02 c0       	push   0xc002c21e
c0018cad:	e8 33 9d ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018cb2:	59                   	pop    ecx
c0018cb3:	58                   	pop    eax
c0018cb4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018cba:	66 c1 e8 06          	shr    ax,0x6
c0018cbe:	0f b6 c0             	movzx  eax,al
c0018cc1:	50                   	push   eax
c0018cc2:	68 2f c2 02 c0       	push   0xc002c22f
c0018cc7:	e8 19 9d ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018ccc:	c7 04 24 dc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6dc
c0018cd3:	e8 0d 9d ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018cd8:	83 c4 10             	add    esp,0x10
c0018cdb:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018ce0:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018ce7:	74 05                	je     c0018cee <CPU::displayFeatures()+0x80>
c0018ce9:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018cee:	52                   	push   edx
c0018cef:	52                   	push   edx
c0018cf0:	50                   	push   eax
c0018cf1:	68 40 c2 02 c0       	push   0xc002c240
c0018cf6:	e8 ea 9c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018cfb:	83 c4 10             	add    esp,0x10
c0018cfe:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018d03:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018d0a:	78 05                	js     c0018d11 <CPU::displayFeatures()+0xa3>
c0018d0c:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018d11:	51                   	push   ecx
c0018d12:	51                   	push   ecx
c0018d13:	50                   	push   eax
c0018d14:	68 57 c2 02 c0       	push   0xc002c257
c0018d19:	e8 c7 9c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018d1e:	83 c4 10             	add    esp,0x10
c0018d21:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018d26:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018d2d:	75 05                	jne    c0018d34 <CPU::displayFeatures()+0xc6>
c0018d2f:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018d34:	52                   	push   edx
c0018d35:	52                   	push   edx
c0018d36:	50                   	push   eax
c0018d37:	68 6e c2 02 c0       	push   0xc002c26e
c0018d3c:	e8 a4 9c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018d41:	83 c4 10             	add    esp,0x10
c0018d44:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018d49:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018d50:	75 05                	jne    c0018d57 <CPU::displayFeatures()+0xe9>
c0018d52:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018d57:	51                   	push   ecx
c0018d58:	51                   	push   ecx
c0018d59:	50                   	push   eax
c0018d5a:	68 85 c2 02 c0       	push   0xc002c285
c0018d5f:	e8 81 9c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018d64:	83 c4 10             	add    esp,0x10
c0018d67:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018d6c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018d73:	75 05                	jne    c0018d7a <CPU::displayFeatures()+0x10c>
c0018d75:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018d7a:	52                   	push   edx
c0018d7b:	52                   	push   edx
c0018d7c:	50                   	push   eax
c0018d7d:	68 9c c2 02 c0       	push   0xc002c29c
c0018d82:	e8 5e 9c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018d87:	83 c4 10             	add    esp,0x10
c0018d8a:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018d8f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018d96:	75 05                	jne    c0018d9d <CPU::displayFeatures()+0x12f>
c0018d98:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018d9d:	51                   	push   ecx
c0018d9e:	51                   	push   ecx
c0018d9f:	50                   	push   eax
c0018da0:	68 b3 c2 02 c0       	push   0xc002c2b3
c0018da5:	e8 3b 9c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018daa:	83 c4 10             	add    esp,0x10
c0018dad:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018db2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018db9:	75 05                	jne    c0018dc0 <CPU::displayFeatures()+0x152>
c0018dbb:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018dc0:	52                   	push   edx
c0018dc1:	52                   	push   edx
c0018dc2:	50                   	push   eax
c0018dc3:	68 ca c2 02 c0       	push   0xc002c2ca
c0018dc8:	e8 18 9c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018dcd:	83 c4 10             	add    esp,0x10
c0018dd0:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018dd5:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018ddc:	75 05                	jne    c0018de3 <CPU::displayFeatures()+0x175>
c0018dde:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018de3:	51                   	push   ecx
c0018de4:	51                   	push   ecx
c0018de5:	50                   	push   eax
c0018de6:	68 e1 c2 02 c0       	push   0xc002c2e1
c0018deb:	e8 f5 9b ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018df0:	83 c4 10             	add    esp,0x10
c0018df3:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018df8:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018dff:	75 05                	jne    c0018e06 <CPU::displayFeatures()+0x198>
c0018e01:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018e06:	52                   	push   edx
c0018e07:	52                   	push   edx
c0018e08:	50                   	push   eax
c0018e09:	68 f8 c2 02 c0       	push   0xc002c2f8
c0018e0e:	e8 d2 9b ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018e13:	83 c4 10             	add    esp,0x10
c0018e16:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018e1b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018e22:	75 05                	jne    c0018e29 <CPU::displayFeatures()+0x1bb>
c0018e24:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018e29:	51                   	push   ecx
c0018e2a:	51                   	push   ecx
c0018e2b:	50                   	push   eax
c0018e2c:	68 0f c3 02 c0       	push   0xc002c30f
c0018e31:	e8 af 9b ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018e36:	83 c4 10             	add    esp,0x10
c0018e39:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018e3e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018e45:	75 05                	jne    c0018e4c <CPU::displayFeatures()+0x1de>
c0018e47:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018e4c:	52                   	push   edx
c0018e4d:	52                   	push   edx
c0018e4e:	50                   	push   eax
c0018e4f:	68 26 c3 02 c0       	push   0xc002c326
c0018e54:	e8 8c 9b ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018e59:	83 c4 10             	add    esp,0x10
c0018e5c:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018e61:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018e68:	75 05                	jne    c0018e6f <CPU::displayFeatures()+0x201>
c0018e6a:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018e6f:	51                   	push   ecx
c0018e70:	51                   	push   ecx
c0018e71:	50                   	push   eax
c0018e72:	68 3d c3 02 c0       	push   0xc002c33d
c0018e77:	e8 69 9b ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018e7c:	83 c4 10             	add    esp,0x10
c0018e7f:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018e84:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018e8b:	75 05                	jne    c0018e92 <CPU::displayFeatures()+0x224>
c0018e8d:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018e92:	52                   	push   edx
c0018e93:	52                   	push   edx
c0018e94:	50                   	push   eax
c0018e95:	68 54 c3 02 c0       	push   0xc002c354
c0018e9a:	e8 46 9b ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018e9f:	83 c4 10             	add    esp,0x10
c0018ea2:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018ea7:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018eae:	78 05                	js     c0018eb5 <CPU::displayFeatures()+0x247>
c0018eb0:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018eb5:	51                   	push   ecx
c0018eb6:	51                   	push   ecx
c0018eb7:	50                   	push   eax
c0018eb8:	68 6b c3 02 c0       	push   0xc002c36b
c0018ebd:	e8 23 9b ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018ec2:	83 c4 10             	add    esp,0x10
c0018ec5:	b8 b0 aa 02 c0       	mov    eax,0xc002aab0
c0018eca:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018ed1:	75 05                	jne    c0018ed8 <CPU::displayFeatures()+0x26a>
c0018ed3:	b8 b4 aa 02 c0       	mov    eax,0xc002aab4
c0018ed8:	52                   	push   edx
c0018ed9:	52                   	push   edx
c0018eda:	50                   	push   eax
c0018edb:	68 82 c3 02 c0       	push   0xc002c382
c0018ee0:	e8 00 9b ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0018ee5:	83 c4 18             	add    esp,0x18
c0018ee8:	5b                   	pop    ebx
c0018ee9:	c3                   	ret    

c0018eea <CPU::detectFeatures()>:
c0018eea:	55                   	push   ebp
c0018eeb:	57                   	push   edi
c0018eec:	56                   	push   esi
c0018eed:	53                   	push   ebx
c0018eee:	83 ec 50             	sub    esp,0x50
c0018ef1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018ef5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018eff:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018f06:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018f0c:	6a 0d                	push   0xd
c0018f0e:	6a 00                	push   0x0
c0018f10:	55                   	push   ebp
c0018f11:	e8 3a 78 fe ff       	call   c0000750 <memset>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0018f1e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018f25:	0f 84 22 09 00 00    	je     c001984d <CPU::detectFeatures()+0x963>
c0018f2b:	83 ec 0c             	sub    esp,0xc
c0018f2e:	89 ef                	mov    edi,ebp
c0018f30:	6a 10                	push   0x10
c0018f32:	e8 f1 fb ff ff       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c0018f37:	83 e0 01             	and    eax,0x1
c0018f3a:	8d 14 00             	lea    edx,[eax+eax*1]
c0018f3d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f43:	83 e0 fd             	and    eax,0xfffffffd
c0018f46:	09 d0                	or     eax,edx
c0018f48:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f4e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018f55:	e8 ce fb ff ff       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c0018f5a:	83 e0 01             	and    eax,0x1
c0018f5d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018f64:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f6a:	83 e0 fb             	and    eax,0xfffffffb
c0018f6d:	09 d0                	or     eax,edx
c0018f6f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f75:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018f7c:	e8 a7 fb ff ff       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c0018f81:	83 e0 01             	and    eax,0x1
c0018f84:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018f8b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018f91:	83 e0 f7             	and    eax,0xfffffff7
c0018f94:	09 d0                	or     eax,edx
c0018f96:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018f9c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018fa3:	e8 80 fb ff ff       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c0018fa8:	83 e0 01             	and    eax,0x1
c0018fab:	c1 e0 04             	shl    eax,0x4
c0018fae:	88 c2                	mov    dl,al
c0018fb0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fb6:	83 e0 ef             	and    eax,0xffffffef
c0018fb9:	09 d0                	or     eax,edx
c0018fbb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fc1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018fc8:	e8 5b fb ff ff       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c0018fcd:	83 e0 01             	and    eax,0x1
c0018fd0:	c1 e0 05             	shl    eax,0x5
c0018fd3:	88 c2                	mov    dl,al
c0018fd5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018fdb:	83 e0 df             	and    eax,0xffffffdf
c0018fde:	09 d0                	or     eax,edx
c0018fe0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018fe6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018fed:	e8 36 fb ff ff       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c0018ff2:	83 e0 01             	and    eax,0x1
c0018ff5:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ff8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018ffe:	83 e0 fd             	and    eax,0xfffffffd
c0019001:	09 d0                	or     eax,edx
c0019003:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019009:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019010:	e8 13 fb ff ff       	call   c0018b28 <CPU::cpuidCheckEDX(unsigned int)>
c0019015:	83 e0 01             	and    eax,0x1
c0019018:	c1 e0 06             	shl    eax,0x6
c001901b:	88 c2                	mov    dl,al
c001901d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019023:	83 e0 bf             	and    eax,0xffffffbf
c0019026:	09 d0                	or     eax,edx
c0019028:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001902e:	58                   	pop    eax
c001902f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019033:	50                   	push   eax
c0019034:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019038:	50                   	push   eax
c0019039:	8d 74 24 28          	lea    esi,[esp+0x28]
c001903d:	56                   	push   esi
c001903e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019042:	50                   	push   eax
c0019043:	6a 00                	push   0x0
c0019045:	e8 5a fa ff ff       	call   c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001904a:	b8 04 00 00 00       	mov    eax,0x4
c001904f:	89 c1                	mov    ecx,eax
c0019051:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019053:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0019059:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001905d:	89 c1                	mov    ecx,eax
c001905f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019061:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0019067:	8d 74 24 38          	lea    esi,[esp+0x38]
c001906b:	89 c1                	mov    ecx,eax
c001906d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001906f:	83 c4 18             	add    esp,0x18
c0019072:	68 99 c3 02 c0       	push   0xc002c399
c0019077:	55                   	push   ebp
c0019078:	e8 1b 78 fe ff       	call   c0000898 <strcmp>
c001907d:	83 c4 10             	add    esp,0x10
c0019080:	85 c0                	test   eax,eax
c0019082:	75 0f                	jne    c0019093 <CPU::detectFeatures()+0x1a9>
c0019084:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001908e:	e9 22 02 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c0019093:	50                   	push   eax
c0019094:	50                   	push   eax
c0019095:	68 a6 c3 02 c0       	push   0xc002c3a6
c001909a:	55                   	push   ebp
c001909b:	e8 f8 77 fe ff       	call   c0000898 <strcmp>
c00190a0:	83 c4 10             	add    esp,0x10
c00190a3:	85 c0                	test   eax,eax
c00190a5:	74 dd                	je     c0019084 <CPU::detectFeatures()+0x19a>
c00190a7:	50                   	push   eax
c00190a8:	50                   	push   eax
c00190a9:	68 b3 c3 02 c0       	push   0xc002c3b3
c00190ae:	55                   	push   ebp
c00190af:	e8 e4 77 fe ff       	call   c0000898 <strcmp>
c00190b4:	83 c4 10             	add    esp,0x10
c00190b7:	85 c0                	test   eax,eax
c00190b9:	74 2a                	je     c00190e5 <CPU::detectFeatures()+0x1fb>
c00190bb:	50                   	push   eax
c00190bc:	50                   	push   eax
c00190bd:	68 c0 c3 02 c0       	push   0xc002c3c0
c00190c2:	55                   	push   ebp
c00190c3:	e8 d0 77 fe ff       	call   c0000898 <strcmp>
c00190c8:	83 c4 10             	add    esp,0x10
c00190cb:	85 c0                	test   eax,eax
c00190cd:	74 16                	je     c00190e5 <CPU::detectFeatures()+0x1fb>
c00190cf:	50                   	push   eax
c00190d0:	50                   	push   eax
c00190d1:	68 cd c3 02 c0       	push   0xc002c3cd
c00190d6:	55                   	push   ebp
c00190d7:	e8 bc 77 fe ff       	call   c0000898 <strcmp>
c00190dc:	83 c4 10             	add    esp,0x10
c00190df:	85 c0                	test   eax,eax
c00190e1:	74 48                	je     c001912b <CPU::detectFeatures()+0x241>
c00190e3:	eb 0f                	jmp    c00190f4 <CPU::detectFeatures()+0x20a>
c00190e5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00190ef:	e9 c1 01 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c00190f4:	50                   	push   eax
c00190f5:	50                   	push   eax
c00190f6:	68 da c3 02 c0       	push   0xc002c3da
c00190fb:	55                   	push   ebp
c00190fc:	e8 97 77 fe ff       	call   c0000898 <strcmp>
c0019101:	83 c4 10             	add    esp,0x10
c0019104:	85 c0                	test   eax,eax
c0019106:	74 23                	je     c001912b <CPU::detectFeatures()+0x241>
c0019108:	57                   	push   edi
c0019109:	57                   	push   edi
c001910a:	68 e7 c3 02 c0       	push   0xc002c3e7
c001910f:	55                   	push   ebp
c0019110:	e8 83 77 fe ff       	call   c0000898 <strcmp>
c0019115:	83 c4 10             	add    esp,0x10
c0019118:	85 c0                	test   eax,eax
c001911a:	75 1e                	jne    c001913a <CPU::detectFeatures()+0x250>
c001911c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019126:	e9 8a 01 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c001912b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019135:	e9 7b 01 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c001913a:	56                   	push   esi
c001913b:	56                   	push   esi
c001913c:	68 f4 c3 02 c0       	push   0xc002c3f4
c0019141:	55                   	push   ebp
c0019142:	e8 51 77 fe ff       	call   c0000898 <strcmp>
c0019147:	83 c4 10             	add    esp,0x10
c001914a:	85 c0                	test   eax,eax
c001914c:	75 0f                	jne    c001915d <CPU::detectFeatures()+0x273>
c001914e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019158:	e9 58 01 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c001915d:	51                   	push   ecx
c001915e:	51                   	push   ecx
c001915f:	68 b3 c3 02 c0       	push   0xc002c3b3
c0019164:	55                   	push   ebp
c0019165:	e8 2e 77 fe ff       	call   c0000898 <strcmp>
c001916a:	83 c4 10             	add    esp,0x10
c001916d:	85 c0                	test   eax,eax
c001916f:	75 0f                	jne    c0019180 <CPU::detectFeatures()+0x296>
c0019171:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001917b:	e9 35 01 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c0019180:	52                   	push   edx
c0019181:	52                   	push   edx
c0019182:	68 01 c4 02 c0       	push   0xc002c401
c0019187:	55                   	push   ebp
c0019188:	e8 0b 77 fe ff       	call   c0000898 <strcmp>
c001918d:	83 c4 10             	add    esp,0x10
c0019190:	85 c0                	test   eax,eax
c0019192:	75 0f                	jne    c00191a3 <CPU::detectFeatures()+0x2b9>
c0019194:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001919e:	e9 12 01 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c00191a3:	50                   	push   eax
c00191a4:	50                   	push   eax
c00191a5:	68 0e c4 02 c0       	push   0xc002c40e
c00191aa:	55                   	push   ebp
c00191ab:	e8 e8 76 fe ff       	call   c0000898 <strcmp>
c00191b0:	83 c4 10             	add    esp,0x10
c00191b3:	85 c0                	test   eax,eax
c00191b5:	75 0f                	jne    c00191c6 <CPU::detectFeatures()+0x2dc>
c00191b7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00191c1:	e9 ef 00 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c00191c6:	50                   	push   eax
c00191c7:	50                   	push   eax
c00191c8:	68 1b c4 02 c0       	push   0xc002c41b
c00191cd:	55                   	push   ebp
c00191ce:	e8 c5 76 fe ff       	call   c0000898 <strcmp>
c00191d3:	83 c4 10             	add    esp,0x10
c00191d6:	85 c0                	test   eax,eax
c00191d8:	75 0f                	jne    c00191e9 <CPU::detectFeatures()+0x2ff>
c00191da:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00191e4:	e9 cc 00 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c00191e9:	50                   	push   eax
c00191ea:	50                   	push   eax
c00191eb:	68 28 c4 02 c0       	push   0xc002c428
c00191f0:	55                   	push   ebp
c00191f1:	e8 a2 76 fe ff       	call   c0000898 <strcmp>
c00191f6:	83 c4 10             	add    esp,0x10
c00191f9:	85 c0                	test   eax,eax
c00191fb:	75 0f                	jne    c001920c <CPU::detectFeatures()+0x322>
c00191fd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019207:	e9 a9 00 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c001920c:	50                   	push   eax
c001920d:	50                   	push   eax
c001920e:	68 35 c4 02 c0       	push   0xc002c435
c0019213:	55                   	push   ebp
c0019214:	e8 7f 76 fe ff       	call   c0000898 <strcmp>
c0019219:	83 c4 10             	add    esp,0x10
c001921c:	85 c0                	test   eax,eax
c001921e:	75 0f                	jne    c001922f <CPU::detectFeatures()+0x345>
c0019220:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001922a:	e9 86 00 00 00       	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c001922f:	50                   	push   eax
c0019230:	50                   	push   eax
c0019231:	68 42 c4 02 c0       	push   0xc002c442
c0019236:	55                   	push   ebp
c0019237:	e8 5c 76 fe ff       	call   c0000898 <strcmp>
c001923c:	83 c4 10             	add    esp,0x10
c001923f:	85 c0                	test   eax,eax
c0019241:	75 0c                	jne    c001924f <CPU::detectFeatures()+0x365>
c0019243:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001924d:	eb 66                	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c001924f:	50                   	push   eax
c0019250:	50                   	push   eax
c0019251:	68 4f c4 02 c0       	push   0xc002c44f
c0019256:	55                   	push   ebp
c0019257:	e8 3c 76 fe ff       	call   c0000898 <strcmp>
c001925c:	83 c4 10             	add    esp,0x10
c001925f:	85 c0                	test   eax,eax
c0019261:	75 0c                	jne    c001926f <CPU::detectFeatures()+0x385>
c0019263:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001926d:	eb 46                	jmp    c00192b5 <CPU::detectFeatures()+0x3cb>
c001926f:	57                   	push   edi
c0019270:	57                   	push   edi
c0019271:	68 5c c4 02 c0       	push   0xc002c45c
c0019276:	55                   	push   ebp
c0019277:	e8 1c 76 fe ff       	call   c0000898 <strcmp>
c001927c:	83 c4 10             	add    esp,0x10
c001927f:	85 c0                	test   eax,eax
c0019281:	74 e0                	je     c0019263 <CPU::detectFeatures()+0x379>
c0019283:	56                   	push   esi
c0019284:	56                   	push   esi
c0019285:	68 69 c4 02 c0       	push   0xc002c469
c001928a:	55                   	push   ebp
c001928b:	e8 08 76 fe ff       	call   c0000898 <strcmp>
c0019290:	83 c4 10             	add    esp,0x10
c0019293:	85 c0                	test   eax,eax
c0019295:	74 cc                	je     c0019263 <CPU::detectFeatures()+0x379>
c0019297:	51                   	push   ecx
c0019298:	51                   	push   ecx
c0019299:	68 76 c4 02 c0       	push   0xc002c476
c001929e:	55                   	push   ebp
c001929f:	e8 f4 75 fe ff       	call   c0000898 <strcmp>
c00192a4:	83 c4 10             	add    esp,0x10
c00192a7:	85 c0                	test   eax,eax
c00192a9:	74 b8                	je     c0019263 <CPU::detectFeatures()+0x379>
c00192ab:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00192b5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00192ba:	0f 86 be 00 00 00    	jbe    c001937e <CPU::detectFeatures()+0x494>
c00192c0:	83 ec 0c             	sub    esp,0xc
c00192c3:	68 80 00 00 00       	push   0x80
c00192c8:	e8 b7 f8 ff ff       	call   c0018b84 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00192cd:	83 e0 01             	and    eax,0x1
c00192d0:	c1 e0 06             	shl    eax,0x6
c00192d3:	88 c2                	mov    dl,al
c00192d5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00192db:	83 e0 bf             	and    eax,0xffffffbf
c00192de:	09 d0                	or     eax,edx
c00192e0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00192e6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00192ed:	e8 92 f8 ff ff       	call   c0018b84 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00192f2:	83 e0 01             	and    eax,0x1
c00192f5:	c1 e0 04             	shl    eax,0x4
c00192f8:	88 c2                	mov    dl,al
c00192fa:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019300:	83 e0 ef             	and    eax,0xffffffef
c0019303:	09 d0                	or     eax,edx
c0019305:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001930b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019312:	e8 6d f8 ff ff       	call   c0018b84 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019317:	c1 e0 07             	shl    eax,0x7
c001931a:	88 c2                	mov    dl,al
c001931c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019322:	83 e0 7f             	and    eax,0x7f
c0019325:	09 d0                	or     eax,edx
c0019327:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001932d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019334:	e8 79 f8 ff ff       	call   c0018bb2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019339:	83 e0 01             	and    eax,0x1
c001933c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019343:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019349:	83 e0 f7             	and    eax,0xfffffff7
c001934c:	09 d0                	or     eax,edx
c001934e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019354:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001935b:	e8 52 f8 ff ff       	call   c0018bb2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019360:	83 c4 10             	add    esp,0x10
c0019363:	83 e0 01             	and    eax,0x1
c0019366:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001936d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019373:	83 e0 fb             	and    eax,0xfffffffb
c0019376:	09 d0                	or     eax,edx
c0019378:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001937e:	83 ec 0c             	sub    esp,0xc
c0019381:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019385:	50                   	push   eax
c0019386:	8d 44 24 28          	lea    eax,[esp+0x28]
c001938a:	50                   	push   eax
c001938b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001938f:	56                   	push   esi
c0019390:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019394:	50                   	push   eax
c0019395:	6a 01                	push   0x1
c0019397:	e8 08 f7 ff ff       	call   c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001939c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00193a0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00193a6:	88 ca                	mov    dl,cl
c00193a8:	83 e0 f0             	and    eax,0xfffffff0
c00193ab:	83 e2 0f             	and    edx,0xf
c00193ae:	09 d0                	or     eax,edx
c00193b0:	88 ca                	mov    dl,cl
c00193b2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00193b8:	c0 ea 04             	shr    dl,0x4
c00193bb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00193bf:	0f b6 c2             	movzx  eax,dl
c00193c2:	83 c4 20             	add    esp,0x20
c00193c5:	c1 e0 06             	shl    eax,0x6
c00193c8:	89 c7                	mov    edi,eax
c00193ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193d0:	66 25 3f c0          	and    ax,0xc03f
c00193d4:	09 f8                	or     eax,edi
c00193d6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00193dd:	89 c8                	mov    eax,ecx
c00193df:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00193e6:	c1 e8 08             	shr    eax,0x8
c00193e9:	83 e5 3f             	and    ebp,0x3f
c00193ec:	83 e0 0f             	and    eax,0xf
c00193ef:	89 c7                	mov    edi,eax
c00193f1:	c1 e7 06             	shl    edi,0x6
c00193f4:	09 ef                	or     edi,ebp
c00193f6:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00193fd:	89 fa                	mov    edx,edi
c00193ff:	83 e5 c0             	and    ebp,0xffffffc0
c0019402:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019408:	88 c2                	mov    dl,al
c001940a:	c0 ea 02             	shr    dl,0x2
c001940d:	89 d7                	mov    edi,edx
c001940f:	09 ef                	or     edi,ebp
c0019411:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019417:	89 fa                	mov    edx,edi
c0019419:	83 e5 cf             	and    ebp,0xffffffcf
c001941c:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019422:	89 cf                	mov    edi,ecx
c0019424:	c1 ef 0c             	shr    edi,0xc
c0019427:	83 e7 03             	and    edi,0x3
c001942a:	c1 e7 04             	shl    edi,0x4
c001942d:	09 ef                	or     edi,ebp
c001942f:	3c 06                	cmp    al,0x6
c0019431:	89 fa                	mov    edx,edi
c0019433:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019439:	74 04                	je     c001943f <CPU::detectFeatures()+0x555>
c001943b:	3c 0f                	cmp    al,0xf
c001943d:	75 5c                	jne    c001949b <CPU::detectFeatures()+0x5b1>
c001943f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019443:	89 cf                	mov    edi,ecx
c0019445:	c1 ef 10             	shr    edi,0x10
c0019448:	c1 e7 04             	shl    edi,0x4
c001944b:	09 fa                	or     edx,edi
c001944d:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019453:	0f b6 d2             	movzx  edx,dl
c0019456:	66 81 e7 3f c0       	and    di,0xc03f
c001945b:	c1 e2 06             	shl    edx,0x6
c001945e:	09 fa                	or     edx,edi
c0019460:	3c 0f                	cmp    al,0xf
c0019462:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019469:	75 30                	jne    c001949b <CPU::detectFeatures()+0x5b1>
c001946b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019471:	c1 e9 14             	shr    ecx,0x14
c0019474:	83 e0 3f             	and    eax,0x3f
c0019477:	83 c1 0f             	add    ecx,0xf
c001947a:	88 ca                	mov    dl,cl
c001947c:	c0 e9 02             	shr    cl,0x2
c001947f:	c1 e2 06             	shl    edx,0x6
c0019482:	09 d0                	or     eax,edx
c0019484:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001948a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019490:	83 e0 c0             	and    eax,0xffffffc0
c0019493:	09 c1                	or     ecx,eax
c0019495:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001949b:	83 ec 0c             	sub    esp,0xc
c001949e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00194a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194a9:	50                   	push   eax
c00194aa:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194ae:	55                   	push   ebp
c00194af:	56                   	push   esi
c00194b0:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00194b4:	57                   	push   edi
c00194b5:	68 00 00 00 80       	push   0x80000000
c00194ba:	e8 e5 f5 ff ff       	call   c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194bf:	83 c4 20             	add    esp,0x20
c00194c2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00194ca:	76 22                	jbe    c00194ee <CPU::detectFeatures()+0x604>
c00194cc:	83 ec 0c             	sub    esp,0xc
c00194cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194d3:	50                   	push   eax
c00194d4:	55                   	push   ebp
c00194d5:	56                   	push   esi
c00194d6:	57                   	push   edi
c00194d7:	68 01 00 00 80       	push   0x80000001
c00194dc:	e8 c3 f5 ff ff       	call   c0018aa4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194e1:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00194eb:	83 c4 20             	add    esp,0x20
c00194ee:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00194f4:	83 f8 01             	cmp    eax,0x1
c00194f7:	75 6f                	jne    c0019568 <CPU::detectFeatures()+0x67e>
c00194f9:	51                   	push   ecx
c00194fa:	51                   	push   ecx
c00194fb:	68 82 c4 02 c0       	push   0xc002c482
c0019500:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019504:	56                   	push   esi
c0019505:	e8 02 73 fe ff       	call   c000080c <strcpy>
c001950a:	5f                   	pop    edi
c001950b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019511:	5d                   	pop    ebp
c0019512:	66 c1 e8 06          	shr    ax,0x6
c0019516:	0f b6 c0             	movzx  eax,al
c0019519:	50                   	push   eax
c001951a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019520:	c1 e8 0e             	shr    eax,0xe
c0019523:	0f b6 c0             	movzx  eax,al
c0019526:	50                   	push   eax
c0019527:	e8 22 f2 ff ff       	call   c001874e <CPU::lookupIntelName(unsigned char, unsigned char)>
c001952c:	5a                   	pop    edx
c001952d:	59                   	pop    ecx
c001952e:	50                   	push   eax
c001952f:	56                   	push   esi
c0019530:	e8 17 74 fe ff       	call   c000094c <strcat>
c0019535:	5f                   	pop    edi
c0019536:	5d                   	pop    ebp
c0019537:	56                   	push   esi
c0019538:	53                   	push   ebx
c0019539:	e8 d6 aa ff ff       	call   c0014014 <Device::setName(char const*)>
c001953e:	58                   	pop    eax
c001953f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019545:	5a                   	pop    edx
c0019546:	68 89 c4 02 c0       	push   0xc002c489
c001954b:	50                   	push   eax
c001954c:	e8 47 73 fe ff       	call   c0000898 <strcmp>
c0019551:	83 c4 10             	add    esp,0x10
c0019554:	85 c0                	test   eax,eax
c0019556:	0f 85 71 03 00 00    	jne    c00198cd <CPU::detectFeatures()+0x9e3>
c001955c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019563:	e9 65 03 00 00       	jmp    c00198cd <CPU::detectFeatures()+0x9e3>
c0019568:	83 f8 02             	cmp    eax,0x2
c001956b:	0f 85 b5 00 00 00    	jne    c0019626 <CPU::detectFeatures()+0x73c>
c0019571:	57                   	push   edi
c0019572:	57                   	push   edi
c0019573:	68 9b c4 02 c0       	push   0xc002c49b
c0019578:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001957c:	56                   	push   esi
c001957d:	e8 8a 72 fe ff       	call   c000080c <strcpy>
c0019582:	5d                   	pop    ebp
c0019583:	58                   	pop    eax
c0019584:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001958a:	66 c1 e8 06          	shr    ax,0x6
c001958e:	0f b6 c0             	movzx  eax,al
c0019591:	50                   	push   eax
c0019592:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019598:	c1 e8 0e             	shr    eax,0xe
c001959b:	0f b6 c0             	movzx  eax,al
c001959e:	50                   	push   eax
c001959f:	e8 16 f0 ff ff       	call   c00185ba <CPU::lookupAMDName(unsigned char, unsigned char)>
c00195a4:	5a                   	pop    edx
c00195a5:	59                   	pop    ecx
c00195a6:	50                   	push   eax
c00195a7:	56                   	push   esi
c00195a8:	e8 9f 73 fe ff       	call   c000094c <strcat>
c00195ad:	5f                   	pop    edi
c00195ae:	5d                   	pop    ebp
c00195af:	56                   	push   esi
c00195b0:	53                   	push   ebx
c00195b1:	e8 5e aa ff ff       	call   c0014014 <Device::setName(char const*)>
c00195b6:	58                   	pop    eax
c00195b7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00195bd:	5a                   	pop    edx
c00195be:	68 a0 c4 02 c0       	push   0xc002c4a0
c00195c3:	50                   	push   eax
c00195c4:	e8 cf 72 fe ff       	call   c0000898 <strcmp>
c00195c9:	83 c4 10             	add    esp,0x10
c00195cc:	85 c0                	test   eax,eax
c00195ce:	75 20                	jne    c00195f0 <CPU::detectFeatures()+0x706>
c00195d0:	8b 15 68 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f268
c00195d6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00195dc:	a8 01                	test   al,0x1
c00195de:	74 10                	je     c00195f0 <CPU::detectFeatures()+0x706>
c00195e0:	83 e0 fe             	and    eax,0xfffffffe
c00195e3:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00195e9:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00195f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00195f6:	c1 e8 0e             	shr    eax,0xe
c00195f9:	3c 05                	cmp    al,0x5
c00195fb:	0f 85 cc 02 00 00    	jne    c00198cd <CPU::detectFeatures()+0x9e3>
c0019601:	56                   	push   esi
c0019602:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019608:	83 e0 0f             	and    eax,0xf
c001960b:	50                   	push   eax
c001960c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019612:	66 c1 e8 06          	shr    ax,0x6
c0019616:	0f b6 c0             	movzx  eax,al
c0019619:	50                   	push   eax
c001961a:	6a 05                	push   0x5
c001961c:	e8 0f f4 ff ff       	call   c0018a30 <CPU::AMD_K6_writeback(int, int, int)>
c0019621:	e9 1f 02 00 00       	jmp    c0019845 <CPU::detectFeatures()+0x95b>
c0019626:	8d 50 fd             	lea    edx,[eax-0x3]
c0019629:	83 fa 01             	cmp    edx,0x1
c001962c:	76 09                	jbe    c0019637 <CPU::detectFeatures()+0x74d>
c001962e:	83 f8 06             	cmp    eax,0x6
c0019631:	0f 85 91 01 00 00    	jne    c00197c8 <CPU::detectFeatures()+0x8de>
c0019637:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001963d:	c1 ea 0e             	shr    edx,0xe
c0019640:	80 fa 05             	cmp    dl,0x5
c0019643:	75 7b                	jne    c00196c0 <CPU::detectFeatures()+0x7d6>
c0019645:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001964b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019650:	66 81 fa 00 01       	cmp    dx,0x100
c0019655:	75 0c                	jne    c0019663 <CPU::detectFeatures()+0x779>
c0019657:	51                   	push   ecx
c0019658:	51                   	push   ecx
c0019659:	68 a7 c4 02 c0       	push   0xc002c4a7
c001965e:	e9 dc 01 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c0019663:	66 81 fa 00 02       	cmp    dx,0x200
c0019668:	75 0c                	jne    c0019676 <CPU::detectFeatures()+0x78c>
c001966a:	52                   	push   edx
c001966b:	52                   	push   edx
c001966c:	68 ba c4 02 c0       	push   0xc002c4ba
c0019671:	e9 c9 01 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c0019676:	66 81 fa 40 02       	cmp    dx,0x240
c001967b:	75 0c                	jne    c0019689 <CPU::detectFeatures()+0x79f>
c001967d:	50                   	push   eax
c001967e:	50                   	push   eax
c001967f:	68 cc c4 02 c0       	push   0xc002c4cc
c0019684:	e9 b6 01 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c0019689:	83 f8 06             	cmp    eax,0x6
c001968c:	75 0c                	jne    c001969a <CPU::detectFeatures()+0x7b0>
c001968e:	50                   	push   eax
c001968f:	50                   	push   eax
c0019690:	68 de c4 02 c0       	push   0xc002c4de
c0019695:	e9 a5 01 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c001969a:	83 f8 04             	cmp    eax,0x4
c001969d:	75 0c                	jne    c00196ab <CPU::detectFeatures()+0x7c1>
c001969f:	50                   	push   eax
c00196a0:	50                   	push   eax
c00196a1:	68 ea c4 02 c0       	push   0xc002c4ea
c00196a6:	e9 94 01 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c00196ab:	83 f8 03             	cmp    eax,0x3
c00196ae:	0f 85 19 02 00 00    	jne    c00198cd <CPU::detectFeatures()+0x9e3>
c00196b4:	50                   	push   eax
c00196b5:	50                   	push   eax
c00196b6:	68 f2 c4 02 c0       	push   0xc002c4f2
c00196bb:	e9 7f 01 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c00196c0:	80 fa 06             	cmp    dl,0x6
c00196c3:	0f 85 db 00 00 00    	jne    c00197a4 <CPU::detectFeatures()+0x8ba>
c00196c9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00196cf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00196d4:	66 81 fa 80 01       	cmp    dx,0x180
c00196d9:	75 0c                	jne    c00196e7 <CPU::detectFeatures()+0x7fd>
c00196db:	50                   	push   eax
c00196dc:	50                   	push   eax
c00196dd:	68 fd c4 02 c0       	push   0xc002c4fd
c00196e2:	e9 58 01 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c00196e7:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00196ed:	66 f7 c1 80 ff       	test   cx,0xff80
c00196f2:	75 0c                	jne    c0019700 <CPU::detectFeatures()+0x816>
c00196f4:	50                   	push   eax
c00196f5:	50                   	push   eax
c00196f6:	68 0d c5 02 c0       	push   0xc002c50d
c00196fb:	e9 3f 01 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c0019700:	66 81 fa 40 02       	cmp    dx,0x240
c0019705:	75 0c                	jne    c0019713 <CPU::detectFeatures()+0x829>
c0019707:	55                   	push   ebp
c0019708:	55                   	push   ebp
c0019709:	68 14 c5 02 c0       	push   0xc002c514
c001970e:	e9 2c 01 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c0019713:	66 81 fa 80 02       	cmp    dx,0x280
c0019718:	75 0c                	jne    c0019726 <CPU::detectFeatures()+0x83c>
c001971a:	57                   	push   edi
c001971b:	57                   	push   edi
c001971c:	68 1d c5 02 c0       	push   0xc002c51d
c0019721:	e9 19 01 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c0019726:	66 81 fa 40 03       	cmp    dx,0x340
c001972b:	74 ed                	je     c001971a <CPU::detectFeatures()+0x830>
c001972d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019732:	75 0c                	jne    c0019740 <CPU::detectFeatures()+0x856>
c0019734:	56                   	push   esi
c0019735:	56                   	push   esi
c0019736:	68 24 c5 02 c0       	push   0xc002c524
c001973b:	e9 ff 00 00 00       	jmp    c001983f <CPU::detectFeatures()+0x955>
c0019740:	83 f8 06             	cmp    eax,0x6
c0019743:	0f 84 45 ff ff ff    	je     c001968e <CPU::detectFeatures()+0x7a4>
c0019749:	83 f8 04             	cmp    eax,0x4
c001974c:	0f 84 4d ff ff ff    	je     c001969f <CPU::detectFeatures()+0x7b5>
c0019752:	83 f8 03             	cmp    eax,0x3
c0019755:	0f 85 72 01 00 00    	jne    c00198cd <CPU::detectFeatures()+0x9e3>
c001975b:	51                   	push   ecx
c001975c:	51                   	push   ecx
c001975d:	68 2d c5 02 c0       	push   0xc002c52d
c0019762:	53                   	push   ebx
c0019763:	e8 ac a8 ff ff       	call   c0014014 <Device::setName(char const*)>
c0019768:	b1 c1                	mov    cl,0xc1
c001976a:	88 c8                	mov    al,cl
c001976c:	e6 22                	out    0x22,al
c001976e:	e4 23                	in     al,0x23
c0019770:	88 c2                	mov    dl,al
c0019772:	88 c8                	mov    al,cl
c0019774:	e6 22                	out    0x22,al
c0019776:	88 d0                	mov    al,dl
c0019778:	83 c8 10             	or     eax,0x10
c001977b:	e6 23                	out    0x23,al
c001977d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019784:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019787:	89 d0                	mov    eax,edx
c0019789:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001978f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019793:	40                   	inc    eax
c0019794:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001979a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001979f:	e9 a1 00 00 00       	jmp    c0019845 <CPU::detectFeatures()+0x95b>
c00197a4:	83 f8 06             	cmp    eax,0x6
c00197a7:	0f 84 e1 fe ff ff    	je     c001968e <CPU::detectFeatures()+0x7a4>
c00197ad:	83 f8 04             	cmp    eax,0x4
c00197b0:	0f 84 e9 fe ff ff    	je     c001969f <CPU::detectFeatures()+0x7b5>
c00197b6:	83 f8 03             	cmp    eax,0x3
c00197b9:	0f 85 0e 01 00 00    	jne    c00198cd <CPU::detectFeatures()+0x9e3>
c00197bf:	52                   	push   edx
c00197c0:	52                   	push   edx
c00197c1:	68 38 c5 02 c0       	push   0xc002c538
c00197c6:	eb 77                	jmp    c001983f <CPU::detectFeatures()+0x955>
c00197c8:	83 f8 07             	cmp    eax,0x7
c00197cb:	75 09                	jne    c00197d6 <CPU::detectFeatures()+0x8ec>
c00197cd:	50                   	push   eax
c00197ce:	50                   	push   eax
c00197cf:	68 42 c5 02 c0       	push   0xc002c542
c00197d4:	eb 69                	jmp    c001983f <CPU::detectFeatures()+0x955>
c00197d6:	83 f8 0a             	cmp    eax,0xa
c00197d9:	75 09                	jne    c00197e4 <CPU::detectFeatures()+0x8fa>
c00197db:	50                   	push   eax
c00197dc:	50                   	push   eax
c00197dd:	68 4d c5 02 c0       	push   0xc002c54d
c00197e2:	eb 5b                	jmp    c001983f <CPU::detectFeatures()+0x955>
c00197e4:	83 f8 0b             	cmp    eax,0xb
c00197e7:	75 09                	jne    c00197f2 <CPU::detectFeatures()+0x908>
c00197e9:	50                   	push   eax
c00197ea:	50                   	push   eax
c00197eb:	68 55 c5 02 c0       	push   0xc002c555
c00197f0:	eb 4d                	jmp    c001983f <CPU::detectFeatures()+0x955>
c00197f2:	83 f8 08             	cmp    eax,0x8
c00197f5:	75 09                	jne    c0019800 <CPU::detectFeatures()+0x916>
c00197f7:	50                   	push   eax
c00197f8:	50                   	push   eax
c00197f9:	68 5e c5 02 c0       	push   0xc002c55e
c00197fe:	eb 3f                	jmp    c001983f <CPU::detectFeatures()+0x955>
c0019800:	83 f8 09             	cmp    eax,0x9
c0019803:	75 09                	jne    c001980e <CPU::detectFeatures()+0x924>
c0019805:	50                   	push   eax
c0019806:	50                   	push   eax
c0019807:	68 66 c5 02 c0       	push   0xc002c566
c001980c:	eb 31                	jmp    c001983f <CPU::detectFeatures()+0x955>
c001980e:	83 f8 05             	cmp    eax,0x5
c0019811:	75 09                	jne    c001981c <CPU::detectFeatures()+0x932>
c0019813:	50                   	push   eax
c0019814:	50                   	push   eax
c0019815:	68 6e c5 02 c0       	push   0xc002c56e
c001981a:	eb 23                	jmp    c001983f <CPU::detectFeatures()+0x955>
c001981c:	83 f8 0c             	cmp    eax,0xc
c001981f:	75 09                	jne    c001982a <CPU::detectFeatures()+0x940>
c0019821:	55                   	push   ebp
c0019822:	55                   	push   ebp
c0019823:	68 7c c5 02 c0       	push   0xc002c57c
c0019828:	eb 15                	jmp    c001983f <CPU::detectFeatures()+0x955>
c001982a:	83 f8 0d             	cmp    eax,0xd
c001982d:	75 09                	jne    c0019838 <CPU::detectFeatures()+0x94e>
c001982f:	57                   	push   edi
c0019830:	57                   	push   edi
c0019831:	68 87 c5 02 c0       	push   0xc002c587
c0019836:	eb 07                	jmp    c001983f <CPU::detectFeatures()+0x955>
c0019838:	56                   	push   esi
c0019839:	56                   	push   esi
c001983a:	68 9b c5 02 c0       	push   0xc002c59b
c001983f:	53                   	push   ebx
c0019840:	e8 cf a7 ff ff       	call   c0014014 <Device::setName(char const*)>
c0019845:	83 c4 10             	add    esp,0x10
c0019848:	e9 80 00 00 00       	jmp    c00198cd <CPU::detectFeatures()+0x9e3>
c001984d:	51                   	push   ecx
c001984e:	51                   	push   ecx
c001984f:	68 e7 c3 02 c0       	push   0xc002c3e7
c0019854:	55                   	push   ebp
c0019855:	e8 b2 6f fe ff       	call   c000080c <strcpy>
c001985a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019864:	e8 45 6a fe ff       	call   c00002ae <is486>
c0019869:	83 c4 10             	add    esp,0x10
c001986c:	85 c0                	test   eax,eax
c001986e:	74 2b                	je     c001989b <CPU::detectFeatures()+0x9b1>
c0019870:	52                   	push   edx
c0019871:	52                   	push   edx
c0019872:	68 a7 c5 02 c0       	push   0xc002c5a7
c0019877:	53                   	push   ebx
c0019878:	e8 97 a7 ff ff       	call   c0014014 <Device::setName(char const*)>
c001987d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019884:	0f 20 c0             	mov    eax,cr0
c0019887:	83 e0 14             	and    eax,0x14
c001988a:	83 c4 10             	add    esp,0x10
c001988d:	83 f8 04             	cmp    eax,0x4
c0019890:	75 1f                	jne    c00198b1 <CPU::detectFeatures()+0x9c7>
c0019892:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019899:	eb 32                	jmp    c00198cd <CPU::detectFeatures()+0x9e3>
c001989b:	50                   	push   eax
c001989c:	50                   	push   eax
c001989d:	68 b2 c5 02 c0       	push   0xc002c5b2
c00198a2:	53                   	push   ebx
c00198a3:	e8 6c a7 ff ff       	call   c0014014 <Device::setName(char const*)>
c00198a8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00198af:	eb d3                	jmp    c0019884 <CPU::detectFeatures()+0x99a>
c00198b1:	e8 d3 69 fe ff       	call   c0000289 <hasLegacyFPU>
c00198b6:	83 e0 01             	and    eax,0x1
c00198b9:	8d 14 00             	lea    edx,[eax+eax*1]
c00198bc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00198c2:	83 e0 fd             	and    eax,0xfffffffd
c00198c5:	09 d0                	or     eax,edx
c00198c7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00198cd:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00198d4:	83 c4 4c             	add    esp,0x4c
c00198d7:	5b                   	pop    ebx
c00198d8:	5e                   	pop    esi
c00198d9:	5f                   	pop    edi
c00198da:	5d                   	pop    ebp
c00198db:	c3                   	ret    

c00198dc <CPU::setupSMEP()>:
c00198dc:	0f 20 e0             	mov    eax,cr4
c00198df:	0d 00 00 10 00       	or     eax,0x100000
c00198e4:	0f 22 e0             	mov    cr4,eax
c00198e7:	c3                   	ret    

c00198e8 <CPU::setupUMIP()>:
c00198e8:	0f 20 e0             	mov    eax,cr4
c00198eb:	80 cc 08             	or     ah,0x8
c00198ee:	0f 22 e0             	mov    cr4,eax
c00198f1:	c3                   	ret    

c00198f2 <CPU::setupTSC()>:
c00198f2:	0f 20 e0             	mov    eax,cr4
c00198f5:	83 c8 04             	or     eax,0x4
c00198f8:	0f 22 e0             	mov    cr4,eax
c00198fb:	c3                   	ret    

c00198fc <CPU::setupLargePages()>:
c00198fc:	0f 20 e0             	mov    eax,cr4
c00198ff:	83 c8 10             	or     eax,0x10
c0019902:	0f 22 e0             	mov    cr4,eax
c0019905:	c3                   	ret    

c0019906 <CPU::setupPAT()>:
c0019906:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001990b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019912:	74 2c                	je     c0019940 <CPU::setupPAT()+0x3a>
c0019914:	53                   	push   ebx
c0019915:	83 ec 10             	sub    esp,0x10
c0019918:	68 77 02 00 00       	push   0x277
c001991d:	50                   	push   eax
c001991e:	e8 61 55 ff ff       	call   c000ee84 <Computer::rdmsr(unsigned int)>
c0019923:	83 e2 f8             	and    edx,0xfffffff8
c0019926:	83 ca 01             	or     edx,0x1
c0019929:	52                   	push   edx
c001992a:	50                   	push   eax
c001992b:	68 77 02 00 00       	push   0x277
c0019930:	ff 35 68 f2 02 c0    	push   DWORD PTR ds:0xc002f268
c0019936:	e8 75 55 ff ff       	call   c000eeb0 <Computer::wrmsr(unsigned int, unsigned long long)>
c001993b:	83 c4 28             	add    esp,0x28
c001993e:	5b                   	pop    ebx
c001993f:	c3                   	ret    
c0019940:	c3                   	ret    
c0019941:	90                   	nop

c0019942 <CPU::setupMTRR()>:
c0019942:	c3                   	ret    
c0019943:	90                   	nop

c0019944 <CPU::setupGlobalPages()>:
c0019944:	0f 20 e0             	mov    eax,cr4
c0019947:	0c 80                	or     al,0x80
c0019949:	0f 22 e0             	mov    cr4,eax
c001994c:	c3                   	ret    
c001994d:	90                   	nop

c001994e <CPU::allowUsermodeDataAccess()>:
c001994e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019952:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019959:	74 03                	je     c001995e <CPU::allowUsermodeDataAccess()+0x10>
c001995b:	0f 01 cb             	stac   
c001995e:	c3                   	ret    
c001995f:	90                   	nop

c0019960 <CPU::prohibitUsermodeDataAccess()>:
c0019960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019964:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001996b:	74 03                	je     c0019970 <CPU::prohibitUsermodeDataAccess()+0x10>
c001996d:	0f 01 ca             	clac   
c0019970:	c3                   	ret    
c0019971:	90                   	nop

c0019972 <CPU::setupSMAP()>:
c0019972:	0f 20 e0             	mov    eax,cr4
c0019975:	0d 00 00 20 00       	or     eax,0x200000
c001997a:	0f 22 e0             	mov    cr4,eax
c001997d:	eb e1                	jmp    c0019960 <CPU::prohibitUsermodeDataAccess()>
c001997f:	90                   	nop

c0019980 <CPU::setupFeatures()>:
c0019980:	83 ec 0c             	sub    esp,0xc
c0019983:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019987:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001998e:	74 07                	je     c0019997 <CPU::setupFeatures()+0x17>
c0019990:	52                   	push   edx
c0019991:	e8 46 ff ff ff       	call   c00198dc <CPU::setupSMEP()>
c0019996:	58                   	pop    eax
c0019997:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001999e:	74 07                	je     c00199a7 <CPU::setupFeatures()+0x27>
c00199a0:	52                   	push   edx
c00199a1:	e8 cc ff ff ff       	call   c0019972 <CPU::setupSMAP()>
c00199a6:	58                   	pop    eax
c00199a7:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00199ae:	74 07                	je     c00199b7 <CPU::setupFeatures()+0x37>
c00199b0:	52                   	push   edx
c00199b1:	e8 32 ff ff ff       	call   c00198e8 <CPU::setupUMIP()>
c00199b6:	58                   	pop    eax
c00199b7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00199be:	74 07                	je     c00199c7 <CPU::setupFeatures()+0x47>
c00199c0:	52                   	push   edx
c00199c1:	e8 2c ff ff ff       	call   c00198f2 <CPU::setupTSC()>
c00199c6:	58                   	pop    eax
c00199c7:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00199ce:	74 07                	je     c00199d7 <CPU::setupFeatures()+0x57>
c00199d0:	52                   	push   edx
c00199d1:	e8 26 ff ff ff       	call   c00198fc <CPU::setupLargePages()>
c00199d6:	59                   	pop    ecx
c00199d7:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00199de:	74 07                	je     c00199e7 <CPU::setupFeatures()+0x67>
c00199e0:	52                   	push   edx
c00199e1:	e8 5e ff ff ff       	call   c0019944 <CPU::setupGlobalPages()>
c00199e6:	58                   	pop    eax
c00199e7:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00199ee:	74 0c                	je     c00199fc <CPU::setupFeatures()+0x7c>
c00199f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00199f4:	83 c4 0c             	add    esp,0xc
c00199f7:	e9 0a ff ff ff       	jmp    c0019906 <CPU::setupPAT()>
c00199fc:	83 c4 0c             	add    esp,0xc
c00199ff:	c3                   	ret    

c0019a00 <CPU::open(int, int, void*)>:
c0019a00:	57                   	push   edi
c0019a01:	56                   	push   esi
c0019a02:	53                   	push   ebx
c0019a03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019a0b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019a11:	83 ec 0c             	sub    esp,0xc
c0019a14:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019a1a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019a20:	50                   	push   eax
c0019a21:	e8 6e 57 ff ff       	call   c000f194 <GDT::setup()>
c0019a26:	83 c4 0c             	add    esp,0xc
c0019a29:	6a 00                	push   0x0
c0019a2b:	68 ef be ad de       	push   0xdeadbeef
c0019a30:	57                   	push   edi
c0019a31:	e8 1a 75 ff ff       	call   c0010f50 <TSS::setup(unsigned long, unsigned long)>
c0019a36:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019a39:	e8 f2 74 ff ff       	call   c0010f30 <TSS::flush()>
c0019a3e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019a44:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a47:	e8 ac 59 ff ff       	call   c000f3f8 <IDT::setup()>
c0019a4c:	b8 00 04 00 00       	mov    eax,0x400
c0019a51:	0f 23 f8             	mov    db7,eax
c0019a54:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019a5e:	e8 43 62 ff ff       	call   c000fca6 <Phys::allocatePage()>
c0019a63:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019a69:	89 30                	mov    DWORD PTR [eax],esi
c0019a6b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019a71:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019a74:	58                   	pop    eax
c0019a75:	5a                   	pop    edx
c0019a76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a80:	e8 6b 86 ff ff       	call   c00120f0 <VAS::setCPUSpecific(unsigned long)>
c0019a85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a88:	e8 5d f4 ff ff       	call   c0018eea <CPU::detectFeatures()>
c0019a8d:	e8 b4 b9 ff ff       	call   c0015446 <setupInterruptController()>
c0019a92:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019a98:	a1 80 f2 02 c0       	mov    eax,ds:0xc002f280
c0019a9d:	83 e0 10             	and    eax,0x10
c0019aa0:	83 f8 01             	cmp    eax,0x1
c0019aa3:	19 c0                	sbb    eax,eax
c0019aa5:	83 e0 46             	and    eax,0x46
c0019aa8:	83 c0 1e             	add    eax,0x1e
c0019aab:	89 04 24             	mov    DWORD PTR [esp],eax
c0019aae:	e8 ea cf ff ff       	call   c0016a9d <setupTimer(int)>
c0019ab3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019ab9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019abc:	e8 bf fe ff ff       	call   c0019980 <CPU::setupFeatures()>
c0019ac1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ac4:	e8 a5 f1 ff ff       	call   c0018c6e <CPU::displayFeatures()>
c0019ac9:	83 c4 10             	add    esp,0x10
c0019acc:	31 c0                	xor    eax,eax
c0019ace:	5b                   	pop    ebx
c0019acf:	5e                   	pop    esi
c0019ad0:	5f                   	pop    edi
c0019ad1:	c3                   	ret    

c0019ad2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ad2:	57                   	push   edi
c0019ad3:	56                   	push   esi
c0019ad4:	53                   	push   ebx
c0019ad5:	51                   	push   ecx
c0019ad6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019ada:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019add:	0f 02 c0             	lar    eax,ax
c0019ae0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019ae3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ae7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019aea:	88 ca                	mov    dl,cl
c0019aec:	c0 ea 06             	shr    dl,0x6
c0019aef:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019af3:	89 ca                	mov    edx,ecx
c0019af5:	66 c1 ea 03          	shr    dx,0x3
c0019af9:	83 e2 07             	and    edx,0x7
c0019afc:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019b01:	88 17                	mov    BYTE PTR [edi],dl
c0019b03:	0f 84 a6 01 00 00    	je     c0019caf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019b09:	83 e1 07             	and    ecx,0x7
c0019b0c:	80 f9 04             	cmp    cl,0x4
c0019b0f:	0f 84 98 00 00 00    	je     c0019bad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019b15:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b1a:	0f 95 c0             	setne  al
c0019b1d:	80 f9 05             	cmp    cl,0x5
c0019b20:	0f 95 c2             	setne  dl
c0019b23:	08 c2                	or     dl,al
c0019b25:	74 79                	je     c0019ba0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019b27:	84 c9                	test   cl,cl
c0019b29:	75 05                	jne    c0019b30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019b2b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b2e:	eb 3c                	jmp    c0019b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b30:	80 f9 01             	cmp    cl,0x1
c0019b33:	75 05                	jne    c0019b3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019b35:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b38:	eb 32                	jmp    c0019b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b3a:	80 f9 02             	cmp    cl,0x2
c0019b3d:	75 05                	jne    c0019b44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019b3f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b42:	eb 28                	jmp    c0019b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b44:	31 c0                	xor    eax,eax
c0019b46:	80 f9 03             	cmp    cl,0x3
c0019b49:	75 05                	jne    c0019b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019b4b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b4e:	eb 1c                	jmp    c0019b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b50:	80 f9 05             	cmp    cl,0x5
c0019b53:	75 05                	jne    c0019b5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019b55:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b58:	eb 12                	jmp    c0019b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b5a:	80 f9 06             	cmp    cl,0x6
c0019b5d:	75 05                	jne    c0019b64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019b5f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b62:	eb 08                	jmp    c0019b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b64:	80 f9 07             	cmp    cl,0x7
c0019b67:	75 03                	jne    c0019b6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019b69:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b6c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b71:	75 10                	jne    c0019b83 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019b73:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019b77:	b9 03 00 00 00       	mov    ecx,0x3
c0019b7c:	01 d0                	add    eax,edx
c0019b7e:	e9 37 01 00 00       	jmp    c0019cba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b83:	b9 02 00 00 00       	mov    ecx,0x2
c0019b88:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019b8d:	0f 85 27 01 00 00    	jne    c0019cba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b93:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019b96:	b9 06 00 00 00       	mov    ecx,0x6
c0019b9b:	e9 1a 01 00 00       	jmp    c0019cba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019ba0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019ba3:	b9 06 00 00 00       	mov    ecx,0x6
c0019ba8:	e9 0f 01 00 00       	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bad:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019bb0:	88 ca                	mov    dl,cl
c0019bb2:	c0 ea 06             	shr    dl,0x6
c0019bb5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019bb9:	89 ca                	mov    edx,ecx
c0019bbb:	66 c1 ea 03          	shr    dx,0x3
c0019bbf:	83 e2 07             	and    edx,0x7
c0019bc2:	80 e1 07             	and    cl,0x7
c0019bc5:	75 05                	jne    c0019bcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019bc7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019bca:	eb 4c                	jmp    c0019c18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bcc:	80 f9 01             	cmp    cl,0x1
c0019bcf:	75 05                	jne    c0019bd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019bd1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019bd4:	eb 42                	jmp    c0019c18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bd6:	80 f9 02             	cmp    cl,0x2
c0019bd9:	75 05                	jne    c0019be0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019bdb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019bde:	eb 38                	jmp    c0019c18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019be0:	80 f9 03             	cmp    cl,0x3
c0019be3:	75 05                	jne    c0019bea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019be5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019be8:	eb 2e                	jmp    c0019c18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bea:	80 f9 04             	cmp    cl,0x4
c0019bed:	75 12                	jne    c0019c01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019bef:	f6 c4 60             	test   ah,0x60
c0019bf2:	75 08                	jne    c0019bfc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019bf4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019bf7:	8d 78 14             	lea    edi,[eax+0x14]
c0019bfa:	eb 1c                	jmp    c0019c18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019bfc:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019bff:	eb 17                	jmp    c0019c18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c01:	80 f9 05             	cmp    cl,0x5
c0019c04:	75 05                	jne    c0019c0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019c06:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019c09:	eb 0d                	jmp    c0019c18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c0b:	80 f9 06             	cmp    cl,0x6
c0019c0e:	75 05                	jne    c0019c15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019c10:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019c13:	eb 03                	jmp    c0019c18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019c15:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019c18:	84 d2                	test   dl,dl
c0019c1a:	75 05                	jne    c0019c21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019c1c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019c1f:	eb 3c                	jmp    c0019c5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c21:	80 fa 01             	cmp    dl,0x1
c0019c24:	75 05                	jne    c0019c2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019c26:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019c29:	eb 32                	jmp    c0019c5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c2b:	80 fa 02             	cmp    dl,0x2
c0019c2e:	75 05                	jne    c0019c35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019c30:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c33:	eb 28                	jmp    c0019c5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c35:	80 fa 03             	cmp    dl,0x3
c0019c38:	75 05                	jne    c0019c3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019c3a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c3d:	eb 1e                	jmp    c0019c5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c3f:	31 c0                	xor    eax,eax
c0019c41:	80 fa 04             	cmp    dl,0x4
c0019c44:	74 17                	je     c0019c5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c46:	80 fa 05             	cmp    dl,0x5
c0019c49:	75 05                	jne    c0019c50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019c4b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019c4e:	eb 0d                	jmp    c0019c5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c50:	80 fa 06             	cmp    dl,0x6
c0019c53:	75 05                	jne    c0019c5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019c55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019c58:	eb 03                	jmp    c0019c5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019c5a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019c5d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c62:	0f 94 c2             	sete   dl
c0019c65:	80 f9 05             	cmp    cl,0x5
c0019c68:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019c6c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019c71:	d3 e0                	shl    eax,cl
c0019c73:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019c77:	74 0a                	je     c0019c83 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019c79:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019c7c:	b9 07 00 00 00       	mov    ecx,0x7
c0019c81:	eb 37                	jmp    c0019cba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019c83:	01 f8                	add    eax,edi
c0019c85:	b9 03 00 00 00       	mov    ecx,0x3
c0019c8a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019c8f:	74 2b                	je     c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019c91:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019c96:	75 0d                	jne    c0019ca5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019c98:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019c9c:	01 c8                	add    eax,ecx
c0019c9e:	b9 04 00 00 00       	mov    ecx,0x4
c0019ca3:	eb 17                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ca5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ca8:	b9 07 00 00 00       	mov    ecx,0x7
c0019cad:	eb 0d                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019caf:	b9 02 00 00 00       	mov    ecx,0x2
c0019cb4:	b2 01                	mov    dl,0x1
c0019cb6:	31 c0                	xor    eax,eax
c0019cb8:	eb 02                	jmp    c0019cbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019cba:	31 d2                	xor    edx,edx
c0019cbc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019cc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019cc2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019cc6:	88 11                	mov    BYTE PTR [ecx],dl
c0019cc8:	5a                   	pop    edx
c0019cc9:	5b                   	pop    ebx
c0019cca:	5e                   	pop    esi
c0019ccb:	5f                   	pop    edi
c0019ccc:	c3                   	ret    

c0019ccd <Krnl::smpEntry()>:
c0019ccd:	eb fe                	jmp    c0019ccd <Krnl::smpEntry()>

c0019ccf <Krnl::startCPU(int)>:
c0019ccf:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0019cd4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019cdb:	0f 84 36 01 00 00    	je     c0019e17 <Krnl::startCPU(int)+0x148>
c0019ce1:	53                   	push   ebx
c0019ce2:	83 ec 10             	sub    esp,0x10
c0019ce5:	fa                   	cli    
c0019ce6:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c0019cec:	6a 1b                	push   0x1b
c0019cee:	ff 35 68 f2 02 c0    	push   DWORD PTR ds:0xc002f268
c0019cf4:	e8 8b 51 ff ff       	call   c000ee84 <Computer::rdmsr(unsigned int)>
c0019cf9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019cfe:	89 c3                	mov    ebx,eax
c0019d00:	58                   	pop    eax
c0019d01:	5a                   	pop    edx
c0019d02:	53                   	push   ebx
c0019d03:	68 ec c5 02 c0       	push   0xc002c5ec
c0019d08:	e8 d8 8c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0019d0d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d1b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019d25:	c1 e0 18             	shl    eax,0x18
c0019d28:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019d2e:	83 c4 10             	add    esp,0x10
c0019d31:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019d37:	09 c2                	or     edx,eax
c0019d39:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019d3f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019d45:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d4b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d51:	80 cd c5             	or     ch,0xc5
c0019d54:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d5a:	f3 90                	pause  
c0019d5c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d5e:	0f ba e1 0c          	bt     ecx,0xc
c0019d62:	72 f6                	jb     c0019d5a <Krnl::startCPU(int)+0x8b>
c0019d64:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019d6a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019d70:	09 c1                	or     ecx,eax
c0019d72:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019d78:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019d7e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019d84:	80 cd 85             	or     ch,0x85
c0019d87:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019d8d:	f3 90                	pause  
c0019d8f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019d91:	0f ba e1 0c          	bt     ecx,0xc
c0019d95:	72 f6                	jb     c0019d8d <Krnl::startCPU(int)+0xbe>
c0019d97:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019da1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019da7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019dad:	09 c1                	or     ecx,eax
c0019daf:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019db5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019dbb:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019dc1:	81 c9 02 06 00 00    	or     ecx,0x602
c0019dc7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019dcd:	f3 90                	pause  
c0019dcf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019dd1:	0f ba e1 0c          	bt     ecx,0xc
c0019dd5:	72 f6                	jb     c0019dcd <Krnl::startCPU(int)+0xfe>
c0019dd7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019de1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019de7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ded:	09 c8                	or     eax,ecx
c0019def:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019df5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019dfb:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019e00:	0d 02 06 00 00       	or     eax,0x602
c0019e05:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019e0b:	f3 90                	pause  
c0019e0d:	8b 02                	mov    eax,DWORD PTR [edx]
c0019e0f:	0f ba e0 0c          	bt     eax,0xc
c0019e13:	72 f6                	jb     c0019e0b <Krnl::startCPU(int)+0x13c>
c0019e15:	eb fe                	jmp    c0019e15 <Krnl::startCPU(int)+0x146>
c0019e17:	c3                   	ret    

c0019e18 <Krnl::startCPUs()>:
c0019e18:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0019e1d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019e23:	88 c2                	mov    dl,al
c0019e25:	83 e2 0a             	and    edx,0xa
c0019e28:	80 fa 0a             	cmp    dl,0xa
c0019e2b:	75 09                	jne    c0019e36 <Krnl::startCPUs()+0x1e>
c0019e2d:	a8 01                	test   al,0x1
c0019e2f:	74 05                	je     c0019e36 <Krnl::startCPUs()+0x1e>
c0019e31:	e9 65 63 fe ff       	jmp    c000019b <prepareTramp>
c0019e36:	c3                   	ret    
c0019e37:	90                   	nop

c0019e38 <EnvVarContainer::getEnv(char const*)>:
c0019e38:	57                   	push   edi
c0019e39:	56                   	push   esi
c0019e3a:	53                   	push   ebx
c0019e3b:	31 db                	xor    ebx,ebx
c0019e3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e41:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019e43:	7e 2b                	jle    c0019e70 <EnvVarContainer::getEnv(char const*)+0x38>
c0019e45:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019e4c:	50                   	push   eax
c0019e4d:	50                   	push   eax
c0019e4e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e51:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019e54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019e58:	e8 3b 6a fe ff       	call   c0000898 <strcmp>
c0019e5d:	83 c4 10             	add    esp,0x10
c0019e60:	85 c0                	test   eax,eax
c0019e62:	75 09                	jne    c0019e6d <EnvVarContainer::getEnv(char const*)+0x35>
c0019e64:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019e67:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019e6b:	eb 05                	jmp    c0019e72 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019e6d:	43                   	inc    ebx
c0019e6e:	eb d1                	jmp    c0019e41 <EnvVarContainer::getEnv(char const*)+0x9>
c0019e70:	31 c0                	xor    eax,eax
c0019e72:	5b                   	pop    ebx
c0019e73:	5e                   	pop    esi
c0019e74:	5f                   	pop    edi
c0019e75:	c3                   	ret    

c0019e76 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019e76:	55                   	push   ebp
c0019e77:	57                   	push   edi
c0019e78:	56                   	push   esi
c0019e79:	53                   	push   ebx
c0019e7a:	83 ec 28             	sub    esp,0x28
c0019e7d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019e81:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019e85:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019e89:	56                   	push   esi
c0019e8a:	e8 dd 68 fe ff       	call   c000076c <strlen>
c0019e8f:	40                   	inc    eax
c0019e90:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e93:	e8 6a 5a ff ff       	call   c000f902 <malloc>
c0019e98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019e9f:	e8 c8 68 fe ff       	call   c000076c <strlen>
c0019ea4:	40                   	inc    eax
c0019ea5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ea8:	e8 55 5a ff ff       	call   c000f902 <malloc>
c0019ead:	89 34 24             	mov    DWORD PTR [esp],esi
c0019eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019eb4:	e8 b3 68 fe ff       	call   c000076c <strlen>
c0019eb9:	83 c4 0c             	add    esp,0xc
c0019ebc:	40                   	inc    eax
c0019ebd:	50                   	push   eax
c0019ebe:	6a 00                	push   0x0
c0019ec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ec4:	e8 87 68 fe ff       	call   c0000750 <memset>
c0019ec9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ecc:	e8 9b 68 fe ff       	call   c000076c <strlen>
c0019ed1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019ed5:	8d 48 01             	lea    ecx,[eax+0x1]
c0019ed8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019eda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019edd:	89 de                	mov    esi,ebx
c0019edf:	e8 88 68 fe ff       	call   c000076c <strlen>
c0019ee4:	83 c4 0c             	add    esp,0xc
c0019ee7:	40                   	inc    eax
c0019ee8:	50                   	push   eax
c0019ee9:	6a 00                	push   0x0
c0019eeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019eef:	e8 5c 68 fe ff       	call   c0000750 <memset>
c0019ef4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ef7:	e8 70 68 fe ff       	call   c000076c <strlen>
c0019efc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f00:	8d 48 01             	lea    ecx,[eax+0x1]
c0019f03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f08:	40                   	inc    eax
c0019f09:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019f0c:	c1 e0 03             	shl    eax,0x3
c0019f0f:	5a                   	pop    edx
c0019f10:	59                   	pop    ecx
c0019f11:	50                   	push   eax
c0019f12:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f15:	e8 d4 59 ff ff       	call   c000f8ee <realloc>
c0019f1a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019f1e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f21:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019f24:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019f28:	b9 08 00 00 00       	mov    ecx,0x8
c0019f2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f2f:	83 c4 2c             	add    esp,0x2c
c0019f32:	5b                   	pop    ebx
c0019f33:	5e                   	pop    esi
c0019f34:	5f                   	pop    edi
c0019f35:	5d                   	pop    ebp
c0019f36:	c3                   	ret    
c0019f37:	90                   	nop

c0019f38 <EnvVarContainer::deleteEnv(char const*)>:
c0019f38:	c3                   	ret    
c0019f39:	90                   	nop

c0019f3a <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019f3a:	55                   	push   ebp
c0019f3b:	57                   	push   edi
c0019f3c:	56                   	push   esi
c0019f3d:	53                   	push   ebx
c0019f3e:	81 ec 38 01 00 00    	sub    esp,0x138
c0019f44:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c0019f4b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019f52:	68 14 01 00 00       	push   0x114
c0019f57:	e8 a6 59 ff ff       	call   c000f902 <malloc>
c0019f5c:	83 c4 0c             	add    esp,0xc
c0019f5f:	89 c5                	mov    ebp,eax
c0019f61:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0019f64:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019f6b:	50                   	push   eax
c0019f6c:	e8 d3 8f ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c0019f71:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019f74:	e8 9d 92 ff ff       	call   c0013216 <File::exists()>
c0019f79:	83 c4 10             	add    esp,0x10
c0019f7c:	84 c0                	test   al,al
c0019f7e:	75 32                	jne    c0019fb2 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c0019f80:	51                   	push   ecx
c0019f81:	51                   	push   ecx
c0019f82:	6a 12                	push   0x12
c0019f84:	55                   	push   ebp
c0019f85:	e8 1e 90 ff ff       	call   c0012fa8 <File::open(FileOpenMode)>
c0019f8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019f8d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019f90:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f93:	e8 d4 67 fe ff       	call   c000076c <strlen>
c0019f98:	5a                   	pop    edx
c0019f99:	31 d2                	xor    edx,edx
c0019f9b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019f9f:	51                   	push   ecx
c0019fa0:	56                   	push   esi
c0019fa1:	52                   	push   edx
c0019fa2:	50                   	push   eax
c0019fa3:	55                   	push   ebp
c0019fa4:	ff d7                	call   edi
c0019fa6:	83 c4 14             	add    esp,0x14
c0019fa9:	55                   	push   ebp
c0019faa:	e8 57 90 ff ff       	call   c0013006 <File::close()>
c0019faf:	83 c4 10             	add    esp,0x10
c0019fb2:	31 f6                	xor    esi,esi
c0019fb4:	50                   	push   eax
c0019fb5:	68 00 01 00 00       	push   0x100
c0019fba:	6a 00                	push   0x0
c0019fbc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019fc0:	50                   	push   eax
c0019fc1:	e8 8a 67 fe ff       	call   c0000750 <memset>
c0019fc6:	58                   	pop    eax
c0019fc7:	5a                   	pop    edx
c0019fc8:	6a 01                	push   0x1
c0019fca:	55                   	push   ebp
c0019fcb:	e8 d8 8f ff ff       	call   c0012fa8 <File::open(FileOpenMode)>
c0019fd0:	83 c4 10             	add    esp,0x10
c0019fd3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019fdb:	83 ec 0c             	sub    esp,0xc
c0019fde:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fe1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019fe5:	51                   	push   ecx
c0019fe6:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019fea:	52                   	push   edx
c0019feb:	6a 00                	push   0x0
c0019fed:	6a 01                	push   0x1
c0019fef:	55                   	push   ebp
c0019ff0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ff3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019ff7:	83 c4 20             	add    esp,0x20
c0019ffa:	3c 0d                	cmp    al,0xd
c0019ffc:	0f 84 16 01 00 00    	je     c001a118 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a002:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a007:	0f 84 fc 00 00 00    	je     c001a109 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a00d:	3c 0a                	cmp    al,0xa
c001a00f:	74 13                	je     c001a024 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a011:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a016:	74 0c                	je     c001a024 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a018:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a01e:	0f 8e e5 00 00 00    	jle    c001a109 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a028:	83 ec 0c             	sub    esp,0xc
c001a02b:	8d 78 01             	lea    edi,[eax+0x1]
c001a02e:	57                   	push   edi
c001a02f:	e8 ce 58 ff ff       	call   c000f902 <malloc>
c001a034:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a038:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a03c:	8d 56 04             	lea    edx,[esi+0x4]
c001a03f:	89 14 24             	mov    DWORD PTR [esp],edx
c001a042:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a046:	e8 b7 58 ff ff       	call   c000f902 <malloc>
c001a04b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a04f:	83 c4 0c             	add    esp,0xc
c001a052:	57                   	push   edi
c001a053:	6a 00                	push   0x0
c001a055:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a059:	e8 f2 66 fe ff       	call   c0000750 <memset>
c001a05e:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a062:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a066:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a06a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a06c:	83 c4 0c             	add    esp,0xc
c001a06f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a073:	52                   	push   edx
c001a074:	6a 00                	push   0x0
c001a076:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a07a:	e8 d1 66 fe ff       	call   c0000750 <memset>
c001a07f:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a083:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a087:	89 34 24             	mov    DWORD PTR [esp],esi
c001a08a:	e8 dd 66 fe ff       	call   c000076c <strlen>
c001a08f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a093:	89 c1                	mov    ecx,eax
c001a095:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a097:	5e                   	pop    esi
c001a098:	5f                   	pop    edi
c001a099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a09d:	68 fd c5 02 c0       	push   0xc002c5fd
c001a0a2:	e8 3e 89 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001a0a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a0a9:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a0ac:	40                   	inc    eax
c001a0ad:	83 c4 10             	add    esp,0x10
c001a0b0:	89 03                	mov    DWORD PTR [ebx],eax
c001a0b2:	85 d2                	test   edx,edx
c001a0b4:	75 0c                	jne    c001a0c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a0b6:	83 ec 0c             	sub    esp,0xc
c001a0b9:	6a 08                	push   0x8
c001a0bb:	e8 42 58 ff ff       	call   c000f902 <malloc>
c001a0c0:	eb 0c                	jmp    c001a0ce <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a0c2:	c1 e0 03             	shl    eax,0x3
c001a0c5:	51                   	push   ecx
c001a0c6:	51                   	push   ecx
c001a0c7:	50                   	push   eax
c001a0c8:	52                   	push   edx
c001a0c9:	e8 20 58 ff ff       	call   c000f8ee <realloc>
c001a0ce:	83 c4 10             	add    esp,0x10
c001a0d1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a0d4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a0d6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a0d9:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a0dd:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a0e1:	b9 08 00 00 00       	mov    ecx,0x8
c001a0e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a0e8:	31 f6                	xor    esi,esi
c001a0ea:	52                   	push   edx
c001a0eb:	68 00 01 00 00       	push   0x100
c001a0f0:	6a 00                	push   0x0
c001a0f2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a0f6:	50                   	push   eax
c001a0f7:	e8 54 66 fe ff       	call   c0000750 <memset>
c001a0fc:	83 c4 10             	add    esp,0x10
c001a0ff:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a107:	eb 0f                	jmp    c001a118 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a109:	3c 3d                	cmp    al,0x3d
c001a10b:	74 07                	je     c001a114 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a10d:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a111:	46                   	inc    esi
c001a112:	eb 04                	jmp    c001a118 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a114:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a118:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a11d:	0f 85 b8 fe ff ff    	jne    c0019fdb <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a123:	50                   	push   eax
c001a124:	50                   	push   eax
c001a125:	ff 33                	push   DWORD PTR [ebx]
c001a127:	68 0b c6 02 c0       	push   0xc002c60b
c001a12c:	e8 b4 88 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001a131:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a137:	5b                   	pop    ebx
c001a138:	5e                   	pop    esi
c001a139:	5f                   	pop    edi
c001a13a:	5d                   	pop    ebp
c001a13b:	c3                   	ret    

c001a13c <EnvVarContainer::__loadSystem()>:
c001a13c:	83 ec 10             	sub    esp,0x10
c001a13f:	68 a0 e7 02 c0       	push   0xc002e7a0
c001a144:	68 36 c6 02 c0       	push   0xc002c636
c001a149:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a14d:	e8 e8 fd ff ff       	call   c0019f3a <EnvVarContainer::loadFrom(char const*, char const*)>
c001a152:	83 c4 1c             	add    esp,0x1c
c001a155:	c3                   	ret    

c001a156 <EnvVarContainer::__loadUser()>:
c001a156:	c3                   	ret    
c001a157:	90                   	nop

c001a158 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a15c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a166:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a16a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a16d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a171:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a178:	90                   	nop
c001a179:	c3                   	ret    

c001a17a <EnvVarContainer::~EnvVarContainer()>:
c001a17a:	83 ec 0c             	sub    esp,0xc
c001a17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a181:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a184:	85 c0                	test   eax,eax
c001a186:	74 1d                	je     c001a1a5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a18c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a18e:	85 c0                	test   eax,eax
c001a190:	74 13                	je     c001a1a5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a196:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a199:	83 ec 0c             	sub    esp,0xc
c001a19c:	50                   	push   eax
c001a19d:	e8 70 57 ff ff       	call   c000f912 <free>
c001a1a2:	83 c4 10             	add    esp,0x10
c001a1a5:	90                   	nop
c001a1a6:	83 c4 0c             	add    esp,0xc
c001a1a9:	c3                   	ret    

c001a1aa <Krnl::getEnv(Process*, char const*)>:
c001a1aa:	53                   	push   ebx
c001a1ab:	83 ec 08             	sub    esp,0x8
c001a1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a1b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a1b6:	39 05 b0 27 03 c0    	cmp    DWORD PTR ds:0xc00327b0,eax
c001a1bc:	74 04                	je     c001a1c2 <Krnl::getEnv(Process*, char const*)+0x18>
c001a1be:	85 c0                	test   eax,eax
c001a1c0:	75 0b                	jne    c001a1cd <Krnl::getEnv(Process*, char const*)+0x23>
c001a1c2:	a1 94 1d 03 c0       	mov    eax,ds:0xc0031d94
c001a1c7:	85 c0                	test   eax,eax
c001a1c9:	75 19                	jne    c001a1e4 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a1cb:	eb 27                	jmp    c001a1f4 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a1cd:	52                   	push   edx
c001a1ce:	52                   	push   edx
c001a1cf:	53                   	push   ebx
c001a1d0:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a1d6:	e8 5d fc ff ff       	call   c0019e38 <EnvVarContainer::getEnv(char const*)>
c001a1db:	83 c4 10             	add    esp,0x10
c001a1de:	85 c0                	test   eax,eax
c001a1e0:	75 28                	jne    c001a20a <Krnl::getEnv(Process*, char const*)+0x60>
c001a1e2:	eb de                	jmp    c001a1c2 <Krnl::getEnv(Process*, char const*)+0x18>
c001a1e4:	52                   	push   edx
c001a1e5:	52                   	push   edx
c001a1e6:	53                   	push   ebx
c001a1e7:	50                   	push   eax
c001a1e8:	e8 4b fc ff ff       	call   c0019e38 <EnvVarContainer::getEnv(char const*)>
c001a1ed:	83 c4 10             	add    esp,0x10
c001a1f0:	85 c0                	test   eax,eax
c001a1f2:	75 16                	jne    c001a20a <Krnl::getEnv(Process*, char const*)+0x60>
c001a1f4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a1f8:	a1 98 1d 03 c0       	mov    eax,ds:0xc0031d98
c001a1fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a201:	83 c4 08             	add    esp,0x8
c001a204:	5b                   	pop    ebx
c001a205:	e9 2e fc ff ff       	jmp    c0019e38 <EnvVarContainer::getEnv(char const*)>
c001a20a:	83 c4 08             	add    esp,0x8
c001a20d:	5b                   	pop    ebx
c001a20e:	c3                   	ret    

c001a20f <Krnl::setEnvSystem(char const*, char const*)>:
c001a20f:	83 ec 10             	sub    esp,0x10
c001a212:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a21a:	ff 35 98 1d 03 c0    	push   DWORD PTR ds:0xc0031d98
c001a220:	e8 51 fc ff ff       	call   c0019e76 <EnvVarContainer::setEnv(char const*, char const*)>
c001a225:	83 c4 1c             	add    esp,0x1c
c001a228:	c3                   	ret    

c001a229 <Krnl::setEnvUser(char const*, char const*)>:
c001a229:	a1 94 1d 03 c0       	mov    eax,ds:0xc0031d94
c001a22e:	85 c0                	test   eax,eax
c001a230:	74 15                	je     c001a247 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a232:	83 ec 10             	sub    esp,0x10
c001a235:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a239:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a23d:	50                   	push   eax
c001a23e:	e8 33 fc ff ff       	call   c0019e76 <EnvVarContainer::setEnv(char const*, char const*)>
c001a243:	83 c4 1c             	add    esp,0x1c
c001a246:	c3                   	ret    
c001a247:	c3                   	ret    

c001a248 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a24c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a252:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a256:	e9 1b fc ff ff       	jmp    c0019e76 <EnvVarContainer::setEnv(char const*, char const*)>

c001a25b <Krnl::deleteEnvSystem(char const*)>:
c001a25b:	c3                   	ret    

c001a25c <Krnl::deleteEnvUser(char const*)>:
c001a25c:	c3                   	ret    

c001a25d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a25d:	c3                   	ret    

c001a25e <Krnl::newProcessEnv(Process*)>:
c001a25e:	83 ec 28             	sub    esp,0x28
c001a261:	6a 0c                	push   0xc
c001a263:	e8 9a 56 ff ff       	call   c000f902 <malloc>
c001a268:	5a                   	pop    edx
c001a269:	59                   	pop    ecx
c001a26a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a26e:	50                   	push   eax
c001a26f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a273:	e8 e0 fe ff ff       	call   c001a158 <EnvVarContainer::EnvVarContainer(Process*)>
c001a278:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a27c:	83 c4 2c             	add    esp,0x2c
c001a27f:	c3                   	ret    

c001a280 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a280:	57                   	push   edi
c001a281:	56                   	push   esi
c001a282:	53                   	push   ebx
c001a283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a287:	83 ec 0c             	sub    esp,0xc
c001a28a:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a290:	6a 0c                	push   0xc
c001a292:	e8 6b 56 ff ff       	call   c000f902 <malloc>
c001a297:	89 c3                	mov    ebx,eax
c001a299:	58                   	pop    eax
c001a29a:	5a                   	pop    edx
c001a29b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a29f:	53                   	push   ebx
c001a2a0:	e8 b3 fe ff ff       	call   c001a158 <EnvVarContainer::EnvVarContainer(Process*)>
c001a2a5:	8b 07                	mov    eax,DWORD PTR [edi]
c001a2a7:	89 03                	mov    DWORD PTR [ebx],eax
c001a2a9:	c1 e0 03             	shl    eax,0x3
c001a2ac:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2af:	e8 4e 56 ff ff       	call   c000f902 <malloc>
c001a2b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a2b7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a2b9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a2bc:	c1 e1 03             	shl    ecx,0x3
c001a2bf:	89 c7                	mov    edi,eax
c001a2c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2c3:	83 c4 10             	add    esp,0x10
c001a2c6:	89 d8                	mov    eax,ebx
c001a2c8:	5b                   	pop    ebx
c001a2c9:	5e                   	pop    esi
c001a2ca:	5f                   	pop    edi
c001a2cb:	c3                   	ret    

c001a2cc <Krnl::loadSystemEnv()>:
c001a2cc:	53                   	push   ebx
c001a2cd:	83 ec 14             	sub    esp,0x14
c001a2d0:	6a 0c                	push   0xc
c001a2d2:	e8 2b 56 ff ff       	call   c000f902 <malloc>
c001a2d7:	89 c3                	mov    ebx,eax
c001a2d9:	58                   	pop    eax
c001a2da:	5a                   	pop    edx
c001a2db:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c001a2e1:	53                   	push   ebx
c001a2e2:	e8 71 fe ff ff       	call   c001a158 <EnvVarContainer::EnvVarContainer(Process*)>
c001a2e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a2ea:	89 1d 98 1d 03 c0    	mov    DWORD PTR ds:0xc0031d98,ebx
c001a2f0:	e8 47 fe ff ff       	call   c001a13c <EnvVarContainer::__loadSystem()>
c001a2f5:	83 c4 18             	add    esp,0x18
c001a2f8:	5b                   	pop    ebx
c001a2f9:	c3                   	ret    

c001a2fa <Krnl::loadUserEnv()>:
c001a2fa:	53                   	push   ebx
c001a2fb:	83 ec 14             	sub    esp,0x14
c001a2fe:	6a 0c                	push   0xc
c001a300:	e8 fd 55 ff ff       	call   c000f902 <malloc>
c001a305:	89 c3                	mov    ebx,eax
c001a307:	58                   	pop    eax
c001a308:	5a                   	pop    edx
c001a309:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c001a30f:	53                   	push   ebx
c001a310:	e8 43 fe ff ff       	call   c001a158 <EnvVarContainer::EnvVarContainer(Process*)>
c001a315:	89 1d 94 1d 03 c0    	mov    DWORD PTR ds:0xc0031d94,ebx
c001a31b:	83 c4 18             	add    esp,0x18
c001a31e:	5b                   	pop    ebx
c001a31f:	c3                   	ret    

c001a320 <Krnl::flushEnv()>:
c001a320:	c3                   	ret    

c001a321 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a321:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a325:	8b 15 94 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d94
c001a32b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a331:	a1 98 1d 03 c0       	mov    eax,ds:0xc0031d98
c001a336:	8b 00                	mov    eax,DWORD PTR [eax]
c001a338:	03 01                	add    eax,DWORD PTR [ecx]
c001a33a:	85 d2                	test   edx,edx
c001a33c:	74 02                	je     c001a340 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a33e:	03 02                	add    eax,DWORD PTR [edx]
c001a340:	c3                   	ret    

c001a341 <Krnl::getProcessEnvPair(Process*, int)>:
c001a341:	57                   	push   edi
c001a342:	8b 0d 94 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031d94
c001a348:	56                   	push   esi
c001a349:	85 c9                	test   ecx,ecx
c001a34b:	53                   	push   ebx
c001a34c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a350:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a354:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a35a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a35e:	8b 02                	mov    eax,DWORD PTR [edx]
c001a360:	75 47                	jne    c001a3a9 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a362:	39 c3                	cmp    ebx,eax
c001a364:	7c 47                	jl     c001a3ad <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a366:	8b 15 98 1d 03 c0    	mov    edx,DWORD PTR ds:0xc0031d98
c001a36c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a36e:	01 c1                	add    ecx,eax
c001a370:	39 d9                	cmp    ecx,ebx
c001a372:	7e 6c                	jle    c001a3e0 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a374:	51                   	push   ecx
c001a375:	89 d9                	mov    ecx,ebx
c001a377:	29 c1                	sub    ecx,eax
c001a379:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a37c:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a380:	53                   	push   ebx
c001a381:	68 58 c6 02 c0       	push   0xc002c658
c001a386:	e8 5a 86 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001a38b:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a391:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a393:	a1 98 1d 03 c0       	mov    eax,ds:0xc0031d98
c001a398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a39b:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a39f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a3a2:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a3a5:	89 06                	mov    DWORD PTR [esi],eax
c001a3a7:	eb 51                	jmp    c001a3fa <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a3a9:	39 c3                	cmp    ebx,eax
c001a3ab:	7d 05                	jge    c001a3b2 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a3ad:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a3b0:	eb 20                	jmp    c001a3d2 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a3b2:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a3b4:	8d 14 07             	lea    edx,[edi+eax*1]
c001a3b7:	39 da                	cmp    edx,ebx
c001a3b9:	7e 04                	jle    c001a3bf <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a3bb:	29 c3                	sub    ebx,eax
c001a3bd:	eb 10                	jmp    c001a3cf <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a3bf:	8b 0d 98 1d 03 c0    	mov    ecx,DWORD PTR ds:0xc0031d98
c001a3c5:	03 11                	add    edx,DWORD PTR [ecx]
c001a3c7:	39 da                	cmp    edx,ebx
c001a3c9:	7e 15                	jle    c001a3e0 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a3cb:	29 c3                	sub    ebx,eax
c001a3cd:	29 fb                	sub    ebx,edi
c001a3cf:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a3d2:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a3d6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a3d9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a3dc:	89 06                	mov    DWORD PTR [esi],eax
c001a3de:	eb 1d                	jmp    c001a3fd <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a3e0:	83 ec 0c             	sub    esp,0xc
c001a3e3:	68 6c c6 02 c0       	push   0xc002c66c
c001a3e8:	e8 18 00 00 00       	call   c001a405 <Krnl::panic(char const*)>
c001a3ed:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a3f3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a3fa:	83 c4 10             	add    esp,0x10
c001a3fd:	89 f0                	mov    eax,esi
c001a3ff:	5b                   	pop    ebx
c001a400:	5e                   	pop    esi
c001a401:	5f                   	pop    edi
c001a402:	c2 04 00             	ret    0x4

c001a405 <Krnl::panic(char const*)>:
c001a405:	55                   	push   ebp
c001a406:	89 e5                	mov    ebp,esp
c001a408:	53                   	push   ebx
c001a409:	83 ec 0c             	sub    esp,0xc
c001a40c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a40f:	fa                   	cli    
c001a410:	c6 05 a4 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031da4,0x1
c001a417:	53                   	push   ebx
c001a418:	c6 05 a0 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e1a0,0x0
c001a41f:	68 86 c6 02 c0       	push   0xc002c686
c001a424:	e8 bc 85 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001a429:	58                   	pop    eax
c001a42a:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a42f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a435:	e8 ce 63 ff ff       	call   c0010808 <setActiveTerminal(VgaText*)>
c001a43a:	83 c4 0c             	add    esp,0xc
c001a43d:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a442:	6a 01                	push   0x1
c001a444:	6a 0f                	push   0xf
c001a446:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a44c:	e8 63 60 ff ff       	call   c00104b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a451:	58                   	pop    eax
c001a452:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a457:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a45d:	e8 ec 65 ff ff       	call   c0010a4e <VgaText::clearScreen()>
c001a462:	58                   	pop    eax
c001a463:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a468:	5a                   	pop    edx
c001a469:	68 9f c6 02 c0       	push   0xc002c69f
c001a46e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a474:	e8 61 67 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a479:	59                   	pop    ecx
c001a47a:	58                   	pop    eax
c001a47b:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a480:	68 44 c7 02 c0       	push   0xc002c744
c001a485:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a48b:	e8 4a 67 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a490:	58                   	pop    eax
c001a491:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a496:	5a                   	pop    edx
c001a497:	68 bb c6 02 c0       	push   0xc002c6bb
c001a49c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4a2:	e8 33 67 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a4a7:	59                   	pop    ecx
c001a4a8:	58                   	pop    eax
c001a4a9:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a4ae:	53                   	push   ebx
c001a4af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4b5:	e8 20 67 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a4ba:	58                   	pop    eax
c001a4bb:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a4c0:	5a                   	pop    edx
c001a4c1:	68 db c6 02 c0       	push   0xc002c6db
c001a4c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4cc:	e8 09 67 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a4d1:	a1 a0 1d 03 c0       	mov    eax,ds:0xc0031da0
c001a4d6:	83 c4 10             	add    esp,0x10
c001a4d9:	85 c0                	test   eax,eax
c001a4db:	74 02                	je     c001a4df <Krnl::panic(char const*)+0xda>
c001a4dd:	ff d0                	call   eax
c001a4df:	83 ec 0c             	sub    esp,0xc
c001a4e2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4e5:	e8 9e 32 00 00       	call   c001d788 <Thr::getDriverNameFromAddress(unsigned long)>
c001a4ea:	83 c4 10             	add    esp,0x10
c001a4ed:	89 c3                	mov    ebx,eax
c001a4ef:	85 c0                	test   eax,eax
c001a4f1:	0f 84 50 02 00 00    	je     c001a747 <Krnl::panic(char const*)+0x342>
c001a4f7:	83 ec 08             	sub    esp,0x8
c001a4fa:	8b 15 b0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327b0
c001a500:	68 80 c7 02 c0       	push   0xc002c780
c001a505:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a50b:	e8 ca 66 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a510:	58                   	pop    eax
c001a511:	5a                   	pop    edx
c001a512:	8b 15 b0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327b0
c001a518:	68 bb c6 02 c0       	push   0xc002c6bb
c001a51d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a523:	e8 b2 66 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a528:	59                   	pop    ecx
c001a529:	58                   	pop    eax
c001a52a:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a52f:	53                   	push   ebx
c001a530:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a536:	e8 9f 66 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a53b:	83 c4 10             	add    esp,0x10
c001a53e:	83 ec 08             	sub    esp,0x8
c001a541:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a546:	68 da c6 02 c0       	push   0xc002c6da
c001a54b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a551:	e8 84 66 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a556:	58                   	pop    eax
c001a557:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a55c:	5a                   	pop    edx
c001a55d:	68 d8 c7 02 c0       	push   0xc002c7d8
c001a562:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a568:	e8 6d 66 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a56d:	59                   	pop    ecx
c001a56e:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a573:	5b                   	pop    ebx
c001a574:	68 18 c8 02 c0       	push   0xc002c818
c001a579:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a57f:	e8 56 66 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a584:	58                   	pop    eax
c001a585:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a58a:	5a                   	pop    edx
c001a58b:	68 c6 c6 02 c0       	push   0xc002c6c6
c001a590:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a596:	e8 3f 66 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a59b:	59                   	pop    ecx
c001a59c:	5b                   	pop    ebx
c001a59d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5a0:	68 de c6 02 c0       	push   0xc002c6de
c001a5a5:	e8 3b 84 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001a5aa:	58                   	pop    eax
c001a5ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a5ae:	5a                   	pop    edx
c001a5af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a5b2:	68 e7 c6 02 c0       	push   0xc002c6e7
c001a5b7:	e8 29 84 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001a5bc:	59                   	pop    ecx
c001a5bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a5c0:	5b                   	pop    ebx
c001a5c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a5c6:	68 f0 c6 02 c0       	push   0xc002c6f0
c001a5cb:	e8 15 84 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001a5d0:	58                   	pop    eax
c001a5d1:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a5d6:	5a                   	pop    edx
c001a5d7:	68 5c c8 02 c0       	push   0xc002c85c
c001a5dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5e2:	e8 f3 65 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a5e7:	59                   	pop    ecx
c001a5e8:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a5ed:	5b                   	pop    ebx
c001a5ee:	68 f9 c6 02 c0       	push   0xc002c6f9
c001a5f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5f9:	e8 dc 65 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a5fe:	0f 20 c0             	mov    eax,cr0
c001a601:	5a                   	pop    edx
c001a602:	59                   	pop    ecx
c001a603:	50                   	push   eax
c001a604:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a609:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a60f:	e8 80 65 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c001a614:	5b                   	pop    ebx
c001a615:	58                   	pop    eax
c001a616:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a61b:	68 03 c7 02 c0       	push   0xc002c703
c001a620:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a626:	e8 af 65 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a62b:	0f 20 d0             	mov    eax,cr2
c001a62e:	5a                   	pop    edx
c001a62f:	59                   	pop    ecx
c001a630:	50                   	push   eax
c001a631:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a636:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a63c:	e8 53 65 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c001a641:	5b                   	pop    ebx
c001a642:	58                   	pop    eax
c001a643:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a648:	68 0d c7 02 c0       	push   0xc002c70d
c001a64d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a653:	e8 82 65 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a658:	0f 20 d8             	mov    eax,cr3
c001a65b:	5a                   	pop    edx
c001a65c:	59                   	pop    ecx
c001a65d:	50                   	push   eax
c001a65e:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a663:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a669:	e8 26 65 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c001a66e:	5b                   	pop    ebx
c001a66f:	58                   	pop    eax
c001a670:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a675:	68 20 c7 02 c0       	push   0xc002c720
c001a67a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a680:	e8 55 65 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a685:	0f 20 e0             	mov    eax,cr4
c001a688:	5a                   	pop    edx
c001a689:	59                   	pop    ecx
c001a68a:	50                   	push   eax
c001a68b:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a690:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a696:	e8 f9 64 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c001a69b:	5b                   	pop    ebx
c001a69c:	58                   	pop    eax
c001a69d:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a6a2:	68 2a c7 02 c0       	push   0xc002c72a
c001a6a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6ad:	e8 28 65 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a6b2:	5a                   	pop    edx
c001a6b3:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a6b8:	59                   	pop    ecx
c001a6b9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a6bf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a6c2:	50                   	push   eax
c001a6c3:	e8 cc 64 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c001a6c8:	5b                   	pop    ebx
c001a6c9:	58                   	pop    eax
c001a6ca:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a6cf:	68 f7 d5 02 c0       	push   0xc002d5f7
c001a6d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6da:	e8 fb 64 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a6df:	5a                   	pop    edx
c001a6e0:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a6e5:	59                   	pop    ecx
c001a6e6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a6ec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a6ef:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a6f2:	50                   	push   eax
c001a6f3:	e8 9c 64 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c001a6f8:	5b                   	pop    ebx
c001a6f9:	58                   	pop    eax
c001a6fa:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a6ff:	68 f7 d5 02 c0       	push   0xc002d5f7
c001a704:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70a:	e8 cb 64 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a70f:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a714:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a717:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a71d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a71f:	59                   	pop    ecx
c001a720:	5b                   	pop    ebx
c001a721:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a724:	50                   	push   eax
c001a725:	e8 6a 64 ff ff       	call   c0010b94 <VgaText::putx(unsigned int)>
c001a72a:	83 c4 10             	add    esp,0x10
c001a72d:	b2 fe                	mov    dl,0xfe
c001a72f:	e4 60                	in     al,0x60
c001a731:	3c 1c                	cmp    al,0x1c
c001a733:	74 04                	je     c001a739 <Krnl::panic(char const*)+0x334>
c001a735:	3c 5a                	cmp    al,0x5a
c001a737:	75 f6                	jne    c001a72f <Krnl::panic(char const*)+0x32a>
c001a739:	e4 64                	in     al,0x64
c001a73b:	a8 02                	test   al,0x2
c001a73d:	75 fa                	jne    c001a739 <Krnl::panic(char const*)+0x334>
c001a73f:	88 d0                	mov    al,dl
c001a741:	e6 64                	out    0x64,al
c001a743:	fa                   	cli    
c001a744:	f4                   	hlt    
c001a745:	eb e8                	jmp    c001a72f <Krnl::panic(char const*)+0x32a>
c001a747:	50                   	push   eax
c001a748:	50                   	push   eax
c001a749:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a74e:	68 ac c7 02 c0       	push   0xc002c7ac
c001a753:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a759:	e8 7c 64 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a75e:	58                   	pop    eax
c001a75f:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a764:	5a                   	pop    edx
c001a765:	68 bb c6 02 c0       	push   0xc002c6bb
c001a76a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a770:	e8 65 64 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a775:	59                   	pop    ecx
c001a776:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a77b:	5b                   	pop    ebx
c001a77c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a77f:	83 c0 0c             	add    eax,0xc
c001a782:	50                   	push   eax
c001a783:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001a788:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a78e:	e8 47 64 ff ff       	call   c0010bda <VgaText::puts(char const*)>
c001a793:	83 c4 10             	add    esp,0x10
c001a796:	e9 a3 fd ff ff       	jmp    c001a53e <Krnl::panic(char const*)+0x139>

c001a79b <Net::switchEndian16(unsigned short)>:
c001a79b:	83 ec 04             	sub    esp,0x4
c001a79e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7a2:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a7a6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a7aa:	c1 f8 08             	sar    eax,0x8
c001a7ad:	89 c2                	mov    edx,eax
c001a7af:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a7b3:	c1 e0 08             	shl    eax,0x8
c001a7b6:	09 d0                	or     eax,edx
c001a7b8:	83 c4 04             	add    esp,0x4
c001a7bb:	c3                   	ret    

c001a7bc <Net::switchEndian32(unsigned int)>:
c001a7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7c0:	c1 e8 18             	shr    eax,0x18
c001a7c3:	89 c2                	mov    edx,eax
c001a7c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7c9:	c1 e0 08             	shl    eax,0x8
c001a7cc:	25 00 00 ff 00       	and    eax,0xff0000
c001a7d1:	09 c2                	or     edx,eax
c001a7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7d7:	c1 e8 08             	shr    eax,0x8
c001a7da:	25 00 ff 00 00       	and    eax,0xff00
c001a7df:	09 c2                	or     edx,eax
c001a7e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7e5:	c1 e0 18             	shl    eax,0x18
c001a7e8:	09 d0                	or     eax,edx
c001a7ea:	c3                   	ret    

c001a7eb <Net::crc32Calc(unsigned char*, int)>:
c001a7eb:	83 ec 10             	sub    esp,0x10
c001a7ee:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a7f3:	75 07                	jne    c001a7fc <Net::crc32Calc(unsigned char*, int)+0x11>
c001a7f5:	b8 00 00 00 00       	mov    eax,0x0
c001a7fa:	eb 7c                	jmp    c001a878 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a7fc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a801:	7f 07                	jg     c001a80a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a803:	b8 00 00 00 00       	mov    eax,0x0
c001a808:	eb 6e                	jmp    c001a878 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a80a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a812:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a81a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a81e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a822:	7d 4e                	jge    c001a872 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a824:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a82c:	01 d0                	add    eax,edx
c001a82e:	8a 00                	mov    al,BYTE PTR [eax]
c001a830:	0f b6 c0             	movzx  eax,al
c001a833:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a837:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a83f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a844:	7f 26                	jg     c001a86c <Net::crc32Calc(unsigned char*, int)+0x81>
c001a846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a84a:	83 e0 01             	and    eax,0x1
c001a84d:	74 0d                	je     c001a85c <Net::crc32Calc(unsigned char*, int)+0x71>
c001a84f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a853:	d1 e8                	shr    eax,1
c001a855:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a85a:	eb 06                	jmp    c001a862 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a85c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a860:	d1 e8                	shr    eax,1
c001a862:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a866:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a86a:	eb d3                	jmp    c001a83f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a86c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a870:	eb a8                	jmp    c001a81a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a876:	f7 d0                	not    eax
c001a878:	83 c4 10             	add    esp,0x10
c001a87b:	c3                   	ret    

c001a87c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a87c:	57                   	push   edi
c001a87d:	56                   	push   esi
c001a87e:	53                   	push   ebx
c001a87f:	83 ec 60             	sub    esp,0x60
c001a882:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a889:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a88d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a895:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a89a:	7f 1a                	jg     c001a8b6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a89c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8a3:	8d 50 01             	lea    edx,[eax+0x1]
c001a8a6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a8ad:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a8b0:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a8b4:	eb df                	jmp    c001a895 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a8b6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8bd:	8d 50 01             	lea    edx,[eax+0x1]
c001a8c0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a8c7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a8ca:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8d5:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a8d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8dd:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a8e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a8f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a8f9:	89 c6                	mov    esi,eax
c001a8fb:	89 d7                	mov    edi,edx
c001a8fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8ff:	89 c8                	mov    eax,ecx
c001a901:	89 fa                	mov    edx,edi
c001a903:	89 f3                	mov    ebx,esi
c001a905:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a909:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a90d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a910:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a918:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a91f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a923:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a927:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a92b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a933:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a937:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a93b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a93f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a943:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a947:	89 c6                	mov    esi,eax
c001a949:	89 d7                	mov    edi,edx
c001a94b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a94d:	89 c8                	mov    eax,ecx
c001a94f:	89 fa                	mov    edx,edi
c001a951:	89 f3                	mov    ebx,esi
c001a953:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a957:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a95b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a95f:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a967:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a96e:	0f b7 c0             	movzx  eax,ax
c001a971:	c1 f8 08             	sar    eax,0x8
c001a974:	89 c1                	mov    ecx,eax
c001a976:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a97d:	8d 50 01             	lea    edx,[eax+0x1]
c001a980:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a987:	88 ca                	mov    dl,cl
c001a989:	88 10                	mov    BYTE PTR [eax],dl
c001a98b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a992:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a999:	8d 48 01             	lea    ecx,[eax+0x1]
c001a99c:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a9a3:	88 10                	mov    BYTE PTR [eax],dl
c001a9a5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a9a9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a9ad:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a9b4:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a9b8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a9bc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a9c0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a9c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a9c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a9cc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a9d0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a9d4:	89 c6                	mov    esi,eax
c001a9d6:	89 d7                	mov    edi,edx
c001a9d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9da:	89 c8                	mov    eax,ecx
c001a9dc:	89 fa                	mov    edx,edi
c001a9de:	89 f3                	mov    ebx,esi
c001a9e0:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a9e4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a9e8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a9ec:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a9f0:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a9f7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a9fe:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001aa02:	50                   	push   eax
c001aa03:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aa07:	e8 df fd ff ff       	call   c001a7eb <Net::crc32Calc(unsigned char*, int)>
c001aa0c:	83 c4 08             	add    esp,0x8
c001aa0f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001aa13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aa17:	c1 e8 18             	shr    eax,0x18
c001aa1a:	89 c1                	mov    ecx,eax
c001aa1c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa23:	8d 50 01             	lea    edx,[eax+0x1]
c001aa26:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa2d:	88 ca                	mov    dl,cl
c001aa2f:	88 10                	mov    BYTE PTR [eax],dl
c001aa31:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aa35:	c1 e8 10             	shr    eax,0x10
c001aa38:	89 c1                	mov    ecx,eax
c001aa3a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa41:	8d 50 01             	lea    edx,[eax+0x1]
c001aa44:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa4b:	88 ca                	mov    dl,cl
c001aa4d:	88 10                	mov    BYTE PTR [eax],dl
c001aa4f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aa53:	c1 e8 08             	shr    eax,0x8
c001aa56:	89 c1                	mov    ecx,eax
c001aa58:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa5f:	8d 50 01             	lea    edx,[eax+0x1]
c001aa62:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa69:	88 ca                	mov    dl,cl
c001aa6b:	88 10                	mov    BYTE PTR [eax],dl
c001aa6d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aa74:	8d 50 01             	lea    edx,[eax+0x1]
c001aa77:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001aa7e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001aa82:	88 10                	mov    BYTE PTR [eax],dl
c001aa84:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aa88:	83 c4 60             	add    esp,0x60
c001aa8b:	5b                   	pop    ebx
c001aa8c:	5e                   	pop    esi
c001aa8d:	5f                   	pop    edi
c001aa8e:	c3                   	ret    

c001aa8f <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001aa8f:	57                   	push   edi
c001aa90:	56                   	push   esi
c001aa91:	53                   	push   ebx
c001aa92:	83 ec 70             	sub    esp,0x70
c001aa95:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa9c:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001aaa0:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001aaa8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aaaf:	83 c0 0e             	add    eax,0xe
c001aab2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aab6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aabd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001aac1:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001aac9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aacd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001aad1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aad5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aad9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001aadd:	89 c6                	mov    esi,eax
c001aadf:	89 d7                	mov    edi,edx
c001aae1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aae3:	89 c8                	mov    eax,ecx
c001aae5:	89 fa                	mov    edx,edi
c001aae7:	89 f3                	mov    ebx,esi
c001aae9:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001aaed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aaf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aaf5:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aafd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ab04:	83 c0 08             	add    eax,0x8
c001ab07:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001ab0b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab12:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ab16:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001ab1e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ab22:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ab26:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab2a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001ab2e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ab32:	89 c6                	mov    esi,eax
c001ab34:	89 d7                	mov    edi,edx
c001ab36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab38:	89 c8                	mov    eax,ecx
c001ab3a:	89 fa                	mov    edx,edi
c001ab3c:	89 f3                	mov    ebx,esi
c001ab3e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001ab42:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001ab46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ab4a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001ab52:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab59:	8d 50 01             	lea    edx,[eax+0x1]
c001ab5c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab63:	8a 00                	mov    al,BYTE PTR [eax]
c001ab65:	0f b6 c0             	movzx  eax,al
c001ab68:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001ab6d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab74:	8d 50 01             	lea    edx,[eax+0x1]
c001ab77:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab7e:	8a 00                	mov    al,BYTE PTR [eax]
c001ab80:	0f b6 c0             	movzx  eax,al
c001ab83:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001ab88:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001ab8d:	c1 e0 08             	shl    eax,0x8
c001ab90:	89 c2                	mov    edx,eax
c001ab92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ab96:	09 d0                	or     eax,edx
c001ab98:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab9f:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aba3:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001abab:	75 46                	jne    c001abf3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001abad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001abb4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abb7:	66 3d dc 05          	cmp    ax,0x5dc
c001abbb:	77 16                	ja     c001abd3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001abbd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001abc4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abc7:	0f b7 c0             	movzx  eax,ax
c001abca:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001abd1:	eb 20                	jmp    c001abf3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001abd3:	83 ec 0c             	sub    esp,0xc
c001abd6:	68 84 c8 02 c0       	push   0xc002c884
c001abdb:	e8 05 7e ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001abe0:	83 c4 10             	add    esp,0x10
c001abe3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001abea:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001abee:	e9 17 01 00 00       	jmp    c001ad0a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001abf3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001abfa:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ac01:	8b 12                	mov    edx,DWORD PTR [edx]
c001ac03:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ac07:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ac0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ac12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ac16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac22:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ac26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac2a:	89 c6                	mov    esi,eax
c001ac2c:	89 d7                	mov    edi,edx
c001ac2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac30:	89 c8                	mov    eax,ecx
c001ac32:	89 fa                	mov    edx,edi
c001ac34:	89 f3                	mov    ebx,esi
c001ac36:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ac3a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ac3e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac41:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ac48:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001ac4f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac56:	8d 50 01             	lea    edx,[eax+0x1]
c001ac59:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac60:	8a 00                	mov    al,BYTE PTR [eax]
c001ac62:	0f b6 c0             	movzx  eax,al
c001ac65:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ac69:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac70:	8d 50 01             	lea    edx,[eax+0x1]
c001ac73:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac7a:	8a 00                	mov    al,BYTE PTR [eax]
c001ac7c:	0f b6 c0             	movzx  eax,al
c001ac7f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ac83:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ac8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ac8d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ac94:	8a 00                	mov    al,BYTE PTR [eax]
c001ac96:	0f b6 c0             	movzx  eax,al
c001ac99:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ac9d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aca4:	8d 50 01             	lea    edx,[eax+0x1]
c001aca7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001acae:	8a 00                	mov    al,BYTE PTR [eax]
c001acb0:	0f b6 c0             	movzx  eax,al
c001acb3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001acb7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001acbb:	c1 e0 18             	shl    eax,0x18
c001acbe:	89 c2                	mov    edx,eax
c001acc0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001acc4:	c1 e0 10             	shl    eax,0x10
c001acc7:	09 c2                	or     edx,eax
c001acc9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001accd:	c1 e0 08             	shl    eax,0x8
c001acd0:	09 d0                	or     eax,edx
c001acd2:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001acd6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001acda:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ace1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ace5:	83 e8 04             	sub    eax,0x4
c001ace8:	83 ec 08             	sub    esp,0x8
c001aceb:	50                   	push   eax
c001acec:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001acf0:	e8 f6 fa ff ff       	call   c001a7eb <Net::crc32Calc(unsigned char*, int)>
c001acf5:	83 c4 10             	add    esp,0x10
c001acf8:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001acfc:	0f 94 c2             	sete   dl
c001acff:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad06:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ad09:	90                   	nop
c001ad0a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ad11:	83 c4 70             	add    esp,0x70
c001ad14:	5b                   	pop    ebx
c001ad15:	5e                   	pop    esi
c001ad16:	5f                   	pop    edi
c001ad17:	c2 04 00             	ret    0x4

c001ad1a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ad1a:	55                   	push   ebp
c001ad1b:	57                   	push   edi
c001ad1c:	56                   	push   esi
c001ad1d:	53                   	push   ebx
c001ad1e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad24:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ad2b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ad2d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ad30:	80 fb 40             	cmp    bl,0x40
c001ad33:	75 1b                	jne    c001ad50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ad35:	8a 16                	mov    dl,BYTE PTR [esi]
c001ad37:	84 d2                	test   dl,dl
c001ad39:	0f 84 f1 00 00 00    	je     c001ae30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad3f:	8d 46 01             	lea    eax,[esi+0x1]
c001ad42:	80 fa 3a             	cmp    dl,0x3a
c001ad45:	74 04                	je     c001ad4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ad47:	89 c6                	mov    esi,eax
c001ad49:	eb ea                	jmp    c001ad35 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ad4b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ad4e:	89 c6                	mov    esi,eax
c001ad50:	50                   	push   eax
c001ad51:	6a 40                	push   0x40
c001ad53:	6a 00                	push   0x0
c001ad55:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad59:	50                   	push   eax
c001ad5a:	e8 f1 59 fe ff       	call   c0000750 <memset>
c001ad5f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ad66:	31 c0                	xor    eax,eax
c001ad68:	83 c4 10             	add    esp,0x10
c001ad6b:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ad6d:	84 c9                	test   cl,cl
c001ad6f:	0f 84 bb 00 00 00    	je     c001ae30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad75:	3d c7 00 00 00       	cmp    eax,0xc7
c001ad7a:	0f 8f b0 00 00 00    	jg     c001ae30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad80:	80 f9 0a             	cmp    cl,0xa
c001ad83:	0f 85 98 00 00 00    	jne    c001ae21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ad89:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ad8e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ad92:	a8 df                	test   al,0xdf
c001ad94:	0f 94 c1             	sete   cl
c001ad97:	3c 23                	cmp    al,0x23
c001ad99:	0f 94 c2             	sete   dl
c001ad9c:	08 d1                	or     cl,dl
c001ad9e:	75 4a                	jne    c001adea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ada0:	8d 50 f7             	lea    edx,[eax-0x9]
c001ada3:	80 fa 01             	cmp    dl,0x1
c001ada6:	76 42                	jbe    c001adea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ada8:	3c 5b                	cmp    al,0x5b
c001adaa:	75 42                	jne    c001adee <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001adac:	80 fb 40             	cmp    bl,0x40
c001adaf:	75 39                	jne    c001adea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001adb1:	83 ec 0c             	sub    esp,0xc
c001adb4:	8d 54 24 65          	lea    edx,[esp+0x65]
c001adb8:	52                   	push   edx
c001adb9:	e8 ae 59 fe ff       	call   c000076c <strlen>
c001adbe:	83 c4 10             	add    esp,0x10
c001adc1:	83 f8 3f             	cmp    eax,0x3f
c001adc4:	77 6a                	ja     c001ae30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001adc6:	50                   	push   eax
c001adc7:	50                   	push   eax
c001adc8:	8d 54 24 61          	lea    edx,[esp+0x61]
c001adcc:	52                   	push   edx
c001adcd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001add1:	52                   	push   edx
c001add2:	e8 35 5a fe ff       	call   c000080c <strcpy>
c001add7:	58                   	pop    eax
c001add8:	8d 54 24 24          	lea    edx,[esp+0x24]
c001addc:	52                   	push   edx
c001addd:	e8 8a 59 fe ff       	call   c000076c <strlen>
c001ade2:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ade7:	83 c4 10             	add    esp,0x10
c001adea:	31 d2                	xor    edx,edx
c001adec:	eb 3a                	jmp    c001ae28 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001adee:	80 fb 40             	cmp    bl,0x40
c001adf1:	74 06                	je     c001adf9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001adf3:	8d 44 24 58          	lea    eax,[esp+0x58]
c001adf7:	eb 20                	jmp    c001ae19 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001adf9:	50                   	push   eax
c001adfa:	50                   	push   eax
c001adfb:	55                   	push   ebp
c001adfc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae00:	50                   	push   eax
c001ae01:	e8 92 5a fe ff       	call   c0000898 <strcmp>
c001ae06:	83 c4 10             	add    esp,0x10
c001ae09:	85 c0                	test   eax,eax
c001ae0b:	75 dd                	jne    c001adea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae0d:	eb e4                	jmp    c001adf3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ae0f:	8d 50 01             	lea    edx,[eax+0x1]
c001ae12:	80 f9 3d             	cmp    cl,0x3d
c001ae15:	74 1d                	je     c001ae34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ae17:	89 d0                	mov    eax,edx
c001ae19:	8a 08                	mov    cl,BYTE PTR [eax]
c001ae1b:	84 c9                	test   cl,cl
c001ae1d:	75 f0                	jne    c001ae0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ae1f:	eb 0f                	jmp    c001ae30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae21:	8d 50 01             	lea    edx,[eax+0x1]
c001ae24:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ae28:	47                   	inc    edi
c001ae29:	89 d0                	mov    eax,edx
c001ae2b:	e9 3b ff ff ff       	jmp    c001ad6b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ae30:	31 c0                	xor    eax,eax
c001ae32:	eb 33                	jmp    c001ae67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ae34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ae38:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ae3b:	50                   	push   eax
c001ae3c:	50                   	push   eax
c001ae3d:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ae41:	50                   	push   eax
c001ae42:	56                   	push   esi
c001ae43:	e8 50 5a fe ff       	call   c0000898 <strcmp>
c001ae48:	83 c4 10             	add    esp,0x10
c001ae4b:	85 c0                	test   eax,eax
c001ae4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae51:	75 97                	jne    c001adea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae53:	51                   	push   ecx
c001ae54:	51                   	push   ecx
c001ae55:	52                   	push   edx
c001ae56:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ae5d:	e8 aa 59 fe ff       	call   c000080c <strcpy>
c001ae62:	83 c4 10             	add    esp,0x10
c001ae65:	b0 01                	mov    al,0x1
c001ae67:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae6d:	5b                   	pop    ebx
c001ae6e:	5e                   	pop    esi
c001ae6f:	5f                   	pop    edi
c001ae70:	5d                   	pop    ebp
c001ae71:	c3                   	ret    

c001ae72 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ae72:	57                   	push   edi
c001ae73:	56                   	push   esi
c001ae74:	53                   	push   ebx
c001ae75:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ae7b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ae82:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ae89:	53                   	push   ebx
c001ae8a:	e8 dd 58 fe ff       	call   c000076c <strlen>
c001ae8f:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae92:	89 c7                	mov    edi,eax
c001ae94:	e8 d3 58 fe ff       	call   c000076c <strlen>
c001ae99:	83 c4 10             	add    esp,0x10
c001ae9c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aea0:	3d ff 00 00 00       	cmp    eax,0xff
c001aea5:	0f 87 d3 00 00 00    	ja     c001af7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aeab:	57                   	push   edi
c001aeac:	57                   	push   edi
c001aead:	56                   	push   esi
c001aeae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aeb2:	56                   	push   esi
c001aeb3:	e8 54 59 fe ff       	call   c000080c <strcpy>
c001aeb8:	58                   	pop    eax
c001aeb9:	5a                   	pop    edx
c001aeba:	68 d9 cd 02 c0       	push   0xc002cdd9
c001aebf:	56                   	push   esi
c001aec0:	e8 87 5a fe ff       	call   c000094c <strcat>
c001aec5:	59                   	pop    ecx
c001aec6:	5f                   	pop    edi
c001aec7:	53                   	push   ebx
c001aec8:	56                   	push   esi
c001aec9:	e8 7e 5a fe ff       	call   c000094c <strcat>
c001aece:	58                   	pop    eax
c001aecf:	5a                   	pop    edx
c001aed0:	68 d0 c8 02 c0       	push   0xc002c8d0
c001aed5:	56                   	push   esi
c001aed6:	e8 71 5a fe ff       	call   c000094c <strcat>
c001aedb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001aee2:	e8 1b 4a ff ff       	call   c000f902 <malloc>
c001aee7:	83 c4 0c             	add    esp,0xc
c001aeea:	89 c3                	mov    ebx,eax
c001aeec:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c001aef2:	56                   	push   esi
c001aef3:	50                   	push   eax
c001aef4:	e8 4b 80 ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001aef9:	83 c4 10             	add    esp,0x10
c001aefc:	85 db                	test   ebx,ebx
c001aefe:	74 7e                	je     c001af7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af00:	51                   	push   ecx
c001af01:	51                   	push   ecx
c001af02:	6a 01                	push   0x1
c001af04:	53                   	push   ebx
c001af05:	e8 9e 80 ff ff       	call   c0012fa8 <File::open(FileOpenMode)>
c001af0a:	83 c4 10             	add    esp,0x10
c001af0d:	85 c0                	test   eax,eax
c001af0f:	74 08                	je     c001af19 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001af11:	83 ec 0c             	sub    esp,0xc
c001af14:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af16:	53                   	push   ebx
c001af17:	eb 5f                	jmp    c001af78 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001af19:	52                   	push   edx
c001af1a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001af1e:	50                   	push   eax
c001af1f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001af23:	50                   	push   eax
c001af24:	53                   	push   ebx
c001af25:	e8 2a 83 ff ff       	call   c0013254 <File::stat(unsigned long long*, bool*)>
c001af2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af2e:	83 c4 10             	add    esp,0x10
c001af31:	89 c1                	mov    ecx,eax
c001af33:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001af37:	74 31                	je     c001af6a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af39:	83 ec 0c             	sub    esp,0xc
c001af3c:	50                   	push   eax
c001af3d:	e8 c0 49 ff ff       	call   c000f902 <malloc>
c001af42:	89 c6                	mov    esi,eax
c001af44:	58                   	pop    eax
c001af45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af47:	8d 54 24 20          	lea    edx,[esp+0x20]
c001af4b:	52                   	push   edx
c001af4c:	56                   	push   esi
c001af4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af55:	53                   	push   ebx
c001af56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001af59:	83 c4 20             	add    esp,0x20
c001af5c:	85 c0                	test   eax,eax
c001af5e:	75 0a                	jne    c001af6a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001af60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af64:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001af68:	74 18                	je     c001af82 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001af6a:	83 ec 0c             	sub    esp,0xc
c001af6d:	53                   	push   ebx
c001af6e:	e8 93 80 ff ff       	call   c0013006 <File::close()>
c001af73:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af7b:	83 c4 10             	add    esp,0x10
c001af7e:	31 c0                	xor    eax,eax
c001af80:	eb 3b                	jmp    c001afbd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001af82:	83 ec 0c             	sub    esp,0xc
c001af85:	53                   	push   ebx
c001af86:	e8 7b 80 ff ff       	call   c0013006 <File::close()>
c001af8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af93:	83 c4 0c             	add    esp,0xc
c001af96:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001af9d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001afa4:	56                   	push   esi
c001afa5:	e8 70 fd ff ff       	call   c001ad1a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001afaa:	89 34 24             	mov    DWORD PTR [esp],esi
c001afad:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001afb1:	e8 5c 49 ff ff       	call   c000f912 <free>
c001afb6:	83 c4 10             	add    esp,0x10
c001afb9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001afbd:	81 c4 20 01 00 00    	add    esp,0x120
c001afc3:	5b                   	pop    ebx
c001afc4:	5e                   	pop    esi
c001afc5:	5f                   	pop    edi
c001afc6:	c3                   	ret    

c001afc7 <Reg::getLine(char*, char*, char*)>:
c001afc7:	57                   	push   edi
c001afc8:	56                   	push   esi
c001afc9:	53                   	push   ebx
c001afca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001afd2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001afd6:	57                   	push   edi
c001afd7:	56                   	push   esi
c001afd8:	53                   	push   ebx
c001afd9:	68 d5 c8 02 c0       	push   0xc002c8d5
c001afde:	e8 8f fe ff ff       	call   c001ae72 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001afe3:	83 c4 10             	add    esp,0x10
c001afe6:	84 c0                	test   al,al
c001afe8:	75 10                	jne    c001affa <Reg::getLine(char*, char*, char*)+0x33>
c001afea:	57                   	push   edi
c001afeb:	56                   	push   esi
c001afec:	53                   	push   ebx
c001afed:	68 fa c8 02 c0       	push   0xc002c8fa
c001aff2:	e8 7b fe ff ff       	call   c001ae72 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aff7:	83 c4 10             	add    esp,0x10
c001affa:	5b                   	pop    ebx
c001affb:	5e                   	pop    esi
c001affc:	5f                   	pop    edi
c001affd:	c3                   	ret    

c001affe <Reg::readInt(char*, char*, int*)>:
c001affe:	55                   	push   ebp
c001afff:	57                   	push   edi
c001b000:	56                   	push   esi
c001b001:	53                   	push   ebx
c001b002:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b008:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b00c:	57                   	push   edi
c001b00d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b014:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b01b:	e8 a7 ff ff ff       	call   c001afc7 <Reg::getLine(char*, char*, char*)>
c001b020:	83 c4 10             	add    esp,0x10
c001b023:	84 c0                	test   al,al
c001b025:	0f 84 b3 00 00 00    	je     c001b0de <Reg::readInt(char*, char*, int*)+0xe0>
c001b02b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b02f:	80 fa 2b             	cmp    dl,0x2b
c001b032:	74 0c                	je     c001b040 <Reg::readInt(char*, char*, int*)+0x42>
c001b034:	80 fa 2d             	cmp    dl,0x2d
c001b037:	75 0e                	jne    c001b047 <Reg::readInt(char*, char*, int*)+0x49>
c001b039:	ba 01 00 00 00       	mov    edx,0x1
c001b03e:	eb 0b                	jmp    c001b04b <Reg::readInt(char*, char*, int*)+0x4d>
c001b040:	ba 01 00 00 00       	mov    edx,0x1
c001b045:	eb 02                	jmp    c001b049 <Reg::readInt(char*, char*, int*)+0x4b>
c001b047:	31 d2                	xor    edx,edx
c001b049:	31 c0                	xor    eax,eax
c001b04b:	be 0a 00 00 00       	mov    esi,0xa
c001b050:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b055:	75 20                	jne    c001b077 <Reg::readInt(char*, char*, int*)+0x79>
c001b057:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b05b:	80 f9 78             	cmp    cl,0x78
c001b05e:	75 0a                	jne    c001b06a <Reg::readInt(char*, char*, int*)+0x6c>
c001b060:	83 c2 02             	add    edx,0x2
c001b063:	be 10 00 00 00       	mov    esi,0x10
c001b068:	eb 0d                	jmp    c001b077 <Reg::readInt(char*, char*, int*)+0x79>
c001b06a:	80 f9 62             	cmp    cl,0x62
c001b06d:	75 08                	jne    c001b077 <Reg::readInt(char*, char*, int*)+0x79>
c001b06f:	83 c2 02             	add    edx,0x2
c001b072:	be 02 00 00 00       	mov    esi,0x2
c001b077:	01 d7                	add    edi,edx
c001b079:	31 d2                	xor    edx,edx
c001b07b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b07d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b081:	80 fb 0d             	cmp    bl,0xd
c001b084:	0f 94 c3             	sete   bl
c001b087:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b08c:	0f 94 c1             	sete   cl
c001b08f:	08 cb                	or     bl,cl
c001b091:	75 3a                	jne    c001b0cd <Reg::readInt(char*, char*, int*)+0xcf>
c001b093:	0f af d6             	imul   edx,esi
c001b096:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b09b:	83 fe 10             	cmp    esi,0x10
c001b09e:	75 26                	jne    c001b0c6 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0a0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0a4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b0a7:	89 e9                	mov    ecx,ebp
c001b0a9:	80 f9 05             	cmp    cl,0x5
c001b0ac:	77 06                	ja     c001b0b4 <Reg::readInt(char*, char*, int*)+0xb6>
c001b0ae:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b0b2:	eb 16                	jmp    c001b0ca <Reg::readInt(char*, char*, int*)+0xcc>
c001b0b4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b0b8:	83 e9 61             	sub    ecx,0x61
c001b0bb:	80 f9 05             	cmp    cl,0x5
c001b0be:	77 06                	ja     c001b0c6 <Reg::readInt(char*, char*, int*)+0xc8>
c001b0c0:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b0c4:	eb 04                	jmp    c001b0ca <Reg::readInt(char*, char*, int*)+0xcc>
c001b0c6:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b0ca:	47                   	inc    edi
c001b0cb:	eb ae                	jmp    c001b07b <Reg::readInt(char*, char*, int*)+0x7d>
c001b0cd:	84 c0                	test   al,al
c001b0cf:	74 02                	je     c001b0d3 <Reg::readInt(char*, char*, int*)+0xd5>
c001b0d1:	f7 da                	neg    edx
c001b0d3:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b0da:	89 10                	mov    DWORD PTR [eax],edx
c001b0dc:	88 d8                	mov    al,bl
c001b0de:	81 c4 ec 00 00 00    	add    esp,0xec
c001b0e4:	5b                   	pop    ebx
c001b0e5:	5e                   	pop    esi
c001b0e6:	5f                   	pop    edi
c001b0e7:	5d                   	pop    ebp
c001b0e8:	c3                   	ret    

c001b0e9 <Reg::readString(char*, char*, char*, int)>:
c001b0e9:	57                   	push   edi
c001b0ea:	56                   	push   esi
c001b0eb:	53                   	push   ebx
c001b0ec:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b0f2:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b0f9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b0fd:	57                   	push   edi
c001b0fe:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b105:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b10c:	e8 b6 fe ff ff       	call   c001afc7 <Reg::getLine(char*, char*, char*)>
c001b111:	83 c4 10             	add    esp,0x10
c001b114:	89 c6                	mov    esi,eax
c001b116:	84 c0                	test   al,al
c001b118:	74 44                	je     c001b15e <Reg::readString(char*, char*, char*, int)+0x75>
c001b11a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b121:	31 c0                	xor    eax,eax
c001b123:	4a                   	dec    edx
c001b124:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b127:	84 c9                	test   cl,cl
c001b129:	74 0f                	je     c001b13a <Reg::readString(char*, char*, char*, int)+0x51>
c001b12b:	39 c2                	cmp    edx,eax
c001b12d:	7e 0b                	jle    c001b13a <Reg::readString(char*, char*, char*, int)+0x51>
c001b12f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b132:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b137:	40                   	inc    eax
c001b138:	eb ea                	jmp    c001b124 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b13a:	83 ec 0c             	sub    esp,0xc
c001b13d:	53                   	push   ebx
c001b13e:	e8 29 56 fe ff       	call   c000076c <strlen>
c001b143:	83 c4 10             	add    esp,0x10
c001b146:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b14b:	75 11                	jne    c001b15e <Reg::readString(char*, char*, char*, int)+0x75>
c001b14d:	83 ec 0c             	sub    esp,0xc
c001b150:	53                   	push   ebx
c001b151:	e8 16 56 fe ff       	call   c000076c <strlen>
c001b156:	83 c4 10             	add    esp,0x10
c001b159:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b15e:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b164:	89 f0                	mov    eax,esi
c001b166:	5b                   	pop    ebx
c001b167:	5e                   	pop    esi
c001b168:	5f                   	pop    edi
c001b169:	c3                   	ret    

c001b16a <Reg::readBool(char*, char*, bool*)>:
c001b16a:	83 ec 20             	sub    esp,0x20
c001b16d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b171:	50                   	push   eax
c001b172:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b17a:	e8 7f fe ff ff       	call   c001affe <Reg::readInt(char*, char*, int*)>
c001b17f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b184:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b188:	0f 95 02             	setne  BYTE PTR [edx]
c001b18b:	83 c4 2c             	add    esp,0x2c
c001b18e:	c3                   	ret    

c001b18f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b18f:	53                   	push   ebx
c001b190:	83 ec 1c             	sub    esp,0x1c
c001b193:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b197:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b19b:	50                   	push   eax
c001b19c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1a4:	e8 c1 ff ff ff       	call   c001b16a <Reg::readBool(char*, char*, bool*)>
c001b1a9:	83 c4 10             	add    esp,0x10
c001b1ac:	84 c0                	test   al,al
c001b1ae:	74 04                	je     c001b1b4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b1b0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b1b4:	88 d8                	mov    al,bl
c001b1b6:	83 c4 18             	add    esp,0x18
c001b1b9:	5b                   	pop    ebx
c001b1ba:	c3                   	ret    

c001b1bb <Reg::readIntWithDefault(char*, char*, int)>:
c001b1bb:	53                   	push   ebx
c001b1bc:	83 ec 1c             	sub    esp,0x1c
c001b1bf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b1c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b1c7:	50                   	push   eax
c001b1c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b1d0:	e8 29 fe ff ff       	call   c001affe <Reg::readInt(char*, char*, int*)>
c001b1d5:	83 c4 10             	add    esp,0x10
c001b1d8:	84 c0                	test   al,al
c001b1da:	74 04                	je     c001b1e0 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b1dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b1e0:	89 d8                	mov    eax,ebx
c001b1e2:	83 c4 18             	add    esp,0x18
c001b1e5:	5b                   	pop    ebx
c001b1e6:	c3                   	ret    

c001b1e7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b1e7:	57                   	push   edi
c001b1e8:	56                   	push   esi
c001b1e9:	56                   	push   esi
c001b1ea:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b1ee:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b1f2:	56                   	push   esi
c001b1f3:	57                   	push   edi
c001b1f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1fc:	e8 e8 fe ff ff       	call   c001b0e9 <Reg::readString(char*, char*, char*, int)>
c001b201:	83 c4 10             	add    esp,0x10
c001b204:	84 c0                	test   al,al
c001b206:	75 1a                	jne    c001b222 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b208:	51                   	push   ecx
c001b209:	56                   	push   esi
c001b20a:	6a 00                	push   0x0
c001b20c:	57                   	push   edi
c001b20d:	e8 3e 55 fe ff       	call   c0000750 <memset>
c001b212:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b215:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b219:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b21b:	83 c4 10             	add    esp,0x10
c001b21e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b222:	89 f8                	mov    eax,edi
c001b224:	5a                   	pop    edx
c001b225:	5e                   	pop    esi
c001b226:	5f                   	pop    edi
c001b227:	c3                   	ret    

c001b228 <Sys::eject(regs*)>:
c001b228:	83 ec 0c             	sub    esp,0xc
c001b22b:	83 ca ff             	or     edx,0xffffffff
c001b22e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b232:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b235:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b23a:	83 e9 41             	sub    ecx,0x41
c001b23d:	83 f9 19             	cmp    ecx,0x19
c001b240:	77 18                	ja     c001b25a <Sys::eject(regs*)+0x32>
c001b242:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c001b249:	85 c9                	test   ecx,ecx
c001b24b:	74 0d                	je     c001b25a <Sys::eject(regs*)+0x32>
c001b24d:	83 ec 0c             	sub    esp,0xc
c001b250:	51                   	push   ecx
c001b251:	e8 a2 b0 ff ff       	call   c00162f8 <LogicalDisk::eject()>
c001b256:	83 c4 10             	add    esp,0x10
c001b259:	99                   	cdq    
c001b25a:	83 c4 0c             	add    esp,0xc
c001b25d:	c3                   	ret    

c001b25e <Sys::exit(regs*)>:
c001b25e:	83 ec 18             	sub    esp,0x18
c001b261:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b265:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b268:	e8 7e 38 00 00       	call   c001eaeb <terminateTask(int)>
c001b26d:	83 c8 ff             	or     eax,0xffffffff
c001b270:	83 c4 1c             	add    esp,0x1c
c001b273:	89 c2                	mov    edx,eax
c001b275:	c3                   	ret    

c001b276 <Sys::getCwd(regs*)>:
c001b276:	83 ec 10             	sub    esp,0x10
c001b279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b27d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b280:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b283:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b288:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b28b:	e8 b6 7a ff ff       	call   c0012d46 <Fs::getcwd(Process*, char*, int)>
c001b290:	83 c4 1c             	add    esp,0x1c
c001b293:	99                   	cdq    
c001b294:	c3                   	ret    

c001b295 <Sys::getPID(regs*)>:
c001b295:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b29a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b29d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b29f:	99                   	cdq    
c001b2a0:	c3                   	ret    

c001b2a1 <Sys::getRAMData(regs*)>:
c001b2a1:	8b 0d b4 f2 02 c0    	mov    ecx,DWORD PTR ds:0xc002f2b4
c001b2a7:	6b 05 b0 f2 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f2b0,0x64
c001b2ae:	99                   	cdq    
c001b2af:	f7 f9                	idiv   ecx
c001b2b1:	c1 e0 18             	shl    eax,0x18
c001b2b4:	09 c8                	or     eax,ecx
c001b2b6:	99                   	cdq    
c001b2b7:	c3                   	ret    

c001b2b8 <Sys::getVGAPtr(regs*)>:
c001b2b8:	55                   	push   ebp
c001b2b9:	57                   	push   edi
c001b2ba:	56                   	push   esi
c001b2bb:	53                   	push   ebx
c001b2bc:	83 ec 18             	sub    esp,0x18
c001b2bf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b2c3:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b2c6:	e8 02 33 00 00       	call   c001e5cd <Thr::processFromPID(int)>
c001b2cb:	83 c4 10             	add    esp,0x10
c001b2ce:	89 c1                	mov    ecx,eax
c001b2d0:	b8 01 00 00 00       	mov    eax,0x1
c001b2d5:	85 c9                	test   ecx,ecx
c001b2d7:	74 59                	je     c001b332 <Sys::getVGAPtr(regs*)+0x7a>
c001b2d9:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b2df:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b2e3:	74 0c                	je     c001b2f1 <Sys::getVGAPtr(regs*)+0x39>
c001b2e5:	83 ec 0c             	sub    esp,0xc
c001b2e8:	53                   	push   ebx
c001b2e9:	e8 1a 55 ff ff       	call   c0010808 <setActiveTerminal(VgaText*)>
c001b2ee:	83 c4 10             	add    esp,0x10
c001b2f1:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b2f4:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b2f7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b2fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b2fe:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b301:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b304:	81 c3 82 00 00 00    	add    ebx,0x82
c001b30a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b310:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b313:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b316:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b31c:	50                   	push   eax
c001b31d:	50                   	push   eax
c001b31e:	53                   	push   ebx
c001b31f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b322:	05 a8 0f 00 00       	add    eax,0xfa8
c001b327:	50                   	push   eax
c001b328:	e8 df 54 fe ff       	call   c000080c <strcpy>
c001b32d:	83 c4 10             	add    esp,0x10
c001b330:	31 c0                	xor    eax,eax
c001b332:	83 c4 0c             	add    esp,0xc
c001b335:	31 d2                	xor    edx,edx
c001b337:	5b                   	pop    ebx
c001b338:	5e                   	pop    esi
c001b339:	5f                   	pop    edi
c001b33a:	5d                   	pop    ebp
c001b33b:	c3                   	ret    

c001b33c <Sys::loadDLL(regs*)>:
c001b33c:	56                   	push   esi
c001b33d:	53                   	push   ebx
c001b33e:	31 d2                	xor    edx,edx
c001b340:	51                   	push   ecx
c001b341:	b8 01 00 00 00       	mov    eax,0x1
c001b346:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b34a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b34e:	0f 84 8c 00 00 00    	je     c001b3e0 <Sys::loadDLL(regs*)+0xa4>
c001b354:	83 ec 0c             	sub    esp,0xc
c001b357:	68 14 01 00 00       	push   0x114
c001b35c:	e8 a1 45 ff ff       	call   c000f902 <malloc>
c001b361:	83 c4 0c             	add    esp,0xc
c001b364:	89 c3                	mov    ebx,eax
c001b366:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b36b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b36e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b371:	53                   	push   ebx
c001b372:	e8 cd 7b ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001b377:	83 c4 10             	add    esp,0x10
c001b37a:	31 d2                	xor    edx,edx
c001b37c:	b8 02 00 00 00       	mov    eax,0x2
c001b381:	85 db                	test   ebx,ebx
c001b383:	74 5b                	je     c001b3e0 <Sys::loadDLL(regs*)+0xa4>
c001b385:	83 ec 0c             	sub    esp,0xc
c001b388:	53                   	push   ebx
c001b389:	e8 88 7e ff ff       	call   c0013216 <File::exists()>
c001b38e:	83 c4 10             	add    esp,0x10
c001b391:	84 c0                	test   al,al
c001b393:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b395:	75 11                	jne    c001b3a8 <Sys::loadDLL(regs*)+0x6c>
c001b397:	83 ec 0c             	sub    esp,0xc
c001b39a:	53                   	push   ebx
c001b39b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b39e:	83 c4 10             	add    esp,0x10
c001b3a1:	b8 03 00 00 00       	mov    eax,0x3
c001b3a6:	eb 36                	jmp    c001b3de <Sys::loadDLL(regs*)+0xa2>
c001b3a8:	83 ec 0c             	sub    esp,0xc
c001b3ab:	53                   	push   ebx
c001b3ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3af:	58                   	pop    eax
c001b3b0:	5a                   	pop    edx
c001b3b1:	6a 00                	push   0x0
c001b3b3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3b6:	e8 1e 24 00 00       	call   c001d7d9 <Thr::loadDLL(char const*, bool)>
c001b3bb:	83 c4 10             	add    esp,0x10
c001b3be:	89 c1                	mov    ecx,eax
c001b3c0:	31 d2                	xor    edx,edx
c001b3c2:	b8 04 00 00 00       	mov    eax,0x4
c001b3c7:	85 c9                	test   ecx,ecx
c001b3c9:	74 15                	je     c001b3e0 <Sys::loadDLL(regs*)+0xa4>
c001b3cb:	53                   	push   ebx
c001b3cc:	53                   	push   ebx
c001b3cd:	ff 35 68 f2 02 c0    	push   DWORD PTR ds:0xc002f268
c001b3d3:	51                   	push   ecx
c001b3d4:	e8 2b 26 00 00       	call   c001da04 <Thr::executeDLL(unsigned long, void*)>
c001b3d9:	83 c4 10             	add    esp,0x10
c001b3dc:	31 c0                	xor    eax,eax
c001b3de:	31 d2                	xor    edx,edx
c001b3e0:	59                   	pop    ecx
c001b3e1:	5b                   	pop    ebx
c001b3e2:	5e                   	pop    esi
c001b3e3:	c3                   	ret    

c001b3e4 <Sys::read(regs*)>:
c001b3e4:	57                   	push   edi
c001b3e5:	56                   	push   esi
c001b3e6:	53                   	push   ebx
c001b3e7:	83 ec 10             	sub    esp,0x10
c001b3ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b3ee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3f1:	83 f8 02             	cmp    eax,0x2
c001b3f4:	77 10                	ja     c001b406 <Sys::read(regs*)+0x22>
c001b3f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3fe:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b404:	eb 0e                	jmp    c001b414 <Sys::read(regs*)+0x30>
c001b406:	83 ec 0c             	sub    esp,0xc
c001b409:	50                   	push   eax
c001b40a:	e8 7a 60 ff ff       	call   c0011489 <getFromFileDescriptor(int)>
c001b40f:	83 c4 10             	add    esp,0x10
c001b412:	89 c1                	mov    ecx,eax
c001b414:	83 c8 ff             	or     eax,0xffffffff
c001b417:	85 c9                	test   ecx,ecx
c001b419:	89 c2                	mov    edx,eax
c001b41b:	74 28                	je     c001b445 <Sys::read(regs*)+0x61>
c001b41d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b425:	31 ff                	xor    edi,edi
c001b427:	83 ec 0c             	sub    esp,0xc
c001b42a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b42c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b430:	52                   	push   edx
c001b431:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b434:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b437:	57                   	push   edi
c001b438:	56                   	push   esi
c001b439:	51                   	push   ecx
c001b43a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b43d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b441:	83 c4 20             	add    esp,0x20
c001b444:	99                   	cdq    
c001b445:	83 c4 10             	add    esp,0x10
c001b448:	5b                   	pop    ebx
c001b449:	5e                   	pop    esi
c001b44a:	5f                   	pop    edi
c001b44b:	c3                   	ret    

c001b44c <Sys::sbrk(regs*)>:
c001b44c:	56                   	push   esi
c001b44d:	53                   	push   ebx
c001b44e:	50                   	push   eax
c001b44f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b454:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b458:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b45b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b45e:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b464:	85 db                	test   ebx,ebx
c001b466:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b469:	74 02                	je     c001b46d <Sys::sbrk(regs*)+0x21>
c001b46b:	79 06                	jns    c001b473 <Sys::sbrk(regs*)+0x27>
c001b46d:	89 f0                	mov    eax,esi
c001b46f:	31 d2                	xor    edx,edx
c001b471:	eb 2a                	jmp    c001b49d <Sys::sbrk(regs*)+0x51>
c001b473:	83 c8 ff             	or     eax,0xffffffff
c001b476:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b47c:	89 c2                	mov    edx,eax
c001b47e:	77 1d                	ja     c001b49d <Sys::sbrk(regs*)+0x51>
c001b480:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b486:	50                   	push   eax
c001b487:	c1 ea 0c             	shr    edx,0xc
c001b48a:	68 07 0c 00 00       	push   0xc07
c001b48f:	52                   	push   edx
c001b490:	51                   	push   ecx
c001b491:	e8 82 6a ff ff       	call   c0011f18 <VAS::allocatePages(int, int)>
c001b496:	89 f0                	mov    eax,esi
c001b498:	31 d2                	xor    edx,edx
c001b49a:	83 c4 10             	add    esp,0x10
c001b49d:	59                   	pop    ecx
c001b49e:	5b                   	pop    ebx
c001b49f:	5e                   	pop    esi
c001b4a0:	c3                   	ret    

c001b4a1 <Sys::setCwd(regs*)>:
c001b4a1:	83 ec 14             	sub    esp,0x14
c001b4a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4b0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4b3:	e8 fd 7d ff ff       	call   c00132b5 <Fs::setcwd(Process*, char*)>
c001b4b8:	83 c4 1c             	add    esp,0x1c
c001b4bb:	99                   	cdq    
c001b4bc:	c3                   	ret    

c001b4bd <Sys::setTime(regs*)>:
c001b4bd:	55                   	push   ebp
c001b4be:	31 d2                	xor    edx,edx
c001b4c0:	57                   	push   edi
c001b4c1:	bf 18 00 00 00       	mov    edi,0x18
c001b4c6:	56                   	push   esi
c001b4c7:	53                   	push   ebx
c001b4c8:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b4cd:	83 ec 30             	sub    esp,0x30
c001b4d0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b4d4:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b4d7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4da:	f7 f3                	div    ebx
c001b4dc:	89 d6                	mov    esi,edx
c001b4de:	31 d2                	xor    edx,edx
c001b4e0:	f7 f3                	div    ebx
c001b4e2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b4e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b4e9:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b4ee:	31 d2                	xor    edx,edx
c001b4f0:	f7 f3                	div    ebx
c001b4f2:	31 d2                	xor    edx,edx
c001b4f4:	bb 0c 00 00 00       	mov    ebx,0xc
c001b4f9:	f7 f7                	div    edi
c001b4fb:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b4fe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b502:	0f b7 cd             	movzx  ecx,bp
c001b505:	56                   	push   esi
c001b506:	89 c7                	mov    edi,eax
c001b508:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b50c:	c1 e6 10             	shl    esi,0x10
c001b50f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b513:	83 e7 1f             	and    edi,0x1f
c001b516:	51                   	push   ecx
c001b517:	47                   	inc    edi
c001b518:	c1 e8 05             	shr    eax,0x5
c001b51b:	31 d2                	xor    edx,edx
c001b51d:	f7 f3                	div    ebx
c001b51f:	31 db                	xor    ebx,ebx
c001b521:	52                   	push   edx
c001b522:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b526:	57                   	push   edi
c001b527:	68 15 c9 02 c0       	push   0xc002c915
c001b52c:	e8 b4 74 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001b531:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b535:	89 f8                	mov    eax,edi
c001b537:	31 c9                	xor    ecx,ecx
c001b539:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b53d:	88 c1                	mov    cl,al
c001b53f:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b545:	88 d5                	mov    ch,dl
c001b547:	c1 e0 10             	shl    eax,0x10
c001b54a:	0f b7 d1             	movzx  edx,cx
c001b54d:	09 c2                	or     edx,eax
c001b54f:	89 d8                	mov    eax,ebx
c001b551:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b556:	09 f0                	or     eax,esi
c001b558:	89 c3                	mov    ebx,eax
c001b55a:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b55e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b562:	83 c4 18             	add    esp,0x18
c001b565:	53                   	push   ebx
c001b566:	52                   	push   edx
c001b567:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b56b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b56f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b573:	e8 5f 84 ff ff       	call   c00139d7 <datetimeToSeconds(datetime_t)>
c001b578:	83 c4 0c             	add    esp,0xc
c001b57b:	52                   	push   edx
c001b57c:	50                   	push   eax
c001b57d:	56                   	push   esi
c001b57e:	e8 db 85 ff ff       	call   c0013b5e <secondsToDatetime(unsigned long long)>
c001b583:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b587:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b58b:	51                   	push   ecx
c001b58c:	89 d6                	mov    esi,edx
c001b58e:	51                   	push   ecx
c001b58f:	c1 ee 10             	shr    esi,0x10
c001b592:	89 f3                	mov    ebx,esi
c001b594:	0f b6 f3             	movzx  esi,bl
c001b597:	56                   	push   esi
c001b598:	0f b6 f6             	movzx  esi,dh
c001b59b:	0f b6 d2             	movzx  edx,dl
c001b59e:	56                   	push   esi
c001b59f:	52                   	push   edx
c001b5a0:	89 c2                	mov    edx,eax
c001b5a2:	c1 ea 10             	shr    edx,0x10
c001b5a5:	52                   	push   edx
c001b5a6:	0f b6 d4             	movzx  edx,ah
c001b5a9:	0f b6 c0             	movzx  eax,al
c001b5ac:	52                   	push   edx
c001b5ad:	50                   	push   eax
c001b5ae:	68 31 c9 02 c0       	push   0xc002c931
c001b5b3:	e8 2d 74 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001b5b8:	83 c4 2c             	add    esp,0x2c
c001b5bb:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001b5c0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b5c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b5c8:	53                   	push   ebx
c001b5c9:	51                   	push   ecx
c001b5ca:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b5d0:	e8 29 85 ff ff       	call   c0013afe <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b5d5:	83 f0 01             	xor    eax,0x1
c001b5d8:	31 d2                	xor    edx,edx
c001b5da:	0f b6 c0             	movzx  eax,al
c001b5dd:	83 c4 3c             	add    esp,0x3c
c001b5e0:	5b                   	pop    ebx
c001b5e1:	5e                   	pop    esi
c001b5e2:	5f                   	pop    edi
c001b5e3:	5d                   	pop    ebp
c001b5e4:	c3                   	ret    

c001b5e5 <Sys::timezone(regs*)>:
c001b5e5:	53                   	push   ebx
c001b5e6:	83 ec 08             	sub    esp,0x8
c001b5e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5ed:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b5f1:	75 17                	jne    c001b60a <Sys::timezone(regs*)+0x25>
c001b5f3:	83 ec 0c             	sub    esp,0xc
c001b5f6:	68 4d c9 02 c0       	push   0xc002c94d
c001b5fb:	e8 e5 73 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001b600:	83 c8 ff             	or     eax,0xffffffff
c001b603:	83 c4 10             	add    esp,0x10
c001b606:	89 c2                	mov    edx,eax
c001b608:	eb 20                	jmp    c001b62a <Sys::timezone(regs*)+0x45>
c001b60a:	83 ec 0c             	sub    esp,0xc
c001b60d:	68 85 c9 02 c0       	push   0xc002c985
c001b612:	e8 ce 73 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001b617:	58                   	pop    eax
c001b618:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b61b:	e8 40 82 ff ff       	call   c0013860 <User::loadClockSettings(int)>
c001b620:	83 c4 10             	add    esp,0x10
c001b623:	b8 01 00 00 00       	mov    eax,0x1
c001b628:	31 d2                	xor    edx,edx
c001b62a:	83 c4 08             	add    esp,0x8
c001b62d:	5b                   	pop    ebx
c001b62e:	c3                   	ret    

c001b62f <Sys::write(regs*)>:
c001b62f:	57                   	push   edi
c001b630:	56                   	push   esi
c001b631:	53                   	push   ebx
c001b632:	83 ec 10             	sub    esp,0x10
c001b635:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b639:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b63c:	83 f8 02             	cmp    eax,0x2
c001b63f:	77 10                	ja     c001b651 <Sys::write(regs*)+0x22>
c001b641:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b646:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b649:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b64f:	eb 0e                	jmp    c001b65f <Sys::write(regs*)+0x30>
c001b651:	83 ec 0c             	sub    esp,0xc
c001b654:	50                   	push   eax
c001b655:	e8 2f 5e ff ff       	call   c0011489 <getFromFileDescriptor(int)>
c001b65a:	83 c4 10             	add    esp,0x10
c001b65d:	89 c1                	mov    ecx,eax
c001b65f:	83 c8 ff             	or     eax,0xffffffff
c001b662:	85 c9                	test   ecx,ecx
c001b664:	89 c2                	mov    edx,eax
c001b666:	74 28                	je     c001b690 <Sys::write(regs*)+0x61>
c001b668:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b670:	31 ff                	xor    edi,edi
c001b672:	83 ec 0c             	sub    esp,0xc
c001b675:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b677:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b67b:	52                   	push   edx
c001b67c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b67f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b682:	57                   	push   edi
c001b683:	56                   	push   esi
c001b684:	51                   	push   ecx
c001b685:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b688:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b68c:	83 c4 20             	add    esp,0x20
c001b68f:	99                   	cdq    
c001b690:	83 c4 10             	add    esp,0x10
c001b693:	5b                   	pop    ebx
c001b694:	5e                   	pop    esi
c001b695:	5f                   	pop    edi
c001b696:	c3                   	ret    

c001b697 <Sys::wsbe(regs*)>:
c001b697:	57                   	push   edi
c001b698:	b9 0b 00 00 00       	mov    ecx,0xb
c001b69d:	56                   	push   esi
c001b69e:	be c4 c9 02 c0       	mov    esi,0xc002c9c4
c001b6a3:	53                   	push   ebx
c001b6a4:	83 ec 30             	sub    esp,0x30
c001b6a7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6ab:	fc                   	cld    
c001b6ac:	83 ec 0c             	sub    esp,0xc
c001b6af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6b1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b6b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6bd:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b6c3:	8b 06                	mov    eax,DWORD PTR [esi]
c001b6c5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b6c8:	57                   	push   edi
c001b6c9:	e8 9e 50 fe ff       	call   c000076c <strlen>
c001b6ce:	5a                   	pop    edx
c001b6cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b6d3:	52                   	push   edx
c001b6d4:	31 d2                	xor    edx,edx
c001b6d6:	57                   	push   edi
c001b6d7:	52                   	push   edx
c001b6d8:	50                   	push   eax
c001b6d9:	56                   	push   esi
c001b6da:	ff d3                	call   ebx
c001b6dc:	83 c4 14             	add    esp,0x14
c001b6df:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b6e3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6e6:	e8 00 34 00 00       	call   c001eaeb <terminateTask(int)>
c001b6eb:	83 c4 40             	add    esp,0x40
c001b6ee:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b6f3:	5b                   	pop    ebx
c001b6f4:	31 d2                	xor    edx,edx
c001b6f6:	5e                   	pop    esi
c001b6f7:	5f                   	pop    edi
c001b6f8:	c3                   	ret    

c001b6f9 <Sys::yield(regs*)>:
c001b6f9:	57                   	push   edi
c001b6fa:	56                   	push   esi
c001b6fb:	53                   	push   ebx
c001b6fc:	fa                   	cli    
c001b6fd:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001b703:	e8 b0 2a 00 00       	call   c001e1b8 <schedule()>
c001b708:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001b70d:	48                   	dec    eax
c001b70e:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001b713:	75 01                	jne    c001b716 <Sys::yield(regs*)+0x1d>
c001b715:	fb                   	sti    
c001b716:	8b 35 d0 f8 02 c0    	mov    esi,DWORD PTR ds:0xc002f8d0
c001b71c:	8b 3d d4 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f8d4
c001b722:	89 f0                	mov    eax,esi
c001b724:	89 fb                	mov    ebx,edi
c001b726:	89 f1                	mov    ecx,esi
c001b728:	c1 e0 07             	shl    eax,0x7
c001b72b:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b72f:	25 80 30 0f 00       	and    eax,0xf3080
c001b734:	c1 eb 17             	shr    ebx,0x17
c001b737:	31 c8                	xor    eax,ecx
c001b739:	89 da                	mov    edx,ebx
c001b73b:	5b                   	pop    ebx
c001b73c:	5e                   	pop    esi
c001b73d:	5f                   	pop    edi
c001b73e:	c3                   	ret    

c001b73f <sysCallSeekDir(regs*)>:
c001b73f:	31 c0                	xor    eax,eax
c001b741:	31 d2                	xor    edx,edx
c001b743:	c3                   	ret    

c001b744 <sysCallTellDir(regs*)>:
c001b744:	31 c0                	xor    eax,eax
c001b746:	31 d2                	xor    edx,edx
c001b748:	c3                   	ret    

c001b749 <sysCallVerify(regs*)>:
c001b749:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b74d:	31 d2                	xor    edx,edx
c001b74f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b752:	c3                   	ret    

c001b753 <sysFormatDisk(regs*)>:
c001b753:	56                   	push   esi
c001b754:	53                   	push   ebx
c001b755:	53                   	push   ebx
c001b756:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b75a:	8b 1d d4 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f3d4
c001b760:	eb 25                	jmp    c001b787 <sysFormatDisk(regs*)+0x34>
c001b762:	83 ec 0c             	sub    esp,0xc
c001b765:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b768:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b76a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b76d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b770:	50                   	push   eax
c001b771:	ff 34 85 60 f8 02 c0 	push   DWORD PTR [eax*4-0x3ffd07a0]
c001b778:	53                   	push   ebx
c001b779:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b77c:	83 c4 20             	add    esp,0x20
c001b77f:	83 f8 08             	cmp    eax,0x8
c001b782:	75 12                	jne    c001b796 <sysFormatDisk(regs*)+0x43>
c001b784:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b787:	85 db                	test   ebx,ebx
c001b789:	75 d7                	jne    c001b762 <sysFormatDisk(regs*)+0xf>
c001b78b:	59                   	pop    ecx
c001b78c:	b8 03 00 00 00       	mov    eax,0x3
c001b791:	31 d2                	xor    edx,edx
c001b793:	5b                   	pop    ebx
c001b794:	5e                   	pop    esi
c001b795:	c3                   	ret    
c001b796:	85 c0                	test   eax,eax
c001b798:	74 1b                	je     c001b7b5 <sysFormatDisk(regs*)+0x62>
c001b79a:	83 f8 09             	cmp    eax,0x9
c001b79d:	74 0b                	je     c001b7aa <sysFormatDisk(regs*)+0x57>
c001b79f:	59                   	pop    ecx
c001b7a0:	b8 02 00 00 00       	mov    eax,0x2
c001b7a5:	31 d2                	xor    edx,edx
c001b7a7:	5b                   	pop    ebx
c001b7a8:	5e                   	pop    esi
c001b7a9:	c3                   	ret    
c001b7aa:	59                   	pop    ecx
c001b7ab:	b8 01 00 00 00       	mov    eax,0x1
c001b7b0:	31 d2                	xor    edx,edx
c001b7b2:	5b                   	pop    ebx
c001b7b3:	5e                   	pop    esi
c001b7b4:	c3                   	ret    
c001b7b5:	59                   	pop    ecx
c001b7b6:	31 c0                	xor    eax,eax
c001b7b8:	31 d2                	xor    edx,edx
c001b7ba:	5b                   	pop    ebx
c001b7bb:	5e                   	pop    esi
c001b7bc:	c3                   	ret    

c001b7bd <sysSetDiskVolumeLabel(regs*)>:
c001b7bd:	56                   	push   esi
c001b7be:	53                   	push   ebx
c001b7bf:	53                   	push   ebx
c001b7c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7c4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b7c7:	83 f8 19             	cmp    eax,0x19
c001b7ca:	77 29                	ja     c001b7f5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7cc:	8b 0c 85 60 f8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd07a0]
c001b7d3:	85 c9                	test   ecx,ecx
c001b7d5:	74 1e                	je     c001b7f5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7d7:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b7da:	85 d2                	test   edx,edx
c001b7dc:	74 17                	je     c001b7f5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b7de:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b7e4:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b7e6:	52                   	push   edx
c001b7e7:	50                   	push   eax
c001b7e8:	51                   	push   ecx
c001b7e9:	53                   	push   ebx
c001b7ea:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b7ed:	83 c4 10             	add    esp,0x10
c001b7f0:	99                   	cdq    
c001b7f1:	59                   	pop    ecx
c001b7f2:	5b                   	pop    ebx
c001b7f3:	5e                   	pop    esi
c001b7f4:	c3                   	ret    
c001b7f5:	59                   	pop    ecx
c001b7f6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b7fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b800:	5b                   	pop    ebx
c001b801:	5e                   	pop    esi
c001b802:	c3                   	ret    

c001b803 <sysGetDiskVolumeLabel(regs*)>:
c001b803:	57                   	push   edi
c001b804:	56                   	push   esi
c001b805:	53                   	push   ebx
c001b806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b80d:	83 fa 19             	cmp    edx,0x19
c001b810:	77 34                	ja     c001b846 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b812:	8b 0c 95 60 f8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd07a0]
c001b819:	85 c9                	test   ecx,ecx
c001b81b:	74 29                	je     c001b846 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b81d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b820:	85 db                	test   ebx,ebx
c001b822:	74 22                	je     c001b846 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b824:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b827:	85 c0                	test   eax,eax
c001b829:	74 1b                	je     c001b846 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b82b:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b831:	83 ec 0c             	sub    esp,0xc
c001b834:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b836:	50                   	push   eax
c001b837:	53                   	push   ebx
c001b838:	52                   	push   edx
c001b839:	51                   	push   ecx
c001b83a:	56                   	push   esi
c001b83b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b83e:	83 c4 20             	add    esp,0x20
c001b841:	99                   	cdq    
c001b842:	5b                   	pop    ebx
c001b843:	5e                   	pop    esi
c001b844:	5f                   	pop    edi
c001b845:	c3                   	ret    
c001b846:	5b                   	pop    ebx
c001b847:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b84c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b851:	5e                   	pop    esi
c001b852:	5f                   	pop    edi
c001b853:	c3                   	ret    

c001b854 <sysShutdown(regs*)>:
c001b854:	83 ec 0c             	sub    esp,0xc
c001b857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b85e:	85 c0                	test   eax,eax
c001b860:	74 18                	je     c001b87a <sysShutdown(regs*)+0x26>
c001b862:	83 f8 01             	cmp    eax,0x1
c001b865:	74 38                	je     c001b89f <sysShutdown(regs*)+0x4b>
c001b867:	83 f8 02             	cmp    eax,0x2
c001b86a:	74 24                	je     c001b890 <sysShutdown(regs*)+0x3c>
c001b86c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b871:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b876:	83 c4 0c             	add    esp,0xc
c001b879:	c3                   	ret    
c001b87a:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001b87f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b881:	6a 00                	push   0x0
c001b883:	6a 00                	push   0x0
c001b885:	6a 00                	push   0x0
c001b887:	50                   	push   eax
c001b888:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b88b:	83 c4 10             	add    esp,0x10
c001b88e:	eb dc                	jmp    c001b86c <sysShutdown(regs*)+0x18>
c001b890:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001b895:	8b 10                	mov    edx,DWORD PTR [eax]
c001b897:	6a 00                	push   0x0
c001b899:	6a 00                	push   0x0
c001b89b:	6a 01                	push   0x1
c001b89d:	eb e8                	jmp    c001b887 <sysShutdown(regs*)+0x33>
c001b89f:	a1 00 19 03 c0       	mov    eax,ds:0xc0031900
c001b8a4:	85 c0                	test   eax,eax
c001b8a6:	74 02                	je     c001b8aa <sysShutdown(regs*)+0x56>
c001b8a8:	ff d0                	call   eax
c001b8aa:	31 c0                	xor    eax,eax
c001b8ac:	31 d2                	xor    edx,edx
c001b8ae:	83 c4 0c             	add    esp,0xc
c001b8b1:	c3                   	ret    

c001b8b2 <sysCallRealpath(regs*)>:
c001b8b2:	83 ec 0c             	sub    esp,0xc
c001b8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b8bc:	85 d2                	test   edx,edx
c001b8be:	74 07                	je     c001b8c7 <sysCallRealpath(regs*)+0x15>
c001b8c0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b8c3:	85 c0                	test   eax,eax
c001b8c5:	75 0b                	jne    c001b8d2 <sysCallRealpath(regs*)+0x20>
c001b8c7:	b8 01 00 00 00       	mov    eax,0x1
c001b8cc:	31 d2                	xor    edx,edx
c001b8ce:	83 c4 0c             	add    esp,0xc
c001b8d1:	c3                   	ret    
c001b8d2:	51                   	push   ecx
c001b8d3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b8d9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b8dc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b8e2:	51                   	push   ecx
c001b8e3:	52                   	push   edx
c001b8e4:	50                   	push   eax
c001b8e5:	e8 b0 74 ff ff       	call   c0012d9a <Fs::standardiseFiles(char*, char const*, char const*)>
c001b8ea:	83 c4 10             	add    esp,0x10
c001b8ed:	31 c0                	xor    eax,eax
c001b8ef:	31 d2                	xor    edx,edx
c001b8f1:	83 c4 0c             	add    esp,0xc
c001b8f4:	c3                   	ret    

c001b8f5 <sysCallGetArgc(regs*)>:
c001b8f5:	83 ec 14             	sub    esp,0x14
c001b8f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b900:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b906:	68 f0 c9 02 c0       	push   0xc002c9f0
c001b90b:	e8 d5 70 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001b910:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b915:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b918:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b91e:	83 c4 1c             	add    esp,0x1c
c001b921:	99                   	cdq    
c001b922:	c3                   	ret    

c001b923 <sysCallReadDir(regs*)>:
c001b923:	53                   	push   ebx
c001b924:	83 ec 18             	sub    esp,0x18
c001b927:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b92b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b92e:	83 f8 02             	cmp    eax,0x2
c001b931:	76 53                	jbe    c001b986 <sysCallReadDir(regs*)+0x63>
c001b933:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b936:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b93c:	77 4f                	ja     c001b98d <sysCallReadDir(regs*)+0x6a>
c001b93e:	83 ec 0c             	sub    esp,0xc
c001b941:	50                   	push   eax
c001b942:	e8 42 5b ff ff       	call   c0011489 <getFromFileDescriptor(int)>
c001b947:	83 c4 10             	add    esp,0x10
c001b94a:	85 c0                	test   eax,eax
c001b94c:	74 50                	je     c001b99e <sysCallReadDir(regs*)+0x7b>
c001b94e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b956:	83 ec 0c             	sub    esp,0xc
c001b959:	8b 10                	mov    edx,DWORD PTR [eax]
c001b95b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b95f:	51                   	push   ecx
c001b960:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b963:	6a 00                	push   0x0
c001b965:	68 10 01 00 00       	push   0x110
c001b96a:	50                   	push   eax
c001b96b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b96e:	83 c4 20             	add    esp,0x20
c001b971:	85 c0                	test   eax,eax
c001b973:	74 38                	je     c001b9ad <sysCallReadDir(regs*)+0x8a>
c001b975:	83 f8 07             	cmp    eax,0x7
c001b978:	74 0c                	je     c001b986 <sysCallReadDir(regs*)+0x63>
c001b97a:	b8 02 00 00 00       	mov    eax,0x2
c001b97f:	31 d2                	xor    edx,edx
c001b981:	83 c4 18             	add    esp,0x18
c001b984:	5b                   	pop    ebx
c001b985:	c3                   	ret    
c001b986:	b8 01 00 00 00       	mov    eax,0x1
c001b98b:	eb f2                	jmp    c001b97f <sysCallReadDir(regs*)+0x5c>
c001b98d:	83 ec 08             	sub    esp,0x8
c001b990:	52                   	push   edx
c001b991:	68 14 cb 02 c0       	push   0xc002cb14
c001b996:	e8 4a 70 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001b99b:	83 c4 10             	add    esp,0x10
c001b99e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9a8:	83 c4 18             	add    esp,0x18
c001b9ab:	5b                   	pop    ebx
c001b9ac:	c3                   	ret    
c001b9ad:	31 c0                	xor    eax,eax
c001b9af:	eb ce                	jmp    c001b97f <sysCallReadDir(regs*)+0x5c>

c001b9b1 <sysCallIsATTY(regs*)>:
c001b9b1:	83 ec 0c             	sub    esp,0xc
c001b9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b9bb:	83 f8 02             	cmp    eax,0x2
c001b9be:	76 07                	jbe    c001b9c7 <sysCallIsATTY(regs*)+0x16>
c001b9c0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b9c5:	75 26                	jne    c001b9ed <sysCallIsATTY(regs*)+0x3c>
c001b9c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b9cf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b9d5:	85 c0                	test   eax,eax
c001b9d7:	74 24                	je     c001b9fd <sysCallIsATTY(regs*)+0x4c>
c001b9d9:	83 ec 0c             	sub    esp,0xc
c001b9dc:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9de:	50                   	push   eax
c001b9df:	ff 12                	call   DWORD PTR [edx]
c001b9e1:	31 d2                	xor    edx,edx
c001b9e3:	0f b6 c0             	movzx  eax,al
c001b9e6:	83 c4 10             	add    esp,0x10
c001b9e9:	83 c4 0c             	add    esp,0xc
c001b9ec:	c3                   	ret    
c001b9ed:	83 ec 0c             	sub    esp,0xc
c001b9f0:	50                   	push   eax
c001b9f1:	e8 93 5a ff ff       	call   c0011489 <getFromFileDescriptor(int)>
c001b9f6:	83 c4 10             	add    esp,0x10
c001b9f9:	85 c0                	test   eax,eax
c001b9fb:	75 dc                	jne    c001b9d9 <sysCallIsATTY(regs*)+0x28>
c001b9fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba02:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba07:	83 c4 0c             	add    esp,0xc
c001ba0a:	c3                   	ret    

c001ba0b <sysCallSeek(regs*)>:
c001ba0b:	53                   	push   ebx
c001ba0c:	83 ec 08             	sub    esp,0x8
c001ba0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba13:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba16:	83 f8 02             	cmp    eax,0x2
c001ba19:	76 4a                	jbe    c001ba65 <sysCallSeek(regs*)+0x5a>
c001ba1b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba20:	77 32                	ja     c001ba54 <sysCallSeek(regs*)+0x49>
c001ba22:	83 ec 0c             	sub    esp,0xc
c001ba25:	50                   	push   eax
c001ba26:	e8 5e 5a ff ff       	call   c0011489 <getFromFileDescriptor(int)>
c001ba2b:	83 c4 0c             	add    esp,0xc
c001ba2e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba31:	31 db                	xor    ebx,ebx
c001ba33:	53                   	push   ebx
c001ba34:	51                   	push   ecx
c001ba35:	50                   	push   eax
c001ba36:	e8 2b 76 ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001ba3b:	83 c4 10             	add    esp,0x10
c001ba3e:	85 c0                	test   eax,eax
c001ba40:	0f 95 c0             	setne  al
c001ba43:	31 d2                	xor    edx,edx
c001ba45:	0f b6 c0             	movzx  eax,al
c001ba48:	f7 d8                	neg    eax
c001ba4a:	83 d2 00             	adc    edx,0x0
c001ba4d:	83 c4 08             	add    esp,0x8
c001ba50:	f7 da                	neg    edx
c001ba52:	5b                   	pop    ebx
c001ba53:	c3                   	ret    
c001ba54:	83 ec 08             	sub    esp,0x8
c001ba57:	50                   	push   eax
c001ba58:	68 fb c9 02 c0       	push   0xc002c9fb
c001ba5d:	e8 83 6f ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001ba62:	83 c4 10             	add    esp,0x10
c001ba65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba6f:	83 c4 08             	add    esp,0x8
c001ba72:	5b                   	pop    ebx
c001ba73:	c3                   	ret    

c001ba74 <sysCallTell(regs*)>:
c001ba74:	53                   	push   ebx
c001ba75:	83 ec 08             	sub    esp,0x8
c001ba78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba7f:	83 f8 02             	cmp    eax,0x2
c001ba82:	76 5e                	jbe    c001bae2 <sysCallTell(regs*)+0x6e>
c001ba84:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba89:	77 2d                	ja     c001bab8 <sysCallTell(regs*)+0x44>
c001ba8b:	83 ec 0c             	sub    esp,0xc
c001ba8e:	50                   	push   eax
c001ba8f:	e8 f5 59 ff ff       	call   c0011489 <getFromFileDescriptor(int)>
c001ba94:	5a                   	pop    edx
c001ba95:	59                   	pop    ecx
c001ba96:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba99:	50                   	push   eax
c001ba9a:	e8 1d 76 ff ff       	call   c00130bc <File::tell(unsigned long long*)>
c001ba9f:	83 c4 10             	add    esp,0x10
c001baa2:	85 c0                	test   eax,eax
c001baa4:	0f 95 c0             	setne  al
c001baa7:	31 d2                	xor    edx,edx
c001baa9:	0f b6 c0             	movzx  eax,al
c001baac:	f7 d8                	neg    eax
c001baae:	83 d2 00             	adc    edx,0x0
c001bab1:	83 c4 08             	add    esp,0x8
c001bab4:	f7 da                	neg    edx
c001bab6:	5b                   	pop    ebx
c001bab7:	c3                   	ret    
c001bab8:	83 ec 08             	sub    esp,0x8
c001babb:	50                   	push   eax
c001babc:	68 15 ca 02 c0       	push   0xc002ca15
c001bac1:	e8 1f 6f ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001bac6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bac9:	83 c4 10             	add    esp,0x10
c001bacc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bad2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bad9:	31 d2                	xor    edx,edx
c001badb:	31 c0                	xor    eax,eax
c001badd:	83 c4 08             	add    esp,0x8
c001bae0:	5b                   	pop    ebx
c001bae1:	c3                   	ret    
c001bae2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bae7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001baec:	83 c4 08             	add    esp,0x8
c001baef:	5b                   	pop    ebx
c001baf0:	c3                   	ret    

c001baf1 <sysCallSize(regs*)>:
c001baf1:	53                   	push   ebx
c001baf2:	83 ec 18             	sub    esp,0x18
c001baf5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001baf9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bafc:	83 f8 02             	cmp    eax,0x2
c001baff:	76 64                	jbe    c001bb65 <sysCallSize(regs*)+0x74>
c001bb01:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb06:	77 33                	ja     c001bb3b <sysCallSize(regs*)+0x4a>
c001bb08:	83 ec 0c             	sub    esp,0xc
c001bb0b:	50                   	push   eax
c001bb0c:	e8 78 59 ff ff       	call   c0011489 <getFromFileDescriptor(int)>
c001bb11:	83 c4 0c             	add    esp,0xc
c001bb14:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb18:	52                   	push   edx
c001bb19:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb1c:	50                   	push   eax
c001bb1d:	e8 32 77 ff ff       	call   c0013254 <File::stat(unsigned long long*, bool*)>
c001bb22:	83 c4 10             	add    esp,0x10
c001bb25:	85 c0                	test   eax,eax
c001bb27:	0f 95 c0             	setne  al
c001bb2a:	31 d2                	xor    edx,edx
c001bb2c:	0f b6 c0             	movzx  eax,al
c001bb2f:	f7 d8                	neg    eax
c001bb31:	83 d2 00             	adc    edx,0x0
c001bb34:	83 c4 18             	add    esp,0x18
c001bb37:	f7 da                	neg    edx
c001bb39:	5b                   	pop    ebx
c001bb3a:	c3                   	ret    
c001bb3b:	83 ec 08             	sub    esp,0x8
c001bb3e:	50                   	push   eax
c001bb3f:	68 2f ca 02 c0       	push   0xc002ca2f
c001bb44:	e8 9c 6e ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001bb49:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb4c:	83 c4 10             	add    esp,0x10
c001bb4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb5c:	31 d2                	xor    edx,edx
c001bb5e:	31 c0                	xor    eax,eax
c001bb60:	83 c4 18             	add    esp,0x18
c001bb63:	5b                   	pop    ebx
c001bb64:	c3                   	ret    
c001bb65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb6f:	83 c4 18             	add    esp,0x18
c001bb72:	5b                   	pop    ebx
c001bb73:	c3                   	ret    

c001bb74 <sysCallSizeFromFilename(regs*)>:
c001bb74:	57                   	push   edi
c001bb75:	56                   	push   esi
c001bb76:	53                   	push   ebx
c001bb77:	83 ec 20             	sub    esp,0x20
c001bb7a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bb7e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bb81:	83 fb 02             	cmp    ebx,0x2
c001bb84:	0f 86 99 00 00 00    	jbe    c001bc23 <sysCallSizeFromFilename(regs*)+0xaf>
c001bb8a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bb90:	77 65                	ja     c001bbf7 <sysCallSizeFromFilename(regs*)+0x83>
c001bb92:	83 ec 0c             	sub    esp,0xc
c001bb95:	68 14 01 00 00       	push   0x114
c001bb9a:	e8 63 3d ff ff       	call   c000f902 <malloc>
c001bb9f:	83 c4 0c             	add    esp,0xc
c001bba2:	89 c6                	mov    esi,eax
c001bba4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bba9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbac:	53                   	push   ebx
c001bbad:	56                   	push   esi
c001bbae:	e8 91 73 ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001bbb3:	83 c4 0c             	add    esp,0xc
c001bbb6:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbba:	50                   	push   eax
c001bbbb:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bbbe:	56                   	push   esi
c001bbbf:	e8 90 76 ff ff       	call   c0013254 <File::stat(unsigned long long*, bool*)>
c001bbc4:	83 c4 10             	add    esp,0x10
c001bbc7:	85 f6                	test   esi,esi
c001bbc9:	74 14                	je     c001bbdf <sysCallSizeFromFilename(regs*)+0x6b>
c001bbcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbcf:	8b 16                	mov    edx,DWORD PTR [esi]
c001bbd1:	83 ec 0c             	sub    esp,0xc
c001bbd4:	56                   	push   esi
c001bbd5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bbd8:	83 c4 10             	add    esp,0x10
c001bbdb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbdf:	85 c0                	test   eax,eax
c001bbe1:	0f 95 c0             	setne  al
c001bbe4:	31 d2                	xor    edx,edx
c001bbe6:	0f b6 c0             	movzx  eax,al
c001bbe9:	f7 d8                	neg    eax
c001bbeb:	83 d2 00             	adc    edx,0x0
c001bbee:	83 c4 20             	add    esp,0x20
c001bbf1:	f7 da                	neg    edx
c001bbf3:	5b                   	pop    ebx
c001bbf4:	5e                   	pop    esi
c001bbf5:	5f                   	pop    edi
c001bbf6:	c3                   	ret    
c001bbf7:	83 ec 08             	sub    esp,0x8
c001bbfa:	53                   	push   ebx
c001bbfb:	68 2f ca 02 c0       	push   0xc002ca2f
c001bc00:	e8 e0 6d ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001bc05:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc08:	83 c4 10             	add    esp,0x10
c001bc0b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc18:	31 d2                	xor    edx,edx
c001bc1a:	83 c4 20             	add    esp,0x20
c001bc1d:	31 c0                	xor    eax,eax
c001bc1f:	5b                   	pop    ebx
c001bc20:	5e                   	pop    esi
c001bc21:	5f                   	pop    edi
c001bc22:	c3                   	ret    
c001bc23:	83 c4 20             	add    esp,0x20
c001bc26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc2b:	5b                   	pop    ebx
c001bc2c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc31:	5e                   	pop    esi
c001bc32:	5f                   	pop    edi
c001bc33:	c3                   	ret    

c001bc34 <sysCallClose(regs*)>:
c001bc34:	53                   	push   ebx
c001bc35:	83 ec 08             	sub    esp,0x8
c001bc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc3f:	83 f8 02             	cmp    eax,0x2
c001bc42:	76 50                	jbe    c001bc94 <sysCallClose(regs*)+0x60>
c001bc44:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc49:	74 58                	je     c001bca3 <sysCallClose(regs*)+0x6f>
c001bc4b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc50:	74 60                	je     c001bcb2 <sysCallClose(regs*)+0x7e>
c001bc52:	77 2f                	ja     c001bc83 <sysCallClose(regs*)+0x4f>
c001bc54:	83 ec 0c             	sub    esp,0xc
c001bc57:	50                   	push   eax
c001bc58:	e8 2c 58 ff ff       	call   c0011489 <getFromFileDescriptor(int)>
c001bc5d:	89 c3                	mov    ebx,eax
c001bc5f:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc62:	e8 9f 73 ff ff       	call   c0013006 <File::close()>
c001bc67:	83 c4 10             	add    esp,0x10
c001bc6a:	85 db                	test   ebx,ebx
c001bc6c:	74 0c                	je     c001bc7a <sysCallClose(regs*)+0x46>
c001bc6e:	83 ec 0c             	sub    esp,0xc
c001bc71:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc73:	53                   	push   ebx
c001bc74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc77:	83 c4 10             	add    esp,0x10
c001bc7a:	31 c0                	xor    eax,eax
c001bc7c:	31 d2                	xor    edx,edx
c001bc7e:	83 c4 08             	add    esp,0x8
c001bc81:	5b                   	pop    ebx
c001bc82:	c3                   	ret    
c001bc83:	83 ec 08             	sub    esp,0x8
c001bc86:	50                   	push   eax
c001bc87:	68 38 cb 02 c0       	push   0xc002cb38
c001bc8c:	e8 54 6d ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001bc91:	83 c4 10             	add    esp,0x10
c001bc94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc99:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc9e:	83 c4 08             	add    esp,0x8
c001bca1:	5b                   	pop    ebx
c001bca2:	c3                   	ret    
c001bca3:	83 ec 0c             	sub    esp,0xc
c001bca6:	68 4a ca 02 c0       	push   0xc002ca4a
c001bcab:	e8 35 6d ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001bcb0:	eb c5                	jmp    c001bc77 <sysCallClose(regs*)+0x43>
c001bcb2:	83 ec 0c             	sub    esp,0xc
c001bcb5:	68 58 ca 02 c0       	push   0xc002ca58
c001bcba:	eb ef                	jmp    c001bcab <sysCallClose(regs*)+0x77>

c001bcbc <sysCallOpenDir(regs*)>:
c001bcbc:	56                   	push   esi
c001bcbd:	53                   	push   ebx
c001bcbe:	53                   	push   ebx
c001bcbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bcc3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bcc6:	85 f6                	test   esi,esi
c001bcc8:	74 59                	je     c001bd23 <sysCallOpenDir(regs*)+0x67>
c001bcca:	83 ec 0c             	sub    esp,0xc
c001bccd:	68 14 01 00 00       	push   0x114
c001bcd2:	e8 2b 3c ff ff       	call   c000f902 <malloc>
c001bcd7:	83 c4 0c             	add    esp,0xc
c001bcda:	89 c6                	mov    esi,eax
c001bcdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bce1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bce4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bce7:	56                   	push   esi
c001bce8:	e8 03 77 ff ff       	call   c00133f0 <Directory::Directory(char const*, Process*)>
c001bced:	83 c4 10             	add    esp,0x10
c001bcf0:	85 f6                	test   esi,esi
c001bcf2:	74 2f                	je     c001bd23 <sysCallOpenDir(regs*)+0x67>
c001bcf4:	83 ec 0c             	sub    esp,0xc
c001bcf7:	56                   	push   esi
c001bcf8:	e8 57 77 ff ff       	call   c0013454 <Directory::open()>
c001bcfd:	83 c4 10             	add    esp,0x10
c001bd00:	85 c0                	test   eax,eax
c001bd02:	75 1f                	jne    c001bd23 <sysCallOpenDir(regs*)+0x67>
c001bd04:	83 ec 0c             	sub    esp,0xc
c001bd07:	56                   	push   esi
c001bd08:	e8 87 54 ff ff       	call   c0011194 <UnixFile::getFileDescriptor()>
c001bd0d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd10:	83 c4 10             	add    esp,0x10
c001bd13:	89 02                	mov    DWORD PTR [edx],eax
c001bd15:	c1 f8 1f             	sar    eax,0x1f
c001bd18:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd1b:	31 c0                	xor    eax,eax
c001bd1d:	59                   	pop    ecx
c001bd1e:	31 d2                	xor    edx,edx
c001bd20:	5b                   	pop    ebx
c001bd21:	5e                   	pop    esi
c001bd22:	c3                   	ret    
c001bd23:	59                   	pop    ecx
c001bd24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd29:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd2e:	5b                   	pop    ebx
c001bd2f:	5e                   	pop    esi
c001bd30:	c3                   	ret    

c001bd31 <sysCallCloseDir(regs*)>:
c001bd31:	53                   	push   ebx
c001bd32:	83 ec 08             	sub    esp,0x8
c001bd35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd3c:	83 f8 02             	cmp    eax,0x2
c001bd3f:	76 47                	jbe    c001bd88 <sysCallCloseDir(regs*)+0x57>
c001bd41:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd46:	77 2f                	ja     c001bd77 <sysCallCloseDir(regs*)+0x46>
c001bd48:	83 ec 0c             	sub    esp,0xc
c001bd4b:	50                   	push   eax
c001bd4c:	e8 38 57 ff ff       	call   c0011489 <getFromFileDescriptor(int)>
c001bd51:	89 c3                	mov    ebx,eax
c001bd53:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd56:	e8 55 77 ff ff       	call   c00134b0 <Directory::close()>
c001bd5b:	83 c4 10             	add    esp,0x10
c001bd5e:	85 db                	test   ebx,ebx
c001bd60:	74 0c                	je     c001bd6e <sysCallCloseDir(regs*)+0x3d>
c001bd62:	83 ec 0c             	sub    esp,0xc
c001bd65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd67:	53                   	push   ebx
c001bd68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bd6b:	83 c4 10             	add    esp,0x10
c001bd6e:	31 c0                	xor    eax,eax
c001bd70:	31 d2                	xor    edx,edx
c001bd72:	83 c4 08             	add    esp,0x8
c001bd75:	5b                   	pop    ebx
c001bd76:	c3                   	ret    
c001bd77:	83 ec 08             	sub    esp,0x8
c001bd7a:	50                   	push   eax
c001bd7b:	68 60 cb 02 c0       	push   0xc002cb60
c001bd80:	e8 60 6c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001bd85:	83 c4 10             	add    esp,0x10
c001bd88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd8d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd92:	83 c4 08             	add    esp,0x8
c001bd95:	5b                   	pop    ebx
c001bd96:	c3                   	ret    

c001bd97 <sysCallMakeDir(regs*)>:
c001bd97:	56                   	push   esi
c001bd98:	53                   	push   ebx
c001bd99:	83 ec 10             	sub    esp,0x10
c001bd9c:	68 14 01 00 00       	push   0x114
c001bda1:	e8 5c 3b ff ff       	call   c000f902 <malloc>
c001bda6:	83 c4 0c             	add    esp,0xc
c001bda9:	89 c3                	mov    ebx,eax
c001bdab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdb0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdb7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdba:	53                   	push   ebx
c001bdbb:	e8 30 76 ff ff       	call   c00133f0 <Directory::Directory(char const*, Process*)>
c001bdc0:	83 c4 10             	add    esp,0x10
c001bdc3:	85 db                	test   ebx,ebx
c001bdc5:	74 32                	je     c001bdf9 <sysCallMakeDir(regs*)+0x62>
c001bdc7:	83 ec 0c             	sub    esp,0xc
c001bdca:	53                   	push   ebx
c001bdcb:	e8 64 78 ff ff       	call   c0013634 <Directory::create()>
c001bdd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdd3:	89 c6                	mov    esi,eax
c001bdd5:	e8 d6 76 ff ff       	call   c00134b0 <Directory::close()>
c001bdda:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bddc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bddf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bde2:	83 c4 10             	add    esp,0x10
c001bde5:	31 c0                	xor    eax,eax
c001bde7:	59                   	pop    ecx
c001bde8:	85 f6                	test   esi,esi
c001bdea:	5b                   	pop    ebx
c001bdeb:	0f 95 c0             	setne  al
c001bdee:	5e                   	pop    esi
c001bdef:	31 d2                	xor    edx,edx
c001bdf1:	f7 d8                	neg    eax
c001bdf3:	83 d2 00             	adc    edx,0x0
c001bdf6:	f7 da                	neg    edx
c001bdf8:	c3                   	ret    
c001bdf9:	59                   	pop    ecx
c001bdfa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be04:	5b                   	pop    ebx
c001be05:	5e                   	pop    esi
c001be06:	c3                   	ret    

c001be07 <sysCallWait(regs*)>:
c001be07:	83 ec 10             	sub    esp,0x10
c001be0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be0e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be11:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be14:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be17:	e8 c8 25 00 00       	call   c001e3e4 <waitTask(int, int*, int)>
c001be1c:	83 c4 1c             	add    esp,0x1c
c001be1f:	99                   	cdq    
c001be20:	c3                   	ret    

c001be21 <sysCallNotImpl(regs*)>:
c001be21:	83 ec 18             	sub    esp,0x18
c001be24:	68 66 ca 02 c0       	push   0xc002ca66
c001be29:	e8 d7 e5 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001be2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be33:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be38:	83 c4 1c             	add    esp,0x1c
c001be3b:	c3                   	ret    

c001be3c <sysPanic(regs*)>:
c001be3c:	83 ec 18             	sub    esp,0x18
c001be3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be43:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be46:	e8 ba e5 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001be4b:	c7 04 24 80 ca 02 c0 	mov    DWORD PTR [esp],0xc002ca80
c001be52:	e8 ae e5 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001be57:	b8 01 00 00 00       	mov    eax,0x1
c001be5c:	31 d2                	xor    edx,edx
c001be5e:	83 c4 1c             	add    esp,0x1c
c001be61:	c3                   	ret    

c001be62 <sysCallRmdir(regs*)>:
c001be62:	56                   	push   esi
c001be63:	53                   	push   ebx
c001be64:	83 ec 20             	sub    esp,0x20
c001be67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001be6b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001be6e:	68 14 01 00 00       	push   0x114
c001be73:	e8 8a 3a ff ff       	call   c000f902 <malloc>
c001be78:	83 c4 0c             	add    esp,0xc
c001be7b:	89 c3                	mov    ebx,eax
c001be7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be82:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be85:	56                   	push   esi
c001be86:	53                   	push   ebx
c001be87:	e8 b8 70 ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001be8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be8f:	e8 8c 72 ff ff       	call   c0013120 <File::unlink()>
c001be94:	83 c4 10             	add    esp,0x10
c001be97:	85 db                	test   ebx,ebx
c001be99:	74 14                	je     c001beaf <sysCallRmdir(regs*)+0x4d>
c001be9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be9f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bea1:	83 ec 0c             	sub    esp,0xc
c001bea4:	53                   	push   ebx
c001bea5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bea8:	83 c4 10             	add    esp,0x10
c001beab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beaf:	85 c0                	test   eax,eax
c001beb1:	0f 95 c0             	setne  al
c001beb4:	31 d2                	xor    edx,edx
c001beb6:	0f b6 c0             	movzx  eax,al
c001beb9:	f7 d8                	neg    eax
c001bebb:	83 d2 00             	adc    edx,0x0
c001bebe:	83 c4 14             	add    esp,0x14
c001bec1:	f7 da                	neg    edx
c001bec3:	5b                   	pop    ebx
c001bec4:	5e                   	pop    esi
c001bec5:	c3                   	ret    

c001bec6 <sysCallUnlink(regs*)>:
c001bec6:	56                   	push   esi
c001bec7:	53                   	push   ebx
c001bec8:	83 ec 20             	sub    esp,0x20
c001becb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001becf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bed2:	68 14 01 00 00       	push   0x114
c001bed7:	e8 26 3a ff ff       	call   c000f902 <malloc>
c001bedc:	83 c4 0c             	add    esp,0xc
c001bedf:	89 c3                	mov    ebx,eax
c001bee1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bee6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bee9:	56                   	push   esi
c001beea:	53                   	push   ebx
c001beeb:	e8 54 70 ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001bef0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bef3:	e8 28 72 ff ff       	call   c0013120 <File::unlink()>
c001bef8:	83 c4 10             	add    esp,0x10
c001befb:	85 db                	test   ebx,ebx
c001befd:	74 14                	je     c001bf13 <sysCallUnlink(regs*)+0x4d>
c001beff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf03:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf05:	83 ec 0c             	sub    esp,0xc
c001bf08:	53                   	push   ebx
c001bf09:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf0c:	83 c4 10             	add    esp,0x10
c001bf0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf13:	85 c0                	test   eax,eax
c001bf15:	0f 95 c0             	setne  al
c001bf18:	31 d2                	xor    edx,edx
c001bf1a:	0f b6 c0             	movzx  eax,al
c001bf1d:	f7 d8                	neg    eax
c001bf1f:	83 d2 00             	adc    edx,0x0
c001bf22:	83 c4 14             	add    esp,0x14
c001bf25:	f7 da                	neg    edx
c001bf27:	5b                   	pop    ebx
c001bf28:	5e                   	pop    esi
c001bf29:	c3                   	ret    

c001bf2a <sysCallGetArgv(regs*)>:
c001bf2a:	83 ec 0c             	sub    esp,0xc
c001bf2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf31:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf34:	85 c0                	test   eax,eax
c001bf36:	78 2b                	js     c001bf63 <sysCallGetArgv(regs*)+0x39>
c001bf38:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf3e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf41:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf47:	7d 1a                	jge    c001bf63 <sysCallGetArgv(regs*)+0x39>
c001bf49:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf50:	85 c0                	test   eax,eax
c001bf52:	74 17                	je     c001bf6b <sysCallGetArgv(regs*)+0x41>
c001bf54:	83 ec 08             	sub    esp,0x8
c001bf57:	50                   	push   eax
c001bf58:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bf5b:	e8 ac 48 fe ff       	call   c000080c <strcpy>
c001bf60:	83 c4 10             	add    esp,0x10
c001bf63:	31 c0                	xor    eax,eax
c001bf65:	31 d2                	xor    edx,edx
c001bf67:	83 c4 0c             	add    esp,0xc
c001bf6a:	c3                   	ret    
c001bf6b:	b8 01 00 00 00       	mov    eax,0x1
c001bf70:	31 d2                	xor    edx,edx
c001bf72:	83 c4 0c             	add    esp,0xc
c001bf75:	c3                   	ret    

c001bf76 <sysCallTTYName(regs*)>:
c001bf76:	56                   	push   esi
c001bf77:	53                   	push   ebx
c001bf78:	53                   	push   ebx
c001bf79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf7d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bf80:	85 c0                	test   eax,eax
c001bf82:	74 5f                	je     c001bfe3 <sysCallTTYName(regs*)+0x6d>
c001bf84:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bf87:	83 f8 02             	cmp    eax,0x2
c001bf8a:	77 3e                	ja     c001bfca <sysCallTTYName(regs*)+0x54>
c001bf8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf94:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bf9a:	85 db                	test   ebx,ebx
c001bf9c:	74 45                	je     c001bfe3 <sysCallTTYName(regs*)+0x6d>
c001bf9e:	83 ec 0c             	sub    esp,0xc
c001bfa1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfa3:	53                   	push   ebx
c001bfa4:	ff 10                	call   DWORD PTR [eax]
c001bfa6:	83 c4 10             	add    esp,0x10
c001bfa9:	84 c0                	test   al,al
c001bfab:	74 41                	je     c001bfee <sysCallTTYName(regs*)+0x78>
c001bfad:	83 ec 08             	sub    esp,0x8
c001bfb0:	81 c3 82 00 00 00    	add    ebx,0x82
c001bfb6:	53                   	push   ebx
c001bfb7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfba:	e8 4d 48 fe ff       	call   c000080c <strcpy>
c001bfbf:	83 c4 10             	add    esp,0x10
c001bfc2:	31 c0                	xor    eax,eax
c001bfc4:	59                   	pop    ecx
c001bfc5:	31 d2                	xor    edx,edx
c001bfc7:	5b                   	pop    ebx
c001bfc8:	5e                   	pop    esi
c001bfc9:	c3                   	ret    
c001bfca:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bfcf:	74 bb                	je     c001bf8c <sysCallTTYName(regs*)+0x16>
c001bfd1:	83 ec 0c             	sub    esp,0xc
c001bfd4:	50                   	push   eax
c001bfd5:	e8 af 54 ff ff       	call   c0011489 <getFromFileDescriptor(int)>
c001bfda:	83 c4 10             	add    esp,0x10
c001bfdd:	89 c3                	mov    ebx,eax
c001bfdf:	85 db                	test   ebx,ebx
c001bfe1:	75 bb                	jne    c001bf9e <sysCallTTYName(regs*)+0x28>
c001bfe3:	59                   	pop    ecx
c001bfe4:	b8 01 00 00 00       	mov    eax,0x1
c001bfe9:	31 d2                	xor    edx,edx
c001bfeb:	5b                   	pop    ebx
c001bfec:	5e                   	pop    esi
c001bfed:	c3                   	ret    
c001bfee:	59                   	pop    ecx
c001bfef:	b8 02 00 00 00       	mov    eax,0x2
c001bff4:	31 d2                	xor    edx,edx
c001bff6:	5b                   	pop    ebx
c001bff7:	5e                   	pop    esi
c001bff8:	c3                   	ret    

c001bff9 <sysCallUSleep(regs*)>:
c001bff9:	83 ec 14             	sub    esp,0x14
c001bffc:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c001:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c005:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c00c:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c00f:	01 ca                	add    edx,ecx
c001c011:	52                   	push   edx
c001c012:	50                   	push   eax
c001c013:	e8 a3 24 00 00       	call   c001e4bb <nanoSleep(unsigned long long)>
c001c018:	31 c0                	xor    eax,eax
c001c01a:	31 d2                	xor    edx,edx
c001c01c:	83 c4 1c             	add    esp,0x1c
c001c01f:	c3                   	ret    

c001c020 <sysCallSpawn(regs*)>:
c001c020:	56                   	push   esi
c001c021:	53                   	push   ebx
c001c022:	50                   	push   eax
c001c023:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c027:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c02a:	85 c0                	test   eax,eax
c001c02c:	75 08                	jne    c001c036 <sysCallSpawn(regs*)+0x16>
c001c02e:	59                   	pop    ecx
c001c02f:	31 c0                	xor    eax,eax
c001c031:	31 d2                	xor    edx,edx
c001c033:	5b                   	pop    ebx
c001c034:	5e                   	pop    esi
c001c035:	c3                   	ret    
c001c036:	83 ec 08             	sub    esp,0x8
c001c039:	50                   	push   eax
c001c03a:	68 8f ca 02 c0       	push   0xc002ca8f
c001c03f:	e8 a1 69 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c044:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c04b:	e8 b2 38 ff ff       	call   c000f902 <malloc>
c001c050:	83 c4 10             	add    esp,0x10
c001c053:	89 c6                	mov    esi,eax
c001c055:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c058:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c05b:	85 c0                	test   eax,eax
c001c05d:	75 32                	jne    c001c091 <sysCallSpawn(regs*)+0x71>
c001c05f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c064:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c067:	52                   	push   edx
c001c068:	50                   	push   eax
c001c069:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c06c:	56                   	push   esi
c001c06d:	e8 26 1b 00 00       	call   c001db98 <Process::Process(char const*, Process*, char**)>
c001c072:	83 c4 10             	add    esp,0x10
c001c075:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c07c:	75 b0                	jne    c001c02e <sysCallSpawn(regs*)+0xe>
c001c07e:	83 ec 0c             	sub    esp,0xc
c001c081:	56                   	push   esi
c001c082:	e8 f3 1f 00 00       	call   c001e07a <Process::createUserThread()>
c001c087:	8b 06                	mov    eax,DWORD PTR [esi]
c001c089:	83 c4 10             	add    esp,0x10
c001c08c:	99                   	cdq    
c001c08d:	59                   	pop    ecx
c001c08e:	5b                   	pop    ebx
c001c08f:	5e                   	pop    esi
c001c090:	c3                   	ret    
c001c091:	31 c0                	xor    eax,eax
c001c093:	eb d2                	jmp    c001c067 <sysCallSpawn(regs*)+0x47>

c001c095 <sysCallGetEnv(regs*)>:
c001c095:	55                   	push   ebp
c001c096:	57                   	push   edi
c001c097:	56                   	push   esi
c001c098:	53                   	push   ebx
c001c099:	83 ec 28             	sub    esp,0x28
c001c09c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c0a0:	68 9d ca 02 c0       	push   0xc002ca9d
c001c0a5:	e8 3b 69 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c0aa:	5f                   	pop    edi
c001c0ab:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c0ae:	5d                   	pop    ebp
c001c0af:	53                   	push   ebx
c001c0b0:	68 ca cd 02 c0       	push   0xc002cdca
c001c0b5:	e8 2b 69 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c0ba:	58                   	pop    eax
c001c0bb:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c0be:	5a                   	pop    edx
c001c0bf:	57                   	push   edi
c001c0c0:	68 a6 ca 02 c0       	push   0xc002caa6
c001c0c5:	e8 1b 69 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c0ca:	59                   	pop    ecx
c001c0cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0d0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0d3:	e8 49 e2 ff ff       	call   c001a321 <Krnl::getProcessTotalEnvCount(Process*)>
c001c0d8:	5a                   	pop    edx
c001c0d9:	89 c5                	mov    ebp,eax
c001c0db:	59                   	pop    ecx
c001c0dc:	50                   	push   eax
c001c0dd:	68 b0 ca 02 c0       	push   0xc002cab0
c001c0e2:	e8 fe 68 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c0e7:	83 c4 10             	add    esp,0x10
c001c0ea:	39 ef                	cmp    edi,ebp
c001c0ec:	7c 15                	jl     c001c103 <sysCallGetEnv(regs*)+0x6e>
c001c0ee:	85 db                	test   ebx,ebx
c001c0f0:	75 0c                	jne    c001c0fe <sysCallGetEnv(regs*)+0x69>
c001c0f2:	83 c4 1c             	add    esp,0x1c
c001c0f5:	31 c0                	xor    eax,eax
c001c0f7:	5b                   	pop    ebx
c001c0f8:	31 d2                	xor    edx,edx
c001c0fa:	5e                   	pop    esi
c001c0fb:	5f                   	pop    edi
c001c0fc:	5d                   	pop    ebp
c001c0fd:	c3                   	ret    
c001c0fe:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c101:	eb ef                	jmp    c001c0f2 <sysCallGetEnv(regs*)+0x5d>
c001c103:	83 ec 0c             	sub    esp,0xc
c001c106:	68 bc ca 02 c0       	push   0xc002cabc
c001c10b:	e8 d5 68 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c110:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c114:	83 c4 0c             	add    esp,0xc
c001c117:	57                   	push   edi
c001c118:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c11e:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c121:	50                   	push   eax
c001c122:	e8 1a e2 ff ff       	call   c001a341 <Krnl::getProcessEnvPair(Process*, int)>
c001c127:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c12b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c12f:	68 7b ce 02 c0       	push   0xc002ce7b
c001c134:	e8 ac 68 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c139:	83 c4 10             	add    esp,0x10
c001c13c:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c13f:	85 f6                	test   esi,esi
c001c141:	75 47                	jne    c001c18a <sysCallGetEnv(regs*)+0xf5>
c001c143:	83 ec 0c             	sub    esp,0xc
c001c146:	55                   	push   ebp
c001c147:	e8 20 46 fe ff       	call   c000076c <strlen>
c001c14c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c14f:	89 c3                	mov    ebx,eax
c001c151:	e8 16 46 fe ff       	call   c000076c <strlen>
c001c156:	5a                   	pop    edx
c001c157:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c15b:	59                   	pop    ecx
c001c15c:	50                   	push   eax
c001c15d:	68 bf ca 02 c0       	push   0xc002cabf
c001c162:	e8 7e 68 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c167:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c16a:	e8 fd 45 fe ff       	call   c000076c <strlen>
c001c16f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c172:	89 c3                	mov    ebx,eax
c001c174:	e8 f3 45 fe ff       	call   c000076c <strlen>
c001c179:	83 c4 10             	add    esp,0x10
c001c17c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c180:	83 c4 1c             	add    esp,0x1c
c001c183:	31 d2                	xor    edx,edx
c001c185:	5b                   	pop    ebx
c001c186:	5e                   	pop    esi
c001c187:	5f                   	pop    edi
c001c188:	5d                   	pop    ebp
c001c189:	c3                   	ret    
c001c18a:	83 ec 0c             	sub    esp,0xc
c001c18d:	68 95 ce 02 c0       	push   0xc002ce95
c001c192:	e8 4e 68 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c197:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c19a:	58                   	pop    eax
c001c19b:	5a                   	pop    edx
c001c19c:	55                   	push   ebp
c001c19d:	53                   	push   ebx
c001c19e:	e8 69 46 fe ff       	call   c000080c <strcpy>
c001c1a3:	59                   	pop    ecx
c001c1a4:	5e                   	pop    esi
c001c1a5:	68 c9 ca 02 c0       	push   0xc002cac9
c001c1aa:	53                   	push   ebx
c001c1ab:	e8 9c 47 fe ff       	call   c000094c <strcat>
c001c1b0:	5d                   	pop    ebp
c001c1b1:	58                   	pop    eax
c001c1b2:	57                   	push   edi
c001c1b3:	53                   	push   ebx
c001c1b4:	e8 93 47 fe ff       	call   c000094c <strcat>
c001c1b9:	c7 04 24 af ce 02 c0 	mov    DWORD PTR [esp],0xc002ceaf
c001c1c0:	e8 20 68 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c1c5:	83 c4 10             	add    esp,0x10
c001c1c8:	e9 25 ff ff ff       	jmp    c001c0f2 <sysCallGetEnv(regs*)+0x5d>

c001c1cd <sysAppSettings(regs*)>:
c001c1cd:	57                   	push   edi
c001c1ce:	56                   	push   esi
c001c1cf:	56                   	push   esi
c001c1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c1d7:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c1dd:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c1e2:	66 3d c0 09          	cmp    ax,0x9c0
c001c1e6:	75 2e                	jne    c001c216 <sysAppSettings(regs*)+0x49>
c001c1e8:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c1ee:	83 e0 1f             	and    eax,0x1f
c001c1f1:	3c 01                	cmp    al,0x1
c001c1f3:	74 2c                	je     c001c221 <sysAppSettings(regs*)+0x54>
c001c1f5:	3c 07                	cmp    al,0x7
c001c1f7:	0f 84 b3 00 00 00    	je     c001c2b0 <sysAppSettings(regs*)+0xe3>
c001c1fd:	84 c0                	test   al,al
c001c1ff:	0f 84 d2 00 00 00    	je     c001c2d7 <sysAppSettings(regs*)+0x10a>
c001c205:	3c 08                	cmp    al,0x8
c001c207:	74 63                	je     c001c26c <sysAppSettings(regs*)+0x9f>
c001c209:	59                   	pop    ecx
c001c20a:	0f b6 c0             	movzx  eax,al
c001c20d:	5e                   	pop    esi
c001c20e:	05 e8 03 00 00       	add    eax,0x3e8
c001c213:	5f                   	pop    edi
c001c214:	99                   	cdq    
c001c215:	c3                   	ret    
c001c216:	b8 01 00 00 00       	mov    eax,0x1
c001c21b:	59                   	pop    ecx
c001c21c:	31 d2                	xor    edx,edx
c001c21e:	5e                   	pop    esi
c001c21f:	5f                   	pop    edi
c001c220:	c3                   	ret    
c001c221:	50                   	push   eax
c001c222:	68 00 01 00 00       	push   0x100
c001c227:	6a 00                	push   0x0
c001c229:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c22e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c231:	83 c0 0c             	add    eax,0xc
c001c234:	50                   	push   eax
c001c235:	e8 16 45 fe ff       	call   c0000750 <memset>
c001c23a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c23f:	b9 ff 00 00 00       	mov    ecx,0xff
c001c244:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c247:	83 c7 0c             	add    edi,0xc
c001c24a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c24c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c251:	5a                   	pop    edx
c001c252:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c255:	59                   	pop    ecx
c001c256:	8d 50 0c             	lea    edx,[eax+0xc]
c001c259:	52                   	push   edx
c001c25a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c260:	e8 8f 42 ff ff       	call   c00104f4 <VgaText::setTitle(char*)>
c001c265:	83 c4 10             	add    esp,0x10
c001c268:	31 c0                	xor    eax,eax
c001c26a:	eb af                	jmp    c001c21b <sysAppSettings(regs*)+0x4e>
c001c26c:	83 ec 08             	sub    esp,0x8
c001c26f:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c275:	83 e0 0f             	and    eax,0xf
c001c278:	50                   	push   eax
c001c279:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c27e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c281:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c287:	e8 58 42 ff ff       	call   c00104e4 <VgaText::setTitleColour(VgaColour)>
c001c28c:	5f                   	pop    edi
c001c28d:	58                   	pop    eax
c001c28e:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c294:	c1 e8 04             	shr    eax,0x4
c001c297:	83 e0 0f             	and    eax,0xf
c001c29a:	50                   	push   eax
c001c29b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2a9:	e8 26 42 ff ff       	call   c00104d4 <VgaText::setTitleTextColour(VgaColour)>
c001c2ae:	eb b5                	jmp    c001c265 <sysAppSettings(regs*)+0x98>
c001c2b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c2be:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c2c4:	c0 e8 06             	shr    al,0x6
c001c2c7:	83 e0 01             	and    eax,0x1
c001c2ca:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c2d0:	31 c0                	xor    eax,eax
c001c2d2:	e9 44 ff ff ff       	jmp    c001c21b <sysAppSettings(regs*)+0x4e>
c001c2d7:	b8 02 00 00 00       	mov    eax,0x2
c001c2dc:	e9 3a ff ff ff       	jmp    c001c21b <sysAppSettings(regs*)+0x4e>

c001c2e1 <sysSetFatAttrib(regs*)>:
c001c2e1:	57                   	push   edi
c001c2e2:	56                   	push   esi
c001c2e3:	53                   	push   ebx
c001c2e4:	83 ec 1c             	sub    esp,0x1c
c001c2e7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c2eb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c2ee:	68 14 01 00 00       	push   0x114
c001c2f3:	e8 0a 36 ff ff       	call   c000f902 <malloc>
c001c2f8:	83 c4 0c             	add    esp,0xc
c001c2fb:	89 c3                	mov    ebx,eax
c001c2fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c302:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c305:	57                   	push   edi
c001c306:	53                   	push   ebx
c001c307:	e8 38 6c ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001c30c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c30f:	83 c4 0c             	add    esp,0xc
c001c312:	0f b6 d4             	movzx  edx,ah
c001c315:	0f b6 c0             	movzx  eax,al
c001c318:	52                   	push   edx
c001c319:	50                   	push   eax
c001c31a:	53                   	push   ebx
c001c31b:	e8 9a 6e ff ff       	call   c00131ba <File::chfatattr(unsigned char, unsigned char)>
c001c320:	83 c4 10             	add    esp,0x10
c001c323:	85 db                	test   ebx,ebx
c001c325:	74 14                	je     c001c33b <sysSetFatAttrib(regs*)+0x5a>
c001c327:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c32b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c32d:	83 ec 0c             	sub    esp,0xc
c001c330:	53                   	push   ebx
c001c331:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c334:	83 c4 10             	add    esp,0x10
c001c337:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c33b:	85 c0                	test   eax,eax
c001c33d:	0f 95 c0             	setne  al
c001c340:	31 d2                	xor    edx,edx
c001c342:	0f b6 c0             	movzx  eax,al
c001c345:	f7 d8                	neg    eax
c001c347:	83 d2 00             	adc    edx,0x0
c001c34a:	83 c4 10             	add    esp,0x10
c001c34d:	f7 da                	neg    edx
c001c34f:	5b                   	pop    ebx
c001c350:	5e                   	pop    esi
c001c351:	5f                   	pop    edi
c001c352:	c3                   	ret    

c001c353 <sysPipe(regs*)>:
c001c353:	57                   	push   edi
c001c354:	56                   	push   esi
c001c355:	53                   	push   ebx
c001c356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c35a:	83 ec 0c             	sub    esp,0xc
c001c35d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c360:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c363:	6a 20                	push   0x20
c001c365:	e8 98 35 ff ff       	call   c000f902 <malloc>
c001c36a:	89 c3                	mov    ebx,eax
c001c36c:	58                   	pop    eax
c001c36d:	5a                   	pop    edx
c001c36e:	68 00 50 00 00       	push   0x5000
c001c373:	53                   	push   ebx
c001c374:	e8 b3 3e ff ff       	call   c001022c <Pipe::Pipe(int)>
c001c379:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c37c:	e8 13 4e ff ff       	call   c0011194 <UnixFile::getFileDescriptor()>
c001c381:	89 07                	mov    DWORD PTR [edi],eax
c001c383:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c386:	e8 09 4e ff ff       	call   c0011194 <UnixFile::getFileDescriptor()>
c001c38b:	83 c4 10             	add    esp,0x10
c001c38e:	89 06                	mov    DWORD PTR [esi],eax
c001c390:	31 d2                	xor    edx,edx
c001c392:	5b                   	pop    ebx
c001c393:	31 c0                	xor    eax,eax
c001c395:	5e                   	pop    esi
c001c396:	5f                   	pop    edi
c001c397:	c3                   	ret    

c001c398 <sysGetUnixTime(regs*)>:
c001c398:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001c39d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c3a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3a7:	e9 8a 75 ff ff       	jmp    c0013936 <Clock::timeInSecondsLocal()>

c001c3ac <string_ends_with(char const*, char const*)>:
c001c3ac:	57                   	push   edi
c001c3ad:	56                   	push   esi
c001c3ae:	53                   	push   ebx
c001c3af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c3b7:	83 ec 0c             	sub    esp,0xc
c001c3ba:	53                   	push   ebx
c001c3bb:	e8 ac 43 fe ff       	call   c000076c <strlen>
c001c3c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3c3:	89 c6                	mov    esi,eax
c001c3c5:	e8 a2 43 fe ff       	call   c000076c <strlen>
c001c3ca:	83 c4 10             	add    esp,0x10
c001c3cd:	39 c6                	cmp    esi,eax
c001c3cf:	7d 06                	jge    c001c3d7 <string_ends_with(char const*, char const*)+0x2b>
c001c3d1:	5b                   	pop    ebx
c001c3d2:	31 c0                	xor    eax,eax
c001c3d4:	5e                   	pop    esi
c001c3d5:	5f                   	pop    edi
c001c3d6:	c3                   	ret    
c001c3d7:	83 ec 08             	sub    esp,0x8
c001c3da:	29 c6                	sub    esi,eax
c001c3dc:	57                   	push   edi
c001c3dd:	01 f3                	add    ebx,esi
c001c3df:	53                   	push   ebx
c001c3e0:	e8 b3 44 fe ff       	call   c0000898 <strcmp>
c001c3e5:	83 c4 10             	add    esp,0x10
c001c3e8:	85 c0                	test   eax,eax
c001c3ea:	5b                   	pop    ebx
c001c3eb:	0f 94 c0             	sete   al
c001c3ee:	5e                   	pop    esi
c001c3ef:	0f b6 c0             	movzx  eax,al
c001c3f2:	5f                   	pop    edi
c001c3f3:	c3                   	ret    

c001c3f4 <sysCallOpen(regs*)>:
c001c3f4:	56                   	push   esi
c001c3f5:	53                   	push   ebx
c001c3f6:	81 ec 04 01 00 00    	sub    esp,0x104
c001c3fc:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c403:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c406:	85 c9                	test   ecx,ecx
c001c408:	0f 84 b3 00 00 00    	je     c001c4c1 <sysCallOpen(regs*)+0xcd>
c001c40e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c411:	85 c0                	test   eax,eax
c001c413:	0f 84 a8 00 00 00    	je     c001c4c1 <sysCallOpen(regs*)+0xcd>
c001c419:	52                   	push   edx
c001c41a:	68 cb ca 02 c0       	push   0xc002cacb
c001c41f:	50                   	push   eax
c001c420:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c424:	56                   	push   esi
c001c425:	e8 70 69 ff ff       	call   c0012d9a <Fs::standardiseFiles(char*, char const*, char const*)>
c001c42a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c42d:	e8 3a 43 fe ff       	call   c000076c <strlen>
c001c432:	83 c4 10             	add    esp,0x10
c001c435:	48                   	dec    eax
c001c436:	74 1d                	je     c001c455 <sysCallOpen(regs*)+0x61>
c001c438:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c43b:	eb 0f                	jmp    c001c44c <sysCallOpen(regs*)+0x58>
c001c43d:	80 fa 3a             	cmp    dl,0x3a
c001c440:	74 0f                	je     c001c451 <sysCallOpen(regs*)+0x5d>
c001c442:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c446:	48                   	dec    eax
c001c447:	74 0c                	je     c001c455 <sysCallOpen(regs*)+0x61>
c001c449:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c44c:	80 fa 2e             	cmp    dl,0x2e
c001c44f:	75 ec                	jne    c001c43d <sysCallOpen(regs*)+0x49>
c001c451:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c455:	83 ec 08             	sub    esp,0x8
c001c458:	68 cf ca 02 c0       	push   0xc002cacf
c001c45d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c460:	e8 47 ff ff ff       	call   c001c3ac <string_ends_with(char const*, char const*)>
c001c465:	83 c4 10             	add    esp,0x10
c001c468:	85 c0                	test   eax,eax
c001c46a:	75 17                	jne    c001c483 <sysCallOpen(regs*)+0x8f>
c001c46c:	83 ec 08             	sub    esp,0x8
c001c46f:	68 f0 ca 02 c0       	push   0xc002caf0
c001c474:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c477:	e8 30 ff ff ff       	call   c001c3ac <string_ends_with(char const*, char const*)>
c001c47c:	83 c4 10             	add    esp,0x10
c001c47f:	85 c0                	test   eax,eax
c001c481:	74 51                	je     c001c4d4 <sysCallOpen(regs*)+0xe0>
c001c483:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c486:	83 ec 08             	sub    esp,0x8
c001c489:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c48f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c496:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c499:	ff 30                	push   DWORD PTR [eax]
c001c49b:	68 d4 ca 02 c0       	push   0xc002cad4
c001c4a0:	e8 40 65 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c4a5:	c7 04 24 e3 ca 02 c0 	mov    DWORD PTR [esp],0xc002cae3
c001c4ac:	e8 34 65 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c4b1:	83 c4 10             	add    esp,0x10
c001c4b4:	81 c4 04 01 00 00    	add    esp,0x104
c001c4ba:	31 c0                	xor    eax,eax
c001c4bc:	31 d2                	xor    edx,edx
c001c4be:	5b                   	pop    ebx
c001c4bf:	5e                   	pop    esi
c001c4c0:	c3                   	ret    
c001c4c1:	81 c4 04 01 00 00    	add    esp,0x104
c001c4c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c4d1:	5b                   	pop    ebx
c001c4d2:	5e                   	pop    esi
c001c4d3:	c3                   	ret    
c001c4d4:	83 ec 08             	sub    esp,0x8
c001c4d7:	68 d0 ca 02 c0       	push   0xc002cad0
c001c4dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4df:	e8 b4 43 fe ff       	call   c0000898 <strcmp>
c001c4e4:	83 c4 10             	add    esp,0x10
c001c4e7:	85 c0                	test   eax,eax
c001c4e9:	74 98                	je     c001c483 <sysCallOpen(regs*)+0x8f>
c001c4eb:	83 ec 08             	sub    esp,0x8
c001c4ee:	68 cf ca 02 c0       	push   0xc002cacf
c001c4f3:	56                   	push   esi
c001c4f4:	e8 b3 fe ff ff       	call   c001c3ac <string_ends_with(char const*, char const*)>
c001c4f9:	83 c4 10             	add    esp,0x10
c001c4fc:	85 c0                	test   eax,eax
c001c4fe:	75 83                	jne    c001c483 <sysCallOpen(regs*)+0x8f>
c001c500:	83 ec 08             	sub    esp,0x8
c001c503:	68 f5 ca 02 c0       	push   0xc002caf5
c001c508:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c50b:	e8 9c fe ff ff       	call   c001c3ac <string_ends_with(char const*, char const*)>
c001c510:	83 c4 10             	add    esp,0x10
c001c513:	85 c0                	test   eax,eax
c001c515:	0f 85 d9 00 00 00    	jne    c001c5f4 <sysCallOpen(regs*)+0x200>
c001c51b:	83 ec 08             	sub    esp,0x8
c001c51e:	68 fa ca 02 c0       	push   0xc002cafa
c001c523:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c526:	e8 81 fe ff ff       	call   c001c3ac <string_ends_with(char const*, char const*)>
c001c52b:	83 c4 10             	add    esp,0x10
c001c52e:	85 c0                	test   eax,eax
c001c530:	0f 85 be 00 00 00    	jne    c001c5f4 <sysCallOpen(regs*)+0x200>
c001c536:	83 ec 08             	sub    esp,0x8
c001c539:	68 f6 ca 02 c0       	push   0xc002caf6
c001c53e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c541:	e8 52 43 fe ff       	call   c0000898 <strcmp>
c001c546:	83 c4 10             	add    esp,0x10
c001c549:	85 c0                	test   eax,eax
c001c54b:	0f 84 a3 00 00 00    	je     c001c5f4 <sysCallOpen(regs*)+0x200>
c001c551:	83 ec 08             	sub    esp,0x8
c001c554:	68 f5 ca 02 c0       	push   0xc002caf5
c001c559:	56                   	push   esi
c001c55a:	e8 4d fe ff ff       	call   c001c3ac <string_ends_with(char const*, char const*)>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	85 c0                	test   eax,eax
c001c564:	0f 85 8a 00 00 00    	jne    c001c5f4 <sysCallOpen(regs*)+0x200>
c001c56a:	83 ec 0c             	sub    esp,0xc
c001c56d:	68 14 01 00 00       	push   0x114
c001c572:	e8 8b 33 ff ff       	call   c000f902 <malloc>
c001c577:	83 c4 0c             	add    esp,0xc
c001c57a:	89 c6                	mov    esi,eax
c001c57c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c581:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c584:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c587:	56                   	push   esi
c001c588:	e8 b7 69 ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001c58d:	83 c4 10             	add    esp,0x10
c001c590:	85 f6                	test   esi,esi
c001c592:	0f 84 29 ff ff ff    	je     c001c4c1 <sysCallOpen(regs*)+0xcd>
c001c598:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c59b:	0f b6 c2             	movzx  eax,dl
c001c59e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c5a1:	89 d0                	mov    eax,edx
c001c5a3:	83 e0 01             	and    eax,0x1
c001c5a6:	f6 c2 02             	test   dl,0x2
c001c5a9:	74 03                	je     c001c5ae <sysCallOpen(regs*)+0x1ba>
c001c5ab:	83 c8 02             	or     eax,0x2
c001c5ae:	f6 c2 04             	test   dl,0x4
c001c5b1:	74 03                	je     c001c5b6 <sysCallOpen(regs*)+0x1c2>
c001c5b3:	83 c8 04             	or     eax,0x4
c001c5b6:	f6 c2 08             	test   dl,0x8
c001c5b9:	74 03                	je     c001c5be <sysCallOpen(regs*)+0x1ca>
c001c5bb:	83 c8 0a             	or     eax,0xa
c001c5be:	83 e2 10             	and    edx,0x10
c001c5c1:	74 03                	je     c001c5c6 <sysCallOpen(regs*)+0x1d2>
c001c5c3:	83 c8 12             	or     eax,0x12
c001c5c6:	83 ec 08             	sub    esp,0x8
c001c5c9:	50                   	push   eax
c001c5ca:	56                   	push   esi
c001c5cb:	e8 d8 69 ff ff       	call   c0012fa8 <File::open(FileOpenMode)>
c001c5d0:	83 c4 10             	add    esp,0x10
c001c5d3:	85 c0                	test   eax,eax
c001c5d5:	0f 85 e6 fe ff ff    	jne    c001c4c1 <sysCallOpen(regs*)+0xcd>
c001c5db:	83 ec 0c             	sub    esp,0xc
c001c5de:	56                   	push   esi
c001c5df:	e8 b0 4b ff ff       	call   c0011194 <UnixFile::getFileDescriptor()>
c001c5e4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c5e7:	89 02                	mov    DWORD PTR [edx],eax
c001c5e9:	c1 f8 1f             	sar    eax,0x1f
c001c5ec:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c5ef:	e9 bd fe ff ff       	jmp    c001c4b1 <sysCallOpen(regs*)+0xbd>
c001c5f4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c5f7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c5fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c604:	e9 ab fe ff ff       	jmp    c001c4b4 <sysCallOpen(regs*)+0xc0>

c001c609 <Sys::loadSyscalls()>:
c001c609:	c7 05 c0 1d 03 c0 f9 b6 01 c0 	mov    DWORD PTR ds:0xc0031dc0,0xc001b6f9
c001c613:	c7 05 c4 1d 03 c0 5e b2 01 c0 	mov    DWORD PTR ds:0xc0031dc4,0xc001b25e
c001c61d:	c7 05 c8 1d 03 c0 4c b4 01 c0 	mov    DWORD PTR ds:0xc0031dc8,0xc001b44c
c001c627:	c7 05 cc 1d 03 c0 2f b6 01 c0 	mov    DWORD PTR ds:0xc0031dcc,0xc001b62f
c001c631:	c7 05 d0 1d 03 c0 e4 b3 01 c0 	mov    DWORD PTR ds:0xc0031dd0,0xc001b3e4
c001c63b:	c7 05 d4 1d 03 c0 95 b2 01 c0 	mov    DWORD PTR ds:0xc0031dd4,0xc001b295
c001c645:	c7 05 d8 1d 03 c0 76 b2 01 c0 	mov    DWORD PTR ds:0xc0031dd8,0xc001b276
c001c64f:	c7 05 dc 1d 03 c0 a1 b4 01 c0 	mov    DWORD PTR ds:0xc0031ddc,0xc001b4a1
c001c659:	c7 05 e4 1d 03 c0 34 bc 01 c0 	mov    DWORD PTR ds:0xc0031de4,0xc001bc34
c001c663:	c7 05 e0 1d 03 c0 f4 c3 01 c0 	mov    DWORD PTR ds:0xc0031de0,0xc001c3f4
c001c66d:	c7 05 e8 1d 03 c0 bc bc 01 c0 	mov    DWORD PTR ds:0xc0031de8,0xc001bcbc
c001c677:	c7 05 ec 1d 03 c0 23 b9 01 c0 	mov    DWORD PTR ds:0xc0031dec,0xc001b923
c001c681:	c7 05 f0 1d 03 c0 3f b7 01 c0 	mov    DWORD PTR ds:0xc0031df0,0xc001b73f
c001c68b:	c7 05 f4 1d 03 c0 44 b7 01 c0 	mov    DWORD PTR ds:0xc0031df4,0xc001b744
c001c695:	c7 05 f8 1d 03 c0 97 bd 01 c0 	mov    DWORD PTR ds:0xc0031df8,0xc001bd97
c001c69f:	c7 05 fc 1d 03 c0 31 bd 01 c0 	mov    DWORD PTR ds:0xc0031dfc,0xc001bd31
c001c6a9:	c7 05 00 1e 03 c0 0b ba 01 c0 	mov    DWORD PTR ds:0xc0031e00,0xc001ba0b
c001c6b3:	c7 05 04 1e 03 c0 74 ba 01 c0 	mov    DWORD PTR ds:0xc0031e04,0xc001ba74
c001c6bd:	c7 05 08 1e 03 c0 f1 ba 01 c0 	mov    DWORD PTR ds:0xc0031e08,0xc001baf1
c001c6c7:	c7 05 0c 1e 03 c0 49 b7 01 c0 	mov    DWORD PTR ds:0xc0031e0c,0xc001b749
c001c6d1:	c7 05 10 1e 03 c0 07 be 01 c0 	mov    DWORD PTR ds:0xc0031e10,0xc001be07
c001c6db:	c7 05 14 1e 03 c0 21 be 01 c0 	mov    DWORD PTR ds:0xc0031e14,0xc001be21
c001c6e5:	c7 05 18 1e 03 c0 21 be 01 c0 	mov    DWORD PTR ds:0xc0031e18,0xc001be21
c001c6ef:	c7 05 1c 1e 03 c0 62 be 01 c0 	mov    DWORD PTR ds:0xc0031e1c,0xc001be62
c001c6f9:	c7 05 20 1e 03 c0 c6 be 01 c0 	mov    DWORD PTR ds:0xc0031e20,0xc001bec6
c001c703:	c7 05 24 1e 03 c0 f5 b8 01 c0 	mov    DWORD PTR ds:0xc0031e24,0xc001b8f5
c001c70d:	c7 05 28 1e 03 c0 2a bf 01 c0 	mov    DWORD PTR ds:0xc0031e28,0xc001bf2a
c001c717:	c7 05 2c 1e 03 c0 b2 b8 01 c0 	mov    DWORD PTR ds:0xc0031e2c,0xc001b8b2
c001c721:	c7 05 30 1e 03 c0 76 bf 01 c0 	mov    DWORD PTR ds:0xc0031e30,0xc001bf76
c001c72b:	c7 05 34 1e 03 c0 b1 b9 01 c0 	mov    DWORD PTR ds:0xc0031e34,0xc001b9b1
c001c735:	c7 05 38 1e 03 c0 f9 bf 01 c0 	mov    DWORD PTR ds:0xc0031e38,0xc001bff9
c001c73f:	c7 05 3c 1e 03 c0 74 bb 01 c0 	mov    DWORD PTR ds:0xc0031e3c,0xc001bb74
c001c749:	c7 05 40 1e 03 c0 20 c0 01 c0 	mov    DWORD PTR ds:0xc0031e40,0xc001c020
c001c753:	c7 05 44 1e 03 c0 95 c0 01 c0 	mov    DWORD PTR ds:0xc0031e44,0xc001c095
c001c75d:	c7 05 48 1e 03 c0 cd c1 01 c0 	mov    DWORD PTR ds:0xc0031e48,0xc001c1cd
c001c767:	c7 05 4c 1e 03 c0 53 b7 01 c0 	mov    DWORD PTR ds:0xc0031e4c,0xc001b753
c001c771:	c7 05 50 1e 03 c0 bd b7 01 c0 	mov    DWORD PTR ds:0xc0031e50,0xc001b7bd
c001c77b:	c7 05 54 1e 03 c0 03 b8 01 c0 	mov    DWORD PTR ds:0xc0031e54,0xc001b803
c001c785:	c7 05 58 1e 03 c0 e1 c2 01 c0 	mov    DWORD PTR ds:0xc0031e58,0xc001c2e1
c001c78f:	c7 05 5c 1e 03 c0 3c be 01 c0 	mov    DWORD PTR ds:0xc0031e5c,0xc001be3c
c001c799:	c7 05 60 1e 03 c0 54 b8 01 c0 	mov    DWORD PTR ds:0xc0031e60,0xc001b854
c001c7a3:	c7 05 64 1e 03 c0 53 c3 01 c0 	mov    DWORD PTR ds:0xc0031e64,0xc001c353
c001c7ad:	c7 05 68 1e 03 c0 98 c3 01 c0 	mov    DWORD PTR ds:0xc0031e68,0xc001c398
c001c7b7:	c7 05 6c 1e 03 c0 3c b3 01 c0 	mov    DWORD PTR ds:0xc0031e6c,0xc001b33c
c001c7c1:	c7 05 70 1e 03 c0 bd b4 01 c0 	mov    DWORD PTR ds:0xc0031e70,0xc001b4bd
c001c7cb:	c7 05 74 1e 03 c0 e5 b5 01 c0 	mov    DWORD PTR ds:0xc0031e74,0xc001b5e5
c001c7d5:	c7 05 78 1e 03 c0 28 b2 01 c0 	mov    DWORD PTR ds:0xc0031e78,0xc001b228
c001c7df:	c7 05 7c 1e 03 c0 97 b6 01 c0 	mov    DWORD PTR ds:0xc0031e7c,0xc001b697
c001c7e9:	c7 05 80 1e 03 c0 a1 b2 01 c0 	mov    DWORD PTR ds:0xc0031e80,0xc001b2a1
c001c7f3:	c7 05 84 1e 03 c0 b8 b2 01 c0 	mov    DWORD PTR ds:0xc0031e84,0xc001b2b8
c001c7fd:	c3                   	ret    

c001c7fe <Sys::systemCall(regs*, void*)>:
c001c7fe:	53                   	push   ebx
c001c7ff:	83 ec 08             	sub    esp,0x8
c001c802:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c806:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c809:	83 f8 7f             	cmp    eax,0x7f
c001c80c:	77 16                	ja     c001c824 <Sys::systemCall(regs*, void*)+0x26>
c001c80e:	8b 14 85 c0 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce240]
c001c815:	85 d2                	test   edx,edx
c001c817:	74 0b                	je     c001c824 <Sys::systemCall(regs*, void*)+0x26>
c001c819:	83 ec 0c             	sub    esp,0xc
c001c81c:	53                   	push   ebx
c001c81d:	ff d2                	call   edx
c001c81f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c822:	eb 0d                	jmp    c001c831 <Sys::systemCall(regs*, void*)+0x33>
c001c824:	52                   	push   edx
c001c825:	52                   	push   edx
c001c826:	50                   	push   eax
c001c827:	68 ff ca 02 c0       	push   0xc002caff
c001c82c:	e8 b4 61 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c831:	83 c4 10             	add    esp,0x10
c001c834:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c839:	31 d2                	xor    edx,edx
c001c83b:	83 c4 08             	add    esp,0x8
c001c83e:	5b                   	pop    ebx
c001c83f:	c3                   	ret    

c001c840 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c840:	55                   	push   ebp
c001c841:	57                   	push   edi
c001c842:	56                   	push   esi
c001c843:	53                   	push   ebx
c001c844:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c84a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c851:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c858:	85 c0                	test   eax,eax
c001c85a:	0f 95 c1             	setne  cl
c001c85d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c865:	0f 94 c2             	sete   dl
c001c868:	84 d1                	test   cl,dl
c001c86a:	74 23                	je     c001c88f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c86c:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c872:	74 1b                	je     c001c88f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c874:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c87a:	89 da                	mov    edx,ebx
c001c87c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c882:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c888:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c88f:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c896:	05 ff 0f 00 00       	add    eax,0xfff
c001c89b:	83 ec 0c             	sub    esp,0xc
c001c89e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8a2:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c8a8:	c1 e8 0c             	shr    eax,0xc
c001c8ab:	89 fe                	mov    esi,edi
c001c8ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8b1:	c1 ee 0c             	shr    esi,0xc
c001c8b4:	6a 01                	push   0x1
c001c8b6:	e8 24 4d ff ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c001c8bb:	89 c5                	mov    ebp,eax
c001c8bd:	58                   	pop    eax
c001c8be:	5a                   	pop    edx
c001c8bf:	56                   	push   esi
c001c8c0:	68 83 cb 02 c0       	push   0xc002cb83
c001c8c5:	e8 1b 61 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c8ca:	59                   	pop    ecx
c001c8cb:	58                   	pop    eax
c001c8cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8d0:	68 95 cb 02 c0       	push   0xc002cb95
c001c8d5:	e8 0b 61 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c8da:	83 c4 10             	add    esp,0x10
c001c8dd:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c8e3:	0f 86 31 01 00 00    	jbe    c001ca1a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c8e9:	c1 e6 0c             	shl    esi,0xc
c001c8ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8ef:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c8f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8f6:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c8fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c900:	01 df                	add    edi,ebx
c001c902:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c905:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c909:	0f 84 08 01 00 00    	je     c001ca17 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c90f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c915:	76 05                	jbe    c001c91c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c917:	bf 00 10 00 00       	mov    edi,0x1000
c001c91c:	83 ec 0c             	sub    esp,0xc
c001c91f:	31 d2                	xor    edx,edx
c001c921:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c928:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c92a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c92e:	50                   	push   eax
c001c92f:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c933:	56                   	push   esi
c001c934:	52                   	push   edx
c001c935:	57                   	push   edi
c001c936:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c93d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c940:	83 c4 20             	add    esp,0x20
c001c943:	85 c0                	test   eax,eax
c001c945:	74 0a                	je     c001c951 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c947:	53                   	push   ebx
c001c948:	53                   	push   ebx
c001c949:	50                   	push   eax
c001c94a:	68 a7 cb 02 c0       	push   0xc002cba7
c001c94f:	eb 0f                	jmp    c001c960 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c951:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c955:	74 20                	je     c001c977 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c957:	51                   	push   ecx
c001c958:	51                   	push   ecx
c001c959:	6a 00                	push   0x0
c001c95b:	68 d2 cb 02 c0       	push   0xc002cbd2
c001c960:	e8 80 60 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001c965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c968:	e8 32 51 ff ff       	call   c0011a9f <Virt::freeKernelVirtualPages(unsigned long)>
c001c96d:	83 c4 10             	add    esp,0x10
c001c970:	31 c0                	xor    eax,eax
c001c972:	e9 68 01 00 00       	jmp    c001cadf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c977:	fa                   	cli    
c001c978:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001c97e:	e8 23 33 ff ff       	call   c000fca6 <Phys::allocatePage()>
c001c983:	6a 07                	push   0x7
c001c985:	89 c7                	mov    edi,eax
c001c987:	55                   	push   ebp
c001c988:	50                   	push   eax
c001c989:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c98e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c991:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c997:	e8 7a 54 ff ff       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c99c:	83 c4 0c             	add    esp,0xc
c001c99f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9a6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ac:	6a 00                	push   0x0
c001c9ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9b6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9bc:	e8 af 52 ff ff       	call   c0011c70 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9c1:	58                   	pop    eax
c001c9c2:	5a                   	pop    edx
c001c9c3:	68 07 0c 00 00       	push   0xc07
c001c9c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c9cc:	57                   	push   edi
c001c9cd:	89 ef                	mov    edi,ebp
c001c9cf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9d6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9dc:	6a 00                	push   0x0
c001c9de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9e6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ec:	e8 e1 57 ff ff       	call   c00121d2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9f1:	b9 00 10 00 00       	mov    ecx,0x1000
c001c9f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c9f8:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001c9fd:	83 c4 20             	add    esp,0x20
c001ca00:	48                   	dec    eax
c001ca01:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001ca06:	85 c0                	test   eax,eax
c001ca08:	75 01                	jne    c001ca0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001ca0a:	fb                   	sti    
c001ca0b:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001ca12:	e9 df fe ff ff       	jmp    c001c8f6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001ca17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001ca1a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca22:	0f 86 a9 00 00 00    	jbe    c001cad1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001ca28:	fa                   	cli    
c001ca29:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001ca2f:	51                   	push   ecx
c001ca30:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca37:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca3d:	6a 00                	push   0x0
c001ca3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca44:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca47:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca4d:	e8 1e 52 ff ff       	call   c0011c70 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca52:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ca56:	c1 e6 0c             	shl    esi,0xc
c001ca59:	01 de                	add    esi,ebx
c001ca5b:	83 c4 10             	add    esp,0x10
c001ca5e:	39 de                	cmp    esi,ebx
c001ca60:	74 61                	je     c001cac3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001ca62:	e8 3f 32 ff ff       	call   c000fca6 <Phys::allocatePage()>
c001ca67:	6a 07                	push   0x7
c001ca69:	89 c7                	mov    edi,eax
c001ca6b:	55                   	push   ebp
c001ca6c:	50                   	push   eax
c001ca6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca72:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca75:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca7b:	e8 96 53 ff ff       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca80:	58                   	pop    eax
c001ca81:	5a                   	pop    edx
c001ca82:	68 07 0c 00 00       	push   0xc07
c001ca87:	53                   	push   ebx
c001ca88:	81 c3 00 10 00 00    	add    ebx,0x1000
c001ca8e:	57                   	push   edi
c001ca8f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ca96:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca9c:	6a 00                	push   0x0
c001ca9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001caa3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001caa6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001caac:	e8 21 57 ff ff       	call   c00121d2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cab1:	83 c4 1c             	add    esp,0x1c
c001cab4:	68 00 10 00 00       	push   0x1000
c001cab9:	6a 00                	push   0x0
c001cabb:	55                   	push   ebp
c001cabc:	e8 8f 3c fe ff       	call   c0000750 <memset>
c001cac1:	eb 98                	jmp    c001ca5b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cac3:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001cac8:	48                   	dec    eax
c001cac9:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001cace:	75 01                	jne    c001cad1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cad0:	fb                   	sti    
c001cad1:	83 ec 0c             	sub    esp,0xc
c001cad4:	55                   	push   ebp
c001cad5:	e8 c5 4f ff ff       	call   c0011a9f <Virt::freeKernelVirtualPages(unsigned long)>
c001cada:	83 c4 10             	add    esp,0x10
c001cadd:	b0 01                	mov    al,0x1
c001cadf:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cae5:	5b                   	pop    ebx
c001cae6:	5e                   	pop    esi
c001cae7:	5f                   	pop    edi
c001cae8:	5d                   	pop    ebp
c001cae9:	c3                   	ret    

c001caea <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001caea:	55                   	push   ebp
c001caeb:	57                   	push   edi
c001caec:	56                   	push   esi
c001caed:	53                   	push   ebx
c001caee:	83 ec 48             	sub    esp,0x48
c001caf1:	68 14 01 00 00       	push   0x114
c001caf6:	e8 07 2e ff ff       	call   c000f902 <malloc>
c001cafb:	83 c4 0c             	add    esp,0xc
c001cafe:	89 c6                	mov    esi,eax
c001cb00:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb04:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb08:	50                   	push   eax
c001cb09:	e8 36 64 ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001cb0e:	58                   	pop    eax
c001cb0f:	5a                   	pop    edx
c001cb10:	6a 01                	push   0x1
c001cb12:	56                   	push   esi
c001cb13:	e8 90 64 ff ff       	call   c0012fa8 <File::open(FileOpenMode)>
c001cb18:	83 c4 10             	add    esp,0x10
c001cb1b:	85 c0                	test   eax,eax
c001cb1d:	0f 85 47 01 00 00    	jne    c001cc6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb23:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb2b:	83 ec 0c             	sub    esp,0xc
c001cb2e:	6a 34                	push   0x34
c001cb30:	e8 cd 2d ff ff       	call   c000f902 <malloc>
c001cb35:	89 c3                	mov    ebx,eax
c001cb37:	58                   	pop    eax
c001cb38:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb3a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb3e:	57                   	push   edi
c001cb3f:	53                   	push   ebx
c001cb40:	6a 00                	push   0x0
c001cb42:	6a 34                	push   0x34
c001cb44:	56                   	push   esi
c001cb45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb48:	83 c4 20             	add    esp,0x20
c001cb4b:	85 c0                	test   eax,eax
c001cb4d:	0f 85 17 01 00 00    	jne    c001cc6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb53:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb59:	0f 85 0b 01 00 00    	jne    c001cc6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb5f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb62:	85 c0                	test   eax,eax
c001cb64:	0f 84 00 01 00 00    	je     c001cc6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb6a:	31 d2                	xor    edx,edx
c001cb6c:	55                   	push   ebp
c001cb6d:	52                   	push   edx
c001cb6e:	50                   	push   eax
c001cb6f:	56                   	push   esi
c001cb70:	e8 f1 64 ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001cb75:	83 c4 10             	add    esp,0x10
c001cb78:	85 c0                	test   eax,eax
c001cb7a:	0f 85 ea 00 00 00    	jne    c001cc6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb80:	83 ec 0c             	sub    esp,0xc
c001cb83:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb86:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb8e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cb92:	0f af c2             	imul   eax,edx
c001cb95:	50                   	push   eax
c001cb96:	e8 67 2d ff ff       	call   c000f902 <malloc>
c001cb9b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cb9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cba1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cba4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cba8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbac:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbb0:	0f af c2             	imul   eax,edx
c001cbb3:	99                   	cdq    
c001cbb4:	52                   	push   edx
c001cbb5:	50                   	push   eax
c001cbb6:	56                   	push   esi
c001cbb7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cbbd:	83 c4 20             	add    esp,0x20
c001cbc0:	85 c0                	test   eax,eax
c001cbc2:	0f 84 a2 00 00 00    	je     c001cc6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbc8:	31 d2                	xor    edx,edx
c001cbca:	51                   	push   ecx
c001cbcb:	52                   	push   edx
c001cbcc:	50                   	push   eax
c001cbcd:	56                   	push   esi
c001cbce:	e8 93 64 ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001cbd3:	83 c4 10             	add    esp,0x10
c001cbd6:	85 c0                	test   eax,eax
c001cbd8:	0f 85 8c 00 00 00    	jne    c001cc6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbde:	83 ec 0c             	sub    esp,0xc
c001cbe1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbe5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbe9:	31 ed                	xor    ebp,ebp
c001cbeb:	0f af c2             	imul   eax,edx
c001cbee:	50                   	push   eax
c001cbef:	e8 0e 2d ff ff       	call   c000f902 <malloc>
c001cbf4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbf6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbfa:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc01:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc05:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc09:	0f af c2             	imul   eax,edx
c001cc0c:	99                   	cdq    
c001cc0d:	52                   	push   edx
c001cc0e:	50                   	push   eax
c001cc0f:	56                   	push   esi
c001cc10:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc13:	83 c4 20             	add    esp,0x20
c001cc16:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc1e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc22:	0f 86 80 00 00 00    	jbe    c001cca8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc28:	0f b7 fd             	movzx  edi,bp
c001cc2b:	c1 e7 05             	shl    edi,0x5
c001cc2e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc32:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc35:	75 6b                	jne    c001cca2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc37:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc3e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc45:	52                   	push   edx
c001cc46:	31 d2                	xor    edx,edx
c001cc48:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc4b:	52                   	push   edx
c001cc4c:	50                   	push   eax
c001cc4d:	56                   	push   esi
c001cc4e:	e8 13 64 ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001cc53:	83 c4 10             	add    esp,0x10
c001cc56:	85 c0                	test   eax,eax
c001cc58:	74 17                	je     c001cc71 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc5a:	83 ec 0c             	sub    esp,0xc
c001cc5d:	68 fe cb 02 c0       	push   0xc002cbfe
c001cc62:	e8 7e 5d ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001cc67:	83 c4 10             	add    esp,0x10
c001cc6a:	31 c0                	xor    eax,eax
c001cc6c:	e9 87 00 00 00       	jmp    c001ccf8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc71:	83 ec 0c             	sub    esp,0xc
c001cc74:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc77:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc7a:	50                   	push   eax
c001cc7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc83:	56                   	push   esi
c001cc84:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc88:	e8 b3 fb ff ff       	call   c001c840 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cc91:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cc95:	83 c4 20             	add    esp,0x20
c001cc98:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc9c:	73 04                	jae    c001cca2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cca2:	45                   	inc    ebp
c001cca3:	e9 76 ff ff ff       	jmp    c001cc1e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cca8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ccac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ccb4:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001ccba:	83 ec 0c             	sub    esp,0xc
c001ccbd:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ccc3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ccc8:	05 00 10 00 00       	add    eax,0x1000
c001cccd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ccd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccd4:	e8 39 2c ff ff       	call   c000f912 <free>
c001ccd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccdc:	e8 31 2c ff ff       	call   c000f912 <free>
c001cce1:	58                   	pop    eax
c001cce2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cce6:	e8 27 2c ff ff       	call   c000f912 <free>
c001cceb:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccee:	e8 13 63 ff ff       	call   c0013006 <File::close()>
c001ccf3:	83 c4 10             	add    esp,0x10
c001ccf6:	b0 01                	mov    al,0x1
c001ccf8:	83 c4 3c             	add    esp,0x3c
c001ccfb:	5b                   	pop    ebx
c001ccfc:	5e                   	pop    esi
c001ccfd:	5f                   	pop    edi
c001ccfe:	5d                   	pop    ebp
c001ccff:	c3                   	ret    

c001cd00 <Thr::runtimeReferenceHelper()>:
c001cd00:	83 ec 18             	sub    esp,0x18
c001cd03:	68 06 cc 02 c0       	push   0xc002cc06
c001cd08:	e8 d8 5c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001cd0d:	fa                   	cli    
c001cd0e:	83 c4 10             	add    esp,0x10
c001cd11:	eb fe                	jmp    c001cd11 <Thr::runtimeReferenceHelper()+0x11>

c001cd13 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd13:	57                   	push   edi
c001cd14:	56                   	push   esi
c001cd15:	53                   	push   ebx
c001cd16:	31 db                	xor    ebx,ebx
c001cd18:	39 1d 60 27 03 c0    	cmp    DWORD PTR ds:0xc0032760,ebx
c001cd1e:	7e 3c                	jle    c001cd5c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd20:	8b 34 9d e0 26 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd920]
c001cd27:	31 ff                	xor    edi,edi
c001cd29:	39 3c 9d e0 25 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcda20],edi
c001cd30:	7e 27                	jle    c001cd59 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd32:	50                   	push   eax
c001cd33:	50                   	push   eax
c001cd34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd38:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd3a:	03 04 9d 60 26 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcd9a0]
c001cd41:	50                   	push   eax
c001cd42:	e8 51 3b fe ff       	call   c0000898 <strcmp>
c001cd47:	83 c4 10             	add    esp,0x10
c001cd4a:	85 c0                	test   eax,eax
c001cd4c:	75 05                	jne    c001cd53 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd4e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd51:	eb 0b                	jmp    c001cd5e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd53:	83 c6 10             	add    esi,0x10
c001cd56:	47                   	inc    edi
c001cd57:	eb d0                	jmp    c001cd29 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd59:	43                   	inc    ebx
c001cd5a:	eb bc                	jmp    c001cd18 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd5c:	31 c0                	xor    eax,eax
c001cd5e:	5b                   	pop    ebx
c001cd5f:	5e                   	pop    esi
c001cd60:	5f                   	pop    edi
c001cd61:	c3                   	ret    

c001cd62 <Thr::loadKernelSymbolTable(char const*)>:
c001cd62:	55                   	push   ebp
c001cd63:	57                   	push   edi
c001cd64:	56                   	push   esi
c001cd65:	53                   	push   ebx
c001cd66:	83 ec 68             	sub    esp,0x68
c001cd69:	8b 35 b0 27 03 c0    	mov    esi,DWORD PTR ds:0xc00327b0
c001cd6f:	68 14 01 00 00       	push   0x114
c001cd74:	e8 89 2b ff ff       	call   c000f902 <malloc>
c001cd79:	83 c4 0c             	add    esp,0xc
c001cd7c:	89 c3                	mov    ebx,eax
c001cd7e:	56                   	push   esi
c001cd7f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd83:	50                   	push   eax
c001cd84:	e8 bb 61 ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001cd89:	5e                   	pop    esi
c001cd8a:	5f                   	pop    edi
c001cd8b:	6a 01                	push   0x1
c001cd8d:	53                   	push   ebx
c001cd8e:	e8 15 62 ff ff       	call   c0012fa8 <File::open(FileOpenMode)>
c001cd93:	83 c4 10             	add    esp,0x10
c001cd96:	85 c0                	test   eax,eax
c001cd98:	74 0a                	je     c001cda4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cd9a:	83 ec 0c             	sub    esp,0xc
c001cd9d:	68 28 cc 02 c0       	push   0xc002cc28
c001cda2:	eb 34                	jmp    c001cdd8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cda4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cdac:	83 ec 0c             	sub    esp,0xc
c001cdaf:	6a 34                	push   0x34
c001cdb1:	e8 4c 2b ff ff       	call   c000f902 <malloc>
c001cdb6:	59                   	pop    ecx
c001cdb7:	89 c7                	mov    edi,eax
c001cdb9:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cdbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdbf:	56                   	push   esi
c001cdc0:	57                   	push   edi
c001cdc1:	6a 00                	push   0x0
c001cdc3:	6a 34                	push   0x34
c001cdc5:	53                   	push   ebx
c001cdc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdc9:	83 c4 20             	add    esp,0x20
c001cdcc:	85 c0                	test   eax,eax
c001cdce:	74 17                	je     c001cde7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cdd0:	83 ec 0c             	sub    esp,0xc
c001cdd3:	68 3f cc 02 c0       	push   0xc002cc3f
c001cdd8:	e8 28 d6 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001cddd:	83 c4 10             	add    esp,0x10
c001cde0:	31 c0                	xor    eax,eax
c001cde2:	e9 31 02 00 00       	jmp    c001d018 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cde7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cded:	75 e1                	jne    c001cdd0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdef:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cdf2:	85 c0                	test   eax,eax
c001cdf4:	74 da                	je     c001cdd0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cdf6:	52                   	push   edx
c001cdf7:	31 d2                	xor    edx,edx
c001cdf9:	52                   	push   edx
c001cdfa:	50                   	push   eax
c001cdfb:	53                   	push   ebx
c001cdfc:	e8 65 62 ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001ce01:	83 c4 10             	add    esp,0x10
c001ce04:	85 c0                	test   eax,eax
c001ce06:	75 c8                	jne    c001cdd0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce08:	83 ec 0c             	sub    esp,0xc
c001ce0b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce0f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce13:	31 ed                	xor    ebp,ebp
c001ce15:	0f af c2             	imul   eax,edx
c001ce18:	50                   	push   eax
c001ce19:	e8 e4 2a ff ff       	call   c000f902 <malloc>
c001ce1e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce24:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce2b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce2f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce33:	0f af c2             	imul   eax,edx
c001ce36:	99                   	cdq    
c001ce37:	52                   	push   edx
c001ce38:	50                   	push   eax
c001ce39:	53                   	push   ebx
c001ce3a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce3d:	83 c4 20             	add    esp,0x20
c001ce40:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce48:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce50:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce60:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce64:	0f 86 aa 00 00 00    	jbe    c001cf14 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce6a:	0f b7 f5             	movzx  esi,bp
c001ce6d:	6b f6 28             	imul   esi,esi,0x28
c001ce70:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce74:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce7b:	50                   	push   eax
c001ce7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce80:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce84:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce86:	6b c0 28             	imul   eax,eax,0x28
c001ce89:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce8d:	89 d0                	mov    eax,edx
c001ce8f:	31 d2                	xor    edx,edx
c001ce91:	52                   	push   edx
c001ce92:	50                   	push   eax
c001ce93:	53                   	push   ebx
c001ce94:	e8 cd 61 ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001ce99:	83 c4 0c             	add    esp,0xc
c001ce9c:	6a 20                	push   0x20
c001ce9e:	6a 00                	push   0x0
c001cea0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cea4:	52                   	push   edx
c001cea5:	e8 a6 38 fe ff       	call   c0000750 <memset>
c001ceaa:	58                   	pop    eax
c001ceab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cead:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ceb1:	51                   	push   ecx
c001ceb2:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ceb6:	52                   	push   edx
c001ceb7:	6a 00                	push   0x0
c001ceb9:	6a 1f                	push   0x1f
c001cebb:	53                   	push   ebx
c001cebc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cebf:	83 c4 18             	add    esp,0x18
c001cec2:	68 56 cc 02 c0       	push   0xc002cc56
c001cec7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cecb:	52                   	push   edx
c001cecc:	e8 c7 39 fe ff       	call   c0000898 <strcmp>
c001ced1:	83 c4 10             	add    esp,0x10
c001ced4:	85 c0                	test   eax,eax
c001ced6:	75 0f                	jne    c001cee7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ced8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cedb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cedf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cee7:	50                   	push   eax
c001cee8:	50                   	push   eax
c001cee9:	68 5e cc 02 c0       	push   0xc002cc5e
c001ceee:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cef2:	50                   	push   eax
c001cef3:	e8 a0 39 fe ff       	call   c0000898 <strcmp>
c001cef8:	83 c4 10             	add    esp,0x10
c001cefb:	85 c0                	test   eax,eax
c001cefd:	75 0f                	jne    c001cf0e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001ceff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf0e:	45                   	inc    ebp
c001cf0f:	e9 4c ff ff ff       	jmp    c001ce60 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf19:	75 10                	jne    c001cf2b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf1b:	83 ec 0c             	sub    esp,0xc
c001cf1e:	68 66 cc 02 c0       	push   0xc002cc66
c001cf23:	e8 dd d4 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001cf28:	83 c4 10             	add    esp,0x10
c001cf2b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf30:	75 10                	jne    c001cf42 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf32:	83 ec 0c             	sub    esp,0xc
c001cf35:	68 66 cc 02 c0       	push   0xc002cc66
c001cf3a:	e8 c6 d4 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001cf3f:	83 c4 10             	add    esp,0x10
c001cf42:	31 d2                	xor    edx,edx
c001cf44:	50                   	push   eax
c001cf45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf49:	52                   	push   edx
c001cf4a:	50                   	push   eax
c001cf4b:	53                   	push   ebx
c001cf4c:	e8 15 61 ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001cf51:	5a                   	pop    edx
c001cf52:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf56:	e8 a7 29 ff ff       	call   c000f902 <malloc>
c001cf5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf63:	31 c9                	xor    ecx,ecx
c001cf65:	5e                   	pop    esi
c001cf66:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf68:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf6c:	55                   	push   ebp
c001cf6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf71:	51                   	push   ecx
c001cf72:	52                   	push   edx
c001cf73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf77:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf7b:	53                   	push   ebx
c001cf7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf7f:	83 c4 14             	add    esp,0x14
c001cf82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf86:	e8 77 29 ff ff       	call   c000f902 <malloc>
c001cf8b:	89 c6                	mov    esi,eax
c001cf8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf8f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf92:	56                   	push   esi
c001cf93:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cf97:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cf9b:	51                   	push   ecx
c001cf9c:	52                   	push   edx
c001cf9d:	53                   	push   ebx
c001cf9e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfa5:	8b 15 60 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032760
c001cfab:	83 c4 1c             	add    esp,0x1c
c001cfae:	c1 e8 04             	shr    eax,0x4
c001cfb1:	89 04 95 e0 25 03 c0 	mov    DWORD PTR [edx*4-0x3ffcda20],eax
c001cfb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfbc:	31 d2                	xor    edx,edx
c001cfbe:	52                   	push   edx
c001cfbf:	50                   	push   eax
c001cfc0:	53                   	push   ebx
c001cfc1:	e8 a0 60 ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001cfc6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cfc8:	31 d2                	xor    edx,edx
c001cfca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfcd:	56                   	push   esi
c001cfce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfd2:	52                   	push   edx
c001cfd3:	50                   	push   eax
c001cfd4:	53                   	push   ebx
c001cfd5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfd8:	83 c4 14             	add    esp,0x14
c001cfdb:	53                   	push   ebx
c001cfdc:	e8 25 60 ff ff       	call   c0013006 <File::close()>
c001cfe1:	5d                   	pop    ebp
c001cfe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cfe6:	e8 27 29 ff ff       	call   c000f912 <free>
c001cfeb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfee:	e8 1f 29 ff ff       	call   c000f912 <free>
c001cff3:	a1 60 27 03 c0       	mov    eax,ds:0xc0032760
c001cff8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cffc:	8d 50 01             	lea    edx,[eax+0x1]
c001cfff:	89 0c 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],ecx
c001d006:	89 34 85 60 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9a0],esi
c001d00d:	89 15 60 27 03 c0    	mov    DWORD PTR ds:0xc0032760,edx
c001d013:	83 c4 10             	add    esp,0x10
c001d016:	b0 01                	mov    al,0x1
c001d018:	83 c4 5c             	add    esp,0x5c
c001d01b:	5b                   	pop    ebx
c001d01c:	5e                   	pop    esi
c001d01d:	5f                   	pop    edi
c001d01e:	5d                   	pop    ebp
c001d01f:	c3                   	ret    

c001d020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d020:	55                   	push   ebp
c001d021:	57                   	push   edi
c001d022:	56                   	push   esi
c001d023:	53                   	push   ebx
c001d024:	81 ec 68 03 00 00    	sub    esp,0x368
c001d02a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d031:	8b 1d b0 27 03 c0    	mov    ebx,DWORD PTR ds:0xc00327b0
c001d037:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d03b:	68 14 01 00 00       	push   0x114
c001d040:	e8 bd 28 ff ff       	call   c000f902 <malloc>
c001d045:	83 c4 0c             	add    esp,0xc
c001d048:	89 c5                	mov    ebp,eax
c001d04a:	53                   	push   ebx
c001d04b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d052:	50                   	push   eax
c001d053:	e8 ec 5e ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001d058:	5e                   	pop    esi
c001d059:	5f                   	pop    edi
c001d05a:	6a 01                	push   0x1
c001d05c:	55                   	push   ebp
c001d05d:	e8 46 5f ff ff       	call   c0012fa8 <File::open(FileOpenMode)>
c001d062:	83 c4 10             	add    esp,0x10
c001d065:	85 c0                	test   eax,eax
c001d067:	0f 85 a7 06 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d06d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d075:	83 ec 0c             	sub    esp,0xc
c001d078:	6a 34                	push   0x34
c001d07a:	e8 83 28 ff ff       	call   c000f902 <malloc>
c001d07f:	5b                   	pop    ebx
c001d080:	89 c7                	mov    edi,eax
c001d082:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d086:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d089:	53                   	push   ebx
c001d08a:	57                   	push   edi
c001d08b:	6a 00                	push   0x0
c001d08d:	6a 34                	push   0x34
c001d08f:	55                   	push   ebp
c001d090:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d093:	83 c4 20             	add    esp,0x20
c001d096:	85 c0                	test   eax,eax
c001d098:	0f 85 76 06 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d09e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0a4:	0f 85 6a 06 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0aa:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0ad:	85 c0                	test   eax,eax
c001d0af:	0f 84 5f 06 00 00    	je     c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0b5:	31 d2                	xor    edx,edx
c001d0b7:	51                   	push   ecx
c001d0b8:	52                   	push   edx
c001d0b9:	50                   	push   eax
c001d0ba:	55                   	push   ebp
c001d0bb:	e8 a6 5f ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001d0c0:	83 c4 10             	add    esp,0x10
c001d0c3:	85 c0                	test   eax,eax
c001d0c5:	0f 85 49 06 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0cb:	83 ec 0c             	sub    esp,0xc
c001d0ce:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d0d1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d0d9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0dd:	0f af c2             	imul   eax,edx
c001d0e0:	50                   	push   eax
c001d0e1:	e8 1c 28 ff ff       	call   c000f902 <malloc>
c001d0e6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d0f4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0f8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0fc:	0f af c2             	imul   eax,edx
c001d0ff:	99                   	cdq    
c001d100:	52                   	push   edx
c001d101:	50                   	push   eax
c001d102:	55                   	push   ebp
c001d103:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d106:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d109:	83 c4 20             	add    esp,0x20
c001d10c:	85 c0                	test   eax,eax
c001d10e:	0f 84 00 06 00 00    	je     c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d114:	52                   	push   edx
c001d115:	31 d2                	xor    edx,edx
c001d117:	52                   	push   edx
c001d118:	50                   	push   eax
c001d119:	55                   	push   ebp
c001d11a:	e8 47 5f ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001d11f:	83 c4 10             	add    esp,0x10
c001d122:	85 c0                	test   eax,eax
c001d124:	0f 85 ea 05 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d12a:	83 ec 0c             	sub    esp,0xc
c001d12d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d131:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d135:	31 f6                	xor    esi,esi
c001d137:	0f af c2             	imul   eax,edx
c001d13a:	50                   	push   eax
c001d13b:	e8 c2 27 ff ff       	call   c000f902 <malloc>
c001d140:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d143:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d147:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d14a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d14e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d152:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d156:	0f af c2             	imul   eax,edx
c001d159:	99                   	cdq    
c001d15a:	52                   	push   edx
c001d15b:	50                   	push   eax
c001d15c:	55                   	push   ebp
c001d15d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d160:	83 c4 20             	add    esp,0x20
c001d163:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d167:	0f 86 8a 00 00 00    	jbe    c001d1f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d16d:	0f b7 de             	movzx  ebx,si
c001d170:	c1 e3 05             	shl    ebx,0x5
c001d173:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d177:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d17a:	75 75                	jne    c001d1f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d17c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d17f:	31 d2                	xor    edx,edx
c001d181:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d185:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d18c:	50                   	push   eax
c001d18d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d190:	52                   	push   edx
c001d191:	50                   	push   eax
c001d192:	55                   	push   ebp
c001d193:	e8 ce 5e ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001d198:	83 c4 10             	add    esp,0x10
c001d19b:	85 c0                	test   eax,eax
c001d19d:	0f 85 71 05 00 00    	jne    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d1a3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d1aa:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1ad:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d1b1:	31 d2                	xor    edx,edx
c001d1b3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d1b7:	83 ec 0c             	sub    esp,0xc
c001d1ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1be:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1c5:	50                   	push   eax
c001d1c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1ce:	52                   	push   edx
c001d1cf:	50                   	push   eax
c001d1d0:	55                   	push   ebp
c001d1d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1d4:	83 c4 1c             	add    esp,0x1c
c001d1d7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1da:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d1dd:	50                   	push   eax
c001d1de:	6a 00                	push   0x0
c001d1e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1e8:	50                   	push   eax
c001d1e9:	e8 62 35 fe ff       	call   c0000750 <memset>
c001d1ee:	83 c4 10             	add    esp,0x10
c001d1f1:	46                   	inc    esi
c001d1f2:	e9 6c ff ff ff       	jmp    c001d163 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d1f7:	53                   	push   ebx
c001d1f8:	31 db                	xor    ebx,ebx
c001d1fa:	68 00 01 00 00       	push   0x100
c001d1ff:	6a 00                	push   0x0
c001d201:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d205:	50                   	push   eax
c001d206:	e8 45 35 fe ff       	call   c0000750 <memset>
c001d20b:	83 c4 0c             	add    esp,0xc
c001d20e:	68 00 01 00 00       	push   0x100
c001d213:	6a 00                	push   0x0
c001d215:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d21c:	50                   	push   eax
c001d21d:	e8 2e 35 fe ff       	call   c0000750 <memset>
c001d222:	83 c4 10             	add    esp,0x10
c001d225:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d22d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d235:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d23d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d245:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d24d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d251:	0f 86 30 01 00 00    	jbe    c001d387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d257:	0f b7 f3             	movzx  esi,bx
c001d25a:	6b f6 28             	imul   esi,esi,0x28
c001d25d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d261:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d264:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d268:	52                   	push   edx
c001d269:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d26d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d271:	8b 06                	mov    eax,DWORD PTR [esi]
c001d273:	6b d2 28             	imul   edx,edx,0x28
c001d276:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d27a:	31 d2                	xor    edx,edx
c001d27c:	52                   	push   edx
c001d27d:	50                   	push   eax
c001d27e:	55                   	push   ebp
c001d27f:	e8 e2 5d ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001d284:	83 c4 0c             	add    esp,0xc
c001d287:	6a 20                	push   0x20
c001d289:	6a 00                	push   0x0
c001d28b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d292:	51                   	push   ecx
c001d293:	e8 b8 34 fe ff       	call   c0000750 <memset>
c001d298:	59                   	pop    ecx
c001d299:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d29c:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2a0:	52                   	push   edx
c001d2a1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d2a8:	51                   	push   ecx
c001d2a9:	6a 00                	push   0x0
c001d2ab:	6a 1f                	push   0x1f
c001d2ad:	55                   	push   ebp
c001d2ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2b1:	83 c4 1c             	add    esp,0x1c
c001d2b4:	6a 09                	push   0x9
c001d2b6:	68 80 cc 02 c0       	push   0xc002cc80
c001d2bb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2c2:	51                   	push   ecx
c001d2c3:	e8 84 33 fe ff       	call   c000064c <memcmp>
c001d2c8:	83 c4 10             	add    esp,0x10
c001d2cb:	85 c0                	test   eax,eax
c001d2cd:	75 21                	jne    c001d2f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d2cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2d7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2db:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2e2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2e9:	89 d0                	mov    eax,edx
c001d2eb:	40                   	inc    eax
c001d2ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2f0:	50                   	push   eax
c001d2f1:	6a 09                	push   0x9
c001d2f3:	68 8a cc 02 c0       	push   0xc002cc8a
c001d2f8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d2ff:	50                   	push   eax
c001d300:	e8 47 33 fe ff       	call   c000064c <memcmp>
c001d305:	83 c4 10             	add    esp,0x10
c001d308:	85 c0                	test   eax,eax
c001d30a:	75 21                	jne    c001d32d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d30c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d310:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d314:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d318:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d31c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d31f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d326:	89 d0                	mov    eax,edx
c001d328:	40                   	inc    eax
c001d329:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d32d:	50                   	push   eax
c001d32e:	50                   	push   eax
c001d32f:	68 56 cc 02 c0       	push   0xc002cc56
c001d334:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d33b:	50                   	push   eax
c001d33c:	e8 57 35 fe ff       	call   c0000898 <strcmp>
c001d341:	83 c4 10             	add    esp,0x10
c001d344:	85 c0                	test   eax,eax
c001d346:	75 0f                	jne    c001d357 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d348:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d34b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d34f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d353:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d357:	50                   	push   eax
c001d358:	50                   	push   eax
c001d359:	68 5e cc 02 c0       	push   0xc002cc5e
c001d35e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d365:	50                   	push   eax
c001d366:	e8 2d 35 fe ff       	call   c0000898 <strcmp>
c001d36b:	83 c4 10             	add    esp,0x10
c001d36e:	85 c0                	test   eax,eax
c001d370:	75 0f                	jne    c001d381 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d372:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d375:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d37d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d381:	43                   	inc    ebx
c001d382:	e9 c6 fe ff ff       	jmp    c001d24d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d387:	31 d2                	xor    edx,edx
c001d389:	50                   	push   eax
c001d38a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d38e:	52                   	push   edx
c001d38f:	50                   	push   eax
c001d390:	55                   	push   ebp
c001d391:	e8 d0 5c ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001d396:	58                   	pop    eax
c001d397:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d39b:	e8 62 25 ff ff       	call   c000f902 <malloc>
c001d3a0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3a3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d3a7:	31 d2                	xor    edx,edx
c001d3a9:	58                   	pop    eax
c001d3aa:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3ae:	53                   	push   ebx
c001d3af:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3b7:	52                   	push   edx
c001d3b8:	50                   	push   eax
c001d3b9:	55                   	push   ebp
c001d3ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3bd:	83 c4 14             	add    esp,0x14
c001d3c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3c4:	e8 39 25 ff ff       	call   c000f902 <malloc>
c001d3c9:	31 d2                	xor    edx,edx
c001d3cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3cf:	83 c4 0c             	add    esp,0xc
c001d3d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3d6:	52                   	push   edx
c001d3d7:	50                   	push   eax
c001d3d8:	55                   	push   ebp
c001d3d9:	e8 88 5c ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001d3de:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3e1:	31 d2                	xor    edx,edx
c001d3e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3ee:	52                   	push   edx
c001d3ef:	50                   	push   eax
c001d3f0:	55                   	push   ebp
c001d3f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3f4:	83 c4 20             	add    esp,0x20
c001d3f7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d3ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d403:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d407:	0f 84 0b 03 00 00    	je     c001d718 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d40d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d414:	31 d2                	xor    edx,edx
c001d416:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d41a:	c1 e8 03             	shr    eax,0x3
c001d41d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d421:	51                   	push   ecx
c001d422:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d426:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d42a:	52                   	push   edx
c001d42b:	50                   	push   eax
c001d42c:	55                   	push   ebp
c001d42d:	e8 34 5c ff ff       	call   c0013066 <File::seek(unsigned long long)>
c001d432:	5b                   	pop    ebx
c001d433:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d437:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d43e:	e8 bf 24 ff ff       	call   c000f902 <malloc>
c001d443:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d446:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d44a:	31 d2                	xor    edx,edx
c001d44c:	5e                   	pop    esi
c001d44d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d451:	50                   	push   eax
c001d452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d456:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d45a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d461:	52                   	push   edx
c001d462:	50                   	push   eax
c001d463:	55                   	push   ebp
c001d464:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d467:	83 c4 20             	add    esp,0x20
c001d46a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d472:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d476:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d47a:	0f 8d 7c 02 00 00    	jge    c001d6fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d480:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d488:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d48d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d490:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d494:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d498:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d49c:	89 d8                	mov    eax,ebx
c001d49e:	c1 e8 08             	shr    eax,0x8
c001d4a1:	89 c6                	mov    esi,eax
c001d4a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d4a7:	c1 e6 04             	shl    esi,0x4
c001d4aa:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d4ae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d4b1:	85 d2                	test   edx,edx
c001d4b3:	0f 85 bf 00 00 00    	jne    c001d578 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4b9:	83 ec 0c             	sub    esp,0xc
c001d4bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4c0:	03 06                	add    eax,DWORD PTR [esi]
c001d4c2:	50                   	push   eax
c001d4c3:	e8 4b f8 ff ff       	call   c001cd13 <Thr::getAddressOfKernelSymbol(char const*)>
c001d4c8:	83 c4 10             	add    esp,0x10
c001d4cb:	89 c2                	mov    edx,eax
c001d4cd:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d4d2:	85 c0                	test   eax,eax
c001d4d4:	0f 85 9e 00 00 00    	jne    c001d578 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4da:	83 ec 0c             	sub    esp,0xc
c001d4dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4e1:	03 06                	add    eax,DWORD PTR [esi]
c001d4e3:	50                   	push   eax
c001d4e4:	e8 56 10 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d4e9:	83 c4 10             	add    esp,0x10
c001d4ec:	89 c2                	mov    edx,eax
c001d4ee:	85 c0                	test   eax,eax
c001d4f0:	0f 85 82 00 00 00    	jne    c001d578 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4f6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d4fa:	50                   	push   eax
c001d4fb:	50                   	push   eax
c001d4fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d500:	03 06                	add    eax,DWORD PTR [esi]
c001d502:	50                   	push   eax
c001d503:	68 94 cc 02 c0       	push   0xc002cc94
c001d508:	e8 d8 54 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001d50d:	58                   	pop    eax
c001d50e:	5a                   	pop    edx
c001d50f:	68 ae cc 02 c0       	push   0xc002ccae
c001d514:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d51b:	50                   	push   eax
c001d51c:	e8 eb 32 fe ff       	call   c000080c <strcpy>
c001d521:	59                   	pop    ecx
c001d522:	58                   	pop    eax
c001d523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d527:	03 06                	add    eax,DWORD PTR [esi]
c001d529:	50                   	push   eax
c001d52a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d531:	50                   	push   eax
c001d532:	e8 15 34 fe ff       	call   c000094c <strcat>
c001d537:	58                   	pop    eax
c001d538:	5a                   	pop    edx
c001d539:	68 44 cd 02 c0       	push   0xc002cd44
c001d53e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d545:	50                   	push   eax
c001d546:	e8 01 34 fe ff       	call   c000094c <strcat>
c001d54b:	83 c4 10             	add    esp,0x10
c001d54e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d553:	0f 84 5d 01 00 00    	je     c001d6b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d559:	83 ec 0c             	sub    esp,0xc
c001d55c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d563:	50                   	push   eax
c001d564:	e8 9c ce ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001d569:	83 c4 10             	add    esp,0x10
c001d56c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d570:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d574:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d578:	80 fb 01             	cmp    bl,0x1
c001d57b:	0f 85 88 00 00 00    	jne    c001d609 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d581:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d588:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d58c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d590:	01 ce                	add    esi,ecx
c001d592:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d598:	0f 94 c0             	sete   al
c001d59b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5a1:	0f 94 c3             	sete   bl
c001d5a4:	09 c3                	or     ebx,eax
c001d5a6:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5a8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5ad:	74 41                	je     c001d5f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d5af:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d5b2:	84 db                	test   bl,bl
c001d5b4:	75 15                	jne    c001d5cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d5b6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5ba:	66 83 f8 0c          	cmp    ax,0xc
c001d5be:	76 05                	jbe    c001d5c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d5c0:	b8 0c 00 00 00       	mov    eax,0xc
c001d5c5:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5c9:	76 37                	jbe    c001d602 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d5cb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d5cf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5d4:	0f 84 dc 00 00 00    	je     c001d6b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d5da:	83 ec 0c             	sub    esp,0xc
c001d5dd:	68 c5 cc 02 c0       	push   0xc002ccc5
c001d5e2:	e8 1e ce ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001d5e7:	83 c4 10             	add    esp,0x10
c001d5ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5ee:	eb 12                	jmp    c001d602 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d5f0:	01 c1                	add    ecx,eax
c001d5f2:	84 db                	test   bl,bl
c001d5f4:	75 0c                	jne    c001d602 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d5f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5fa:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5fe:	77 02                	ja     c001d602 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d600:	01 d1                	add    ecx,edx
c001d602:	89 0e                	mov    DWORD PTR [esi],ecx
c001d604:	e9 ea 00 00 00       	jmp    c001d6f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d609:	80 fb 02             	cmp    bl,0x2
c001d60c:	75 7c                	jne    c001d68a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d60e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d615:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d619:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d61d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d623:	74 20                	je     c001d645 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d625:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d62b:	74 18                	je     c001d645 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d62d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d631:	b9 0a 00 00 00       	mov    ecx,0xa
c001d636:	66 83 f8 0e          	cmp    ax,0xe
c001d63a:	77 03                	ja     c001d63f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d63c:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d63f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d643:	76 1f                	jbe    c001d664 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d645:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d649:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d64e:	74 66                	je     c001d6b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d650:	83 ec 0c             	sub    esp,0xc
c001d653:	68 e1 cc 02 c0       	push   0xc002cce1
c001d658:	e8 a8 cd ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001d65d:	83 c4 10             	add    esp,0x10
c001d660:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d664:	8b 06                	mov    eax,DWORD PTR [esi]
c001d666:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d66b:	74 13                	je     c001d680 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d66d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d671:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d678:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d67c:	01 c8                	add    eax,ecx
c001d67e:	eb 04                	jmp    c001d684 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d680:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d684:	01 c2                	add    edx,eax
c001d686:	89 16                	mov    DWORD PTR [esi],edx
c001d688:	eb 69                	jmp    c001d6f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d68a:	0f b6 db             	movzx  ebx,bl
c001d68d:	50                   	push   eax
c001d68e:	50                   	push   eax
c001d68f:	53                   	push   ebx
c001d690:	68 fd cc 02 c0       	push   0xc002ccfd
c001d695:	e8 4b 53 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001d69a:	83 c4 10             	add    esp,0x10
c001d69d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d6a2:	74 12                	je     c001d6b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d6a4:	83 ec 0c             	sub    esp,0xc
c001d6a7:	68 08 cd 02 c0       	push   0xc002cd08
c001d6ac:	e8 54 cd ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001d6b1:	83 c4 10             	add    esp,0x10
c001d6b4:	eb 3d                	jmp    c001d6f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d6b6:	83 ec 0c             	sub    esp,0xc
c001d6b9:	55                   	push   ebp
c001d6ba:	e8 47 59 ff ff       	call   c0013006 <File::close()>
c001d6bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6c8:	59                   	pop    ecx
c001d6c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6cd:	e8 40 22 ff ff       	call   c000f912 <free>
c001d6d2:	5b                   	pop    ebx
c001d6d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6d7:	e8 36 22 ff ff       	call   c000f912 <free>
c001d6dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6df:	e8 2e 22 ff ff       	call   c000f912 <free>
c001d6e4:	5e                   	pop    esi
c001d6e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e9:	e8 24 22 ff ff       	call   c000f912 <free>
c001d6ee:	83 c4 10             	add    esp,0x10
c001d6f1:	eb 21                	jmp    c001d714 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d6f3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6f7:	e9 76 fd ff ff       	jmp    c001d472 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6fc:	83 ec 0c             	sub    esp,0xc
c001d6ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d703:	e8 0a 22 ff ff       	call   c000f912 <free>
c001d708:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d70c:	83 c4 10             	add    esp,0x10
c001d70f:	e9 eb fc ff ff       	jmp    c001d3ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d714:	31 c0                	xor    eax,eax
c001d716:	eb 33                	jmp    c001d74b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d718:	83 ec 0c             	sub    esp,0xc
c001d71b:	55                   	push   ebp
c001d71c:	e8 e5 58 ff ff       	call   c0013006 <File::close()>
c001d721:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d724:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d72a:	58                   	pop    eax
c001d72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d72f:	e8 de 21 ff ff       	call   c000f912 <free>
c001d734:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d737:	e8 d6 21 ff ff       	call   c000f912 <free>
c001d73c:	5a                   	pop    edx
c001d73d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d741:	e8 cc 21 ff ff       	call   c000f912 <free>
c001d746:	83 c4 10             	add    esp,0x10
c001d749:	b0 01                	mov    al,0x1
c001d74b:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d751:	5b                   	pop    ebx
c001d752:	5e                   	pop    esi
c001d753:	5f                   	pop    edi
c001d754:	5d                   	pop    ebp
c001d755:	c3                   	ret    

c001d756 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d756:	56                   	push   esi
c001d757:	31 d2                	xor    edx,edx
c001d759:	53                   	push   ebx
c001d75a:	8b 1d c0 1f 03 c0    	mov    ebx,DWORD PTR ds:0xc0031fc0
c001d760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d764:	39 d3                	cmp    ebx,edx
c001d766:	7e 1b                	jle    c001d783 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d768:	8b 04 95 e0 21 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcde20]
c001d76f:	39 c8                	cmp    eax,ecx
c001d771:	77 0d                	ja     c001d780 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d773:	8b 34 95 e0 1f 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce020]
c001d77a:	01 c6                	add    esi,eax
c001d77c:	39 ce                	cmp    esi,ecx
c001d77e:	77 05                	ja     c001d785 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d780:	42                   	inc    edx
c001d781:	eb e1                	jmp    c001d764 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d783:	31 c0                	xor    eax,eax
c001d785:	5b                   	pop    ebx
c001d786:	5e                   	pop    esi
c001d787:	c3                   	ret    

c001d788 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d788:	53                   	push   ebx
c001d789:	31 c0                	xor    eax,eax
c001d78b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d78f:	8b 1d c0 1f 03 c0    	mov    ebx,DWORD PTR ds:0xc0031fc0
c001d795:	39 c3                	cmp    ebx,eax
c001d797:	7e 22                	jle    c001d7bb <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d799:	8b 14 85 e0 21 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcde20]
c001d7a0:	39 ca                	cmp    edx,ecx
c001d7a2:	77 14                	ja     c001d7b8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7a4:	03 14 85 e0 1f 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce020]
c001d7ab:	39 ca                	cmp    edx,ecx
c001d7ad:	76 09                	jbe    c001d7b8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7af:	8b 04 85 e0 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc20]
c001d7b6:	eb 05                	jmp    c001d7bd <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7b8:	40                   	inc    eax
c001d7b9:	eb da                	jmp    c001d795 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7bb:	31 c0                	xor    eax,eax
c001d7bd:	5b                   	pop    ebx
c001d7be:	c3                   	ret    

c001d7bf <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d7bf:	53                   	push   ebx
c001d7c0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d7c4:	53                   	push   ebx
c001d7c5:	e8 8c ff ff ff       	call   c001d756 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d7ca:	5a                   	pop    edx
c001d7cb:	31 d2                	xor    edx,edx
c001d7cd:	85 c0                	test   eax,eax
c001d7cf:	74 04                	je     c001d7d5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d7d1:	89 da                	mov    edx,ebx
c001d7d3:	29 c2                	sub    edx,eax
c001d7d5:	89 d0                	mov    eax,edx
c001d7d7:	5b                   	pop    ebx
c001d7d8:	c3                   	ret    

c001d7d9 <Thr::loadDLL(char const*, bool)>:
c001d7d9:	55                   	push   ebp
c001d7da:	57                   	push   edi
c001d7db:	56                   	push   esi
c001d7dc:	53                   	push   ebx
c001d7dd:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7e3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d7ea:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d7f1:	56                   	push   esi
c001d7f2:	68 20 cd 02 c0       	push   0xc002cd20
c001d7f7:	e8 e9 51 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001d7fc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d803:	e8 fa 20 ff ff       	call   c000f902 <malloc>
c001d808:	83 c4 0c             	add    esp,0xc
c001d80b:	89 c3                	mov    ebx,eax
c001d80d:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c001d813:	56                   	push   esi
c001d814:	50                   	push   eax
c001d815:	e8 2a 57 ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001d81a:	83 c4 10             	add    esp,0x10
c001d81d:	85 db                	test   ebx,ebx
c001d81f:	75 3c                	jne    c001d85d <Thr::loadDLL(char const*, bool)+0x84>
c001d821:	89 f8                	mov    eax,edi
c001d823:	84 c0                	test   al,al
c001d825:	0f 84 cc 01 00 00    	je     c001d9f7 <Thr::loadDLL(char const*, bool)+0x21e>
c001d82b:	55                   	push   ebp
c001d82c:	55                   	push   ebp
c001d82d:	68 31 cd 02 c0       	push   0xc002cd31
c001d832:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d836:	55                   	push   ebp
c001d837:	e8 d0 2f fe ff       	call   c000080c <strcpy>
c001d83c:	58                   	pop    eax
c001d83d:	5a                   	pop    edx
c001d83e:	56                   	push   esi
c001d83f:	55                   	push   ebp
c001d840:	e8 07 31 fe ff       	call   c000094c <strcat>
c001d845:	59                   	pop    ecx
c001d846:	58                   	pop    eax
c001d847:	68 44 cd 02 c0       	push   0xc002cd44
c001d84c:	55                   	push   ebp
c001d84d:	e8 fa 30 fe ff       	call   c000094c <strcat>
c001d852:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d855:	e8 ab cb ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001d85a:	83 c4 10             	add    esp,0x10
c001d85d:	51                   	push   ecx
c001d85e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d862:	50                   	push   eax
c001d863:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d867:	50                   	push   eax
c001d868:	53                   	push   ebx
c001d869:	e8 e6 59 ff ff       	call   c0013254 <File::stat(unsigned long long*, bool*)>
c001d86e:	83 c4 10             	add    esp,0x10
c001d871:	85 db                	test   ebx,ebx
c001d873:	74 0c                	je     c001d881 <Thr::loadDLL(char const*, bool)+0xa8>
c001d875:	83 ec 0c             	sub    esp,0xc
c001d878:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d87a:	53                   	push   ebx
c001d87b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d87e:	83 c4 10             	add    esp,0x10
c001d881:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d886:	75 0a                	jne    c001d892 <Thr::loadDLL(char const*, bool)+0xb9>
c001d888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d88c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d890:	75 3c                	jne    c001d8ce <Thr::loadDLL(char const*, bool)+0xf5>
c001d892:	89 f8                	mov    eax,edi
c001d894:	84 c0                	test   al,al
c001d896:	0f 84 43 01 00 00    	je     c001d9df <Thr::loadDLL(char const*, bool)+0x206>
c001d89c:	51                   	push   ecx
c001d89d:	51                   	push   ecx
c001d89e:	68 31 cd 02 c0       	push   0xc002cd31
c001d8a3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d8a7:	53                   	push   ebx
c001d8a8:	e8 5f 2f fe ff       	call   c000080c <strcpy>
c001d8ad:	5d                   	pop    ebp
c001d8ae:	58                   	pop    eax
c001d8af:	56                   	push   esi
c001d8b0:	53                   	push   ebx
c001d8b1:	e8 96 30 fe ff       	call   c000094c <strcat>
c001d8b6:	58                   	pop    eax
c001d8b7:	5a                   	pop    edx
c001d8b8:	68 44 cd 02 c0       	push   0xc002cd44
c001d8bd:	53                   	push   ebx
c001d8be:	e8 89 30 fe ff       	call   c000094c <strcat>
c001d8c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8c6:	e8 3a cb ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001d8cb:	83 c4 10             	add    esp,0x10
c001d8ce:	52                   	push   edx
c001d8cf:	6a 03                	push   0x3
c001d8d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d8d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d8d9:	05 ff 0f 00 00       	add    eax,0xfff
c001d8de:	83 d2 00             	adc    edx,0x0
c001d8e1:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8e5:	50                   	push   eax
c001d8e6:	ff 35 d0 f3 02 c0    	push   DWORD PTR ds:0xc002f3d0
c001d8ec:	e8 27 46 ff ff       	call   c0011f18 <VAS::allocatePages(int, int)>
c001d8f1:	59                   	pop    ecx
c001d8f2:	89 c3                	mov    ebx,eax
c001d8f4:	5d                   	pop    ebp
c001d8f5:	50                   	push   eax
c001d8f6:	68 46 cd 02 c0       	push   0xc002cd46
c001d8fb:	e8 e5 50 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001d900:	89 34 24             	mov    DWORD PTR [esp],esi
c001d903:	e8 64 2e fe ff       	call   c000076c <strlen>
c001d908:	8b 2d c0 1f 03 c0    	mov    ebp,DWORD PTR ds:0xc0031fc0
c001d90e:	40                   	inc    eax
c001d90f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d912:	e8 eb 1f ff ff       	call   c000f902 <malloc>
c001d917:	89 04 ad e0 23 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdc20],eax
c001d91e:	58                   	pop    eax
c001d91f:	a1 c0 1f 03 c0       	mov    eax,ds:0xc0031fc0
c001d924:	5a                   	pop    edx
c001d925:	56                   	push   esi
c001d926:	ff 34 85 e0 23 03 c0 	push   DWORD PTR [eax*4-0x3ffcdc20]
c001d92d:	e8 da 2e fe ff       	call   c000080c <strcpy>
c001d932:	a1 c0 1f 03 c0       	mov    eax,ds:0xc0031fc0
c001d937:	8d 50 01             	lea    edx,[eax+0x1]
c001d93a:	89 1c 85 e0 21 03 c0 	mov    DWORD PTR [eax*4-0x3ffcde20],ebx
c001d941:	89 15 c0 1f 03 c0    	mov    DWORD PTR ds:0xc0031fc0,edx
c001d947:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d94b:	83 c4 0c             	add    esp,0xc
c001d94e:	89 14 85 e0 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce020],edx
c001d955:	6a 01                	push   0x1
c001d957:	53                   	push   ebx
c001d958:	56                   	push   esi
c001d959:	e8 c2 f6 ff ff       	call   c001d020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d95e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d962:	83 c4 10             	add    esp,0x10
c001d965:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d96a:	0f 85 83 00 00 00    	jne    c001d9f3 <Thr::loadDLL(char const*, bool)+0x21a>
c001d970:	89 f8                	mov    eax,edi
c001d972:	84 c0                	test   al,al
c001d974:	74 6d                	je     c001d9e3 <Thr::loadDLL(char const*, bool)+0x20a>
c001d976:	83 ec 0c             	sub    esp,0xc
c001d979:	68 53 cd 02 c0       	push   0xc002cd53
c001d97e:	e8 82 ca ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001d983:	83 c4 10             	add    esp,0x10
c001d986:	eb 5b                	jmp    c001d9e3 <Thr::loadDLL(char const*, bool)+0x20a>
c001d988:	89 ee                	mov    esi,ebp
c001d98a:	50                   	push   eax
c001d98b:	c1 e6 0c             	shl    esi,0xc
c001d98e:	50                   	push   eax
c001d98f:	01 de                	add    esi,ebx
c001d991:	56                   	push   esi
c001d992:	ff 35 d0 f3 02 c0    	push   DWORD PTR ds:0xc002f3d0
c001d998:	e8 e3 40 ff ff       	call   c0011a80 <VAS::getPageTableEntry(unsigned long)>
c001d99d:	83 c4 10             	add    esp,0x10
c001d9a0:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d9a3:	75 0c                	jne    c001d9b1 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d9a5:	83 ec 0c             	sub    esp,0xc
c001d9a8:	56                   	push   esi
c001d9a9:	e8 9d 22 ff ff       	call   c000fc4b <Phys::freePage(unsigned long)>
c001d9ae:	83 c4 10             	add    esp,0x10
c001d9b1:	45                   	inc    ebp
c001d9b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9ba:	05 ff 0f 00 00       	add    eax,0xfff
c001d9bf:	bf 00 00 00 00       	mov    edi,0x0
c001d9c4:	83 d2 00             	adc    edx,0x0
c001d9c7:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d9cb:	c1 ea 0c             	shr    edx,0xc
c001d9ce:	39 c5                	cmp    ebp,eax
c001d9d0:	89 d1                	mov    ecx,edx
c001d9d2:	89 f8                	mov    eax,edi
c001d9d4:	19 c8                	sbb    eax,ecx
c001d9d6:	72 b0                	jb     c001d988 <Thr::loadDLL(char const*, bool)+0x1af>
c001d9d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d9dd:	75 18                	jne    c001d9f7 <Thr::loadDLL(char const*, bool)+0x21e>
c001d9df:	31 db                	xor    ebx,ebx
c001d9e1:	eb 14                	jmp    c001d9f7 <Thr::loadDLL(char const*, bool)+0x21e>
c001d9e3:	83 ec 0c             	sub    esp,0xc
c001d9e6:	68 72 cd 02 c0       	push   0xc002cd72
c001d9eb:	e8 15 ca ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001d9f0:	83 c4 10             	add    esp,0x10
c001d9f3:	31 ed                	xor    ebp,ebp
c001d9f5:	eb bb                	jmp    c001d9b2 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d9f7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d9fd:	89 d8                	mov    eax,ebx
c001d9ff:	5b                   	pop    ebx
c001da00:	5e                   	pop    esi
c001da01:	5f                   	pop    edi
c001da02:	5d                   	pop    ebp
c001da03:	c3                   	ret    

c001da04 <Thr::executeDLL(unsigned long, void*)>:
c001da04:	56                   	push   esi
c001da05:	53                   	push   ebx
c001da06:	52                   	push   edx
c001da07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da0b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da0f:	85 db                	test   ebx,ebx
c001da11:	75 10                	jne    c001da23 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da13:	83 ec 0c             	sub    esp,0xc
c001da16:	68 8e cd 02 c0       	push   0xc002cd8e
c001da1b:	e8 e5 c9 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001da20:	83 c4 10             	add    esp,0x10
c001da23:	50                   	push   eax
c001da24:	50                   	push   eax
c001da25:	53                   	push   ebx
c001da26:	68 b8 cd 02 c0       	push   0xc002cdb8
c001da2b:	e8 b5 4f ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001da30:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da34:	89 d8                	mov    eax,ebx
c001da36:	83 c4 14             	add    esp,0x14
c001da39:	5b                   	pop    ebx
c001da3a:	5e                   	pop    esi
c001da3b:	ff e0                	jmp    eax
c001da3d:	90                   	nop

c001da3e <userModeEntryPoint(void*)>:
c001da3e:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001da43:	48                   	dec    eax
c001da44:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001da49:	75 01                	jne    c001da4c <userModeEntryPoint(void*)+0xe>
c001da4b:	fb                   	sti    
c001da4c:	fb                   	sti    
c001da4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da52:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001da55:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001da5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da5f:	e9 c6 28 fe ff       	jmp    c000032a <goToUsermode>

c001da64 <changeTSS>:
c001da64:	83 ec 14             	sub    esp,0x14
c001da67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da6c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da6f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da74:	c1 e2 15             	shl    edx,0x15
c001da77:	29 d0                	sub    eax,edx
c001da79:	50                   	push   eax
c001da7a:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001da7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da85:	05 7c 11 00 00       	add    eax,0x117c
c001da8a:	50                   	push   eax
c001da8b:	e8 8e 34 ff ff       	call   c0010f1e <TSS::setESP(unsigned long)>
c001da90:	83 c4 1c             	add    esp,0x1c
c001da93:	c3                   	ret    

c001da94 <switchToThread(ThreadControlBlock*)>:
c001da94:	57                   	push   edi
c001da95:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001da9a:	56                   	push   esi
c001da9b:	85 c0                	test   eax,eax
c001da9d:	53                   	push   ebx
c001da9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001daa2:	0f 85 88 00 00 00    	jne    c001db30 <switchToThread(ThreadControlBlock*)+0x9c>
c001daa8:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001daab:	3c ff                	cmp    al,0xff
c001daad:	74 7d                	je     c001db2c <switchToThread(ThreadControlBlock*)+0x98>
c001daaf:	0f b6 d0             	movzx  edx,al
c001dab2:	b8 84 03 00 00       	mov    eax,0x384
c001dab7:	29 d0                	sub    eax,edx
c001dab9:	c1 e0 10             	shl    eax,0x10
c001dabc:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dabf:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dac2:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c001dac7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dacd:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dad4:	74 4a                	je     c001db20 <switchToThread(ThreadControlBlock*)+0x8c>
c001dad6:	0f 31                	rdtsc  
c001dad8:	a3 c8 27 03 c0       	mov    ds:0xc00327c8,eax
c001dadd:	89 c6                	mov    esi,eax
c001dadf:	89 d7                	mov    edi,edx
c001dae1:	2b 35 b8 27 03 c0    	sub    esi,DWORD PTR ds:0xc00327b8
c001dae7:	89 15 cc 27 03 c0    	mov    DWORD PTR ds:0xc00327cc,edx
c001daed:	1b 3d bc 27 03 c0    	sbb    edi,DWORD PTR ds:0xc00327bc
c001daf3:	89 35 c0 27 03 c0    	mov    DWORD PTR ds:0xc00327c0,esi
c001daf9:	a3 b8 27 03 c0       	mov    ds:0xc00327b8,eax
c001dafe:	89 3d c4 27 03 c0    	mov    DWORD PTR ds:0xc00327c4,edi
c001db04:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001db0a:	89 15 bc 27 03 c0    	mov    DWORD PTR ds:0xc00327bc,edx
c001db10:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001db13:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001db16:	01 c6                	add    esi,eax
c001db18:	11 d7                	adc    edi,edx
c001db1a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001db1d:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001db20:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001db24:	5b                   	pop    ebx
c001db25:	5e                   	pop    esi
c001db26:	5f                   	pop    edi
c001db27:	e9 36 28 fe ff       	jmp    c0000362 <switchToThreadASM>
c001db2c:	31 c0                	xor    eax,eax
c001db2e:	eb 8f                	jmp    c001dabf <switchToThread(ThreadControlBlock*)+0x2b>
c001db30:	5b                   	pop    ebx
c001db31:	c7 05 80 27 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x1
c001db3b:	5e                   	pop    esi
c001db3c:	5f                   	pop    edi
c001db3d:	c3                   	ret    

c001db3e <Process::addArgs(char**)>:
c001db3e:	57                   	push   edi
c001db3f:	56                   	push   esi
c001db40:	53                   	push   ebx
c001db41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001db49:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001db53:	85 ff                	test   edi,edi
c001db55:	74 3d                	je     c001db94 <Process::addArgs(char**)+0x56>
c001db57:	8b 07                	mov    eax,DWORD PTR [edi]
c001db59:	85 c0                	test   eax,eax
c001db5b:	74 37                	je     c001db94 <Process::addArgs(char**)+0x56>
c001db5d:	31 db                	xor    ebx,ebx
c001db5f:	83 ec 0c             	sub    esp,0xc
c001db62:	50                   	push   eax
c001db63:	e8 04 2c fe ff       	call   c000076c <strlen>
c001db68:	40                   	inc    eax
c001db69:	89 04 24             	mov    DWORD PTR [esp],eax
c001db6c:	e8 91 1d ff ff       	call   c000f902 <malloc>
c001db71:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001db78:	5a                   	pop    edx
c001db79:	59                   	pop    ecx
c001db7a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001db7d:	43                   	inc    ebx
c001db7e:	50                   	push   eax
c001db7f:	e8 88 2c fe ff       	call   c000080c <strcpy>
c001db84:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001db8a:	83 c4 10             	add    esp,0x10
c001db8d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001db90:	85 c0                	test   eax,eax
c001db92:	75 cb                	jne    c001db5f <Process::addArgs(char**)+0x21>
c001db94:	5b                   	pop    ebx
c001db95:	5e                   	pop    esi
c001db96:	5f                   	pop    edi
c001db97:	c3                   	ret    

c001db98 <Process::Process(char const*, Process*, char**)>:
c001db98:	56                   	push   esi
c001db99:	53                   	push   ebx
c001db9a:	83 ec 14             	sub    esp,0x14
c001db9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba1:	05 0c 02 00 00       	add    eax,0x20c
c001dba6:	bb 07 00 00 00       	mov    ebx,0x7
c001dbab:	89 c6                	mov    esi,eax
c001dbad:	85 db                	test   ebx,ebx
c001dbaf:	78 12                	js     c001dbc3 <Process::Process(char const*, Process*, char**)+0x2b>
c001dbb1:	83 ec 0c             	sub    esp,0xc
c001dbb4:	56                   	push   esi
c001dbb5:	e8 d8 ba 00 00       	call   c0029692 <ThreadControlBlock::ThreadControlBlock()>
c001dbba:	83 c4 10             	add    esp,0x10
c001dbbd:	83 c6 63             	add    esi,0x63
c001dbc0:	4b                   	dec    ebx
c001dbc1:	eb ea                	jmp    c001dbad <Process::Process(char const*, Process*, char**)+0x15>
c001dbc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc7:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dbce:	83 ec 0c             	sub    esp,0xc
c001dbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd5:	e8 84 c6 ff ff       	call   c001a25e <Krnl::newProcessEnv(Process*)>
c001dbda:	83 c4 10             	add    esp,0x10
c001dbdd:	89 c2                	mov    edx,eax
c001dbdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbe3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dbe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbed:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dbf6:	a1 f0 e7 02 c0       	mov    eax,ds:0xc002e7f0
c001dbfb:	8d 50 01             	lea    edx,[eax+0x1]
c001dbfe:	89 15 f0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7f0,edx
c001dc04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dc08:	89 02                	mov    DWORD PTR [edx],eax
c001dc0a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dc12:	83 ec 0c             	sub    esp,0xc
c001dc15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc19:	e8 e4 1c ff ff       	call   c000f902 <malloc>
c001dc1e:	83 c4 10             	add    esp,0x10
c001dc21:	89 c3                	mov    ebx,eax
c001dc23:	83 ec 08             	sub    esp,0x8
c001dc26:	6a 00                	push   0x0
c001dc28:	53                   	push   ebx
c001dc29:	e8 92 46 ff ff       	call   c00122c0 <VAS::VAS(bool)>
c001dc2e:	83 c4 10             	add    esp,0x10
c001dc31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc35:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dc3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc3f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dc49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dc51:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dc57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc5b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc61:	85 c0                	test   eax,eax
c001dc63:	74 42                	je     c001dca7 <Process::Process(char const*, Process*, char**)+0x10f>
c001dc65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc69:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc6f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dc75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc79:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dc7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc83:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dc89:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dc8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc93:	05 0c 01 00 00       	add    eax,0x10c
c001dc98:	83 ec 08             	sub    esp,0x8
c001dc9b:	52                   	push   edx
c001dc9c:	50                   	push   eax
c001dc9d:	e8 6a 2b fe ff       	call   c000080c <strcpy>
c001dca2:	83 c4 10             	add    esp,0x10
c001dca5:	eb 63                	jmp    c001dd0a <Process::Process(char const*, Process*, char**)+0x172>
c001dca7:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dcaf:	83 ec 0c             	sub    esp,0xc
c001dcb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dcb6:	e8 47 1c ff ff       	call   c000f902 <malloc>
c001dcbb:	83 c4 10             	add    esp,0x10
c001dcbe:	89 c3                	mov    ebx,eax
c001dcc0:	83 ec 08             	sub    esp,0x8
c001dcc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dcc7:	53                   	push   ebx
c001dcc8:	e8 33 2f ff ff       	call   c0010c00 <VgaText::VgaText(char const*)>
c001dccd:	83 c4 10             	add    esp,0x10
c001dcd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcd4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dcda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcde:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dce4:	83 ec 0c             	sub    esp,0xc
c001dce7:	50                   	push   eax
c001dce8:	e8 1a 26 ff ff       	call   c0010307 <addToTerminalCycle(VgaText*)>
c001dced:	83 c4 10             	add    esp,0x10
c001dcf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dcf4:	05 0c 01 00 00       	add    eax,0x10c
c001dcf9:	83 ec 08             	sub    esp,0x8
c001dcfc:	68 d7 cd 02 c0       	push   0xc002cdd7
c001dd01:	50                   	push   eax
c001dd02:	e8 05 2b fe ff       	call   c000080c <strcpy>
c001dd07:	83 c4 10             	add    esp,0x10
c001dd0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd0e:	83 c0 0c             	add    eax,0xc
c001dd11:	83 ec 08             	sub    esp,0x8
c001dd14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd18:	50                   	push   eax
c001dd19:	e8 ee 2a fe ff       	call   c000080c <strcpy>
c001dd1e:	83 c4 10             	add    esp,0x10
c001dd21:	83 ec 08             	sub    esp,0x8
c001dd24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dd28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd2c:	e8 0d fe ff ff       	call   c001db3e <Process::addArgs(char**)>
c001dd31:	83 c4 10             	add    esp,0x10
c001dd34:	83 ec 08             	sub    esp,0x8
c001dd37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dd3f:	e8 a6 ed ff ff       	call   c001caea <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dd44:	83 c4 10             	add    esp,0x10
c001dd47:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dd4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dd4f:	83 f0 01             	xor    eax,0x1
c001dd52:	88 c2                	mov    dl,al
c001dd54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd58:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dd5e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dd63:	83 ec 08             	sub    esp,0x8
c001dd66:	50                   	push   eax
c001dd67:	68 04 cf 02 c0       	push   0xc002cf04
c001dd6c:	e8 74 4c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001dd71:	83 c4 10             	add    esp,0x10
c001dd74:	90                   	nop
c001dd75:	83 c4 14             	add    esp,0x14
c001dd78:	5b                   	pop    ebx
c001dd79:	5e                   	pop    esi
c001dd7a:	c3                   	ret    
c001dd7b:	90                   	nop

c001dd7c <Process::Process(bool, char const*, Process*, char**)>:
c001dd7c:	56                   	push   esi
c001dd7d:	53                   	push   ebx
c001dd7e:	83 ec 24             	sub    esp,0x24
c001dd81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dd85:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dd89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd8d:	05 0c 02 00 00       	add    eax,0x20c
c001dd92:	bb 07 00 00 00       	mov    ebx,0x7
c001dd97:	89 c6                	mov    esi,eax
c001dd99:	85 db                	test   ebx,ebx
c001dd9b:	78 12                	js     c001ddaf <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dd9d:	83 ec 0c             	sub    esp,0xc
c001dda0:	56                   	push   esi
c001dda1:	e8 ec b8 00 00       	call   c0029692 <ThreadControlBlock::ThreadControlBlock()>
c001dda6:	83 c4 10             	add    esp,0x10
c001dda9:	83 c6 63             	add    esi,0x63
c001ddac:	4b                   	dec    ebx
c001ddad:	eb ea                	jmp    c001dd99 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001ddaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001ddba:	83 ec 0c             	sub    esp,0xc
c001ddbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddc1:	e8 98 c4 ff ff       	call   c001a25e <Krnl::newProcessEnv(Process*)>
c001ddc6:	83 c4 10             	add    esp,0x10
c001ddc9:	89 c2                	mov    edx,eax
c001ddcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddcf:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001ddd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dde2:	a1 f0 e7 02 c0       	mov    eax,ds:0xc002e7f0
c001dde7:	8d 50 01             	lea    edx,[eax+0x1]
c001ddea:	89 15 f0 e7 02 c0    	mov    DWORD PTR ds:0xc002e7f0,edx
c001ddf0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ddf4:	89 02                	mov    DWORD PTR [edx],eax
c001ddf6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001ddfe:	83 ec 0c             	sub    esp,0xc
c001de01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001de05:	e8 f8 1a ff ff       	call   c000f902 <malloc>
c001de0a:	83 c4 10             	add    esp,0x10
c001de0d:	89 c3                	mov    ebx,eax
c001de0f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001de14:	83 ec 08             	sub    esp,0x8
c001de17:	50                   	push   eax
c001de18:	53                   	push   ebx
c001de19:	e8 a2 44 ff ff       	call   c00122c0 <VAS::VAS(bool)>
c001de1e:	83 c4 10             	add    esp,0x10
c001de21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de25:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001de2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de2f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001de39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de3d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de41:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001de47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de4b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de51:	85 c0                	test   eax,eax
c001de53:	74 42                	je     c001de97 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001de55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de59:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de5f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001de65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de69:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001de6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de73:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de79:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001de7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de83:	05 0c 01 00 00       	add    eax,0x10c
c001de88:	83 ec 08             	sub    esp,0x8
c001de8b:	52                   	push   edx
c001de8c:	50                   	push   eax
c001de8d:	e8 7a 29 fe ff       	call   c000080c <strcpy>
c001de92:	83 c4 10             	add    esp,0x10
c001de95:	eb 63                	jmp    c001defa <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001de97:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001de9f:	83 ec 0c             	sub    esp,0xc
c001dea2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dea6:	e8 57 1a ff ff       	call   c000f902 <malloc>
c001deab:	83 c4 10             	add    esp,0x10
c001deae:	89 c3                	mov    ebx,eax
c001deb0:	83 ec 08             	sub    esp,0x8
c001deb3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001deb7:	53                   	push   ebx
c001deb8:	e8 43 2d ff ff       	call   c0010c00 <VgaText::VgaText(char const*)>
c001debd:	83 c4 10             	add    esp,0x10
c001dec0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dec4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001deca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dece:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ded4:	83 ec 0c             	sub    esp,0xc
c001ded7:	50                   	push   eax
c001ded8:	e8 2a 24 ff ff       	call   c0010307 <addToTerminalCycle(VgaText*)>
c001dedd:	83 c4 10             	add    esp,0x10
c001dee0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dee4:	05 0c 01 00 00       	add    eax,0x10c
c001dee9:	83 ec 08             	sub    esp,0x8
c001deec:	68 d7 cd 02 c0       	push   0xc002cdd7
c001def1:	50                   	push   eax
c001def2:	e8 15 29 fe ff       	call   c000080c <strcpy>
c001def7:	83 c4 10             	add    esp,0x10
c001defa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001defe:	83 c0 0c             	add    eax,0xc
c001df01:	83 ec 08             	sub    esp,0x8
c001df04:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001df08:	50                   	push   eax
c001df09:	e8 fe 28 fe ff       	call   c000080c <strcpy>
c001df0e:	83 c4 10             	add    esp,0x10
c001df11:	83 ec 08             	sub    esp,0x8
c001df14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df1c:	e8 1d fc ff ff       	call   c001db3e <Process::addArgs(char**)>
c001df21:	83 c4 10             	add    esp,0x10
c001df24:	90                   	nop
c001df25:	83 c4 24             	add    esp,0x24
c001df28:	5b                   	pop    ebx
c001df29:	5e                   	pop    esi
c001df2a:	c3                   	ret    

c001df2b <taskStartupFunction>:
c001df2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df30:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001df33:	c3                   	ret    

c001df34 <Semaphore::Semaphore(int)>:
c001df34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df3c:	89 10                	mov    DWORD PTR [eax],edx
c001df3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df42:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df4d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001df54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df58:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001df5f:	90                   	nop
c001df60:	c3                   	ret    
c001df61:	90                   	nop

c001df62 <Mutex::Mutex()>:
c001df62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df66:	6a 01                	push   0x1
c001df68:	50                   	push   eax
c001df69:	e8 c6 ff ff ff       	call   c001df34 <Semaphore::Semaphore(int)>
c001df6e:	83 c4 08             	add    esp,0x8
c001df71:	90                   	nop
c001df72:	c3                   	ret    
c001df73:	90                   	nop

c001df74 <Process::createThread(void (*)(void*), void*, int)>:
c001df74:	55                   	push   ebp
c001df75:	31 c9                	xor    ecx,ecx
c001df77:	57                   	push   edi
c001df78:	56                   	push   esi
c001df79:	53                   	push   ebx
c001df7a:	83 ec 1c             	sub    esp,0x1c
c001df7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001df81:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001df88:	89 f2                	mov    edx,esi
c001df8a:	0f b7 c2             	movzx  eax,dx
c001df8d:	83 e2 01             	and    edx,0x1
c001df90:	74 16                	je     c001dfa8 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001df92:	d1 f8                	sar    eax,1
c001df94:	41                   	inc    ecx
c001df95:	89 c2                	mov    edx,eax
c001df97:	83 f9 10             	cmp    ecx,0x10
c001df9a:	75 ee                	jne    c001df8a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001df9c:	83 c4 1c             	add    esp,0x1c
c001df9f:	31 db                	xor    ebx,ebx
c001dfa1:	89 d8                	mov    eax,ebx
c001dfa3:	5b                   	pop    ebx
c001dfa4:	5e                   	pop    esi
c001dfa5:	5f                   	pop    edi
c001dfa6:	5d                   	pop    ebp
c001dfa7:	c3                   	ret    
c001dfa8:	b8 01 00 00 00       	mov    eax,0x1
c001dfad:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001dfb0:	d3 e0                	shl    eax,cl
c001dfb2:	09 c6                	or     esi,eax
c001dfb4:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001dfb7:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001dfbe:	89 c6                	mov    esi,eax
c001dfc0:	c1 e6 05             	shl    esi,0x5
c001dfc3:	01 f0                	add    eax,esi
c001dfc5:	01 d8                	add    eax,ebx
c001dfc7:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dfce:	75 0a                	jne    c001dfda <Process::createThread(void (*)(void*), void*, int)+0x66>
c001dfd0:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001dfda:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfe0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dfe4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dfe7:	01 ca                	add    edx,ecx
c001dfe9:	83 ec 08             	sub    esp,0x8
c001dfec:	89 d0                	mov    eax,edx
c001dfee:	c1 e0 05             	shl    eax,0x5
c001dff1:	01 d0                	add    eax,edx
c001dff3:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dff7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dffb:	01 d8                	add    eax,ebx
c001dffd:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e003:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e009:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e00f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e015:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e01b:	89 cd                	mov    ebp,ecx
c001e01d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e021:	f7 dd                	neg    ebp
c001e023:	c1 e5 15             	shl    ebp,0x15
c001e026:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e02c:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e032:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e03c:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e042:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e04c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e056:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e05a:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e061:	53                   	push   ebx
c001e062:	68 a4 27 03 c0       	push   0xc00327a4
c001e067:	e8 e0 b3 00 00       	call   c002944c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e06c:	89 d8                	mov    eax,ebx
c001e06e:	83 c4 10             	add    esp,0x10
c001e071:	83 c4 1c             	add    esp,0x1c
c001e074:	5b                   	pop    ebx
c001e075:	5e                   	pop    esi
c001e076:	5f                   	pop    edi
c001e077:	5d                   	pop    ebp
c001e078:	c3                   	ret    
c001e079:	90                   	nop

c001e07a <Process::createUserThread()>:
c001e07a:	83 ec 0c             	sub    esp,0xc
c001e07d:	68 80 00 00 00       	push   0x80
c001e082:	6a 00                	push   0x0
c001e084:	68 3e da 01 c0       	push   0xc001da3e
c001e089:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e08d:	e8 e2 fe ff ff       	call   c001df74 <Process::createThread(void (*)(void*), void*, int)>
c001e092:	83 c4 1c             	add    esp,0x1c
c001e095:	c3                   	ret    

c001e096 <setupMultitasking(void (*)())>:
c001e096:	56                   	push   esi
c001e097:	53                   	push   ebx
c001e098:	51                   	push   ecx
c001e099:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e09d:	eb 10                	jmp    c001e0af <setupMultitasking(void (*)())+0x19>
c001e09f:	83 ec 0c             	sub    esp,0xc
c001e0a2:	68 a4 27 03 c0       	push   0xc00327a4
c001e0a7:	e8 f2 b2 00 00       	call   c002939e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0ac:	83 c4 10             	add    esp,0x10
c001e0af:	83 ec 0c             	sub    esp,0xc
c001e0b2:	68 a4 27 03 c0       	push   0xc00327a4
c001e0b7:	e8 be b2 00 00       	call   c002937a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0bc:	83 c4 10             	add    esp,0x10
c001e0bf:	84 c0                	test   al,al
c001e0c1:	74 dc                	je     c001e09f <setupMultitasking(void (*)())+0x9>
c001e0c3:	83 ec 0c             	sub    esp,0xc
c001e0c6:	68 3f 07 00 00       	push   0x73f
c001e0cb:	e8 32 18 ff ff       	call   c000f902 <malloc>
c001e0d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e0d7:	89 c3                	mov    ebx,eax
c001e0d9:	6a 00                	push   0x0
c001e0db:	68 db cd 02 c0       	push   0xc002cddb
c001e0e0:	6a 01                	push   0x1
c001e0e2:	50                   	push   eax
c001e0e3:	e8 94 fc ff ff       	call   c001dd7c <Process::Process(bool, char const*, Process*, char**)>
c001e0e8:	83 c4 18             	add    esp,0x18
c001e0eb:	89 1d b0 27 03 c0    	mov    DWORD PTR ds:0xc00327b0,ebx
c001e0f1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e0f7:	68 2c cf 02 c0       	push   0xc002cf2c
c001e0fc:	e8 e4 48 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e101:	58                   	pop    eax
c001e102:	5a                   	pop    edx
c001e103:	6a 63                	push   0x63
c001e105:	68 60 cf 02 c0       	push   0xc002cf60
c001e10a:	e8 d6 48 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e10f:	59                   	pop    ecx
c001e110:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e116:	e8 ed 26 ff ff       	call   c0010808 <setActiveTerminal(VgaText*)>
c001e11b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e123:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e12d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e136:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e140:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e146:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e14c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e156:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e160:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e16a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e170:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e17a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e180:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e18a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e190:	58                   	pop    eax
c001e191:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e197:	5a                   	pop    edx
c001e198:	68 d7 cd 02 c0       	push   0xc002cdd7
c001e19d:	50                   	push   eax
c001e19e:	e8 69 26 fe ff       	call   c000080c <strcpy>
c001e1a3:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e1aa:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e1ae:	83 c4 14             	add    esp,0x14
c001e1b1:	5b                   	pop    ebx
c001e1b2:	5e                   	pop    esi
c001e1b3:	e9 9c 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1b8 <schedule()>:
c001e1b8:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001e1bd:	85 c0                	test   eax,eax
c001e1bf:	74 0b                	je     c001e1cc <schedule()+0x14>
c001e1c1:	c7 05 80 27 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x1
c001e1cb:	c3                   	ret    
c001e1cc:	53                   	push   ebx
c001e1cd:	83 ec 14             	sub    esp,0x14
c001e1d0:	68 a4 27 03 c0       	push   0xc00327a4
c001e1d5:	e8 a0 b1 00 00       	call   c002937a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1da:	83 c4 10             	add    esp,0x10
c001e1dd:	84 c0                	test   al,al
c001e1df:	75 38                	jne    c001e219 <schedule()+0x61>
c001e1e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1e9:	4a                   	dec    edx
c001e1ea:	74 32                	je     c001e21e <schedule()+0x66>
c001e1ec:	83 ec 0c             	sub    esp,0xc
c001e1ef:	68 a4 27 03 c0       	push   0xc00327a4
c001e1f4:	e8 9d b1 00 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1f9:	c7 04 24 a4 27 03 c0 	mov    DWORD PTR [esp],0xc00327a4
c001e200:	89 c3                	mov    ebx,eax
c001e202:	e8 97 b1 00 00       	call   c002939e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e207:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e20e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e211:	e8 7e f8 ff ff       	call   c001da94 <switchToThread(ThreadControlBlock*)>
c001e216:	83 c4 10             	add    esp,0x10
c001e219:	83 c4 08             	add    esp,0x8
c001e21c:	5b                   	pop    ebx
c001e21d:	c3                   	ret    
c001e21e:	83 ec 08             	sub    esp,0x8
c001e221:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e228:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e22e:	68 a4 27 03 c0       	push   0xc00327a4
c001e233:	e8 14 b2 00 00       	call   c002944c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e238:	83 c4 10             	add    esp,0x10
c001e23b:	eb af                	jmp    c001e1ec <schedule()+0x34>
c001e23d:	90                   	nop

c001e23e <Semaphore::tryAcquire()>:
c001e23e:	53                   	push   ebx
c001e23f:	83 ec 08             	sub    esp,0x8
c001e242:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e246:	fa                   	cli    
c001e247:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e24c:	8d 50 01             	lea    edx,[eax+0x1]
c001e24f:	89 15 88 27 03 c0    	mov    DWORD PTR ds:0xc0032788,edx
c001e255:	8b 15 84 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032784
c001e25b:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e25e:	89 1d 84 27 03 c0    	mov    DWORD PTR ds:0xc0032784,ebx
c001e264:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e267:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e269:	7c 2a                	jl     c001e295 <Semaphore::tryAcquire()+0x57>
c001e26b:	89 15 84 27 03 c0    	mov    DWORD PTR ds:0xc0032784,edx
c001e271:	85 d2                	test   edx,edx
c001e273:	75 0a                	jne    c001e27f <Semaphore::tryAcquire()+0x41>
c001e275:	8b 15 80 27 03 c0    	mov    edx,DWORD PTR ds:0xc0032780
c001e27b:	85 d2                	test   edx,edx
c001e27d:	75 5b                	jne    c001e2da <Semaphore::tryAcquire()+0x9c>
c001e27f:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e284:	85 c0                	test   eax,eax
c001e286:	74 07                	je     c001e28f <Semaphore::tryAcquire()+0x51>
c001e288:	31 c0                	xor    eax,eax
c001e28a:	83 c4 08             	add    esp,0x8
c001e28d:	5b                   	pop    ebx
c001e28e:	c3                   	ret    
c001e28f:	fb                   	sti    
c001e290:	83 c4 08             	add    esp,0x8
c001e293:	5b                   	pop    ebx
c001e294:	c3                   	ret    
c001e295:	43                   	inc    ebx
c001e296:	89 15 84 27 03 c0    	mov    DWORD PTR ds:0xc0032784,edx
c001e29c:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e29f:	85 d2                	test   edx,edx
c001e2a1:	75 1f                	jne    c001e2c2 <Semaphore::tryAcquire()+0x84>
c001e2a3:	8b 0d 80 27 03 c0    	mov    ecx,DWORD PTR ds:0xc0032780
c001e2a9:	85 c9                	test   ecx,ecx
c001e2ab:	74 15                	je     c001e2c2 <Semaphore::tryAcquire()+0x84>
c001e2ad:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c001e2b7:	e8 fc fe ff ff       	call   c001e1b8 <schedule()>
c001e2bc:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e2c1:	48                   	dec    eax
c001e2c2:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e2c7:	85 c0                	test   eax,eax
c001e2c9:	75 08                	jne    c001e2d3 <Semaphore::tryAcquire()+0x95>
c001e2cb:	fb                   	sti    
c001e2cc:	b0 01                	mov    al,0x1
c001e2ce:	83 c4 08             	add    esp,0x8
c001e2d1:	5b                   	pop    ebx
c001e2d2:	c3                   	ret    
c001e2d3:	b0 01                	mov    al,0x1
c001e2d5:	83 c4 08             	add    esp,0x8
c001e2d8:	5b                   	pop    ebx
c001e2d9:	c3                   	ret    
c001e2da:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c001e2e4:	e8 cf fe ff ff       	call   c001e1b8 <schedule()>
c001e2e9:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e2ee:	48                   	dec    eax
c001e2ef:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e2f4:	85 c0                	test   eax,eax
c001e2f6:	75 90                	jne    c001e288 <Semaphore::tryAcquire()+0x4a>
c001e2f8:	eb 95                	jmp    c001e28f <Semaphore::tryAcquire()+0x51>

c001e2fa <Semaphore::assertLocked(char const*)>:
c001e2fa:	83 ec 0c             	sub    esp,0xc
c001e2fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e301:	fa                   	cli    
c001e302:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001e308:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001e30d:	8d 48 01             	lea    ecx,[eax+0x1]
c001e310:	89 0d 84 27 03 c0    	mov    DWORD PTR ds:0xc0032784,ecx
c001e316:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e318:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e31b:	7c 24                	jl     c001e341 <Semaphore::assertLocked(char const*)+0x47>
c001e31d:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c001e322:	85 c0                	test   eax,eax
c001e324:	75 09                	jne    c001e32f <Semaphore::assertLocked(char const*)+0x35>
c001e326:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c001e32b:	85 c0                	test   eax,eax
c001e32d:	75 29                	jne    c001e358 <Semaphore::assertLocked(char const*)+0x5e>
c001e32f:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e334:	48                   	dec    eax
c001e335:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e33a:	75 01                	jne    c001e33d <Semaphore::assertLocked(char const*)+0x43>
c001e33c:	fb                   	sti    
c001e33d:	83 c4 0c             	add    esp,0xc
c001e340:	c3                   	ret    
c001e341:	83 ec 0c             	sub    esp,0xc
c001e344:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e348:	e8 b8 c0 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001e34d:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001e352:	83 c4 10             	add    esp,0x10
c001e355:	48                   	dec    eax
c001e356:	eb c5                	jmp    c001e31d <Semaphore::assertLocked(char const*)+0x23>
c001e358:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c001e362:	e8 51 fe ff ff       	call   c001e1b8 <schedule()>
c001e367:	eb c6                	jmp    c001e32f <Semaphore::assertLocked(char const*)+0x35>

c001e369 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e369:	83 ec 14             	sub    esp,0x14
c001e36c:	ff 35 88 27 03 c0    	push   DWORD PTR ds:0xc0032788
c001e372:	68 84 cf 02 c0       	push   0xc002cf84
c001e377:	e8 69 46 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e37c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e381:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e385:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e388:	e8 2b fe ff ff       	call   c001e1b8 <schedule()>
c001e38d:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e392:	83 c4 10             	add    esp,0x10
c001e395:	48                   	dec    eax
c001e396:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e39b:	85 c0                	test   eax,eax
c001e39d:	75 06                	jne    c001e3a5 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e39f:	fb                   	sti    
c001e3a0:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e3a5:	83 ec 08             	sub    esp,0x8
c001e3a8:	50                   	push   eax
c001e3a9:	68 b8 cf 02 c0       	push   0xc002cfb8
c001e3ae:	e8 32 46 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e3b3:	83 c4 1c             	add    esp,0x1c
c001e3b6:	c3                   	ret    

c001e3b7 <blockTask(TaskState)>:
c001e3b7:	83 ec 0c             	sub    esp,0xc
c001e3ba:	fa                   	cli    
c001e3bb:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001e3c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3ca:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e3cd:	e8 e6 fd ff ff       	call   c001e1b8 <schedule()>
c001e3d2:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e3d7:	48                   	dec    eax
c001e3d8:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e3dd:	75 01                	jne    c001e3e0 <blockTask(TaskState)+0x29>
c001e3df:	fb                   	sti    
c001e3e0:	83 c4 0c             	add    esp,0xc
c001e3e3:	c3                   	ret    

c001e3e4 <waitTask(int, int*, int)>:
c001e3e4:	83 ec 18             	sub    esp,0x18
c001e3e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3f0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e3f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e3f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3fc:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e3ff:	6a 07                	push   0x7
c001e401:	e8 b1 ff ff ff       	call   c001e3b7 <blockTask(TaskState)>
c001e406:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e40b:	83 c4 10             	add    esp,0x10
c001e40e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e411:	85 d2                	test   edx,edx
c001e413:	74 0a                	je     c001e41f <waitTask(int, int*, int)+0x3b>
c001e415:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e418:	89 02                	mov    DWORD PTR [edx],eax
c001e41a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e41f:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e422:	83 c4 0c             	add    esp,0xc
c001e425:	c3                   	ret    

c001e426 <nanoSleepUntil(unsigned long long)>:
c001e426:	83 ec 0c             	sub    esp,0xc
c001e429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e42d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e431:	3b 05 d0 f8 02 c0    	cmp    eax,DWORD PTR ds:0xc002f8d0
c001e437:	89 d1                	mov    ecx,edx
c001e439:	1b 0d d4 f8 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f8d4
c001e43f:	73 04                	jae    c001e445 <nanoSleepUntil(unsigned long long)+0x1f>
c001e441:	83 c4 0c             	add    esp,0xc
c001e444:	c3                   	ret    
c001e445:	fa                   	cli    
c001e446:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001e44c:	83 ec 08             	sub    esp,0x8
c001e44f:	ff 05 84 27 03 c0    	inc    DWORD PTR ds:0xc0032784
c001e455:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e45b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e45e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e461:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e467:	68 98 27 03 c0       	push   0xc0032798
c001e46c:	e8 db af 00 00       	call   c002944c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e471:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e478:	e8 3a ff ff ff       	call   c001e3b7 <blockTask(TaskState)>
c001e47d:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001e482:	83 c4 10             	add    esp,0x10
c001e485:	48                   	dec    eax
c001e486:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c001e48b:	85 c0                	test   eax,eax
c001e48d:	75 09                	jne    c001e498 <nanoSleepUntil(unsigned long long)+0x72>
c001e48f:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c001e494:	85 c0                	test   eax,eax
c001e496:	75 12                	jne    c001e4aa <nanoSleepUntil(unsigned long long)+0x84>
c001e498:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e49d:	48                   	dec    eax
c001e49e:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e4a3:	75 9c                	jne    c001e441 <nanoSleepUntil(unsigned long long)+0x1b>
c001e4a5:	fb                   	sti    
c001e4a6:	83 c4 0c             	add    esp,0xc
c001e4a9:	c3                   	ret    
c001e4aa:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c001e4b4:	e8 ff fc ff ff       	call   c001e1b8 <schedule()>
c001e4b9:	eb dd                	jmp    c001e498 <nanoSleepUntil(unsigned long long)+0x72>

c001e4bb <nanoSleep(unsigned long long)>:
c001e4bb:	a1 d0 f8 02 c0       	mov    eax,ds:0xc002f8d0
c001e4c0:	8b 15 d4 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f8d4
c001e4c6:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e4ca:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e4ce:	e9 53 ff ff ff       	jmp    c001e426 <nanoSleepUntil(unsigned long long)>

c001e4d3 <sleep(unsigned long long)>:
c001e4d3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e4db:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e4e0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e4e4:	01 ca                	add    edx,ecx
c001e4e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e4ea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e4ee:	eb cb                	jmp    c001e4bb <nanoSleep(unsigned long long)>

c001e4f0 <Semaphore::acquire()>:
c001e4f0:	83 ec 0c             	sub    esp,0xc
c001e4f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e4f7:	fa                   	cli    
c001e4f8:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001e4fd:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001e503:	8d 48 01             	lea    ecx,[eax+0x1]
c001e506:	89 0d 84 27 03 c0    	mov    DWORD PTR ds:0xc0032784,ecx
c001e50c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e50f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e511:	7d 28                	jge    c001e53b <Semaphore::acquire()+0x4b>
c001e513:	41                   	inc    ecx
c001e514:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e517:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c001e51c:	85 c0                	test   eax,eax
c001e51e:	75 09                	jne    c001e529 <Semaphore::acquire()+0x39>
c001e520:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c001e525:	85 c0                	test   eax,eax
c001e527:	75 4e                	jne    c001e577 <Semaphore::acquire()+0x87>
c001e529:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e52e:	48                   	dec    eax
c001e52f:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e534:	75 01                	jne    c001e537 <Semaphore::acquire()+0x47>
c001e536:	fb                   	sti    
c001e537:	83 c4 0c             	add    esp,0xc
c001e53a:	c3                   	ret    
c001e53b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e540:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e547:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e54a:	85 c9                	test   ecx,ecx
c001e54c:	74 3a                	je     c001e588 <Semaphore::acquire()+0x98>
c001e54e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e551:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e557:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e55a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e55f:	83 ec 0c             	sub    esp,0xc
c001e562:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e565:	6a 05                	push   0x5
c001e567:	e8 4b fe ff ff       	call   c001e3b7 <blockTask(TaskState)>
c001e56c:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001e571:	83 c4 10             	add    esp,0x10
c001e574:	48                   	dec    eax
c001e575:	eb a0                	jmp    c001e517 <Semaphore::acquire()+0x27>
c001e577:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c001e581:	e8 32 fc ff ff       	call   c001e1b8 <schedule()>
c001e586:	eb a1                	jmp    c001e529 <Semaphore::acquire()+0x39>
c001e588:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e58d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e590:	eb c8                	jmp    c001e55a <Semaphore::acquire()+0x6a>

c001e592 <taskReturned>:
c001e592:	83 ec 18             	sub    esp,0x18
c001e595:	68 ec cf 02 c0       	push   0xc002cfec
c001e59a:	e8 66 be ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001e59f:	83 c4 10             	add    esp,0x10
c001e5a2:	83 ec 0c             	sub    esp,0xc
c001e5a5:	6a 02                	push   0x2
c001e5a7:	e8 0b fe ff ff       	call   c001e3b7 <blockTask(TaskState)>
c001e5ac:	fa                   	cli    
c001e5ad:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001e5b3:	e8 00 fc ff ff       	call   c001e1b8 <schedule()>
c001e5b8:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e5bd:	83 c4 10             	add    esp,0x10
c001e5c0:	48                   	dec    eax
c001e5c1:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e5c6:	85 c0                	test   eax,eax
c001e5c8:	75 d8                	jne    c001e5a2 <taskReturned+0x10>
c001e5ca:	fb                   	sti    
c001e5cb:	eb d5                	jmp    c001e5a2 <taskReturned+0x10>

c001e5cd <Thr::processFromPID(int)>:
c001e5cd:	57                   	push   edi
c001e5ce:	56                   	push   esi
c001e5cf:	53                   	push   ebx
c001e5d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5d4:	83 ec 0c             	sub    esp,0xc
c001e5d7:	68 e2 cd 02 c0       	push   0xc002cde2
c001e5dc:	e8 04 44 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e5e1:	fa                   	cli    
c001e5e2:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001e5e8:	c7 04 24 a4 27 03 c0 	mov    DWORD PTR [esp],0xc00327a4
c001e5ef:	e8 a2 ad 00 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5f4:	83 c4 10             	add    esp,0x10
c001e5f7:	89 c7                	mov    edi,eax
c001e5f9:	eb 14                	jmp    c001e60f <Thr::processFromPID(int)+0x42>
c001e5fb:	83 ec 0c             	sub    esp,0xc
c001e5fe:	68 a4 27 03 c0       	push   0xc00327a4
c001e603:	e8 8e ad 00 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e608:	83 c4 10             	add    esp,0x10
c001e60b:	39 f8                	cmp    eax,edi
c001e60d:	74 49                	je     c001e658 <Thr::processFromPID(int)+0x8b>
c001e60f:	83 ec 0c             	sub    esp,0xc
c001e612:	68 a4 27 03 c0       	push   0xc00327a4
c001e617:	e8 7a ad 00 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e61c:	c7 04 24 a4 27 03 c0 	mov    DWORD PTR [esp],0xc00327a4
c001e623:	89 c3                	mov    ebx,eax
c001e625:	e8 74 ad 00 00       	call   c002939e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e62a:	58                   	pop    eax
c001e62b:	5a                   	pop    edx
c001e62c:	53                   	push   ebx
c001e62d:	68 a4 27 03 c0       	push   0xc00327a4
c001e632:	e8 15 ae 00 00       	call   c002944c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e637:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	39 30                	cmp    DWORD PTR [eax],esi
c001e63f:	75 ba                	jne    c001e5fb <Thr::processFromPID(int)+0x2e>
c001e641:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e646:	48                   	dec    eax
c001e647:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e64c:	74 07                	je     c001e655 <Thr::processFromPID(int)+0x88>
c001e64e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e651:	5b                   	pop    ebx
c001e652:	5e                   	pop    esi
c001e653:	5f                   	pop    edi
c001e654:	c3                   	ret    
c001e655:	fb                   	sti    
c001e656:	eb f6                	jmp    c001e64e <Thr::processFromPID(int)+0x81>
c001e658:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e65d:	48                   	dec    eax
c001e65e:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e663:	75 01                	jne    c001e666 <Thr::processFromPID(int)+0x99>
c001e665:	fb                   	sti    
c001e666:	83 ec 0c             	sub    esp,0xc
c001e669:	68 fd cd 02 c0       	push   0xc002cdfd
c001e66e:	e8 72 43 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e673:	83 c4 10             	add    esp,0x10
c001e676:	31 c0                	xor    eax,eax
c001e678:	5b                   	pop    ebx
c001e679:	5e                   	pop    esi
c001e67a:	5f                   	pop    edi
c001e67b:	c3                   	ret    

c001e67c <unblockTask(ThreadControlBlock*)>:
c001e67c:	53                   	push   ebx
c001e67d:	83 ec 08             	sub    esp,0x8
c001e680:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e684:	fa                   	cli    
c001e685:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001e68b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e68e:	85 c0                	test   eax,eax
c001e690:	74 66                	je     c001e6f8 <unblockTask(ThreadControlBlock*)+0x7c>
c001e692:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e695:	48                   	dec    eax
c001e696:	74 31                	je     c001e6c9 <unblockTask(ThreadControlBlock*)+0x4d>
c001e698:	83 ec 0c             	sub    esp,0xc
c001e69b:	68 a4 27 03 c0       	push   0xc00327a4
c001e6a0:	e8 f1 ac 00 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6a5:	83 c4 10             	add    esp,0x10
c001e6a8:	85 c0                	test   eax,eax
c001e6aa:	75 17                	jne    c001e6c3 <unblockTask(ThreadControlBlock*)+0x47>
c001e6ac:	eb 68                	jmp    c001e716 <unblockTask(ThreadControlBlock*)+0x9a>
c001e6ae:	83 ec 08             	sub    esp,0x8
c001e6b1:	50                   	push   eax
c001e6b2:	68 a4 27 03 c0       	push   0xc00327a4
c001e6b7:	e8 78 b0 00 00       	call   c0029734 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e6bc:	83 c4 10             	add    esp,0x10
c001e6bf:	85 c0                	test   eax,eax
c001e6c1:	74 53                	je     c001e716 <unblockTask(ThreadControlBlock*)+0x9a>
c001e6c3:	39 c3                	cmp    ebx,eax
c001e6c5:	75 e7                	jne    c001e6ae <unblockTask(ThreadControlBlock*)+0x32>
c001e6c7:	eb 1c                	jmp    c001e6e5 <unblockTask(ThreadControlBlock*)+0x69>
c001e6c9:	83 ec 0c             	sub    esp,0xc
c001e6cc:	68 dc d0 02 c0       	push   0xc002d0dc
c001e6d1:	e8 0f 43 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e6d6:	c7 04 24 68 d0 02 c0 	mov    DWORD PTR [esp],0xc002d068
c001e6dd:	e8 03 43 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e6e2:	83 c4 10             	add    esp,0x10
c001e6e5:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e6ea:	48                   	dec    eax
c001e6eb:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001e6f0:	75 01                	jne    c001e6f3 <unblockTask(ThreadControlBlock*)+0x77>
c001e6f2:	fb                   	sti    
c001e6f3:	83 c4 08             	add    esp,0x8
c001e6f6:	5b                   	pop    ebx
c001e6f7:	c3                   	ret    
c001e6f8:	83 ec 0c             	sub    esp,0xc
c001e6fb:	68 20 d0 02 c0       	push   0xc002d020
c001e700:	e8 e0 42 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e705:	c7 04 24 68 d0 02 c0 	mov    DWORD PTR [esp],0xc002d068
c001e70c:	e8 d4 42 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e711:	83 c4 10             	add    esp,0x10
c001e714:	eb cf                	jmp    c001e6e5 <unblockTask(ThreadControlBlock*)+0x69>
c001e716:	83 ec 08             	sub    esp,0x8
c001e719:	53                   	push   ebx
c001e71a:	68 a4 27 03 c0       	push   0xc00327a4
c001e71f:	e8 28 ad 00 00       	call   c002944c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e724:	83 c4 10             	add    esp,0x10
c001e727:	eb bc                	jmp    c001e6e5 <unblockTask(ThreadControlBlock*)+0x69>

c001e729 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e729:	55                   	push   ebp
c001e72a:	57                   	push   edi
c001e72b:	56                   	push   esi
c001e72c:	53                   	push   ebx
c001e72d:	83 ec 1c             	sub    esp,0x1c
c001e730:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e734:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e737:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e73d:	85 ff                	test   edi,edi
c001e73f:	7e 20                	jle    c001e761 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e741:	31 f6                	xor    esi,esi
c001e743:	83 ec 0c             	sub    esp,0xc
c001e746:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e74d:	46                   	inc    esi
c001e74e:	e8 bf 11 ff ff       	call   c000f912 <free>
c001e753:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e756:	83 c4 10             	add    esp,0x10
c001e759:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e75f:	7f e2                	jg     c001e743 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e761:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e76b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e770:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e773:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e776:	d3 c0                	rol    eax,cl
c001e778:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e77f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e782:	89 f7                	mov    edi,esi
c001e784:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e78c:	0f 85 74 01 00 00    	jne    c001e906 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e792:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e798:	85 ed                	test   ebp,ebp
c001e79a:	74 1b                	je     c001e7b7 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e79c:	83 ec 0c             	sub    esp,0xc
c001e79f:	55                   	push   ebp
c001e7a0:	e8 d5 b9 ff ff       	call   c001a17a <EnvVarContainer::~EnvVarContainer()>
c001e7a5:	59                   	pop    ecx
c001e7a6:	5e                   	pop    esi
c001e7a7:	6a 0c                	push   0xc
c001e7a9:	55                   	push   ebp
c001e7aa:	e8 56 41 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c001e7af:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e7b2:	83 c4 10             	add    esp,0x10
c001e7b5:	89 f7                	mov    edi,esi
c001e7b7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e7bd:	85 c0                	test   eax,eax
c001e7bf:	0f 84 aa 00 00 00    	je     c001e86f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e7c5:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e7c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7cc:	31 c9                	xor    ecx,ecx
c001e7ce:	eb 10                	jmp    c001e7e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e7d0:	41                   	inc    ecx
c001e7d1:	83 f9 10             	cmp    ecx,0x10
c001e7d4:	0f 84 95 00 00 00    	je     c001e86f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e7da:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e7e0:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e7e7:	d3 fa                	sar    edx,cl
c001e7e9:	83 e2 01             	and    edx,0x1
c001e7ec:	74 e2                	je     c001e7d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7ee:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e7f1:	01 ca                	add    edx,ecx
c001e7f3:	89 d5                	mov    ebp,edx
c001e7f5:	c1 e5 05             	shl    ebp,0x5
c001e7f8:	01 ea                	add    edx,ebp
c001e7fa:	01 d0                	add    eax,edx
c001e7fc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e802:	83 fd 07             	cmp    ebp,0x7
c001e805:	75 c9                	jne    c001e7d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e807:	05 40 02 00 00       	add    eax,0x240
c001e80c:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e80f:	83 fd ff             	cmp    ebp,0xffffffff
c001e812:	0f 8c 08 01 00 00    	jl     c001e920 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e818:	0f 84 b9 01 00 00    	je     c001e9d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e81e:	85 ed                	test   ebp,ebp
c001e820:	0f 84 a0 01 00 00    	je     c001e9c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e826:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e828:	75 a6                	jne    c001e7d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e82a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e830:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e834:	01 d0                	add    eax,edx
c001e836:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e83a:	83 ec 0c             	sub    esp,0xc
c001e83d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e843:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e846:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e84c:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e853:	50                   	push   eax
c001e854:	e8 23 fe ff ff       	call   c001e67c <unblockTask(ThreadControlBlock*)>
c001e859:	83 c4 10             	add    esp,0x10
c001e85c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e85f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e863:	89 f7                	mov    edi,esi
c001e865:	41                   	inc    ecx
c001e866:	83 f9 10             	cmp    ecx,0x10
c001e869:	0f 85 6b ff ff ff    	jne    c001e7da <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e86f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e875:	85 c0                	test   eax,eax
c001e877:	74 5d                	je     c001e8d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e879:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e87f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e885:	74 4f                	je     c001e8d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e887:	83 ec 0c             	sub    esp,0xc
c001e88a:	68 a4 27 03 c0       	push   0xc00327a4
c001e88f:	e8 02 ab 00 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e894:	c7 04 24 a4 27 03 c0 	mov    DWORD PTR [esp],0xc00327a4
c001e89b:	89 c7                	mov    edi,eax
c001e89d:	e8 d8 aa 00 00       	call   c002937a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e8a2:	83 c4 10             	add    esp,0x10
c001e8a5:	84 c0                	test   al,al
c001e8a7:	0f 84 e4 00 00 00    	je     c001e991 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e8ad:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8b0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e8b6:	85 d2                	test   edx,edx
c001e8b8:	74 0f                	je     c001e8c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e8ba:	83 ec 0c             	sub    esp,0xc
c001e8bd:	8b 02                	mov    eax,DWORD PTR [edx]
c001e8bf:	52                   	push   edx
c001e8c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e8c3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8c6:	83 c4 10             	add    esp,0x10
c001e8c9:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e8d3:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e8d6:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e8dc:	85 db                	test   ebx,ebx
c001e8de:	74 16                	je     c001e8f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e8e0:	83 ec 0c             	sub    esp,0xc
c001e8e3:	53                   	push   ebx
c001e8e4:	e8 b1 33 ff ff       	call   c0011c9a <VAS::~VAS()>
c001e8e9:	58                   	pop    eax
c001e8ea:	5a                   	pop    edx
c001e8eb:	6a 14                	push   0x14
c001e8ed:	53                   	push   ebx
c001e8ee:	e8 12 40 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c001e8f3:	83 c4 10             	add    esp,0x10
c001e8f6:	83 ec 0c             	sub    esp,0xc
c001e8f9:	68 14 ce 02 c0       	push   0xc002ce14
c001e8fe:	e8 e2 40 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e903:	83 c4 10             	add    esp,0x10
c001e906:	83 ec 08             	sub    esp,0x8
c001e909:	68 3f 07 00 00       	push   0x73f
c001e90e:	68 22 ce 02 c0       	push   0xc002ce22
c001e913:	e8 cd 40 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e918:	83 c4 2c             	add    esp,0x2c
c001e91b:	5b                   	pop    ebx
c001e91c:	5e                   	pop    esi
c001e91d:	5f                   	pop    edi
c001e91e:	5d                   	pop    ebp
c001e91f:	c3                   	ret    
c001e920:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e924:	83 ec 0c             	sub    esp,0xc
c001e927:	68 20 d1 02 c0       	push   0xc002d120
c001e92c:	e8 d4 ba ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001e931:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e934:	83 c4 10             	add    esp,0x10
c001e937:	89 f7                	mov    edi,esi
c001e939:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e93d:	e9 8e fe ff ff       	jmp    c001e7d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e942:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e948:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e94e:	75 1c                	jne    c001e96c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e950:	83 ec 0c             	sub    esp,0xc
c001e953:	68 88 d1 02 c0       	push   0xc002d188
c001e958:	e8 88 40 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001e95d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e964:	e8 4e fa ff ff       	call   c001e3b7 <blockTask(TaskState)>
c001e969:	83 c4 10             	add    esp,0x10
c001e96c:	83 ec 08             	sub    esp,0x8
c001e96f:	56                   	push   esi
c001e970:	68 a4 27 03 c0       	push   0xc00327a4
c001e975:	e8 d2 aa 00 00       	call   c002944c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e97a:	c7 04 24 a4 27 03 c0 	mov    DWORD PTR [esp],0xc00327a4
c001e981:	e8 10 aa 00 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e986:	83 c4 10             	add    esp,0x10
c001e989:	39 f8                	cmp    eax,edi
c001e98b:	0f 84 1c ff ff ff    	je     c001e8ad <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e991:	83 ec 0c             	sub    esp,0xc
c001e994:	68 a4 27 03 c0       	push   0xc00327a4
c001e999:	e8 f8 a9 00 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e99e:	c7 04 24 a4 27 03 c0 	mov    DWORD PTR [esp],0xc00327a4
c001e9a5:	89 c6                	mov    esi,eax
c001e9a7:	e8 f2 a9 00 00       	call   c002939e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e9ac:	83 c4 10             	add    esp,0x10
c001e9af:	39 f3                	cmp    ebx,esi
c001e9b1:	74 b9                	je     c001e96c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e9b3:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e9b6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e9b9:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e9bf:	75 ab                	jne    c001e96c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e9c1:	e9 7c ff ff ff       	jmp    c001e942 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e9c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e9ca:	83 ec 0c             	sub    esp,0xc
c001e9cd:	68 54 d1 02 c0       	push   0xc002d154
c001e9d2:	e9 55 ff ff ff       	jmp    c001e92c <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e9d7:	8b 36                	mov    esi,DWORD PTR [esi]
c001e9d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e9dd:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e9e0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e9e3:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e9e9:	01 d7                	add    edi,edx
c001e9eb:	89 f8                	mov    eax,edi
c001e9ed:	e9 44 fe ff ff       	jmp    c001e836 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e9f2 <cleanerTaskFunction(void*)>:
c001e9f2:	53                   	push   ebx
c001e9f3:	83 ec 08             	sub    esp,0x8
c001e9f6:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001e9fb:	48                   	dec    eax
c001e9fc:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001ea01:	75 01                	jne    c001ea04 <cleanerTaskFunction(void*)+0x12>
c001ea03:	fb                   	sti    
c001ea04:	fa                   	cli    
c001ea05:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001ea0a:	80 3d 6c 27 03 c0 00 	cmp    BYTE PTR ds:0xc003276c,0x0
c001ea11:	8d 50 01             	lea    edx,[eax+0x1]
c001ea14:	89 15 88 27 03 c0    	mov    DWORD PTR ds:0xc0032788,edx
c001ea1a:	0f 84 b9 00 00 00    	je     c001ead9 <cleanerTaskFunction(void*)+0xe7>
c001ea20:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001ea25:	85 c0                	test   eax,eax
c001ea27:	75 01                	jne    c001ea2a <cleanerTaskFunction(void*)+0x38>
c001ea29:	fb                   	sti    
c001ea2a:	c6 05 6c 27 03 c0 00 	mov    BYTE PTR ds:0xc003276c,0x0
c001ea31:	fa                   	cli    
c001ea32:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001ea38:	ff 05 84 27 03 c0    	inc    DWORD PTR ds:0xc0032784
c001ea3e:	fa                   	cli    
c001ea3f:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001ea45:	eb 3e                	jmp    c001ea85 <cleanerTaskFunction(void*)+0x93>
c001ea47:	83 ec 0c             	sub    esp,0xc
c001ea4a:	68 8c 27 03 c0       	push   0xc003278c
c001ea4f:	e8 42 a9 00 00       	call   c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ea54:	c7 04 24 8c 27 03 c0 	mov    DWORD PTR [esp],0xc003278c
c001ea5b:	89 c3                	mov    ebx,eax
c001ea5d:	e8 3c a9 00 00       	call   c002939e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ea62:	c7 04 24 38 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce38
c001ea69:	e8 77 3f ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001ea6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ea71:	e8 b3 fc ff ff       	call   c001e729 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ea76:	c7 04 24 51 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce51
c001ea7d:	e8 63 3f ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001ea82:	83 c4 10             	add    esp,0x10
c001ea85:	83 ec 0c             	sub    esp,0xc
c001ea88:	68 8c 27 03 c0       	push   0xc003278c
c001ea8d:	e8 e8 a8 00 00       	call   c002937a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ea92:	83 c4 10             	add    esp,0x10
c001ea95:	84 c0                	test   al,al
c001ea97:	74 ae                	je     c001ea47 <cleanerTaskFunction(void*)+0x55>
c001ea99:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001ea9e:	48                   	dec    eax
c001ea9f:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001eaa4:	75 01                	jne    c001eaa7 <cleanerTaskFunction(void*)+0xb5>
c001eaa6:	fb                   	sti    
c001eaa7:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001eaac:	48                   	dec    eax
c001eaad:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c001eab2:	0f 85 3e ff ff ff    	jne    c001e9f6 <cleanerTaskFunction(void*)+0x4>
c001eab8:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c001eabd:	85 c0                	test   eax,eax
c001eabf:	0f 84 31 ff ff ff    	je     c001e9f6 <cleanerTaskFunction(void*)+0x4>
c001eac5:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c001eacf:	e8 e4 f6 ff ff       	call   c001e1b8 <schedule()>
c001ead4:	e9 1d ff ff ff       	jmp    c001e9f6 <cleanerTaskFunction(void*)+0x4>
c001ead9:	83 ec 0c             	sub    esp,0xc
c001eadc:	6a 02                	push   0x2
c001eade:	e8 86 f8 ff ff       	call   c001e369 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eae3:	83 c4 10             	add    esp,0x10
c001eae6:	e9 3f ff ff ff       	jmp    c001ea2a <cleanerTaskFunction(void*)+0x38>

c001eaeb <terminateTask(int)>:
c001eaeb:	83 ec 14             	sub    esp,0x14
c001eaee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eaf3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001eaf6:	83 c0 0c             	add    eax,0xc
c001eaf9:	50                   	push   eax
c001eafa:	68 b0 d1 02 c0       	push   0xc002d1b0
c001eaff:	e8 e1 3e ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001eb04:	fa                   	cli    
c001eb05:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001eb0b:	ff 05 84 27 03 c0    	inc    DWORD PTR ds:0xc0032784
c001eb11:	fa                   	cli    
c001eb12:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001eb18:	c7 04 24 64 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce64
c001eb1f:	e8 c1 3e ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001eb24:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001eb28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb2d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001eb30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb35:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001eb38:	5a                   	pop    edx
c001eb39:	59                   	pop    ecx
c001eb3a:	50                   	push   eax
c001eb3b:	68 8c 27 03 c0       	push   0xc003278c
c001eb40:	e8 07 a9 00 00       	call   c002944c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eb45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb4a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001eb51:	c7 04 24 7e ce 02 c0 	mov    DWORD PTR [esp],0xc002ce7e
c001eb58:	e8 88 3e ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001eb5d:	83 c4 10             	add    esp,0x10
c001eb60:	a1 68 27 03 c0       	mov    eax,ds:0xc0032768
c001eb65:	85 c0                	test   eax,eax
c001eb67:	0f 84 8d 00 00 00    	je     c001ebfa <terminateTask(int)+0x10f>
c001eb6d:	83 ec 0c             	sub    esp,0xc
c001eb70:	68 98 ce 02 c0       	push   0xc002ce98
c001eb75:	e8 6b 3e ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001eb7a:	58                   	pop    eax
c001eb7b:	c6 05 6c 27 03 c0 01 	mov    BYTE PTR ds:0xc003276c,0x1
c001eb82:	ff 35 68 27 03 c0    	push   DWORD PTR ds:0xc0032768
c001eb88:	e8 ef fa ff ff       	call   c001e67c <unblockTask(ThreadControlBlock*)>
c001eb8d:	c7 04 24 b2 ce 02 c0 	mov    DWORD PTR [esp],0xc002ceb2
c001eb94:	e8 4c 3e ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001eb99:	83 c4 10             	add    esp,0x10
c001eb9c:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001eba1:	48                   	dec    eax
c001eba2:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001eba7:	75 01                	jne    c001ebaa <terminateTask(int)+0xbf>
c001eba9:	fb                   	sti    
c001ebaa:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001ebaf:	48                   	dec    eax
c001ebb0:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c001ebb5:	75 09                	jne    c001ebc0 <terminateTask(int)+0xd5>
c001ebb7:	83 3d 80 27 03 c0 00 	cmp    DWORD PTR ds:0xc0032780,0x0
c001ebbe:	75 4c                	jne    c001ec0c <terminateTask(int)+0x121>
c001ebc0:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001ebc5:	48                   	dec    eax
c001ebc6:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001ebcb:	75 01                	jne    c001ebce <terminateTask(int)+0xe3>
c001ebcd:	fb                   	sti    
c001ebce:	83 ec 0c             	sub    esp,0xc
c001ebd1:	68 ea ce 02 c0       	push   0xc002ceea
c001ebd6:	e8 0a 3e ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001ebdb:	83 c4 10             	add    esp,0x10
c001ebde:	fa                   	cli    
c001ebdf:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001ebe5:	e8 ce f5 ff ff       	call   c001e1b8 <schedule()>
c001ebea:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001ebef:	48                   	dec    eax
c001ebf0:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001ebf5:	75 e7                	jne    c001ebde <terminateTask(int)+0xf3>
c001ebf7:	fb                   	sti    
c001ebf8:	eb e4                	jmp    c001ebde <terminateTask(int)+0xf3>
c001ebfa:	83 ec 0c             	sub    esp,0xc
c001ebfd:	68 cc ce 02 c0       	push   0xc002cecc
c001ec02:	e8 de 3d ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001ec07:	83 c4 10             	add    esp,0x10
c001ec0a:	eb 90                	jmp    c001eb9c <terminateTask(int)+0xb1>
c001ec0c:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c001ec16:	e8 9d f5 ff ff       	call   c001e1b8 <schedule()>
c001ec1b:	eb a3                	jmp    c001ebc0 <terminateTask(int)+0xd5>

c001ec1d <Thr::terminateFromIRQ(int)>:
c001ec1d:	83 ec 18             	sub    esp,0x18
c001ec20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec24:	e8 c2 fe ff ff       	call   c001eaeb <terminateTask(int)>
c001ec29:	90                   	nop

c001ec2a <Semaphore::release()>:
c001ec2a:	83 ec 0c             	sub    esp,0xc
c001ec2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec31:	fa                   	cli    
c001ec32:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001ec37:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001ec3d:	8d 48 01             	lea    ecx,[eax+0x1]
c001ec40:	89 0d 84 27 03 c0    	mov    DWORD PTR ds:0xc0032784,ecx
c001ec46:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ec49:	85 c9                	test   ecx,ecx
c001ec4b:	74 3c                	je     c001ec89 <Semaphore::release()+0x5f>
c001ec4d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ec50:	83 ec 0c             	sub    esp,0xc
c001ec53:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ec56:	51                   	push   ecx
c001ec57:	e8 20 fa ff ff       	call   c001e67c <unblockTask(ThreadControlBlock*)>
c001ec5c:	a1 84 27 03 c0       	mov    eax,ds:0xc0032784
c001ec61:	83 c4 10             	add    esp,0x10
c001ec64:	48                   	dec    eax
c001ec65:	a3 84 27 03 c0       	mov    ds:0xc0032784,eax
c001ec6a:	85 c0                	test   eax,eax
c001ec6c:	75 09                	jne    c001ec77 <Semaphore::release()+0x4d>
c001ec6e:	a1 80 27 03 c0       	mov    eax,ds:0xc0032780
c001ec73:	85 c0                	test   eax,eax
c001ec75:	75 17                	jne    c001ec8e <Semaphore::release()+0x64>
c001ec77:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001ec7c:	48                   	dec    eax
c001ec7d:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001ec82:	75 01                	jne    c001ec85 <Semaphore::release()+0x5b>
c001ec84:	fb                   	sti    
c001ec85:	83 c4 0c             	add    esp,0xc
c001ec88:	c3                   	ret    
c001ec89:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ec8c:	eb d7                	jmp    c001ec65 <Semaphore::release()+0x3b>
c001ec8e:	c7 05 80 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032780,0x0
c001ec98:	e8 1b f5 ff ff       	call   c001e1b8 <schedule()>
c001ec9d:	eb d8                	jmp    c001ec77 <Semaphore::release()+0x4d>

c001ec9f <__static_initialization_and_destruction_0(int, int)>:
c001ec9f:	83 ec 0c             	sub    esp,0xc
c001eca2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001eca7:	0f 85 88 00 00 00    	jne    c001ed35 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ecad:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ecb5:	75 7e                	jne    c001ed35 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ecb7:	83 ec 0c             	sub    esp,0xc
c001ecba:	68 a4 27 03 c0       	push   0xc00327a4
c001ecbf:	e8 18 aa 00 00       	call   c00296dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ecc4:	83 c4 10             	add    esp,0x10
c001ecc7:	83 ec 04             	sub    esp,0x4
c001ecca:	68 28 e0 02 c0       	push   0xc002e028
c001eccf:	68 a4 27 03 c0       	push   0xc00327a4
c001ecd4:	68 90 96 02 c0       	push   0xc0029690
c001ecd9:	e8 a1 3b ff ff       	call   c001287f <__cxa_atexit>
c001ecde:	83 c4 10             	add    esp,0x10
c001ece1:	83 ec 0c             	sub    esp,0xc
c001ece4:	68 98 27 03 c0       	push   0xc0032798
c001ece9:	e8 ee a9 00 00       	call   c00296dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ecee:	83 c4 10             	add    esp,0x10
c001ecf1:	83 ec 04             	sub    esp,0x4
c001ecf4:	68 28 e0 02 c0       	push   0xc002e028
c001ecf9:	68 98 27 03 c0       	push   0xc0032798
c001ecfe:	68 90 96 02 c0       	push   0xc0029690
c001ed03:	e8 77 3b ff ff       	call   c001287f <__cxa_atexit>
c001ed08:	83 c4 10             	add    esp,0x10
c001ed0b:	83 ec 0c             	sub    esp,0xc
c001ed0e:	68 8c 27 03 c0       	push   0xc003278c
c001ed13:	e8 c4 a9 00 00       	call   c00296dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ed18:	83 c4 10             	add    esp,0x10
c001ed1b:	83 ec 04             	sub    esp,0x4
c001ed1e:	68 28 e0 02 c0       	push   0xc002e028
c001ed23:	68 8c 27 03 c0       	push   0xc003278c
c001ed28:	68 90 96 02 c0       	push   0xc0029690
c001ed2d:	e8 4d 3b ff ff       	call   c001287f <__cxa_atexit>
c001ed32:	83 c4 10             	add    esp,0x10
c001ed35:	90                   	nop
c001ed36:	83 c4 0c             	add    esp,0xc
c001ed39:	c3                   	ret    

c001ed3a <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ed3a:	83 ec 0c             	sub    esp,0xc
c001ed3d:	83 ec 08             	sub    esp,0x8
c001ed40:	68 ff ff 00 00       	push   0xffff
c001ed45:	6a 01                	push   0x1
c001ed47:	e8 53 ff ff ff       	call   c001ec9f <__static_initialization_and_destruction_0(int, int)>
c001ed4c:	83 c4 10             	add    esp,0x10
c001ed4f:	83 c4 0c             	add    esp,0xc
c001ed52:	c3                   	ret    

c001ed53 <Vm::inbv(unsigned short)>:
c001ed53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed57:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ed5c:	75 06                	jne    c001ed64 <Vm::inbv(unsigned short)+0x11>
c001ed5e:	a0 ec 27 03 c0       	mov    al,ds:0xc00327ec
c001ed63:	c3                   	ret    
c001ed64:	ec                   	in     al,dx
c001ed65:	c3                   	ret    

c001ed66 <Vm::outbv(unsigned short, unsigned char)>:
c001ed66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed6e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ed73:	75 25                	jne    c001ed9a <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ed75:	8b 0d ec 27 03 c0    	mov    ecx,DWORD PTR ds:0xc00327ec
c001ed7b:	8d 51 01             	lea    edx,[ecx+0x1]
c001ed7e:	88 81 00 28 03 c0    	mov    BYTE PTR [ecx-0x3ffcd800],al
c001ed84:	89 15 ec 27 03 c0    	mov    DWORD PTR ds:0xc00327ec,edx
c001ed8a:	83 fa 20             	cmp    edx,0x20
c001ed8d:	75 0c                	jne    c001ed9b <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ed8f:	c7 05 ec 27 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00327ec,0x1f
c001ed99:	c3                   	ret    
c001ed9a:	ee                   	out    dx,al
c001ed9b:	c3                   	ret    

c001ed9c <Vm::realToLinear(unsigned short, unsigned short)>:
c001ed9c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eda1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eda6:	c1 e0 04             	shl    eax,0x4
c001eda9:	01 d0                	add    eax,edx
c001edab:	c3                   	ret    

c001edac <Vm::getSegment(unsigned int)>:
c001edac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edb0:	c1 e8 10             	shr    eax,0x10
c001edb3:	c3                   	ret    

c001edb4 <Vm::getOffset(unsigned int)>:
c001edb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edb8:	c3                   	ret    

c001edb9 <Vm::mainloop2()>:
c001edb9:	83 ec 18             	sub    esp,0x18
c001edbc:	fa                   	cli    
c001edbd:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001edc3:	6a 02                	push   0x2
c001edc5:	c6 05 e5 27 03 c0 01 	mov    BYTE PTR ds:0xc00327e5,0x1
c001edcc:	e8 98 f5 ff ff       	call   c001e369 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001edd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edd6:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001edda:	52                   	push   edx
c001eddb:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eddf:	52                   	push   edx
c001ede0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ede4:	52                   	push   edx
c001ede5:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ede9:	50                   	push   eax
c001edea:	e8 0b 15 fe ff       	call   c00002fa <goToVM86>
c001edef:	83 c4 2c             	add    esp,0x2c
c001edf2:	c3                   	ret    

c001edf3 <Vm::mainVm8086Loop(void*)>:
c001edf3:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001edf8:	48                   	dec    eax
c001edf9:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001edfe:	75 01                	jne    c001ee01 <Vm::mainVm8086Loop(void*)+0xe>
c001ee00:	fb                   	sti    
c001ee01:	eb b6                	jmp    c001edb9 <Vm::mainloop2()>

c001ee03 <Vm::mainloop3(unsigned long)>:
c001ee03:	83 ec 18             	sub    esp,0x18
c001ee06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee0a:	fa                   	cli    
c001ee0b:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001ee11:	6a 02                	push   0x2
c001ee13:	c6 05 e4 27 03 c0 01 	mov    BYTE PTR ds:0xc00327e4,0x1
c001ee1a:	a3 e0 27 03 c0       	mov    ds:0xc00327e0,eax
c001ee1f:	e8 45 f5 ff ff       	call   c001e369 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ee24:	83 c4 1c             	add    esp,0x1c
c001ee27:	eb 90                	jmp    c001edb9 <Vm::mainloop2()>

c001ee29 <Vm::initialise8086()>:
c001ee29:	83 ec 0c             	sub    esp,0xc
c001ee2c:	68 80 00 00 00       	push   0x80
c001ee31:	6a 00                	push   0x0
c001ee33:	68 f3 ed 01 c0       	push   0xc001edf3
c001ee38:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c001ee3e:	e8 31 f1 ff ff       	call   c001df74 <Process::createThread(void (*)(void*), void*, int)>
c001ee43:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ee4a:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c001ee4f:	68 00 01 00 00       	push   0x100
c001ee54:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c001ee59:	6a 00                	push   0x0
c001ee5b:	6a 00                	push   0x0
c001ee5d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ee63:	e8 a4 32 ff ff       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ee68:	83 c4 2c             	add    esp,0x2c
c001ee6b:	c3                   	ret    

c001ee6c <Vm::finish8086()>:
c001ee6c:	53                   	push   ebx
c001ee6d:	83 ec 08             	sub    esp,0x8
c001ee70:	fa                   	cli    
c001ee71:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001ee77:	80 3d e4 27 03 c0 00 	cmp    BYTE PTR ds:0xc00327e4,0x0
c001ee7e:	75 15                	jne    c001ee95 <Vm::finish8086()+0x29>
c001ee80:	e8 33 f3 ff ff       	call   c001e1b8 <schedule()>
c001ee85:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001ee8a:	48                   	dec    eax
c001ee8b:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001ee90:	75 de                	jne    c001ee70 <Vm::finish8086()+0x4>
c001ee92:	fb                   	sti    
c001ee93:	eb db                	jmp    c001ee70 <Vm::finish8086()+0x4>
c001ee95:	83 ec 0c             	sub    esp,0xc
c001ee98:	8b 1d e0 27 03 c0    	mov    ebx,DWORD PTR ds:0xc00327e0
c001ee9e:	ff 35 e8 27 03 c0    	push   DWORD PTR ds:0xc00327e8
c001eea4:	c6 05 e4 27 03 c0 00 	mov    BYTE PTR ds:0xc00327e4,0x0
c001eeab:	e8 cc f7 ff ff       	call   c001e67c <unblockTask(ThreadControlBlock*)>
c001eeb0:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001eeb5:	83 c4 10             	add    esp,0x10
c001eeb8:	8d 50 ff             	lea    edx,[eax-0x1]
c001eebb:	89 15 88 27 03 c0    	mov    DWORD PTR ds:0xc0032788,edx
c001eec1:	85 d2                	test   edx,edx
c001eec3:	75 01                	jne    c001eec6 <Vm::finish8086()+0x5a>
c001eec5:	fb                   	sti    
c001eec6:	89 d8                	mov    eax,ebx
c001eec8:	83 c4 08             	add    esp,0x8
c001eecb:	5b                   	pop    ebx
c001eecc:	c3                   	ret    

c001eecd <Vm::getOutput8086(unsigned char*)>:
c001eecd:	57                   	push   edi
c001eece:	8b 0d ec 27 03 c0    	mov    ecx,DWORD PTR ds:0xc00327ec
c001eed4:	56                   	push   esi
c001eed5:	be 00 28 03 c0       	mov    esi,0xc0032800
c001eeda:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001eede:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001eee0:	a1 ec 27 03 c0       	mov    eax,ds:0xc00327ec
c001eee5:	5e                   	pop    esi
c001eee6:	c7 05 ec 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327ec,0x0
c001eef0:	5f                   	pop    edi
c001eef1:	c3                   	ret    

c001eef2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001eef2:	55                   	push   ebp
c001eef3:	57                   	push   edi
c001eef4:	56                   	push   esi
c001eef5:	53                   	push   ebx
c001eef6:	83 ec 2c             	sub    esp,0x2c
c001eef9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eefd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ef01:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ef05:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ef09:	fa                   	cli    
c001ef0a:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c001ef10:	0f b6 35 e5 27 03 c0 	movzx  esi,BYTE PTR ds:0xc00327e5
c001ef17:	89 f0                	mov    eax,esi
c001ef19:	84 c0                	test   al,al
c001ef1b:	75 1d                	jne    c001ef3a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001ef1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ef21:	e8 92 f2 ff ff       	call   c001e1b8 <schedule()>
c001ef26:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001ef2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ef2f:	48                   	dec    eax
c001ef30:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001ef35:	75 d2                	jne    c001ef09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ef37:	fb                   	sti    
c001ef38:	eb cf                	jmp    c001ef09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ef3a:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001ef3f:	c7 05 ec 27 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00327ec,0x0
c001ef49:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ef4d:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ef51:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ef55:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ef59:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ef5d:	50                   	push   eax
c001ef5e:	6a 20                	push   0x20
c001ef60:	6a 00                	push   0x0
c001ef62:	68 00 28 03 c0       	push   0xc0032800
c001ef67:	e8 e4 17 fe ff       	call   c0000750 <memset>
c001ef6c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ef73:	e8 8a 09 ff ff       	call   c000f902 <malloc>
c001ef78:	83 c4 0c             	add    esp,0xc
c001ef7b:	89 c3                	mov    ebx,eax
c001ef7d:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c001ef83:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ef87:	50                   	push   eax
c001ef88:	e8 b7 3f ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c001ef8d:	83 c4 10             	add    esp,0x10
c001ef90:	85 db                	test   ebx,ebx
c001ef92:	75 0a                	jne    c001ef9e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ef94:	83 ec 0c             	sub    esp,0xc
c001ef97:	68 cf d1 02 c0       	push   0xc002d1cf
c001ef9c:	eb 3e                	jmp    c001efdc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ef9e:	50                   	push   eax
c001ef9f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001efa3:	50                   	push   eax
c001efa4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001efa8:	50                   	push   eax
c001efa9:	53                   	push   ebx
c001efaa:	e8 a5 42 ff ff       	call   c0013254 <File::stat(unsigned long long*, bool*)>
c001efaf:	83 c4 10             	add    esp,0x10
c001efb2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001efb7:	74 0a                	je     c001efc3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001efb9:	83 ec 0c             	sub    esp,0xc
c001efbc:	68 e3 d1 02 c0       	push   0xc002d1e3
c001efc1:	eb 19                	jmp    c001efdc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001efc3:	51                   	push   ecx
c001efc4:	51                   	push   ecx
c001efc5:	6a 01                	push   0x1
c001efc7:	53                   	push   ebx
c001efc8:	e8 db 3f ff ff       	call   c0012fa8 <File::open(FileOpenMode)>
c001efcd:	83 c4 10             	add    esp,0x10
c001efd0:	85 c0                	test   eax,eax
c001efd2:	74 24                	je     c001eff8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001efd4:	83 ec 0c             	sub    esp,0xc
c001efd7:	68 fc d1 02 c0       	push   0xc002d1fc
c001efdc:	e8 24 b4 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001efe1:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001efe6:	83 c4 10             	add    esp,0x10
c001efe9:	48                   	dec    eax
c001efea:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001efef:	85 c0                	test   eax,eax
c001eff1:	75 01                	jne    c001eff4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001eff3:	fb                   	sti    
c001eff4:	31 f6                	xor    esi,esi
c001eff6:	eb 58                	jmp    c001f050 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001eff8:	0f b7 ed             	movzx  ebp,bp
c001effb:	50                   	push   eax
c001effc:	0f b7 ff             	movzx  edi,di
c001efff:	50                   	push   eax
c001f000:	55                   	push   ebp
c001f001:	57                   	push   edi
c001f002:	e8 95 fd ff ff       	call   c001ed9c <Vm::realToLinear(unsigned short, unsigned short)>
c001f007:	5a                   	pop    edx
c001f008:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f00a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f00e:	51                   	push   ecx
c001f00f:	50                   	push   eax
c001f010:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f014:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f018:	53                   	push   ebx
c001f019:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f01c:	83 c4 14             	add    esp,0x14
c001f01f:	53                   	push   ebx
c001f020:	e8 e1 3f ff ff       	call   c0013006 <File::close()>
c001f025:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c001f02a:	83 c4 10             	add    esp,0x10
c001f02d:	48                   	dec    eax
c001f02e:	c6 05 e5 27 03 c0 00 	mov    BYTE PTR ds:0xc00327e5,0x0
c001f035:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c001f03a:	85 c0                	test   eax,eax
c001f03c:	75 01                	jne    c001f03f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f03e:	fb                   	sti    
c001f03f:	83 ec 0c             	sub    esp,0xc
c001f042:	ff 35 e8 27 03 c0    	push   DWORD PTR ds:0xc00327e8
c001f048:	e8 2f f6 ff ff       	call   c001e67c <unblockTask(ThreadControlBlock*)>
c001f04d:	83 c4 10             	add    esp,0x10
c001f050:	83 c4 2c             	add    esp,0x2c
c001f053:	89 f0                	mov    eax,esi
c001f055:	5b                   	pop    ebx
c001f056:	5e                   	pop    esi
c001f057:	5f                   	pop    edi
c001f058:	5d                   	pop    ebp
c001f059:	c3                   	ret    

c001f05a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f05a:	57                   	push   edi
c001f05b:	56                   	push   esi
c001f05c:	53                   	push   ebx
c001f05d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f061:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f065:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f069:	83 e8 06             	sub    eax,0x6
c001f06c:	0f b7 c0             	movzx  eax,ax
c001f06f:	50                   	push   eax
c001f070:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f075:	50                   	push   eax
c001f076:	e8 21 fd ff ff       	call   c001ed9c <Vm::realToLinear(unsigned short, unsigned short)>
c001f07b:	5a                   	pop    edx
c001f07c:	5e                   	pop    esi
c001f07d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f080:	8d 56 fa             	lea    edx,[esi-0x6]
c001f083:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f089:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f08c:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f08f:	83 c2 02             	add    edx,0x2
c001f092:	66 89 10             	mov    WORD PTR [eax],dx
c001f095:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f098:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f09c:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f09f:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f0a3:	89 d6                	mov    esi,edx
c001f0a5:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f0ab:	66 81 e6 ff fd       	and    si,0xfdff
c001f0b0:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f0b4:	74 07                	je     c001f0bd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f0b6:	89 d6                	mov    esi,edx
c001f0b8:	66 81 ce 00 02       	or     si,0x200
c001f0bd:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f0c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0c6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f0ca:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f0d2:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f0d5:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f0dd:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f0e0:	5b                   	pop    ebx
c001f0e1:	5e                   	pop    esi
c001f0e2:	5f                   	pop    edi
c001f0e3:	c3                   	ret    

c001f0e4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f0e4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0e9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0ee:	c1 e0 04             	shl    eax,0x4
c001f0f1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f0f4:	c3                   	ret    

c001f0f5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f0f5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f0fa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f0ff:	c1 e0 04             	shl    eax,0x4
c001f102:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f106:	c3                   	ret    

c001f107 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f107:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f10c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f111:	c1 e0 04             	shl    eax,0x4
c001f114:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f117:	c3                   	ret    

c001f118 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f118:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f11d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f122:	c1 e0 04             	shl    eax,0x4
c001f125:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f129:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f12c:	c3                   	ret    

c001f12d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f12d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f132:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f137:	c1 e0 04             	shl    eax,0x4
c001f13a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f13e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f142:	c3                   	ret    

c001f143 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f143:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f148:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f14d:	c1 e0 04             	shl    eax,0x4
c001f150:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f154:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f157:	c3                   	ret    

c001f158 <Vm::faultHandler(regs*)>:
c001f158:	55                   	push   ebp
c001f159:	57                   	push   edi
c001f15a:	56                   	push   esi
c001f15b:	53                   	push   ebx
c001f15c:	83 ec 1c             	sub    esp,0x1c
c001f15f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f163:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f166:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f16a:	0f b7 f8             	movzx  edi,ax
c001f16d:	52                   	push   edx
c001f16e:	0f b7 c0             	movzx  eax,ax
c001f171:	50                   	push   eax
c001f172:	e8 25 fc ff ff       	call   c001ed9c <Vm::realToLinear(unsigned short, unsigned short)>
c001f177:	5a                   	pop    edx
c001f178:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f17b:	59                   	pop    ecx
c001f17c:	89 c1                	mov    ecx,eax
c001f17e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f181:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f185:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f18a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f18e:	0f b7 c5             	movzx  eax,bp
c001f191:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f195:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f199:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f19d:	e8 fa fb ff ff       	call   c001ed9c <Vm::realToLinear(unsigned short, unsigned short)>
c001f1a2:	5e                   	pop    esi
c001f1a3:	be 06 00 00 00       	mov    esi,0x6
c001f1a8:	5a                   	pop    edx
c001f1a9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f1ae:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f1b3:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f1b6:	80 fa 9d             	cmp    dl,0x9d
c001f1b9:	0f 84 2c 02 00 00    	je     c001f3eb <Vm::faultHandler(regs*)+0x293>
c001f1bf:	0f 87 91 00 00 00    	ja     c001f256 <Vm::faultHandler(regs*)+0xfe>
c001f1c5:	80 fa 66             	cmp    dl,0x66
c001f1c8:	0f 84 98 01 00 00    	je     c001f366 <Vm::faultHandler(regs*)+0x20e>
c001f1ce:	77 47                	ja     c001f217 <Vm::faultHandler(regs*)+0xbf>
c001f1d0:	80 fa 36             	cmp    dl,0x36
c001f1d3:	0f 84 80 01 00 00    	je     c001f359 <Vm::faultHandler(regs*)+0x201>
c001f1d9:	77 1a                	ja     c001f1f5 <Vm::faultHandler(regs*)+0x9d>
c001f1db:	80 fa 26             	cmp    dl,0x26
c001f1de:	0f 84 4e 01 00 00    	je     c001f332 <Vm::faultHandler(regs*)+0x1da>
c001f1e4:	80 fa 2e             	cmp    dl,0x2e
c001f1e7:	0f 85 e2 05 00 00    	jne    c001f7cf <Vm::faultHandler(regs*)+0x677>
c001f1ed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f1f0:	31 f6                	xor    esi,esi
c001f1f2:	41                   	inc    ecx
c001f1f3:	eb be                	jmp    c001f1b3 <Vm::faultHandler(regs*)+0x5b>
c001f1f5:	80 fa 64             	cmp    dl,0x64
c001f1f8:	0f 84 41 01 00 00    	je     c001f33f <Vm::faultHandler(regs*)+0x1e7>
c001f1fe:	0f 87 48 01 00 00    	ja     c001f34c <Vm::faultHandler(regs*)+0x1f4>
c001f204:	80 fa 3e             	cmp    dl,0x3e
c001f207:	0f 85 c2 05 00 00    	jne    c001f7cf <Vm::faultHandler(regs*)+0x677>
c001f20d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f210:	be 01 00 00 00       	mov    esi,0x1
c001f215:	eb db                	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x9a>
c001f217:	80 fa 6d             	cmp    dl,0x6d
c001f21a:	0f 84 ec 02 00 00    	je     c001f50c <Vm::faultHandler(regs*)+0x3b4>
c001f220:	77 17                	ja     c001f239 <Vm::faultHandler(regs*)+0xe1>
c001f222:	80 fa 67             	cmp    dl,0x67
c001f225:	0f 84 48 01 00 00    	je     c001f373 <Vm::faultHandler(regs*)+0x21b>
c001f22b:	80 fa 6c             	cmp    dl,0x6c
c001f22e:	0f 84 69 02 00 00    	je     c001f49d <Vm::faultHandler(regs*)+0x345>
c001f234:	e9 96 05 00 00       	jmp    c001f7cf <Vm::faultHandler(regs*)+0x677>
c001f239:	80 fa 6f             	cmp    dl,0x6f
c001f23c:	0f 84 f4 03 00 00    	je     c001f636 <Vm::faultHandler(regs*)+0x4de>
c001f242:	0f 82 59 03 00 00    	jb     c001f5a1 <Vm::faultHandler(regs*)+0x449>
c001f248:	80 fa 9c             	cmp    dl,0x9c
c001f24b:	0f 84 2f 01 00 00    	je     c001f380 <Vm::faultHandler(regs*)+0x228>
c001f251:	e9 79 05 00 00       	jmp    c001f7cf <Vm::faultHandler(regs*)+0x677>
c001f256:	80 fa ec             	cmp    dl,0xec
c001f259:	0f 84 14 05 00 00    	je     c001f773 <Vm::faultHandler(regs*)+0x61b>
c001f25f:	77 7b                	ja     c001f2dc <Vm::faultHandler(regs*)+0x184>
c001f261:	80 fa e4             	cmp    dl,0xe4
c001f264:	0f 84 93 04 00 00    	je     c001f6fd <Vm::faultHandler(regs*)+0x5a5>
c001f26a:	77 53                	ja     c001f2bf <Vm::faultHandler(regs*)+0x167>
c001f26c:	80 fa cd             	cmp    dl,0xcd
c001f26f:	0f 84 d9 01 00 00    	je     c001f44e <Vm::faultHandler(regs*)+0x2f6>
c001f275:	80 fa cf             	cmp    dl,0xcf
c001f278:	0f 85 51 05 00 00    	jne    c001f7cf <Vm::faultHandler(regs*)+0x677>
c001f27e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f281:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f284:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f288:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f28b:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f28f:	81 ca 00 02 02 00    	or     edx,0x20200
c001f295:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f298:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f29c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f2a2:	66 c1 e8 09          	shr    ax,0x9
c001f2a6:	83 e0 01             	and    eax,0x1
c001f2a9:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f2ac:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f2af:	83 c0 06             	add    eax,0x6
c001f2b2:	25 ff ff 00 00       	and    eax,0xffff
c001f2b7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f2ba:	e9 0c 05 00 00       	jmp    c001f7cb <Vm::faultHandler(regs*)+0x673>
c001f2bf:	80 fa e6             	cmp    dl,0xe6
c001f2c2:	0f 84 7f 04 00 00    	je     c001f747 <Vm::faultHandler(regs*)+0x5ef>
c001f2c8:	0f 82 4b 04 00 00    	jb     c001f719 <Vm::faultHandler(regs*)+0x5c1>
c001f2ce:	80 fa e7             	cmp    dl,0xe7
c001f2d1:	0f 84 87 04 00 00    	je     c001f75e <Vm::faultHandler(regs*)+0x606>
c001f2d7:	e9 f3 04 00 00       	jmp    c001f7cf <Vm::faultHandler(regs*)+0x677>
c001f2dc:	80 fa ef             	cmp    dl,0xef
c001f2df:	0f 84 d1 04 00 00    	je     c001f7b6 <Vm::faultHandler(regs*)+0x65e>
c001f2e5:	77 28                	ja     c001f30f <Vm::faultHandler(regs*)+0x1b7>
c001f2e7:	80 fa ed             	cmp    dl,0xed
c001f2ea:	0f 84 9f 04 00 00    	je     c001f78f <Vm::faultHandler(regs*)+0x637>
c001f2f0:	80 fa ee             	cmp    dl,0xee
c001f2f3:	0f 85 d6 04 00 00    	jne    c001f7cf <Vm::faultHandler(regs*)+0x677>
c001f2f9:	50                   	push   eax
c001f2fa:	50                   	push   eax
c001f2fb:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f2ff:	50                   	push   eax
c001f300:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f304:	50                   	push   eax
c001f305:	e8 5c fa ff ff       	call   c001ed66 <Vm::outbv(unsigned short, unsigned char)>
c001f30a:	e9 9f 04 00 00       	jmp    c001f7ae <Vm::faultHandler(regs*)+0x656>
c001f30f:	80 fa fa             	cmp    dl,0xfa
c001f312:	0f 84 69 01 00 00    	je     c001f481 <Vm::faultHandler(regs*)+0x329>
c001f318:	80 fa fb             	cmp    dl,0xfb
c001f31b:	0f 84 6e 01 00 00    	je     c001f48f <Vm::faultHandler(regs*)+0x337>
c001f321:	80 fa f3             	cmp    dl,0xf3
c001f324:	0f 85 a5 04 00 00    	jne    c001f7cf <Vm::faultHandler(regs*)+0x677>
c001f32a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f32d:	e9 c0 fe ff ff       	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x9a>
c001f332:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f335:	be 02 00 00 00       	mov    esi,0x2
c001f33a:	e9 b3 fe ff ff       	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x9a>
c001f33f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f342:	be 03 00 00 00       	mov    esi,0x3
c001f347:	e9 a6 fe ff ff       	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x9a>
c001f34c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f34f:	be 04 00 00 00       	mov    esi,0x4
c001f354:	e9 99 fe ff ff       	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x9a>
c001f359:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f35c:	be 05 00 00 00       	mov    esi,0x5
c001f361:	e9 8c fe ff ff       	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x9a>
c001f366:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f369:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f36e:	e9 7f fe ff ff       	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x9a>
c001f373:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f376:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f37b:	e9 72 fe ff ff       	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x9a>
c001f380:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f383:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f387:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f38c:	74 30                	je     c001f3be <Vm::faultHandler(regs*)+0x266>
c001f38e:	83 e9 04             	sub    ecx,0x4
c001f391:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f397:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f39d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f3a0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f3a3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f3a9:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f3ad:	0f 84 15 04 00 00    	je     c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f3b3:	80 ce 02             	or     dh,0x2
c001f3b6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f3b9:	e9 0a 04 00 00       	jmp    c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f3be:	83 e9 02             	sub    ecx,0x2
c001f3c1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f3c7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f3ca:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f3ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f3d4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f3d8:	74 05                	je     c001f3df <Vm::faultHandler(regs*)+0x287>
c001f3da:	80 ce 02             	or     dh,0x2
c001f3dd:	eb 03                	jmp    c001f3e2 <Vm::faultHandler(regs*)+0x28a>
c001f3df:	80 e6 fd             	and    dh,0xfd
c001f3e2:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f3e6:	e9 dd 03 00 00       	jmp    c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f3eb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3f0:	74 2a                	je     c001f41c <Vm::faultHandler(regs*)+0x2c4>
c001f3f2:	8b 10                	mov    edx,DWORD PTR [eax]
c001f3f4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f3fa:	81 ca 00 02 02 00    	or     edx,0x20200
c001f400:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f403:	8b 00                	mov    eax,DWORD PTR [eax]
c001f405:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f40b:	c1 e8 09             	shr    eax,0x9
c001f40e:	83 e0 01             	and    eax,0x1
c001f411:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f414:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f417:	83 c0 04             	add    eax,0x4
c001f41a:	eb 25                	jmp    c001f441 <Vm::faultHandler(regs*)+0x2e9>
c001f41c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f41f:	81 ca 00 02 02 00    	or     edx,0x20200
c001f425:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f428:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f42b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f431:	66 c1 e8 09          	shr    ax,0x9
c001f435:	83 e0 01             	and    eax,0x1
c001f438:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f43b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f43e:	83 c0 02             	add    eax,0x2
c001f441:	25 ff ff 00 00       	and    eax,0xffff
c001f446:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f449:	e9 7a 03 00 00       	jmp    c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f44e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f452:	3c ee                	cmp    al,0xee
c001f454:	75 10                	jne    c001f466 <Vm::faultHandler(regs*)+0x30e>
c001f456:	83 ec 0c             	sub    esp,0xc
c001f459:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f45c:	e8 a2 f9 ff ff       	call   c001ee03 <Vm::mainloop3(unsigned long)>
c001f461:	e9 4b 03 00 00       	jmp    c001f7b1 <Vm::faultHandler(regs*)+0x659>
c001f466:	83 ec 0c             	sub    esp,0xc
c001f469:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f46d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f471:	51                   	push   ecx
c001f472:	50                   	push   eax
c001f473:	53                   	push   ebx
c001f474:	e8 e1 fb ff ff       	call   c001f05a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f479:	83 c4 20             	add    esp,0x20
c001f47c:	e9 4a 03 00 00       	jmp    c001f7cb <Vm::faultHandler(regs*)+0x673>
c001f481:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f486:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f48a:	e9 39 03 00 00       	jmp    c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f48f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f494:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f498:	e9 2b 03 00 00       	jmp    c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f49d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f4a0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f4a5:	74 2b                	je     c001f4d2 <Vm::faultHandler(regs*)+0x37a>
c001f4a7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f4ae:	76 22                	jbe    c001f4d2 <Vm::faultHandler(regs*)+0x37a>
c001f4b0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f4b4:	50                   	push   eax
c001f4b5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f4b9:	50                   	push   eax
c001f4ba:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f4be:	50                   	push   eax
c001f4bf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f4c3:	50                   	push   eax
c001f4c4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f4c8:	50                   	push   eax
c001f4c9:	6a 6c                	push   0x6c
c001f4cb:	6a 6c                	push   0x6c
c001f4cd:	e9 b9 01 00 00       	jmp    c001f68b <Vm::faultHandler(regs*)+0x533>
c001f4d2:	83 ec 0c             	sub    esp,0xc
c001f4d5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f4d9:	0f b7 f6             	movzx  esi,si
c001f4dc:	50                   	push   eax
c001f4dd:	e8 71 f8 ff ff       	call   c001ed53 <Vm::inbv(unsigned short)>
c001f4e2:	83 c4 0c             	add    esp,0xc
c001f4e5:	0f b6 c0             	movzx  eax,al
c001f4e8:	50                   	push   eax
c001f4e9:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f4ed:	50                   	push   eax
c001f4ee:	56                   	push   esi
c001f4ef:	e8 24 fc ff ff       	call   c001f118 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f4f4:	83 c4 10             	add    esp,0x10
c001f4f7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f4fa:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f4fe:	74 03                	je     c001f503 <Vm::faultHandler(regs*)+0x3ab>
c001f500:	48                   	dec    eax
c001f501:	eb 01                	jmp    c001f504 <Vm::faultHandler(regs*)+0x3ac>
c001f503:	40                   	inc    eax
c001f504:	0f b7 c0             	movzx  eax,ax
c001f507:	e9 8d 00 00 00       	jmp    c001f599 <Vm::faultHandler(regs*)+0x441>
c001f50c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f50f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f512:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f517:	74 29                	je     c001f542 <Vm::faultHandler(regs*)+0x3ea>
c001f519:	3d ff ff 00 00       	cmp    eax,0xffff
c001f51e:	76 22                	jbe    c001f542 <Vm::faultHandler(regs*)+0x3ea>
c001f520:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f524:	50                   	push   eax
c001f525:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f529:	50                   	push   eax
c001f52a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f52e:	50                   	push   eax
c001f52f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f533:	50                   	push   eax
c001f534:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f538:	50                   	push   eax
c001f539:	6a 6d                	push   0x6d
c001f53b:	6a 6d                	push   0x6d
c001f53d:	e9 49 01 00 00       	jmp    c001f68b <Vm::faultHandler(regs*)+0x533>
c001f542:	0f b7 c8             	movzx  ecx,ax
c001f545:	0f b7 f6             	movzx  esi,si
c001f548:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f54b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f550:	74 20                	je     c001f572 <Vm::faultHandler(regs*)+0x41a>
c001f552:	ed                   	in     eax,dx
c001f553:	55                   	push   ebp
c001f554:	50                   	push   eax
c001f555:	51                   	push   ecx
c001f556:	56                   	push   esi
c001f557:	e8 e7 fb ff ff       	call   c001f143 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f55c:	83 c4 10             	add    esp,0x10
c001f55f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f562:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f566:	74 05                	je     c001f56d <Vm::faultHandler(regs*)+0x415>
c001f568:	83 e8 04             	sub    eax,0x4
c001f56b:	eb 27                	jmp    c001f594 <Vm::faultHandler(regs*)+0x43c>
c001f56d:	83 c0 04             	add    eax,0x4
c001f570:	eb 22                	jmp    c001f594 <Vm::faultHandler(regs*)+0x43c>
c001f572:	66 ed                	in     ax,dx
c001f574:	0f b7 c0             	movzx  eax,ax
c001f577:	57                   	push   edi
c001f578:	50                   	push   eax
c001f579:	51                   	push   ecx
c001f57a:	56                   	push   esi
c001f57b:	e8 ad fb ff ff       	call   c001f12d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f580:	83 c4 10             	add    esp,0x10
c001f583:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f586:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f58a:	74 05                	je     c001f591 <Vm::faultHandler(regs*)+0x439>
c001f58c:	83 e8 02             	sub    eax,0x2
c001f58f:	eb 03                	jmp    c001f594 <Vm::faultHandler(regs*)+0x43c>
c001f591:	83 c0 02             	add    eax,0x2
c001f594:	25 ff ff 00 00       	and    eax,0xffff
c001f599:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f59c:	e9 27 02 00 00       	jmp    c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f5a1:	8d 46 ff             	lea    eax,[esi-0x1]
c001f5a4:	3c 05                	cmp    al,0x5
c001f5a6:	77 24                	ja     c001f5cc <Vm::faultHandler(regs*)+0x474>
c001f5a8:	0f b6 c0             	movzx  eax,al
c001f5ab:	ff 24 85 70 d2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2d90]
c001f5b2:	0f b7 fd             	movzx  edi,bp
c001f5b5:	eb 15                	jmp    c001f5cc <Vm::faultHandler(regs*)+0x474>
c001f5b7:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f5bb:	eb 0f                	jmp    c001f5cc <Vm::faultHandler(regs*)+0x474>
c001f5bd:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f5c1:	eb 09                	jmp    c001f5cc <Vm::faultHandler(regs*)+0x474>
c001f5c3:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f5c7:	eb 03                	jmp    c001f5cc <Vm::faultHandler(regs*)+0x474>
c001f5c9:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f5cc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f5cf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f5d4:	74 29                	je     c001f5ff <Vm::faultHandler(regs*)+0x4a7>
c001f5d6:	3d ff ff 00 00       	cmp    eax,0xffff
c001f5db:	76 22                	jbe    c001f5ff <Vm::faultHandler(regs*)+0x4a7>
c001f5dd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f5e1:	50                   	push   eax
c001f5e2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f5e6:	50                   	push   eax
c001f5e7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f5eb:	50                   	push   eax
c001f5ec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f5f0:	50                   	push   eax
c001f5f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f5f5:	50                   	push   eax
c001f5f6:	6a 6e                	push   0x6e
c001f5f8:	6a 6e                	push   0x6e
c001f5fa:	e9 8c 00 00 00       	jmp    c001f68b <Vm::faultHandler(regs*)+0x533>
c001f5ff:	0f b7 c0             	movzx  eax,ax
c001f602:	52                   	push   edx
c001f603:	52                   	push   edx
c001f604:	50                   	push   eax
c001f605:	57                   	push   edi
c001f606:	e8 d9 fa ff ff       	call   c001f0e4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f60b:	59                   	pop    ecx
c001f60c:	0f b6 c0             	movzx  eax,al
c001f60f:	5e                   	pop    esi
c001f610:	50                   	push   eax
c001f611:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f615:	50                   	push   eax
c001f616:	e8 4b f7 ff ff       	call   c001ed66 <Vm::outbv(unsigned short, unsigned char)>
c001f61b:	83 c4 10             	add    esp,0x10
c001f61e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f621:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f625:	74 03                	je     c001f62a <Vm::faultHandler(regs*)+0x4d2>
c001f627:	48                   	dec    eax
c001f628:	eb 01                	jmp    c001f62b <Vm::faultHandler(regs*)+0x4d3>
c001f62a:	40                   	inc    eax
c001f62b:	0f b7 c0             	movzx  eax,ax
c001f62e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f631:	e9 92 01 00 00       	jmp    c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f636:	8d 46 ff             	lea    eax,[esi-0x1]
c001f639:	3c 05                	cmp    al,0x5
c001f63b:	77 1f                	ja     c001f65c <Vm::faultHandler(regs*)+0x504>
c001f63d:	0f b6 c0             	movzx  eax,al
c001f640:	ff 24 85 88 d2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2d78]
c001f647:	89 ef                	mov    edi,ebp
c001f649:	eb 11                	jmp    c001f65c <Vm::faultHandler(regs*)+0x504>
c001f64b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f64e:	eb 0c                	jmp    c001f65c <Vm::faultHandler(regs*)+0x504>
c001f650:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f653:	eb 07                	jmp    c001f65c <Vm::faultHandler(regs*)+0x504>
c001f655:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f658:	eb 02                	jmp    c001f65c <Vm::faultHandler(regs*)+0x504>
c001f65a:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f65c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f65f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f664:	74 37                	je     c001f69d <Vm::faultHandler(regs*)+0x545>
c001f666:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f66c:	76 2f                	jbe    c001f69d <Vm::faultHandler(regs*)+0x545>
c001f66e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f672:	50                   	push   eax
c001f673:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f677:	50                   	push   eax
c001f678:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f67c:	50                   	push   eax
c001f67d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f681:	50                   	push   eax
c001f682:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f686:	50                   	push   eax
c001f687:	6a 6f                	push   0x6f
c001f689:	6a 6f                	push   0x6f
c001f68b:	68 15 d2 02 c0       	push   0xc002d215
c001f690:	e8 50 33 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001f695:	83 c4 20             	add    esp,0x20
c001f698:	e9 86 01 00 00       	jmp    c001f823 <Vm::faultHandler(regs*)+0x6cb>
c001f69d:	0f b7 d7             	movzx  edx,di
c001f6a0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f6a3:	0f b7 c6             	movzx  eax,si
c001f6a6:	81 e1 00 04 00 00    	and    ecx,0x400
c001f6ac:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f6af:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f6b4:	74 1d                	je     c001f6d3 <Vm::faultHandler(regs*)+0x57b>
c001f6b6:	55                   	push   ebp
c001f6b7:	55                   	push   ebp
c001f6b8:	50                   	push   eax
c001f6b9:	52                   	push   edx
c001f6ba:	e8 48 fa ff ff       	call   c001f107 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f6bf:	83 c4 10             	add    esp,0x10
c001f6c2:	89 fa                	mov    edx,edi
c001f6c4:	ef                   	out    dx,eax
c001f6c5:	85 c9                	test   ecx,ecx
c001f6c7:	74 05                	je     c001f6ce <Vm::faultHandler(regs*)+0x576>
c001f6c9:	83 ee 04             	sub    esi,0x4
c001f6cc:	eb 21                	jmp    c001f6ef <Vm::faultHandler(regs*)+0x597>
c001f6ce:	83 c6 04             	add    esi,0x4
c001f6d1:	eb 1c                	jmp    c001f6ef <Vm::faultHandler(regs*)+0x597>
c001f6d3:	55                   	push   ebp
c001f6d4:	55                   	push   ebp
c001f6d5:	50                   	push   eax
c001f6d6:	52                   	push   edx
c001f6d7:	e8 19 fa ff ff       	call   c001f0f5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f6dc:	83 c4 10             	add    esp,0x10
c001f6df:	89 fa                	mov    edx,edi
c001f6e1:	66 ef                	out    dx,ax
c001f6e3:	85 c9                	test   ecx,ecx
c001f6e5:	74 05                	je     c001f6ec <Vm::faultHandler(regs*)+0x594>
c001f6e7:	83 ee 02             	sub    esi,0x2
c001f6ea:	eb 03                	jmp    c001f6ef <Vm::faultHandler(regs*)+0x597>
c001f6ec:	83 c6 02             	add    esi,0x2
c001f6ef:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f6f5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f6f8:	e9 cb 00 00 00       	jmp    c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f6fd:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f704:	83 ec 0c             	sub    esp,0xc
c001f707:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f70b:	50                   	push   eax
c001f70c:	e8 42 f6 ff ff       	call   c001ed53 <Vm::inbv(unsigned short)>
c001f711:	0f b6 c0             	movzx  eax,al
c001f714:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f717:	eb 3f                	jmp    c001f758 <Vm::faultHandler(regs*)+0x600>
c001f719:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f71e:	74 07                	je     c001f727 <Vm::faultHandler(regs*)+0x5cf>
c001f720:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f724:	ed                   	in     eax,dx
c001f725:	eb 14                	jmp    c001f73b <Vm::faultHandler(regs*)+0x5e3>
c001f727:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f72a:	66 31 f6             	xor    si,si
c001f72d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f730:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f734:	66 ed                	in     ax,dx
c001f736:	0f b7 c0             	movzx  eax,ax
c001f739:	09 f0                	or     eax,esi
c001f73b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f73e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f742:	e9 84 00 00 00       	jmp    c001f7cb <Vm::faultHandler(regs*)+0x673>
c001f747:	52                   	push   edx
c001f748:	52                   	push   edx
c001f749:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f74d:	50                   	push   eax
c001f74e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f752:	50                   	push   eax
c001f753:	e8 0e f6 ff ff       	call   c001ed66 <Vm::outbv(unsigned short, unsigned char)>
c001f758:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f75c:	eb 53                	jmp    c001f7b1 <Vm::faultHandler(regs*)+0x659>
c001f75e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f761:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f765:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f76a:	74 03                	je     c001f76f <Vm::faultHandler(regs*)+0x617>
c001f76c:	ef                   	out    dx,eax
c001f76d:	eb cf                	jmp    c001f73e <Vm::faultHandler(regs*)+0x5e6>
c001f76f:	66 ef                	out    dx,ax
c001f771:	eb cb                	jmp    c001f73e <Vm::faultHandler(regs*)+0x5e6>
c001f773:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f77a:	83 ec 0c             	sub    esp,0xc
c001f77d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f781:	50                   	push   eax
c001f782:	e8 cc f5 ff ff       	call   c001ed53 <Vm::inbv(unsigned short)>
c001f787:	0f b6 c0             	movzx  eax,al
c001f78a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f78d:	eb 1f                	jmp    c001f7ae <Vm::faultHandler(regs*)+0x656>
c001f78f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f792:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f797:	74 03                	je     c001f79c <Vm::faultHandler(regs*)+0x644>
c001f799:	ed                   	in     eax,dx
c001f79a:	eb 0d                	jmp    c001f7a9 <Vm::faultHandler(regs*)+0x651>
c001f79c:	66 ed                	in     ax,dx
c001f79e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f7a1:	0f b7 c0             	movzx  eax,ax
c001f7a4:	66 31 d2             	xor    dx,dx
c001f7a7:	09 d0                	or     eax,edx
c001f7a9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f7ac:	eb 1a                	jmp    c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f7ae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f7b1:	83 c4 10             	add    esp,0x10
c001f7b4:	eb 15                	jmp    c001f7cb <Vm::faultHandler(regs*)+0x673>
c001f7b6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f7b9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f7bc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f7c1:	74 03                	je     c001f7c6 <Vm::faultHandler(regs*)+0x66e>
c001f7c3:	ef                   	out    dx,eax
c001f7c4:	eb 02                	jmp    c001f7c8 <Vm::faultHandler(regs*)+0x670>
c001f7c6:	66 ef                	out    dx,ax
c001f7c8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f7cb:	b0 01                	mov    al,0x1
c001f7cd:	eb 56                	jmp    c001f825 <Vm::faultHandler(regs*)+0x6cd>
c001f7cf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f7d3:	50                   	push   eax
c001f7d4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f7d8:	50                   	push   eax
c001f7d9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f7dd:	50                   	push   eax
c001f7de:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f7e2:	50                   	push   eax
c001f7e3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f7e7:	50                   	push   eax
c001f7e8:	52                   	push   edx
c001f7e9:	52                   	push   edx
c001f7ea:	68 42 d2 02 c0       	push   0xc002d242
c001f7ef:	e8 f1 31 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c001f7f4:	83 c4 20             	add    esp,0x20
c001f7f7:	83 ec 0c             	sub    esp,0xc
c001f7fa:	6a 60                	push   0x60
c001f7fc:	e8 52 f5 ff ff       	call   c001ed53 <Vm::inbv(unsigned short)>
c001f801:	83 c4 10             	add    esp,0x10
c001f804:	3c 1c                	cmp    al,0x1c
c001f806:	74 04                	je     c001f80c <Vm::faultHandler(regs*)+0x6b4>
c001f808:	3c 5a                	cmp    al,0x5a
c001f80a:	75 eb                	jne    c001f7f7 <Vm::faultHandler(regs*)+0x69f>
c001f80c:	3c 5a                	cmp    al,0x5a
c001f80e:	74 04                	je     c001f814 <Vm::faultHandler(regs*)+0x6bc>
c001f810:	3c 1c                	cmp    al,0x1c
c001f812:	75 0f                	jne    c001f823 <Vm::faultHandler(regs*)+0x6cb>
c001f814:	83 ec 0c             	sub    esp,0xc
c001f817:	6a 60                	push   0x60
c001f819:	e8 35 f5 ff ff       	call   c001ed53 <Vm::inbv(unsigned short)>
c001f81e:	83 c4 10             	add    esp,0x10
c001f821:	eb e9                	jmp    c001f80c <Vm::faultHandler(regs*)+0x6b4>
c001f823:	31 c0                	xor    eax,eax
c001f825:	83 c4 1c             	add    esp,0x1c
c001f828:	5b                   	pop    ebx
c001f829:	5e                   	pop    esi
c001f82a:	5f                   	pop    edi
c001f82b:	5d                   	pop    ebp
c001f82c:	c3                   	ret    

c001f82d <Vm::fpuInternalTo32(unsigned long long)>:
c001f82d:	57                   	push   edi
c001f82e:	56                   	push   esi
c001f82f:	53                   	push   ebx
c001f830:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f838:	89 d6                	mov    esi,edx
c001f83a:	89 d7                	mov    edi,edx
c001f83c:	89 c1                	mov    ecx,eax
c001f83e:	c1 ef 14             	shr    edi,0x14
c001f841:	89 d3                	mov    ebx,edx
c001f843:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f849:	31 d2                	xor    edx,edx
c001f84b:	89 f8                	mov    eax,edi
c001f84d:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f853:	bf ff 00 00 00       	mov    edi,0xff
c001f858:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f85d:	83 d2 ff             	adc    edx,0xffffffff
c001f860:	39 c7                	cmp    edi,eax
c001f862:	bf 00 00 00 00       	mov    edi,0x0
c001f867:	19 d7                	sbb    edi,edx
c001f869:	72 15                	jb     c001f880 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f86b:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f86f:	c1 e0 17             	shl    eax,0x17
c001f872:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f878:	09 f1                	or     ecx,esi
c001f87a:	09 c1                	or     ecx,eax
c001f87c:	89 cf                	mov    edi,ecx
c001f87e:	eb 02                	jmp    c001f882 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f880:	31 ff                	xor    edi,edi
c001f882:	89 f8                	mov    eax,edi
c001f884:	5b                   	pop    ebx
c001f885:	5e                   	pop    esi
c001f886:	5f                   	pop    edi
c001f887:	c3                   	ret    

c001f888 <Vm::fpuInternalTo64(unsigned long long)>:
c001f888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f88c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f890:	c3                   	ret    

c001f891 <Vm::fpu32ToInternal(unsigned int)>:
c001f891:	57                   	push   edi
c001f892:	31 ff                	xor    edi,edi
c001f894:	56                   	push   esi
c001f895:	53                   	push   ebx
c001f896:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f89a:	89 cb                	mov    ebx,ecx
c001f89c:	89 ce                	mov    esi,ecx
c001f89e:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f8a4:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f8aa:	c1 e9 17             	shr    ecx,0x17
c001f8ad:	89 f0                	mov    eax,esi
c001f8af:	0f b6 d1             	movzx  edx,cl
c001f8b2:	81 c2 80 03 00 00    	add    edx,0x380
c001f8b8:	89 d1                	mov    ecx,edx
c001f8ba:	89 fa                	mov    edx,edi
c001f8bc:	c1 e1 14             	shl    ecx,0x14
c001f8bf:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f8c3:	c1 e0 1d             	shl    eax,0x1d
c001f8c6:	89 d7                	mov    edi,edx
c001f8c8:	89 c6                	mov    esi,eax
c001f8ca:	89 ca                	mov    edx,ecx
c001f8cc:	89 f0                	mov    eax,esi
c001f8ce:	09 fa                	or     edx,edi
c001f8d0:	09 da                	or     edx,ebx
c001f8d2:	5b                   	pop    ebx
c001f8d3:	5e                   	pop    esi
c001f8d4:	5f                   	pop    edi
c001f8d5:	c3                   	ret    

c001f8d6 <Vm::fpu64ToInternal(unsigned long long)>:
c001f8d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f8da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f8de:	c3                   	ret    

c001f8df <Vm::fpuFloatToLong(unsigned long long)>:
c001f8df:	57                   	push   edi
c001f8e0:	31 c0                	xor    eax,eax
c001f8e2:	56                   	push   esi
c001f8e3:	31 d2                	xor    edx,edx
c001f8e5:	53                   	push   ebx
c001f8e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f8ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f8ee:	89 d9                	mov    ecx,ebx
c001f8f0:	c1 e9 14             	shr    ecx,0x14
c001f8f3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f8f9:	89 cf                	mov    edi,ecx
c001f8fb:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f901:	78 33                	js     c001f936 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f903:	89 d9                	mov    ecx,ebx
c001f905:	89 f0                	mov    eax,esi
c001f907:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f90d:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f913:	89 ca                	mov    edx,ecx
c001f915:	b9 34 00 00 00       	mov    ecx,0x34
c001f91a:	29 f9                	sub    ecx,edi
c001f91c:	0f ad d0             	shrd   eax,edx,cl
c001f91f:	d3 fa                	sar    edx,cl
c001f921:	f6 c1 20             	test   cl,0x20
c001f924:	74 05                	je     c001f92b <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f926:	89 d0                	mov    eax,edx
c001f928:	c1 fa 1f             	sar    edx,0x1f
c001f92b:	85 db                	test   ebx,ebx
c001f92d:	79 07                	jns    c001f936 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f92f:	f7 d8                	neg    eax
c001f931:	83 d2 00             	adc    edx,0x0
c001f934:	f7 da                	neg    edx
c001f936:	5b                   	pop    ebx
c001f937:	5e                   	pop    esi
c001f938:	5f                   	pop    edi
c001f939:	c3                   	ret    

c001f93a <Vm::fpuULongToFloat(unsigned long long)>:
c001f93a:	57                   	push   edi
c001f93b:	31 c9                	xor    ecx,ecx
c001f93d:	56                   	push   esi
c001f93e:	53                   	push   ebx
c001f93f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f943:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f947:	0f ba e7 14          	bt     edi,0x14
c001f94b:	72 07                	jb     c001f954 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f94d:	01 f6                	add    esi,esi
c001f94f:	11 ff                	adc    edi,edi
c001f951:	41                   	inc    ecx
c001f952:	eb f3                	jmp    c001f947 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f954:	89 fa                	mov    edx,edi
c001f956:	89 f0                	mov    eax,esi
c001f958:	bb 33 04 00 00       	mov    ebx,0x433
c001f95d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f963:	29 cb                	sub    ebx,ecx
c001f965:	89 d9                	mov    ecx,ebx
c001f967:	5b                   	pop    ebx
c001f968:	c1 e1 14             	shl    ecx,0x14
c001f96b:	5e                   	pop    esi
c001f96c:	09 ca                	or     edx,ecx
c001f96e:	5f                   	pop    edi
c001f96f:	c3                   	ret    

c001f970 <Vm::fpuLongToFloat(long long)>:
c001f970:	56                   	push   esi
c001f971:	31 c0                	xor    eax,eax
c001f973:	53                   	push   ebx
c001f974:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f978:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f97c:	39 c8                	cmp    eax,ecx
c001f97e:	19 d8                	sbb    eax,ebx
c001f980:	7d 04                	jge    c001f986 <Vm::fpuLongToFloat(long long)+0x16>
c001f982:	31 f6                	xor    esi,esi
c001f984:	eb 0c                	jmp    c001f992 <Vm::fpuLongToFloat(long long)+0x22>
c001f986:	f7 d9                	neg    ecx
c001f988:	be 01 00 00 00       	mov    esi,0x1
c001f98d:	83 d3 00             	adc    ebx,0x0
c001f990:	f7 db                	neg    ebx
c001f992:	31 c0                	xor    eax,eax
c001f994:	0f ba e3 14          	bt     ebx,0x14
c001f998:	72 07                	jb     c001f9a1 <Vm::fpuLongToFloat(long long)+0x31>
c001f99a:	01 c9                	add    ecx,ecx
c001f99c:	11 db                	adc    ebx,ebx
c001f99e:	40                   	inc    eax
c001f99f:	eb f3                	jmp    c001f994 <Vm::fpuLongToFloat(long long)+0x24>
c001f9a1:	ba 33 04 00 00       	mov    edx,0x433
c001f9a6:	29 c2                	sub    edx,eax
c001f9a8:	89 c8                	mov    eax,ecx
c001f9aa:	c1 e2 14             	shl    edx,0x14
c001f9ad:	89 d9                	mov    ecx,ebx
c001f9af:	89 f3                	mov    ebx,esi
c001f9b1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f9b7:	09 ca                	or     edx,ecx
c001f9b9:	84 db                	test   bl,bl
c001f9bb:	74 06                	je     c001f9c3 <Vm::fpuLongToFloat(long long)+0x53>
c001f9bd:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f9c3:	5b                   	pop    ebx
c001f9c4:	5e                   	pop    esi
c001f9c5:	c3                   	ret    

c001f9c6 <Vm::fpuGet0()>:
c001f9c6:	31 c0                	xor    eax,eax
c001f9c8:	31 d2                	xor    edx,edx
c001f9ca:	c3                   	ret    

c001f9cb <Vm::fpuGet1()>:
c001f9cb:	b8 01 00 00 00       	mov    eax,0x1
c001f9d0:	31 d2                	xor    edx,edx
c001f9d2:	c3                   	ret    

c001f9d3 <Vm::fpuGetPi()>:
c001f9d3:	b8 03 00 00 00       	mov    eax,0x3
c001f9d8:	31 d2                	xor    edx,edx
c001f9da:	c3                   	ret    

c001f9db <Vm::fpuGetLog2E()>:
c001f9db:	83 ec 18             	sub    esp,0x18
c001f9de:	68 a0 d2 02 c0       	push   0xc002d2a0
c001f9e3:	e8 1d aa ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001f9e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f9ed:	31 d2                	xor    edx,edx
c001f9ef:	83 c4 1c             	add    esp,0x1c
c001f9f2:	c3                   	ret    

c001f9f3 <Vm::fpuGetLogE2()>:
c001f9f3:	83 ec 18             	sub    esp,0x18
c001f9f6:	68 ac d2 02 c0       	push   0xc002d2ac
c001f9fb:	e8 05 aa ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001fa00:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fa05:	31 d2                	xor    edx,edx
c001fa07:	83 c4 1c             	add    esp,0x1c
c001fa0a:	c3                   	ret    

c001fa0b <Vm::fpuGetLog210()>:
c001fa0b:	83 ec 18             	sub    esp,0x18
c001fa0e:	68 b8 d2 02 c0       	push   0xc002d2b8
c001fa13:	e8 ed a9 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001fa18:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fa1d:	31 d2                	xor    edx,edx
c001fa1f:	83 c4 1c             	add    esp,0x1c
c001fa22:	c3                   	ret    

c001fa23 <Vm::fpuGetLog102()>:
c001fa23:	83 ec 18             	sub    esp,0x18
c001fa26:	68 c5 d2 02 c0       	push   0xc002d2c5
c001fa2b:	e8 d5 a9 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001fa30:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fa35:	31 d2                	xor    edx,edx
c001fa37:	83 c4 1c             	add    esp,0x1c
c001fa3a:	c3                   	ret    

c001fa3b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fa3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa3f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fa43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa47:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fa4b:	0f 92 c0             	setb   al
c001fa4e:	c3                   	ret    

c001fa4f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fa4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa57:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fa5b:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001fa5f:	09 c2                	or     edx,eax
c001fa61:	0f 94 c0             	sete   al
c001fa64:	c3                   	ret    

c001fa65 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001fa65:	57                   	push   edi
c001fa66:	56                   	push   esi
c001fa67:	53                   	push   ebx
c001fa68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fa6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fa74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fa78:	57                   	push   edi
c001fa79:	56                   	push   esi
c001fa7a:	53                   	push   ebx
c001fa7b:	51                   	push   ecx
c001fa7c:	e8 ce ff ff ff       	call   c001fa4f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fa81:	83 c4 10             	add    esp,0x10
c001fa84:	88 c2                	mov    dl,al
c001fa86:	31 c0                	xor    eax,eax
c001fa88:	84 d2                	test   dl,dl
c001fa8a:	75 0c                	jne    c001fa98 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fa8c:	57                   	push   edi
c001fa8d:	56                   	push   esi
c001fa8e:	53                   	push   ebx
c001fa8f:	51                   	push   ecx
c001fa90:	e8 a6 ff ff ff       	call   c001fa3b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fa95:	83 c4 10             	add    esp,0x10
c001fa98:	83 e0 01             	and    eax,0x1
c001fa9b:	5b                   	pop    ebx
c001fa9c:	88 c1                	mov    cl,al
c001fa9e:	83 e2 01             	and    edx,0x1
c001faa1:	a0 21 28 03 c0       	mov    al,ds:0xc0032821
c001faa6:	c1 e2 06             	shl    edx,0x6
c001faa9:	83 e0 ba             	and    eax,0xffffffba
c001faac:	5e                   	pop    esi
c001faad:	09 c8                	or     eax,ecx
c001faaf:	5f                   	pop    edi
c001fab0:	09 d0                	or     eax,edx
c001fab2:	a2 21 28 03 c0       	mov    ds:0xc0032821,al
c001fab7:	c3                   	ret    

c001fab8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001fab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fabc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fac0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001fac4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001fac8:	c3                   	ret    

c001fac9 <Vm::fpuAbs(unsigned long long)>:
c001fac9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001facd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fad1:	c3                   	ret    

c001fad2 <Vm::fpuChs(unsigned long long)>:
c001fad2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fada:	f7 d8                	neg    eax
c001fadc:	83 d2 00             	adc    edx,0x0
c001fadf:	f7 da                	neg    edx
c001fae1:	c3                   	ret    

c001fae2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001fae2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001fae6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001faeb:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001faef:	eb c7                	jmp    c001fab8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001faf1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001faf1:	53                   	push   ebx
c001faf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001faf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fafa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fafe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fb02:	0f af ca             	imul   ecx,edx
c001fb05:	0f af d8             	imul   ebx,eax
c001fb08:	f7 e2                	mul    edx
c001fb0a:	01 d9                	add    ecx,ebx
c001fb0c:	5b                   	pop    ebx
c001fb0d:	01 ca                	add    edx,ecx
c001fb0f:	c3                   	ret    

c001fb10 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fb10:	83 ec 0c             	sub    esp,0xc
c001fb13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb23:	e8 cc 77 00 00       	call   c00272f4 <__udivdi3>
c001fb28:	83 c4 1c             	add    esp,0x1c
c001fb2b:	c3                   	ret    

c001fb2c <Vm::fpuSquare(unsigned long long)>:
c001fb2c:	50                   	push   eax
c001fb2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fb35:	52                   	push   edx
c001fb36:	50                   	push   eax
c001fb37:	52                   	push   edx
c001fb38:	50                   	push   eax
c001fb39:	e8 b3 ff ff ff       	call   c001faf1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fb3e:	83 c4 14             	add    esp,0x14
c001fb41:	c3                   	ret    

c001fb42 <Vm::fpuGetReg(int)>:
c001fb42:	83 ec 0c             	sub    esp,0xc
c001fb45:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fb4a:	76 10                	jbe    c001fb5c <Vm::fpuGetReg(int)+0x1a>
c001fb4c:	83 ec 0c             	sub    esp,0xc
c001fb4f:	68 d2 d2 02 c0       	push   0xc002d2d2
c001fb54:	e8 ac a8 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001fb59:	83 c4 10             	add    esp,0x10
c001fb5c:	a0 21 28 03 c0       	mov    al,ds:0xc0032821
c001fb61:	b9 08 00 00 00       	mov    ecx,0x8
c001fb66:	c0 e8 03             	shr    al,0x3
c001fb69:	83 e0 07             	and    eax,0x7
c001fb6c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fb70:	99                   	cdq    
c001fb71:	f7 f9                	idiv   ecx
c001fb73:	8b 04 d5 24 28 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd7dc]
c001fb7a:	8b 14 d5 28 28 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd7d8]
c001fb81:	83 c4 0c             	add    esp,0xc
c001fb84:	c3                   	ret    

c001fb85 <Vm::fpuSetReg(int, unsigned long long)>:
c001fb85:	57                   	push   edi
c001fb86:	56                   	push   esi
c001fb87:	52                   	push   edx
c001fb88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fb8c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fb90:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fb95:	76 10                	jbe    c001fba7 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fb97:	83 ec 0c             	sub    esp,0xc
c001fb9a:	68 e5 d2 02 c0       	push   0xc002d2e5
c001fb9f:	e8 61 a8 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c001fba4:	83 c4 10             	add    esp,0x10
c001fba7:	a0 21 28 03 c0       	mov    al,ds:0xc0032821
c001fbac:	b9 08 00 00 00       	mov    ecx,0x8
c001fbb1:	c0 e8 03             	shr    al,0x3
c001fbb4:	83 e0 07             	and    eax,0x7
c001fbb7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fbbb:	99                   	cdq    
c001fbbc:	f7 f9                	idiv   ecx
c001fbbe:	89 34 d5 24 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd7dc],esi
c001fbc5:	89 3c d5 28 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd7d8],edi
c001fbcc:	58                   	pop    eax
c001fbcd:	5e                   	pop    esi
c001fbce:	5f                   	pop    edi
c001fbcf:	c3                   	ret    

c001fbd0 <Vm::fpuPush(unsigned long long)>:
c001fbd0:	a0 21 28 03 c0       	mov    al,ds:0xc0032821
c001fbd5:	c0 e8 03             	shr    al,0x3
c001fbd8:	83 e0 07             	and    eax,0x7
c001fbdb:	83 c0 07             	add    eax,0x7
c001fbde:	88 c2                	mov    dl,al
c001fbe0:	83 e0 07             	and    eax,0x7
c001fbe3:	83 e2 07             	and    edx,0x7
c001fbe6:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fbed:	8a 15 21 28 03 c0    	mov    dl,BYTE PTR ds:0xc0032821
c001fbf3:	83 e2 c7             	and    edx,0xffffffc7
c001fbf6:	09 ca                	or     edx,ecx
c001fbf8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbfc:	88 15 21 28 03 c0    	mov    BYTE PTR ds:0xc0032821,dl
c001fc02:	89 0c c5 28 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd7d8],ecx
c001fc09:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc0d:	89 14 c5 24 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd7dc],edx
c001fc14:	a1 64 28 03 c0       	mov    eax,ds:0xc0032864
c001fc19:	83 f8 08             	cmp    eax,0x8
c001fc1c:	75 08                	jne    c001fc26 <Vm::fpuPush(unsigned long long)+0x56>
c001fc1e:	80 0d 20 28 03 c0 40 	or     BYTE PTR ds:0xc0032820,0x40
c001fc25:	c3                   	ret    
c001fc26:	40                   	inc    eax
c001fc27:	a3 64 28 03 c0       	mov    ds:0xc0032864,eax
c001fc2c:	c3                   	ret    

c001fc2d <Vm::fpuPop()>:
c001fc2d:	8a 0d 21 28 03 c0    	mov    cl,BYTE PTR ds:0xc0032821
c001fc33:	53                   	push   ebx
c001fc34:	c0 e9 03             	shr    cl,0x3
c001fc37:	8a 1d 21 28 03 c0    	mov    bl,BYTE PTR ds:0xc0032821
c001fc3d:	83 e1 07             	and    ecx,0x7
c001fc40:	83 e3 c7             	and    ebx,0xffffffc7
c001fc43:	8b 04 cd 24 28 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd7dc]
c001fc4a:	8b 14 cd 28 28 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd7d8]
c001fc51:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fc58:	83 e1 38             	and    ecx,0x38
c001fc5b:	09 d9                	or     ecx,ebx
c001fc5d:	88 0d 21 28 03 c0    	mov    BYTE PTR ds:0xc0032821,cl
c001fc63:	8b 0d 64 28 03 c0    	mov    ecx,DWORD PTR ds:0xc0032864
c001fc69:	85 c9                	test   ecx,ecx
c001fc6b:	74 09                	je     c001fc76 <Vm::fpuPop()+0x49>
c001fc6d:	49                   	dec    ecx
c001fc6e:	89 0d 64 28 03 c0    	mov    DWORD PTR ds:0xc0032864,ecx
c001fc74:	eb 07                	jmp    c001fc7d <Vm::fpuPop()+0x50>
c001fc76:	80 0d 20 28 03 c0 40 	or     BYTE PTR ds:0xc0032820,0x40
c001fc7d:	5b                   	pop    ebx
c001fc7e:	c3                   	ret    

c001fc7f <Vm::x87Handler(regs*)>:
c001fc7f:	55                   	push   ebp
c001fc80:	57                   	push   edi
c001fc81:	56                   	push   esi
c001fc82:	53                   	push   ebx
c001fc83:	83 ec 1c             	sub    esp,0x1c
c001fc86:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fc8a:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fc8f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fc92:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fc9a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fc9e:	50                   	push   eax
c001fc9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fca3:	50                   	push   eax
c001fca4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fca8:	50                   	push   eax
c001fca9:	53                   	push   ebx
c001fcaa:	e8 23 9e ff ff       	call   c0019ad2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fcaf:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fcb2:	83 c4 10             	add    esp,0x10
c001fcb5:	89 c6                	mov    esi,eax
c001fcb7:	80 fa d9             	cmp    dl,0xd9
c001fcba:	0f 85 52 01 00 00    	jne    c001fe12 <Vm::x87Handler(regs*)+0x193>
c001fcc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcc4:	8d 50 20             	lea    edx,[eax+0x20]
c001fcc7:	80 fa 0e             	cmp    dl,0xe
c001fcca:	0f 87 86 00 00 00    	ja     c001fd56 <Vm::x87Handler(regs*)+0xd7>
c001fcd0:	0f b6 d2             	movzx  edx,dl
c001fcd3:	ff 24 95 f8 d2 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2d08]
c001fcda:	e8 e7 fc ff ff       	call   c001f9c6 <Vm::fpuGet0()>
c001fcdf:	eb 05                	jmp    c001fce6 <Vm::x87Handler(regs*)+0x67>
c001fce1:	e8 e5 fc ff ff       	call   c001f9cb <Vm::fpuGet1()>
c001fce6:	57                   	push   edi
c001fce7:	57                   	push   edi
c001fce8:	52                   	push   edx
c001fce9:	50                   	push   eax
c001fcea:	e8 e1 fe ff ff       	call   c001fbd0 <Vm::fpuPush(unsigned long long)>
c001fcef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fcf3:	83 c4 10             	add    esp,0x10
c001fcf6:	b0 01                	mov    al,0x1
c001fcf8:	e9 e3 09 00 00       	jmp    c00206e0 <Vm::x87Handler(regs*)+0xa61>
c001fcfd:	83 ec 0c             	sub    esp,0xc
c001fd00:	6a 00                	push   0x0
c001fd02:	e8 3b fe ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001fd07:	59                   	pop    ecx
c001fd08:	5e                   	pop    esi
c001fd09:	52                   	push   edx
c001fd0a:	50                   	push   eax
c001fd0b:	e8 c2 fd ff ff       	call   c001fad2 <Vm::fpuChs(unsigned long long)>
c001fd10:	eb 13                	jmp    c001fd25 <Vm::x87Handler(regs*)+0xa6>
c001fd12:	83 ec 0c             	sub    esp,0xc
c001fd15:	6a 00                	push   0x0
c001fd17:	e8 26 fe ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001fd1c:	5f                   	pop    edi
c001fd1d:	5d                   	pop    ebp
c001fd1e:	52                   	push   edx
c001fd1f:	50                   	push   eax
c001fd20:	e8 a4 fd ff ff       	call   c001fac9 <Vm::fpuAbs(unsigned long long)>
c001fd25:	83 c4 0c             	add    esp,0xc
c001fd28:	52                   	push   edx
c001fd29:	50                   	push   eax
c001fd2a:	6a 00                	push   0x0
c001fd2c:	e8 54 fe ff ff       	call   c001fb85 <Vm::fpuSetReg(int, unsigned long long)>
c001fd31:	eb bc                	jmp    c001fcef <Vm::x87Handler(regs*)+0x70>
c001fd33:	e8 d3 fc ff ff       	call   c001fa0b <Vm::fpuGetLog210()>
c001fd38:	eb ac                	jmp    c001fce6 <Vm::x87Handler(regs*)+0x67>
c001fd3a:	e8 9c fc ff ff       	call   c001f9db <Vm::fpuGetLog2E()>
c001fd3f:	eb a5                	jmp    c001fce6 <Vm::x87Handler(regs*)+0x67>
c001fd41:	e8 8d fc ff ff       	call   c001f9d3 <Vm::fpuGetPi()>
c001fd46:	eb 9e                	jmp    c001fce6 <Vm::x87Handler(regs*)+0x67>
c001fd48:	e8 d6 fc ff ff       	call   c001fa23 <Vm::fpuGetLog102()>
c001fd4d:	eb 97                	jmp    c001fce6 <Vm::x87Handler(regs*)+0x67>
c001fd4f:	e8 9f fc ff ff       	call   c001f9f3 <Vm::fpuGetLogE2()>
c001fd54:	eb 90                	jmp    c001fce6 <Vm::x87Handler(regs*)+0x67>
c001fd56:	8d 50 40             	lea    edx,[eax+0x40]
c001fd59:	80 fa 07             	cmp    dl,0x7
c001fd5c:	77 15                	ja     c001fd73 <Vm::x87Handler(regs*)+0xf4>
c001fd5e:	83 ec 0c             	sub    esp,0xc
c001fd61:	2d c0 00 00 00       	sub    eax,0xc0
c001fd66:	50                   	push   eax
c001fd67:	e8 d6 fd ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001fd6c:	59                   	pop    ecx
c001fd6d:	5e                   	pop    esi
c001fd6e:	e9 75 ff ff ff       	jmp    c001fce8 <Vm::x87Handler(regs*)+0x69>
c001fd73:	8d 50 38             	lea    edx,[eax+0x38]
c001fd76:	80 fa 07             	cmp    dl,0x7
c001fd79:	77 3c                	ja     c001fdb7 <Vm::x87Handler(regs*)+0x138>
c001fd7b:	83 ec 0c             	sub    esp,0xc
c001fd7e:	2d c8 00 00 00       	sub    eax,0xc8
c001fd83:	50                   	push   eax
c001fd84:	e8 b9 fd ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001fd89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd90:	89 c6                	mov    esi,eax
c001fd92:	89 d7                	mov    edi,edx
c001fd94:	e8 a9 fd ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001fd99:	83 c4 0c             	add    esp,0xc
c001fd9c:	52                   	push   edx
c001fd9d:	50                   	push   eax
c001fd9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fda2:	2d c8 00 00 00       	sub    eax,0xc8
c001fda7:	50                   	push   eax
c001fda8:	e8 d8 fd ff ff       	call   c001fb85 <Vm::fpuSetReg(int, unsigned long long)>
c001fdad:	83 c4 0c             	add    esp,0xc
c001fdb0:	57                   	push   edi
c001fdb1:	56                   	push   esi
c001fdb2:	e9 73 ff ff ff       	jmp    c001fd2a <Vm::x87Handler(regs*)+0xab>
c001fdb7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdbb:	84 d2                	test   dl,dl
c001fdbd:	75 0f                	jne    c001fdce <Vm::x87Handler(regs*)+0x14f>
c001fdbf:	83 ec 0c             	sub    esp,0xc
c001fdc2:	ff 36                	push   DWORD PTR [esi]
c001fdc4:	e8 c8 fa ff ff       	call   c001f891 <Vm::fpu32ToInternal(unsigned int)>
c001fdc9:	e9 bf 00 00 00       	jmp    c001fe8d <Vm::x87Handler(regs*)+0x20e>
c001fdce:	80 fa 03             	cmp    dl,0x3
c001fdd1:	75 13                	jne    c001fde6 <Vm::x87Handler(regs*)+0x167>
c001fdd3:	e8 55 fe ff ff       	call   c001fc2d <Vm::fpuPop()>
c001fdd8:	55                   	push   ebp
c001fdd9:	55                   	push   ebp
c001fdda:	52                   	push   edx
c001fddb:	50                   	push   eax
c001fddc:	e8 4c fa ff ff       	call   c001f82d <Vm::fpuInternalTo32(unsigned long long)>
c001fde1:	e9 88 00 00 00       	jmp    c001fe6e <Vm::x87Handler(regs*)+0x1ef>
c001fde6:	80 fa 05             	cmp    dl,0x5
c001fde9:	75 0e                	jne    c001fdf9 <Vm::x87Handler(regs*)+0x17a>
c001fdeb:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fdee:	66 a3 22 28 03 c0    	mov    ds:0xc0032822,ax
c001fdf4:	e9 df 00 00 00       	jmp    c001fed8 <Vm::x87Handler(regs*)+0x259>
c001fdf9:	31 c0                	xor    eax,eax
c001fdfb:	80 fa 07             	cmp    dl,0x7
c001fdfe:	0f 85 dc 08 00 00    	jne    c00206e0 <Vm::x87Handler(regs*)+0xa61>
c001fe04:	66 a1 22 28 03 c0    	mov    ax,ds:0xc0032822
c001fe0a:	66 89 06             	mov    WORD PTR [esi],ax
c001fe0d:	e9 c6 00 00 00       	jmp    c001fed8 <Vm::x87Handler(regs*)+0x259>
c001fe12:	80 fa d8             	cmp    dl,0xd8
c001fe15:	0f 84 c9 00 00 00    	je     c001fee4 <Vm::x87Handler(regs*)+0x265>
c001fe1b:	80 fa dc             	cmp    dl,0xdc
c001fe1e:	0f 84 0d 02 00 00    	je     c0020031 <Vm::x87Handler(regs*)+0x3b2>
c001fe24:	80 fa de             	cmp    dl,0xde
c001fe27:	0f 84 cd 02 00 00    	je     c00200fa <Vm::x87Handler(regs*)+0x47b>
c001fe2d:	80 fa dd             	cmp    dl,0xdd
c001fe30:	0f 84 5f 04 00 00    	je     c0020295 <Vm::x87Handler(regs*)+0x616>
c001fe36:	80 fa da             	cmp    dl,0xda
c001fe39:	0f 84 24 05 00 00    	je     c0020363 <Vm::x87Handler(regs*)+0x6e4>
c001fe3f:	80 fa df             	cmp    dl,0xdf
c001fe42:	0f 84 68 05 00 00    	je     c00203b0 <Vm::x87Handler(regs*)+0x731>
c001fe48:	31 c0                	xor    eax,eax
c001fe4a:	80 fa db             	cmp    dl,0xdb
c001fe4d:	0f 85 8d 08 00 00    	jne    c00206e0 <Vm::x87Handler(regs*)+0xa61>
c001fe53:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe57:	80 fa 03             	cmp    dl,0x3
c001fe5a:	0f 85 70 06 00 00    	jne    c00204d0 <Vm::x87Handler(regs*)+0x851>
c001fe60:	e8 c8 fd ff ff       	call   c001fc2d <Vm::fpuPop()>
c001fe65:	55                   	push   ebp
c001fe66:	55                   	push   ebp
c001fe67:	52                   	push   edx
c001fe68:	50                   	push   eax
c001fe69:	e8 71 fa ff ff       	call   c001f8df <Vm::fpuFloatToLong(unsigned long long)>
c001fe6e:	83 c4 10             	add    esp,0x10
c001fe71:	89 06                	mov    DWORD PTR [esi],eax
c001fe73:	eb 63                	jmp    c001fed8 <Vm::x87Handler(regs*)+0x259>
c001fe75:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fe79:	84 d2                	test   dl,dl
c001fe7b:	0f 85 e6 05 00 00    	jne    c0020467 <Vm::x87Handler(regs*)+0x7e8>
c001fe81:	57                   	push   edi
c001fe82:	57                   	push   edi
c001fe83:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fe86:	ff 36                	push   DWORD PTR [esi]
c001fe88:	e8 49 fa ff ff       	call   c001f8d6 <Vm::fpu64ToInternal(unsigned long long)>
c001fe8d:	5e                   	pop    esi
c001fe8e:	5f                   	pop    edi
c001fe8f:	52                   	push   edx
c001fe90:	50                   	push   eax
c001fe91:	e8 3a fd ff ff       	call   c001fbd0 <Vm::fpuPush(unsigned long long)>
c001fe96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fe9a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fe9d:	e9 51 fe ff ff       	jmp    c001fcf3 <Vm::x87Handler(regs*)+0x74>
c001fea2:	80 fa 03             	cmp    dl,0x3
c001fea5:	0f 85 d7 06 00 00    	jne    c0020582 <Vm::x87Handler(regs*)+0x903>
c001feab:	57                   	push   edi
c001feac:	57                   	push   edi
c001fead:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001feb0:	ff 36                	push   DWORD PTR [esi]
c001feb2:	e8 1f fa ff ff       	call   c001f8d6 <Vm::fpu64ToInternal(unsigned long long)>
c001feb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001febe:	89 c6                	mov    esi,eax
c001fec0:	89 d7                	mov    edi,edx
c001fec2:	e8 7b fc ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001fec7:	57                   	push   edi
c001fec8:	56                   	push   esi
c001fec9:	52                   	push   edx
c001feca:	50                   	push   eax
c001fecb:	e8 95 fb ff ff       	call   c001fa65 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fed0:	83 c4 20             	add    esp,0x20
c001fed3:	e8 55 fd ff ff       	call   c001fc2d <Vm::fpuPop()>
c001fed8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fedc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fedf:	e9 12 fe ff ff       	jmp    c001fcf6 <Vm::x87Handler(regs*)+0x77>
c001fee4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee8:	8d 50 40             	lea    edx,[eax+0x40]
c001feeb:	80 fa 07             	cmp    dl,0x7
c001feee:	77 29                	ja     c001ff19 <Vm::x87Handler(regs*)+0x29a>
c001fef0:	83 ec 0c             	sub    esp,0xc
c001fef3:	2d c0 00 00 00       	sub    eax,0xc0
c001fef8:	50                   	push   eax
c001fef9:	e8 44 fc ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001fefe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff05:	89 c6                	mov    esi,eax
c001ff07:	89 d7                	mov    edi,edx
c001ff09:	e8 34 fc ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001ff0e:	57                   	push   edi
c001ff0f:	56                   	push   esi
c001ff10:	52                   	push   edx
c001ff11:	50                   	push   eax
c001ff12:	e8 a1 fb ff ff       	call   c001fab8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff17:	eb 2f                	jmp    c001ff48 <Vm::x87Handler(regs*)+0x2c9>
c001ff19:	8d 50 38             	lea    edx,[eax+0x38]
c001ff1c:	80 fa 07             	cmp    dl,0x7
c001ff1f:	77 2f                	ja     c001ff50 <Vm::x87Handler(regs*)+0x2d1>
c001ff21:	83 ec 0c             	sub    esp,0xc
c001ff24:	2d c8 00 00 00       	sub    eax,0xc8
c001ff29:	50                   	push   eax
c001ff2a:	e8 13 fc ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001ff2f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff36:	89 c6                	mov    esi,eax
c001ff38:	89 d7                	mov    edi,edx
c001ff3a:	e8 03 fc ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001ff3f:	57                   	push   edi
c001ff40:	56                   	push   esi
c001ff41:	52                   	push   edx
c001ff42:	50                   	push   eax
c001ff43:	e8 a9 fb ff ff       	call   c001faf1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff48:	83 c4 1c             	add    esp,0x1c
c001ff4b:	e9 d8 fd ff ff       	jmp    c001fd28 <Vm::x87Handler(regs*)+0xa9>
c001ff50:	8d 50 30             	lea    edx,[eax+0x30]
c001ff53:	80 fa 07             	cmp    dl,0x7
c001ff56:	77 0d                	ja     c001ff65 <Vm::x87Handler(regs*)+0x2e6>
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	2d d0 00 00 00       	sub    eax,0xd0
c001ff60:	e9 99 03 00 00       	jmp    c00202fe <Vm::x87Handler(regs*)+0x67f>
c001ff65:	8d 50 28             	lea    edx,[eax+0x28]
c001ff68:	80 fa 07             	cmp    dl,0x7
c001ff6b:	77 0d                	ja     c001ff7a <Vm::x87Handler(regs*)+0x2fb>
c001ff6d:	83 ec 0c             	sub    esp,0xc
c001ff70:	2d d8 00 00 00       	sub    eax,0xd8
c001ff75:	e9 c0 03 00 00       	jmp    c002033a <Vm::x87Handler(regs*)+0x6bb>
c001ff7a:	8d 50 20             	lea    edx,[eax+0x20]
c001ff7d:	80 fa 07             	cmp    dl,0x7
c001ff80:	77 1b                	ja     c001ff9d <Vm::x87Handler(regs*)+0x31e>
c001ff82:	83 ec 0c             	sub    esp,0xc
c001ff85:	2d e0 00 00 00       	sub    eax,0xe0
c001ff8a:	50                   	push   eax
c001ff8b:	e8 b2 fb ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001ff90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff97:	89 c6                	mov    esi,eax
c001ff99:	89 d7                	mov    edi,edx
c001ff9b:	eb 22                	jmp    c001ffbf <Vm::x87Handler(regs*)+0x340>
c001ff9d:	8d 50 18             	lea    edx,[eax+0x18]
c001ffa0:	80 fa 07             	cmp    dl,0x7
c001ffa3:	77 2d                	ja     c001ffd2 <Vm::x87Handler(regs*)+0x353>
c001ffa5:	83 ec 0c             	sub    esp,0xc
c001ffa8:	6a 00                	push   0x0
c001ffaa:	e8 93 fb ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001ffaf:	89 c6                	mov    esi,eax
c001ffb1:	89 d7                	mov    edi,edx
c001ffb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffb7:	2d e8 00 00 00       	sub    eax,0xe8
c001ffbc:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffbf:	e8 7e fb ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001ffc4:	57                   	push   edi
c001ffc5:	56                   	push   esi
c001ffc6:	52                   	push   edx
c001ffc7:	50                   	push   eax
c001ffc8:	e8 15 fb ff ff       	call   c001fae2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffcd:	e9 76 ff ff ff       	jmp    c001ff48 <Vm::x87Handler(regs*)+0x2c9>
c001ffd2:	8d 50 10             	lea    edx,[eax+0x10]
c001ffd5:	80 fa 07             	cmp    dl,0x7
c001ffd8:	77 1b                	ja     c001fff5 <Vm::x87Handler(regs*)+0x376>
c001ffda:	83 ec 0c             	sub    esp,0xc
c001ffdd:	2d f0 00 00 00       	sub    eax,0xf0
c001ffe2:	50                   	push   eax
c001ffe3:	e8 5a fb ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c001ffe8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffef:	89 c6                	mov    esi,eax
c001fff1:	89 d7                	mov    edi,edx
c001fff3:	eb 22                	jmp    c0020017 <Vm::x87Handler(regs*)+0x398>
c001fff5:	3c f7                	cmp    al,0xf7
c001fff7:	0f 86 d1 03 00 00    	jbe    c00203ce <Vm::x87Handler(regs*)+0x74f>
c001fffd:	83 ec 0c             	sub    esp,0xc
c0020000:	6a 00                	push   0x0
c0020002:	e8 3b fb ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020007:	89 c6                	mov    esi,eax
c0020009:	89 d7                	mov    edi,edx
c002000b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002000f:	2d f8 00 00 00       	sub    eax,0xf8
c0020014:	89 04 24             	mov    DWORD PTR [esp],eax
c0020017:	e8 26 fb ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c002001c:	57                   	push   edi
c002001d:	56                   	push   esi
c002001e:	52                   	push   edx
c002001f:	50                   	push   eax
c0020020:	e8 eb fa ff ff       	call   c001fb10 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020025:	83 c4 1c             	add    esp,0x1c
c0020028:	52                   	push   edx
c0020029:	50                   	push   eax
c002002a:	6a 00                	push   0x0
c002002c:	e9 51 02 00 00       	jmp    c0020282 <Vm::x87Handler(regs*)+0x603>
c0020031:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020035:	8d 50 40             	lea    edx,[eax+0x40]
c0020038:	80 fa 07             	cmp    dl,0x7
c002003b:	77 37                	ja     c0020074 <Vm::x87Handler(regs*)+0x3f5>
c002003d:	83 ec 0c             	sub    esp,0xc
c0020040:	2d c0 00 00 00       	sub    eax,0xc0
c0020045:	50                   	push   eax
c0020046:	e8 f7 fa ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c002004b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020052:	89 c6                	mov    esi,eax
c0020054:	89 d7                	mov    edi,edx
c0020056:	e8 e7 fa ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c002005b:	57                   	push   edi
c002005c:	56                   	push   esi
c002005d:	52                   	push   edx
c002005e:	50                   	push   eax
c002005f:	e8 54 fa ff ff       	call   c001fab8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020064:	83 c4 1c             	add    esp,0x1c
c0020067:	52                   	push   edx
c0020068:	50                   	push   eax
c0020069:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002006d:	2d c0 00 00 00       	sub    eax,0xc0
c0020072:	eb 3d                	jmp    c00200b1 <Vm::x87Handler(regs*)+0x432>
c0020074:	8d 50 38             	lea    edx,[eax+0x38]
c0020077:	80 fa 07             	cmp    dl,0x7
c002007a:	77 3b                	ja     c00200b7 <Vm::x87Handler(regs*)+0x438>
c002007c:	83 ec 0c             	sub    esp,0xc
c002007f:	2d c8 00 00 00       	sub    eax,0xc8
c0020084:	50                   	push   eax
c0020085:	e8 b8 fa ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c002008a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020091:	89 c6                	mov    esi,eax
c0020093:	89 d7                	mov    edi,edx
c0020095:	e8 a8 fa ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c002009a:	57                   	push   edi
c002009b:	56                   	push   esi
c002009c:	52                   	push   edx
c002009d:	50                   	push   eax
c002009e:	e8 4e fa ff ff       	call   c001faf1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200a3:	83 c4 1c             	add    esp,0x1c
c00200a6:	52                   	push   edx
c00200a7:	50                   	push   eax
c00200a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200ac:	2d c8 00 00 00       	sub    eax,0xc8
c00200b1:	50                   	push   eax
c00200b2:	e9 75 fc ff ff       	jmp    c001fd2c <Vm::x87Handler(regs*)+0xad>
c00200b7:	83 c0 18             	add    eax,0x18
c00200ba:	3c 07                	cmp    al,0x7
c00200bc:	0f 87 3b 04 00 00    	ja     c00204fd <Vm::x87Handler(regs*)+0x87e>
c00200c2:	83 ec 0c             	sub    esp,0xc
c00200c5:	6a 00                	push   0x0
c00200c7:	e8 76 fa ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00200cc:	89 c6                	mov    esi,eax
c00200ce:	89 d7                	mov    edi,edx
c00200d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200d4:	2d e8 00 00 00       	sub    eax,0xe8
c00200d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00200dc:	e8 61 fa ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00200e1:	57                   	push   edi
c00200e2:	56                   	push   esi
c00200e3:	52                   	push   edx
c00200e4:	50                   	push   eax
c00200e5:	e8 f8 f9 ff ff       	call   c001fae2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200ea:	83 c4 1c             	add    esp,0x1c
c00200ed:	52                   	push   edx
c00200ee:	50                   	push   eax
c00200ef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200f3:	2d e8 00 00 00       	sub    eax,0xe8
c00200f8:	eb b7                	jmp    c00200b1 <Vm::x87Handler(regs*)+0x432>
c00200fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200fe:	8d 50 40             	lea    edx,[eax+0x40]
c0020101:	80 fa 07             	cmp    dl,0x7
c0020104:	77 3a                	ja     c0020140 <Vm::x87Handler(regs*)+0x4c1>
c0020106:	83 ec 0c             	sub    esp,0xc
c0020109:	2d c0 00 00 00       	sub    eax,0xc0
c002010e:	50                   	push   eax
c002010f:	e8 2e fa ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020114:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002011b:	89 c6                	mov    esi,eax
c002011d:	89 d7                	mov    edi,edx
c002011f:	e8 1e fa ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020124:	57                   	push   edi
c0020125:	56                   	push   esi
c0020126:	52                   	push   edx
c0020127:	50                   	push   eax
c0020128:	e8 8b f9 ff ff       	call   c001fab8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002012d:	83 c4 1c             	add    esp,0x1c
c0020130:	52                   	push   edx
c0020131:	50                   	push   eax
c0020132:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020136:	2d c0 00 00 00       	sub    eax,0xc0
c002013b:	e9 9e 01 00 00       	jmp    c00202de <Vm::x87Handler(regs*)+0x65f>
c0020140:	8d 50 20             	lea    edx,[eax+0x20]
c0020143:	80 fa 07             	cmp    dl,0x7
c0020146:	77 3a                	ja     c0020182 <Vm::x87Handler(regs*)+0x503>
c0020148:	83 ec 0c             	sub    esp,0xc
c002014b:	2d e0 00 00 00       	sub    eax,0xe0
c0020150:	50                   	push   eax
c0020151:	e8 ec f9 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020156:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002015d:	89 c6                	mov    esi,eax
c002015f:	89 d7                	mov    edi,edx
c0020161:	e8 dc f9 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020166:	57                   	push   edi
c0020167:	56                   	push   esi
c0020168:	52                   	push   edx
c0020169:	50                   	push   eax
c002016a:	e8 73 f9 ff ff       	call   c001fae2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002016f:	83 c4 1c             	add    esp,0x1c
c0020172:	52                   	push   edx
c0020173:	50                   	push   eax
c0020174:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020178:	2d e0 00 00 00       	sub    eax,0xe0
c002017d:	e9 5c 01 00 00       	jmp    c00202de <Vm::x87Handler(regs*)+0x65f>
c0020182:	8d 50 18             	lea    edx,[eax+0x18]
c0020185:	80 fa 07             	cmp    dl,0x7
c0020188:	77 3b                	ja     c00201c5 <Vm::x87Handler(regs*)+0x546>
c002018a:	83 ec 0c             	sub    esp,0xc
c002018d:	6a 00                	push   0x0
c002018f:	e8 ae f9 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020194:	89 c6                	mov    esi,eax
c0020196:	89 d7                	mov    edi,edx
c0020198:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002019c:	2d e8 00 00 00       	sub    eax,0xe8
c00201a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00201a4:	e8 99 f9 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00201a9:	57                   	push   edi
c00201aa:	56                   	push   esi
c00201ab:	52                   	push   edx
c00201ac:	50                   	push   eax
c00201ad:	e8 30 f9 ff ff       	call   c001fae2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00201b2:	83 c4 1c             	add    esp,0x1c
c00201b5:	52                   	push   edx
c00201b6:	50                   	push   eax
c00201b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201bb:	2d e8 00 00 00       	sub    eax,0xe8
c00201c0:	e9 19 01 00 00       	jmp    c00202de <Vm::x87Handler(regs*)+0x65f>
c00201c5:	8d 50 38             	lea    edx,[eax+0x38]
c00201c8:	80 fa 07             	cmp    dl,0x7
c00201cb:	77 37                	ja     c0020204 <Vm::x87Handler(regs*)+0x585>
c00201cd:	83 ec 0c             	sub    esp,0xc
c00201d0:	2d c8 00 00 00       	sub    eax,0xc8
c00201d5:	50                   	push   eax
c00201d6:	e8 67 f9 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00201db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201e2:	89 c6                	mov    esi,eax
c00201e4:	89 d7                	mov    edi,edx
c00201e6:	e8 57 f9 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00201eb:	57                   	push   edi
c00201ec:	56                   	push   esi
c00201ed:	52                   	push   edx
c00201ee:	50                   	push   eax
c00201ef:	e8 fd f8 ff ff       	call   c001faf1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00201f4:	83 c4 1c             	add    esp,0x1c
c00201f7:	52                   	push   edx
c00201f8:	50                   	push   eax
c00201f9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201fd:	2d c8 00 00 00       	sub    eax,0xc8
c0020202:	eb 7d                	jmp    c0020281 <Vm::x87Handler(regs*)+0x602>
c0020204:	3c f7                	cmp    al,0xf7
c0020206:	76 38                	jbe    c0020240 <Vm::x87Handler(regs*)+0x5c1>
c0020208:	83 ec 0c             	sub    esp,0xc
c002020b:	6a 00                	push   0x0
c002020d:	e8 30 f9 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020212:	89 c6                	mov    esi,eax
c0020214:	89 d7                	mov    edi,edx
c0020216:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002021a:	2d f8 00 00 00       	sub    eax,0xf8
c002021f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020222:	e8 1b f9 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020227:	57                   	push   edi
c0020228:	56                   	push   esi
c0020229:	52                   	push   edx
c002022a:	50                   	push   eax
c002022b:	e8 e0 f8 ff ff       	call   c001fb10 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020230:	83 c4 1c             	add    esp,0x1c
c0020233:	52                   	push   edx
c0020234:	50                   	push   eax
c0020235:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020239:	2d f8 00 00 00       	sub    eax,0xf8
c002023e:	eb 41                	jmp    c0020281 <Vm::x87Handler(regs*)+0x602>
c0020240:	8d 50 10             	lea    edx,[eax+0x10]
c0020243:	80 fa 07             	cmp    dl,0x7
c0020246:	0f 87 5a 01 00 00    	ja     c00203a6 <Vm::x87Handler(regs*)+0x727>
c002024c:	83 ec 0c             	sub    esp,0xc
c002024f:	2d f0 00 00 00       	sub    eax,0xf0
c0020254:	50                   	push   eax
c0020255:	e8 e8 f8 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c002025a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020261:	89 c6                	mov    esi,eax
c0020263:	89 d7                	mov    edi,edx
c0020265:	e8 d8 f8 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c002026a:	57                   	push   edi
c002026b:	56                   	push   esi
c002026c:	52                   	push   edx
c002026d:	50                   	push   eax
c002026e:	e8 9d f8 ff ff       	call   c001fb10 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020273:	83 c4 1c             	add    esp,0x1c
c0020276:	52                   	push   edx
c0020277:	50                   	push   eax
c0020278:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002027c:	2d f0 00 00 00       	sub    eax,0xf0
c0020281:	50                   	push   eax
c0020282:	e8 fe f8 ff ff       	call   c001fb85 <Vm::fpuSetReg(int, unsigned long long)>
c0020287:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002028b:	e8 9d f9 ff ff       	call   c001fc2d <Vm::fpuPop()>
c0020290:	e9 5e fa ff ff       	jmp    c001fcf3 <Vm::x87Handler(regs*)+0x74>
c0020295:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020299:	8d 50 30             	lea    edx,[eax+0x30]
c002029c:	80 fa 07             	cmp    dl,0x7
c002029f:	77 1d                	ja     c00202be <Vm::x87Handler(regs*)+0x63f>
c00202a1:	83 ec 0c             	sub    esp,0xc
c00202a4:	6a 00                	push   0x0
c00202a6:	e8 97 f8 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00202ab:	83 c4 0c             	add    esp,0xc
c00202ae:	52                   	push   edx
c00202af:	50                   	push   eax
c00202b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202b4:	2d d0 00 00 00       	sub    eax,0xd0
c00202b9:	e9 f3 fd ff ff       	jmp    c00200b1 <Vm::x87Handler(regs*)+0x432>
c00202be:	8d 50 28             	lea    edx,[eax+0x28]
c00202c1:	80 fa 07             	cmp    dl,0x7
c00202c4:	77 28                	ja     c00202ee <Vm::x87Handler(regs*)+0x66f>
c00202c6:	83 ec 0c             	sub    esp,0xc
c00202c9:	6a 00                	push   0x0
c00202cb:	e8 72 f8 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00202d0:	83 c4 0c             	add    esp,0xc
c00202d3:	52                   	push   edx
c00202d4:	50                   	push   eax
c00202d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00202d9:	2d d8 00 00 00       	sub    eax,0xd8
c00202de:	50                   	push   eax
c00202df:	e8 a1 f8 ff ff       	call   c001fb85 <Vm::fpuSetReg(int, unsigned long long)>
c00202e4:	e8 44 f9 ff ff       	call   c001fc2d <Vm::fpuPop()>
c00202e9:	e9 01 fa ff ff       	jmp    c001fcef <Vm::x87Handler(regs*)+0x70>
c00202ee:	8d 50 20             	lea    edx,[eax+0x20]
c00202f1:	80 fa 07             	cmp    dl,0x7
c00202f4:	77 30                	ja     c0020326 <Vm::x87Handler(regs*)+0x6a7>
c00202f6:	83 ec 0c             	sub    esp,0xc
c00202f9:	2d e0 00 00 00       	sub    eax,0xe0
c00202fe:	50                   	push   eax
c00202ff:	e8 3e f8 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020304:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002030b:	89 c6                	mov    esi,eax
c002030d:	89 d7                	mov    edi,edx
c002030f:	e8 2e f8 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020314:	57                   	push   edi
c0020315:	56                   	push   esi
c0020316:	52                   	push   edx
c0020317:	50                   	push   eax
c0020318:	e8 48 f7 ff ff       	call   c001fa65 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002031d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020321:	e9 54 02 00 00       	jmp    c002057a <Vm::x87Handler(regs*)+0x8fb>
c0020326:	8d 50 18             	lea    edx,[eax+0x18]
c0020329:	80 fa 07             	cmp    dl,0x7
c002032c:	0f 87 43 fb ff ff    	ja     c001fe75 <Vm::x87Handler(regs*)+0x1f6>
c0020332:	83 ec 0c             	sub    esp,0xc
c0020335:	2d e8 00 00 00       	sub    eax,0xe8
c002033a:	50                   	push   eax
c002033b:	e8 02 f8 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020340:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020347:	89 c6                	mov    esi,eax
c0020349:	89 d7                	mov    edi,edx
c002034b:	e8 f2 f7 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020350:	57                   	push   edi
c0020351:	56                   	push   esi
c0020352:	52                   	push   edx
c0020353:	50                   	push   eax
c0020354:	e8 0c f7 ff ff       	call   c001fa65 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020359:	83 c4 20             	add    esp,0x20
c002035c:	e8 cc f8 ff ff       	call   c001fc2d <Vm::fpuPop()>
c0020361:	eb 62                	jmp    c00203c5 <Vm::x87Handler(regs*)+0x746>
c0020363:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020367:	0f 85 0f 01 00 00    	jne    c002047c <Vm::x87Handler(regs*)+0x7fd>
c002036d:	83 ec 0c             	sub    esp,0xc
c0020370:	6a 01                	push   0x1
c0020372:	e8 cb f7 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020377:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002037e:	89 c6                	mov    esi,eax
c0020380:	89 d7                	mov    edi,edx
c0020382:	e8 bb f7 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020387:	57                   	push   edi
c0020388:	56                   	push   esi
c0020389:	52                   	push   edx
c002038a:	50                   	push   eax
c002038b:	e8 d5 f6 ff ff       	call   c001fa65 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020390:	83 c4 20             	add    esp,0x20
c0020393:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020397:	e8 91 f8 ff ff       	call   c001fc2d <Vm::fpuPop()>
c002039c:	e8 8c f8 ff ff       	call   c001fc2d <Vm::fpuPop()>
c00203a1:	e9 50 f9 ff ff       	jmp    c001fcf6 <Vm::x87Handler(regs*)+0x77>
c00203a6:	3c d9                	cmp    al,0xd9
c00203a8:	0f 85 b5 02 00 00    	jne    c0020663 <Vm::x87Handler(regs*)+0x9e4>
c00203ae:	eb bd                	jmp    c002036d <Vm::x87Handler(regs*)+0x6ee>
c00203b0:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00203b4:	0f 85 ea 02 00 00    	jne    c00206a4 <Vm::x87Handler(regs*)+0xa25>
c00203ba:	0f b7 05 20 28 03 c0 	movzx  eax,WORD PTR ds:0xc0032820
c00203c1:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00203c5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00203c9:	e9 28 f9 ff ff       	jmp    c001fcf6 <Vm::x87Handler(regs*)+0x77>
c00203ce:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203d2:	84 d2                	test   dl,dl
c00203d4:	75 0f                	jne    c00203e5 <Vm::x87Handler(regs*)+0x766>
c00203d6:	83 ec 0c             	sub    esp,0xc
c00203d9:	ff 36                	push   DWORD PTR [esi]
c00203db:	e8 b1 f4 ff ff       	call   c001f891 <Vm::fpu32ToInternal(unsigned int)>
c00203e0:	e9 2c 01 00 00       	jmp    c0020511 <Vm::x87Handler(regs*)+0x892>
c00203e5:	80 fa 01             	cmp    dl,0x1
c00203e8:	75 0f                	jne    c00203f9 <Vm::x87Handler(regs*)+0x77a>
c00203ea:	83 ec 0c             	sub    esp,0xc
c00203ed:	ff 36                	push   DWORD PTR [esi]
c00203ef:	e8 9d f4 ff ff       	call   c001f891 <Vm::fpu32ToInternal(unsigned int)>
c00203f4:	e9 81 02 00 00       	jmp    c002067a <Vm::x87Handler(regs*)+0x9fb>
c00203f9:	80 fa 04             	cmp    dl,0x4
c00203fc:	75 0f                	jne    c002040d <Vm::x87Handler(regs*)+0x78e>
c00203fe:	83 ec 0c             	sub    esp,0xc
c0020401:	ff 36                	push   DWORD PTR [esi]
c0020403:	e8 89 f4 ff ff       	call   c001f891 <Vm::fpu32ToInternal(unsigned int)>
c0020408:	e9 86 01 00 00       	jmp    c0020593 <Vm::x87Handler(regs*)+0x914>
c002040d:	80 fa 05             	cmp    dl,0x5
c0020410:	75 1b                	jne    c002042d <Vm::x87Handler(regs*)+0x7ae>
c0020412:	83 ec 0c             	sub    esp,0xc
c0020415:	6a 00                	push   0x0
c0020417:	e8 26 f7 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c002041c:	89 c7                	mov    edi,eax
c002041e:	89 d5                	mov    ebp,edx
c0020420:	58                   	pop    eax
c0020421:	ff 36                	push   DWORD PTR [esi]
c0020423:	e8 69 f4 ff ff       	call   c001f891 <Vm::fpu32ToInternal(unsigned int)>
c0020428:	e9 a3 01 00 00       	jmp    c00205d0 <Vm::x87Handler(regs*)+0x951>
c002042d:	80 fa 06             	cmp    dl,0x6
c0020430:	75 0f                	jne    c0020441 <Vm::x87Handler(regs*)+0x7c2>
c0020432:	83 ec 0c             	sub    esp,0xc
c0020435:	ff 36                	push   DWORD PTR [esi]
c0020437:	e8 55 f4 ff ff       	call   c001f891 <Vm::fpu32ToInternal(unsigned int)>
c002043c:	e9 ae 01 00 00       	jmp    c00205ef <Vm::x87Handler(regs*)+0x970>
c0020441:	31 c0                	xor    eax,eax
c0020443:	80 fa 07             	cmp    dl,0x7
c0020446:	0f 85 94 02 00 00    	jne    c00206e0 <Vm::x87Handler(regs*)+0xa61>
c002044c:	83 ec 0c             	sub    esp,0xc
c002044f:	6a 00                	push   0x0
c0020451:	e8 ec f6 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020456:	89 c7                	mov    edi,eax
c0020458:	89 d5                	mov    ebp,edx
c002045a:	58                   	pop    eax
c002045b:	ff 36                	push   DWORD PTR [esi]
c002045d:	e8 2f f4 ff ff       	call   c001f891 <Vm::fpu32ToInternal(unsigned int)>
c0020462:	e9 cb 01 00 00       	jmp    c0020632 <Vm::x87Handler(regs*)+0x9b3>
c0020467:	80 fa 03             	cmp    dl,0x3
c002046a:	0f 85 d3 01 00 00    	jne    c0020643 <Vm::x87Handler(regs*)+0x9c4>
c0020470:	e8 b8 f7 ff ff       	call   c001fc2d <Vm::fpuPop()>
c0020475:	51                   	push   ecx
c0020476:	51                   	push   ecx
c0020477:	e9 de 01 00 00       	jmp    c002065a <Vm::x87Handler(regs*)+0x9db>
c002047c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020480:	80 fa 01             	cmp    dl,0x1
c0020483:	75 09                	jne    c002048e <Vm::x87Handler(regs*)+0x80f>
c0020485:	57                   	push   edi
c0020486:	57                   	push   edi
c0020487:	8b 06                	mov    eax,DWORD PTR [esi]
c0020489:	e9 e3 01 00 00       	jmp    c0020671 <Vm::x87Handler(regs*)+0x9f2>
c002048e:	80 fa 04             	cmp    dl,0x4
c0020491:	75 12                	jne    c00204a5 <Vm::x87Handler(regs*)+0x826>
c0020493:	31 d2                	xor    edx,edx
c0020495:	51                   	push   ecx
c0020496:	51                   	push   ecx
c0020497:	8b 06                	mov    eax,DWORD PTR [esi]
c0020499:	52                   	push   edx
c002049a:	50                   	push   eax
c002049b:	e8 d0 f4 ff ff       	call   c001f970 <Vm::fpuLongToFloat(long long)>
c00204a0:	e9 ee 00 00 00       	jmp    c0020593 <Vm::x87Handler(regs*)+0x914>
c00204a5:	31 c0                	xor    eax,eax
c00204a7:	80 fa 07             	cmp    dl,0x7
c00204aa:	0f 85 30 02 00 00    	jne    c00206e0 <Vm::x87Handler(regs*)+0xa61>
c00204b0:	83 ec 0c             	sub    esp,0xc
c00204b3:	6a 00                	push   0x0
c00204b5:	e8 88 f6 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00204ba:	89 c7                	mov    edi,eax
c00204bc:	89 d5                	mov    ebp,edx
c00204be:	58                   	pop    eax
c00204bf:	8b 06                	mov    eax,DWORD PTR [esi]
c00204c1:	5a                   	pop    edx
c00204c2:	31 d2                	xor    edx,edx
c00204c4:	52                   	push   edx
c00204c5:	50                   	push   eax
c00204c6:	e8 a5 f4 ff ff       	call   c001f970 <Vm::fpuLongToFloat(long long)>
c00204cb:	e9 62 01 00 00       	jmp    c0020632 <Vm::x87Handler(regs*)+0x9b3>
c00204d0:	84 d2                	test   dl,dl
c00204d2:	75 0d                	jne    c00204e1 <Vm::x87Handler(regs*)+0x862>
c00204d4:	31 d2                	xor    edx,edx
c00204d6:	55                   	push   ebp
c00204d7:	55                   	push   ebp
c00204d8:	8b 06                	mov    eax,DWORD PTR [esi]
c00204da:	52                   	push   edx
c00204db:	50                   	push   eax
c00204dc:	e9 d3 01 00 00       	jmp    c00206b4 <Vm::x87Handler(regs*)+0xa35>
c00204e1:	31 c0                	xor    eax,eax
c00204e3:	80 fa 02             	cmp    dl,0x2
c00204e6:	0f 85 f4 01 00 00    	jne    c00206e0 <Vm::x87Handler(regs*)+0xa61>
c00204ec:	83 ec 0c             	sub    esp,0xc
c00204ef:	6a 00                	push   0x0
c00204f1:	e8 4c f6 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00204f6:	59                   	pop    ecx
c00204f7:	5f                   	pop    edi
c00204f8:	e9 6a f9 ff ff       	jmp    c001fe67 <Vm::x87Handler(regs*)+0x1e8>
c00204fd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020501:	84 d2                	test   dl,dl
c0020503:	75 2a                	jne    c002052f <Vm::x87Handler(regs*)+0x8b0>
c0020505:	50                   	push   eax
c0020506:	50                   	push   eax
c0020507:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002050a:	ff 36                	push   DWORD PTR [esi]
c002050c:	e8 c5 f3 ff ff       	call   c001f8d6 <Vm::fpu64ToInternal(unsigned long long)>
c0020511:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020518:	89 c6                	mov    esi,eax
c002051a:	89 d7                	mov    edi,edx
c002051c:	e8 21 f6 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020521:	57                   	push   edi
c0020522:	56                   	push   esi
c0020523:	52                   	push   edx
c0020524:	50                   	push   eax
c0020525:	e8 8e f5 ff ff       	call   c001fab8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002052a:	e9 64 01 00 00       	jmp    c0020693 <Vm::x87Handler(regs*)+0xa14>
c002052f:	80 fa 01             	cmp    dl,0x1
c0020532:	75 11                	jne    c0020545 <Vm::x87Handler(regs*)+0x8c6>
c0020534:	50                   	push   eax
c0020535:	50                   	push   eax
c0020536:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020539:	ff 36                	push   DWORD PTR [esi]
c002053b:	e8 96 f3 ff ff       	call   c001f8d6 <Vm::fpu64ToInternal(unsigned long long)>
c0020540:	e9 35 01 00 00       	jmp    c002067a <Vm::x87Handler(regs*)+0x9fb>
c0020545:	80 fa 02             	cmp    dl,0x2
c0020548:	0f 85 54 f9 ff ff    	jne    c001fea2 <Vm::x87Handler(regs*)+0x223>
c002054e:	55                   	push   ebp
c002054f:	55                   	push   ebp
c0020550:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020553:	ff 36                	push   DWORD PTR [esi]
c0020555:	e8 7c f3 ff ff       	call   c001f8d6 <Vm::fpu64ToInternal(unsigned long long)>
c002055a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020561:	89 c6                	mov    esi,eax
c0020563:	89 d7                	mov    edi,edx
c0020565:	e8 d8 f5 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c002056a:	57                   	push   edi
c002056b:	56                   	push   esi
c002056c:	52                   	push   edx
c002056d:	50                   	push   eax
c002056e:	e8 f2 f4 ff ff       	call   c001fa65 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020573:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020577:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002057a:	83 c4 20             	add    esp,0x20
c002057d:	e9 74 f7 ff ff       	jmp    c001fcf6 <Vm::x87Handler(regs*)+0x77>
c0020582:	80 fa 04             	cmp    dl,0x4
c0020585:	75 2a                	jne    c00205b1 <Vm::x87Handler(regs*)+0x932>
c0020587:	51                   	push   ecx
c0020588:	51                   	push   ecx
c0020589:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002058c:	ff 36                	push   DWORD PTR [esi]
c002058e:	e8 43 f3 ff ff       	call   c001f8d6 <Vm::fpu64ToInternal(unsigned long long)>
c0020593:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002059a:	89 c6                	mov    esi,eax
c002059c:	89 d7                	mov    edi,edx
c002059e:	e8 9f f5 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00205a3:	57                   	push   edi
c00205a4:	56                   	push   esi
c00205a5:	52                   	push   edx
c00205a6:	50                   	push   eax
c00205a7:	e8 36 f5 ff ff       	call   c001fae2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205ac:	e9 e2 00 00 00       	jmp    c0020693 <Vm::x87Handler(regs*)+0xa14>
c00205b1:	80 fa 05             	cmp    dl,0x5
c00205b4:	75 28                	jne    c00205de <Vm::x87Handler(regs*)+0x95f>
c00205b6:	83 ec 0c             	sub    esp,0xc
c00205b9:	6a 00                	push   0x0
c00205bb:	e8 82 f5 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00205c0:	89 c7                	mov    edi,eax
c00205c2:	89 d5                	mov    ebp,edx
c00205c4:	58                   	pop    eax
c00205c5:	5a                   	pop    edx
c00205c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205c9:	ff 36                	push   DWORD PTR [esi]
c00205cb:	e8 06 f3 ff ff       	call   c001f8d6 <Vm::fpu64ToInternal(unsigned long long)>
c00205d0:	83 c4 10             	add    esp,0x10
c00205d3:	55                   	push   ebp
c00205d4:	57                   	push   edi
c00205d5:	52                   	push   edx
c00205d6:	50                   	push   eax
c00205d7:	e8 06 f5 ff ff       	call   c001fae2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205dc:	eb 60                	jmp    c002063e <Vm::x87Handler(regs*)+0x9bf>
c00205de:	80 fa 06             	cmp    dl,0x6
c00205e1:	75 2a                	jne    c002060d <Vm::x87Handler(regs*)+0x98e>
c00205e3:	51                   	push   ecx
c00205e4:	51                   	push   ecx
c00205e5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205e8:	ff 36                	push   DWORD PTR [esi]
c00205ea:	e8 e7 f2 ff ff       	call   c001f8d6 <Vm::fpu64ToInternal(unsigned long long)>
c00205ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205f6:	89 c6                	mov    esi,eax
c00205f8:	89 d7                	mov    edi,edx
c00205fa:	e8 43 f5 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c00205ff:	57                   	push   edi
c0020600:	56                   	push   esi
c0020601:	52                   	push   edx
c0020602:	50                   	push   eax
c0020603:	e8 08 f5 ff ff       	call   c001fb10 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020608:	e9 86 00 00 00       	jmp    c0020693 <Vm::x87Handler(regs*)+0xa14>
c002060d:	31 c0                	xor    eax,eax
c002060f:	80 fa 07             	cmp    dl,0x7
c0020612:	0f 85 c8 00 00 00    	jne    c00206e0 <Vm::x87Handler(regs*)+0xa61>
c0020618:	83 ec 0c             	sub    esp,0xc
c002061b:	6a 00                	push   0x0
c002061d:	e8 20 f5 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020622:	89 c7                	mov    edi,eax
c0020624:	89 d5                	mov    ebp,edx
c0020626:	58                   	pop    eax
c0020627:	5a                   	pop    edx
c0020628:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002062b:	ff 36                	push   DWORD PTR [esi]
c002062d:	e8 a4 f2 ff ff       	call   c001f8d6 <Vm::fpu64ToInternal(unsigned long long)>
c0020632:	83 c4 10             	add    esp,0x10
c0020635:	55                   	push   ebp
c0020636:	57                   	push   edi
c0020637:	52                   	push   edx
c0020638:	50                   	push   eax
c0020639:	e8 d2 f4 ff ff       	call   c001fb10 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002063e:	83 c4 0c             	add    esp,0xc
c0020641:	eb 53                	jmp    c0020696 <Vm::x87Handler(regs*)+0xa17>
c0020643:	31 c0                	xor    eax,eax
c0020645:	80 fa 02             	cmp    dl,0x2
c0020648:	0f 85 92 00 00 00    	jne    c00206e0 <Vm::x87Handler(regs*)+0xa61>
c002064e:	83 ec 0c             	sub    esp,0xc
c0020651:	6a 00                	push   0x0
c0020653:	e8 ea f4 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c0020658:	59                   	pop    ecx
c0020659:	5f                   	pop    edi
c002065a:	52                   	push   edx
c002065b:	50                   	push   eax
c002065c:	e8 27 f2 ff ff       	call   c001f888 <Vm::fpuInternalTo64(unsigned long long)>
c0020661:	eb 70                	jmp    c00206d3 <Vm::x87Handler(regs*)+0xa54>
c0020663:	31 c0                	xor    eax,eax
c0020665:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002066a:	75 74                	jne    c00206e0 <Vm::x87Handler(regs*)+0xa61>
c002066c:	50                   	push   eax
c002066d:	50                   	push   eax
c002066e:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020671:	31 d2                	xor    edx,edx
c0020673:	52                   	push   edx
c0020674:	50                   	push   eax
c0020675:	e8 f6 f2 ff ff       	call   c001f970 <Vm::fpuLongToFloat(long long)>
c002067a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020681:	89 c6                	mov    esi,eax
c0020683:	89 d7                	mov    edi,edx
c0020685:	e8 b8 f4 ff ff       	call   c001fb42 <Vm::fpuGetReg(int)>
c002068a:	57                   	push   edi
c002068b:	56                   	push   esi
c002068c:	52                   	push   edx
c002068d:	50                   	push   eax
c002068e:	e8 5e f4 ff ff       	call   c001faf1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020693:	83 c4 1c             	add    esp,0x1c
c0020696:	52                   	push   edx
c0020697:	50                   	push   eax
c0020698:	6a 00                	push   0x0
c002069a:	e8 e6 f4 ff ff       	call   c001fb85 <Vm::fpuSetReg(int, unsigned long long)>
c002069f:	e9 f2 f7 ff ff       	jmp    c001fe96 <Vm::x87Handler(regs*)+0x217>
c00206a4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00206a8:	80 fa 05             	cmp    dl,0x5
c00206ab:	75 11                	jne    c00206be <Vm::x87Handler(regs*)+0xa3f>
c00206ad:	55                   	push   ebp
c00206ae:	55                   	push   ebp
c00206af:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00206b2:	ff 36                	push   DWORD PTR [esi]
c00206b4:	e8 81 f2 ff ff       	call   c001f93a <Vm::fpuULongToFloat(unsigned long long)>
c00206b9:	e9 cf f7 ff ff       	jmp    c001fe8d <Vm::x87Handler(regs*)+0x20e>
c00206be:	31 c0                	xor    eax,eax
c00206c0:	80 fa 07             	cmp    dl,0x7
c00206c3:	75 1b                	jne    c00206e0 <Vm::x87Handler(regs*)+0xa61>
c00206c5:	e8 63 f5 ff ff       	call   c001fc2d <Vm::fpuPop()>
c00206ca:	51                   	push   ecx
c00206cb:	51                   	push   ecx
c00206cc:	52                   	push   edx
c00206cd:	50                   	push   eax
c00206ce:	e8 0c f2 ff ff       	call   c001f8df <Vm::fpuFloatToLong(unsigned long long)>
c00206d3:	83 c4 10             	add    esp,0x10
c00206d6:	89 06                	mov    DWORD PTR [esi],eax
c00206d8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00206db:	e9 f8 f7 ff ff       	jmp    c001fed8 <Vm::x87Handler(regs*)+0x259>
c00206e0:	83 c4 1c             	add    esp,0x1c
c00206e3:	5b                   	pop    ebx
c00206e4:	5e                   	pop    esi
c00206e5:	5f                   	pop    edi
c00206e6:	5d                   	pop    ebp
c00206e7:	c3                   	ret    

c00206e8 <__static_initialization_and_destruction_0(int, int)>:
c00206e8:	83 ec 0c             	sub    esp,0xc
c00206eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00206f0:	75 1a                	jne    c002070c <__static_initialization_and_destruction_0(int, int)+0x24>
c00206f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00206fa:	75 10                	jne    c002070c <__static_initialization_and_destruction_0(int, int)+0x24>
c00206fc:	83 ec 0c             	sub    esp,0xc
c00206ff:	68 20 28 03 c0       	push   0xc0032820
c0020704:	e8 33 90 00 00       	call   c002973c <Vm::_FPUState::_FPUState()>
c0020709:	83 c4 10             	add    esp,0x10
c002070c:	90                   	nop
c002070d:	83 c4 0c             	add    esp,0xc
c0020710:	c3                   	ret    

c0020711 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020711:	83 ec 0c             	sub    esp,0xc
c0020714:	83 ec 08             	sub    esp,0x8
c0020717:	68 ff ff 00 00       	push   0xffff
c002071c:	6a 01                	push   0x1
c002071e:	e8 c5 ff ff ff       	call   c00206e8 <__static_initialization_and_destruction_0(int, int)>
c0020723:	83 c4 10             	add    esp,0x10
c0020726:	83 c4 0c             	add    esp,0xc
c0020729:	c3                   	ret    

c002072a <FAT::getName()>:
c002072a:	b8 34 d3 02 c0       	mov    eax,0xc002d334
c002072f:	c3                   	ret    

c0020730 <FAT::tell(void*, unsigned long long*)>:
c0020730:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020735:	75 06                	jne    c002073d <FAT::tell(void*, unsigned long long*)+0xd>
c0020737:	b8 04 00 00 00       	mov    eax,0x4
c002073c:	c3                   	ret    
c002073d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020742:	75 06                	jne    c002074a <FAT::tell(void*, unsigned long long*)+0x1a>
c0020744:	b8 04 00 00 00       	mov    eax,0x4
c0020749:	c3                   	ret    
c002074a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002074e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020751:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020754:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020758:	89 01                	mov    DWORD PTR [ecx],eax
c002075a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002075d:	b8 00 00 00 00       	mov    eax,0x0
c0020762:	c3                   	ret    
c0020763:	90                   	nop

c0020764 <FAT::stat(void*, unsigned long long*)>:
c0020764:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020769:	75 06                	jne    c0020771 <FAT::stat(void*, unsigned long long*)+0xd>
c002076b:	b8 04 00 00 00       	mov    eax,0x4
c0020770:	c3                   	ret    
c0020771:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020776:	75 06                	jne    c002077e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020778:	b8 04 00 00 00       	mov    eax,0x4
c002077d:	c3                   	ret    
c002077e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020782:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020785:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020788:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002078c:	89 01                	mov    DWORD PTR [ecx],eax
c002078e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020791:	b8 00 00 00 00       	mov    eax,0x0
c0020796:	c3                   	ret    
c0020797:	90                   	nop

c0020798 <FAT::~FAT()>:
c0020798:	83 ec 0c             	sub    esp,0xc
c002079b:	ba c4 d3 02 c0       	mov    edx,0xc002d3c4
c00207a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207a4:	89 10                	mov    DWORD PTR [eax],edx
c00207a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207aa:	83 ec 0c             	sub    esp,0xc
c00207ad:	50                   	push   eax
c00207ae:	e8 61 25 ff ff       	call   c0012d14 <Filesystem::~Filesystem()>
c00207b3:	83 c4 10             	add    esp,0x10
c00207b6:	90                   	nop
c00207b7:	83 c4 0c             	add    esp,0xc
c00207ba:	c3                   	ret    
c00207bb:	90                   	nop

c00207bc <FAT::~FAT()>:
c00207bc:	83 ec 0c             	sub    esp,0xc
c00207bf:	83 ec 0c             	sub    esp,0xc
c00207c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207c6:	e8 cd ff ff ff       	call   c0020798 <FAT::~FAT()>
c00207cb:	83 c4 10             	add    esp,0x10
c00207ce:	83 ec 08             	sub    esp,0x8
c00207d1:	6a 08                	push   0x8
c00207d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00207d7:	e8 29 21 ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c00207dc:	83 c4 10             	add    esp,0x10
c00207df:	83 c4 0c             	add    esp,0xc
c00207e2:	c3                   	ret    
c00207e3:	90                   	nop

c00207e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00207e4:	83 ec 1c             	sub    esp,0x1c
c00207e7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00207ee:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00207f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207f7:	8b 04 85 a0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd760]
c00207fe:	83 f8 ff             	cmp    eax,0xffffffff
c0020801:	75 34                	jne    c0020837 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020803:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020807:	88 c2                	mov    dl,al
c0020809:	a1 80 28 03 c0       	mov    eax,ds:0xc0032880
c002080e:	01 d0                	add    eax,edx
c0020810:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020814:	8b 15 80 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032880
c002081a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002081e:	89 14 85 a0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd760],edx
c0020825:	a1 80 28 03 c0       	mov    eax,ds:0xc0032880
c002082a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002082e:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c0020835:	eb 17                	jmp    c002084e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020837:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002083b:	88 c2                	mov    dl,al
c002083d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020841:	8b 04 85 a0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd760]
c0020848:	01 d0                	add    eax,edx
c002084a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002084e:	83 ec 04             	sub    esp,0x4
c0020851:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020855:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020859:	8d 44 24 15          	lea    eax,[esp+0x15]
c002085d:	50                   	push   eax
c002085e:	e8 9b 64 fe ff       	call   c0006cfe <f_getlabel>
c0020863:	83 c4 10             	add    esp,0x10
c0020866:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002086a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002086f:	75 07                	jne    c0020878 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020871:	b8 00 00 00 00       	mov    eax,0x0
c0020876:	eb 05                	jmp    c002087d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020878:	b8 01 00 00 00       	mov    eax,0x1
c002087d:	83 c4 1c             	add    esp,0x1c
c0020880:	c3                   	ret    
c0020881:	90                   	nop

c0020882 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020882:	57                   	push   edi
c0020883:	83 ec 58             	sub    esp,0x58
c0020886:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002088e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020892:	b9 0f 00 00 00       	mov    ecx,0xf
c0020897:	b8 00 00 00 00       	mov    eax,0x0
c002089c:	fc                   	cld    
c002089d:	89 d7                	mov    edi,edx
c002089f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00208a1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00208a5:	8b 04 85 a0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd760]
c00208ac:	83 f8 ff             	cmp    eax,0xffffffff
c00208af:	75 34                	jne    c00208e5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00208b1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00208b5:	88 c2                	mov    dl,al
c00208b7:	a1 80 28 03 c0       	mov    eax,ds:0xc0032880
c00208bc:	01 d0                	add    eax,edx
c00208be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00208c2:	8b 15 80 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032880
c00208c8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00208cc:	89 14 85 a0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd760],edx
c00208d3:	a1 80 28 03 c0       	mov    eax,ds:0xc0032880
c00208d8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00208dc:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c00208e3:	eb 17                	jmp    c00208fc <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00208e5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00208e9:	88 c2                	mov    dl,al
c00208eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00208ef:	8b 04 85 a0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd760]
c00208f6:	01 d0                	add    eax,edx
c00208f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00208fc:	83 ec 08             	sub    esp,0x8
c00208ff:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020903:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020907:	50                   	push   eax
c0020908:	e8 3f 00 fe ff       	call   c000094c <strcat>
c002090d:	83 c4 10             	add    esp,0x10
c0020910:	83 ec 0c             	sub    esp,0xc
c0020913:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020917:	50                   	push   eax
c0020918:	e8 cf 65 fe ff       	call   c0006eec <f_setlabel>
c002091d:	83 c4 10             	add    esp,0x10
c0020920:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020924:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020929:	75 07                	jne    c0020932 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002092b:	b8 00 00 00 00       	mov    eax,0x0
c0020930:	eb 05                	jmp    c0020937 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020932:	b8 01 00 00 00       	mov    eax,0x1
c0020937:	83 c4 58             	add    esp,0x58
c002093a:	5f                   	pop    edi
c002093b:	c3                   	ret    

c002093c <FAT::format(LogicalDisk*, int, char const*, int)>:
c002093c:	83 ec 2c             	sub    esp,0x2c
c002093f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020947:	83 ec 08             	sub    esp,0x8
c002094a:	68 58 d3 02 c0       	push   0xc002d358
c002094f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020953:	e8 40 ff fd ff       	call   c0000898 <strcmp>
c0020958:	83 c4 10             	add    esp,0x10
c002095b:	85 c0                	test   eax,eax
c002095d:	0f 94 c0             	sete   al
c0020960:	84 c0                	test   al,al
c0020962:	74 0d                	je     c0020971 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020964:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002096c:	e9 a6 00 00 00       	jmp    c0020a17 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020971:	83 ec 08             	sub    esp,0x8
c0020974:	68 4a d3 02 c0       	push   0xc002d34a
c0020979:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002097d:	e8 16 ff fd ff       	call   c0000898 <strcmp>
c0020982:	83 c4 10             	add    esp,0x10
c0020985:	85 c0                	test   eax,eax
c0020987:	0f 94 c0             	sete   al
c002098a:	84 c0                	test   al,al
c002098c:	74 0a                	je     c0020998 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002098e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020996:	eb 7f                	jmp    c0020a17 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020998:	83 ec 08             	sub    esp,0x8
c002099b:	68 50 d3 02 c0       	push   0xc002d350
c00209a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00209a4:	e8 ef fe fd ff       	call   c0000898 <strcmp>
c00209a9:	83 c4 10             	add    esp,0x10
c00209ac:	85 c0                	test   eax,eax
c00209ae:	0f 94 c0             	sete   al
c00209b1:	84 c0                	test   al,al
c00209b3:	74 0a                	je     c00209bf <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00209b5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00209bd:	eb 58                	jmp    c0020a17 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00209bf:	83 ec 08             	sub    esp,0x8
c00209c2:	68 ac 9e 02 c0       	push   0xc0029eac
c00209c7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00209cb:	e8 c8 fe fd ff       	call   c0000898 <strcmp>
c00209d0:	83 c4 10             	add    esp,0x10
c00209d3:	85 c0                	test   eax,eax
c00209d5:	0f 94 c0             	sete   al
c00209d8:	84 c0                	test   al,al
c00209da:	74 0a                	je     c00209e6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00209dc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00209e4:	eb 31                	jmp    c0020a17 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00209e6:	83 ec 08             	sub    esp,0x8
c00209e9:	68 56 d3 02 c0       	push   0xc002d356
c00209ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00209f2:	e8 a1 fe fd ff       	call   c0000898 <strcmp>
c00209f7:	83 c4 10             	add    esp,0x10
c00209fa:	85 c0                	test   eax,eax
c00209fc:	0f 94 c0             	sete   al
c00209ff:	84 c0                	test   al,al
c0020a01:	74 0a                	je     c0020a0d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020a03:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020a0b:	eb 0a                	jmp    c0020a17 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020a0d:	b8 08 00 00 00       	mov    eax,0x8
c0020a12:	e9 04 01 00 00       	jmp    c0020b1b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020a17:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020a1e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020a23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a27:	8b 04 85 a0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd760]
c0020a2e:	83 f8 ff             	cmp    eax,0xffffffff
c0020a31:	75 34                	jne    c0020a67 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020a33:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020a37:	88 c2                	mov    dl,al
c0020a39:	a1 80 28 03 c0       	mov    eax,ds:0xc0032880
c0020a3e:	01 d0                	add    eax,edx
c0020a40:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020a44:	8b 15 80 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032880
c0020a4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a4e:	89 14 85 a0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd760],edx
c0020a55:	a1 80 28 03 c0       	mov    eax,ds:0xc0032880
c0020a5a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020a5e:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c0020a65:	eb 17                	jmp    c0020a7e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020a67:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020a6b:	88 c2                	mov    dl,al
c0020a6d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020a71:	8b 04 85 a0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd760]
c0020a78:	01 d0                	add    eax,edx
c0020a7a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020a7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a82:	88 04 24             	mov    BYTE PTR [esp],al
c0020a85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020a89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a8d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020a95:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020a9a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020aa2:	83 ec 0c             	sub    esp,0xc
c0020aa5:	68 00 20 00 00       	push   0x2000
c0020aaa:	e8 53 ee fe ff       	call   c000f902 <malloc>
c0020aaf:	83 c4 10             	add    esp,0x10
c0020ab2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ab6:	68 00 20 00 00       	push   0x2000
c0020abb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020abf:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020ac3:	50                   	push   eax
c0020ac4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020ac8:	50                   	push   eax
c0020ac9:	e8 69 68 fe ff       	call   c0007337 <f_mkfs>
c0020ace:	83 c4 10             	add    esp,0x10
c0020ad1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ad5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020ada:	75 07                	jne    c0020ae3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020adc:	b8 00 00 00 00       	mov    eax,0x0
c0020ae1:	eb 38                	jmp    c0020b1b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020ae3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020ae8:	75 17                	jne    c0020b01 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020aea:	83 ec 0c             	sub    esp,0xc
c0020aed:	68 94 d3 02 c0       	push   0xc002d394
c0020af2:	e8 ee 1e ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0020af7:	83 c4 10             	add    esp,0x10
c0020afa:	b8 09 00 00 00       	mov    eax,0x9
c0020aff:	eb 1a                	jmp    c0020b1b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020b01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b05:	83 ec 08             	sub    esp,0x8
c0020b08:	50                   	push   eax
c0020b09:	68 5c d3 02 c0       	push   0xc002d35c
c0020b0e:	e8 d2 1e ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0020b13:	83 c4 10             	add    esp,0x10
c0020b16:	b8 01 00 00 00       	mov    eax,0x1
c0020b1b:	83 c4 2c             	add    esp,0x2c
c0020b1e:	c3                   	ret    
c0020b1f:	90                   	nop

c0020b20 <FAT::tryMount(LogicalDisk*, int)>:
c0020b20:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020b26:	a1 80 28 03 c0       	mov    eax,ds:0xc0032880
c0020b2b:	83 f8 14             	cmp    eax,0x14
c0020b2e:	75 17                	jne    c0020b47 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020b30:	83 ec 0c             	sub    esp,0xc
c0020b33:	68 6e d3 02 c0       	push   0xc002d36e
c0020b38:	e8 c8 98 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0020b3d:	83 c4 10             	add    esp,0x10
c0020b40:	b0 00                	mov    al,0x0
c0020b42:	e9 d7 01 00 00       	jmp    c0020d1e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b47:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020b4e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020b54:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020b5a:	3d 00 02 00 00       	cmp    eax,0x200
c0020b5f:	74 07                	je     c0020b68 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020b61:	b0 00                	mov    al,0x0
c0020b63:	e9 b6 01 00 00       	jmp    c0020d1e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b68:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020b70:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020b77:	8b 04 85 a0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd760]
c0020b7e:	83 f8 ff             	cmp    eax,0xffffffff
c0020b81:	74 07                	je     c0020b8a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020b83:	b0 01                	mov    al,0x1
c0020b85:	e9 94 01 00 00       	jmp    c0020d1e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b8a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020b94:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020b9c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020ba3:	88 c2                	mov    dl,al
c0020ba5:	a1 80 28 03 c0       	mov    eax,ds:0xc0032880
c0020baa:	01 d0                	add    eax,edx
c0020bac:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020bb3:	8b 15 80 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032880
c0020bb9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020bc0:	89 14 85 a0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd760],edx
c0020bc7:	a1 80 28 03 c0       	mov    eax,ds:0xc0032880
c0020bcc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020bd3:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c0020bda:	83 ec 0c             	sub    esp,0xc
c0020bdd:	68 54 02 00 00       	push   0x254
c0020be2:	e8 1b ed fe ff       	call   c000f902 <malloc>
c0020be7:	83 c4 10             	add    esp,0x10
c0020bea:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020bf1:	83 ec 04             	sub    esp,0x4
c0020bf4:	6a 00                	push   0x0
c0020bf6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bfd:	50                   	push   eax
c0020bfe:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020c05:	e8 eb 42 fe ff       	call   c0004ef5 <f_mount>
c0020c0a:	83 c4 10             	add    esp,0x10
c0020c0d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020c14:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020c1c:	74 19                	je     c0020c37 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020c1e:	83 ec 0c             	sub    esp,0xc
c0020c21:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020c28:	e8 f5 ec fe ff       	call   c000f922 <rfree>
c0020c2d:	83 c4 10             	add    esp,0x10
c0020c30:	b0 00                	mov    al,0x0
c0020c32:	e9 e7 00 00 00       	jmp    c0020d1e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c37:	83 ec 04             	sub    esp,0x4
c0020c3a:	68 00 01 00 00       	push   0x100
c0020c3f:	6a 00                	push   0x0
c0020c41:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c48:	50                   	push   eax
c0020c49:	e8 02 fb fd ff       	call   c0000750 <memset>
c0020c4e:	83 c4 10             	add    esp,0x10
c0020c51:	83 ec 08             	sub    esp,0x8
c0020c54:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020c5b:	50                   	push   eax
c0020c5c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c63:	50                   	push   eax
c0020c64:	e8 e3 fc fd ff       	call   c000094c <strcat>
c0020c69:	83 c4 10             	add    esp,0x10
c0020c6c:	83 ec 08             	sub    esp,0x8
c0020c6f:	68 7c d3 02 c0       	push   0xc002d37c
c0020c74:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020c7b:	50                   	push   eax
c0020c7c:	e8 cb fc fd ff       	call   c000094c <strcat>
c0020c81:	83 c4 10             	add    esp,0x10
c0020c84:	83 ec 04             	sub    esp,0x4
c0020c87:	6a 01                	push   0x1
c0020c89:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020c90:	50                   	push   eax
c0020c91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c95:	50                   	push   eax
c0020c96:	e8 bc 42 fe ff       	call   c0004f57 <f_open>
c0020c9b:	83 c4 10             	add    esp,0x10
c0020c9e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ca5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020cac:	85 c0                	test   eax,eax
c0020cae:	74 0a                	je     c0020cba <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020cb0:	78 2d                	js     c0020cdf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020cb2:	83 e8 04             	sub    eax,0x4
c0020cb5:	83 f8 01             	cmp    eax,0x1
c0020cb8:	77 25                	ja     c0020cdf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020cba:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020cc2:	83 ec 0c             	sub    esp,0xc
c0020cc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020cc9:	50                   	push   eax
c0020cca:	e8 da 4d fe ff       	call   c0005aa9 <f_close>
c0020ccf:	83 c4 10             	add    esp,0x10
c0020cd2:	90                   	nop
c0020cd3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020cdb:	74 3a                	je     c0020d17 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020cdd:	eb 2d                	jmp    c0020d0c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020cdf:	83 ec 0c             	sub    esp,0xc
c0020ce2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ce9:	e8 34 ec fe ff       	call   c000f922 <rfree>
c0020cee:	83 c4 10             	add    esp,0x10
c0020cf1:	83 ec 04             	sub    esp,0x4
c0020cf4:	6a 00                	push   0x0
c0020cf6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020cfd:	50                   	push   eax
c0020cfe:	6a 00                	push   0x0
c0020d00:	e8 f0 41 fe ff       	call   c0004ef5 <f_mount>
c0020d05:	83 c4 10             	add    esp,0x10
c0020d08:	b0 00                	mov    al,0x0
c0020d0a:	eb 12                	jmp    c0020d1e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020d0c:	a1 80 28 03 c0       	mov    eax,ds:0xc0032880
c0020d11:	40                   	inc    eax
c0020d12:	a3 80 28 03 c0       	mov    ds:0xc0032880,eax
c0020d17:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020d1e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020d24:	c3                   	ret    
c0020d25:	90                   	nop

c0020d26 <FAT::getFileFirstSector(char const*)>:
c0020d26:	53                   	push   ebx
c0020d27:	83 ec 28             	sub    esp,0x28
c0020d2a:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020d32:	83 ec 0c             	sub    esp,0xc
c0020d35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d39:	e8 c4 eb fe ff       	call   c000f902 <malloc>
c0020d3e:	83 c4 10             	add    esp,0x10
c0020d41:	89 c3                	mov    ebx,eax
c0020d43:	a1 b0 27 03 c0       	mov    eax,ds:0xc00327b0
c0020d48:	83 ec 04             	sub    esp,0x4
c0020d4b:	50                   	push   eax
c0020d4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020d50:	53                   	push   ebx
c0020d51:	e8 ee 21 ff ff       	call   c0012f44 <File::File(char const*, Process*)>
c0020d56:	83 c4 10             	add    esp,0x10
c0020d59:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020d5d:	83 ec 08             	sub    esp,0x8
c0020d60:	6a 01                	push   0x1
c0020d62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020d66:	e8 3d 22 ff ff       	call   c0012fa8 <File::open(FileOpenMode)>
c0020d6b:	83 c4 10             	add    esp,0x10
c0020d6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d72:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d74:	83 c0 0c             	add    eax,0xc
c0020d77:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d79:	83 ec 0c             	sub    esp,0xc
c0020d7c:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020d80:	52                   	push   edx
c0020d81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020d85:	52                   	push   edx
c0020d86:	6a 00                	push   0x0
c0020d88:	6a 04                	push   0x4
c0020d8a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020d8e:	ff d0                	call   eax
c0020d90:	83 c4 20             	add    esp,0x20
c0020d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d97:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020d9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020da1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020da5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020da8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020dab:	83 ec 04             	sub    esp,0x4
c0020dae:	52                   	push   edx
c0020daf:	50                   	push   eax
c0020db0:	68 87 d3 02 c0       	push   0xc002d387
c0020db5:	e8 2b 1c ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0020dba:	83 c4 10             	add    esp,0x10
c0020dbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020dc1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020dc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020dc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020dcb:	83 ec 0c             	sub    esp,0xc
c0020dce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020dd2:	e8 2f 22 ff ff       	call   c0013006 <File::close()>
c0020dd7:	83 c4 10             	add    esp,0x10
c0020dda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020dde:	ba 00 00 00 00       	mov    edx,0x0
c0020de3:	83 c4 28             	add    esp,0x28
c0020de6:	5b                   	pop    ebx
c0020de7:	c3                   	ret    

c0020de8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020de8:	57                   	push   edi
c0020de9:	56                   	push   esi
c0020dea:	53                   	push   ebx
c0020deb:	81 ec 50 02 00 00    	sub    esp,0x250
c0020df1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020df9:	74 0a                	je     c0020e05 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020dfb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020e03:	75 0a                	jne    c0020e0f <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020e05:	b8 04 00 00 00       	mov    eax,0x4
c0020e0a:	e9 29 01 00 00       	jmp    c0020f38 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e0f:	83 ec 08             	sub    esp,0x8
c0020e12:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020e19:	50                   	push   eax
c0020e1a:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020e21:	e8 8d 52 fe ff       	call   c00060b3 <f_readdir>
c0020e26:	83 c4 10             	add    esp,0x10
c0020e29:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020e30:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020e37:	83 ec 0c             	sub    esp,0xc
c0020e3a:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020e41:	83 c0 1a             	add    eax,0x1a
c0020e44:	50                   	push   eax
c0020e45:	e8 22 f9 fd ff       	call   c000076c <strlen>
c0020e4a:	83 c4 10             	add    esp,0x10
c0020e4d:	ba 00 00 00 00       	mov    edx,0x0
c0020e52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020e5a:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020e61:	0f b6 c0             	movzx  eax,al
c0020e64:	83 e0 10             	and    eax,0x10
c0020e67:	74 07                	je     c0020e70 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020e69:	b8 02 00 00 00       	mov    eax,0x2
c0020e6e:	eb 05                	jmp    c0020e75 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020e70:	b8 01 00 00 00       	mov    eax,0x1
c0020e75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020e79:	83 ec 08             	sub    esp,0x8
c0020e7c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020e83:	83 c0 1a             	add    eax,0x1a
c0020e86:	50                   	push   eax
c0020e87:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020e8b:	83 c0 10             	add    eax,0x10
c0020e8e:	50                   	push   eax
c0020e8f:	e8 78 f9 fd ff       	call   c000080c <strcpy>
c0020e94:	83 c4 10             	add    esp,0x10
c0020e97:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020e9e:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020ea5:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020ea9:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020eb0:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020eb7:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020ebe:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020ec5:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020ecc:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020ed3:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020eda:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020ee1:	89 c6                	mov    esi,eax
c0020ee3:	89 d7                	mov    edi,edx
c0020ee5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020ee7:	89 c8                	mov    eax,ecx
c0020ee9:	89 fa                	mov    edx,edi
c0020eeb:	89 f3                	mov    ebx,esi
c0020eed:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020ef4:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020efb:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020f02:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020f09:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020f0f:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020f16:	84 c0                	test   al,al
c0020f18:	75 07                	jne    c0020f21 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020f1a:	b8 07 00 00 00       	mov    eax,0x7
c0020f1f:	eb 17                	jmp    c0020f38 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020f21:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020f28:	85 c0                	test   eax,eax
c0020f2a:	75 07                	jne    c0020f33 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020f2c:	b8 00 00 00 00       	mov    eax,0x0
c0020f31:	eb 05                	jmp    c0020f38 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020f33:	b8 01 00 00 00       	mov    eax,0x1
c0020f38:	81 c4 50 02 00 00    	add    esp,0x250
c0020f3e:	5b                   	pop    ebx
c0020f3f:	5e                   	pop    esi
c0020f40:	5f                   	pop    edi
c0020f41:	c3                   	ret    

c0020f42 <FAT::read(void*, unsigned long, void*, int*)>:
c0020f42:	83 ec 1c             	sub    esp,0x1c
c0020f45:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f4a:	74 07                	je     c0020f53 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020f4c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020f51:	75 07                	jne    c0020f5a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020f53:	b8 04 00 00 00       	mov    eax,0x4
c0020f58:	eb 3d                	jmp    c0020f97 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020f5a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f5e:	50                   	push   eax
c0020f5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020f63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020f67:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f6b:	e8 23 44 fe ff       	call   c0005393 <f_read>
c0020f70:	83 c4 10             	add    esp,0x10
c0020f73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f7b:	89 c2                	mov    edx,eax
c0020f7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020f81:	89 10                	mov    DWORD PTR [eax],edx
c0020f83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f87:	85 c0                	test   eax,eax
c0020f89:	75 07                	jne    c0020f92 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020f8b:	b8 00 00 00 00       	mov    eax,0x0
c0020f90:	eb 05                	jmp    c0020f97 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020f92:	b8 01 00 00 00       	mov    eax,0x1
c0020f97:	83 c4 1c             	add    esp,0x1c
c0020f9a:	c3                   	ret    
c0020f9b:	90                   	nop

c0020f9c <FAT::write(void*, unsigned long, void*, int*)>:
c0020f9c:	83 ec 1c             	sub    esp,0x1c
c0020f9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020fa4:	74 07                	je     c0020fad <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020fa6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020fab:	75 07                	jne    c0020fb4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020fad:	b8 04 00 00 00       	mov    eax,0x4
c0020fb2:	eb 3d                	jmp    c0020ff1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020fb4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020fb8:	50                   	push   eax
c0020fb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020fbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020fc1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020fc5:	e8 49 46 fe ff       	call   c0005613 <f_write>
c0020fca:	83 c4 10             	add    esp,0x10
c0020fcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fd5:	89 c2                	mov    edx,eax
c0020fd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020fdb:	89 10                	mov    DWORD PTR [eax],edx
c0020fdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020fe1:	85 c0                	test   eax,eax
c0020fe3:	75 07                	jne    c0020fec <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020fe5:	b8 00 00 00 00       	mov    eax,0x0
c0020fea:	eb 05                	jmp    c0020ff1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020fec:	b8 01 00 00 00       	mov    eax,0x1
c0020ff1:	83 c4 1c             	add    esp,0x1c
c0020ff4:	c3                   	ret    
c0020ff5:	90                   	nop

c0020ff6 <FAT::close(void*)>:
c0020ff6:	83 ec 1c             	sub    esp,0x1c
c0020ff9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ffe:	75 07                	jne    c0021007 <FAT::close(void*)+0x11>
c0021000:	b8 04 00 00 00       	mov    eax,0x4
c0021005:	eb 36                	jmp    c002103d <FAT::close(void*)+0x47>
c0021007:	83 ec 0c             	sub    esp,0xc
c002100a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002100e:	e8 96 4a fe ff       	call   c0005aa9 <f_close>
c0021013:	83 c4 10             	add    esp,0x10
c0021016:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002101a:	83 ec 0c             	sub    esp,0xc
c002101d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021021:	e8 ec e8 fe ff       	call   c000f912 <free>
c0021026:	83 c4 10             	add    esp,0x10
c0021029:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002102d:	85 c0                	test   eax,eax
c002102f:	75 07                	jne    c0021038 <FAT::close(void*)+0x42>
c0021031:	b8 00 00 00 00       	mov    eax,0x0
c0021036:	eb 05                	jmp    c002103d <FAT::close(void*)+0x47>
c0021038:	b8 01 00 00 00       	mov    eax,0x1
c002103d:	83 c4 1c             	add    esp,0x1c
c0021040:	c3                   	ret    
c0021041:	90                   	nop

c0021042 <FAT::closeDir(void*)>:
c0021042:	83 ec 1c             	sub    esp,0x1c
c0021045:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002104a:	75 07                	jne    c0021053 <FAT::closeDir(void*)+0x11>
c002104c:	b8 04 00 00 00       	mov    eax,0x4
c0021051:	eb 36                	jmp    c0021089 <FAT::closeDir(void*)+0x47>
c0021053:	83 ec 0c             	sub    esp,0xc
c0021056:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002105a:	e8 32 50 fe ff       	call   c0006091 <f_closedir>
c002105f:	83 c4 10             	add    esp,0x10
c0021062:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021066:	83 ec 0c             	sub    esp,0xc
c0021069:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002106d:	e8 a0 e8 fe ff       	call   c000f912 <free>
c0021072:	83 c4 10             	add    esp,0x10
c0021075:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021079:	85 c0                	test   eax,eax
c002107b:	75 07                	jne    c0021084 <FAT::closeDir(void*)+0x42>
c002107d:	b8 00 00 00 00       	mov    eax,0x0
c0021082:	eb 05                	jmp    c0021089 <FAT::closeDir(void*)+0x47>
c0021084:	b8 01 00 00 00       	mov    eax,0x1
c0021089:	83 c4 1c             	add    esp,0x1c
c002108c:	c3                   	ret    
c002108d:	90                   	nop

c002108e <FAT::seek(void*, unsigned long long)>:
c002108e:	83 ec 2c             	sub    esp,0x2c
c0021091:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021095:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021099:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002109d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00210a1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00210a6:	75 07                	jne    c00210af <FAT::seek(void*, unsigned long long)+0x21>
c00210a8:	b8 04 00 00 00       	mov    eax,0x4
c00210ad:	eb 2f                	jmp    c00210de <FAT::seek(void*, unsigned long long)+0x50>
c00210af:	83 ec 04             	sub    esp,0x4
c00210b2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00210b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00210ba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00210be:	e8 15 4a fe ff       	call   c0005ad8 <f_lseek>
c00210c3:	83 c4 10             	add    esp,0x10
c00210c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00210ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00210ce:	85 c0                	test   eax,eax
c00210d0:	75 07                	jne    c00210d9 <FAT::seek(void*, unsigned long long)+0x4b>
c00210d2:	b8 00 00 00 00       	mov    eax,0x0
c00210d7:	eb 05                	jmp    c00210de <FAT::seek(void*, unsigned long long)+0x50>
c00210d9:	b8 01 00 00 00       	mov    eax,0x1
c00210de:	83 c4 2c             	add    esp,0x2c
c00210e1:	c3                   	ret    

c00210e2 <fatWrapperReadDisk>:
c00210e2:	83 ec 1c             	sub    esp,0x1c
c00210e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00210e9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00210ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00210f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00210f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00210f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00210fc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021101:	8b 04 85 60 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07a0]
c0021108:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002110c:	83 ec 0c             	sub    esp,0xc
c002110f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021113:	52                   	push   edx
c0021114:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021118:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002111c:	50                   	push   eax
c002111d:	e8 40 52 ff ff       	call   c0016362 <LogicalDisk::read(unsigned long long, int, void*)>
c0021122:	83 c4 20             	add    esp,0x20
c0021125:	83 c4 1c             	add    esp,0x1c
c0021128:	c3                   	ret    

c0021129 <fatWrapperWriteDisk>:
c0021129:	83 ec 1c             	sub    esp,0x1c
c002112c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021130:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021134:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021138:	89 04 24             	mov    DWORD PTR [esp],eax
c002113b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002113f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021143:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021148:	8b 04 85 60 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07a0]
c002114f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021153:	83 ec 0c             	sub    esp,0xc
c0021156:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002115a:	52                   	push   edx
c002115b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002115f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021163:	50                   	push   eax
c0021164:	e8 65 52 ff ff       	call   c00163ce <LogicalDisk::write(unsigned long long, int, void*)>
c0021169:	83 c4 20             	add    esp,0x20
c002116c:	83 c4 1c             	add    esp,0x1c
c002116f:	c3                   	ret    

c0021170 <fatWrapperIoctl>:
c0021170:	53                   	push   ebx
c0021171:	83 ec 28             	sub    esp,0x28
c0021174:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021178:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002117c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021180:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021184:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021189:	75 31                	jne    c00211bc <fatWrapperIoctl+0x4c>
c002118b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002118f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021193:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021198:	8b 04 85 60 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07a0]
c002119f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00211a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00211ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00211af:	66 89 02             	mov    WORD PTR [edx],ax
c00211b2:	b8 00 00 00 00       	mov    eax,0x0
c00211b7:	e9 b2 00 00 00       	jmp    c002126e <fatWrapperIoctl+0xfe>
c00211bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00211c1:	75 6a                	jne    c002122d <fatWrapperIoctl+0xbd>
c00211c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00211c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00211cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00211d0:	8b 04 85 60 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd07a0]
c00211d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00211dd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00211e3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00211e9:	89 c8                	mov    eax,ecx
c00211eb:	89 da                	mov    edx,ebx
c00211ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c00211f1:	c1 e0 0a             	shl    eax,0xa
c00211f4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00211f9:	8b 0c 8d 60 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd07a0]
c0021200:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021206:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002120c:	89 cb                	mov    ebx,ecx
c002120e:	c1 fb 1f             	sar    ebx,0x1f
c0021211:	53                   	push   ebx
c0021212:	51                   	push   ecx
c0021213:	52                   	push   edx
c0021214:	50                   	push   eax
c0021215:	e8 da 60 00 00       	call   c00272f4 <__udivdi3>
c002121a:	83 c4 10             	add    esp,0x10
c002121d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021221:	89 01                	mov    DWORD PTR [ecx],eax
c0021223:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021226:	b8 00 00 00 00       	mov    eax,0x0
c002122b:	eb 41                	jmp    c002126e <fatWrapperIoctl+0xfe>
c002122d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021232:	75 07                	jne    c002123b <fatWrapperIoctl+0xcb>
c0021234:	b8 00 00 00 00       	mov    eax,0x0
c0021239:	eb 33                	jmp    c002126e <fatWrapperIoctl+0xfe>
c002123b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021240:	75 19                	jne    c002125b <fatWrapperIoctl+0xeb>
c0021242:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021246:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002124a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002124e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021254:	b8 00 00 00 00       	mov    eax,0x0
c0021259:	eb 13                	jmp    c002126e <fatWrapperIoctl+0xfe>
c002125b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021260:	75 07                	jne    c0021269 <fatWrapperIoctl+0xf9>
c0021262:	b8 00 00 00 00       	mov    eax,0x0
c0021267:	eb 05                	jmp    c002126e <fatWrapperIoctl+0xfe>
c0021269:	b8 04 00 00 00       	mov    eax,0x4
c002126e:	83 c4 28             	add    esp,0x28
c0021271:	5b                   	pop    ebx
c0021272:	c3                   	ret    
c0021273:	90                   	nop

c0021274 <FAT::FAT()>:
c0021274:	83 ec 1c             	sub    esp,0x1c
c0021277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002127b:	83 ec 0c             	sub    esp,0xc
c002127e:	50                   	push   eax
c002127f:	e8 6c 1a ff ff       	call   c0012cf0 <Filesystem::Filesystem()>
c0021284:	83 c4 10             	add    esp,0x10
c0021287:	ba c4 d3 02 c0       	mov    edx,0xc002d3c4
c002128c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021290:	89 10                	mov    DWORD PTR [eax],edx
c0021292:	c7 05 80 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032880,0x0
c002129c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00212a4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00212a9:	7f 15                	jg     c00212c0 <FAT::FAT()+0x4c>
c00212ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212af:	c7 04 85 a0 28 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd760],0xffffffff
c00212ba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00212be:	eb e4                	jmp    c00212a4 <FAT::FAT()+0x30>
c00212c0:	90                   	nop
c00212c1:	83 c4 1c             	add    esp,0x1c
c00212c4:	c3                   	ret    
c00212c5:	90                   	nop

c00212c6 <FAT::fixFilepath(char*)>:
c00212c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212ca:	8a 00                	mov    al,BYTE PTR [eax]
c00212cc:	3c 40                	cmp    al,0x40
c00212ce:	7e 2c                	jle    c00212fc <FAT::fixFilepath(char*)+0x36>
c00212d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212d4:	8a 00                	mov    al,BYTE PTR [eax]
c00212d6:	83 e8 41             	sub    eax,0x41
c00212d9:	88 c2                	mov    dl,al
c00212db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212df:	88 10                	mov    BYTE PTR [eax],dl
c00212e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212e5:	8a 00                	mov    al,BYTE PTR [eax]
c00212e7:	0f be c0             	movsx  eax,al
c00212ea:	8b 04 85 a0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd760]
c00212f1:	83 c0 30             	add    eax,0x30
c00212f4:	88 c2                	mov    dl,al
c00212f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212fa:	88 10                	mov    BYTE PTR [eax],dl
c00212fc:	90                   	nop
c00212fd:	c3                   	ret    

c00212fe <FAT::open(char const*, void**, FileOpenMode)>:
c00212fe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021304:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002130c:	74 0a                	je     c0021318 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002130e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021316:	75 0a                	jne    c0021322 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021318:	b8 04 00 00 00       	mov    eax,0x4
c002131d:	e9 fd 00 00 00       	jmp    c002141f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021322:	83 ec 08             	sub    esp,0x8
c0021325:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002132c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021330:	50                   	push   eax
c0021331:	e8 d6 f4 fd ff       	call   c000080c <strcpy>
c0021336:	83 c4 10             	add    esp,0x10
c0021339:	83 ec 08             	sub    esp,0x8
c002133c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021340:	50                   	push   eax
c0021341:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021348:	e8 79 ff ff ff       	call   c00212c6 <FAT::fixFilepath(char*)>
c002134d:	83 c4 10             	add    esp,0x10
c0021350:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021358:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002135f:	83 e0 01             	and    eax,0x1
c0021362:	74 08                	je     c002136c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021364:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002136c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021373:	83 e0 04             	and    eax,0x4
c0021376:	74 10                	je     c0021388 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021378:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021380:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021388:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002138f:	83 e0 02             	and    eax,0x2
c0021392:	74 08                	je     c002139c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021394:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002139c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00213a3:	83 e0 08             	and    eax,0x8
c00213a6:	74 08                	je     c00213b0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00213a8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00213b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00213b7:	83 e0 10             	and    eax,0x10
c00213ba:	74 08                	je     c00213c4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00213bc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00213c4:	83 ec 0c             	sub    esp,0xc
c00213c7:	68 50 02 00 00       	push   0x250
c00213cc:	e8 31 e5 fe ff       	call   c000f902 <malloc>
c00213d1:	83 c4 10             	add    esp,0x10
c00213d4:	89 c2                	mov    edx,eax
c00213d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00213dd:	89 10                	mov    DWORD PTR [eax],edx
c00213df:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00213e7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00213ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00213f0:	83 ec 04             	sub    esp,0x4
c00213f3:	52                   	push   edx
c00213f4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00213f8:	52                   	push   edx
c00213f9:	50                   	push   eax
c00213fa:	e8 58 3b fe ff       	call   c0004f57 <f_open>
c00213ff:	83 c4 10             	add    esp,0x10
c0021402:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021409:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021411:	74 07                	je     c002141a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021413:	b8 01 00 00 00       	mov    eax,0x1
c0021418:	eb 05                	jmp    c002141f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002141a:	b8 00 00 00 00       	mov    eax,0x0
c002141f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021425:	c3                   	ret    

c0021426 <FAT::openDir(char const*, void**)>:
c0021426:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002142c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021434:	74 0a                	je     c0021440 <FAT::openDir(char const*, void**)+0x1a>
c0021436:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002143e:	75 07                	jne    c0021447 <FAT::openDir(char const*, void**)+0x21>
c0021440:	b8 04 00 00 00       	mov    eax,0x4
c0021445:	eb 7d                	jmp    c00214c4 <FAT::openDir(char const*, void**)+0x9e>
c0021447:	83 ec 08             	sub    esp,0x8
c002144a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021451:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021455:	50                   	push   eax
c0021456:	e8 b1 f3 fd ff       	call   c000080c <strcpy>
c002145b:	83 c4 10             	add    esp,0x10
c002145e:	83 ec 08             	sub    esp,0x8
c0021461:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021465:	50                   	push   eax
c0021466:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002146d:	e8 54 fe ff ff       	call   c00212c6 <FAT::fixFilepath(char*)>
c0021472:	83 c4 10             	add    esp,0x10
c0021475:	83 ec 0c             	sub    esp,0xc
c0021478:	6a 4c                	push   0x4c
c002147a:	e8 83 e4 fe ff       	call   c000f902 <malloc>
c002147f:	83 c4 10             	add    esp,0x10
c0021482:	89 c2                	mov    edx,eax
c0021484:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002148b:	89 10                	mov    DWORD PTR [eax],edx
c002148d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021494:	8b 00                	mov    eax,DWORD PTR [eax]
c0021496:	83 ec 08             	sub    esp,0x8
c0021499:	8d 54 24 14          	lea    edx,[esp+0x14]
c002149d:	52                   	push   edx
c002149e:	50                   	push   eax
c002149f:	e8 eb 4a fe ff       	call   c0005f8f <f_opendir>
c00214a4:	83 c4 10             	add    esp,0x10
c00214a7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00214ae:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00214b6:	74 07                	je     c00214bf <FAT::openDir(char const*, void**)+0x99>
c00214b8:	b8 01 00 00 00       	mov    eax,0x1
c00214bd:	eb 05                	jmp    c00214c4 <FAT::openDir(char const*, void**)+0x9e>
c00214bf:	b8 00 00 00 00       	mov    eax,0x0
c00214c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00214ca:	c3                   	ret    
c00214cb:	90                   	nop

c00214cc <FAT::stat(char const*, unsigned long long*, bool*)>:
c00214cc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00214d2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00214da:	75 0a                	jne    c00214e6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00214dc:	b8 04 00 00 00       	mov    eax,0x4
c00214e1:	e9 c9 00 00 00       	jmp    c00215af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214e6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00214ee:	75 0a                	jne    c00214fa <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00214f0:	b8 04 00 00 00       	mov    eax,0x4
c00214f5:	e9 b5 00 00 00       	jmp    c00215af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214fa:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021502:	75 0a                	jne    c002150e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021504:	b8 04 00 00 00       	mov    eax,0x4
c0021509:	e9 a1 00 00 00       	jmp    c00215af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002150e:	83 ec 08             	sub    esp,0x8
c0021511:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021518:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002151f:	50                   	push   eax
c0021520:	e8 e7 f2 fd ff       	call   c000080c <strcpy>
c0021525:	83 c4 10             	add    esp,0x10
c0021528:	83 ec 08             	sub    esp,0x8
c002152b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021532:	50                   	push   eax
c0021533:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002153a:	e8 87 fd ff ff       	call   c00212c6 <FAT::fixFilepath(char*)>
c002153f:	83 c4 10             	add    esp,0x10
c0021542:	83 ec 08             	sub    esp,0x8
c0021545:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021549:	50                   	push   eax
c002154a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021551:	50                   	push   eax
c0021552:	e8 f7 4b fe ff       	call   c000614e <f_stat>
c0021557:	83 c4 10             	add    esp,0x10
c002155a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021561:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021568:	85 c0                	test   eax,eax
c002156a:	74 07                	je     c0021573 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002156c:	83 f8 04             	cmp    eax,0x4
c002156f:	74 32                	je     c00215a3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021571:	eb 37                	jmp    c00215aa <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021573:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021577:	0f b6 c0             	movzx  eax,al
c002157a:	83 e0 10             	and    eax,0x10
c002157d:	0f 95 c2             	setne  dl
c0021580:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021587:	88 10                	mov    BYTE PTR [eax],dl
c0021589:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002158c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021590:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021597:	89 01                	mov    DWORD PTR [ecx],eax
c0021599:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002159c:	b8 00 00 00 00       	mov    eax,0x0
c00215a1:	eb 0c                	jmp    c00215af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00215a3:	b8 02 00 00 00       	mov    eax,0x2
c00215a8:	eb 05                	jmp    c00215af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00215aa:	b8 01 00 00 00       	mov    eax,0x1
c00215af:	81 c4 2c 02 00 00    	add    esp,0x22c
c00215b5:	c3                   	ret    

c00215b6 <FAT::unlink(char const*)>:
c00215b6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215bc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00215c4:	75 07                	jne    c00215cd <FAT::unlink(char const*)+0x17>
c00215c6:	b8 04 00 00 00       	mov    eax,0x4
c00215cb:	eb 5c                	jmp    c0021629 <FAT::unlink(char const*)+0x73>
c00215cd:	83 ec 08             	sub    esp,0x8
c00215d0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215db:	50                   	push   eax
c00215dc:	e8 2b f2 fd ff       	call   c000080c <strcpy>
c00215e1:	83 c4 10             	add    esp,0x10
c00215e4:	83 ec 08             	sub    esp,0x8
c00215e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215eb:	50                   	push   eax
c00215ec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215f3:	e8 ce fc ff ff       	call   c00212c6 <FAT::fixFilepath(char*)>
c00215f8:	83 c4 10             	add    esp,0x10
c00215fb:	83 ec 0c             	sub    esp,0xc
c00215fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021602:	50                   	push   eax
c0021603:	e8 98 4e fe ff       	call   c00064a0 <f_unlink>
c0021608:	83 c4 10             	add    esp,0x10
c002160b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021612:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021619:	85 c0                	test   eax,eax
c002161b:	75 07                	jne    c0021624 <FAT::unlink(char const*)+0x6e>
c002161d:	b8 00 00 00 00       	mov    eax,0x0
c0021622:	eb 05                	jmp    c0021629 <FAT::unlink(char const*)+0x73>
c0021624:	b8 01 00 00 00       	mov    eax,0x1
c0021629:	81 c4 1c 01 00 00    	add    esp,0x11c
c002162f:	c3                   	ret    

c0021630 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021630:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021636:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002163d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021644:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021648:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002164c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021654:	75 0a                	jne    c0021660 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021656:	b8 04 00 00 00       	mov    eax,0x4
c002165b:	e9 1c 01 00 00       	jmp    c002177c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021660:	83 ec 08             	sub    esp,0x8
c0021663:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002166a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002166e:	50                   	push   eax
c002166f:	e8 98 f1 fd ff       	call   c000080c <strcpy>
c0021674:	83 c4 10             	add    esp,0x10
c0021677:	83 ec 08             	sub    esp,0x8
c002167a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002167e:	50                   	push   eax
c002167f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021686:	e8 3b fc ff ff       	call   c00212c6 <FAT::fixFilepath(char*)>
c002168b:	83 c4 10             	add    esp,0x10
c002168e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021696:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002169e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00216a3:	83 e0 01             	and    eax,0x1
c00216a6:	74 08                	je     c00216b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00216a8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00216b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00216b5:	83 e0 02             	and    eax,0x2
c00216b8:	74 08                	je     c00216c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00216ba:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00216c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00216c7:	83 e0 04             	and    eax,0x4
c00216ca:	74 08                	je     c00216d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00216cc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00216d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00216d9:	83 e0 08             	and    eax,0x8
c00216dc:	74 08                	je     c00216e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00216de:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00216e6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216eb:	83 e0 01             	and    eax,0x1
c00216ee:	74 08                	je     c00216f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00216f0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00216f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00216fd:	83 e0 02             	and    eax,0x2
c0021700:	74 08                	je     c002170a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021702:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002170a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002170f:	83 e0 04             	and    eax,0x4
c0021712:	74 08                	je     c002171c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021714:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002171c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021721:	83 e0 08             	and    eax,0x8
c0021724:	74 08                	je     c002172e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021726:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002172e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021735:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002173c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021744:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002174c:	83 ec 04             	sub    esp,0x4
c002174f:	52                   	push   edx
c0021750:	50                   	push   eax
c0021751:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021755:	50                   	push   eax
c0021756:	e8 e7 53 fe ff       	call   c0006b42 <f_chmod>
c002175b:	83 c4 10             	add    esp,0x10
c002175e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021765:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002176c:	85 c0                	test   eax,eax
c002176e:	75 07                	jne    c0021777 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021770:	b8 00 00 00 00       	mov    eax,0x0
c0021775:	eb 05                	jmp    c002177c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021777:	b8 01 00 00 00       	mov    eax,0x1
c002177c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021782:	c3                   	ret    
c0021783:	90                   	nop

c0021784 <FAT::rename(char const*, char const*)>:
c0021784:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002178a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021792:	74 0a                	je     c002179e <FAT::rename(char const*, char const*)+0x1a>
c0021794:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002179c:	75 0a                	jne    c00217a8 <FAT::rename(char const*, char const*)+0x24>
c002179e:	b8 04 00 00 00       	mov    eax,0x4
c00217a3:	e9 98 00 00 00       	jmp    c0021840 <FAT::rename(char const*, char const*)+0xbc>
c00217a8:	83 ec 08             	sub    esp,0x8
c00217ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00217b2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00217b9:	50                   	push   eax
c00217ba:	e8 4d f0 fd ff       	call   c000080c <strcpy>
c00217bf:	83 c4 10             	add    esp,0x10
c00217c2:	83 ec 08             	sub    esp,0x8
c00217c5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00217cc:	50                   	push   eax
c00217cd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00217d4:	e8 ed fa ff ff       	call   c00212c6 <FAT::fixFilepath(char*)>
c00217d9:	83 c4 10             	add    esp,0x10
c00217dc:	83 ec 08             	sub    esp,0x8
c00217df:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00217e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00217ea:	50                   	push   eax
c00217eb:	e8 1c f0 fd ff       	call   c000080c <strcpy>
c00217f0:	83 c4 10             	add    esp,0x10
c00217f3:	83 ec 08             	sub    esp,0x8
c00217f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217fa:	50                   	push   eax
c00217fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021802:	e8 bf fa ff ff       	call   c00212c6 <FAT::fixFilepath(char*)>
c0021807:	83 c4 10             	add    esp,0x10
c002180a:	83 ec 08             	sub    esp,0x8
c002180d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021811:	50                   	push   eax
c0021812:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021819:	50                   	push   eax
c002181a:	e8 30 50 fe ff       	call   c000684f <f_rename>
c002181f:	83 c4 10             	add    esp,0x10
c0021822:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021829:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021830:	85 c0                	test   eax,eax
c0021832:	75 07                	jne    c002183b <FAT::rename(char const*, char const*)+0xb7>
c0021834:	b8 00 00 00 00       	mov    eax,0x0
c0021839:	eb 05                	jmp    c0021840 <FAT::rename(char const*, char const*)+0xbc>
c002183b:	b8 01 00 00 00       	mov    eax,0x1
c0021840:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021846:	c3                   	ret    
c0021847:	90                   	nop

c0021848 <FAT::mkdir(char const*)>:
c0021848:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002184e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021856:	75 07                	jne    c002185f <FAT::mkdir(char const*)+0x17>
c0021858:	b8 04 00 00 00       	mov    eax,0x4
c002185d:	eb 5c                	jmp    c00218bb <FAT::mkdir(char const*)+0x73>
c002185f:	83 ec 08             	sub    esp,0x8
c0021862:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021869:	8d 44 24 18          	lea    eax,[esp+0x18]
c002186d:	50                   	push   eax
c002186e:	e8 99 ef fd ff       	call   c000080c <strcpy>
c0021873:	83 c4 10             	add    esp,0x10
c0021876:	83 ec 08             	sub    esp,0x8
c0021879:	8d 44 24 14          	lea    eax,[esp+0x14]
c002187d:	50                   	push   eax
c002187e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021885:	e8 3c fa ff ff       	call   c00212c6 <FAT::fixFilepath(char*)>
c002188a:	83 c4 10             	add    esp,0x10
c002188d:	83 ec 0c             	sub    esp,0xc
c0021890:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021894:	50                   	push   eax
c0021895:	e8 89 4d fe ff       	call   c0006623 <f_mkdir>
c002189a:	83 c4 10             	add    esp,0x10
c002189d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00218a4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00218ab:	85 c0                	test   eax,eax
c00218ad:	75 07                	jne    c00218b6 <FAT::mkdir(char const*)+0x6e>
c00218af:	b8 00 00 00 00       	mov    eax,0x0
c00218b4:	eb 05                	jmp    c00218bb <FAT::mkdir(char const*)+0x73>
c00218b6:	b8 01 00 00 00       	mov    eax,0x1
c00218bb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218c1:	c3                   	ret    

c00218c2 <FAT::exists(char const*)>:
c00218c2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00218c8:	83 ec 08             	sub    esp,0x8
c00218cb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00218d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00218d6:	50                   	push   eax
c00218d7:	e8 30 ef fd ff       	call   c000080c <strcpy>
c00218dc:	83 c4 10             	add    esp,0x10
c00218df:	83 ec 08             	sub    esp,0x8
c00218e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218e6:	50                   	push   eax
c00218e7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00218ee:	e8 d3 f9 ff ff       	call   c00212c6 <FAT::fixFilepath(char*)>
c00218f3:	83 c4 10             	add    esp,0x10
c00218f6:	83 ec 08             	sub    esp,0x8
c00218f9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021900:	50                   	push   eax
c0021901:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021905:	50                   	push   eax
c0021906:	e8 43 48 fe ff       	call   c000614e <f_stat>
c002190b:	83 c4 10             	add    esp,0x10
c002190e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021915:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002191c:	85 c0                	test   eax,eax
c002191e:	75 04                	jne    c0021924 <FAT::exists(char const*)+0x62>
c0021920:	b0 01                	mov    al,0x1
c0021922:	eb 02                	jmp    c0021926 <FAT::exists(char const*)+0x64>
c0021924:	b0 00                	mov    al,0x0
c0021926:	81 c4 2c 02 00 00    	add    esp,0x22c
c002192c:	c3                   	ret    
c002192d:	90                   	nop

c002192e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002192e:	b8 08 00 00 00       	mov    eax,0x8
c0021933:	c3                   	ret    

c0021934 <ISO9660::seek(void*, unsigned long long)>:
c0021934:	53                   	push   ebx
c0021935:	b8 04 00 00 00       	mov    eax,0x4
c002193a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002193e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021942:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021946:	85 d2                	test   edx,edx
c0021948:	74 17                	je     c0021961 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002194a:	89 c8                	mov    eax,ecx
c002194c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002194f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021952:	b8 01 00 00 00       	mov    eax,0x1
c0021957:	73 08                	jae    c0021961 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021959:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002195c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002195f:	31 c0                	xor    eax,eax
c0021961:	5b                   	pop    ebx
c0021962:	c3                   	ret    
c0021963:	90                   	nop

c0021964 <ISO9660::tell(void*, unsigned long long*)>:
c0021964:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002196c:	85 d2                	test   edx,edx
c002196e:	74 12                	je     c0021982 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021970:	85 c0                	test   eax,eax
c0021972:	74 0e                	je     c0021982 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021974:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021977:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002197a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002197d:	89 10                	mov    DWORD PTR [eax],edx
c002197f:	31 c0                	xor    eax,eax
c0021981:	c3                   	ret    
c0021982:	b8 04 00 00 00       	mov    eax,0x4
c0021987:	c3                   	ret    

c0021988 <ISO9660::getName()>:
c0021988:	b8 24 d4 02 c0       	mov    eax,0xc002d424
c002198d:	c3                   	ret    

c002198e <ISO9660::stat(void*, unsigned long long*)>:
c002198e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021992:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021996:	85 d2                	test   edx,edx
c0021998:	74 12                	je     c00219ac <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002199a:	85 c0                	test   eax,eax
c002199c:	74 0e                	je     c00219ac <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002199e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00219a1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00219a4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00219a7:	89 10                	mov    DWORD PTR [eax],edx
c00219a9:	31 c0                	xor    eax,eax
c00219ab:	c3                   	ret    
c00219ac:	b8 04 00 00 00       	mov    eax,0x4
c00219b1:	c3                   	ret    

c00219b2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00219b2:	b8 01 00 00 00       	mov    eax,0x1
c00219b7:	c3                   	ret    

c00219b8 <ISO9660::unlink(char const*)>:
c00219b8:	b8 01 00 00 00       	mov    eax,0x1
c00219bd:	c3                   	ret    

c00219be <ISO9660::write(void*, unsigned long, void*, int*)>:
c00219be:	b8 01 00 00 00       	mov    eax,0x1
c00219c3:	c3                   	ret    

c00219c4 <ISO9660::rename(char const*, char const*)>:
c00219c4:	b8 01 00 00 00       	mov    eax,0x1
c00219c9:	c3                   	ret    

c00219ca <ISO9660::mkdir(char const*)>:
c00219ca:	b8 01 00 00 00       	mov    eax,0x1
c00219cf:	c3                   	ret    

c00219d0 <ISO9660::close(void*)>:
c00219d0:	83 ec 0c             	sub    esp,0xc
c00219d3:	b8 04 00 00 00       	mov    eax,0x4
c00219d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219dc:	85 d2                	test   edx,edx
c00219de:	74 0e                	je     c00219ee <ISO9660::close(void*)+0x1e>
c00219e0:	83 ec 0c             	sub    esp,0xc
c00219e3:	52                   	push   edx
c00219e4:	e8 29 df fe ff       	call   c000f912 <free>
c00219e9:	83 c4 10             	add    esp,0x10
c00219ec:	31 c0                	xor    eax,eax
c00219ee:	83 c4 0c             	add    esp,0xc
c00219f1:	c3                   	ret    

c00219f2 <ISO9660::closeDir(void*)>:
c00219f2:	83 ec 0c             	sub    esp,0xc
c00219f5:	b8 04 00 00 00       	mov    eax,0x4
c00219fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219fe:	85 d2                	test   edx,edx
c0021a00:	74 0e                	je     c0021a10 <ISO9660::closeDir(void*)+0x1e>
c0021a02:	83 ec 0c             	sub    esp,0xc
c0021a05:	52                   	push   edx
c0021a06:	e8 07 df fe ff       	call   c000f912 <free>
c0021a0b:	83 c4 10             	add    esp,0x10
c0021a0e:	31 c0                	xor    eax,eax
c0021a10:	83 c4 0c             	add    esp,0xc
c0021a13:	c3                   	ret    

c0021a14 <ISO9660::~ISO9660()>:
c0021a14:	83 ec 0c             	sub    esp,0xc
c0021a17:	ba 88 d4 02 c0       	mov    edx,0xc002d488
c0021a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a20:	89 10                	mov    DWORD PTR [eax],edx
c0021a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a26:	83 ec 0c             	sub    esp,0xc
c0021a29:	50                   	push   eax
c0021a2a:	e8 e5 12 ff ff       	call   c0012d14 <Filesystem::~Filesystem()>
c0021a2f:	83 c4 10             	add    esp,0x10
c0021a32:	90                   	nop
c0021a33:	83 c4 0c             	add    esp,0xc
c0021a36:	c3                   	ret    
c0021a37:	90                   	nop

c0021a38 <ISO9660::~ISO9660()>:
c0021a38:	83 ec 0c             	sub    esp,0xc
c0021a3b:	83 ec 0c             	sub    esp,0xc
c0021a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a42:	e8 cd ff ff ff       	call   c0021a14 <ISO9660::~ISO9660()>
c0021a47:	83 c4 10             	add    esp,0x10
c0021a4a:	83 ec 08             	sub    esp,0x8
c0021a4d:	6a 08                	push   0x8
c0021a4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a53:	e8 ad 0e ff ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0021a58:	83 c4 10             	add    esp,0x10
c0021a5b:	83 c4 0c             	add    esp,0xc
c0021a5e:	c3                   	ret    

c0021a5f <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021a5f:	55                   	push   ebp
c0021a60:	31 c9                	xor    ecx,ecx
c0021a62:	57                   	push   edi
c0021a63:	56                   	push   esi
c0021a64:	53                   	push   ebx
c0021a65:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021a69:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021a6d:	89 eb                	mov    ebx,ebp
c0021a6f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021a73:	39 ce                	cmp    esi,ecx
c0021a75:	7e 17                	jle    c0021a8e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021a77:	31 d2                	xor    edx,edx
c0021a79:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021a7d:	7d 13                	jge    c0021a92 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021a7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021a83:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021a86:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021a89:	75 0d                	jne    c0021a98 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021a8b:	42                   	inc    edx
c0021a8c:	eb eb                	jmp    c0021a79 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021a8e:	31 c0                	xor    eax,eax
c0021a90:	eb 0a                	jmp    c0021a9c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021a92:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021a96:	eb 04                	jmp    c0021a9c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021a98:	41                   	inc    ecx
c0021a99:	43                   	inc    ebx
c0021a9a:	eb d7                	jmp    c0021a73 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021a9c:	5b                   	pop    ebx
c0021a9d:	5e                   	pop    esi
c0021a9e:	5f                   	pop    edi
c0021a9f:	5d                   	pop    ebp
c0021aa0:	c3                   	ret    

c0021aa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021aa1:	57                   	push   edi
c0021aa2:	56                   	push   esi
c0021aa3:	53                   	push   ebx
c0021aa4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021aa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021aac:	39 0d 80 29 03 c0    	cmp    DWORD PTR ds:0xc0032980,ecx
c0021ab2:	75 08                	jne    c0021abc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021ab4:	38 05 f4 e7 02 c0    	cmp    BYTE PTR ds:0xc002e7f4,al
c0021aba:	74 2b                	je     c0021ae7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021abc:	83 ec 0c             	sub    esp,0xc
c0021abf:	a2 f4 e7 02 c0       	mov    ds:0xc002e7f4,al
c0021ac4:	68 a0 29 03 c0       	push   0xc00329a0
c0021ac9:	0f be c0             	movsx  eax,al
c0021acc:	6a 01                	push   0x1
c0021ace:	89 0d 80 29 03 c0    	mov    DWORD PTR ds:0xc0032980,ecx
c0021ad4:	31 db                	xor    ebx,ebx
c0021ad6:	53                   	push   ebx
c0021ad7:	51                   	push   ecx
c0021ad8:	ff 34 85 5c f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd08a4]
c0021adf:	e8 7e 48 ff ff       	call   c0016362 <LogicalDisk::read(unsigned long long, int, void*)>
c0021ae4:	83 c4 20             	add    esp,0x20
c0021ae7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021aeb:	be a0 29 03 c0       	mov    esi,0xc00329a0
c0021af0:	b9 00 08 00 00       	mov    ecx,0x800
c0021af5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021af7:	5b                   	pop    ebx
c0021af8:	5e                   	pop    esi
c0021af9:	5f                   	pop    edi
c0021afa:	c3                   	ret    
c0021afb:	90                   	nop

c0021afc <ISO9660::tryMount(LogicalDisk*, int)>:
c0021afc:	81 ec 10 08 00 00    	sub    esp,0x810
c0021b02:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021b09:	83 c0 41             	add    eax,0x41
c0021b0c:	0f be c0             	movsx  eax,al
c0021b0f:	50                   	push   eax
c0021b10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021b14:	50                   	push   eax
c0021b15:	6a 10                	push   0x10
c0021b17:	e8 85 ff ff ff       	call   c0021aa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b1c:	83 c4 10             	add    esp,0x10
c0021b1f:	31 c0                	xor    eax,eax
c0021b21:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021b26:	75 1d                	jne    c0021b45 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021b28:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021b2d:	75 16                	jne    c0021b45 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021b2f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021b34:	75 0f                	jne    c0021b45 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021b36:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021b3b:	75 08                	jne    c0021b45 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021b3d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021b42:	0f 94 c0             	sete   al
c0021b45:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021b4b:	c3                   	ret    

c0021b4c <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021b4c:	55                   	push   ebp
c0021b4d:	57                   	push   edi
c0021b4e:	56                   	push   esi
c0021b4f:	53                   	push   ebx
c0021b50:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021b56:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021b5d:	85 ed                	test   ebp,ebp
c0021b5f:	0f 84 da 01 00 00    	je     c0021d3f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021b65:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021b6d:	0f 84 cc 01 00 00    	je     c0021d3f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021b73:	b8 01 00 00 00       	mov    eax,0x1
c0021b78:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021b7c:	0f 85 c2 01 00 00    	jne    c0021d44 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021b82:	31 d2                	xor    edx,edx
c0021b84:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021b8b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021b8e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021b91:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021b94:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b97:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b9b:	01 c8                	add    eax,ecx
c0021b9d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021ba0:	11 da                	adc    edx,ebx
c0021ba2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021ba6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021baa:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021bae:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021bb2:	19 d7                	sbb    edi,edx
c0021bb4:	72 11                	jb     c0021bc7 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021bb6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021bb9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021bbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021bc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bc5:	eb 0c                	jmp    c0021bd3 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021bc7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021bcb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021bcf:	29 ce                	sub    esi,ecx
c0021bd1:	19 df                	sbb    edi,ebx
c0021bd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021bd6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021bd9:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021bdd:	c1 e0 0b             	shl    eax,0xb
c0021be0:	01 c8                	add    eax,ecx
c0021be2:	11 da                	adc    edx,ebx
c0021be4:	89 04 24             	mov    DWORD PTR [esp],eax
c0021be7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021beb:	51                   	push   ecx
c0021bec:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021bf0:	50                   	push   eax
c0021bf1:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021bf5:	53                   	push   ebx
c0021bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021bfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021bfe:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021c02:	50                   	push   eax
c0021c03:	e8 99 fe ff ff       	call   c0021aa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c08:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021c0b:	b8 00 08 00 00       	mov    eax,0x800
c0021c10:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021c16:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021c1a:	29 d0                	sub    eax,edx
c0021c1c:	83 c4 10             	add    esp,0x10
c0021c1f:	89 f9                	mov    ecx,edi
c0021c21:	39 c6                	cmp    esi,eax
c0021c23:	83 d9 00             	sbb    ecx,0x0
c0021c26:	7d 1b                	jge    c0021c43 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021c28:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021c2d:	75 12                	jne    c0021c41 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021c2f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021c36:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c3c:	e9 fa 00 00 00       	jmp    c0021d3b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021c41:	89 f0                	mov    eax,esi
c0021c43:	01 d3                	add    ebx,edx
c0021c45:	31 d2                	xor    edx,edx
c0021c47:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021c4b:	39 c2                	cmp    edx,eax
c0021c4d:	7d 14                	jge    c0021c63 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021c4f:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021c56:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021c5a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021c5d:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021c60:	42                   	inc    edx
c0021c61:	eb e8                	jmp    c0021c4b <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021c63:	89 c2                	mov    edx,eax
c0021c65:	85 c0                	test   eax,eax
c0021c67:	79 02                	jns    c0021c6b <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021c69:	31 d2                	xor    edx,edx
c0021c6b:	01 c2                	add    edx,eax
c0021c6d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021c70:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021c77:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021c7b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021c7f:	99                   	cdq    
c0021c80:	01 c1                	add    ecx,eax
c0021c82:	11 d3                	adc    ebx,edx
c0021c84:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021c88:	29 c6                	sub    esi,eax
c0021c8a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021c8e:	19 d7                	sbb    edi,edx
c0021c90:	89 34 24             	mov    DWORD PTR [esp],esi
c0021c93:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021c97:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021c9c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021c9f:	b8 00 00 00 00       	mov    eax,0x0
c0021ca4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ca8:	7d 43                	jge    c0021ced <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021caa:	52                   	push   edx
c0021cab:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021caf:	50                   	push   eax
c0021cb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021cb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021cbc:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021cc0:	50                   	push   eax
c0021cc1:	e8 db fd ff ff       	call   c0021aa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cc6:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021cce:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021cd3:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021cdb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021ce3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021ce8:	83 c4 10             	add    esp,0x10
c0021ceb:	eb aa                	jmp    c0021c97 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021ced:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cf1:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021cf4:	74 2a                	je     c0021d20 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021cf6:	50                   	push   eax
c0021cf7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021cfb:	50                   	push   eax
c0021cfc:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021d00:	56                   	push   esi
c0021d01:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021d05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021d09:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021d0d:	51                   	push   ecx
c0021d0e:	e8 8e fd ff ff       	call   c0021aa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d13:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021d17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021d1d:	83 c4 10             	add    esp,0x10
c0021d20:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021d27:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021d2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d2f:	89 18                	mov    DWORD PTR [eax],ebx
c0021d31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021d35:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021d38:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021d3b:	31 c0                	xor    eax,eax
c0021d3d:	eb 05                	jmp    c0021d44 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021d3f:	b8 04 00 00 00       	mov    eax,0x4
c0021d44:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021d4a:	5b                   	pop    ebx
c0021d4b:	5e                   	pop    esi
c0021d4c:	5f                   	pop    edi
c0021d4d:	5d                   	pop    ebp
c0021d4e:	c3                   	ret    
c0021d4f:	90                   	nop

c0021d50 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021d50:	55                   	push   ebp
c0021d51:	57                   	push   edi
c0021d52:	56                   	push   esi
c0021d53:	53                   	push   ebx
c0021d54:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021d5a:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021d61:	85 ed                	test   ebp,ebp
c0021d63:	0f 84 51 02 00 00    	je     c0021fba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021d69:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021d71:	0f 84 43 02 00 00    	je     c0021fba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021d77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d7a:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021d7d:	75 0a                	jne    c0021d89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021d7f:	b8 07 00 00 00       	mov    eax,0x7
c0021d84:	e9 36 02 00 00       	jmp    c0021fbf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d89:	50                   	push   eax
c0021d8a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021d8e:	50                   	push   eax
c0021d8f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021d96:	53                   	push   ebx
c0021d97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021d9a:	c1 e0 0b             	shl    eax,0xb
c0021d9d:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021da0:	c1 e8 0b             	shr    eax,0xb
c0021da3:	50                   	push   eax
c0021da4:	e8 f8 fc ff ff       	call   c0021aa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021da9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021dac:	83 c4 10             	add    esp,0x10
c0021daf:	89 c1                	mov    ecx,eax
c0021db1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021db4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021dba:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021dbd:	84 db                	test   bl,bl
c0021dbf:	0f 85 8b 00 00 00    	jne    c0021e50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021dc5:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021dcb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021dce:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021dd4:	29 c6                	sub    esi,eax
c0021dd6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021dda:	89 f3                	mov    ebx,esi
c0021ddc:	89 f1                	mov    ecx,esi
c0021dde:	c1 fb 1f             	sar    ebx,0x1f
c0021de1:	01 f0                	add    eax,esi
c0021de3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021de6:	11 da                	adc    edx,ebx
c0021de8:	89 04 24             	mov    DWORD PTR [esp],eax
c0021deb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021def:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021df2:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021df5:	89 d8                	mov    eax,ebx
c0021df7:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021dfb:	ba 00 00 00 00       	mov    edx,0x0
c0021e00:	19 f8                	sbb    eax,edi
c0021e02:	b8 00 00 00 00       	mov    eax,0x0
c0021e07:	73 08                	jae    c0021e11 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021e09:	89 f0                	mov    eax,esi
c0021e0b:	89 fa                	mov    edx,edi
c0021e0d:	29 c8                	sub    eax,ecx
c0021e0f:	19 da                	sbb    edx,ebx
c0021e11:	89 d7                	mov    edi,edx
c0021e13:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021e16:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021e19:	09 c7                	or     edi,eax
c0021e1b:	0f 84 5e ff ff ff    	je     c0021d7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021e21:	57                   	push   edi
c0021e22:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021e26:	50                   	push   eax
c0021e27:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021e2e:	53                   	push   ebx
c0021e2f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021e32:	c1 e0 0b             	shl    eax,0xb
c0021e35:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021e39:	c1 e8 0b             	shr    eax,0xb
c0021e3c:	50                   	push   eax
c0021e3d:	e8 5f fc ff ff       	call   c0021aa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021e45:	83 c4 10             	add    esp,0x10
c0021e48:	25 ff 07 00 00       	and    eax,0x7ff
c0021e4d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021e50:	31 ff                	xor    edi,edi
c0021e52:	56                   	push   esi
c0021e53:	6a 28                	push   0x28
c0021e55:	6a 00                	push   0x0
c0021e57:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021e5b:	50                   	push   eax
c0021e5c:	e8 ef e8 fd ff       	call   c0000750 <memset>
c0021e61:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021e64:	25 ff 07 00 00       	and    eax,0x7ff
c0021e69:	89 c6                	mov    esi,eax
c0021e6b:	83 c6 21             	add    esi,0x21
c0021e6e:	83 d7 00             	adc    edi,0x0
c0021e71:	83 c4 10             	add    esp,0x10
c0021e74:	31 c9                	xor    ecx,ecx
c0021e76:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021e7d:	83 f9 28             	cmp    ecx,0x28
c0021e80:	88 04 24             	mov    BYTE PTR [esp],al
c0021e83:	0f 94 c2             	sete   dl
c0021e86:	88 d0                	mov    al,dl
c0021e88:	ba ff 07 00 00       	mov    edx,0x7ff
c0021e8d:	39 f2                	cmp    edx,esi
c0021e8f:	ba 00 00 00 00       	mov    edx,0x0
c0021e94:	19 fa                	sbb    edx,edi
c0021e96:	0f 92 c2             	setb   dl
c0021e99:	09 c2                	or     edx,eax
c0021e9b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021e9f:	0f 94 c0             	sete   al
c0021ea2:	08 d0                	or     al,dl
c0021ea4:	75 16                	jne    c0021ebc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021ea6:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021eaa:	74 10                	je     c0021ebc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021eac:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021eaf:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021eb3:	41                   	inc    ecx
c0021eb4:	83 c6 01             	add    esi,0x1
c0021eb7:	83 d7 00             	adc    edi,0x0
c0021eba:	eb ba                	jmp    c0021e76 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021ebc:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021ec3:	83 ec 0c             	sub    esp,0xc
c0021ec6:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021eca:	56                   	push   esi
c0021ecb:	e8 9c e8 fd ff       	call   c000076c <strlen>
c0021ed0:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021ed7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021edb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021ee3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021ee6:	5a                   	pop    edx
c0021ee7:	25 ff 07 00 00       	and    eax,0x7ff
c0021eec:	59                   	pop    ecx
c0021eed:	01 f8                	add    eax,edi
c0021eef:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021ef5:	83 e0 02             	and    eax,0x2
c0021ef8:	3c 01                	cmp    al,0x1
c0021efa:	19 c0                	sbb    eax,eax
c0021efc:	83 c0 02             	add    eax,0x2
c0021eff:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021f03:	56                   	push   esi
c0021f04:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021f08:	50                   	push   eax
c0021f09:	e8 fe e8 fd ff       	call   c000080c <strcpy>
c0021f0e:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021f12:	83 c4 10             	add    esp,0x10
c0021f15:	84 c0                	test   al,al
c0021f17:	75 21                	jne    c0021f3a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021f19:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021f21:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021f29:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021f31:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021f38:	eb 28                	jmp    c0021f62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021f3a:	fe c8                	dec    al
c0021f3c:	75 24                	jne    c0021f62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021f3e:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021f46:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021f4e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021f56:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021f5d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021f62:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021f66:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021f6d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021f74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f76:	0f b6 f3             	movzx  esi,bl
c0021f79:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021f80:	31 db                	xor    ebx,ebx
c0021f82:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021f88:	89 df                	mov    edi,ebx
c0021f8a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021f8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021f90:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021f93:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021f96:	39 c6                	cmp    esi,eax
c0021f98:	19 d7                	sbb    edi,edx
c0021f9a:	72 10                	jb     c0021fac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021f9c:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021fa3:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021faa:	eb 0a                	jmp    c0021fb6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021fac:	29 f0                	sub    eax,esi
c0021fae:	19 da                	sbb    edx,ebx
c0021fb0:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021fb3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021fb6:	31 c0                	xor    eax,eax
c0021fb8:	eb 05                	jmp    c0021fbf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021fba:	b8 04 00 00 00       	mov    eax,0x4
c0021fbf:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021fc5:	5b                   	pop    ebx
c0021fc6:	5e                   	pop    esi
c0021fc7:	5f                   	pop    edi
c0021fc8:	5d                   	pop    ebp
c0021fc9:	c3                   	ret    

c0021fca <readRoot(unsigned int*, unsigned int*, char)>:
c0021fca:	57                   	push   edi
c0021fcb:	56                   	push   esi
c0021fcc:	81 ec 38 08 00 00    	sub    esp,0x838
c0021fd2:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021fda:	50                   	push   eax
c0021fdb:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021fdf:	50                   	push   eax
c0021fe0:	6a 10                	push   0x10
c0021fe2:	e8 ba fa ff ff       	call   c0021aa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021fe7:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021fee:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021ff2:	b9 22 00 00 00       	mov    ecx,0x22
c0021ff7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021ff9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022000:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022004:	89 10                	mov    DWORD PTR [eax],edx
c0022006:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002200d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022011:	89 10                	mov    DWORD PTR [eax],edx
c0022013:	81 c4 44 08 00 00    	add    esp,0x844
c0022019:	b0 01                	mov    al,0x1
c002201b:	5e                   	pop    esi
c002201c:	5f                   	pop    edi
c002201d:	c3                   	ret    

c002201e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002201e:	55                   	push   ebp
c002201f:	57                   	push   edi
c0022020:	56                   	push   esi
c0022021:	53                   	push   ebx
c0022022:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0022028:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002202f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022036:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002203a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002203e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022042:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022046:	75 03                	jne    c002204b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022048:	83 c3 02             	add    ebx,0x2
c002204b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002204e:	75 03                	jne    c0022053 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0022050:	43                   	inc    ebx
c0022051:	eb f8                	jmp    c002204b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022053:	51                   	push   ecx
c0022054:	68 00 01 00 00       	push   0x100
c0022059:	6a 00                	push   0x0
c002205b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002205f:	50                   	push   eax
c0022060:	e8 eb e6 fd ff       	call   c0000750 <memset>
c0022065:	83 c4 10             	add    esp,0x10
c0022068:	31 d2                	xor    edx,edx
c002206a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002206d:	84 c0                	test   al,al
c002206f:	74 21                	je     c0022092 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022071:	3c 2f                	cmp    al,0x2f
c0022073:	75 0b                	jne    c0022080 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022075:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0022079:	bd 01 00 00 00       	mov    ebp,0x1
c002207e:	eb 14                	jmp    c0022094 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0022080:	8d 48 9f             	lea    ecx,[eax-0x61]
c0022083:	80 f9 19             	cmp    cl,0x19
c0022086:	77 03                	ja     c002208b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022088:	83 e8 20             	sub    eax,0x20
c002208b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002208f:	42                   	inc    edx
c0022090:	eb d8                	jmp    c002206a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0022092:	31 ed                	xor    ebp,ebp
c0022094:	83 ec 0c             	sub    esp,0xc
c0022097:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002209e:	e8 5f d8 fe ff       	call   c000f902 <malloc>
c00220a3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00220aa:	89 c6                	mov    esi,eax
c00220ac:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00220b2:	c1 ef 0b             	shr    edi,0xb
c00220b5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00220bc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00220c0:	83 c4 10             	add    esp,0x10
c00220c3:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00220c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00220cc:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00220d3:	74 28                	je     c00220fd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00220d5:	52                   	push   edx
c00220d6:	57                   	push   edi
c00220d7:	50                   	push   eax
c00220d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00220dc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00220e3:	e8 b9 f9 ff ff       	call   c0021aa1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00220ec:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c00220f3:	05 00 08 00 00       	add    eax,0x800
c00220f8:	83 c4 10             	add    esp,0x10
c00220fb:	eb cb                	jmp    c00220c8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00220fd:	83 ec 0c             	sub    esp,0xc
c0022100:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022104:	57                   	push   edi
c0022105:	e8 62 e6 fd ff       	call   c000076c <strlen>
c002210a:	50                   	push   eax
c002210b:	57                   	push   edi
c002210c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022113:	56                   	push   esi
c0022114:	e8 46 f9 ff ff       	call   c0021a5f <__memmem(unsigned char*, int, unsigned char*, int)>
c0022119:	83 c4 20             	add    esp,0x20
c002211c:	85 c0                	test   eax,eax
c002211e:	75 13                	jne    c0022133 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022120:	83 ec 0c             	sub    esp,0xc
c0022123:	56                   	push   esi
c0022124:	e8 e9 d7 fe ff       	call   c000f912 <free>
c0022129:	83 c4 10             	add    esp,0x10
c002212c:	31 c0                	xor    eax,eax
c002212e:	e9 b3 00 00 00       	jmp    c00221e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022133:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022137:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002213b:	c1 e7 08             	shl    edi,0x8
c002213e:	c1 e2 10             	shl    edx,0x10
c0022141:	09 d7                	or     edi,edx
c0022143:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022147:	09 d7                	or     edi,edx
c0022149:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002214d:	c1 e2 18             	shl    edx,0x18
c0022150:	09 d7                	or     edi,edx
c0022152:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022156:	89 d1                	mov    ecx,edx
c0022158:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002215c:	c1 e1 08             	shl    ecx,0x8
c002215f:	c1 e2 10             	shl    edx,0x10
c0022162:	09 ca                	or     edx,ecx
c0022164:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022168:	09 ca                	or     edx,ecx
c002216a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002216e:	c1 e1 18             	shl    ecx,0x18
c0022171:	09 ca                	or     edx,ecx
c0022173:	89 e9                	mov    ecx,ebp
c0022175:	84 c9                	test   cl,cl
c0022177:	74 3c                	je     c00221b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022179:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002217d:	83 ec 0c             	sub    esp,0xc
c0022180:	56                   	push   esi
c0022181:	e8 8c d7 fe ff       	call   c000f912 <free>
c0022186:	83 c4 0c             	add    esp,0xc
c0022189:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022190:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022195:	50                   	push   eax
c0022196:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002219d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00221a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00221a8:	52                   	push   edx
c00221a9:	57                   	push   edi
c00221aa:	53                   	push   ebx
c00221ab:	e8 6e fe ff ff       	call   c002201e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00221b0:	83 c4 20             	add    esp,0x20
c00221b3:	eb 31                	jmp    c00221e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00221b5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00221b8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00221bf:	d0 e8                	shr    al,1
c00221c1:	89 3b                	mov    DWORD PTR [ebx],edi
c00221c3:	83 e0 01             	and    eax,0x1
c00221c6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00221cd:	83 ec 0c             	sub    esp,0xc
c00221d0:	89 13                	mov    DWORD PTR [ebx],edx
c00221d2:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00221d9:	89 03                	mov    DWORD PTR [ebx],eax
c00221db:	56                   	push   esi
c00221dc:	e8 31 d7 fe ff       	call   c000f912 <free>
c00221e1:	83 c4 10             	add    esp,0x10
c00221e4:	b0 01                	mov    al,0x1
c00221e6:	81 c4 1c 01 00 00    	add    esp,0x11c
c00221ec:	5b                   	pop    ebx
c00221ed:	5e                   	pop    esi
c00221ee:	5f                   	pop    edi
c00221ef:	5d                   	pop    ebp
c00221f0:	c3                   	ret    

c00221f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00221f1:	55                   	push   ebp
c00221f2:	57                   	push   edi
c00221f3:	56                   	push   esi
c00221f4:	53                   	push   ebx
c00221f5:	83 ec 20             	sub    esp,0x20
c00221f8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00221fc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022200:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022204:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002220c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022214:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022219:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002221f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022225:	57                   	push   edi
c0022226:	8d 44 24 14          	lea    eax,[esp+0x14]
c002222a:	50                   	push   eax
c002222b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002222f:	50                   	push   eax
c0022230:	e8 95 fd ff ff       	call   c0021fca <readRoot(unsigned int*, unsigned int*, char)>
c0022235:	5a                   	pop    edx
c0022236:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002223a:	e8 2d e5 fd ff       	call   c000076c <strlen>
c002223f:	83 c4 10             	add    esp,0x10
c0022242:	83 f8 03             	cmp    eax,0x3
c0022245:	77 17                	ja     c002225e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022247:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002224b:	89 03                	mov    DWORD PTR [ebx],eax
c002224d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022251:	89 06                	mov    DWORD PTR [esi],eax
c0022253:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002225a:	b0 01                	mov    al,0x1
c002225c:	eb 19                	jmp    c0022277 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002225e:	50                   	push   eax
c002225f:	55                   	push   ebp
c0022260:	57                   	push   edi
c0022261:	56                   	push   esi
c0022262:	53                   	push   ebx
c0022263:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022267:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002226b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002226f:	e8 aa fd ff ff       	call   c002201e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022274:	83 c4 20             	add    esp,0x20
c0022277:	83 c4 1c             	add    esp,0x1c
c002227a:	5b                   	pop    ebx
c002227b:	5e                   	pop    esi
c002227c:	5f                   	pop    edi
c002227d:	5d                   	pop    ebp
c002227e:	c3                   	ret    
c002227f:	90                   	nop

c0022280 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022280:	57                   	push   edi
c0022281:	56                   	push   esi
c0022282:	53                   	push   ebx
c0022283:	83 ec 10             	sub    esp,0x10
c0022286:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002228a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002228e:	85 ff                	test   edi,edi
c0022290:	0f 84 9d 00 00 00    	je     c0022333 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022296:	85 f6                	test   esi,esi
c0022298:	0f 84 95 00 00 00    	je     c0022333 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002229e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00222a3:	74 17                	je     c00222bc <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00222a5:	83 ec 0c             	sub    esp,0xc
c00222a8:	68 3f d4 02 c0       	push   0xc002d43f
c00222ad:	e8 33 07 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00222b2:	83 c4 10             	add    esp,0x10
c00222b5:	b8 03 00 00 00       	mov    eax,0x3
c00222ba:	eb 7c                	jmp    c0022338 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00222bc:	83 ec 0c             	sub    esp,0xc
c00222bf:	6a 1c                	push   0x1c
c00222c1:	e8 3c d6 fe ff       	call   c000f902 <malloc>
c00222c6:	89 07                	mov    DWORD PTR [edi],eax
c00222c8:	89 c3                	mov    ebx,eax
c00222ca:	58                   	pop    eax
c00222cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00222cf:	50                   	push   eax
c00222d0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00222d3:	50                   	push   eax
c00222d4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222d8:	50                   	push   eax
c00222d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222dd:	50                   	push   eax
c00222de:	56                   	push   esi
c00222df:	e8 0d ff ff ff       	call   c00221f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00222e4:	83 c4 20             	add    esp,0x20
c00222e7:	84 c0                	test   al,al
c00222e9:	74 07                	je     c00222f2 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00222eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00222f0:	74 0b                	je     c00222fd <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00222f2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00222f6:	b8 01 00 00 00       	mov    eax,0x1
c00222fb:	eb 3b                	jmp    c0022338 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00222fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022301:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022305:	89 03                	mov    DWORD PTR [ebx],eax
c0022307:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002230e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022312:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022319:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022320:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022323:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002232a:	8a 06                	mov    al,BYTE PTR [esi]
c002232c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002232f:	31 c0                	xor    eax,eax
c0022331:	eb 05                	jmp    c0022338 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022333:	b8 04 00 00 00       	mov    eax,0x4
c0022338:	83 c4 10             	add    esp,0x10
c002233b:	5b                   	pop    ebx
c002233c:	5e                   	pop    esi
c002233d:	5f                   	pop    edi
c002233e:	c3                   	ret    
c002233f:	90                   	nop

c0022340 <ISO9660::exists(char const*)>:
c0022340:	83 ec 28             	sub    esp,0x28
c0022343:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022347:	8d 54 24 18          	lea    edx,[esp+0x18]
c002234b:	52                   	push   edx
c002234c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002234f:	52                   	push   edx
c0022350:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022354:	52                   	push   edx
c0022355:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022359:	52                   	push   edx
c002235a:	50                   	push   eax
c002235b:	e8 91 fe ff ff       	call   c00221f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022360:	83 c4 3c             	add    esp,0x3c
c0022363:	c3                   	ret    

c0022364 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022364:	56                   	push   esi
c0022365:	53                   	push   ebx
c0022366:	83 ec 14             	sub    esp,0x14
c0022369:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002236d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022371:	85 db                	test   ebx,ebx
c0022373:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022377:	0f 94 c2             	sete   dl
c002237a:	85 f6                	test   esi,esi
c002237c:	0f 94 c0             	sete   al
c002237f:	08 c2                	or     dl,al
c0022381:	75 68                	jne    c00223eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022383:	85 c9                	test   ecx,ecx
c0022385:	74 64                	je     c00223eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022387:	83 ec 0c             	sub    esp,0xc
c002238a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002238d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022391:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022397:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002239e:	50                   	push   eax
c002239f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00223a2:	50                   	push   eax
c00223a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223a7:	50                   	push   eax
c00223a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00223ac:	50                   	push   eax
c00223ad:	51                   	push   ecx
c00223ae:	e8 3e fe ff ff       	call   c00221f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00223b3:	83 c4 20             	add    esp,0x20
c00223b6:	ba 01 00 00 00       	mov    edx,0x1
c00223bb:	84 c0                	test   al,al
c00223bd:	74 31                	je     c00223f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00223bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00223c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00223ca:	89 03                	mov    DWORD PTR [ebx],eax
c00223cc:	ba 00 00 00 00       	mov    edx,0x0
c00223d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223d5:	85 c0                	test   eax,eax
c00223d7:	0f 95 06             	setne  BYTE PTR [esi]
c00223da:	74 14                	je     c00223f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00223dc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00223e2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00223e9:	eb 05                	jmp    c00223f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00223eb:	ba 04 00 00 00       	mov    edx,0x4
c00223f0:	83 c4 14             	add    esp,0x14
c00223f3:	89 d0                	mov    eax,edx
c00223f5:	5b                   	pop    ebx
c00223f6:	5e                   	pop    esi
c00223f7:	c3                   	ret    

c00223f8 <ISO9660::openDir(char const*, void**)>:
c00223f8:	57                   	push   edi
c00223f9:	56                   	push   esi
c00223fa:	53                   	push   ebx
c00223fb:	83 ec 10             	sub    esp,0x10
c00223fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022402:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022406:	85 ff                	test   edi,edi
c0022408:	0f 84 95 00 00 00    	je     c00224a3 <ISO9660::openDir(char const*, void**)+0xab>
c002240e:	85 f6                	test   esi,esi
c0022410:	0f 84 8d 00 00 00    	je     c00224a3 <ISO9660::openDir(char const*, void**)+0xab>
c0022416:	83 ec 0c             	sub    esp,0xc
c0022419:	6a 1c                	push   0x1c
c002241b:	e8 e2 d4 fe ff       	call   c000f902 <malloc>
c0022420:	89 07                	mov    DWORD PTR [edi],eax
c0022422:	89 c3                	mov    ebx,eax
c0022424:	59                   	pop    ecx
c0022425:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022429:	50                   	push   eax
c002242a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002242d:	50                   	push   eax
c002242e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022432:	50                   	push   eax
c0022433:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022437:	50                   	push   eax
c0022438:	56                   	push   esi
c0022439:	e8 b3 fd ff ff       	call   c00221f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002243e:	83 c4 20             	add    esp,0x20
c0022441:	84 c0                	test   al,al
c0022443:	74 07                	je     c002244c <ISO9660::openDir(char const*, void**)+0x54>
c0022445:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002244a:	75 21                	jne    c002246d <ISO9660::openDir(char const*, void**)+0x75>
c002244c:	0f b6 c0             	movzx  eax,al
c002244f:	52                   	push   edx
c0022450:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022454:	50                   	push   eax
c0022455:	68 65 d4 02 c0       	push   0xc002d465
c002245a:	e8 86 05 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002245f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022463:	83 c4 10             	add    esp,0x10
c0022466:	b8 01 00 00 00       	mov    eax,0x1
c002246b:	eb 3b                	jmp    c00224a8 <ISO9660::openDir(char const*, void**)+0xb0>
c002246d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022471:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022475:	89 03                	mov    DWORD PTR [ebx],eax
c0022477:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002247e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022482:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022489:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022490:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022493:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002249a:	8a 06                	mov    al,BYTE PTR [esi]
c002249c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002249f:	31 c0                	xor    eax,eax
c00224a1:	eb 05                	jmp    c00224a8 <ISO9660::openDir(char const*, void**)+0xb0>
c00224a3:	b8 04 00 00 00       	mov    eax,0x4
c00224a8:	83 c4 10             	add    esp,0x10
c00224ab:	5b                   	pop    ebx
c00224ac:	5e                   	pop    esi
c00224ad:	5f                   	pop    edi
c00224ae:	c3                   	ret    
c00224af:	90                   	nop

c00224b0 <ISO9660::ISO9660()>:
c00224b0:	83 ec 0c             	sub    esp,0xc
c00224b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b7:	83 ec 0c             	sub    esp,0xc
c00224ba:	50                   	push   eax
c00224bb:	e8 30 08 ff ff       	call   c0012cf0 <Filesystem::Filesystem()>
c00224c0:	83 c4 10             	add    esp,0x10
c00224c3:	ba 88 d4 02 c0       	mov    edx,0xc002d488
c00224c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224cc:	89 10                	mov    DWORD PTR [eax],edx
c00224ce:	90                   	nop
c00224cf:	83 c4 0c             	add    esp,0xc
c00224d2:	c3                   	ret    
c00224d3:	90                   	nop

c00224d4 <SoundChannel::SoundChannel(int, int, int, int)>:
c00224d4:	83 ec 1c             	sub    esp,0x1c
c00224d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00224df:	89 10                	mov    DWORD PTR [eax],edx
c00224e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00224e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00224ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00224f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00224f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00224f7:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00224fc:	75 23                	jne    c0022521 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00224fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022502:	8b 10                	mov    edx,DWORD PTR [eax]
c0022504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022508:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002250b:	0f af c2             	imul   eax,edx
c002250e:	85 c0                	test   eax,eax
c0022510:	79 03                	jns    c0022515 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0022512:	83 c0 03             	add    eax,0x3
c0022515:	c1 f8 02             	sar    eax,0x2
c0022518:	05 a0 0f 00 00       	add    eax,0xfa0
c002251d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022525:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022529:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002252c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022530:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002253b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022546:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022549:	c1 e0 02             	shl    eax,0x2
c002254c:	83 ec 0c             	sub    esp,0xc
c002254f:	50                   	push   eax
c0022550:	e8 ad d3 fe ff       	call   c000f902 <malloc>
c0022555:	83 c4 10             	add    esp,0x10
c0022558:	89 c2                	mov    edx,eax
c002255a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002255e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022561:	83 ec 04             	sub    esp,0x4
c0022564:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022568:	50                   	push   eax
c0022569:	6a 01                	push   0x1
c002256b:	6a 04                	push   0x4
c002256d:	e8 f3 65 fe ff       	call   c0008b65 <src_new>
c0022572:	83 c4 10             	add    esp,0x10
c0022575:	89 c2                	mov    edx,eax
c0022577:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002257b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002257e:	83 ec 0c             	sub    esp,0xc
c0022581:	68 e8 d4 02 c0       	push   0xc002d4e8
c0022586:	e8 5a 04 ff ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002258b:	83 c4 10             	add    esp,0x10
c002258e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022592:	85 c0                	test   eax,eax
c0022594:	74 10                	je     c00225a6 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c0022596:	83 ec 0c             	sub    esp,0xc
c0022599:	68 fe d4 02 c0       	push   0xc002d4fe
c002259e:	e8 62 7e ff ff       	call   c001a405 <Krnl::panic(char const*)>
c00225a3:	83 c4 10             	add    esp,0x10
c00225a6:	a0 a0 35 03 c0       	mov    al,ds:0xc00335a0
c00225ab:	83 f0 01             	xor    eax,0x1
c00225ae:	84 c0                	test   al,al
c00225b0:	74 57                	je     c0022609 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c00225b2:	a1 18 d5 02 c0       	mov    eax,ds:0xc002d518
c00225b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00225bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225c3:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00225cb:	7f 35                	jg     c0022602 <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c00225cd:	83 ec 0c             	sub    esp,0xc
c00225d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00225d4:	e8 46 56 00 00       	call   c0027c1f <__floatsisf>
c00225d9:	83 c4 10             	add    esp,0x10
c00225dc:	8b 15 18 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d518
c00225e2:	83 ec 08             	sub    esp,0x8
c00225e5:	52                   	push   edx
c00225e6:	50                   	push   eax
c00225e7:	e8 45 52 00 00       	call   c0027831 <__mulsf3>
c00225ec:	83 c4 10             	add    esp,0x10
c00225ef:	89 c2                	mov    edx,eax
c00225f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00225f5:	89 14 85 a0 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce60],edx
c00225fc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022600:	eb c1                	jmp    c00225c3 <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c0022602:	c6 05 a0 35 03 c0 01 	mov    BYTE PTR ds:0xc00335a0,0x1
c0022609:	90                   	nop
c002260a:	83 c4 1c             	add    esp,0x1c
c002260d:	c3                   	ret    

c002260e <SoundChannel::~SoundChannel()>:
c002260e:	83 ec 0c             	sub    esp,0xc
c0022611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022615:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022618:	83 ec 0c             	sub    esp,0xc
c002261b:	50                   	push   eax
c002261c:	e8 f1 d2 fe ff       	call   c000f912 <free>
c0022621:	83 c4 10             	add    esp,0x10
c0022624:	90                   	nop
c0022625:	83 c4 0c             	add    esp,0xc
c0022628:	c3                   	ret    
c0022629:	90                   	nop

c002262a <SoundChannel::getSampleRate()>:
c002262a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002262e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022630:	c3                   	ret    
c0022631:	90                   	nop

c0022632 <SoundChannel::getBits()>:
c0022632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022636:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022639:	c3                   	ret    

c002263a <SoundChannel::getBufferUsed()>:
c002263a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002263e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022641:	c3                   	ret    

c0022642 <SoundChannel::getBufferSize()>:
c0022642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022646:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022649:	c3                   	ret    

c002264a <SoundChannel::unbuffer(float*, int, int)>:
c002264a:	56                   	push   esi
c002264b:	53                   	push   ebx
c002264c:	83 ec 40             	sub    esp,0x40
c002264f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022653:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002265a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002265d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022661:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022665:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022669:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002266d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022671:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022675:	e8 a5 55 00 00       	call   c0027c1f <__floatsisf>
c002267a:	5a                   	pop    edx
c002267b:	89 c6                	mov    esi,eax
c002267d:	ff 33                	push   DWORD PTR [ebx]
c002267f:	e8 9b 55 00 00       	call   c0027c1f <__floatsisf>
c0022684:	59                   	pop    ecx
c0022685:	5a                   	pop    edx
c0022686:	50                   	push   eax
c0022687:	56                   	push   esi
c0022688:	e8 67 53 00 00       	call   c00279f4 <__divsf3>
c002268d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022690:	e8 5a 68 00 00       	call   c0028eef <__extendsfdf2>
c0022695:	59                   	pop    ecx
c0022696:	5e                   	pop    esi
c0022697:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002269b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002269f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00226a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00226ab:	50                   	push   eax
c00226ac:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00226af:	e8 a6 60 fe ff       	call   c000875a <src_process>
c00226b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00226b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00226bb:	83 c4 0c             	add    esp,0xc
c00226be:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00226c1:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00226c4:	29 d0                	sub    eax,edx
c00226c6:	c1 e0 02             	shl    eax,0x2
c00226c9:	50                   	push   eax
c00226ca:	8d 04 91             	lea    eax,[ecx+edx*4]
c00226cd:	50                   	push   eax
c00226ce:	51                   	push   ecx
c00226cf:	e8 b4 df fd ff       	call   c0000688 <memmove>
c00226d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226d8:	83 c4 44             	add    esp,0x44
c00226db:	5b                   	pop    ebx
c00226dc:	5e                   	pop    esi
c00226dd:	c3                   	ret    

c00226de <SoundChannel::buffer16(short*, int)>:
c00226de:	55                   	push   ebp
c00226df:	57                   	push   edi
c00226e0:	56                   	push   esi
c00226e1:	53                   	push   ebx
c00226e2:	83 ec 1c             	sub    esp,0x1c
c00226e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00226e9:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00226ec:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00226ef:	0f 84 d2 00 00 00    	je     c00227c7 <SoundChannel::buffer16(short*, int)+0xe9>
c00226f5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00226f9:	85 ed                	test   ebp,ebp
c00226fb:	0f 8e c6 00 00 00    	jle    c00227c7 <SoundChannel::buffer16(short*, int)+0xe9>
c0022701:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022705:	bd 00 00 00 38       	mov    ebp,0x38000000
c002270a:	83 ec 0c             	sub    esp,0xc
c002270d:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0022710:	50                   	push   eax
c0022711:	e8 09 55 00 00       	call   c0027c1f <__floatsisf>
c0022716:	59                   	pop    ecx
c0022717:	8d 4e 01             	lea    ecx,[esi+0x1]
c002271a:	5f                   	pop    edi
c002271b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002271e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022721:	55                   	push   ebp
c0022722:	50                   	push   eax
c0022723:	e8 09 51 00 00       	call   c0027831 <__mulsf3>
c0022728:	83 c4 10             	add    esp,0x10
c002272b:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002272e:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022731:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022734:	0f 84 99 00 00 00    	je     c00227d3 <SoundChannel::buffer16(short*, int)+0xf5>
c002273a:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c002273f:	74 78                	je     c00227b9 <SoundChannel::buffer16(short*, int)+0xdb>
c0022741:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022745:	83 ec 0c             	sub    esp,0xc
c0022748:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c002274c:	50                   	push   eax
c002274d:	e8 cd 54 00 00       	call   c0027c1f <__floatsisf>
c0022752:	5f                   	pop    edi
c0022753:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022756:	5a                   	pop    edx
c0022757:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002275a:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002275d:	55                   	push   ebp
c002275e:	50                   	push   eax
c002275f:	e8 cd 50 00 00       	call   c0027831 <__mulsf3>
c0022764:	83 c4 10             	add    esp,0x10
c0022767:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002276a:	be 02 00 00 00       	mov    esi,0x2
c002276f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022772:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022775:	74 46                	je     c00227bd <SoundChannel::buffer16(short*, int)+0xdf>
c0022777:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c002277b:	eb 36                	jmp    c00227b3 <SoundChannel::buffer16(short*, int)+0xd5>
c002277d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022781:	83 ec 0c             	sub    esp,0xc
c0022784:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022788:	46                   	inc    esi
c0022789:	50                   	push   eax
c002278a:	e8 90 54 00 00       	call   c0027c1f <__floatsisf>
c002278f:	5a                   	pop    edx
c0022790:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022793:	59                   	pop    ecx
c0022794:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022797:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002279a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002279e:	50                   	push   eax
c002279f:	e8 8d 50 00 00       	call   c0027831 <__mulsf3>
c00227a4:	83 c4 10             	add    esp,0x10
c00227a7:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c00227ab:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00227ae:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00227b1:	74 0a                	je     c00227bd <SoundChannel::buffer16(short*, int)+0xdf>
c00227b3:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c00227b7:	75 c4                	jne    c002277d <SoundChannel::buffer16(short*, int)+0x9f>
c00227b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00227bd:	83 c4 1c             	add    esp,0x1c
c00227c0:	89 f0                	mov    eax,esi
c00227c2:	5b                   	pop    ebx
c00227c3:	5e                   	pop    esi
c00227c4:	5f                   	pop    edi
c00227c5:	5d                   	pop    ebp
c00227c6:	c3                   	ret    
c00227c7:	83 c4 1c             	add    esp,0x1c
c00227ca:	31 f6                	xor    esi,esi
c00227cc:	5b                   	pop    ebx
c00227cd:	89 f0                	mov    eax,esi
c00227cf:	5e                   	pop    esi
c00227d0:	5f                   	pop    edi
c00227d1:	5d                   	pop    ebp
c00227d2:	c3                   	ret    
c00227d3:	be 01 00 00 00       	mov    esi,0x1
c00227d8:	eb e3                	jmp    c00227bd <SoundChannel::buffer16(short*, int)+0xdf>

c00227da <SoundChannel::buffer8(unsigned char*, int)>:
c00227da:	55                   	push   ebp
c00227db:	57                   	push   edi
c00227dc:	56                   	push   esi
c00227dd:	53                   	push   ebx
c00227de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00227e2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00227e6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00227e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00227ed:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00227f0:	74 7a                	je     c002286c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00227f2:	85 ff                	test   edi,edi
c00227f4:	7e 76                	jle    c002286c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00227f6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00227fa:	8d 70 01             	lea    esi,[eax+0x1]
c00227fd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022800:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022803:	8b 1c 9d a0 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce60]
c002280a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002280d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022810:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022813:	74 5e                	je     c0022873 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022815:	83 ff 01             	cmp    edi,0x1
c0022818:	74 4b                	je     c0022865 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002281a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002281e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022821:	8d 70 01             	lea    esi,[eax+0x1]
c0022824:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022827:	8b 1c 9d a0 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce60]
c002282e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022831:	b8 02 00 00 00       	mov    eax,0x2
c0022836:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022839:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002283c:	75 23                	jne    c0022861 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002283e:	eb 27                	jmp    c0022867 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022840:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022845:	8d 71 01             	lea    esi,[ecx+0x1]
c0022848:	40                   	inc    eax
c0022849:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002284c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002284f:	8b 1c 9d a0 31 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcce60]
c0022856:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022859:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002285c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002285f:	74 06                	je     c0022867 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022861:	39 c7                	cmp    edi,eax
c0022863:	75 db                	jne    c0022840 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022865:	89 f8                	mov    eax,edi
c0022867:	5b                   	pop    ebx
c0022868:	5e                   	pop    esi
c0022869:	5f                   	pop    edi
c002286a:	5d                   	pop    ebp
c002286b:	c3                   	ret    
c002286c:	5b                   	pop    ebx
c002286d:	31 c0                	xor    eax,eax
c002286f:	5e                   	pop    esi
c0022870:	5f                   	pop    edi
c0022871:	5d                   	pop    ebp
c0022872:	c3                   	ret    
c0022873:	b8 01 00 00 00       	mov    eax,0x1
c0022878:	eb ed                	jmp    c0022867 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002287a <SoundDevice::SoundDevice(char const*)>:
c002287a:	83 ec 1c             	sub    esp,0x1c
c002287d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022881:	83 ec 08             	sub    esp,0x8
c0022884:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022888:	50                   	push   eax
c0022889:	e8 94 17 ff ff       	call   c0014022 <Device::Device(char const*)>
c002288e:	83 c4 10             	add    esp,0x10
c0022891:	ba 18 d6 02 c0       	mov    edx,0xc002d618
c0022896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002289a:	89 10                	mov    DWORD PTR [eax],edx
c002289c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228a0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00228aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00228b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00228c0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00228c5:	7f 19                	jg     c00228e0 <SoundDevice::SoundDevice(char const*)+0x66>
c00228c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00228cf:	83 c2 54             	add    edx,0x54
c00228d2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00228da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00228de:	eb e0                	jmp    c00228c0 <SoundDevice::SoundDevice(char const*)+0x46>
c00228e0:	90                   	nop
c00228e1:	83 c4 1c             	add    esp,0x1c
c00228e4:	c3                   	ret    
c00228e5:	90                   	nop

c00228e6 <SoundDevice::~SoundDevice()>:
c00228e6:	53                   	push   ebx
c00228e7:	83 ec 18             	sub    esp,0x18
c00228ea:	ba 18 d6 02 c0       	mov    edx,0xc002d618
c00228ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228f3:	89 10                	mov    DWORD PTR [eax],edx
c00228f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00228fd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022902:	7f 46                	jg     c002294a <SoundDevice::~SoundDevice()+0x64>
c0022904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022908:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002290c:	83 c2 54             	add    edx,0x54
c002290f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022913:	85 c0                	test   eax,eax
c0022915:	74 2d                	je     c0022944 <SoundDevice::~SoundDevice()+0x5e>
c0022917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002291b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002291f:	83 c2 54             	add    edx,0x54
c0022922:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022926:	85 db                	test   ebx,ebx
c0022928:	74 1a                	je     c0022944 <SoundDevice::~SoundDevice()+0x5e>
c002292a:	83 ec 0c             	sub    esp,0xc
c002292d:	53                   	push   ebx
c002292e:	e8 db fc ff ff       	call   c002260e <SoundChannel::~SoundChannel()>
c0022933:	83 c4 10             	add    esp,0x10
c0022936:	83 ec 08             	sub    esp,0x8
c0022939:	6a 2c                	push   0x2c
c002293b:	53                   	push   ebx
c002293c:	e8 c4 ff fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0022941:	83 c4 10             	add    esp,0x10
c0022944:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022948:	eb b3                	jmp    c00228fd <SoundDevice::~SoundDevice()+0x17>
c002294a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002294e:	83 ec 0c             	sub    esp,0xc
c0022951:	50                   	push   eax
c0022952:	e8 95 13 ff ff       	call   c0013cec <Device::~Device()>
c0022957:	83 c4 10             	add    esp,0x10
c002295a:	90                   	nop
c002295b:	83 c4 18             	add    esp,0x18
c002295e:	5b                   	pop    ebx
c002295f:	c3                   	ret    

c0022960 <SoundDevice::~SoundDevice()>:
c0022960:	83 ec 0c             	sub    esp,0xc
c0022963:	83 ec 0c             	sub    esp,0xc
c0022966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002296a:	e8 77 ff ff ff       	call   c00228e6 <SoundDevice::~SoundDevice()>
c002296f:	83 c4 10             	add    esp,0x10
c0022972:	83 ec 08             	sub    esp,0x8
c0022975:	68 e4 01 00 00       	push   0x1e4
c002297a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002297e:	e8 82 ff fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0022983:	83 c4 10             	add    esp,0x10
c0022986:	83 c4 0c             	add    esp,0xc
c0022989:	c3                   	ret    

c002298a <SoundDevice::getFreeChannelNum()>:
c002298a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002298e:	31 c0                	xor    eax,eax
c0022990:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022998:	74 09                	je     c00229a3 <SoundDevice::getFreeChannelNum()+0x19>
c002299a:	40                   	inc    eax
c002299b:	83 f8 20             	cmp    eax,0x20
c002299e:	75 f0                	jne    c0022990 <SoundDevice::getFreeChannelNum()+0x6>
c00229a0:	83 c8 ff             	or     eax,0xffffffff
c00229a3:	c3                   	ret    

c00229a4 <SoundDevice::addChannel(SoundChannel*)>:
c00229a4:	56                   	push   esi
c00229a5:	53                   	push   ebx
c00229a6:	51                   	push   ecx
c00229a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00229ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00229af:	53                   	push   ebx
c00229b0:	e8 d5 ff ff ff       	call   c002298a <SoundDevice::getFreeChannelNum()>
c00229b5:	5a                   	pop    edx
c00229b6:	83 f8 ff             	cmp    eax,0xffffffff
c00229b9:	74 51                	je     c0022a0c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00229bb:	85 f6                	test   esi,esi
c00229bd:	74 4d                	je     c0022a0c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00229bf:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00229c6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00229cd:	75 30                	jne    c00229ff <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00229cf:	83 ec 0c             	sub    esp,0xc
c00229d2:	56                   	push   esi
c00229d3:	e8 52 fc ff ff       	call   c002262a <SoundChannel::getSampleRate()>
c00229d8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00229de:	89 34 24             	mov    DWORD PTR [esp],esi
c00229e1:	e8 4c fc ff ff       	call   c0022632 <SoundChannel::getBits()>
c00229e6:	83 c4 0c             	add    esp,0xc
c00229e9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00229ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00229f1:	50                   	push   eax
c00229f2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00229f8:	53                   	push   ebx
c00229f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00229fc:	83 c4 10             	add    esp,0x10
c00229ff:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022a05:	b8 01 00 00 00       	mov    eax,0x1
c0022a0a:	eb 03                	jmp    c0022a0f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022a0c:	83 c8 ff             	or     eax,0xffffffff
c0022a0f:	5a                   	pop    edx
c0022a10:	5b                   	pop    ebx
c0022a11:	5e                   	pop    esi
c0022a12:	c3                   	ret    
c0022a13:	90                   	nop

c0022a14 <SoundDevice::removeChannel(int)>:
c0022a14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a1c:	83 fa 1f             	cmp    edx,0x1f
c0022a1f:	77 23                	ja     c0022a44 <SoundDevice::removeChannel(int)+0x30>
c0022a21:	8d 14 90             	lea    edx,[eax+edx*4]
c0022a24:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022a2b:	74 17                	je     c0022a44 <SoundDevice::removeChannel(int)+0x30>
c0022a2d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022a37:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022a3d:	75 05                	jne    c0022a44 <SoundDevice::removeChannel(int)+0x30>
c0022a3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a41:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022a44:	c3                   	ret    
c0022a45:	90                   	nop

c0022a46 <SoundDevice::floatTo16(float*, short*, int)>:
c0022a46:	57                   	push   edi
c0022a47:	56                   	push   esi
c0022a48:	53                   	push   ebx
c0022a49:	31 db                	xor    ebx,ebx
c0022a4b:	83 ec 10             	sub    esp,0x10
c0022a4e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022a52:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022a56:	0f 8d d0 00 00 00    	jge    c0022b2c <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022a5c:	83 ec 0c             	sub    esp,0xc
c0022a5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a63:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022a66:	e8 84 64 00 00       	call   c0028eef <__extendsfdf2>
c0022a6b:	83 c4 10             	add    esp,0x10
c0022a6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a76:	68 00 00 f0 3f       	push   0x3ff00000
c0022a7b:	6a 00                	push   0x0
c0022a7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a85:	e8 f1 53 00 00       	call   c0027e7b <__adddf3>
c0022a8a:	83 c4 10             	add    esp,0x10
c0022a8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a95:	68 00 00 e0 3f       	push   0x3fe00000
c0022a9a:	6a 00                	push   0x0
c0022a9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aa4:	e8 4f 5a 00 00       	call   c00284f8 <__muldf3>
c0022aa9:	83 c4 10             	add    esp,0x10
c0022aac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ab0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ab4:	68 c0 ff df 40       	push   0x40dfffc0
c0022ab9:	6a 00                	push   0x0
c0022abb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022abf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac3:	e8 30 5a 00 00       	call   c00284f8 <__muldf3>
c0022ac8:	59                   	pop    ecx
c0022ac9:	5f                   	pop    edi
c0022aca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022ace:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022ad2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ad6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ada:	e8 ec 62 00 00       	call   c0028dcb <__truncdfsf2>
c0022adf:	5a                   	pop    edx
c0022ae0:	89 c7                	mov    edi,eax
c0022ae2:	59                   	pop    ecx
c0022ae3:	68 00 fe ff 46       	push   0x46fffe00
c0022ae8:	50                   	push   eax
c0022ae9:	e8 87 53 00 00       	call   c0027e75 <__gesf2>
c0022aee:	83 c4 10             	add    esp,0x10
c0022af1:	85 c0                	test   eax,eax
c0022af3:	78 08                	js     c0022afd <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0022af5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022afb:	eb 29                	jmp    c0022b26 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022afd:	50                   	push   eax
c0022afe:	50                   	push   eax
c0022aff:	6a 00                	push   0x0
c0022b01:	57                   	push   edi
c0022b02:	e8 72 53 00 00       	call   c0027e79 <__lesf2>
c0022b07:	83 c4 10             	add    esp,0x10
c0022b0a:	85 c0                	test   eax,eax
c0022b0c:	7f 08                	jg     c0022b16 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022b0e:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022b14:	eb 10                	jmp    c0022b26 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022b16:	83 ec 0c             	sub    esp,0xc
c0022b19:	57                   	push   edi
c0022b1a:	e8 6d 64 00 00       	call   c0028f8c <lrintf>
c0022b1f:	83 c4 10             	add    esp,0x10
c0022b22:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022b26:	43                   	inc    ebx
c0022b27:	e9 26 ff ff ff       	jmp    c0022a52 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022b2c:	83 c4 10             	add    esp,0x10
c0022b2f:	5b                   	pop    ebx
c0022b30:	5e                   	pop    esi
c0022b31:	5f                   	pop    edi
c0022b32:	c3                   	ret    
c0022b33:	90                   	nop

c0022b34 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022b34:	57                   	push   edi
c0022b35:	56                   	push   esi
c0022b36:	53                   	push   ebx
c0022b37:	31 db                	xor    ebx,ebx
c0022b39:	83 ec 10             	sub    esp,0x10
c0022b3c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022b40:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022b44:	0f 8d cb 00 00 00    	jge    c0022c15 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022b4a:	83 ec 0c             	sub    esp,0xc
c0022b4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022b51:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022b54:	e8 96 63 00 00       	call   c0028eef <__extendsfdf2>
c0022b59:	83 c4 10             	add    esp,0x10
c0022b5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b64:	68 00 00 f0 3f       	push   0x3ff00000
c0022b69:	6a 00                	push   0x0
c0022b6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b73:	e8 03 53 00 00       	call   c0027e7b <__adddf3>
c0022b78:	83 c4 10             	add    esp,0x10
c0022b7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b83:	68 00 00 e0 3f       	push   0x3fe00000
c0022b88:	6a 00                	push   0x0
c0022b8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b92:	e8 61 59 00 00       	call   c00284f8 <__muldf3>
c0022b97:	83 c4 10             	add    esp,0x10
c0022b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ba2:	68 00 00 60 40       	push   0x40600000
c0022ba7:	6a 00                	push   0x0
c0022ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bb1:	e8 42 59 00 00       	call   c00284f8 <__muldf3>
c0022bb6:	59                   	pop    ecx
c0022bb7:	5f                   	pop    edi
c0022bb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022bbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022bc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022bc8:	e8 fe 61 00 00       	call   c0028dcb <__truncdfsf2>
c0022bcd:	5a                   	pop    edx
c0022bce:	89 c7                	mov    edi,eax
c0022bd0:	59                   	pop    ecx
c0022bd1:	68 00 00 fe 42       	push   0x42fe0000
c0022bd6:	50                   	push   eax
c0022bd7:	e8 99 52 00 00       	call   c0027e75 <__gesf2>
c0022bdc:	83 c4 10             	add    esp,0x10
c0022bdf:	85 c0                	test   eax,eax
c0022be1:	78 06                	js     c0022be9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022be3:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022be7:	eb 26                	jmp    c0022c0f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022be9:	50                   	push   eax
c0022bea:	50                   	push   eax
c0022beb:	6a 00                	push   0x0
c0022bed:	57                   	push   edi
c0022bee:	e8 86 52 00 00       	call   c0027e79 <__lesf2>
c0022bf3:	83 c4 10             	add    esp,0x10
c0022bf6:	85 c0                	test   eax,eax
c0022bf8:	7f 06                	jg     c0022c00 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022bfa:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022bfe:	eb 0f                	jmp    c0022c0f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022c00:	83 ec 0c             	sub    esp,0xc
c0022c03:	57                   	push   edi
c0022c04:	e8 83 63 00 00       	call   c0028f8c <lrintf>
c0022c09:	83 c4 10             	add    esp,0x10
c0022c0c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022c0f:	43                   	inc    ebx
c0022c10:	e9 2b ff ff ff       	jmp    c0022b40 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022c15:	83 c4 10             	add    esp,0x10
c0022c18:	5b                   	pop    ebx
c0022c19:	5e                   	pop    esi
c0022c1a:	5f                   	pop    edi
c0022c1b:	c3                   	ret    

c0022c1c <SoundDevice::getAudio(int, float*, float*)>:
c0022c1c:	55                   	push   ebp
c0022c1d:	57                   	push   edi
c0022c1e:	56                   	push   esi
c0022c1f:	53                   	push   ebx
c0022c20:	83 ec 28             	sub    esp,0x28
c0022c23:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022c27:	68 1c d5 02 c0       	push   0xc002d51c
c0022c2c:	e8 b4 fd fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0022c31:	59                   	pop    ecx
c0022c32:	5e                   	pop    esi
c0022c33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022c37:	68 33 d5 02 c0       	push   0xc002d533
c0022c3c:	e8 a4 fd fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0022c41:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022c45:	83 c4 0c             	add    esp,0xc
c0022c48:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022c4f:	56                   	push   esi
c0022c50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022c54:	68 55 d5 02 c0       	push   0xc002d555
c0022c59:	e8 87 fd fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0022c5e:	83 c4 0c             	add    esp,0xc
c0022c61:	56                   	push   esi
c0022c62:	31 f6                	xor    esi,esi
c0022c64:	6a 00                	push   0x0
c0022c66:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022c6a:	e8 e1 da fd ff       	call   c0000750 <memset>
c0022c6f:	83 c4 10             	add    esp,0x10
c0022c72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c7a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022c82:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022c89:	85 c0                	test   eax,eax
c0022c8b:	0f 84 d7 00 00 00    	je     c0022d68 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022c91:	83 ec 0c             	sub    esp,0xc
c0022c94:	50                   	push   eax
c0022c95:	e8 a8 f9 ff ff       	call   c0022642 <SoundChannel::getBufferSize()>
c0022c9a:	5f                   	pop    edi
c0022c9b:	5d                   	pop    ebp
c0022c9c:	50                   	push   eax
c0022c9d:	68 79 d5 02 c0       	push   0xc002d579
c0022ca2:	e8 3e fd fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0022ca7:	58                   	pop    eax
c0022ca8:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022caf:	e8 86 f9 ff ff       	call   c002263a <SoundChannel::getBufferUsed()>
c0022cb4:	5a                   	pop    edx
c0022cb5:	59                   	pop    ecx
c0022cb6:	50                   	push   eax
c0022cb7:	68 8c d5 02 c0       	push   0xc002d58c
c0022cbc:	e8 24 fd fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0022cc1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022cc5:	99                   	cdq    
c0022cc6:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022ccc:	50                   	push   eax
c0022ccd:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022cd3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022cd7:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022cde:	e8 67 f9 ff ff       	call   c002264a <SoundChannel::unbuffer(float*, int, int)>
c0022ce3:	83 c4 14             	add    esp,0x14
c0022ce6:	89 c5                	mov    ebp,eax
c0022ce8:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022cef:	e8 46 f9 ff ff       	call   c002263a <SoundChannel::getBufferUsed()>
c0022cf4:	5f                   	pop    edi
c0022cf5:	5a                   	pop    edx
c0022cf6:	50                   	push   eax
c0022cf7:	68 a4 d5 02 c0       	push   0xc002d5a4
c0022cfc:	e8 e4 fc fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0022d01:	56                   	push   esi
c0022d02:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022d06:	99                   	cdq    
c0022d07:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022d0d:	50                   	push   eax
c0022d0e:	55                   	push   ebp
c0022d0f:	68 bc d5 02 c0       	push   0xc002d5bc
c0022d14:	e8 cc fc fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0022d19:	83 c4 20             	add    esp,0x20
c0022d1c:	31 c0                	xor    eax,eax
c0022d1e:	39 e8                	cmp    eax,ebp
c0022d20:	7d 1e                	jge    c0022d40 <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022d22:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022d28:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022d2c:	0f af d0             	imul   edx,eax
c0022d2f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022d32:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022d36:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022d3a:	40                   	inc    eax
c0022d3b:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022d3e:	eb de                	jmp    c0022d1e <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022d40:	50                   	push   eax
c0022d41:	50                   	push   eax
c0022d42:	55                   	push   ebp
c0022d43:	68 e9 d5 02 c0       	push   0xc002d5e9
c0022d48:	e8 98 fc fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0022d4d:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022d51:	5a                   	pop    edx
c0022d52:	59                   	pop    ecx
c0022d53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022d57:	68 fa d5 02 c0       	push   0xc002d5fa
c0022d5c:	e8 84 fc fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0022d61:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022d65:	83 c4 10             	add    esp,0x10
c0022d68:	46                   	inc    esi
c0022d69:	83 fe 20             	cmp    esi,0x20
c0022d6c:	0f 85 10 ff ff ff    	jne    c0022c82 <SoundDevice::getAudio(int, float*, float*)+0x66>
c0022d72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022d76:	83 c4 1c             	add    esp,0x1c
c0022d79:	5b                   	pop    ebx
c0022d7a:	5e                   	pop    esi
c0022d7b:	5f                   	pop    edi
c0022d7c:	5d                   	pop    ebp
c0022d7d:	c3                   	ret    

c0022d7e <PCI::open(int, int, void*)>:
c0022d7e:	83 ec 18             	sub    esp,0x18
c0022d81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022d89:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022d8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022d91:	50                   	push   eax
c0022d92:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022d95:	31 c0                	xor    eax,eax
c0022d97:	83 c4 1c             	add    esp,0x1c
c0022d9a:	c3                   	ret    
c0022d9b:	90                   	nop

c0022d9c <PCI::close(int, int, void*)>:
c0022d9c:	31 c0                	xor    eax,eax
c0022d9e:	c3                   	ret    
c0022d9f:	90                   	nop

c0022da0 <PCI::PCI()>:
c0022da0:	83 ec 0c             	sub    esp,0xc
c0022da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da7:	83 ec 08             	sub    esp,0x8
c0022daa:	68 48 d6 02 c0       	push   0xc002d648
c0022daf:	50                   	push   eax
c0022db0:	e8 d1 08 ff ff       	call   c0013686 <Bus::Bus(char const*)>
c0022db5:	83 c4 10             	add    esp,0x10
c0022db8:	ba 5c d7 02 c0       	mov    edx,0xc002d75c
c0022dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dc1:	89 10                	mov    DWORD PTR [eax],edx
c0022dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dc7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd5:	a3 a4 35 03 c0       	mov    ds:0xc00335a4,eax
c0022dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dde:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022de4:	0f b6 d0             	movzx  edx,al
c0022de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022deb:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022df6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022dfc:	0f b6 d0             	movzx  edx,al
c0022dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e03:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022e08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022e12:	8d 50 01             	lea    edx,[eax+0x1]
c0022e15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e19:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022e1f:	0f b6 d0             	movzx  edx,al
c0022e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e26:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022e2a:	83 c9 c0             	or     ecx,0xffffffc0
c0022e2d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022e31:	90                   	nop
c0022e32:	83 c4 0c             	add    esp,0xc
c0022e35:	c3                   	ret    

c0022e36 <PCI::readBAR8(unsigned int, int)>:
c0022e36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e3e:	f6 c2 01             	test   dl,0x1
c0022e41:	74 07                	je     c0022e4a <PCI::readBAR8(unsigned int, int)+0x14>
c0022e43:	83 e2 fc             	and    edx,0xfffffffc
c0022e46:	01 c2                	add    edx,eax
c0022e48:	ec                   	in     al,dx
c0022e49:	c3                   	ret    
c0022e4a:	83 e2 f0             	and    edx,0xfffffff0
c0022e4d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022e50:	c3                   	ret    
c0022e51:	90                   	nop

c0022e52 <PCI::readBAR16(unsigned int, int)>:
c0022e52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e5a:	f6 c2 01             	test   dl,0x1
c0022e5d:	74 08                	je     c0022e67 <PCI::readBAR16(unsigned int, int)+0x15>
c0022e5f:	83 e2 fc             	and    edx,0xfffffffc
c0022e62:	01 c2                	add    edx,eax
c0022e64:	66 ed                	in     ax,dx
c0022e66:	c3                   	ret    
c0022e67:	83 e2 f0             	and    edx,0xfffffff0
c0022e6a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022e6e:	c3                   	ret    
c0022e6f:	90                   	nop

c0022e70 <PCI::readBAR32(unsigned int, int)>:
c0022e70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e78:	f6 c2 01             	test   dl,0x1
c0022e7b:	74 07                	je     c0022e84 <PCI::readBAR32(unsigned int, int)+0x14>
c0022e7d:	83 e2 fc             	and    edx,0xfffffffc
c0022e80:	01 c2                	add    edx,eax
c0022e82:	ed                   	in     eax,dx
c0022e83:	c3                   	ret    
c0022e84:	83 e2 f0             	and    edx,0xfffffff0
c0022e87:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022e8a:	c3                   	ret    
c0022e8b:	90                   	nop

c0022e8c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022e8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022e90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022e98:	f6 c2 01             	test   dl,0x1
c0022e9b:	74 07                	je     c0022ea4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022e9d:	83 e2 fc             	and    edx,0xfffffffc
c0022ea0:	01 ca                	add    edx,ecx
c0022ea2:	ee                   	out    dx,al
c0022ea3:	c3                   	ret    
c0022ea4:	83 e2 f0             	and    edx,0xfffffff0
c0022ea7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022eaa:	c3                   	ret    
c0022eab:	90                   	nop

c0022eac <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022eac:	57                   	push   edi
c0022ead:	56                   	push   esi
c0022eae:	53                   	push   ebx
c0022eaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022eb3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022eb7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022ebb:	f6 c2 01             	test   dl,0x1
c0022ebe:	74 24                	je     c0022ee4 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022ec0:	89 d3                	mov    ebx,edx
c0022ec2:	83 e3 fc             	and    ebx,0xfffffffc
c0022ec5:	50                   	push   eax
c0022ec6:	0f b7 c7             	movzx  eax,di
c0022ec9:	50                   	push   eax
c0022eca:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022ecd:	50                   	push   eax
c0022ece:	68 50 d6 02 c0       	push   0xc002d650
c0022ed3:	e8 0d fb fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0022ed8:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022edb:	89 f8                	mov    eax,edi
c0022edd:	66 ef                	out    dx,ax
c0022edf:	83 c4 10             	add    esp,0x10
c0022ee2:	eb 07                	jmp    c0022eeb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022ee4:	83 e2 f0             	and    edx,0xfffffff0
c0022ee7:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022eeb:	5b                   	pop    ebx
c0022eec:	5e                   	pop    esi
c0022eed:	5f                   	pop    edi
c0022eee:	c3                   	ret    
c0022eef:	90                   	nop

c0022ef0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022ef0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022ef4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022ef8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022efc:	f6 c2 01             	test   dl,0x1
c0022eff:	74 07                	je     c0022f08 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022f01:	83 e2 fc             	and    edx,0xfffffffc
c0022f04:	01 ca                	add    edx,ecx
c0022f06:	ef                   	out    dx,eax
c0022f07:	c3                   	ret    
c0022f08:	83 e2 f0             	and    edx,0xfffffff0
c0022f0b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022f0e:	c3                   	ret    
c0022f0f:	90                   	nop

c0022f10 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022f10:	55                   	push   ebp
c0022f11:	57                   	push   edi
c0022f12:	56                   	push   esi
c0022f13:	53                   	push   ebx
c0022f14:	83 ec 0c             	sub    esp,0xc
c0022f17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022f1b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022f1f:	89 f0                	mov    eax,esi
c0022f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022f25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f29:	3c 07                	cmp    al,0x7
c0022f2b:	76 10                	jbe    c0022f3d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022f2d:	83 ec 0c             	sub    esp,0xc
c0022f30:	68 67 d6 02 c0       	push   0xc002d667
c0022f35:	e8 cb 74 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0022f3a:	83 c4 10             	add    esp,0x10
c0022f3d:	80 fb 0f             	cmp    bl,0xf
c0022f40:	76 10                	jbe    c0022f52 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022f42:	83 ec 0c             	sub    esp,0xc
c0022f45:	68 97 d6 02 c0       	push   0xc002d697
c0022f4a:	e8 b6 74 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0022f4f:	83 c4 10             	add    esp,0x10
c0022f52:	8d 04 36             	lea    eax,[esi+esi*1]
c0022f55:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022f5a:	83 c8 f0             	or     eax,0xfffffff0
c0022f5d:	ee                   	out    dx,al
c0022f5e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022f63:	89 e8                	mov    eax,ebp
c0022f65:	ee                   	out    dx,al
c0022f66:	83 c4 0c             	add    esp,0xc
c0022f69:	89 d8                	mov    eax,ebx
c0022f6b:	66 81 e7 fc 00       	and    di,0xfc
c0022f70:	5b                   	pop    ebx
c0022f71:	c1 e0 08             	shl    eax,0x8
c0022f74:	5e                   	pop    esi
c0022f75:	09 f8                	or     eax,edi
c0022f77:	5f                   	pop    edi
c0022f78:	66 0d 00 c0          	or     ax,0xc000
c0022f7c:	5d                   	pop    ebp
c0022f7d:	c3                   	ret    

c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022f7e:	57                   	push   edi
c0022f7f:	56                   	push   esi
c0022f80:	53                   	push   ebx
c0022f81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022f85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f89:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022f8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022f93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022f97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022f9b:	83 ff 01             	cmp    edi,0x1
c0022f9e:	75 3e                	jne    c0022fde <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022fa0:	89 de                	mov    esi,ebx
c0022fa2:	0f b6 c0             	movzx  eax,al
c0022fa5:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022fab:	c1 e0 10             	shl    eax,0x10
c0022fae:	0f b6 c9             	movzx  ecx,cl
c0022fb1:	09 f0                	or     eax,esi
c0022fb3:	c1 e1 08             	shl    ecx,0x8
c0022fb6:	0f b6 d2             	movzx  edx,dl
c0022fb9:	09 c8                	or     eax,ecx
c0022fbb:	c1 e2 0b             	shl    edx,0xb
c0022fbe:	09 d0                	or     eax,edx
c0022fc0:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022fc5:	0d 00 00 00 80       	or     eax,0x80000000
c0022fca:	ef                   	out    dx,eax
c0022fcb:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022fd0:	ed                   	in     eax,dx
c0022fd1:	83 e3 02             	and    ebx,0x2
c0022fd4:	0f b6 cb             	movzx  ecx,bl
c0022fd7:	c1 e1 03             	shl    ecx,0x3
c0022fda:	d3 e8                	shr    eax,cl
c0022fdc:	eb 43                	jmp    c0023021 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022fde:	83 ff 02             	cmp    edi,0x2
c0022fe1:	75 2c                	jne    c002300f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022fe3:	83 ec 0c             	sub    esp,0xc
c0022fe6:	0f b6 c9             	movzx  ecx,cl
c0022fe9:	0f b6 d2             	movzx  edx,dl
c0022fec:	0f b6 fb             	movzx  edi,bl
c0022fef:	0f b6 c0             	movzx  eax,al
c0022ff2:	57                   	push   edi
c0022ff3:	51                   	push   ecx
c0022ff4:	52                   	push   edx
c0022ff5:	50                   	push   eax
c0022ff6:	56                   	push   esi
c0022ff7:	e8 14 ff ff ff       	call   c0022f10 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ffc:	89 c2                	mov    edx,eax
c0022ffe:	ed                   	in     eax,dx
c0022fff:	83 e3 02             	and    ebx,0x2
c0023002:	83 c4 20             	add    esp,0x20
c0023005:	0f b6 cb             	movzx  ecx,bl
c0023008:	c1 e1 03             	shl    ecx,0x3
c002300b:	d3 e8                	shr    eax,cl
c002300d:	eb 12                	jmp    c0023021 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002300f:	83 ec 0c             	sub    esp,0xc
c0023012:	68 c7 d6 02 c0       	push   0xc002d6c7
c0023017:	e8 e9 73 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c002301c:	83 c4 10             	add    esp,0x10
c002301f:	31 c0                	xor    eax,eax
c0023021:	5b                   	pop    ebx
c0023022:	5e                   	pop    esi
c0023023:	5f                   	pop    edi
c0023024:	c3                   	ret    
c0023025:	90                   	nop

c0023026 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0023026:	83 ec 18             	sub    esp,0x18
c0023029:	6a 00                	push   0x0
c002302b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023030:	50                   	push   eax
c0023031:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023036:	50                   	push   eax
c0023037:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002303c:	50                   	push   eax
c002303d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023041:	e8 38 ff ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023046:	83 c4 2c             	add    esp,0x2c
c0023049:	c3                   	ret    

c002304a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002304a:	83 ec 18             	sub    esp,0x18
c002304d:	6a 0e                	push   0xe
c002304f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023054:	50                   	push   eax
c0023055:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002305a:	50                   	push   eax
c002305b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023060:	50                   	push   eax
c0023061:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023065:	e8 14 ff ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002306a:	83 c4 2c             	add    esp,0x2c
c002306d:	0f b6 c0             	movzx  eax,al
c0023070:	c3                   	ret    
c0023071:	90                   	nop

c0023072 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0023072:	55                   	push   ebp
c0023073:	57                   	push   edi
c0023074:	56                   	push   esi
c0023075:	53                   	push   ebx
c0023076:	83 ec 18             	sub    esp,0x18
c0023079:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002307e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0023083:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0023088:	6a 0a                	push   0xa
c002308a:	56                   	push   esi
c002308b:	55                   	push   ebp
c002308c:	57                   	push   edi
c002308d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023091:	e8 e8 fe ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023096:	83 c4 14             	add    esp,0x14
c0023099:	89 c3                	mov    ebx,eax
c002309b:	6a 0a                	push   0xa
c002309d:	0f b6 db             	movzx  ebx,bl
c00230a0:	56                   	push   esi
c00230a1:	55                   	push   ebp
c00230a2:	57                   	push   edi
c00230a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00230a7:	e8 d2 fe ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230ac:	83 c4 2c             	add    esp,0x2c
c00230af:	25 00 ff 00 00       	and    eax,0xff00
c00230b4:	09 d8                	or     eax,ebx
c00230b6:	5b                   	pop    ebx
c00230b7:	5e                   	pop    esi
c00230b8:	5f                   	pop    edi
c00230b9:	5d                   	pop    ebp
c00230ba:	c3                   	ret    
c00230bb:	90                   	nop

c00230bc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00230bc:	83 ec 18             	sub    esp,0x18
c00230bf:	6a 08                	push   0x8
c00230c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230c6:	50                   	push   eax
c00230c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230cc:	50                   	push   eax
c00230cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230d2:	50                   	push   eax
c00230d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00230d7:	e8 a2 fe ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230dc:	83 c4 2c             	add    esp,0x2c
c00230df:	0f b6 c4             	movzx  eax,ah
c00230e2:	c3                   	ret    
c00230e3:	90                   	nop

c00230e4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00230e4:	83 ec 18             	sub    esp,0x18
c00230e7:	6a 08                	push   0x8
c00230e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230ee:	50                   	push   eax
c00230ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230f4:	50                   	push   eax
c00230f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00230fa:	50                   	push   eax
c00230fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00230ff:	e8 7a fe ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023104:	83 c4 2c             	add    esp,0x2c
c0023107:	c3                   	ret    

c0023108 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023108:	83 ec 18             	sub    esp,0x18
c002310b:	6a 3c                	push   0x3c
c002310d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023112:	50                   	push   eax
c0023113:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023118:	50                   	push   eax
c0023119:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002311e:	50                   	push   eax
c002311f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023123:	e8 56 fe ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023128:	83 c4 2c             	add    esp,0x2c
c002312b:	c3                   	ret    

c002312c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002312c:	83 ec 18             	sub    esp,0x18
c002312f:	6a 18                	push   0x18
c0023131:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023136:	50                   	push   eax
c0023137:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002313c:	50                   	push   eax
c002313d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023142:	50                   	push   eax
c0023143:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023147:	e8 32 fe ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002314c:	83 c4 2c             	add    esp,0x2c
c002314f:	0f b6 c4             	movzx  eax,ah
c0023152:	c3                   	ret    
c0023153:	90                   	nop

c0023154 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023154:	55                   	push   ebp
c0023155:	57                   	push   edi
c0023156:	56                   	push   esi
c0023157:	53                   	push   ebx
c0023158:	83 ec 28             	sub    esp,0x28
c002315b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002315f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0023164:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0023169:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002316e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023175:	8d 43 12             	lea    eax,[ebx+0x12]
c0023178:	83 c3 10             	add    ebx,0x10
c002317b:	0f b6 c0             	movzx  eax,al
c002317e:	0f b6 db             	movzx  ebx,bl
c0023181:	50                   	push   eax
c0023182:	51                   	push   ecx
c0023183:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0023187:	57                   	push   edi
c0023188:	55                   	push   ebp
c0023189:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002318d:	e8 ec fd ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023192:	83 c4 14             	add    esp,0x14
c0023195:	89 c6                	mov    esi,eax
c0023197:	53                   	push   ebx
c0023198:	c1 e6 10             	shl    esi,0x10
c002319b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002319f:	51                   	push   ecx
c00231a0:	57                   	push   edi
c00231a1:	55                   	push   ebp
c00231a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00231a6:	e8 d3 fd ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231ab:	83 c4 3c             	add    esp,0x3c
c00231ae:	0f b7 c0             	movzx  eax,ax
c00231b1:	5b                   	pop    ebx
c00231b2:	09 f0                	or     eax,esi
c00231b4:	5e                   	pop    esi
c00231b5:	5f                   	pop    edi
c00231b6:	5d                   	pop    ebp
c00231b7:	c3                   	ret    

c00231b8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00231b8:	55                   	push   ebp
c00231b9:	57                   	push   edi
c00231ba:	56                   	push   esi
c00231bb:	53                   	push   ebx
c00231bc:	83 ec 0c             	sub    esp,0xc
c00231bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00231c3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00231c7:	89 f5                	mov    ebp,esi
c00231c9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00231cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00231d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00231d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00231db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00231df:	83 f9 01             	cmp    ecx,0x1
c00231e2:	75 5d                	jne    c0023241 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00231e4:	0f b6 c8             	movzx  ecx,al
c00231e7:	0f b6 d2             	movzx  edx,dl
c00231ea:	c1 e1 10             	shl    ecx,0x10
c00231ed:	c1 e2 0b             	shl    edx,0xb
c00231f0:	89 f0                	mov    eax,esi
c00231f2:	25 fc 00 00 00       	and    eax,0xfc
c00231f7:	09 c1                	or     ecx,eax
c00231f9:	89 e8                	mov    eax,ebp
c00231fb:	0f b6 c0             	movzx  eax,al
c00231fe:	c1 e0 08             	shl    eax,0x8
c0023201:	09 c1                	or     ecx,eax
c0023203:	09 d1                	or     ecx,edx
c0023205:	ba f8 0c 00 00       	mov    edx,0xcf8
c002320a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023210:	89 c8                	mov    eax,ecx
c0023212:	ef                   	out    dx,eax
c0023213:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023218:	ed                   	in     eax,dx
c0023219:	0f b7 db             	movzx  ebx,bx
c002321c:	83 e6 02             	and    esi,0x2
c002321f:	74 0a                	je     c002322b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0023221:	0f b7 d0             	movzx  edx,ax
c0023224:	c1 e3 10             	shl    ebx,0x10
c0023227:	09 d3                	or     ebx,edx
c0023229:	eb 05                	jmp    c0023230 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002322b:	66 31 c0             	xor    ax,ax
c002322e:	09 c3                	or     ebx,eax
c0023230:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023235:	89 c8                	mov    eax,ecx
c0023237:	ef                   	out    dx,eax
c0023238:	ba fc 0c 00 00       	mov    edx,0xcfc
c002323d:	89 d8                	mov    eax,ebx
c002323f:	eb 41                	jmp    c0023282 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0023241:	83 f9 02             	cmp    ecx,0x2
c0023244:	75 45                	jne    c002328b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0023246:	83 ec 0c             	sub    esp,0xc
c0023249:	0f b6 d2             	movzx  edx,dl
c002324c:	89 f1                	mov    ecx,esi
c002324e:	0f b6 c0             	movzx  eax,al
c0023251:	0f b6 f1             	movzx  esi,cl
c0023254:	89 e9                	mov    ecx,ebp
c0023256:	56                   	push   esi
c0023257:	0f b6 c9             	movzx  ecx,cl
c002325a:	51                   	push   ecx
c002325b:	52                   	push   edx
c002325c:	50                   	push   eax
c002325d:	57                   	push   edi
c002325e:	e8 ad fc ff ff       	call   c0022f10 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023263:	89 c2                	mov    edx,eax
c0023265:	ed                   	in     eax,dx
c0023266:	83 c4 20             	add    esp,0x20
c0023269:	0f b7 db             	movzx  ebx,bx
c002326c:	f6 c2 02             	test   dl,0x2
c002326f:	74 0c                	je     c002327d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0023271:	0f b7 c8             	movzx  ecx,ax
c0023274:	89 d8                	mov    eax,ebx
c0023276:	c1 e0 10             	shl    eax,0x10
c0023279:	09 c8                	or     eax,ecx
c002327b:	eb 05                	jmp    c0023282 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002327d:	66 31 c0             	xor    ax,ax
c0023280:	09 d8                	or     eax,ebx
c0023282:	ef                   	out    dx,eax
c0023283:	83 c4 0c             	add    esp,0xc
c0023286:	5b                   	pop    ebx
c0023287:	5e                   	pop    esi
c0023288:	5f                   	pop    edi
c0023289:	5d                   	pop    ebp
c002328a:	c3                   	ret    
c002328b:	c7 44 24 20 c7 d6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d6c7
c0023293:	83 c4 0c             	add    esp,0xc
c0023296:	5b                   	pop    ebx
c0023297:	5e                   	pop    esi
c0023298:	5f                   	pop    edi
c0023299:	5d                   	pop    ebp
c002329a:	e9 66 71 ff ff       	jmp    c001a405 <Krnl::panic(char const*)>
c002329f:	90                   	nop

c00232a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00232a0:	55                   	push   ebp
c00232a1:	57                   	push   edi
c00232a2:	56                   	push   esi
c00232a3:	53                   	push   ebx
c00232a4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00232aa:	80 3d b0 35 03 c0 00 	cmp    BYTE PTR ds:0xc00335b0,0x0
c00232b1:	0f 85 96 00 00 00    	jne    c002334d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c00232b7:	83 ec 0c             	sub    esp,0xc
c00232ba:	68 14 01 00 00       	push   0x114
c00232bf:	e8 3e c6 fe ff       	call   c000f902 <malloc>
c00232c4:	83 c4 0c             	add    esp,0xc
c00232c7:	89 c3                	mov    ebx,eax
c00232c9:	ff 35 b0 27 03 c0    	push   DWORD PTR ds:0xc00327b0
c00232cf:	68 cd d6 02 c0       	push   0xc002d6cd
c00232d4:	50                   	push   eax
c00232d5:	e8 6a fc fe ff       	call   c0012f44 <File::File(char const*, Process*)>
c00232da:	5a                   	pop    edx
c00232db:	59                   	pop    ecx
c00232dc:	6a 01                	push   0x1
c00232de:	53                   	push   ebx
c00232df:	e8 c4 fc fe ff       	call   c0012fa8 <File::open(FileOpenMode)>
c00232e4:	83 c4 0c             	add    esp,0xc
c00232e7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00232eb:	50                   	push   eax
c00232ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c00232f0:	50                   	push   eax
c00232f1:	53                   	push   ebx
c00232f2:	e8 5d ff fe ff       	call   c0013254 <File::stat(unsigned long long*, bool*)>
c00232f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00232fb:	40                   	inc    eax
c00232fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00232ff:	e8 fe c5 fe ff       	call   c000f902 <malloc>
c0023304:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023308:	a3 ac 35 03 c0       	mov    ds:0xc00335ac,eax
c002330d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0023311:	5e                   	pop    esi
c0023312:	8b 13                	mov    edx,DWORD PTR [ebx]
c0023314:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0023318:	51                   	push   ecx
c0023319:	50                   	push   eax
c002331a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002331e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023322:	53                   	push   ebx
c0023323:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0023326:	83 c4 14             	add    esp,0x14
c0023329:	53                   	push   ebx
c002332a:	e8 d7 fc fe ff       	call   c0013006 <File::close()>
c002332f:	5f                   	pop    edi
c0023330:	5d                   	pop    ebp
c0023331:	ff 35 ac 35 03 c0    	push   DWORD PTR ds:0xc00335ac
c0023337:	68 e6 d6 02 c0       	push   0xc002d6e6
c002333c:	e8 a4 f6 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0023341:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023345:	83 c4 10             	add    esp,0x10
c0023348:	a3 a8 35 03 c0       	mov    ds:0xc00335a8,eax
c002334d:	a1 a8 35 03 c0       	mov    eax,ds:0xc00335a8
c0023352:	8b 15 ac 35 03 c0    	mov    edx,DWORD PTR ds:0xc00335ac
c0023358:	89 04 24             	mov    DWORD PTR [esp],eax
c002335b:	31 ff                	xor    edi,edi
c002335d:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023365:	31 f6                	xor    esi,esi
c0023367:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c002336c:	31 db                	xor    ebx,ebx
c002336e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0023376:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002337b:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023382:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0023386:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002338d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0023391:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023394:	0f 8e 6b 01 00 00    	jle    c0023505 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002339a:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002339d:	d4 40                	aam    0x40
c002339f:	d5 39                	aad    0x39
c00233a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00233a5:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00233a9:	d4 40                	aam    0x40
c00233ab:	d5 39                	aad    0x39
c00233ad:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00233b1:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00233b5:	d4 40                	aam    0x40
c00233b7:	d5 39                	aad    0x39
c00233b9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00233bd:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00233c1:	d4 40                	aam    0x40
c00233c3:	d5 39                	aad    0x39
c00233c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00233c9:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00233cd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00233d1:	3c 56                	cmp    al,0x56
c00233d3:	74 45                	je     c002341a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c00233d5:	d4 40                	aam    0x40
c00233d7:	d5 39                	aad    0x39
c00233d9:	8d 48 d0             	lea    ecx,[eax-0x30]
c00233dc:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00233e0:	0f b6 c9             	movzx  ecx,cl
c00233e3:	c1 e1 04             	shl    ecx,0x4
c00233e6:	d4 40                	aam    0x40
c00233e8:	d5 39                	aad    0x39
c00233ea:	8d 58 d0             	lea    ebx,[eax-0x30]
c00233ed:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00233f1:	0f b6 db             	movzx  ebx,bl
c00233f4:	09 cb                	or     ebx,ecx
c00233f6:	c1 e3 04             	shl    ebx,0x4
c00233f9:	d4 40                	aam    0x40
c00233fb:	d5 39                	aad    0x39
c00233fd:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023400:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0023404:	0f b6 c9             	movzx  ecx,cl
c0023407:	09 cb                	or     ebx,ecx
c0023409:	c1 e3 04             	shl    ebx,0x4
c002340c:	89 d9                	mov    ecx,ebx
c002340e:	d4 40                	aam    0x40
c0023410:	d5 39                	aad    0x39
c0023412:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023415:	0f b6 db             	movzx  ebx,bl
c0023418:	09 cb                	or     ebx,ecx
c002341a:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c002341e:	80 f9 44             	cmp    cl,0x44
c0023421:	74 47                	je     c002346a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c0023423:	88 c8                	mov    al,cl
c0023425:	d4 40                	aam    0x40
c0023427:	d5 39                	aad    0x39
c0023429:	83 e8 30             	sub    eax,0x30
c002342c:	0f b6 e8             	movzx  ebp,al
c002342f:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0023433:	c1 e5 04             	shl    ebp,0x4
c0023436:	d4 40                	aam    0x40
c0023438:	d5 39                	aad    0x39
c002343a:	83 e8 30             	sub    eax,0x30
c002343d:	0f b6 f0             	movzx  esi,al
c0023440:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0023444:	09 ee                	or     esi,ebp
c0023446:	c1 e6 04             	shl    esi,0x4
c0023449:	d4 40                	aam    0x40
c002344b:	d5 39                	aad    0x39
c002344d:	83 e8 30             	sub    eax,0x30
c0023450:	0f b6 e8             	movzx  ebp,al
c0023453:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0023457:	09 ee                	or     esi,ebp
c0023459:	c1 e6 04             	shl    esi,0x4
c002345c:	89 f5                	mov    ebp,esi
c002345e:	d4 40                	aam    0x40
c0023460:	d5 39                	aad    0x39
c0023462:	83 e8 30             	sub    eax,0x30
c0023465:	0f b6 f0             	movzx  esi,al
c0023468:	09 ee                	or     esi,ebp
c002346a:	83 c7 10             	add    edi,0x10
c002346d:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0023471:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023474:	3c 0a                	cmp    al,0xa
c0023476:	74 09                	je     c0023481 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c0023478:	45                   	inc    ebp
c0023479:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002347c:	75 16                	jne    c0023494 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c002347e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023481:	3c 0a                	cmp    al,0xa
c0023483:	0f 94 c0             	sete   al
c0023486:	0f b6 c0             	movzx  eax,al
c0023489:	01 c7                	add    edi,eax
c002348b:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0023490:	75 0c                	jne    c002349e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c0023492:	eb 15                	jmp    c00234a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0023494:	47                   	inc    edi
c0023495:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023498:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002349c:	eb d3                	jmp    c0023471 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c002349e:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00234a3:	0f 85 e8 fe ff ff    	jne    c0023391 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00234a9:	80 f9 44             	cmp    cl,0x44
c00234ac:	74 0b                	je     c00234b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c00234ae:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00234b3:	0f 85 d8 fe ff ff    	jne    c0023391 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00234b9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00234bd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00234c1:	c1 e1 04             	shl    ecx,0x4
c00234c4:	83 e8 30             	sub    eax,0x30
c00234c7:	09 c8                	or     eax,ecx
c00234c9:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00234cd:	0f 85 be fe ff ff    	jne    c0023391 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00234d3:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00234d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00234db:	c1 e1 04             	shl    ecx,0x4
c00234de:	83 e8 30             	sub    eax,0x30
c00234e1:	09 c8                	or     eax,ecx
c00234e3:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00234e7:	0f 85 a4 fe ff ff    	jne    c0023391 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00234ed:	50                   	push   eax
c00234ee:	50                   	push   eax
c00234ef:	8d 44 24 28          	lea    eax,[esp+0x28]
c00234f3:	50                   	push   eax
c00234f4:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00234fb:	e8 0c d3 fd ff       	call   c000080c <strcpy>
c0023500:	83 c4 10             	add    esp,0x10
c0023503:	eb 15                	jmp    c002351a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c0023505:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002350c:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0023517:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002351a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023521:	81 c4 2c 01 00 00    	add    esp,0x12c
c0023527:	5b                   	pop    ebx
c0023528:	5e                   	pop    esi
c0023529:	5f                   	pop    edi
c002352a:	5d                   	pop    ebp
c002352b:	c3                   	ret    

c002352c <PCI::checkBus(unsigned char)>:
c002352c:	56                   	push   esi
c002352d:	53                   	push   ebx
c002352e:	31 db                	xor    ebx,ebx
c0023530:	51                   	push   ecx
c0023531:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023536:	52                   	push   edx
c0023537:	53                   	push   ebx
c0023538:	43                   	inc    ebx
c0023539:	56                   	push   esi
c002353a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002353e:	e8 37 03 00 00       	call   c002387a <PCI::checkDevice(unsigned char, unsigned char)>
c0023543:	83 c4 10             	add    esp,0x10
c0023546:	83 fb 20             	cmp    ebx,0x20
c0023549:	75 eb                	jne    c0023536 <PCI::checkBus(unsigned char)+0xa>
c002354b:	58                   	pop    eax
c002354c:	5b                   	pop    ebx
c002354d:	5e                   	pop    esi
c002354e:	c3                   	ret    
c002354f:	90                   	nop

c0023550 <PCI::foundDevice(PCIDeviceInfo)>:
c0023550:	55                   	push   ebp
c0023551:	57                   	push   edi
c0023552:	56                   	push   esi
c0023553:	53                   	push   ebx
c0023554:	83 ec 1c             	sub    esp,0x1c
c0023557:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002355b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023561:	0f 84 52 01 00 00    	je     c00236b9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023567:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002356b:	66 81 f9 06 04       	cmp    cx,0x406
c0023570:	75 2c                	jne    c002359e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023572:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023577:	50                   	push   eax
c0023578:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002357d:	50                   	push   eax
c002357e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023583:	50                   	push   eax
c0023584:	56                   	push   esi
c0023585:	e8 a2 fb ff ff       	call   c002312c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002358a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002358e:	0f b6 c0             	movzx  eax,al
c0023591:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023595:	83 c4 2c             	add    esp,0x2c
c0023598:	5b                   	pop    ebx
c0023599:	5e                   	pop    esi
c002359a:	5f                   	pop    edi
c002359b:	5d                   	pop    ebp
c002359c:	eb 8e                	jmp    c002352c <PCI::checkBus(unsigned char)>
c002359e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00235a2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00235a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00235ac:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00235b0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00235b4:	88 d3                	mov    bl,dl
c00235b6:	85 c0                	test   eax,eax
c00235b8:	74 33                	je     c00235ed <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00235ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00235bd:	85 d2                	test   edx,edx
c00235bf:	74 28                	je     c00235e9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00235c1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00235c7:	31 ef                	xor    edi,ebp
c00235c9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00235cf:	75 18                	jne    c00235e9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00235d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00235d5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00235db:	75 0c                	jne    c00235e9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00235dd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00235e3:	0f 84 d0 00 00 00    	je     c00236b9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00235e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00235eb:	eb c9                	jmp    c00235b6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00235ed:	66 81 f9 01 06       	cmp    cx,0x601
c00235f2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00235f6:	75 19                	jne    c0023611 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00235f8:	83 ec 0c             	sub    esp,0xc
c00235fb:	68 64 01 00 00       	push   0x164
c0023600:	e8 fd c2 fe ff       	call   c000f902 <malloc>
c0023605:	89 c5                	mov    ebp,eax
c0023607:	89 04 24             	mov    DWORD PTR [esp],eax
c002360a:	e8 a1 0f 00 00       	call   c00245b0 <SATABus::SATABus()>
c002360f:	eb 1e                	jmp    c002362f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023611:	66 81 f9 01 01       	cmp    cx,0x101
c0023616:	75 60                	jne    c0023678 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023618:	83 ec 0c             	sub    esp,0xc
c002361b:	68 70 02 00 00       	push   0x270
c0023620:	e8 dd c2 fe ff       	call   c000f902 <malloc>
c0023625:	89 c5                	mov    ebp,eax
c0023627:	89 04 24             	mov    DWORD PTR [esp],eax
c002362a:	e8 0f 03 00 00       	call   c002393e <IDE::IDE()>
c002362f:	58                   	pop    eax
c0023630:	5a                   	pop    edx
c0023631:	55                   	push   ebp
c0023632:	56                   	push   esi
c0023633:	e8 e6 07 ff ff       	call   c0013e1e <Device::addChild(Device*)>
c0023638:	83 ec 1c             	sub    esp,0x1c
c002363b:	b9 09 00 00 00       	mov    ecx,0x9
c0023640:	fc                   	cld    
c0023641:	89 e7                	mov    edi,esp
c0023643:	89 de                	mov    esi,ebx
c0023645:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023647:	55                   	push   ebp
c0023648:	e8 e3 06 ff ff       	call   c0013d30 <Device::preOpenPCI(PCIDeviceInfo)>
c002364d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023650:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023654:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002365c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023664:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002366c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002366f:	83 c4 4c             	add    esp,0x4c
c0023672:	5b                   	pop    ebx
c0023673:	5e                   	pop    esi
c0023674:	5f                   	pop    edi
c0023675:	5d                   	pop    ebp
c0023676:	ff e0                	jmp    eax
c0023678:	83 ec 0c             	sub    esp,0xc
c002367b:	68 58 01 00 00       	push   0x158
c0023680:	e8 7d c2 fe ff       	call   c000f902 <malloc>
c0023685:	89 c5                	mov    ebp,eax
c0023687:	58                   	pop    eax
c0023688:	5a                   	pop    edx
c0023689:	68 f8 d6 02 c0       	push   0xc002d6f8
c002368e:	55                   	push   ebp
c002368f:	e8 94 0a ff ff       	call   c0014128 <DriverlessDevice::DriverlessDevice(char const*)>
c0023694:	59                   	pop    ecx
c0023695:	5f                   	pop    edi
c0023696:	55                   	push   ebp
c0023697:	56                   	push   esi
c0023698:	e8 81 07 ff ff       	call   c0013e1e <Device::addChild(Device*)>
c002369d:	b9 09 00 00 00       	mov    ecx,0x9
c00236a2:	fc                   	cld    
c00236a3:	89 df                	mov    edi,ebx
c00236a5:	89 de                	mov    esi,ebx
c00236a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00236a9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00236ad:	83 c4 2c             	add    esp,0x2c
c00236b0:	5b                   	pop    ebx
c00236b1:	5e                   	pop    esi
c00236b2:	5f                   	pop    edi
c00236b3:	5d                   	pop    ebp
c00236b4:	e9 77 06 ff ff       	jmp    c0013d30 <Device::preOpenPCI(PCIDeviceInfo)>
c00236b9:	83 c4 1c             	add    esp,0x1c
c00236bc:	5b                   	pop    ebx
c00236bd:	5e                   	pop    esi
c00236be:	5f                   	pop    edi
c00236bf:	5d                   	pop    ebp
c00236c0:	c3                   	ret    
c00236c1:	90                   	nop

c00236c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00236c2:	55                   	push   ebp
c00236c3:	57                   	push   edi
c00236c4:	56                   	push   esi
c00236c5:	53                   	push   ebx
c00236c6:	83 ec 68             	sub    esp,0x68
c00236c9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00236cd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00236d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00236d8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00236df:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c00236e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00236e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00236ef:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00236f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00236f8:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c00236fd:	6a 0c                	push   0xc
c00236ff:	57                   	push   edi
c0023700:	53                   	push   ebx
c0023701:	56                   	push   esi
c0023702:	55                   	push   ebp
c0023703:	e8 76 f8 ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023708:	83 c4 20             	add    esp,0x20
c002370b:	57                   	push   edi
c002370c:	53                   	push   ebx
c002370d:	56                   	push   esi
c002370e:	55                   	push   ebp
c002370f:	e8 5e f9 ff ff       	call   c0023072 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023714:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0023719:	57                   	push   edi
c002371a:	53                   	push   ebx
c002371b:	56                   	push   esi
c002371c:	55                   	push   ebp
c002371d:	e8 e6 f9 ff ff       	call   c0023108 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023722:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0023726:	83 c4 14             	add    esp,0x14
c0023729:	6a 3c                	push   0x3c
c002372b:	57                   	push   edi
c002372c:	53                   	push   ebx
c002372d:	56                   	push   esi
c002372e:	55                   	push   ebp
c002372f:	e8 4a f8 ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023734:	0f b6 c4             	movzx  eax,ah
c0023737:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002373b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002373f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0023743:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0023748:	83 c4 20             	add    esp,0x20
c002374b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023751:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023758:	74 7c                	je     c00237d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002375a:	31 c0                	xor    eax,eax
c002375c:	8b 15 68 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f268
c0023762:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023768:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c002376e:	7e 66                	jle    c00237d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023770:	8d 14 c2             	lea    edx,[edx+eax*8]
c0023773:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002377a:	39 cb                	cmp    ebx,ecx
c002377c:	75 55                	jne    c00237d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002377e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023785:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023789:	75 48                	jne    c00237d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002378b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002378f:	83 ec 0c             	sub    esp,0xc
c0023792:	68 12 d7 02 c0       	push   0xc002d712
c0023797:	e8 49 f2 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002379c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00237a0:	8b 15 68 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f268
c00237a6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00237aa:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00237b0:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c00237b8:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00237bc:	52                   	push   edx
c00237bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237c1:	53                   	push   ebx
c00237c2:	68 37 d7 02 c0       	push   0xc002d737
c00237c7:	e8 19 f2 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00237cc:	83 c4 20             	add    esp,0x20
c00237cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00237d3:	40                   	inc    eax
c00237d4:	eb 86                	jmp    c002375c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00237d6:	31 d2                	xor    edx,edx
c00237d8:	83 ec 0c             	sub    esp,0xc
c00237db:	57                   	push   edi
c00237dc:	53                   	push   ebx
c00237dd:	56                   	push   esi
c00237de:	52                   	push   edx
c00237df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00237e3:	55                   	push   ebp
c00237e4:	e8 6b f9 ff ff       	call   c0023154 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00237e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00237ed:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00237f1:	42                   	inc    edx
c00237f2:	83 c4 20             	add    esp,0x20
c00237f5:	83 fa 06             	cmp    edx,0x6
c00237f8:	75 de                	jne    c00237d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c00237fa:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00237ff:	83 ec 0c             	sub    esp,0xc
c0023802:	86 e0                	xchg   al,ah
c0023804:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023809:	6a 02                	push   0x2
c002380b:	57                   	push   edi
c002380c:	53                   	push   ebx
c002380d:	56                   	push   esi
c002380e:	55                   	push   ebp
c002380f:	e8 6a f7 ff ff       	call   c0022f7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023814:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023819:	83 c4 20             	add    esp,0x20
c002381c:	57                   	push   edi
c002381d:	53                   	push   ebx
c002381e:	56                   	push   esi
c002381f:	55                   	push   ebp
c0023820:	e8 97 f8 ff ff       	call   c00230bc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023825:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023829:	57                   	push   edi
c002382a:	53                   	push   ebx
c002382b:	56                   	push   esi
c002382c:	55                   	push   ebp
c002382d:	e8 f4 f7 ff ff       	call   c0023026 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023832:	b9 09 00 00 00       	mov    ecx,0x9
c0023837:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002383c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0023840:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0023844:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023848:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002384c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023850:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0023854:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023858:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002385c:	83 ec 0c             	sub    esp,0xc
c002385f:	fc                   	cld    
c0023860:	89 e7                	mov    edi,esp
c0023862:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023866:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023868:	55                   	push   ebp
c0023869:	e8 e2 fc ff ff       	call   c0023550 <PCI::foundDevice(PCIDeviceInfo)>
c002386e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023874:	5b                   	pop    ebx
c0023875:	5e                   	pop    esi
c0023876:	5f                   	pop    edi
c0023877:	5d                   	pop    ebp
c0023878:	c3                   	ret    
c0023879:	90                   	nop

c002387a <PCI::checkDevice(unsigned char, unsigned char)>:
c002387a:	55                   	push   ebp
c002387b:	57                   	push   edi
c002387c:	56                   	push   esi
c002387d:	53                   	push   ebx
c002387e:	83 ec 0c             	sub    esp,0xc
c0023881:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023885:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002388a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002388f:	6a 00                	push   0x0
c0023891:	56                   	push   esi
c0023892:	57                   	push   edi
c0023893:	55                   	push   ebp
c0023894:	e8 8d f7 ff ff       	call   c0023026 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023899:	6a 00                	push   0x0
c002389b:	56                   	push   esi
c002389c:	57                   	push   edi
c002389d:	55                   	push   ebp
c002389e:	e8 1f fe ff ff       	call   c00236c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00238a3:	83 c4 20             	add    esp,0x20
c00238a6:	6a 00                	push   0x0
c00238a8:	56                   	push   esi
c00238a9:	57                   	push   edi
c00238aa:	55                   	push   ebp
c00238ab:	e8 9a f7 ff ff       	call   c002304a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00238b0:	83 c4 10             	add    esp,0x10
c00238b3:	84 c0                	test   al,al
c00238b5:	79 27                	jns    c00238de <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00238b7:	bb 01 00 00 00       	mov    ebx,0x1
c00238bc:	53                   	push   ebx
c00238bd:	56                   	push   esi
c00238be:	57                   	push   edi
c00238bf:	55                   	push   ebp
c00238c0:	e8 61 f7 ff ff       	call   c0023026 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00238c5:	83 c4 10             	add    esp,0x10
c00238c8:	66 40                	inc    ax
c00238ca:	74 0c                	je     c00238d8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00238cc:	53                   	push   ebx
c00238cd:	56                   	push   esi
c00238ce:	57                   	push   edi
c00238cf:	55                   	push   ebp
c00238d0:	e8 ed fd ff ff       	call   c00236c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00238d5:	83 c4 10             	add    esp,0x10
c00238d8:	43                   	inc    ebx
c00238d9:	83 fb 08             	cmp    ebx,0x8
c00238dc:	75 de                	jne    c00238bc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00238de:	83 c4 0c             	add    esp,0xc
c00238e1:	5b                   	pop    ebx
c00238e2:	5e                   	pop    esi
c00238e3:	5f                   	pop    edi
c00238e4:	5d                   	pop    ebp
c00238e5:	c3                   	ret    

c00238e6 <PCI::detect()>:
c00238e6:	56                   	push   esi
c00238e7:	53                   	push   ebx
c00238e8:	53                   	push   ebx
c00238e9:	31 db                	xor    ebx,ebx
c00238eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00238ef:	6a 00                	push   0x0
c00238f1:	6a 00                	push   0x0
c00238f3:	6a 00                	push   0x0
c00238f5:	56                   	push   esi
c00238f6:	e8 4f f7 ff ff       	call   c002304a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00238fb:	83 c4 10             	add    esp,0x10
c00238fe:	a8 80                	test   al,0x80
c0023900:	75 21                	jne    c0023923 <PCI::detect()+0x3d>
c0023902:	51                   	push   ecx
c0023903:	51                   	push   ecx
c0023904:	6a 00                	push   0x0
c0023906:	56                   	push   esi
c0023907:	e8 20 fc ff ff       	call   c002352c <PCI::checkBus(unsigned char)>
c002390c:	83 c4 10             	add    esp,0x10
c002390f:	eb 24                	jmp    c0023935 <PCI::detect()+0x4f>
c0023911:	52                   	push   edx
c0023912:	52                   	push   edx
c0023913:	53                   	push   ebx
c0023914:	43                   	inc    ebx
c0023915:	56                   	push   esi
c0023916:	e8 11 fc ff ff       	call   c002352c <PCI::checkBus(unsigned char)>
c002391b:	83 c4 10             	add    esp,0x10
c002391e:	83 fb 08             	cmp    ebx,0x8
c0023921:	74 12                	je     c0023935 <PCI::detect()+0x4f>
c0023923:	53                   	push   ebx
c0023924:	6a 00                	push   0x0
c0023926:	6a 00                	push   0x0
c0023928:	56                   	push   esi
c0023929:	e8 f8 f6 ff ff       	call   c0023026 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002392e:	83 c4 10             	add    esp,0x10
c0023931:	66 40                	inc    ax
c0023933:	74 dc                	je     c0023911 <PCI::detect()+0x2b>
c0023935:	58                   	pop    eax
c0023936:	5b                   	pop    ebx
c0023937:	5e                   	pop    esi
c0023938:	c3                   	ret    
c0023939:	90                   	nop

c002393a <IDE::close(int, int, void*)>:
c002393a:	83 c8 ff             	or     eax,0xffffffff
c002393d:	c3                   	ret    

c002393e <IDE::IDE()>:
c002393e:	83 ec 0c             	sub    esp,0xc
c0023941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023945:	83 ec 08             	sub    esp,0x8
c0023948:	68 80 d7 02 c0       	push   0xc002d780
c002394d:	50                   	push   eax
c002394e:	e8 79 08 ff ff       	call   c00141cc <HardDiskController::HardDiskController(char const*)>
c0023953:	83 c4 10             	add    esp,0x10
c0023956:	ba c0 d9 02 c0       	mov    edx,0xc002d9c0
c002395b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002395f:	89 10                	mov    DWORD PTR [eax],edx
c0023961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023965:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002396c:	90                   	nop
c002396d:	83 c4 0c             	add    esp,0xc
c0023970:	c3                   	ret    
c0023971:	90                   	nop

c0023972 <IDE::prepareInterrupt(unsigned char)>:
c0023972:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023977:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002397b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023983:	c3                   	ret    

c0023984 <selectDrive(unsigned char, unsigned char)>:
c0023984:	c3                   	ret    
c0023985:	90                   	nop

c0023986 <IDE::getBase(unsigned char)>:
c0023986:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002398b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002398f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023997:	c3                   	ret    

c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023998:	55                   	push   ebp
c0023999:	57                   	push   edi
c002399a:	56                   	push   esi
c002399b:	53                   	push   ebx
c002399c:	83 ec 1c             	sub    esp,0x1c
c002399f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00239a3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00239a7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00239aa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00239ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00239b2:	80 f9 03             	cmp    cl,0x3
c00239b5:	77 51                	ja     c0023a08 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00239b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00239bb:	0f b6 f2             	movzx  esi,dl
c00239be:	0f b6 db             	movzx  ebx,bl
c00239c1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00239c4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00239c8:	83 ca 80             	or     edx,0xffffff80
c00239cb:	0f b6 d2             	movzx  edx,dl
c00239ce:	52                   	push   edx
c00239cf:	6a 0c                	push   0xc
c00239d1:	56                   	push   esi
c00239d2:	57                   	push   edi
c00239d3:	e8 c0 ff ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239d8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00239dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00239e1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00239e5:	ee                   	out    dx,al
c00239e6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00239eb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00239ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00239f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00239f7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00239ff:	83 c4 2c             	add    esp,0x2c
c0023a02:	5b                   	pop    ebx
c0023a03:	5e                   	pop    esi
c0023a04:	5f                   	pop    edi
c0023a05:	5d                   	pop    ebp
c0023a06:	eb 90                	jmp    c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a08:	80 fb 07             	cmp    bl,0x7
c0023a0b:	77 12                	ja     c0023a1f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023a0d:	0f b6 d2             	movzx  edx,dl
c0023a10:	0f b6 db             	movzx  ebx,bl
c0023a13:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023a1b:	89 da                	mov    edx,ebx
c0023a1d:	eb 2f                	jmp    c0023a4e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023a1f:	80 fb 0d             	cmp    bl,0xd
c0023a22:	77 13                	ja     c0023a37 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023a24:	0f b6 d2             	movzx  edx,dl
c0023a27:	0f b6 db             	movzx  ebx,bl
c0023a2a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023a31:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023a35:	eb 17                	jmp    c0023a4e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023a37:	80 fb 15             	cmp    bl,0x15
c0023a3a:	77 13                	ja     c0023a4f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023a3c:	0f b6 d2             	movzx  edx,dl
c0023a3f:	0f b6 db             	movzx  ebx,bl
c0023a42:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023a4a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023a4e:	ee                   	out    dx,al
c0023a4f:	83 c4 1c             	add    esp,0x1c
c0023a52:	5b                   	pop    ebx
c0023a53:	5e                   	pop    esi
c0023a54:	5f                   	pop    edi
c0023a55:	5d                   	pop    ebp
c0023a56:	c3                   	ret    
c0023a57:	90                   	nop

c0023a58 <IDE::read(unsigned char, unsigned char)>:
c0023a58:	55                   	push   ebp
c0023a59:	57                   	push   edi
c0023a5a:	56                   	push   esi
c0023a5b:	53                   	push   ebx
c0023a5c:	83 ec 1c             	sub    esp,0x1c
c0023a5f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023a63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023a67:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023a6a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023a6e:	3c 03                	cmp    al,0x3
c0023a70:	77 43                	ja     c0023ab5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023a72:	0f b6 f2             	movzx  esi,dl
c0023a75:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023a78:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023a7c:	83 c8 80             	or     eax,0xffffff80
c0023a7f:	0f b6 c0             	movzx  eax,al
c0023a82:	50                   	push   eax
c0023a83:	6a 0c                	push   0xc
c0023a85:	56                   	push   esi
c0023a86:	57                   	push   edi
c0023a87:	e8 0c ff ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a8c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023a91:	0f b6 c3             	movzx  eax,bl
c0023a94:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023a98:	ec                   	in     al,dx
c0023a99:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a9d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023aa2:	52                   	push   edx
c0023aa3:	6a 0c                	push   0xc
c0023aa5:	56                   	push   esi
c0023aa6:	57                   	push   edi
c0023aa7:	e8 ec fe ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023aac:	83 c4 20             	add    esp,0x20
c0023aaf:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023ab3:	eb 49                	jmp    c0023afe <IDE::read(unsigned char, unsigned char)+0xa6>
c0023ab5:	80 fb 07             	cmp    bl,0x7
c0023ab8:	77 12                	ja     c0023acc <IDE::read(unsigned char, unsigned char)+0x74>
c0023aba:	0f b6 d2             	movzx  edx,dl
c0023abd:	0f b6 c3             	movzx  eax,bl
c0023ac0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023ac8:	89 c2                	mov    edx,eax
c0023aca:	eb 31                	jmp    c0023afd <IDE::read(unsigned char, unsigned char)+0xa5>
c0023acc:	80 fb 0d             	cmp    bl,0xd
c0023acf:	77 13                	ja     c0023ae4 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023ad1:	0f b6 d2             	movzx  edx,dl
c0023ad4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023adb:	0f b6 d3             	movzx  edx,bl
c0023ade:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023ae2:	eb 19                	jmp    c0023afd <IDE::read(unsigned char, unsigned char)+0xa5>
c0023ae4:	31 c0                	xor    eax,eax
c0023ae6:	80 fb 15             	cmp    bl,0x15
c0023ae9:	77 13                	ja     c0023afe <IDE::read(unsigned char, unsigned char)+0xa6>
c0023aeb:	0f b6 d2             	movzx  edx,dl
c0023aee:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023af6:	0f b6 d3             	movzx  edx,bl
c0023af9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023afd:	ec                   	in     al,dx
c0023afe:	83 c4 1c             	add    esp,0x1c
c0023b01:	5b                   	pop    ebx
c0023b02:	5e                   	pop    esi
c0023b03:	5f                   	pop    edi
c0023b04:	5d                   	pop    ebp
c0023b05:	c3                   	ret    

c0023b06 <IDE::waitInterrupt(unsigned char)>:
c0023b06:	55                   	push   ebp
c0023b07:	57                   	push   edi
c0023b08:	56                   	push   esi
c0023b09:	53                   	push   ebx
c0023b0a:	31 db                	xor    ebx,ebx
c0023b0c:	83 ec 0c             	sub    esp,0xc
c0023b0f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023b13:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023b18:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023b20:	89 e8                	mov    eax,ebp
c0023b22:	84 c0                	test   al,al
c0023b24:	75 34                	jne    c0023b5a <IDE::waitInterrupt(unsigned char)+0x54>
c0023b26:	52                   	push   edx
c0023b27:	6a 0c                	push   0xc
c0023b29:	56                   	push   esi
c0023b2a:	57                   	push   edi
c0023b2b:	e8 28 ff ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0023b30:	83 c4 10             	add    esp,0x10
c0023b33:	a8 01                	test   al,0x1
c0023b35:	75 2b                	jne    c0023b62 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023b37:	f6 c3 04             	test   bl,0x4
c0023b3a:	75 16                	jne    c0023b52 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023b3c:	83 fb 32             	cmp    ebx,0x32
c0023b3f:	7e 11                	jle    c0023b52 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023b41:	50                   	push   eax
c0023b42:	50                   	push   eax
c0023b43:	6a 00                	push   0x0
c0023b45:	68 80 96 98 00       	push   0x989680
c0023b4a:	e8 6c a9 ff ff       	call   c001e4bb <nanoSleep(unsigned long long)>
c0023b4f:	83 c4 10             	add    esp,0x10
c0023b52:	83 fb 3c             	cmp    ebx,0x3c
c0023b55:	74 0b                	je     c0023b62 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023b57:	43                   	inc    ebx
c0023b58:	eb be                	jmp    c0023b18 <IDE::waitInterrupt(unsigned char)+0x12>
c0023b5a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023b62:	83 c4 0c             	add    esp,0xc
c0023b65:	89 e8                	mov    eax,ebp
c0023b67:	5b                   	pop    ebx
c0023b68:	5e                   	pop    esi
c0023b69:	5f                   	pop    edi
c0023b6a:	5d                   	pop    ebp
c0023b6b:	c3                   	ret    

c0023b6c <ideChannel0IRQHandler(regs*, void*)>:
c0023b6c:	83 ec 10             	sub    esp,0x10
c0023b6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b73:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023b7a:	6a 07                	push   0x7
c0023b7c:	6a 00                	push   0x0
c0023b7e:	50                   	push   eax
c0023b7f:	e8 d4 fe ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0023b84:	83 c4 1c             	add    esp,0x1c
c0023b87:	c3                   	ret    

c0023b88 <ideChannel1IRQHandler(regs*, void*)>:
c0023b88:	83 ec 10             	sub    esp,0x10
c0023b8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b8f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023b96:	6a 07                	push   0x7
c0023b98:	6a 01                	push   0x1
c0023b9a:	50                   	push   eax
c0023b9b:	e8 b8 fe ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0023ba0:	83 c4 1c             	add    esp,0x1c
c0023ba3:	c3                   	ret    

c0023ba4 <IDE::enableIRQs(unsigned char, bool)>:
c0023ba4:	57                   	push   edi
c0023ba5:	56                   	push   esi
c0023ba6:	be 04 00 00 00       	mov    esi,0x4
c0023bab:	53                   	push   ebx
c0023bac:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023bb5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023bba:	0f 94 c0             	sete   al
c0023bbd:	d1 e0                	shl    eax,1
c0023bbf:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023bc6:	0f b6 c0             	movzx  eax,al
c0023bc9:	50                   	push   eax
c0023bca:	6a 0c                	push   0xc
c0023bcc:	57                   	push   edi
c0023bcd:	53                   	push   ebx
c0023bce:	e8 c5 fd ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023bd3:	83 c4 10             	add    esp,0x10
c0023bd6:	50                   	push   eax
c0023bd7:	6a 0c                	push   0xc
c0023bd9:	57                   	push   edi
c0023bda:	53                   	push   ebx
c0023bdb:	e8 78 fe ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0023be0:	83 c4 10             	add    esp,0x10
c0023be3:	4e                   	dec    esi
c0023be4:	75 f0                	jne    c0023bd6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023be6:	5b                   	pop    ebx
c0023be7:	5e                   	pop    esi
c0023be8:	5f                   	pop    edi
c0023be9:	c3                   	ret    

c0023bea <IDE::open(int, int, void*)>:
c0023bea:	55                   	push   ebp
c0023beb:	57                   	push   edi
c0023bec:	56                   	push   esi
c0023bed:	53                   	push   ebx
c0023bee:	83 ec 1c             	sub    esp,0x1c
c0023bf1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023bf5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023bfe:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023c07:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023c0e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023c15:	0f 85 b0 02 00 00    	jne    c0023ecb <IDE::open(int, int, void*)+0x2e1>
c0023c1b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023c21:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023c25:	83 e0 7f             	and    eax,0x7f
c0023c28:	3c 05                	cmp    al,0x5
c0023c2a:	74 04                	je     c0023c30 <IDE::open(int, int, void*)+0x46>
c0023c2c:	3c 0f                	cmp    al,0xf
c0023c2e:	75 32                	jne    c0023c62 <IDE::open(int, int, void*)+0x78>
c0023c30:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023c36:	83 e0 fc             	and    eax,0xfffffffc
c0023c39:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023c40:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023c46:	83 e0 fc             	and    eax,0xfffffffc
c0023c49:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023c50:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023c56:	83 e0 fc             	and    eax,0xfffffffc
c0023c59:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023c60:	eb 14                	jmp    c0023c76 <IDE::open(int, int, void*)+0x8c>
c0023c62:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023c6c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023c76:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023c7d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023c84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023c88:	89 c6                	mov    esi,eax
c0023c8a:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c8f:	c1 e6 10             	shl    esi,0x10
c0023c92:	89 e8                	mov    eax,ebp
c0023c94:	89 fa                	mov    edx,edi
c0023c96:	c1 e0 0b             	shl    eax,0xb
c0023c99:	09 f0                	or     eax,esi
c0023c9b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023ca2:	c1 e6 08             	shl    esi,0x8
c0023ca5:	09 c6                	or     esi,eax
c0023ca7:	89 f0                	mov    eax,esi
c0023ca9:	0d 08 00 00 80       	or     eax,0x80000008
c0023cae:	ef                   	out    dx,eax
c0023caf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023cb4:	89 ca                	mov    edx,ecx
c0023cb6:	ed                   	in     eax,dx
c0023cb7:	c1 e8 10             	shr    eax,0x10
c0023cba:	3d ff ff 00 00       	cmp    eax,0xffff
c0023cbf:	0f 84 f5 00 00 00    	je     c0023dba <IDE::open(int, int, void*)+0x1d0>
c0023cc5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023ccb:	89 fa                	mov    edx,edi
c0023ccd:	89 f0                	mov    eax,esi
c0023ccf:	ef                   	out    dx,eax
c0023cd0:	b0 fe                	mov    al,0xfe
c0023cd2:	89 ca                	mov    edx,ecx
c0023cd4:	ee                   	out    dx,al
c0023cd5:	89 f0                	mov    eax,esi
c0023cd7:	89 fa                	mov    edx,edi
c0023cd9:	ef                   	out    dx,eax
c0023cda:	89 ca                	mov    edx,ecx
c0023cdc:	ed                   	in     eax,dx
c0023cdd:	3c fe                	cmp    al,0xfe
c0023cdf:	0f 85 a9 00 00 00    	jne    c0023d8e <IDE::open(int, int, void*)+0x1a4>
c0023ce5:	8b 15 68 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f268
c0023ceb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023cf2:	74 33                	je     c0023d27 <IDE::open(int, int, void*)+0x13d>
c0023cf4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023cfa:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023cfe:	40                   	inc    eax
c0023cff:	83 ec 0c             	sub    esp,0xc
c0023d02:	0f b6 c0             	movzx  eax,al
c0023d05:	50                   	push   eax
c0023d06:	55                   	push   ebp
c0023d07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d0b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023d11:	51                   	push   ecx
c0023d12:	e8 b7 41 ff ff       	call   c0017ece <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023d17:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023d1c:	83 c4 1c             	add    esp,0x1c
c0023d1f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023d25:	eb 0a                	jmp    c0023d31 <IDE::open(int, int, void*)+0x147>
c0023d27:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023d31:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023d38:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023d3f:	c1 e1 10             	shl    ecx,0x10
c0023d42:	c1 e0 08             	shl    eax,0x8
c0023d45:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023d4a:	09 c1                	or     ecx,eax
c0023d4c:	89 fa                	mov    edx,edi
c0023d4e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023d55:	c1 e0 0b             	shl    eax,0xb
c0023d58:	09 c1                	or     ecx,eax
c0023d5a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023d60:	89 c8                	mov    eax,ecx
c0023d62:	ef                   	out    dx,eax
c0023d63:	be fc 0c 00 00       	mov    esi,0xcfc
c0023d68:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023d6e:	89 f2                	mov    edx,esi
c0023d70:	ee                   	out    dx,al
c0023d71:	89 c8                	mov    eax,ecx
c0023d73:	89 fa                	mov    edx,edi
c0023d75:	ef                   	out    dx,eax
c0023d76:	89 f2                	mov    edx,esi
c0023d78:	ed                   	in     eax,dx
c0023d79:	0f b6 c0             	movzx  eax,al
c0023d7c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023d82:	74 46                	je     c0023dca <IDE::open(int, int, void*)+0x1e0>
c0023d84:	83 ec 0c             	sub    esp,0xc
c0023d87:	68 98 d7 02 c0       	push   0xc002d798
c0023d8c:	eb 34                	jmp    c0023dc2 <IDE::open(int, int, void*)+0x1d8>
c0023d8e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023d97:	75 17                	jne    c0023db0 <IDE::open(int, int, void*)+0x1c6>
c0023d99:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023d9e:	74 07                	je     c0023da7 <IDE::open(int, int, void*)+0x1bd>
c0023da0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023da5:	75 09                	jne    c0023db0 <IDE::open(int, int, void*)+0x1c6>
c0023da7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023dae:	eb 1a                	jmp    c0023dca <IDE::open(int, int, void*)+0x1e0>
c0023db0:	83 ec 0c             	sub    esp,0xc
c0023db3:	68 a0 d7 02 c0       	push   0xc002d7a0
c0023db8:	eb 08                	jmp    c0023dc2 <IDE::open(int, int, void*)+0x1d8>
c0023dba:	83 ec 0c             	sub    esp,0xc
c0023dbd:	68 d1 d7 02 c0       	push   0xc002d7d1
c0023dc2:	e8 3e 66 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0023dc7:	83 c4 10             	add    esp,0x10
c0023dca:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023dd1:	79 1a                	jns    c0023ded <IDE::open(int, int, void*)+0x203>
c0023dd3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023dd9:	83 e0 fc             	and    eax,0xfffffffc
c0023ddc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023de3:	83 c0 08             	add    eax,0x8
c0023de6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023ded:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023df3:	89 c2                	mov    edx,eax
c0023df5:	83 e2 0f             	and    edx,0xf
c0023df8:	66 83 fa 08          	cmp    dx,0x8
c0023dfc:	75 0a                	jne    c0023e08 <IDE::open(int, int, void*)+0x21e>
c0023dfe:	83 e8 02             	sub    eax,0x2
c0023e01:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023e08:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023e0e:	89 c2                	mov    edx,eax
c0023e10:	83 e2 0f             	and    edx,0xf
c0023e13:	66 83 fa 08          	cmp    dx,0x8
c0023e17:	75 0a                	jne    c0023e23 <IDE::open(int, int, void*)+0x239>
c0023e19:	83 e8 02             	sub    eax,0x2
c0023e1c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023e23:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023e2a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023e31:	89 d0                	mov    eax,edx
c0023e33:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e36:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e3a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023e3e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023e41:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023e46:	0f b6 c9             	movzx  ecx,cl
c0023e49:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023e50:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023e53:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023e57:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023e5b:	8d 50 02             	lea    edx,[eax+0x2]
c0023e5e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023e63:	0f b6 d2             	movzx  edx,dl
c0023e66:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023e6c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023e6f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023e73:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023e77:	8d 48 03             	lea    ecx,[eax+0x3]
c0023e7a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023e7f:	0f b6 c9             	movzx  ecx,cl
c0023e82:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023e88:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023e8b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023e8f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023e93:	8d 50 04             	lea    edx,[eax+0x4]
c0023e96:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023e9c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023ea1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023ea8:	66 85 f6             	test   si,si
c0023eab:	74 3e                	je     c0023eeb <IDE::open(int, int, void*)+0x301>
c0023ead:	0f b6 d2             	movzx  edx,dl
c0023eb0:	83 c0 05             	add    eax,0x5
c0023eb3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023eb6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023eba:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023ebe:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023ec4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023ec9:	eb 20                	jmp    c0023eeb <IDE::open(int, int, void*)+0x301>
c0023ecb:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023ed5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023edf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023ee6:	e9 02 ff ff ff       	jmp    c0023ded <IDE::open(int, int, void*)+0x203>
c0023eeb:	52                   	push   edx
c0023eec:	52                   	push   edx
c0023eed:	6a 00                	push   0x0
c0023eef:	53                   	push   ebx
c0023ef0:	e8 7d fa ff ff       	call   c0023972 <IDE::prepareInterrupt(unsigned char)>
c0023ef5:	59                   	pop    ecx
c0023ef6:	5e                   	pop    esi
c0023ef7:	6a 01                	push   0x1
c0023ef9:	53                   	push   ebx
c0023efa:	e8 73 fa ff ff       	call   c0023972 <IDE::prepareInterrupt(unsigned char)>
c0023eff:	83 c4 0c             	add    esp,0xc
c0023f02:	6a 00                	push   0x0
c0023f04:	6a 00                	push   0x0
c0023f06:	53                   	push   ebx
c0023f07:	e8 98 fc ff ff       	call   c0023ba4 <IDE::enableIRQs(unsigned char, bool)>
c0023f0c:	83 c4 0c             	add    esp,0xc
c0023f0f:	6a 00                	push   0x0
c0023f11:	6a 01                	push   0x1
c0023f13:	53                   	push   ebx
c0023f14:	e8 8b fc ff ff       	call   c0023ba4 <IDE::enableIRQs(unsigned char, bool)>
c0023f19:	83 c4 10             	add    esp,0x10
c0023f1c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023f23:	74 40                	je     c0023f65 <IDE::open(int, int, void*)+0x37b>
c0023f25:	83 ec 0c             	sub    esp,0xc
c0023f28:	68 fb d7 02 c0       	push   0xc002d7fb
c0023f2d:	e8 b3 ea fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0023f32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f35:	6a 01                	push   0x1
c0023f37:	68 6c 3b 02 c0       	push   0xc0023b6c
c0023f3c:	6a 0e                	push   0xe
c0023f3e:	53                   	push   ebx
c0023f3f:	e8 52 fe fe ff       	call   c0013d96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f44:	83 c4 14             	add    esp,0x14
c0023f47:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023f4d:	53                   	push   ebx
c0023f4e:	6a 01                	push   0x1
c0023f50:	68 88 3b 02 c0       	push   0xc0023b88
c0023f55:	6a 0f                	push   0xf
c0023f57:	53                   	push   ebx
c0023f58:	e8 39 fe fe ff       	call   c0013d96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f5d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023f63:	eb 4a                	jmp    c0023faf <IDE::open(int, int, void*)+0x3c5>
c0023f65:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023f6f:	50                   	push   eax
c0023f70:	6a 0f                	push   0xf
c0023f72:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023f78:	68 17 d8 02 c0       	push   0xc002d817
c0023f7d:	e8 63 ea fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0023f82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f85:	6a 00                	push   0x0
c0023f87:	68 6c 3b 02 c0       	push   0xc0023b6c
c0023f8c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023f92:	53                   	push   ebx
c0023f93:	e8 fe fd fe ff       	call   c0013d96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023f98:	83 c4 14             	add    esp,0x14
c0023f9b:	53                   	push   ebx
c0023f9c:	6a 00                	push   0x0
c0023f9e:	68 88 3b 02 c0       	push   0xc0023b88
c0023fa3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023fa9:	53                   	push   ebx
c0023faa:	e8 e7 fd fe ff       	call   c0013d96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023faf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023fb1:	83 c4 20             	add    esp,0x20
c0023fb4:	83 ec 0c             	sub    esp,0xc
c0023fb7:	53                   	push   ebx
c0023fb8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023fbb:	83 c4 0c             	add    esp,0xc
c0023fbe:	6a 07                	push   0x7
c0023fc0:	6a 00                	push   0x0
c0023fc2:	53                   	push   ebx
c0023fc3:	e8 90 fa ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0023fc8:	83 c4 0c             	add    esp,0xc
c0023fcb:	6a 07                	push   0x7
c0023fcd:	6a 01                	push   0x1
c0023fcf:	53                   	push   ebx
c0023fd0:	e8 83 fa ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0023fd5:	83 c4 0c             	add    esp,0xc
c0023fd8:	6a 01                	push   0x1
c0023fda:	6a 00                	push   0x0
c0023fdc:	53                   	push   ebx
c0023fdd:	e8 c2 fb ff ff       	call   c0023ba4 <IDE::enableIRQs(unsigned char, bool)>
c0023fe2:	83 c4 0c             	add    esp,0xc
c0023fe5:	6a 01                	push   0x1
c0023fe7:	6a 01                	push   0x1
c0023fe9:	53                   	push   ebx
c0023fea:	e8 b5 fb ff ff       	call   c0023ba4 <IDE::enableIRQs(unsigned char, bool)>
c0023fef:	83 c4 2c             	add    esp,0x2c
c0023ff2:	31 c0                	xor    eax,eax
c0023ff4:	5b                   	pop    ebx
c0023ff5:	5e                   	pop    esi
c0023ff6:	5f                   	pop    edi
c0023ff7:	5d                   	pop    ebp
c0023ff8:	c3                   	ret    
c0023ff9:	90                   	nop

c0023ffa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023ffa:	55                   	push   ebp
c0023ffb:	57                   	push   edi
c0023ffc:	56                   	push   esi
c0023ffd:	53                   	push   ebx
c0023ffe:	83 ec 1c             	sub    esp,0x1c
c0024001:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0024005:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024009:	8d 50 f8             	lea    edx,[eax-0x8]
c002400c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024010:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0024014:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0024018:	80 fa 03             	cmp    dl,0x3
c002401b:	77 5d                	ja     c002407a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002401d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024021:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024025:	0f b6 db             	movzx  ebx,bl
c0024028:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002402b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002402f:	83 ca 80             	or     edx,0xffffff80
c0024032:	0f b6 d2             	movzx  edx,dl
c0024035:	52                   	push   edx
c0024036:	6a 0c                	push   0xc
c0024038:	53                   	push   ebx
c0024039:	56                   	push   esi
c002403a:	e8 59 f9 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002403f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0024044:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024048:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002404c:	0f b6 c0             	movzx  eax,al
c002404f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0024053:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0024055:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002405a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002405e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0024062:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0024066:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002406e:	83 c4 2c             	add    esp,0x2c
c0024071:	5b                   	pop    ebx
c0024072:	5e                   	pop    esi
c0024073:	5f                   	pop    edi
c0024074:	5d                   	pop    ebp
c0024075:	e9 1e f9 ff ff       	jmp    c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002407a:	3c 07                	cmp    al,0x7
c002407c:	77 10                	ja     c002408e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002407e:	0f b6 db             	movzx  ebx,bl
c0024081:	0f b6 d0             	movzx  edx,al
c0024084:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002408c:	eb 2d                	jmp    c00240bb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002408e:	3c 0d                	cmp    al,0xd
c0024090:	77 13                	ja     c00240a5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0024092:	0f b6 db             	movzx  ebx,bl
c0024095:	0f b6 c0             	movzx  eax,al
c0024098:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002409f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00240a3:	eb 16                	jmp    c00240bb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00240a5:	3c 15                	cmp    al,0x15
c00240a7:	77 14                	ja     c00240bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00240a9:	0f b6 db             	movzx  ebx,bl
c00240ac:	0f b6 c0             	movzx  eax,al
c00240af:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00240b7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00240bb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00240bd:	83 c4 1c             	add    esp,0x1c
c00240c0:	5b                   	pop    ebx
c00240c1:	5e                   	pop    esi
c00240c2:	5f                   	pop    edi
c00240c3:	5d                   	pop    ebp
c00240c4:	c3                   	ret    
c00240c5:	90                   	nop

c00240c6 <IDE::detect()>:
c00240c6:	55                   	push   ebp
c00240c7:	57                   	push   edi
c00240c8:	56                   	push   esi
c00240c9:	53                   	push   ebx
c00240ca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00240d0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00240d7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00240de:	0f 85 be 02 00 00    	jne    c00243a2 <IDE::detect()+0x2dc>
c00240e4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00240eb:	31 f6                	xor    esi,esi
c00240ed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00240f5:	31 ed                	xor    ebp,ebp
c00240f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00240fb:	c1 e0 06             	shl    eax,0x6
c00240fe:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0024106:	89 e8                	mov    eax,ebp
c0024108:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002410c:	c1 e0 04             	shl    eax,0x4
c002410f:	83 c8 a0             	or     eax,0xffffffa0
c0024112:	0f b6 c0             	movzx  eax,al
c0024115:	50                   	push   eax
c0024116:	6a 06                	push   0x6
c0024118:	56                   	push   esi
c0024119:	53                   	push   ebx
c002411a:	e8 79 f8 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002411f:	83 c4 0c             	add    esp,0xc
c0024122:	6a 0c                	push   0xc
c0024124:	56                   	push   esi
c0024125:	53                   	push   ebx
c0024126:	e8 2d f9 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c002412b:	83 c4 0c             	add    esp,0xc
c002412e:	6a 0c                	push   0xc
c0024130:	56                   	push   esi
c0024131:	53                   	push   ebx
c0024132:	e8 21 f9 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024137:	83 c4 0c             	add    esp,0xc
c002413a:	6a 0c                	push   0xc
c002413c:	56                   	push   esi
c002413d:	53                   	push   ebx
c002413e:	e8 15 f9 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024143:	83 c4 0c             	add    esp,0xc
c0024146:	6a 0c                	push   0xc
c0024148:	56                   	push   esi
c0024149:	53                   	push   ebx
c002414a:	e8 09 f9 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c002414f:	68 ec 00 00 00       	push   0xec
c0024154:	6a 07                	push   0x7
c0024156:	56                   	push   esi
c0024157:	53                   	push   ebx
c0024158:	e8 3b f8 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002415d:	83 c4 1c             	add    esp,0x1c
c0024160:	6a 0c                	push   0xc
c0024162:	56                   	push   esi
c0024163:	53                   	push   ebx
c0024164:	e8 ef f8 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024169:	83 c4 0c             	add    esp,0xc
c002416c:	6a 0c                	push   0xc
c002416e:	56                   	push   esi
c002416f:	53                   	push   ebx
c0024170:	e8 e3 f8 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024175:	83 c4 0c             	add    esp,0xc
c0024178:	6a 0c                	push   0xc
c002417a:	56                   	push   esi
c002417b:	53                   	push   ebx
c002417c:	e8 d7 f8 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024181:	83 c4 0c             	add    esp,0xc
c0024184:	6a 0c                	push   0xc
c0024186:	56                   	push   esi
c0024187:	53                   	push   ebx
c0024188:	e8 cb f8 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c002418d:	83 c4 0c             	add    esp,0xc
c0024190:	6a 0c                	push   0xc
c0024192:	56                   	push   esi
c0024193:	53                   	push   ebx
c0024194:	e8 bf f8 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024199:	83 c4 10             	add    esp,0x10
c002419c:	84 c0                	test   al,al
c002419e:	0f 84 8b 01 00 00    	je     c002432f <IDE::detect()+0x269>
c00241a4:	31 ff                	xor    edi,edi
c00241a6:	50                   	push   eax
c00241a7:	6a 0c                	push   0xc
c00241a9:	56                   	push   esi
c00241aa:	53                   	push   ebx
c00241ab:	e8 a8 f8 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c00241b0:	83 c4 10             	add    esp,0x10
c00241b3:	a8 01                	test   al,0x1
c00241b5:	0f 85 8e 01 00 00    	jne    c0024349 <IDE::detect()+0x283>
c00241bb:	84 c0                	test   al,al
c00241bd:	78 04                	js     c00241c3 <IDE::detect()+0xfd>
c00241bf:	a8 08                	test   al,0x8
c00241c1:	75 27                	jne    c00241ea <IDE::detect()+0x124>
c00241c3:	47                   	inc    edi
c00241c4:	81 ff 17 01 00 00    	cmp    edi,0x117
c00241ca:	7e da                	jle    c00241a6 <IDE::detect()+0xe0>
c00241cc:	50                   	push   eax
c00241cd:	50                   	push   eax
c00241ce:	6a 00                	push   0x0
c00241d0:	68 40 4b 4c 00       	push   0x4c4b40
c00241d5:	e8 e1 a2 ff ff       	call   c001e4bb <nanoSleep(unsigned long long)>
c00241da:	83 c4 10             	add    esp,0x10
c00241dd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00241e3:	75 c1                	jne    c00241a6 <IDE::detect()+0xe0>
c00241e5:	e9 5f 01 00 00       	jmp    c0024349 <IDE::detect()+0x283>
c00241ea:	31 c9                	xor    ecx,ecx
c00241ec:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00241f0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00241f4:	83 ec 0c             	sub    esp,0xc
c00241f7:	68 80 00 00 00       	push   0x80
c00241fc:	57                   	push   edi
c00241fd:	6a 00                	push   0x0
c00241ff:	56                   	push   esi
c0024200:	53                   	push   ebx
c0024201:	e8 f4 fd ff ff       	call   c0023ffa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024206:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002420b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002420f:	89 d1                	mov    ecx,edx
c0024211:	c1 e0 06             	shl    eax,0x6
c0024214:	01 d8                	add    eax,ebx
c0024216:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002421d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024224:	89 f2                	mov    edx,esi
c0024226:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002422c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024230:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024236:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002423a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024241:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024249:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024250:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024258:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002425e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024265:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002426b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002426f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024273:	83 c4 20             	add    esp,0x20
c0024276:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024279:	83 c0 02             	add    eax,0x2
c002427c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024282:	83 c7 02             	add    edi,0x2
c0024285:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024288:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002428e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024292:	75 e2                	jne    c0024276 <IDE::detect()+0x1b0>
c0024294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024298:	c1 e0 06             	shl    eax,0x6
c002429b:	01 d8                	add    eax,ebx
c002429d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00242a3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00242aa:	66 c1 ea 09          	shr    dx,0x9
c00242ae:	83 e2 01             	and    edx,0x1
c00242b1:	84 c9                	test   cl,cl
c00242b3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00242b9:	75 2f                	jne    c00242ea <IDE::detect()+0x224>
c00242bb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00242c1:	85 c0                	test   eax,eax
c00242c3:	74 66                	je     c002432b <IDE::detect()+0x265>
c00242c5:	50                   	push   eax
c00242c6:	55                   	push   ebp
c00242c7:	56                   	push   esi
c00242c8:	68 33 d8 02 c0       	push   0xc002d833
c00242cd:	e8 13 e7 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00242d2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00242d9:	e8 24 b6 fe ff       	call   c000f902 <malloc>
c00242de:	89 c7                	mov    edi,eax
c00242e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00242e3:	e8 78 06 00 00       	call   c0024960 <ATA::ATA()>
c00242e8:	eb 28                	jmp    c0024312 <IDE::detect()+0x24c>
c00242ea:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00242f0:	55                   	push   ebp
c00242f1:	56                   	push   esi
c00242f2:	68 62 d8 02 c0       	push   0xc002d862
c00242f7:	e8 e9 e6 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00242fc:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024303:	e8 fa b5 fe ff       	call   c000f902 <malloc>
c0024308:	89 c7                	mov    edi,eax
c002430a:	89 04 24             	mov    DWORD PTR [esp],eax
c002430d:	e8 56 0c 00 00       	call   c0024f68 <ATAPI::ATAPI()>
c0024312:	5a                   	pop    edx
c0024313:	59                   	pop    ecx
c0024314:	57                   	push   edi
c0024315:	53                   	push   ebx
c0024316:	e8 03 fb fe ff       	call   c0013e1e <Device::addChild(Device*)>
c002431b:	8b 07                	mov    eax,DWORD PTR [edi]
c002431d:	53                   	push   ebx
c002431e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024322:	6a 00                	push   0x0
c0024324:	57                   	push   edi
c0024325:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024328:	83 c4 20             	add    esp,0x20
c002432b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002432f:	4d                   	dec    ebp
c0024330:	74 0a                	je     c002433c <IDE::detect()+0x276>
c0024332:	bd 01 00 00 00       	mov    ebp,0x1
c0024337:	e9 bb fd ff ff       	jmp    c00240f7 <IDE::detect()+0x31>
c002433c:	4e                   	dec    esi
c002433d:	74 63                	je     c00243a2 <IDE::detect()+0x2dc>
c002433f:	be 01 00 00 00       	mov    esi,0x1
c0024344:	e9 ac fd ff ff       	jmp    c00240f5 <IDE::detect()+0x2f>
c0024349:	50                   	push   eax
c002434a:	6a 04                	push   0x4
c002434c:	56                   	push   esi
c002434d:	53                   	push   ebx
c002434e:	e8 05 f7 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024353:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024357:	83 c4 0c             	add    esp,0xc
c002435a:	6a 05                	push   0x5
c002435c:	56                   	push   esi
c002435d:	53                   	push   ebx
c002435e:	e8 f5 f6 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024363:	83 c4 10             	add    esp,0x10
c0024366:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002436a:	80 fa 14             	cmp    dl,0x14
c002436d:	75 04                	jne    c0024373 <IDE::detect()+0x2ad>
c002436f:	3c eb                	cmp    al,0xeb
c0024371:	eb 07                	jmp    c002437a <IDE::detect()+0x2b4>
c0024373:	3c 96                	cmp    al,0x96
c0024375:	75 b8                	jne    c002432f <IDE::detect()+0x269>
c0024377:	80 fa 69             	cmp    dl,0x69
c002437a:	75 b3                	jne    c002432f <IDE::detect()+0x269>
c002437c:	68 a1 00 00 00       	push   0xa1
c0024381:	6a 07                	push   0x7
c0024383:	56                   	push   esi
c0024384:	53                   	push   ebx
c0024385:	e8 0e f6 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002438a:	5f                   	pop    edi
c002438b:	58                   	pop    eax
c002438c:	6a 00                	push   0x0
c002438e:	68 40 42 0f 00       	push   0xf4240
c0024393:	e8 23 a1 ff ff       	call   c001e4bb <nanoSleep(unsigned long long)>
c0024398:	83 c4 10             	add    esp,0x10
c002439b:	b1 01                	mov    cl,0x1
c002439d:	e9 4a fe ff ff       	jmp    c00241ec <IDE::detect()+0x126>
c00243a2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00243a8:	5b                   	pop    ebx
c00243a9:	5e                   	pop    esi
c00243aa:	5f                   	pop    edi
c00243ab:	5d                   	pop    ebp
c00243ac:	c3                   	ret    
c00243ad:	90                   	nop

c00243ae <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00243ae:	55                   	push   ebp
c00243af:	57                   	push   edi
c00243b0:	56                   	push   esi
c00243b1:	53                   	push   ebx
c00243b2:	83 ec 1c             	sub    esp,0x1c
c00243b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00243b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00243bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00243c1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00243c5:	88 c3                	mov    bl,al
c00243c7:	84 c0                	test   al,al
c00243c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00243cd:	0f 84 67 01 00 00    	je     c002453a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00243d3:	83 ec 0c             	sub    esp,0xc
c00243d6:	68 93 d8 02 c0       	push   0xc002d893
c00243db:	e8 05 e6 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00243e0:	83 c4 10             	add    esp,0x10
c00243e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243e7:	3c 01                	cmp    al,0x1
c00243e9:	75 17                	jne    c0024402 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00243eb:	83 ec 0c             	sub    esp,0xc
c00243ee:	b3 13                	mov    bl,0x13
c00243f0:	68 9f d8 02 c0       	push   0xc002d89f
c00243f5:	e8 eb e5 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00243fa:	83 c4 10             	add    esp,0x10
c00243fd:	e9 25 01 00 00       	jmp    c0024527 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024402:	3c 02                	cmp    al,0x2
c0024404:	0f 85 ef 00 00 00    	jne    c00244f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002440a:	d1 e6                	shl    esi,1
c002440c:	09 ee                	or     esi,ebp
c002440e:	52                   	push   edx
c002440f:	89 f0                	mov    eax,esi
c0024411:	6a 01                	push   0x1
c0024413:	0f b6 f0             	movzx  esi,al
c0024416:	c1 e6 06             	shl    esi,0x6
c0024419:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024421:	50                   	push   eax
c0024422:	57                   	push   edi
c0024423:	e8 30 f6 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024428:	83 c4 10             	add    esp,0x10
c002442b:	89 c6                	mov    esi,eax
c002442d:	a8 01                	test   al,0x1
c002442f:	74 12                	je     c0024443 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024431:	83 ec 0c             	sub    esp,0xc
c0024434:	b3 07                	mov    bl,0x7
c0024436:	68 b4 d8 02 c0       	push   0xc002d8b4
c002443b:	e8 a5 e5 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0024440:	83 c4 10             	add    esp,0x10
c0024443:	f7 c6 02 00 00 00    	test   esi,0x2
c0024449:	74 12                	je     c002445d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002444b:	83 ec 0c             	sub    esp,0xc
c002444e:	b3 03                	mov    bl,0x3
c0024450:	68 d2 d8 02 c0       	push   0xc002d8d2
c0024455:	e8 8b e5 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002445a:	83 c4 10             	add    esp,0x10
c002445d:	f7 c6 04 00 00 00    	test   esi,0x4
c0024463:	74 12                	je     c0024477 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024465:	83 ec 0c             	sub    esp,0xc
c0024468:	b3 14                	mov    bl,0x14
c002446a:	68 f2 d8 02 c0       	push   0xc002d8f2
c002446f:	e8 71 e5 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0024474:	83 c4 10             	add    esp,0x10
c0024477:	f7 c6 08 00 00 00    	test   esi,0x8
c002447d:	74 12                	je     c0024491 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002447f:	83 ec 0c             	sub    esp,0xc
c0024482:	b3 03                	mov    bl,0x3
c0024484:	68 d2 d8 02 c0       	push   0xc002d8d2
c0024489:	e8 57 e5 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002448e:	83 c4 10             	add    esp,0x10
c0024491:	f7 c6 10 00 00 00    	test   esi,0x10
c0024497:	74 12                	je     c00244ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024499:	83 ec 0c             	sub    esp,0xc
c002449c:	b3 15                	mov    bl,0x15
c002449e:	68 0a d9 02 c0       	push   0xc002d90a
c00244a3:	e8 3d e5 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00244a8:	83 c4 10             	add    esp,0x10
c00244ab:	f7 c6 20 00 00 00    	test   esi,0x20
c00244b1:	74 12                	je     c00244c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00244b3:	83 ec 0c             	sub    esp,0xc
c00244b6:	b3 03                	mov    bl,0x3
c00244b8:	68 d2 d8 02 c0       	push   0xc002d8d2
c00244bd:	e8 23 e5 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00244c2:	83 c4 10             	add    esp,0x10
c00244c5:	f7 c6 40 00 00 00    	test   esi,0x40
c00244cb:	74 12                	je     c00244df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00244cd:	83 ec 0c             	sub    esp,0xc
c00244d0:	b3 16                	mov    bl,0x16
c00244d2:	68 24 d9 02 c0       	push   0xc002d924
c00244d7:	e8 09 e5 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00244dc:	83 c4 10             	add    esp,0x10
c00244df:	89 f0                	mov    eax,esi
c00244e1:	84 c0                	test   al,al
c00244e3:	79 42                	jns    c0024527 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00244e5:	83 ec 0c             	sub    esp,0xc
c00244e8:	b3 0d                	mov    bl,0xd
c00244ea:	68 45 d9 02 c0       	push   0xc002d945
c00244ef:	e8 f1 e4 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00244f4:	83 c4 10             	add    esp,0x10
c00244f7:	eb 2e                	jmp    c0024527 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00244f9:	3c 03                	cmp    al,0x3
c00244fb:	75 14                	jne    c0024511 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00244fd:	83 ec 0c             	sub    esp,0xc
c0024500:	b3 17                	mov    bl,0x17
c0024502:	68 59 d9 02 c0       	push   0xc002d959
c0024507:	e8 d9 e4 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002450c:	83 c4 10             	add    esp,0x10
c002450f:	eb 16                	jmp    c0024527 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024511:	3c 04                	cmp    al,0x4
c0024513:	75 12                	jne    c0024527 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024515:	83 ec 0c             	sub    esp,0xc
c0024518:	b3 08                	mov    bl,0x8
c002451a:	68 6f d9 02 c0       	push   0xc002d96f
c002451f:	e8 c1 e4 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0024524:	83 c4 10             	add    esp,0x10
c0024527:	50                   	push   eax
c0024528:	50                   	push   eax
c0024529:	0f b6 c3             	movzx  eax,bl
c002452c:	50                   	push   eax
c002452d:	68 87 d9 02 c0       	push   0xc002d987
c0024532:	e8 ae e4 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0024537:	83 c4 10             	add    esp,0x10
c002453a:	83 c4 1c             	add    esp,0x1c
c002453d:	88 d8                	mov    al,bl
c002453f:	5b                   	pop    ebx
c0024540:	5e                   	pop    esi
c0024541:	5f                   	pop    edi
c0024542:	5d                   	pop    ebp
c0024543:	c3                   	ret    

c0024544 <IDE::polling(unsigned char, unsigned int)>:
c0024544:	57                   	push   edi
c0024545:	56                   	push   esi
c0024546:	53                   	push   ebx
c0024547:	bb 04 00 00 00       	mov    ebx,0x4
c002454c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024550:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024555:	52                   	push   edx
c0024556:	6a 0c                	push   0xc
c0024558:	56                   	push   esi
c0024559:	57                   	push   edi
c002455a:	e8 f9 f4 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c002455f:	83 c4 10             	add    esp,0x10
c0024562:	4b                   	dec    ebx
c0024563:	75 f0                	jne    c0024555 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024565:	bb a0 86 01 00       	mov    ebx,0x186a0
c002456a:	50                   	push   eax
c002456b:	6a 0c                	push   0xc
c002456d:	56                   	push   esi
c002456e:	57                   	push   edi
c002456f:	e8 e4 f4 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024574:	83 c4 10             	add    esp,0x10
c0024577:	a8 01                	test   al,0x1
c0024579:	74 12                	je     c002458d <IDE::polling(unsigned char, unsigned int)+0x49>
c002457b:	83 ec 0c             	sub    esp,0xc
c002457e:	68 a1 d9 02 c0       	push   0xc002d9a1
c0024583:	e8 5d e4 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0024588:	83 c4 10             	add    esp,0x10
c002458b:	eb 17                	jmp    c00245a4 <IDE::polling(unsigned char, unsigned int)+0x60>
c002458d:	a8 20                	test   al,0x20
c002458f:	75 0f                	jne    c00245a0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024591:	4b                   	dec    ebx
c0024592:	74 10                	je     c00245a4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024594:	84 c0                	test   al,al
c0024596:	78 d2                	js     c002456a <IDE::polling(unsigned char, unsigned int)+0x26>
c0024598:	a8 08                	test   al,0x8
c002459a:	74 ce                	je     c002456a <IDE::polling(unsigned char, unsigned int)+0x26>
c002459c:	31 c0                	xor    eax,eax
c002459e:	eb 06                	jmp    c00245a6 <IDE::polling(unsigned char, unsigned int)+0x62>
c00245a0:	b0 01                	mov    al,0x1
c00245a2:	eb 02                	jmp    c00245a6 <IDE::polling(unsigned char, unsigned int)+0x62>
c00245a4:	b0 02                	mov    al,0x2
c00245a6:	5b                   	pop    ebx
c00245a7:	5e                   	pop    esi
c00245a8:	5f                   	pop    edi
c00245a9:	c3                   	ret    

c00245aa <SATABus::close(int, int, void*)>:
c00245aa:	31 c0                	xor    eax,eax
c00245ac:	c3                   	ret    
c00245ad:	90                   	nop

c00245ae <SATABus::detect()>:
c00245ae:	c3                   	ret    
c00245af:	90                   	nop

c00245b0 <SATABus::SATABus()>:
c00245b0:	83 ec 0c             	sub    esp,0xc
c00245b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245b7:	83 ec 08             	sub    esp,0x8
c00245ba:	68 e4 d9 02 c0       	push   0xc002d9e4
c00245bf:	50                   	push   eax
c00245c0:	e8 07 fc fe ff       	call   c00141cc <HardDiskController::HardDiskController(char const*)>
c00245c5:	83 c4 10             	add    esp,0x10
c00245c8:	ba a0 da 02 c0       	mov    edx,0xc002daa0
c00245cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245d1:	89 10                	mov    DWORD PTR [eax],edx
c00245d3:	83 ec 0c             	sub    esp,0xc
c00245d6:	6a 50                	push   0x50
c00245d8:	e8 7e b7 fe ff       	call   c000fd5b <Phys::allocateContiguousPages(int)>
c00245dd:	83 c4 10             	add    esp,0x10
c00245e0:	89 c2                	mov    edx,eax
c00245e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245e6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00245ec:	83 ec 0c             	sub    esp,0xc
c00245ef:	6a 50                	push   0x50
c00245f1:	e8 e9 cf fe ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c00245f6:	83 c4 10             	add    esp,0x10
c00245f9:	89 c2                	mov    edx,eax
c00245fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00245ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024605:	a1 d0 f3 02 c0       	mov    eax,ds:0xc002f3d0
c002460a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002460e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024614:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024618:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002461e:	83 ec 0c             	sub    esp,0xc
c0024621:	6a 03                	push   0x3
c0024623:	6a 50                	push   0x50
c0024625:	51                   	push   ecx
c0024626:	52                   	push   edx
c0024627:	50                   	push   eax
c0024628:	e8 df da fe ff       	call   c001210c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002462d:	83 c4 20             	add    esp,0x20
c0024630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024634:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002463a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002463e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024644:	83 ec 04             	sub    esp,0x4
c0024647:	52                   	push   edx
c0024648:	50                   	push   eax
c0024649:	68 08 da 02 c0       	push   0xc002da08
c002464e:	e8 92 e3 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0024653:	83 c4 10             	add    esp,0x10
c0024656:	90                   	nop
c0024657:	83 c4 0c             	add    esp,0xc
c002465a:	c3                   	ret    
c002465b:	90                   	nop

c002465c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002465c:	83 ec 0c             	sub    esp,0xc
c002465f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024663:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024666:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024669:	09 c2                	or     edx,eax
c002466b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002466f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024675:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024677:	31 c0                	xor    eax,eax
c0024679:	c1 e9 08             	shr    ecx,0x8
c002467c:	83 e1 0f             	and    ecx,0xf
c002467f:	39 c8                	cmp    eax,ecx
c0024681:	74 0a                	je     c002468d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024683:	f6 c2 01             	test   dl,0x1
c0024686:	74 18                	je     c00246a0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024688:	d1 ea                	shr    edx,1
c002468a:	40                   	inc    eax
c002468b:	eb f2                	jmp    c002467f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002468d:	83 ec 0c             	sub    esp,0xc
c0024690:	68 2c da 02 c0       	push   0xc002da2c
c0024695:	e8 6b 5d ff ff       	call   c001a405 <Krnl::panic(char const*)>
c002469a:	83 c4 10             	add    esp,0x10
c002469d:	83 c8 ff             	or     eax,0xffffffff
c00246a0:	83 c4 0c             	add    esp,0xc
c00246a3:	c3                   	ret    

c00246a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00246a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00246a8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00246ab:	89 c2                	mov    edx,eax
c00246ad:	c1 ea 08             	shr    edx,0x8
c00246b0:	83 e2 0f             	and    edx,0xf
c00246b3:	fe ca                	dec    dl
c00246b5:	75 31                	jne    c00246e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00246b7:	83 e0 0f             	and    eax,0xf
c00246ba:	3c 03                	cmp    al,0x3
c00246bc:	75 2a                	jne    c00246e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00246be:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00246c1:	b8 02 00 00 00       	mov    eax,0x2
c00246c6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00246cc:	74 1c                	je     c00246ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00246ce:	b8 04 00 00 00       	mov    eax,0x4
c00246d3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00246d9:	74 0f                	je     c00246ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00246db:	31 c0                	xor    eax,eax
c00246dd:	83 fa 03             	cmp    edx,0x3
c00246e0:	0f 94 c0             	sete   al
c00246e3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00246e7:	c3                   	ret    
c00246e8:	31 c0                	xor    eax,eax
c00246ea:	c3                   	ret    
c00246eb:	90                   	nop

c00246ec <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00246ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00246f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246f3:	0f ba e2 0f          	bt     edx,0xf
c00246f7:	72 f7                	jb     c00246f0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00246f9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00246fc:	83 ca 10             	or     edx,0x10
c00246ff:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024702:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024705:	83 ca 01             	or     edx,0x1
c0024708:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002470b:	c3                   	ret    

c002470c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002470c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024710:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024713:	83 e2 fe             	and    edx,0xfffffffe
c0024716:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024719:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002471c:	83 e2 ef             	and    edx,0xffffffef
c002471f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024722:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024725:	0f ba e2 0e          	bt     edx,0xe
c0024729:	72 f7                	jb     c0024722 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002472b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002472e:	0f ba e2 0f          	bt     edx,0xf
c0024732:	72 ee                	jb     c0024722 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024734:	c3                   	ret    
c0024735:	90                   	nop

c0024736 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024736:	55                   	push   ebp
c0024737:	57                   	push   edi
c0024738:	56                   	push   esi
c0024739:	53                   	push   ebx
c002473a:	83 ec 1c             	sub    esp,0x1c
c002473d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024741:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024745:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024749:	53                   	push   ebx
c002474a:	89 fd                	mov    ebp,edi
c002474c:	56                   	push   esi
c002474d:	c1 e5 0a             	shl    ebp,0xa
c0024750:	e8 b7 ff ff ff       	call   c002470c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024755:	83 ec 0c             	sub    esp,0xc
c0024758:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002475e:	01 e8                	add    eax,ebp
c0024760:	89 03                	mov    DWORD PTR [ebx],eax
c0024762:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024764:	68 00 04 00 00       	push   0x400
c0024769:	6a 00                	push   0x0
c002476b:	50                   	push   eax
c002476c:	e8 df bf fd ff       	call   c0000750 <memset>
c0024771:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024777:	89 fa                	mov    edx,edi
c0024779:	01 e8                	add    eax,ebp
c002477b:	c1 e7 0d             	shl    edi,0xd
c002477e:	89 03                	mov    DWORD PTR [ebx],eax
c0024780:	c1 e2 08             	shl    edx,0x8
c0024783:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002478a:	81 c2 00 80 00 00    	add    edx,0x8000
c0024790:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024794:	89 d0                	mov    eax,edx
c0024796:	83 c4 1c             	add    esp,0x1c
c0024799:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002479f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00247a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00247a5:	68 00 01 00 00       	push   0x100
c00247aa:	6a 00                	push   0x0
c00247ac:	50                   	push   eax
c00247ad:	e8 9e bf fd ff       	call   c0000750 <memset>
c00247b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00247b6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00247bc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00247c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00247c6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00247c9:	83 c4 10             	add    esp,0x10
c00247cc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00247d3:	31 ff                	xor    edi,edi
c00247d5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00247db:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00247e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00247e5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00247eb:	83 c5 20             	add    ebp,0x20
c00247ee:	01 f8                	add    eax,edi
c00247f0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00247f3:	52                   	push   edx
c00247f4:	68 00 01 00 00       	push   0x100
c00247f9:	6a 00                	push   0x0
c00247fb:	50                   	push   eax
c00247fc:	e8 4f bf fd ff       	call   c0000750 <memset>
c0024801:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024805:	83 c4 10             	add    esp,0x10
c0024808:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002480e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024815:	01 f8                	add    eax,edi
c0024817:	81 c7 00 01 00 00    	add    edi,0x100
c002481d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024820:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024826:	75 b3                	jne    c00247db <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024828:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002482c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024830:	83 c4 1c             	add    esp,0x1c
c0024833:	5b                   	pop    ebx
c0024834:	5e                   	pop    esi
c0024835:	5f                   	pop    edi
c0024836:	5d                   	pop    ebp
c0024837:	e9 b0 fe ff ff       	jmp    c00246ec <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002483c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002483c:	55                   	push   ebp
c002483d:	57                   	push   edi
c002483e:	56                   	push   esi
c002483f:	53                   	push   ebx
c0024840:	31 db                	xor    ebx,ebx
c0024842:	83 ec 0c             	sub    esp,0xc
c0024845:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024849:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002484d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024850:	f7 c7 01 00 00 00    	test   edi,0x1
c0024856:	0f 84 aa 00 00 00    	je     c0024906 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002485c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024860:	89 d8                	mov    eax,ebx
c0024862:	c1 e0 07             	shl    eax,0x7
c0024865:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c002486c:	55                   	push   ebp
c002486d:	56                   	push   esi
c002486e:	e8 31 fe ff ff       	call   c00246a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024873:	5a                   	pop    edx
c0024874:	83 f8 01             	cmp    eax,0x1
c0024877:	59                   	pop    ecx
c0024878:	75 30                	jne    c00248aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c002487a:	50                   	push   eax
c002487b:	50                   	push   eax
c002487c:	53                   	push   ebx
c002487d:	68 51 da 02 c0       	push   0xc002da51
c0024882:	e8 5e e1 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0024887:	83 c4 0c             	add    esp,0xc
c002488a:	53                   	push   ebx
c002488b:	55                   	push   ebp
c002488c:	56                   	push   esi
c002488d:	e8 a4 fe ff ff       	call   c0024736 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024892:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024899:	e8 64 b0 fe ff       	call   c000f902 <malloc>
c002489e:	89 c5                	mov    ebp,eax
c00248a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00248a3:	e8 24 0d 00 00       	call   c00255cc <SATA::SATA()>
c00248a8:	eb 33                	jmp    c00248dd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00248aa:	83 f8 04             	cmp    eax,0x4
c00248ad:	75 47                	jne    c00248f6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00248af:	50                   	push   eax
c00248b0:	50                   	push   eax
c00248b1:	53                   	push   ebx
c00248b2:	68 68 da 02 c0       	push   0xc002da68
c00248b7:	e8 29 e1 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00248bc:	83 c4 0c             	add    esp,0xc
c00248bf:	53                   	push   ebx
c00248c0:	55                   	push   ebp
c00248c1:	56                   	push   esi
c00248c2:	e8 6f fe ff ff       	call   c0024736 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00248c7:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00248ce:	e8 2f b0 fe ff       	call   c000f902 <malloc>
c00248d3:	89 c5                	mov    ebp,eax
c00248d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00248d8:	e8 65 10 00 00       	call   c0025942 <SATAPI::SATAPI()>
c00248dd:	5a                   	pop    edx
c00248de:	59                   	pop    ecx
c00248df:	55                   	push   ebp
c00248e0:	56                   	push   esi
c00248e1:	e8 38 f5 fe ff       	call   c0013e1e <Device::addChild(Device*)>
c00248e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00248e9:	56                   	push   esi
c00248ea:	6a 00                	push   0x0
c00248ec:	53                   	push   ebx
c00248ed:	55                   	push   ebp
c00248ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00248f1:	83 c4 20             	add    esp,0x20
c00248f4:	eb 10                	jmp    c0024906 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00248f6:	50                   	push   eax
c00248f7:	50                   	push   eax
c00248f8:	53                   	push   ebx
c00248f9:	68 81 da 02 c0       	push   0xc002da81
c00248fe:	e8 e2 e0 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0024903:	83 c4 10             	add    esp,0x10
c0024906:	d1 ef                	shr    edi,1
c0024908:	43                   	inc    ebx
c0024909:	83 fb 20             	cmp    ebx,0x20
c002490c:	0f 85 3e ff ff ff    	jne    c0024850 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024912:	83 c4 0c             	add    esp,0xc
c0024915:	5b                   	pop    ebx
c0024916:	5e                   	pop    esi
c0024917:	5f                   	pop    edi
c0024918:	5d                   	pop    ebp
c0024919:	c3                   	ret    

c002491a <SATABus::open(int, int, void*)>:
c002491a:	83 ec 14             	sub    esp,0x14
c002491d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024921:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024927:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002492d:	52                   	push   edx
c002492e:	50                   	push   eax
c002492f:	e8 08 ff ff ff       	call   c002483c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024934:	31 c0                	xor    eax,eax
c0024936:	83 c4 1c             	add    esp,0x1c
c0024939:	c3                   	ret    

c002493a <ATA::close(int, int, void*)>:
c002493a:	83 ec 0c             	sub    esp,0xc
c002493d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024941:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024947:	85 c0                	test   eax,eax
c0024949:	74 0c                	je     c0024957 <ATA::close(int, int, void*)+0x1d>
c002494b:	83 ec 0c             	sub    esp,0xc
c002494e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024950:	50                   	push   eax
c0024951:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024954:	83 c4 10             	add    esp,0x10
c0024957:	31 c0                	xor    eax,eax
c0024959:	83 c4 0c             	add    esp,0xc
c002495c:	c3                   	ret    
c002495d:	90                   	nop

c002495e <ATA::powerSaving(PowerSavingLevel)>:
c002495e:	c3                   	ret    
c002495f:	90                   	nop

c0024960 <ATA::ATA()>:
c0024960:	83 ec 0c             	sub    esp,0xc
c0024963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024967:	83 ec 04             	sub    esp,0x4
c002496a:	68 00 02 00 00       	push   0x200
c002496f:	68 69 db 02 c0       	push   0xc002db69
c0024974:	50                   	push   eax
c0024975:	e8 ea f8 fe ff       	call   c0014264 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002497a:	83 c4 10             	add    esp,0x10
c002497d:	ba ec da 02 c0       	mov    edx,0xc002daec
c0024982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024986:	89 10                	mov    DWORD PTR [eax],edx
c0024988:	90                   	nop
c0024989:	83 c4 0c             	add    esp,0xc
c002498c:	c3                   	ret    
c002498d:	90                   	nop

c002498e <ATA::flush(bool)>:
c002498e:	53                   	push   ebx
c002498f:	83 ec 08             	sub    esp,0x8
c0024992:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024997:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002499b:	19 c0                	sbb    eax,eax
c002499d:	83 e0 fd             	and    eax,0xfffffffd
c00249a0:	05 ea 00 00 00       	add    eax,0xea
c00249a5:	50                   	push   eax
c00249a6:	6a 07                	push   0x7
c00249a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249af:	50                   	push   eax
c00249b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249b6:	e8 dd ef ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249bb:	83 c4 0c             	add    esp,0xc
c00249be:	6a 00                	push   0x0
c00249c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249c7:	50                   	push   eax
c00249c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249ce:	e8 71 fb ff ff       	call   c0024544 <IDE::polling(unsigned char, unsigned int)>
c00249d3:	83 c4 18             	add    esp,0x18
c00249d6:	5b                   	pop    ebx
c00249d7:	c3                   	ret    

c00249d8 <ATA::readyForCommand()>:
c00249d8:	56                   	push   esi
c00249d9:	53                   	push   ebx
c00249da:	31 db                	xor    ebx,ebx
c00249dc:	50                   	push   eax
c00249dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00249e1:	50                   	push   eax
c00249e2:	6a 0c                	push   0xc
c00249e4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00249eb:	50                   	push   eax
c00249ec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00249f2:	e8 61 f0 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c00249f7:	83 c4 10             	add    esp,0x10
c00249fa:	a8 88                	test   al,0x88
c00249fc:	74 23                	je     c0024a21 <ATA::readyForCommand()+0x49>
c00249fe:	43                   	inc    ebx
c00249ff:	83 fb 63             	cmp    ebx,0x63
c0024a02:	7e dd                	jle    c00249e1 <ATA::readyForCommand()+0x9>
c0024a04:	51                   	push   ecx
c0024a05:	51                   	push   ecx
c0024a06:	6a 00                	push   0x0
c0024a08:	68 40 42 0f 00       	push   0xf4240
c0024a0d:	e8 a9 9a ff ff       	call   c001e4bb <nanoSleep(unsigned long long)>
c0024a12:	83 c4 10             	add    esp,0x10
c0024a15:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024a1b:	75 c4                	jne    c00249e1 <ATA::readyForCommand()+0x9>
c0024a1d:	31 c0                	xor    eax,eax
c0024a1f:	eb 02                	jmp    c0024a23 <ATA::readyForCommand()+0x4b>
c0024a21:	b0 01                	mov    al,0x1
c0024a23:	5a                   	pop    edx
c0024a24:	5b                   	pop    ebx
c0024a25:	5e                   	pop    esi
c0024a26:	c3                   	ret    
c0024a27:	90                   	nop

c0024a28 <ATA::access(unsigned long long, int, void*, bool)>:
c0024a28:	55                   	push   ebp
c0024a29:	57                   	push   edi
c0024a2a:	56                   	push   esi
c0024a2b:	53                   	push   ebx
c0024a2c:	83 ec 2c             	sub    esp,0x2c
c0024a2f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a33:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a37:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024a3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024a3f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024a43:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024a47:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024a4b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024a51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a55:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024a5b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024a5f:	c1 e0 06             	shl    eax,0x6
c0024a62:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024a6a:	74 5d                	je     c0024ac9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024a6c:	89 fa                	mov    edx,edi
c0024a6e:	89 f0                	mov    eax,esi
c0024a70:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024a74:	c1 ea 1c             	shr    edx,0x1c
c0024a77:	89 d1                	mov    ecx,edx
c0024a79:	09 c1                	or     ecx,eax
c0024a7b:	74 25                	je     c0024aa2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024a7d:	31 ed                	xor    ebp,ebp
c0024a7f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024a86:	89 fa                	mov    edx,edi
c0024a88:	89 f0                	mov    eax,esi
c0024a8a:	0f ad d0             	shrd   eax,edx,cl
c0024a8d:	d3 ea                	shr    edx,cl
c0024a8f:	f6 c1 20             	test   cl,0x20
c0024a92:	74 02                	je     c0024a96 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024a94:	89 d0                	mov    eax,edx
c0024a96:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024a9a:	45                   	inc    ebp
c0024a9b:	83 fd 06             	cmp    ebp,0x6
c0024a9e:	75 df                	jne    c0024a7f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024aa0:	eb 76                	jmp    c0024b18 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024aa2:	89 f0                	mov    eax,esi
c0024aa4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024aa9:	89 fa                	mov    edx,edi
c0024aab:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024ab2:	0f ac d0 10          	shrd   eax,edx,0x10
c0024ab6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024abb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024abf:	c1 ee 18             	shr    esi,0x18
c0024ac2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024ac7:	eb 56                	jmp    c0024b1f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024ac9:	6a 00                	push   0x0
c0024acb:	6a 3f                	push   0x3f
c0024acd:	57                   	push   edi
c0024ace:	56                   	push   esi
c0024acf:	e8 20 29 00 00       	call   c00273f4 <__umoddi3>
c0024ad4:	83 c4 10             	add    esp,0x10
c0024ad7:	40                   	inc    eax
c0024ad8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024adc:	6a 00                	push   0x0
c0024ade:	68 f0 03 00 00       	push   0x3f0
c0024ae3:	57                   	push   edi
c0024ae4:	56                   	push   esi
c0024ae5:	e8 0a 28 00 00       	call   c00272f4 <__udivdi3>
c0024aea:	83 c4 10             	add    esp,0x10
c0024aed:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024af2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024af9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024afe:	6a 00                	push   0x0
c0024b00:	6a 3f                	push   0x3f
c0024b02:	57                   	push   edi
c0024b03:	56                   	push   esi
c0024b04:	e8 eb 27 00 00       	call   c00272f4 <__udivdi3>
c0024b09:	83 c4 10             	add    esp,0x10
c0024b0c:	89 c6                	mov    esi,eax
c0024b0e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024b13:	83 e6 0f             	and    esi,0xf
c0024b16:	eb 07                	jmp    c0024b1f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024b18:	31 f6                	xor    esi,esi
c0024b1a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024b1f:	bf 01 00 00 00       	mov    edi,0x1
c0024b24:	50                   	push   eax
c0024b25:	6a 00                	push   0x0
c0024b27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b2e:	50                   	push   eax
c0024b2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024b33:	e8 6c f0 ff ff       	call   c0023ba4 <IDE::enableIRQs(unsigned char, bool)>
c0024b38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024b3b:	e8 98 fe ff ff       	call   c00249d8 <ATA::readyForCommand()>
c0024b40:	83 c4 10             	add    esp,0x10
c0024b43:	84 c0                	test   al,al
c0024b45:	0f 84 5a 02 00 00    	je     c0024da5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024b4b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b51:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024b57:	c1 e0 04             	shl    eax,0x4
c0024b5a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024b61:	09 c6                	or     esi,eax
c0024b63:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024b68:	75 05                	jne    c0024b6f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024b6a:	83 ce a0             	or     esi,0xffffffa0
c0024b6d:	eb 03                	jmp    c0024b72 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024b6f:	83 ce e0             	or     esi,0xffffffe0
c0024b72:	89 f0                	mov    eax,esi
c0024b74:	0f b6 f0             	movzx  esi,al
c0024b77:	56                   	push   esi
c0024b78:	6a 06                	push   0x6
c0024b7a:	51                   	push   ecx
c0024b7b:	52                   	push   edx
c0024b7c:	e8 17 ee ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b81:	83 c4 10             	add    esp,0x10
c0024b84:	6a 00                	push   0x0
c0024b86:	6a 01                	push   0x1
c0024b88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b8f:	50                   	push   eax
c0024b90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b96:	e8 fd ed ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b9b:	83 c4 10             	add    esp,0x10
c0024b9e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024ba3:	75 6e                	jne    c0024c13 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024ba5:	6a 00                	push   0x0
c0024ba7:	6a 08                	push   0x8
c0024ba9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bb0:	50                   	push   eax
c0024bb1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bb7:	e8 dc ed ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bbc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024bc1:	50                   	push   eax
c0024bc2:	6a 09                	push   0x9
c0024bc4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bcb:	50                   	push   eax
c0024bcc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bd2:	e8 c1 ed ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bd7:	83 c4 20             	add    esp,0x20
c0024bda:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024bdf:	50                   	push   eax
c0024be0:	6a 0a                	push   0xa
c0024be2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024be9:	50                   	push   eax
c0024bea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bf0:	e8 a3 ed ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bf5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024bfa:	50                   	push   eax
c0024bfb:	6a 0b                	push   0xb
c0024bfd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c04:	50                   	push   eax
c0024c05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c0b:	e8 88 ed ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c10:	83 c4 20             	add    esp,0x20
c0024c13:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024c18:	50                   	push   eax
c0024c19:	6a 02                	push   0x2
c0024c1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c22:	50                   	push   eax
c0024c23:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c29:	e8 6a ed ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c2e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024c33:	50                   	push   eax
c0024c34:	6a 03                	push   0x3
c0024c36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c3d:	50                   	push   eax
c0024c3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c44:	e8 4f ed ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c49:	83 c4 20             	add    esp,0x20
c0024c4c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024c51:	50                   	push   eax
c0024c52:	6a 04                	push   0x4
c0024c54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c5b:	50                   	push   eax
c0024c5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c62:	e8 31 ed ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024c6c:	50                   	push   eax
c0024c6d:	6a 05                	push   0x5
c0024c6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c76:	50                   	push   eax
c0024c77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c7d:	e8 16 ed ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c82:	83 c4 20             	add    esp,0x20
c0024c85:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024c8a:	0f 94 c0             	sete   al
c0024c8d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c92:	74 09                	je     c0024c9d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024c94:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024c9b:	eb 07                	jmp    c0024ca4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024c9d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024ca4:	0f b6 c0             	movzx  eax,al
c0024ca7:	50                   	push   eax
c0024ca8:	6a 07                	push   0x7
c0024caa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cb1:	50                   	push   eax
c0024cb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cb8:	e8 db ec ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024cbd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024cc1:	83 c4 10             	add    esp,0x10
c0024cc4:	85 f6                	test   esi,esi
c0024cc6:	0f 84 ba 00 00 00    	je     c0024d86 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024ccc:	50                   	push   eax
c0024ccd:	6a 01                	push   0x1
c0024ccf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024cd6:	50                   	push   eax
c0024cd7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024cdd:	e8 62 f8 ff ff       	call   c0024544 <IDE::polling(unsigned char, unsigned int)>
c0024ce2:	83 c4 10             	add    esp,0x10
c0024ce5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024ceb:	84 c0                	test   al,al
c0024ced:	74 2c                	je     c0024d1b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024cef:	0f b6 f8             	movzx  edi,al
c0024cf2:	0f b6 d2             	movzx  edx,dl
c0024cf5:	57                   	push   edi
c0024cf6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024cfd:	50                   	push   eax
c0024cfe:	52                   	push   edx
c0024cff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d05:	e8 a4 f6 ff ff       	call   c00243ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024d0a:	c7 04 24 c4 da 02 c0 	mov    DWORD PTR [esp],0xc002dac4
c0024d11:	e8 cf dc fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0024d16:	e9 87 00 00 00       	jmp    c0024da2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024d1b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024d20:	74 33                	je     c0024d55 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024d22:	31 ed                	xor    ebp,ebp
c0024d24:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024d28:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024d2c:	50                   	push   eax
c0024d2d:	50                   	push   eax
c0024d2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d35:	50                   	push   eax
c0024d36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d3c:	e8 45 ec ff ff       	call   c0023986 <IDE::getBase(unsigned char)>
c0024d41:	89 c2                	mov    edx,eax
c0024d43:	89 f8                	mov    eax,edi
c0024d45:	66 ef                	out    dx,ax
c0024d47:	45                   	inc    ebp
c0024d48:	83 c4 10             	add    esp,0x10
c0024d4b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024d51:	75 d1                	jne    c0024d24 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024d53:	eb 23                	jmp    c0024d78 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024d55:	0f b6 d2             	movzx  edx,dl
c0024d58:	51                   	push   ecx
c0024d59:	51                   	push   ecx
c0024d5a:	52                   	push   edx
c0024d5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024d61:	e8 20 ec ff ff       	call   c0023986 <IDE::getBase(unsigned char)>
c0024d66:	b9 00 01 00 00       	mov    ecx,0x100
c0024d6b:	89 c2                	mov    edx,eax
c0024d6d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024d71:	fc                   	cld    
c0024d72:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024d75:	83 c4 10             	add    esp,0x10
c0024d78:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024d80:	4e                   	dec    esi
c0024d81:	e9 3e ff ff ff       	jmp    c0024cc4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024d86:	31 ff                	xor    edi,edi
c0024d88:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024d8d:	74 16                	je     c0024da5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024d8f:	50                   	push   eax
c0024d90:	50                   	push   eax
c0024d91:	31 c0                	xor    eax,eax
c0024d93:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024d98:	0f 94 c0             	sete   al
c0024d9b:	50                   	push   eax
c0024d9c:	53                   	push   ebx
c0024d9d:	e8 ec fb ff ff       	call   c002498e <ATA::flush(bool)>
c0024da2:	83 c4 10             	add    esp,0x10
c0024da5:	83 c4 2c             	add    esp,0x2c
c0024da8:	89 f8                	mov    eax,edi
c0024daa:	5b                   	pop    ebx
c0024dab:	5e                   	pop    esi
c0024dac:	5f                   	pop    edi
c0024dad:	5d                   	pop    ebp
c0024dae:	c3                   	ret    
c0024daf:	90                   	nop

c0024db0 <ATA::read(unsigned long long, int, void*)>:
c0024db0:	57                   	push   edi
c0024db1:	b8 04 00 00 00       	mov    eax,0x4
c0024db6:	56                   	push   esi
c0024db7:	53                   	push   ebx
c0024db8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024dbc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024dc0:	8d 7a ff             	lea    edi,[edx-0x1]
c0024dc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024dc7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024dcb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024dd1:	77 25                	ja     c0024df8 <ATA::read(unsigned long long, int, void*)+0x48>
c0024dd3:	b8 06 00 00 00       	mov    eax,0x6
c0024dd8:	85 f6                	test   esi,esi
c0024dda:	74 1c                	je     c0024df8 <ATA::read(unsigned long long, int, void*)+0x48>
c0024ddc:	50                   	push   eax
c0024ddd:	50                   	push   eax
c0024dde:	6a 00                	push   0x0
c0024de0:	56                   	push   esi
c0024de1:	52                   	push   edx
c0024de2:	53                   	push   ebx
c0024de3:	51                   	push   ecx
c0024de4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024de8:	e8 3b fc ff ff       	call   c0024a28 <ATA::access(unsigned long long, int, void*, bool)>
c0024ded:	83 c4 20             	add    esp,0x20
c0024df0:	85 c0                	test   eax,eax
c0024df2:	0f 95 c0             	setne  al
c0024df5:	0f b6 c0             	movzx  eax,al
c0024df8:	5b                   	pop    ebx
c0024df9:	5e                   	pop    esi
c0024dfa:	5f                   	pop    edi
c0024dfb:	c3                   	ret    

c0024dfc <ATA::write(unsigned long long, int, void*)>:
c0024dfc:	57                   	push   edi
c0024dfd:	b8 04 00 00 00       	mov    eax,0x4
c0024e02:	56                   	push   esi
c0024e03:	53                   	push   ebx
c0024e04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e0c:	8d 7a ff             	lea    edi,[edx-0x1]
c0024e0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024e13:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024e17:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024e1d:	77 25                	ja     c0024e44 <ATA::write(unsigned long long, int, void*)+0x48>
c0024e1f:	b8 06 00 00 00       	mov    eax,0x6
c0024e24:	85 f6                	test   esi,esi
c0024e26:	74 1c                	je     c0024e44 <ATA::write(unsigned long long, int, void*)+0x48>
c0024e28:	50                   	push   eax
c0024e29:	50                   	push   eax
c0024e2a:	6a 01                	push   0x1
c0024e2c:	56                   	push   esi
c0024e2d:	52                   	push   edx
c0024e2e:	53                   	push   ebx
c0024e2f:	51                   	push   ecx
c0024e30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e34:	e8 ef fb ff ff       	call   c0024a28 <ATA::access(unsigned long long, int, void*, bool)>
c0024e39:	83 c4 20             	add    esp,0x20
c0024e3c:	85 c0                	test   eax,eax
c0024e3e:	0f 95 c0             	setne  al
c0024e41:	0f b6 c0             	movzx  eax,al
c0024e44:	5b                   	pop    ebx
c0024e45:	5e                   	pop    esi
c0024e46:	5f                   	pop    edi
c0024e47:	c3                   	ret    

c0024e48 <ATA::detectCHS()>:
c0024e48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024e4c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024e52:	c1 e0 06             	shl    eax,0x6
c0024e55:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024e5b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024e65:	c7 44 24 04 cf da 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dacf
c0024e6d:	e9 93 55 ff ff       	jmp    c001a405 <Krnl::panic(char const*)>

c0024e72 <ATA::open(int, int, void*)>:
c0024e72:	53                   	push   ebx
c0024e73:	83 ec 08             	sub    esp,0x8
c0024e76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024e7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024e7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024e82:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024e88:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024e8e:	c1 e0 06             	shl    eax,0x6
c0024e91:	01 d0                	add    eax,edx
c0024e93:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024e9a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024ea0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024ea7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024eb1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024eb7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ebe:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024ec5:	75 0c                	jne    c0024ed3 <ATA::open(int, int, void*)+0x61>
c0024ec7:	83 ec 0c             	sub    esp,0xc
c0024eca:	53                   	push   ebx
c0024ecb:	e8 78 ff ff ff       	call   c0024e48 <ATA::detectCHS()>
c0024ed0:	83 c4 10             	add    esp,0x10
c0024ed3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024ed9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024edf:	c1 e0 06             	shl    eax,0x6
c0024ee2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024ee9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024ef3:	d1 e8                	shr    eax,1
c0024ef5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024efb:	6a 04                	push   0x4
c0024efd:	6a 0c                	push   0xc
c0024eff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f06:	50                   	push   eax
c0024f07:	52                   	push   edx
c0024f08:	e8 8b ea ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f0d:	90                   	nop
c0024f0e:	90                   	nop
c0024f0f:	6a 00                	push   0x0
c0024f11:	6a 0c                	push   0xc
c0024f13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f1a:	50                   	push   eax
c0024f1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f21:	e8 72 ea ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f26:	83 c4 14             	add    esp,0x14
c0024f29:	53                   	push   ebx
c0024f2a:	e8 9d f3 fe ff       	call   c00142cc <PhysicalDisk::startCache()>
c0024f2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024f32:	e8 4f 16 ff ff       	call   c0016586 <createPartitionsForDisk(PhysicalDisk*)>
c0024f37:	31 c0                	xor    eax,eax
c0024f39:	83 c4 18             	add    esp,0x18
c0024f3c:	5b                   	pop    ebx
c0024f3d:	c3                   	ret    

c0024f3e <ATAPI::write(unsigned long long, int, void*)>:
c0024f3e:	b8 03 00 00 00       	mov    eax,0x3
c0024f43:	c3                   	ret    

c0024f44 <ATAPI::close(int, int, void*)>:
c0024f44:	83 ec 0c             	sub    esp,0xc
c0024f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024f51:	85 c0                	test   eax,eax
c0024f53:	74 0c                	je     c0024f61 <ATAPI::close(int, int, void*)+0x1d>
c0024f55:	83 ec 0c             	sub    esp,0xc
c0024f58:	8b 10                	mov    edx,DWORD PTR [eax]
c0024f5a:	50                   	push   eax
c0024f5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024f5e:	83 c4 10             	add    esp,0x10
c0024f61:	31 c0                	xor    eax,eax
c0024f63:	83 c4 0c             	add    esp,0xc
c0024f66:	c3                   	ret    
c0024f67:	90                   	nop

c0024f68 <ATAPI::ATAPI()>:
c0024f68:	83 ec 0c             	sub    esp,0xc
c0024f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f6f:	83 ec 04             	sub    esp,0x4
c0024f72:	68 00 08 00 00       	push   0x800
c0024f77:	68 09 dc 02 c0       	push   0xc002dc09
c0024f7c:	50                   	push   eax
c0024f7d:	e8 e2 f2 fe ff       	call   c0014264 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024f82:	83 c4 10             	add    esp,0x10
c0024f85:	ba 24 db 02 c0       	mov    edx,0xc002db24
c0024f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f8e:	89 10                	mov    DWORD PTR [eax],edx
c0024f90:	90                   	nop
c0024f91:	83 c4 0c             	add    esp,0xc
c0024f94:	c3                   	ret    
c0024f95:	90                   	nop

c0024f96 <ATAPI::readyForCommand()>:
c0024f96:	56                   	push   esi
c0024f97:	53                   	push   ebx
c0024f98:	31 db                	xor    ebx,ebx
c0024f9a:	50                   	push   eax
c0024f9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024f9f:	50                   	push   eax
c0024fa0:	6a 0c                	push   0xc
c0024fa2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024fa9:	50                   	push   eax
c0024faa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024fb0:	e8 a3 ea ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0024fb5:	83 c4 10             	add    esp,0x10
c0024fb8:	a8 88                	test   al,0x88
c0024fba:	74 23                	je     c0024fdf <ATAPI::readyForCommand()+0x49>
c0024fbc:	43                   	inc    ebx
c0024fbd:	83 fb 63             	cmp    ebx,0x63
c0024fc0:	7e dd                	jle    c0024f9f <ATAPI::readyForCommand()+0x9>
c0024fc2:	51                   	push   ecx
c0024fc3:	51                   	push   ecx
c0024fc4:	6a 00                	push   0x0
c0024fc6:	68 40 42 0f 00       	push   0xf4240
c0024fcb:	e8 eb 94 ff ff       	call   c001e4bb <nanoSleep(unsigned long long)>
c0024fd0:	83 c4 10             	add    esp,0x10
c0024fd3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024fd9:	75 c4                	jne    c0024f9f <ATAPI::readyForCommand()+0x9>
c0024fdb:	31 c0                	xor    eax,eax
c0024fdd:	eb 02                	jmp    c0024fe1 <ATAPI::readyForCommand()+0x4b>
c0024fdf:	b0 01                	mov    al,0x1
c0024fe1:	5a                   	pop    edx
c0024fe2:	5b                   	pop    ebx
c0024fe3:	5e                   	pop    esi
c0024fe4:	c3                   	ret    
c0024fe5:	90                   	nop

c0024fe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024fe6:	55                   	push   ebp
c0024fe7:	57                   	push   edi
c0024fe8:	56                   	push   esi
c0024fe9:	53                   	push   ebx
c0024fea:	83 ec 20             	sub    esp,0x20
c0024fed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024ff1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024ff5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024ff9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ffd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025001:	6a 01                	push   0x1
c0025003:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002500a:	50                   	push   eax
c002500b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025011:	e8 8e eb ff ff       	call   c0023ba4 <IDE::enableIRQs(unsigned char, bool)>
c0025016:	5e                   	pop    esi
c0025017:	58                   	pop    eax
c0025018:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002501f:	50                   	push   eax
c0025020:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025026:	e8 47 e9 ff ff       	call   c0023972 <IDE::prepareInterrupt(unsigned char)>
c002502b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002502e:	e8 63 ff ff ff       	call   c0024f96 <ATAPI::readyForCommand()>
c0025033:	83 c4 10             	add    esp,0x10
c0025036:	84 c0                	test   al,al
c0025038:	75 0a                	jne    c0025044 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002503a:	bb 01 00 00 00       	mov    ebx,0x1
c002503f:	e9 57 02 00 00       	jmp    c002529b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025044:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002504a:	c1 e0 04             	shl    eax,0x4
c002504d:	0f b6 c0             	movzx  eax,al
c0025050:	50                   	push   eax
c0025051:	6a 06                	push   0x6
c0025053:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002505a:	50                   	push   eax
c002505b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025061:	e8 32 e9 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025066:	6a 00                	push   0x0
c0025068:	6a 01                	push   0x1
c002506a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025071:	50                   	push   eax
c0025072:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025078:	e8 1b e9 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002507d:	83 c4 20             	add    esp,0x20
c0025080:	0f b6 c3             	movzx  eax,bl
c0025083:	0f b6 df             	movzx  ebx,bh
c0025086:	50                   	push   eax
c0025087:	6a 04                	push   0x4
c0025089:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025090:	50                   	push   eax
c0025091:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025097:	e8 fc e8 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002509c:	53                   	push   ebx
c002509d:	6a 05                	push   0x5
c002509f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250a6:	50                   	push   eax
c00250a7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250ad:	e8 e6 e8 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250b2:	83 c4 20             	add    esp,0x20
c00250b5:	68 a0 00 00 00       	push   0xa0
c00250ba:	6a 07                	push   0x7
c00250bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250c3:	50                   	push   eax
c00250c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250ca:	e8 c9 e8 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00250cf:	83 c4 0c             	add    esp,0xc
c00250d2:	6a 01                	push   0x1
c00250d4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250db:	50                   	push   eax
c00250dc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250e2:	e8 5d f4 ff ff       	call   c0024544 <IDE::polling(unsigned char, unsigned int)>
c00250e7:	83 c4 10             	add    esp,0x10
c00250ea:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00250f0:	84 c0                	test   al,al
c00250f2:	74 23                	je     c0025117 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00250f4:	0f b6 d8             	movzx  ebx,al
c00250f7:	0f b6 d2             	movzx  edx,dl
c00250fa:	53                   	push   ebx
c00250fb:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025102:	50                   	push   eax
c0025103:	52                   	push   edx
c0025104:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002510a:	e8 9f f2 ff ff       	call   c00243ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002510f:	83 c4 10             	add    esp,0x10
c0025112:	e9 84 01 00 00       	jmp    c002529b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025117:	0f b6 d2             	movzx  edx,dl
c002511a:	53                   	push   ebx
c002511b:	53                   	push   ebx
c002511c:	52                   	push   edx
c002511d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025123:	e8 5e e8 ff ff       	call   c0023986 <IDE::getBase(unsigned char)>
c0025128:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002512c:	b9 06 00 00 00       	mov    ecx,0x6
c0025131:	89 c2                	mov    edx,eax
c0025133:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025136:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002513a:	83 c4 10             	add    esp,0x10
c002513d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025143:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002514a:	85 db                	test   ebx,ebx
c002514c:	0f 84 ec 00 00 00    	je     c002523e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025152:	51                   	push   ecx
c0025153:	51                   	push   ecx
c0025154:	52                   	push   edx
c0025155:	50                   	push   eax
c0025156:	e8 ab e9 ff ff       	call   c0023b06 <IDE::waitInterrupt(unsigned char)>
c002515b:	83 c4 10             	add    esp,0x10
c002515e:	84 c0                	test   al,al
c0025160:	0f 84 d4 fe ff ff    	je     c002503a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025166:	56                   	push   esi
c0025167:	56                   	push   esi
c0025168:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002516f:	50                   	push   eax
c0025170:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025176:	e8 f7 e7 ff ff       	call   c0023972 <IDE::prepareInterrupt(unsigned char)>
c002517b:	83 c4 0c             	add    esp,0xc
c002517e:	6a 04                	push   0x4
c0025180:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025187:	50                   	push   eax
c0025188:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002518e:	e8 c5 e8 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c0025193:	83 c4 0c             	add    esp,0xc
c0025196:	89 c6                	mov    esi,eax
c0025198:	6a 05                	push   0x5
c002519a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00251a1:	50                   	push   eax
c00251a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00251a8:	e8 ab e8 ff ff       	call   c0023a58 <IDE::read(unsigned char, unsigned char)>
c00251ad:	89 f1                	mov    ecx,esi
c00251af:	0f b6 c0             	movzx  eax,al
c00251b2:	0f b6 f1             	movzx  esi,cl
c00251b5:	c1 e0 08             	shl    eax,0x8
c00251b8:	09 c6                	or     esi,eax
c00251ba:	d1 fe                	sar    esi,1
c00251bc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00251c0:	83 c4 10             	add    esp,0x10
c00251c3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00251c8:	74 41                	je     c002520b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00251ca:	31 c9                	xor    ecx,ecx
c00251cc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00251d2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00251d9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00251dd:	75 0a                	jne    c00251e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00251df:	01 c9                	add    ecx,ecx
c00251e1:	01 cd                	add    ebp,ecx
c00251e3:	4b                   	dec    ebx
c00251e4:	e9 54 ff ff ff       	jmp    c002513d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00251e9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00251ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00251f2:	51                   	push   ecx
c00251f3:	51                   	push   ecx
c00251f4:	52                   	push   edx
c00251f5:	50                   	push   eax
c00251f6:	e8 8b e7 ff ff       	call   c0023986 <IDE::getBase(unsigned char)>
c00251fb:	89 c2                	mov    edx,eax
c00251fd:	89 f0                	mov    eax,esi
c00251ff:	66 ef                	out    dx,ax
c0025201:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025205:	83 c4 10             	add    esp,0x10
c0025208:	41                   	inc    ecx
c0025209:	eb c1                	jmp    c00251cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002520b:	31 f6                	xor    esi,esi
c002520d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025213:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002521a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002521e:	75 06                	jne    c0025226 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025220:	01 f6                	add    esi,esi
c0025222:	01 f5                	add    ebp,esi
c0025224:	eb bd                	jmp    c00251e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025226:	51                   	push   ecx
c0025227:	51                   	push   ecx
c0025228:	52                   	push   edx
c0025229:	50                   	push   eax
c002522a:	e8 57 e7 ff ff       	call   c0023986 <IDE::getBase(unsigned char)>
c002522f:	89 c2                	mov    edx,eax
c0025231:	66 ed                	in     ax,dx
c0025233:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025238:	83 c4 10             	add    esp,0x10
c002523b:	46                   	inc    esi
c002523c:	eb cf                	jmp    c002520d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002523e:	51                   	push   ecx
c002523f:	51                   	push   ecx
c0025240:	52                   	push   edx
c0025241:	50                   	push   eax
c0025242:	e8 bf e8 ff ff       	call   c0023b06 <IDE::waitInterrupt(unsigned char)>
c0025247:	83 c4 10             	add    esp,0x10
c002524a:	84 c0                	test   al,al
c002524c:	0f 84 e8 fd ff ff    	je     c002503a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025252:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025257:	52                   	push   edx
c0025258:	52                   	push   edx
c0025259:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025260:	50                   	push   eax
c0025261:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025267:	e8 06 e7 ff ff       	call   c0023972 <IDE::prepareInterrupt(unsigned char)>
c002526c:	83 c4 10             	add    esp,0x10
c002526f:	50                   	push   eax
c0025270:	50                   	push   eax
c0025271:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025278:	50                   	push   eax
c0025279:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002527f:	e8 02 e7 ff ff       	call   c0023986 <IDE::getBase(unsigned char)>
c0025284:	8d 50 07             	lea    edx,[eax+0x7]
c0025287:	ec                   	in     al,dx
c0025288:	83 c4 10             	add    esp,0x10
c002528b:	a8 88                	test   al,0x88
c002528d:	74 0a                	je     c0025299 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002528f:	4b                   	dec    ebx
c0025290:	75 dd                	jne    c002526f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025292:	bb 02 00 00 00       	mov    ebx,0x2
c0025297:	eb 02                	jmp    c002529b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025299:	31 db                	xor    ebx,ebx
c002529b:	83 c4 1c             	add    esp,0x1c
c002529e:	89 d8                	mov    eax,ebx
c00252a0:	5b                   	pop    ebx
c00252a1:	5e                   	pop    esi
c00252a2:	5f                   	pop    edi
c00252a3:	5d                   	pop    ebp
c00252a4:	c3                   	ret    
c00252a5:	90                   	nop

c00252a6 <ATAPI::diskRemoved()>:
c00252a6:	83 ec 18             	sub    esp,0x18
c00252a9:	68 15 dc 02 c0       	push   0xc002dc15
c00252ae:	e8 32 d7 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00252b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00252b7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00252be:	83 c4 1c             	add    esp,0x1c
c00252c1:	c3                   	ret    

c00252c2 <ATAPI::eject()>:
c00252c2:	57                   	push   edi
c00252c3:	b9 03 00 00 00       	mov    ecx,0x3
c00252c8:	53                   	push   ebx
c00252c9:	83 ec 14             	sub    esp,0x14
c00252cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00252d0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00252d4:	fc                   	cld    
c00252d5:	31 c0                	xor    eax,eax
c00252d7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00252d9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00252de:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00252e3:	50                   	push   eax
c00252e4:	50                   	push   eax
c00252e5:	6a 00                	push   0x0
c00252e7:	6a 00                	push   0x0
c00252e9:	6a 00                	push   0x0
c00252eb:	6a 02                	push   0x2
c00252ed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00252f1:	50                   	push   eax
c00252f2:	53                   	push   ebx
c00252f3:	e8 ee fc ff ff       	call   c0024fe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00252f8:	83 c4 14             	add    esp,0x14
c00252fb:	53                   	push   ebx
c00252fc:	e8 a5 ff ff ff       	call   c00252a6 <ATAPI::diskRemoved()>
c0025301:	83 c4 24             	add    esp,0x24
c0025304:	31 c0                	xor    eax,eax
c0025306:	5b                   	pop    ebx
c0025307:	5f                   	pop    edi
c0025308:	c3                   	ret    
c0025309:	90                   	nop

c002530a <ATAPI::diskInserted()>:
c002530a:	53                   	push   ebx
c002530b:	83 ec 14             	sub    esp,0x14
c002530e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025312:	68 2c dc 02 c0       	push   0xc002dc2c
c0025317:	e8 c9 d6 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002531c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025323:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025326:	e8 a1 ef fe ff       	call   c00142cc <PhysicalDisk::startCache()>
c002532b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002532f:	83 c4 18             	add    esp,0x18
c0025332:	5b                   	pop    ebx
c0025333:	e9 4e 12 ff ff       	jmp    c0016586 <createPartitionsForDisk(PhysicalDisk*)>

c0025338 <ATAPI::detectMedia()>:
c0025338:	56                   	push   esi
c0025339:	53                   	push   ebx
c002533a:	83 ec 28             	sub    esp,0x28
c002533d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025341:	6a 0c                	push   0xc
c0025343:	6a 00                	push   0x0
c0025345:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025349:	56                   	push   esi
c002534a:	e8 01 b4 fd ff       	call   c0000750 <memset>
c002534f:	58                   	pop    eax
c0025350:	5a                   	pop    edx
c0025351:	6a 00                	push   0x0
c0025353:	6a 00                	push   0x0
c0025355:	6a 00                	push   0x0
c0025357:	6a 00                	push   0x0
c0025359:	56                   	push   esi
c002535a:	53                   	push   ebx
c002535b:	e8 86 fc ff ff       	call   c0024fe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025360:	83 c4 1c             	add    esp,0x1c
c0025363:	6a 0c                	push   0xc
c0025365:	6a 00                	push   0x0
c0025367:	56                   	push   esi
c0025368:	e8 e3 b3 fd ff       	call   c0000750 <memset>
c002536d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025372:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025377:	59                   	pop    ecx
c0025378:	58                   	pop    eax
c0025379:	6a 01                	push   0x1
c002537b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002537f:	50                   	push   eax
c0025380:	6a 00                	push   0x0
c0025382:	6a 12                	push   0x12
c0025384:	56                   	push   esi
c0025385:	53                   	push   ebx
c0025386:	e8 5b fc ff ff       	call   c0024fe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002538b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002538f:	83 c4 20             	add    esp,0x20
c0025392:	83 e0 7f             	and    eax,0x7f
c0025395:	3c 70                	cmp    al,0x70
c0025397:	74 15                	je     c00253ae <ATAPI::detectMedia()+0x76>
c0025399:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00253a0:	75 0c                	jne    c00253ae <ATAPI::detectMedia()+0x76>
c00253a2:	83 ec 0c             	sub    esp,0xc
c00253a5:	53                   	push   ebx
c00253a6:	e8 5f ff ff ff       	call   c002530a <ATAPI::diskInserted()>
c00253ab:	83 c4 10             	add    esp,0x10
c00253ae:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00253b2:	83 e0 0f             	and    eax,0xf
c00253b5:	3c 02                	cmp    al,0x2
c00253b7:	75 1b                	jne    c00253d4 <ATAPI::detectMedia()+0x9c>
c00253b9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00253be:	75 2d                	jne    c00253ed <ATAPI::detectMedia()+0xb5>
c00253c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00253c7:	74 24                	je     c00253ed <ATAPI::detectMedia()+0xb5>
c00253c9:	83 ec 0c             	sub    esp,0xc
c00253cc:	53                   	push   ebx
c00253cd:	e8 d4 fe ff ff       	call   c00252a6 <ATAPI::diskRemoved()>
c00253d2:	eb 16                	jmp    c00253ea <ATAPI::detectMedia()+0xb2>
c00253d4:	84 c0                	test   al,al
c00253d6:	75 15                	jne    c00253ed <ATAPI::detectMedia()+0xb5>
c00253d8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00253df:	75 0c                	jne    c00253ed <ATAPI::detectMedia()+0xb5>
c00253e1:	83 ec 0c             	sub    esp,0xc
c00253e4:	53                   	push   ebx
c00253e5:	e8 20 ff ff ff       	call   c002530a <ATAPI::diskInserted()>
c00253ea:	83 c4 10             	add    esp,0x10
c00253ed:	83 c4 24             	add    esp,0x24
c00253f0:	5b                   	pop    ebx
c00253f1:	5e                   	pop    esi
c00253f2:	c3                   	ret    
c00253f3:	90                   	nop

c00253f4 <ATAPI::open(int, int, void*)>:
c00253f4:	53                   	push   ebx
c00253f5:	83 ec 08             	sub    esp,0x8
c00253f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025400:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025404:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002540a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025410:	c1 e0 06             	shl    eax,0x6
c0025413:	01 d0                	add    eax,edx
c0025415:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002541c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025422:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025429:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025433:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025439:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025440:	6a 04                	push   0x4
c0025442:	6a 0c                	push   0xc
c0025444:	51                   	push   ecx
c0025445:	52                   	push   edx
c0025446:	e8 4d e5 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002544b:	90                   	nop
c002544c:	90                   	nop
c002544d:	6a 00                	push   0x0
c002544f:	6a 0c                	push   0xc
c0025451:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025458:	50                   	push   eax
c0025459:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002545f:	e8 34 e5 ff ff       	call   c0023998 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025464:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002546b:	83 c4 14             	add    esp,0x14
c002546e:	53                   	push   ebx
c002546f:	e8 c4 fe ff ff       	call   c0025338 <ATAPI::detectMedia()>
c0025474:	31 c0                	xor    eax,eax
c0025476:	83 c4 18             	add    esp,0x18
c0025479:	5b                   	pop    ebx
c002547a:	c3                   	ret    
c002547b:	90                   	nop

c002547c <ATAPI::read(unsigned long long, int, void*)>:
c002547c:	55                   	push   ebp
c002547d:	57                   	push   edi
c002547e:	56                   	push   esi
c002547f:	53                   	push   ebx
c0025480:	83 ec 1c             	sub    esp,0x1c
c0025483:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025487:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002548b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002548f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025496:	74 41                	je     c00254d9 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025498:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002549c:	b9 03 00 00 00       	mov    ecx,0x3
c00254a1:	fc                   	cld    
c00254a2:	31 c0                	xor    eax,eax
c00254a4:	86 fb                	xchg   bl,bh
c00254a6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00254a8:	c1 c3 10             	rol    ebx,0x10
c00254ab:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00254b0:	89 e8                	mov    eax,ebp
c00254b2:	86 fb                	xchg   bl,bh
c00254b4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00254b8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00254bc:	50                   	push   eax
c00254bd:	50                   	push   eax
c00254be:	55                   	push   ebp
c00254bf:	c1 e5 0b             	shl    ebp,0xb
c00254c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00254c6:	6a 00                	push   0x0
c00254c8:	55                   	push   ebp
c00254c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00254cd:	50                   	push   eax
c00254ce:	56                   	push   esi
c00254cf:	e8 12 fb ff ff       	call   c0024fe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00254d4:	83 c4 20             	add    esp,0x20
c00254d7:	eb 1a                	jmp    c00254f3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00254d9:	83 ec 0c             	sub    esp,0xc
c00254dc:	56                   	push   esi
c00254dd:	e8 56 fe ff ff       	call   c0025338 <ATAPI::detectMedia()>
c00254e2:	83 c4 10             	add    esp,0x10
c00254e5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00254ec:	75 aa                	jne    c0025498 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00254ee:	b8 02 00 00 00       	mov    eax,0x2
c00254f3:	83 c4 1c             	add    esp,0x1c
c00254f6:	5b                   	pop    ebx
c00254f7:	5e                   	pop    esi
c00254f8:	5f                   	pop    edi
c00254f9:	5d                   	pop    ebp
c00254fa:	c3                   	ret    
c00254fb:	90                   	nop

c00254fc <SATA::close(int, int, void*)>:
c00254fc:	83 ec 0c             	sub    esp,0xc
c00254ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025503:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025509:	85 c0                	test   eax,eax
c002550b:	74 0c                	je     c0025519 <SATA::close(int, int, void*)+0x1d>
c002550d:	83 ec 0c             	sub    esp,0xc
c0025510:	8b 10                	mov    edx,DWORD PTR [eax]
c0025512:	50                   	push   eax
c0025513:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025516:	83 c4 10             	add    esp,0x10
c0025519:	31 c0                	xor    eax,eax
c002551b:	83 c4 0c             	add    esp,0xc
c002551e:	c3                   	ret    
c002551f:	90                   	nop

c0025520 <SATA::powerSaving(PowerSavingLevel)>:
c0025520:	c3                   	ret    
c0025521:	90                   	nop

c0025522 <SATA::open(int, int, void*)>:
c0025522:	56                   	push   esi
c0025523:	53                   	push   ebx
c0025524:	50                   	push   eax
c0025525:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002552d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025537:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002553d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025547:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002554b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025555:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002555b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025562:	e8 3f a7 fe ff       	call   c000fca6 <Phys::allocatePage()>
c0025567:	89 c6                	mov    esi,eax
c0025569:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002556f:	81 c6 00 10 00 00    	add    esi,0x1000
c0025575:	e8 2c a7 fe ff       	call   c000fca6 <Phys::allocatePage()>
c002557a:	39 c6                	cmp    esi,eax
c002557c:	74 10                	je     c002558e <SATA::open(int, int, void*)+0x6c>
c002557e:	83 ec 0c             	sub    esp,0xc
c0025581:	68 54 db 02 c0       	push   0xc002db54
c0025586:	e8 7a 4e ff ff       	call   c001a405 <Krnl::panic(char const*)>
c002558b:	83 c4 10             	add    esp,0x10
c002558e:	83 ec 0c             	sub    esp,0xc
c0025591:	6a 02                	push   0x2
c0025593:	e8 47 c0 fe ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c0025598:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002559e:	6a 03                	push   0x3
c00255a0:	50                   	push   eax
c00255a1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00255a7:	ff 35 d0 f3 02 c0    	push   DWORD PTR ds:0xc002f3d0
c00255ad:	e8 64 c8 fe ff       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c00255b2:	83 c4 14             	add    esp,0x14
c00255b5:	53                   	push   ebx
c00255b6:	e8 11 ed fe ff       	call   c00142cc <PhysicalDisk::startCache()>
c00255bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00255be:	e8 c3 0f ff ff       	call   c0016586 <createPartitionsForDisk(PhysicalDisk*)>
c00255c3:	83 c4 14             	add    esp,0x14
c00255c6:	31 c0                	xor    eax,eax
c00255c8:	5b                   	pop    ebx
c00255c9:	5e                   	pop    esi
c00255ca:	c3                   	ret    
c00255cb:	90                   	nop

c00255cc <SATA::SATA()>:
c00255cc:	83 ec 0c             	sub    esp,0xc
c00255cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d3:	83 ec 04             	sub    esp,0x4
c00255d6:	68 00 02 00 00       	push   0x200
c00255db:	68 68 db 02 c0       	push   0xc002db68
c00255e0:	50                   	push   eax
c00255e1:	e8 7e ec fe ff       	call   c0014264 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00255e6:	83 c4 10             	add    esp,0x10
c00255e9:	ba d8 db 02 c0       	mov    edx,0xc002dbd8
c00255ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255f2:	89 10                	mov    DWORD PTR [eax],edx
c00255f4:	90                   	nop
c00255f5:	83 c4 0c             	add    esp,0xc
c00255f8:	c3                   	ret    
c00255f9:	90                   	nop

c00255fa <SATA::access(unsigned long long, int, void*, bool)>:
c00255fa:	55                   	push   ebp
c00255fb:	57                   	push   edi
c00255fc:	56                   	push   esi
c00255fd:	53                   	push   ebx
c00255fe:	83 ec 2c             	sub    esp,0x2c
c0025601:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025605:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025609:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002560d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025611:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025615:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002561a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002561e:	7e 10                	jle    c0025630 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025620:	83 ec 0c             	sub    esp,0xc
c0025623:	68 78 db 02 c0       	push   0xc002db78
c0025628:	e8 d8 4d ff ff       	call   c001a405 <Krnl::panic(char const*)>
c002562d:	83 c4 10             	add    esp,0x10
c0025630:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025636:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002563c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025642:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025646:	89 d0                	mov    eax,edx
c0025648:	c1 e0 07             	shl    eax,0x7
c002564b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002564f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025659:	51                   	push   ecx
c002565a:	8d 42 02             	lea    eax,[edx+0x2]
c002565d:	51                   	push   ecx
c002565e:	c1 e0 07             	shl    eax,0x7
c0025661:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025665:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025669:	50                   	push   eax
c002566a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025670:	e8 e7 ef ff ff       	call   c002465c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025675:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025679:	83 c4 10             	add    esp,0x10
c002567c:	b8 01 00 00 00       	mov    eax,0x1
c0025681:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025686:	0f 84 cb 01 00 00    	je     c0025857 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002568c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025690:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025694:	c1 e0 09             	shl    eax,0x9
c0025697:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002569c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00256a0:	74 0e                	je     c00256b0 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00256a2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00256a8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00256ac:	89 c1                	mov    ecx,eax
c00256ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00256b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00256b4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00256ba:	8d 42 02             	lea    eax,[edx+0x2]
c00256bd:	c1 e0 07             	shl    eax,0x7
c00256c0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00256c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00256c6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00256cc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00256d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00256d6:	c1 e1 05             	shl    ecx,0x5
c00256d9:	01 c8                	add    eax,ecx
c00256db:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00256df:	83 e1 01             	and    ecx,0x1
c00256e2:	89 ce                	mov    esi,ecx
c00256e4:	8a 08                	mov    cl,BYTE PTR [eax]
c00256e6:	c1 e6 06             	shl    esi,0x6
c00256e9:	83 e1 bf             	and    ecx,0xffffffbf
c00256ec:	09 f1                	or     ecx,esi
c00256ee:	88 08                	mov    BYTE PTR [eax],cl
c00256f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00256f2:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00256f8:	81 c9 05 00 01 00    	or     ecx,0x10005
c00256fe:	89 08                	mov    DWORD PTR [eax],ecx
c0025700:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025706:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002570c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025712:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025715:	50                   	push   eax
c0025716:	68 90 00 00 00       	push   0x90
c002571b:	6a 00                	push   0x0
c002571d:	56                   	push   esi
c002571e:	e8 2d b0 fd ff       	call   c0000750 <memset>
c0025723:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025729:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002572d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025733:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025737:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002573b:	83 c4 10             	add    esp,0x10
c002573e:	48                   	dec    eax
c002573f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025744:	89 c1                	mov    ecx,eax
c0025746:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002574c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025751:	09 c8                	or     eax,ecx
c0025753:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025759:	66 8b 06             	mov    ax,WORD PTR [esi]
c002575c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025763:	66 25 00 7f          	and    ax,0x7f00
c0025767:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002576b:	66 0d 27 80          	or     ax,0x8027
c002576f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025774:	66 89 06             	mov    WORD PTR [esi],ax
c0025777:	19 c0                	sbb    eax,eax
c0025779:	83 e0 f0             	and    eax,0xfffffff0
c002577c:	83 c0 35             	add    eax,0x35
c002577f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025782:	89 e8                	mov    eax,ebp
c0025784:	c1 e8 10             	shr    eax,0x10
c0025787:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002578a:	89 e8                	mov    eax,ebp
c002578c:	c1 e8 18             	shr    eax,0x18
c002578f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025792:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025796:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025799:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002579d:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00257a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00257a4:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00257a8:	89 d6                	mov    esi,edx
c00257aa:	31 c0                	xor    eax,eax
c00257ac:	c1 e6 07             	shl    esi,0x7
c00257af:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00257b3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00257b9:	80 e1 88             	and    cl,0x88
c00257bc:	74 0a                	je     c00257c8 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00257be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00257c3:	74 0a                	je     c00257cf <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00257c5:	40                   	inc    eax
c00257c6:	eb eb                	jmp    c00257b3 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00257c8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00257cd:	75 0a                	jne    c00257d9 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00257cf:	83 ec 0c             	sub    esp,0xc
c00257d2:	68 b1 db 02 c0       	push   0xc002dbb1
c00257d7:	eb 56                	jmp    c002582f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00257d9:	b8 01 00 00 00       	mov    eax,0x1
c00257de:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00257e2:	c1 e2 07             	shl    edx,0x7
c00257e5:	d3 e0                	shl    eax,cl
c00257e7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00257eb:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00257f1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00257f7:	85 c8                	test   eax,ecx
c00257f9:	74 20                	je     c002581b <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00257fb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025801:	0f ba e1 1e          	bt     ecx,0x1e
c0025805:	73 ea                	jae    c00257f1 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025807:	83 ec 0c             	sub    esp,0xc
c002580a:	68 bf db 02 c0       	push   0xc002dbbf
c002580f:	e8 f1 4b ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0025814:	83 c4 10             	add    esp,0x10
c0025817:	31 c0                	xor    eax,eax
c0025819:	eb 3c                	jmp    c0025857 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002581b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025821:	0f ba e0 1e          	bt     eax,0x1e
c0025825:	73 17                	jae    c002583e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025827:	83 ec 0c             	sub    esp,0xc
c002582a:	68 bf db 02 c0       	push   0xc002dbbf
c002582f:	e8 d1 4b ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0025834:	83 c4 10             	add    esp,0x10
c0025837:	b8 01 00 00 00       	mov    eax,0x1
c002583c:	eb 19                	jmp    c0025857 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002583e:	31 c0                	xor    eax,eax
c0025840:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025845:	75 10                	jne    c0025857 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025847:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002584d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025851:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025857:	83 c4 2c             	add    esp,0x2c
c002585a:	5b                   	pop    ebx
c002585b:	5e                   	pop    esi
c002585c:	5f                   	pop    edi
c002585d:	5d                   	pop    ebp
c002585e:	c3                   	ret    
c002585f:	90                   	nop

c0025860 <SATA::read(unsigned long long, int, void*)>:
c0025860:	57                   	push   edi
c0025861:	b8 04 00 00 00       	mov    eax,0x4
c0025866:	56                   	push   esi
c0025867:	53                   	push   ebx
c0025868:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002586c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025870:	8d 7a ff             	lea    edi,[edx-0x1]
c0025873:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025877:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002587b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0025881:	77 25                	ja     c00258a8 <SATA::read(unsigned long long, int, void*)+0x48>
c0025883:	b8 06 00 00 00       	mov    eax,0x6
c0025888:	85 f6                	test   esi,esi
c002588a:	74 1c                	je     c00258a8 <SATA::read(unsigned long long, int, void*)+0x48>
c002588c:	50                   	push   eax
c002588d:	50                   	push   eax
c002588e:	6a 00                	push   0x0
c0025890:	56                   	push   esi
c0025891:	52                   	push   edx
c0025892:	53                   	push   ebx
c0025893:	51                   	push   ecx
c0025894:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025898:	e8 5d fd ff ff       	call   c00255fa <SATA::access(unsigned long long, int, void*, bool)>
c002589d:	83 c4 20             	add    esp,0x20
c00258a0:	85 c0                	test   eax,eax
c00258a2:	0f 95 c0             	setne  al
c00258a5:	0f b6 c0             	movzx  eax,al
c00258a8:	5b                   	pop    ebx
c00258a9:	5e                   	pop    esi
c00258aa:	5f                   	pop    edi
c00258ab:	c3                   	ret    

c00258ac <SATA::write(unsigned long long, int, void*)>:
c00258ac:	55                   	push   ebp
c00258ad:	b8 04 00 00 00       	mov    eax,0x4
c00258b2:	57                   	push   edi
c00258b3:	56                   	push   esi
c00258b4:	53                   	push   ebx
c00258b5:	83 ec 0c             	sub    esp,0xc
c00258b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00258bc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00258c0:	8d 73 ff             	lea    esi,[ebx-0x1]
c00258c3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00258c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00258cb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00258d1:	77 3d                	ja     c0025910 <SATA::write(unsigned long long, int, void*)+0x64>
c00258d3:	b8 06 00 00 00       	mov    eax,0x6
c00258d8:	85 ed                	test   ebp,ebp
c00258da:	74 34                	je     c0025910 <SATA::write(unsigned long long, int, void*)+0x64>
c00258dc:	c1 e3 09             	shl    ebx,0x9
c00258df:	01 eb                	add    ebx,ebp
c00258e1:	89 d6                	mov    esi,edx
c00258e3:	89 cf                	mov    edi,ecx
c00258e5:	83 c6 01             	add    esi,0x1
c00258e8:	83 d7 00             	adc    edi,0x0
c00258eb:	50                   	push   eax
c00258ec:	50                   	push   eax
c00258ed:	6a 01                	push   0x1
c00258ef:	55                   	push   ebp
c00258f0:	81 c5 00 02 00 00    	add    ebp,0x200
c00258f6:	6a 01                	push   0x1
c00258f8:	51                   	push   ecx
c00258f9:	52                   	push   edx
c00258fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00258fe:	e8 f7 fc ff ff       	call   c00255fa <SATA::access(unsigned long long, int, void*, bool)>
c0025903:	83 c4 20             	add    esp,0x20
c0025906:	89 f2                	mov    edx,esi
c0025908:	89 f9                	mov    ecx,edi
c002590a:	39 dd                	cmp    ebp,ebx
c002590c:	75 d3                	jne    c00258e1 <SATA::write(unsigned long long, int, void*)+0x35>
c002590e:	31 c0                	xor    eax,eax
c0025910:	83 c4 0c             	add    esp,0xc
c0025913:	5b                   	pop    ebx
c0025914:	5e                   	pop    esi
c0025915:	5f                   	pop    edi
c0025916:	5d                   	pop    ebp
c0025917:	c3                   	ret    

c0025918 <SATAPI::write(unsigned long long, int, void*)>:
c0025918:	b8 03 00 00 00       	mov    eax,0x3
c002591d:	c3                   	ret    

c002591e <SATAPI::close(int, int, void*)>:
c002591e:	83 ec 0c             	sub    esp,0xc
c0025921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025925:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002592b:	85 c0                	test   eax,eax
c002592d:	74 0c                	je     c002593b <SATAPI::close(int, int, void*)+0x1d>
c002592f:	83 ec 0c             	sub    esp,0xc
c0025932:	8b 10                	mov    edx,DWORD PTR [eax]
c0025934:	50                   	push   eax
c0025935:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025938:	83 c4 10             	add    esp,0x10
c002593b:	31 c0                	xor    eax,eax
c002593d:	83 c4 0c             	add    esp,0xc
c0025940:	c3                   	ret    
c0025941:	90                   	nop

c0025942 <SATAPI::SATAPI()>:
c0025942:	83 ec 0c             	sub    esp,0xc
c0025945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025949:	83 ec 04             	sub    esp,0x4
c002594c:	68 00 08 00 00       	push   0x800
c0025951:	68 08 dc 02 c0       	push   0xc002dc08
c0025956:	50                   	push   eax
c0025957:	e8 08 e9 fe ff       	call   c0014264 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002595c:	83 c4 10             	add    esp,0x10
c002595f:	ba b4 dc 02 c0       	mov    edx,0xc002dcb4
c0025964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025968:	89 10                	mov    DWORD PTR [eax],edx
c002596a:	90                   	nop
c002596b:	83 c4 0c             	add    esp,0xc
c002596e:	c3                   	ret    
c002596f:	90                   	nop

c0025970 <SATAPI::diskRemoved()>:
c0025970:	83 ec 18             	sub    esp,0x18
c0025973:	68 14 dc 02 c0       	push   0xc002dc14
c0025978:	e8 68 d0 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002597d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025981:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025988:	83 c4 1c             	add    esp,0x1c
c002598b:	c3                   	ret    

c002598c <SATAPI::diskInserted()>:
c002598c:	53                   	push   ebx
c002598d:	83 ec 14             	sub    esp,0x14
c0025990:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025994:	68 2b dc 02 c0       	push   0xc002dc2b
c0025999:	e8 47 d0 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002599e:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00259a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00259a8:	e8 1f e9 fe ff       	call   c00142cc <PhysicalDisk::startCache()>
c00259ad:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00259b1:	83 c4 18             	add    esp,0x18
c00259b4:	5b                   	pop    ebx
c00259b5:	e9 cc 0b ff ff       	jmp    c0016586 <createPartitionsForDisk(PhysicalDisk*)>

c00259ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00259ba:	55                   	push   ebp
c00259bb:	57                   	push   edi
c00259bc:	56                   	push   esi
c00259bd:	53                   	push   ebx
c00259be:	83 ec 34             	sub    esp,0x34
c00259c1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00259c5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259c9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00259cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00259d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00259d5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00259db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00259e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00259e5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00259eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00259ef:	c1 e0 07             	shl    eax,0x7
c00259f2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00259f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00259fa:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025a04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025a08:	8d 58 02             	lea    ebx,[eax+0x2]
c0025a0b:	c1 e3 07             	shl    ebx,0x7
c0025a0e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025a12:	53                   	push   ebx
c0025a13:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025a19:	e8 3e ec ff ff       	call   c002465c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025a1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025a22:	83 c4 10             	add    esp,0x10
c0025a25:	b8 01 00 00 00       	mov    eax,0x1
c0025a2a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025a2f:	0f 84 85 01 00 00    	je     c0025bba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025a35:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025a3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025a3d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025a43:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025a49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a4d:	c1 e1 05             	shl    ecx,0x5
c0025a50:	01 c8                	add    eax,ecx
c0025a52:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025a54:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025a5a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025a60:	89 08                	mov    DWORD PTR [eax],ecx
c0025a62:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025a68:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025a6e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025a74:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025a77:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025a7a:	50                   	push   eax
c0025a7b:	68 90 00 00 00       	push   0x90
c0025a80:	6a 00                	push   0x0
c0025a82:	53                   	push   ebx
c0025a83:	e8 c8 ac fd ff       	call   c0000750 <memset>
c0025a88:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025a8c:	b9 0c 00 00 00       	mov    ecx,0xc
c0025a91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025a93:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025a99:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025a9d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025aa3:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025aa7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025aab:	48                   	dec    eax
c0025aac:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025ab1:	89 c1                	mov    ecx,eax
c0025ab3:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025ab9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025abe:	09 c8                	or     eax,ecx
c0025ac0:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025ac6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025ac9:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025ad0:	66 25 00 7f          	and    ax,0x7f00
c0025ad4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025ad8:	66 0d 27 80          	or     ax,0x8027
c0025adc:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025ae0:	66 89 03             	mov    WORD PTR [ebx],ax
c0025ae3:	89 d0                	mov    eax,edx
c0025ae5:	c1 ea 18             	shr    edx,0x18
c0025ae8:	c1 e8 10             	shr    eax,0x10
c0025aeb:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025aee:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025af1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025af5:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025af8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025afc:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025aff:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025b03:	83 c4 10             	add    esp,0x10
c0025b06:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025b0a:	31 c0                	xor    eax,eax
c0025b0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025b10:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025b16:	80 e2 88             	and    dl,0x88
c0025b19:	74 0a                	je     c0025b25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025b1b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025b20:	74 0a                	je     c0025b2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025b22:	40                   	inc    eax
c0025b23:	eb eb                	jmp    c0025b10 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025b25:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025b2a:	75 0f                	jne    c0025b3b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025b2c:	83 ec 0c             	sub    esp,0xc
c0025b2f:	68 b1 db 02 c0       	push   0xc002dbb1
c0025b34:	e8 cc 48 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0025b39:	eb 3f                	jmp    c0025b7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025b3b:	ba 01 00 00 00       	mov    edx,0x1
c0025b40:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025b44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025b48:	d3 e2                	shl    edx,cl
c0025b4a:	c1 e0 07             	shl    eax,0x7
c0025b4d:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025b53:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025b57:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025b5d:	85 ca                	test   edx,ecx
c0025b5f:	74 23                	je     c0025b84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025b61:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025b67:	0f ba e1 1e          	bt     ecx,0x1e
c0025b6b:	73 ea                	jae    c0025b57 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025b6d:	83 ec 0c             	sub    esp,0xc
c0025b70:	68 43 dc 02 c0       	push   0xc002dc43
c0025b75:	e8 6b ce fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0025b7a:	83 c4 10             	add    esp,0x10
c0025b7d:	b8 01 00 00 00       	mov    eax,0x1
c0025b82:	eb 36                	jmp    c0025bba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025b84:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025b8a:	0f ba e0 1e          	bt     eax,0x1e
c0025b8e:	73 0a                	jae    c0025b9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025b90:	83 ec 0c             	sub    esp,0xc
c0025b93:	68 56 dc 02 c0       	push   0xc002dc56
c0025b98:	eb db                	jmp    c0025b75 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025b9a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025b9f:	74 17                	je     c0025bb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025ba1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025ba6:	74 10                	je     c0025bb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025ba8:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025bae:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025bb2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025bb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025bb8:	31 c0                	xor    eax,eax
c0025bba:	83 c4 2c             	add    esp,0x2c
c0025bbd:	5b                   	pop    ebx
c0025bbe:	5e                   	pop    esi
c0025bbf:	5f                   	pop    edi
c0025bc0:	5d                   	pop    ebp
c0025bc1:	c3                   	ret    

c0025bc2 <SATAPI::eject()>:
c0025bc2:	57                   	push   edi
c0025bc3:	b9 03 00 00 00       	mov    ecx,0x3
c0025bc8:	53                   	push   ebx
c0025bc9:	83 ec 14             	sub    esp,0x14
c0025bcc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025bd0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025bd4:	fc                   	cld    
c0025bd5:	31 c0                	xor    eax,eax
c0025bd7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025bd9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025bde:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025be3:	50                   	push   eax
c0025be4:	6a 00                	push   0x0
c0025be6:	6a 00                	push   0x0
c0025be8:	6a 00                	push   0x0
c0025bea:	6a 00                	push   0x0
c0025bec:	6a 02                	push   0x2
c0025bee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025bf2:	50                   	push   eax
c0025bf3:	53                   	push   ebx
c0025bf4:	e8 c1 fd ff ff       	call   c00259ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025bf9:	83 c4 14             	add    esp,0x14
c0025bfc:	53                   	push   ebx
c0025bfd:	e8 6e fd ff ff       	call   c0025970 <SATAPI::diskRemoved()>
c0025c02:	83 c4 24             	add    esp,0x24
c0025c05:	31 c0                	xor    eax,eax
c0025c07:	5b                   	pop    ebx
c0025c08:	5f                   	pop    edi
c0025c09:	c3                   	ret    

c0025c0a <SATAPI::detectMedia()>:
c0025c0a:	56                   	push   esi
c0025c0b:	53                   	push   ebx
c0025c0c:	83 ec 28             	sub    esp,0x28
c0025c0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c13:	6a 0c                	push   0xc
c0025c15:	6a 00                	push   0x0
c0025c17:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025c1b:	56                   	push   esi
c0025c1c:	e8 2f ab fd ff       	call   c0000750 <memset>
c0025c21:	83 c4 0c             	add    esp,0xc
c0025c24:	6a 00                	push   0x0
c0025c26:	6a 00                	push   0x0
c0025c28:	6a 00                	push   0x0
c0025c2a:	6a 00                	push   0x0
c0025c2c:	6a 00                	push   0x0
c0025c2e:	56                   	push   esi
c0025c2f:	53                   	push   ebx
c0025c30:	e8 85 fd ff ff       	call   c00259ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025c35:	83 c4 1c             	add    esp,0x1c
c0025c38:	6a 0c                	push   0xc
c0025c3a:	6a 00                	push   0x0
c0025c3c:	56                   	push   esi
c0025c3d:	e8 0e ab fd ff       	call   c0000750 <memset>
c0025c42:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025c47:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025c4c:	83 c4 0c             	add    esp,0xc
c0025c4f:	6a 01                	push   0x1
c0025c51:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025c55:	50                   	push   eax
c0025c56:	6a 00                	push   0x0
c0025c58:	6a 00                	push   0x0
c0025c5a:	6a 12                	push   0x12
c0025c5c:	56                   	push   esi
c0025c5d:	53                   	push   ebx
c0025c5e:	e8 57 fd ff ff       	call   c00259ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025c63:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025c67:	83 c4 20             	add    esp,0x20
c0025c6a:	83 e0 7f             	and    eax,0x7f
c0025c6d:	3c 70                	cmp    al,0x70
c0025c6f:	74 15                	je     c0025c86 <SATAPI::detectMedia()+0x7c>
c0025c71:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c78:	75 0c                	jne    c0025c86 <SATAPI::detectMedia()+0x7c>
c0025c7a:	83 ec 0c             	sub    esp,0xc
c0025c7d:	53                   	push   ebx
c0025c7e:	e8 09 fd ff ff       	call   c002598c <SATAPI::diskInserted()>
c0025c83:	83 c4 10             	add    esp,0x10
c0025c86:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025c8a:	83 e0 0f             	and    eax,0xf
c0025c8d:	3c 02                	cmp    al,0x2
c0025c8f:	75 1b                	jne    c0025cac <SATAPI::detectMedia()+0xa2>
c0025c91:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025c96:	75 2d                	jne    c0025cc5 <SATAPI::detectMedia()+0xbb>
c0025c98:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025c9f:	74 24                	je     c0025cc5 <SATAPI::detectMedia()+0xbb>
c0025ca1:	83 ec 0c             	sub    esp,0xc
c0025ca4:	53                   	push   ebx
c0025ca5:	e8 c6 fc ff ff       	call   c0025970 <SATAPI::diskRemoved()>
c0025caa:	eb 16                	jmp    c0025cc2 <SATAPI::detectMedia()+0xb8>
c0025cac:	84 c0                	test   al,al
c0025cae:	75 15                	jne    c0025cc5 <SATAPI::detectMedia()+0xbb>
c0025cb0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025cb7:	75 0c                	jne    c0025cc5 <SATAPI::detectMedia()+0xbb>
c0025cb9:	83 ec 0c             	sub    esp,0xc
c0025cbc:	53                   	push   ebx
c0025cbd:	e8 ca fc ff ff       	call   c002598c <SATAPI::diskInserted()>
c0025cc2:	83 c4 10             	add    esp,0x10
c0025cc5:	83 c4 24             	add    esp,0x24
c0025cc8:	5b                   	pop    ebx
c0025cc9:	5e                   	pop    esi
c0025cca:	c3                   	ret    
c0025ccb:	90                   	nop

c0025ccc <SATAPI::open(int, int, void*)>:
c0025ccc:	56                   	push   esi
c0025ccd:	53                   	push   ebx
c0025cce:	50                   	push   eax
c0025ccf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025cd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025cd7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025ce1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025ce7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025cf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025cf5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025cff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025d05:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025d0c:	e8 95 9f fe ff       	call   c000fca6 <Phys::allocatePage()>
c0025d11:	89 c6                	mov    esi,eax
c0025d13:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025d19:	81 c6 00 10 00 00    	add    esi,0x1000
c0025d1f:	e8 82 9f fe ff       	call   c000fca6 <Phys::allocatePage()>
c0025d24:	39 c6                	cmp    esi,eax
c0025d26:	74 10                	je     c0025d38 <SATAPI::open(int, int, void*)+0x6c>
c0025d28:	83 ec 0c             	sub    esp,0xc
c0025d2b:	68 6b dc 02 c0       	push   0xc002dc6b
c0025d30:	e8 d0 46 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0025d35:	83 c4 10             	add    esp,0x10
c0025d38:	83 ec 0c             	sub    esp,0xc
c0025d3b:	6a 02                	push   0x2
c0025d3d:	e8 9d b8 fe ff       	call   c00115df <Virt::allocateKernelVirtualPages(int)>
c0025d42:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025d48:	6a 03                	push   0x3
c0025d4a:	50                   	push   eax
c0025d4b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025d51:	ff 35 d0 f3 02 c0    	push   DWORD PTR ds:0xc002f3d0
c0025d57:	e8 ba c0 fe ff       	call   c0011e16 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025d5c:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025d63:	83 c4 14             	add    esp,0x14
c0025d66:	53                   	push   ebx
c0025d67:	e8 9e fe ff ff       	call   c0025c0a <SATAPI::detectMedia()>
c0025d6c:	83 c4 14             	add    esp,0x14
c0025d6f:	31 c0                	xor    eax,eax
c0025d71:	5b                   	pop    ebx
c0025d72:	5e                   	pop    esi
c0025d73:	c3                   	ret    

c0025d74 <SATAPI::read(unsigned long long, int, void*)>:
c0025d74:	55                   	push   ebp
c0025d75:	57                   	push   edi
c0025d76:	56                   	push   esi
c0025d77:	53                   	push   ebx
c0025d78:	83 ec 1c             	sub    esp,0x1c
c0025d7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025d7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025d83:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025d87:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025d8e:	74 19                	je     c0025da9 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025d90:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025d95:	7e 2e                	jle    c0025dc5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025d97:	83 ec 0c             	sub    esp,0xc
c0025d9a:	68 81 dc 02 c0       	push   0xc002dc81
c0025d9f:	e8 61 46 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0025da4:	83 c4 10             	add    esp,0x10
c0025da7:	eb 1c                	jmp    c0025dc5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025da9:	83 ec 0c             	sub    esp,0xc
c0025dac:	55                   	push   ebp
c0025dad:	e8 58 fe ff ff       	call   c0025c0a <SATAPI::detectMedia()>
c0025db2:	83 c4 10             	add    esp,0x10
c0025db5:	b8 02 00 00 00       	mov    eax,0x2
c0025dba:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025dc1:	75 cd                	jne    c0025d90 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025dc3:	eb 49                	jmp    c0025e0e <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025dc5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025dc9:	b9 03 00 00 00       	mov    ecx,0x3
c0025dce:	fc                   	cld    
c0025dcf:	31 c0                	xor    eax,eax
c0025dd1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025dd3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025dd8:	89 d8                	mov    eax,ebx
c0025dda:	86 e0                	xchg   al,ah
c0025ddc:	c1 c0 10             	rol    eax,0x10
c0025ddf:	86 e0                	xchg   al,ah
c0025de1:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025de5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025de9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025ded:	50                   	push   eax
c0025dee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025df2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025df6:	56                   	push   esi
c0025df7:	53                   	push   ebx
c0025df8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025dfc:	c1 e0 0b             	shl    eax,0xb
c0025dff:	50                   	push   eax
c0025e00:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025e04:	50                   	push   eax
c0025e05:	55                   	push   ebp
c0025e06:	e8 af fb ff ff       	call   c00259ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025e0b:	83 c4 20             	add    esp,0x20
c0025e0e:	83 c4 1c             	add    esp,0x1c
c0025e11:	5b                   	pop    ebx
c0025e12:	5e                   	pop    esi
c0025e13:	5f                   	pop    edi
c0025e14:	5d                   	pop    ebp
c0025e15:	c3                   	ret    

c0025e16 <AVX::open(int, int, void*)>:
c0025e16:	83 ec 0c             	sub    esp,0xc
c0025e19:	e8 3a 11 00 00       	call   c0026f58 <avxInit>
c0025e1e:	b8 00 00 00 00       	mov    eax,0x0
c0025e23:	83 c4 0c             	add    esp,0xc
c0025e26:	c3                   	ret    
c0025e27:	90                   	nop

c0025e28 <AVX::close(int, int, void*)>:
c0025e28:	83 ec 0c             	sub    esp,0xc
c0025e2b:	e8 29 11 00 00       	call   c0026f59 <avxClose>
c0025e30:	b8 00 00 00 00       	mov    eax,0x0
c0025e35:	83 c4 0c             	add    esp,0xc
c0025e38:	c3                   	ret    
c0025e39:	90                   	nop

c0025e3a <AVX::available()>:
c0025e3a:	83 ec 0c             	sub    esp,0xc
c0025e3d:	e8 0e 11 00 00       	call   c0026f50 <avxDetect>
c0025e42:	85 c0                	test   eax,eax
c0025e44:	0f 95 c0             	setne  al
c0025e47:	83 c4 0c             	add    esp,0xc
c0025e4a:	c3                   	ret    
c0025e4b:	90                   	nop

c0025e4c <AVX::save(void*)>:
c0025e4c:	83 ec 0c             	sub    esp,0xc
c0025e4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e53:	83 ec 0c             	sub    esp,0xc
c0025e56:	50                   	push   eax
c0025e57:	e8 fa 10 00 00       	call   c0026f56 <avxSave>
c0025e5c:	83 c4 10             	add    esp,0x10
c0025e5f:	90                   	nop
c0025e60:	83 c4 0c             	add    esp,0xc
c0025e63:	c3                   	ret    

c0025e64 <AVX::load(void*)>:
c0025e64:	83 ec 0c             	sub    esp,0xc
c0025e67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e6b:	83 ec 0c             	sub    esp,0xc
c0025e6e:	50                   	push   eax
c0025e6f:	e8 e3 10 00 00       	call   c0026f57 <avxLoad>
c0025e74:	83 c4 10             	add    esp,0x10
c0025e77:	90                   	nop
c0025e78:	83 c4 0c             	add    esp,0xc
c0025e7b:	c3                   	ret    

c0025e7c <AVX::AVX()>:
c0025e7c:	83 ec 0c             	sub    esp,0xc
c0025e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e83:	83 ec 08             	sub    esp,0x8
c0025e86:	68 e4 dc 02 c0       	push   0xc002dce4
c0025e8b:	50                   	push   eax
c0025e8c:	e8 b1 e4 fe ff       	call   c0014342 <FPU::FPU(char const*)>
c0025e91:	83 c4 10             	add    esp,0x10
c0025e94:	ba f4 dc 02 c0       	mov    edx,0xc002dcf4
c0025e99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e9d:	89 10                	mov    DWORD PTR [eax],edx
c0025e9f:	90                   	nop
c0025ea0:	83 c4 0c             	add    esp,0xc
c0025ea3:	c3                   	ret    

c0025ea4 <MMX::available()>:
c0025ea4:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0025ea9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025eaf:	83 e0 20             	and    eax,0x20
c0025eb2:	84 c0                	test   al,al
c0025eb4:	0f 95 c0             	setne  al
c0025eb7:	c3                   	ret    

c0025eb8 <MMX::open(int, int, void*)>:
c0025eb8:	83 ec 0c             	sub    esp,0xc
c0025ebb:	e8 22 11 00 00       	call   c0026fe2 <x87Init>
c0025ec0:	b8 00 00 00 00       	mov    eax,0x0
c0025ec5:	83 c4 0c             	add    esp,0xc
c0025ec8:	c3                   	ret    
c0025ec9:	90                   	nop

c0025eca <MMX::close(int, int, void*)>:
c0025eca:	83 ec 0c             	sub    esp,0xc
c0025ecd:	e8 2a 11 00 00       	call   c0026ffc <x87Close>
c0025ed2:	b8 00 00 00 00       	mov    eax,0x0
c0025ed7:	83 c4 0c             	add    esp,0xc
c0025eda:	c3                   	ret    
c0025edb:	90                   	nop

c0025edc <MMX::save(void*)>:
c0025edc:	83 ec 0c             	sub    esp,0xc
c0025edf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ee3:	83 ec 0c             	sub    esp,0xc
c0025ee6:	50                   	push   eax
c0025ee7:	e8 e5 10 00 00       	call   c0026fd1 <x87Save>
c0025eec:	83 c4 10             	add    esp,0x10
c0025eef:	90                   	nop
c0025ef0:	83 c4 0c             	add    esp,0xc
c0025ef3:	c3                   	ret    

c0025ef4 <MMX::load(void*)>:
c0025ef4:	83 ec 0c             	sub    esp,0xc
c0025ef7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025efb:	83 ec 0c             	sub    esp,0xc
c0025efe:	50                   	push   eax
c0025eff:	e8 d6 10 00 00       	call   c0026fda <x87Load>
c0025f04:	83 c4 10             	add    esp,0x10
c0025f07:	90                   	nop
c0025f08:	83 c4 0c             	add    esp,0xc
c0025f0b:	c3                   	ret    

c0025f0c <MMX::MMX()>:
c0025f0c:	83 ec 0c             	sub    esp,0xc
c0025f0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f13:	83 ec 08             	sub    esp,0x8
c0025f16:	68 24 dd 02 c0       	push   0xc002dd24
c0025f1b:	50                   	push   eax
c0025f1c:	e8 21 e4 fe ff       	call   c0014342 <FPU::FPU(char const*)>
c0025f21:	83 c4 10             	add    esp,0x10
c0025f24:	ba 34 dd 02 c0       	mov    edx,0xc002dd34
c0025f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f2d:	89 10                	mov    DWORD PTR [eax],edx
c0025f2f:	90                   	nop
c0025f30:	83 c4 0c             	add    esp,0xc
c0025f33:	c3                   	ret    

c0025f34 <SSE::open(int, int, void*)>:
c0025f34:	83 ec 0c             	sub    esp,0xc
c0025f37:	e8 58 10 00 00       	call   c0026f94 <sseInit>
c0025f3c:	b8 00 00 00 00       	mov    eax,0x0
c0025f41:	83 c4 0c             	add    esp,0xc
c0025f44:	c3                   	ret    
c0025f45:	90                   	nop

c0025f46 <SSE::close(int, int, void*)>:
c0025f46:	83 ec 0c             	sub    esp,0xc
c0025f49:	e8 56 10 00 00       	call   c0026fa4 <sseClose>
c0025f4e:	b8 00 00 00 00       	mov    eax,0x0
c0025f53:	83 c4 0c             	add    esp,0xc
c0025f56:	c3                   	ret    
c0025f57:	90                   	nop

c0025f58 <SSE::available()>:
c0025f58:	83 ec 1c             	sub    esp,0x1c
c0025f5b:	e8 10 10 00 00       	call   c0026f70 <absolutelyNoChanceInHell>
c0025f60:	85 c0                	test   eax,eax
c0025f62:	0f 95 c0             	setne  al
c0025f65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025f69:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025f6d:	83 c4 1c             	add    esp,0x1c
c0025f70:	c3                   	ret    
c0025f71:	90                   	nop

c0025f72 <SSE::save(void*)>:
c0025f72:	83 ec 0c             	sub    esp,0xc
c0025f75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f79:	83 ec 0c             	sub    esp,0xc
c0025f7c:	50                   	push   eax
c0025f7d:	e8 06 10 00 00       	call   c0026f88 <sseSave>
c0025f82:	83 c4 10             	add    esp,0x10
c0025f85:	90                   	nop
c0025f86:	83 c4 0c             	add    esp,0xc
c0025f89:	c3                   	ret    

c0025f8a <SSE::load(void*)>:
c0025f8a:	83 ec 0c             	sub    esp,0xc
c0025f8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f91:	83 ec 0c             	sub    esp,0xc
c0025f94:	50                   	push   eax
c0025f95:	e8 f4 0f 00 00       	call   c0026f8e <sseLoad>
c0025f9a:	83 c4 10             	add    esp,0x10
c0025f9d:	90                   	nop
c0025f9e:	83 c4 0c             	add    esp,0xc
c0025fa1:	c3                   	ret    

c0025fa2 <SSE::SSE()>:
c0025fa2:	83 ec 0c             	sub    esp,0xc
c0025fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa9:	83 ec 08             	sub    esp,0x8
c0025fac:	68 64 dd 02 c0       	push   0xc002dd64
c0025fb1:	50                   	push   eax
c0025fb2:	e8 8b e3 fe ff       	call   c0014342 <FPU::FPU(char const*)>
c0025fb7:	83 c4 10             	add    esp,0x10
c0025fba:	ba 74 dd 02 c0       	mov    edx,0xc002dd74
c0025fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc3:	89 10                	mov    DWORD PTR [eax],edx
c0025fc5:	90                   	nop
c0025fc6:	83 c4 0c             	add    esp,0xc
c0025fc9:	c3                   	ret    

c0025fca <x87::open(int, int, void*)>:
c0025fca:	83 ec 0c             	sub    esp,0xc
c0025fcd:	e8 10 10 00 00       	call   c0026fe2 <x87Init>
c0025fd2:	b8 00 00 00 00       	mov    eax,0x0
c0025fd7:	83 c4 0c             	add    esp,0xc
c0025fda:	c3                   	ret    
c0025fdb:	90                   	nop

c0025fdc <x87::close(int, int, void*)>:
c0025fdc:	83 ec 0c             	sub    esp,0xc
c0025fdf:	e8 18 10 00 00       	call   c0026ffc <x87Close>
c0025fe4:	b8 00 00 00 00       	mov    eax,0x0
c0025fe9:	83 c4 0c             	add    esp,0xc
c0025fec:	c3                   	ret    
c0025fed:	90                   	nop

c0025fee <x87::available()>:
c0025fee:	83 ec 0c             	sub    esp,0xc
c0025ff1:	e8 c0 0f 00 00       	call   c0026fb6 <x87Detect>
c0025ff6:	85 c0                	test   eax,eax
c0025ff8:	0f 95 c0             	setne  al
c0025ffb:	83 c4 0c             	add    esp,0xc
c0025ffe:	c3                   	ret    
c0025fff:	90                   	nop

c0026000 <x87::save(void*)>:
c0026000:	83 ec 0c             	sub    esp,0xc
c0026003:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026007:	83 ec 0c             	sub    esp,0xc
c002600a:	50                   	push   eax
c002600b:	e8 c1 0f 00 00       	call   c0026fd1 <x87Save>
c0026010:	83 c4 10             	add    esp,0x10
c0026013:	90                   	nop
c0026014:	83 c4 0c             	add    esp,0xc
c0026017:	c3                   	ret    

c0026018 <x87::load(void*)>:
c0026018:	83 ec 0c             	sub    esp,0xc
c002601b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002601f:	83 ec 0c             	sub    esp,0xc
c0026022:	50                   	push   eax
c0026023:	e8 b2 0f 00 00       	call   c0026fda <x87Load>
c0026028:	83 c4 10             	add    esp,0x10
c002602b:	90                   	nop
c002602c:	83 c4 0c             	add    esp,0xc
c002602f:	c3                   	ret    

c0026030 <x87::x87()>:
c0026030:	83 ec 0c             	sub    esp,0xc
c0026033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026037:	83 ec 08             	sub    esp,0x8
c002603a:	68 a4 dd 02 c0       	push   0xc002dda4
c002603f:	50                   	push   eax
c0026040:	e8 fd e2 fe ff       	call   c0014342 <FPU::FPU(char const*)>
c0026045:	83 c4 10             	add    esp,0x10
c0026048:	ba b4 dd 02 c0       	mov    edx,0xc002ddb4
c002604d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026051:	89 10                	mov    DWORD PTR [eax],edx
c0026053:	90                   	nop
c0026054:	83 c4 0c             	add    esp,0xc
c0026057:	c3                   	ret    

c0026058 <APIC::disable()>:
c0026058:	90                   	nop
c0026059:	c3                   	ret    

c002605a <APIC::close(int, int, void*)>:
c002605a:	55                   	push   ebp
c002605b:	89 e5                	mov    ebp,esp
c002605d:	83 ec 08             	sub    esp,0x8
c0026060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026063:	8b 00                	mov    eax,DWORD PTR [eax]
c0026065:	83 c0 3c             	add    eax,0x3c
c0026068:	8b 00                	mov    eax,DWORD PTR [eax]
c002606a:	83 ec 0c             	sub    esp,0xc
c002606d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026070:	ff d0                	call   eax
c0026072:	83 c4 10             	add    esp,0x10
c0026075:	b8 00 00 00 00       	mov    eax,0x0
c002607a:	c9                   	leave  
c002607b:	c3                   	ret    

c002607c <IOAPIC::close(int, int, void*)>:
c002607c:	b8 00 00 00 00       	mov    eax,0x0
c0026081:	c3                   	ret    

c0026082 <APIC::io_wait()>:
c0026082:	eb 00                	jmp    c0026084 <APIC::io_wait()+0x2>
c0026084:	eb 00                	jmp    c0026086 <APIC::io_wait()+0x4>
c0026086:	90                   	nop
c0026087:	c3                   	ret    

c0026088 <APIC::getBase()>:
c0026088:	55                   	push   ebp
c0026089:	89 e5                	mov    ebp,esp
c002608b:	83 ec 18             	sub    esp,0x18
c002608e:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0026093:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0026099:	83 e0 08             	and    eax,0x8
c002609c:	84 c0                	test   al,al
c002609e:	75 07                	jne    c00260a7 <APIC::getBase()+0x1f>
c00260a0:	b8 00 00 00 00       	mov    eax,0x0
c00260a5:	eb 21                	jmp    c00260c8 <APIC::getBase()+0x40>
c00260a7:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00260ac:	83 ec 08             	sub    esp,0x8
c00260af:	6a 1b                	push   0x1b
c00260b1:	50                   	push   eax
c00260b2:	e8 cd 8d fe ff       	call   c000ee84 <Computer::rdmsr(unsigned int)>
c00260b7:	83 c4 10             	add    esp,0x10
c00260ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00260bd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00260c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00260c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00260c8:	c9                   	leave  
c00260c9:	c3                   	ret    

c00260ca <APIC::eoi(unsigned char)>:
c00260ca:	55                   	push   ebp
c00260cb:	89 e5                	mov    ebp,esp
c00260cd:	83 ec 28             	sub    esp,0x28
c00260d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00260d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00260d6:	83 ec 0c             	sub    esp,0xc
c00260d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260dc:	e8 a7 ff ff ff       	call   c0026088 <APIC::getBase()>
c00260e1:	83 c4 10             	add    esp,0x10
c00260e4:	05 b0 00 00 00       	add    eax,0xb0
c00260e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00260ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00260ef:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00260f5:	90                   	nop
c00260f6:	c9                   	leave  
c00260f7:	c3                   	ret    

c00260f8 <APIC::open(int, int, void*)>:
c00260f8:	55                   	push   ebp
c00260f9:	89 e5                	mov    ebp,esp
c00260fb:	57                   	push   edi
c00260fc:	56                   	push   esi
c00260fd:	53                   	push   ebx
c00260fe:	83 ec 2c             	sub    esp,0x2c
c0026101:	83 ec 0c             	sub    esp,0xc
c0026104:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026107:	e8 7c ff ff ff       	call   c0026088 <APIC::getBase()>
c002610c:	83 c4 10             	add    esp,0x10
c002610f:	89 c2                	mov    edx,eax
c0026111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026114:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002611a:	0f b6 f8             	movzx  edi,al
c002611d:	89 d0                	mov    eax,edx
c002611f:	ba 00 00 00 00       	mov    edx,0x0
c0026124:	89 c1                	mov    ecx,eax
c0026126:	80 e5 ff             	and    ch,0xff
c0026129:	89 cb                	mov    ebx,ecx
c002612b:	0f b6 f2             	movzx  esi,dl
c002612e:	89 d8                	mov    eax,ebx
c0026130:	89 f2                	mov    edx,esi
c0026132:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026135:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026138:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002613c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026140:	83 e0 00             	and    eax,0x0
c0026143:	09 d0                	or     eax,edx
c0026145:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002614c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026152:	8d 50 01             	lea    edx,[eax+0x1]
c0026155:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026158:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002615e:	0f b6 d0             	movzx  edx,al
c0026161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026164:	83 c2 08             	add    edx,0x8
c0026167:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002616b:	0f b6 c9             	movzx  ecx,cl
c002616e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026174:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026178:	83 ec 0c             	sub    esp,0xc
c002617b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002617e:	e8 05 ff ff ff       	call   c0026088 <APIC::getBase()>
c0026183:	83 c4 10             	add    esp,0x10
c0026186:	05 f0 00 00 00       	add    eax,0xf0
c002618b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002618e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026191:	8b 00                	mov    eax,DWORD PTR [eax]
c0026193:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026196:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002619d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00261a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00261a7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00261aa:	89 10                	mov    DWORD PTR [eax],edx
c00261ac:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00261b3:	a1 30 1b 03 c0       	mov    eax,ds:0xc0031b30
c00261b8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00261bb:	7d 7c                	jge    c0026239 <APIC::open(int, int, void*)+0x141>
c00261bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00261c0:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c00261c7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00261ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00261cd:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c00261d4:	c1 e8 08             	shr    eax,0x8
c00261d7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00261db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00261de:	8b 04 85 40 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce4c0]
c00261e5:	c1 e8 18             	shr    eax,0x18
c00261e8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00261eb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00261ef:	75 40                	jne    c0026231 <APIC::open(int, int, void*)+0x139>
c00261f1:	83 ec 0c             	sub    esp,0xc
c00261f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f7:	e8 8c fe ff ff       	call   c0026088 <APIC::getBase()>
c00261fc:	83 c4 10             	add    esp,0x10
c00261ff:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0026203:	75 07                	jne    c002620c <APIC::open(int, int, void*)+0x114>
c0026205:	ba 60 03 00 00       	mov    edx,0x360
c002620a:	eb 05                	jmp    c0026211 <APIC::open(int, int, void*)+0x119>
c002620c:	ba 50 03 00 00       	mov    edx,0x350
c0026211:	01 d0                	add    eax,edx
c0026213:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026216:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026219:	8b 00                	mov    eax,DWORD PTR [eax]
c002621b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002621e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026225:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026229:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002622c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002622f:	89 10                	mov    DWORD PTR [eax],edx
c0026231:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026234:	e9 7a ff ff ff       	jmp    c00261b3 <APIC::open(int, int, void*)+0xbb>
c0026239:	b8 00 00 00 00       	mov    eax,0x0
c002623e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026241:	5b                   	pop    ebx
c0026242:	5e                   	pop    esi
c0026243:	5f                   	pop    edi
c0026244:	5d                   	pop    ebp
c0026245:	c3                   	ret    

c0026246 <IOAPIC::IOAPIC()>:
c0026246:	83 ec 0c             	sub    esp,0xc
c0026249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002624d:	83 ec 08             	sub    esp,0x8
c0026250:	68 e4 dd 02 c0       	push   0xc002dde4
c0026255:	50                   	push   eax
c0026256:	e8 c7 dd fe ff       	call   c0014022 <Device::Device(char const*)>
c002625b:	83 c4 10             	add    esp,0x10
c002625e:	ba 0c df 02 c0       	mov    edx,0xc002df0c
c0026263:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026267:	89 10                	mov    DWORD PTR [eax],edx
c0026269:	90                   	nop
c002626a:	83 c4 0c             	add    esp,0xc
c002626d:	c3                   	ret    

c002626e <APIC::APIC()>:
c002626e:	53                   	push   ebx
c002626f:	83 ec 18             	sub    esp,0x18
c0026272:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026276:	83 ec 08             	sub    esp,0x8
c0026279:	68 ec dd 02 c0       	push   0xc002ddec
c002627e:	50                   	push   eax
c002627f:	e8 18 e5 fe ff       	call   c001479c <InterruptController::InterruptController(char const*)>
c0026284:	83 c4 10             	add    esp,0x10
c0026287:	ba c4 de 02 c0       	mov    edx,0xc002dec4
c002628c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026290:	89 10                	mov    DWORD PTR [eax],edx
c0026292:	a0 00 36 03 c0       	mov    al,ds:0xc0033600
c0026297:	83 f0 01             	xor    eax,0x1
c002629a:	84 c0                	test   al,al
c002629c:	0f 84 a1 00 00 00    	je     c0026343 <APIC::APIC()+0xd5>
c00262a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00262a7:	a0 e0 1b 03 c0       	mov    al,ds:0xc0031be0
c00262ac:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00262b0:	0f 83 86 00 00 00    	jae    c002633c <APIC::APIC()+0xce>
c00262b6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00262be:	83 ec 0c             	sub    esp,0xc
c00262c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00262c5:	e8 38 96 fe ff       	call   c000f902 <malloc>
c00262ca:	83 c4 10             	add    esp,0x10
c00262cd:	89 c3                	mov    ebx,eax
c00262cf:	83 ec 0c             	sub    esp,0xc
c00262d2:	53                   	push   ebx
c00262d3:	e8 6e ff ff ff       	call   c0026246 <IOAPIC::IOAPIC()>
c00262d8:	83 c4 10             	add    esp,0x10
c00262db:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00262df:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00262e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00262e8:	89 14 85 e0 35 03 c0 	mov    DWORD PTR [eax*4-0x3ffcca20],edx
c00262ef:	a1 c0 35 03 c0       	mov    eax,ds:0xc00335c0
c00262f4:	40                   	inc    eax
c00262f5:	a3 c0 35 03 c0       	mov    ds:0xc00335c0,eax
c00262fa:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c00262ff:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0026305:	83 ec 08             	sub    esp,0x8
c0026308:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002630c:	50                   	push   eax
c002630d:	e8 0c db fe ff       	call   c0013e1e <Device::addChild(Device*)>
c0026312:	83 c4 10             	add    esp,0x10
c0026315:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026319:	8b 00                	mov    eax,DWORD PTR [eax]
c002631b:	83 c0 08             	add    eax,0x8
c002631e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026320:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026325:	6a 00                	push   0x0
c0026327:	6a 00                	push   0x0
c0026329:	52                   	push   edx
c002632a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002632e:	ff d0                	call   eax
c0026330:	83 c4 10             	add    esp,0x10
c0026333:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026337:	e9 6b ff ff ff       	jmp    c00262a7 <APIC::APIC()+0x39>
c002633c:	c6 05 00 36 03 c0 01 	mov    BYTE PTR ds:0xc0033600,0x1
c0026343:	90                   	nop
c0026344:	83 c4 18             	add    esp,0x18
c0026347:	5b                   	pop    ebx
c0026348:	c3                   	ret    
c0026349:	90                   	nop

c002634a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002634a:	55                   	push   ebp
c002634b:	89 e5                	mov    ebp,esp
c002634d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026350:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026356:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026359:	72 1d                	jb     c0026378 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002635b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002635e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026364:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026367:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002636d:	01 d0                	add    eax,edx
c002636f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026372:	73 04                	jae    c0026378 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026374:	b0 01                	mov    al,0x1
c0026376:	eb 02                	jmp    c002637a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026378:	b0 00                	mov    al,0x0
c002637a:	5d                   	pop    ebp
c002637b:	c3                   	ret    

c002637c <IOAPIC::read(int)>:
c002637c:	55                   	push   ebp
c002637d:	89 e5                	mov    ebp,esp
c002637f:	83 ec 10             	sub    esp,0x10
c0026382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026385:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002638b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002638e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026391:	0f b6 d0             	movzx  edx,al
c0026394:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026397:	89 10                	mov    DWORD PTR [eax],edx
c0026399:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002639c:	83 c0 10             	add    eax,0x10
c002639f:	8b 00                	mov    eax,DWORD PTR [eax]
c00263a1:	c9                   	leave  
c00263a2:	c3                   	ret    
c00263a3:	90                   	nop

c00263a4 <IOAPIC::open(int, int, void*)>:
c00263a4:	55                   	push   ebp
c00263a5:	89 e5                	mov    ebp,esp
c00263a7:	57                   	push   edi
c00263a8:	56                   	push   esi
c00263a9:	53                   	push   ebx
c00263aa:	83 ec 0c             	sub    esp,0xc
c00263ad:	83 ec 0c             	sub    esp,0xc
c00263b0:	68 17 de 02 c0       	push   0xc002de17
c00263b5:	e8 2b c6 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c00263ba:	83 c4 10             	add    esp,0x10
c00263bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00263c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00263c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00263d2:	8b 14 85 20 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce3e0]
c00263d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263dc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00263e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00263eb:	8b 14 85 a0 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce360]
c00263f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263f5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00263fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263fe:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0026404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026407:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002640d:	0f b6 f8             	movzx  edi,al
c0026410:	89 d0                	mov    eax,edx
c0026412:	ba 00 00 00 00       	mov    edx,0x0
c0026417:	89 c1                	mov    ecx,eax
c0026419:	80 e5 ff             	and    ch,0xff
c002641c:	89 cb                	mov    ebx,ecx
c002641e:	0f b6 f2             	movzx  esi,dl
c0026421:	89 d8                	mov    eax,ebx
c0026423:	89 f2                	mov    edx,esi
c0026425:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026428:	8d 5f 08             	lea    ebx,[edi+0x8]
c002642b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002642f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026433:	83 e0 00             	and    eax,0x0
c0026436:	09 d0                	or     eax,edx
c0026438:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002643c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002643f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026445:	8d 50 01             	lea    edx,[eax+0x1]
c0026448:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002644b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026451:	0f b6 d0             	movzx  edx,al
c0026454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026457:	83 c2 08             	add    edx,0x8
c002645a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002645e:	0f b6 c9             	movzx  ecx,cl
c0026461:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026467:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002646b:	83 ec 08             	sub    esp,0x8
c002646e:	6a 01                	push   0x1
c0026470:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026473:	e8 04 ff ff ff       	call   c002637c <IOAPIC::read(int)>
c0026478:	83 c4 10             	add    esp,0x10
c002647b:	c1 f8 10             	sar    eax,0x10
c002647e:	0f b6 c0             	movzx  eax,al
c0026481:	8d 50 01             	lea    edx,[eax+0x1]
c0026484:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026487:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002648d:	b8 00 00 00 00       	mov    eax,0x0
c0026492:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026495:	5b                   	pop    ebx
c0026496:	5e                   	pop    esi
c0026497:	5f                   	pop    edi
c0026498:	5d                   	pop    ebp
c0026499:	c3                   	ret    

c002649a <IOAPIC::write(int, int)>:
c002649a:	55                   	push   ebp
c002649b:	89 e5                	mov    ebp,esp
c002649d:	83 ec 10             	sub    esp,0x10
c00264a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00264a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00264a9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00264ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264af:	0f b6 d0             	movzx  edx,al
c00264b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00264b5:	89 10                	mov    DWORD PTR [eax],edx
c00264b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00264ba:	8d 50 10             	lea    edx,[eax+0x10]
c00264bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00264c0:	89 02                	mov    DWORD PTR [edx],eax
c00264c2:	90                   	nop
c00264c3:	c9                   	leave  
c00264c4:	c3                   	ret    
c00264c5:	90                   	nop

c00264c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00264c6:	55                   	push   ebp
c00264c7:	89 e5                	mov    ebp,esp
c00264c9:	53                   	push   ebx
c00264ca:	83 ec 2c             	sub    esp,0x2c
c00264cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264d0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00264d3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00264d6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00264d9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00264dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00264df:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00264e2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00264e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00264e8:	88 d8                	mov    al,bl
c00264ea:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00264ed:	88 c8                	mov    al,cl
c00264ef:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00264f2:	88 d0                	mov    al,dl
c00264f4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00264f7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00264fb:	83 c0 08             	add    eax,0x8
c00264fe:	01 c0                	add    eax,eax
c0026500:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026503:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026507:	83 c0 08             	add    eax,0x8
c002650a:	01 c0                	add    eax,eax
c002650c:	40                   	inc    eax
c002650d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026510:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026513:	50                   	push   eax
c0026514:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026517:	e8 60 fe ff ff       	call   c002637c <IOAPIC::read(int)>
c002651c:	83 c4 08             	add    esp,0x8
c002651f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026522:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026529:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002652c:	c1 e0 18             	shl    eax,0x18
c002652f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026532:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026535:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026538:	52                   	push   edx
c0026539:	50                   	push   eax
c002653a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002653d:	e8 58 ff ff ff       	call   c002649a <IOAPIC::write(int, int)>
c0026542:	83 c4 0c             	add    esp,0xc
c0026545:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026548:	50                   	push   eax
c0026549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002654c:	e8 2b fe ff ff       	call   c002637c <IOAPIC::read(int)>
c0026551:	83 c4 08             	add    esp,0x8
c0026554:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026557:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002655e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026565:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002656c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026570:	74 09                	je     c002657b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026572:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026579:	eb 07                	jmp    c0026582 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002657b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026582:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026586:	74 09                	je     c0026591 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026588:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002658f:	eb 07                	jmp    c0026598 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026591:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026598:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002659f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00265a3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00265a6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00265a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00265ac:	52                   	push   edx
c00265ad:	50                   	push   eax
c00265ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00265b1:	e8 e4 fe ff ff       	call   c002649a <IOAPIC::write(int, int)>
c00265b6:	83 c4 0c             	add    esp,0xc
c00265b9:	90                   	nop
c00265ba:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00265bd:	c9                   	leave  
c00265be:	c3                   	ret    
c00265bf:	90                   	nop

c00265c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00265c0:	55                   	push   ebp
c00265c1:	89 e5                	mov    ebp,esp
c00265c3:	57                   	push   edi
c00265c4:	56                   	push   esi
c00265c5:	53                   	push   ebx
c00265c6:	83 ec 2c             	sub    esp,0x2c
c00265c9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00265cc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00265cf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00265d3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00265d7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00265db:	74 5a                	je     c0026637 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00265dd:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00265e1:	7f 44                	jg     c0026627 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00265e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265e6:	05 c0 e4 02 c0       	add    eax,0xc002e4c0
c00265eb:	8a 00                	mov    al,BYTE PTR [eax]
c00265ed:	0f b6 c0             	movzx  eax,al
c00265f0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00265f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265f6:	66 8b 84 00 c0 1b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce440]
c00265fe:	0f b7 c0             	movzx  eax,ax
c0026601:	83 e0 02             	and    eax,0x2
c0026604:	85 c0                	test   eax,eax
c0026606:	74 04                	je     c002660c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026608:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002660c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002660f:	66 8b 84 00 c0 1b 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce440]
c0026617:	0f b7 c0             	movzx  eax,ax
c002661a:	83 e0 08             	and    eax,0x8
c002661d:	85 c0                	test   eax,eax
c002661f:	74 16                	je     c0026637 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026621:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026625:	eb 10                	jmp    c0026637 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026627:	83 ec 0c             	sub    esp,0xc
c002662a:	68 28 de 02 c0       	push   0xc002de28
c002662f:	e8 d1 3d ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0026634:	83 c4 10             	add    esp,0x10
c0026637:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002663b:	a1 c0 35 03 c0       	mov    eax,ds:0xc00335c0
c0026640:	83 ec 08             	sub    esp,0x8
c0026643:	50                   	push   eax
c0026644:	68 60 de 02 c0       	push   0xc002de60
c0026649:	e8 97 c3 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002664e:	83 c4 10             	add    esp,0x10
c0026651:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026658:	a1 c0 35 03 c0       	mov    eax,ds:0xc00335c0
c002665d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026660:	7d 67                	jge    c00266c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026662:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026665:	8b 04 85 e0 35 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcca20]
c002666c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002666f:	83 ec 08             	sub    esp,0x8
c0026672:	52                   	push   edx
c0026673:	50                   	push   eax
c0026674:	e8 d1 fc ff ff       	call   c002634a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026679:	83 c4 10             	add    esp,0x10
c002667c:	84 c0                	test   al,al
c002667e:	74 44                	je     c00266c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026680:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026683:	8b 1c 85 e0 35 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcca20]
c002668a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002668e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026691:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026695:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026698:	83 c0 20             	add    eax,0x20
c002669b:	0f b6 f0             	movzx  esi,al
c002669e:	b8 00 00 00 00       	mov    eax,0x0
c00266a3:	99                   	cdq    
c00266a4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00266a7:	0f b6 c9             	movzx  ecx,cl
c00266aa:	83 ec 04             	sub    esp,0x4
c00266ad:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00266b0:	57                   	push   edi
c00266b1:	56                   	push   esi
c00266b2:	52                   	push   edx
c00266b3:	50                   	push   eax
c00266b4:	51                   	push   ecx
c00266b5:	53                   	push   ebx
c00266b6:	e8 0b fe ff ff       	call   c00264c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00266bb:	83 c4 20             	add    esp,0x20
c00266be:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00266c2:	eb 05                	jmp    c00266c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00266c4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00266c7:	eb 8f                	jmp    c0026658 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00266c9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00266cc:	83 f0 01             	xor    eax,0x1
c00266cf:	84 c0                	test   al,al
c00266d1:	74 10                	je     c00266e3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00266d3:	83 ec 0c             	sub    esp,0xc
c00266d6:	68 77 de 02 c0       	push   0xc002de77
c00266db:	e8 25 3d ff ff       	call   c001a405 <Krnl::panic(char const*)>
c00266e0:	83 c4 10             	add    esp,0x10
c00266e3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00266e7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00266ee:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00266f2:	7f 65                	jg     c0026759 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00266f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00266fa:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026701:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026704:	01 ca                	add    edx,ecx
c0026706:	83 c2 54             	add    edx,0x54
c0026709:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002670d:	85 c0                	test   eax,eax
c002670f:	75 43                	jne    c0026754 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026714:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026717:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002671e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026721:	01 ca                	add    edx,ecx
c0026723:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026726:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026729:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002672d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026730:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026733:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002673a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002673d:	01 ca                	add    edx,ecx
c002673f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026745:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026748:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002674c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002674f:	83 e8 20             	sub    eax,0x20
c0026752:	eb 1a                	jmp    c002676e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026754:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026757:	eb 95                	jmp    c00266ee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026759:	83 ec 0c             	sub    esp,0xc
c002675c:	68 84 de 02 c0       	push   0xc002de84
c0026761:	e8 9f 3c ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0026766:	83 c4 10             	add    esp,0x10
c0026769:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002676e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026771:	5b                   	pop    ebx
c0026772:	5e                   	pop    esi
c0026773:	5f                   	pop    edi
c0026774:	5d                   	pop    ebp
c0026775:	c3                   	ret    

c0026776 <PIC::disable()>:
c0026776:	55                   	push   ebp
c0026777:	89 e5                	mov    ebp,esp
c0026779:	83 ec 10             	sub    esp,0x10
c002677c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026782:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026786:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026789:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002678d:	ee                   	out    dx,al
c002678e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026794:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026798:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002679b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002679f:	ee                   	out    dx,al
c00267a0:	90                   	nop
c00267a1:	c9                   	leave  
c00267a2:	c3                   	ret    
c00267a3:	90                   	nop

c00267a4 <PIC::close(int, int, void*)>:
c00267a4:	55                   	push   ebp
c00267a5:	89 e5                	mov    ebp,esp
c00267a7:	83 ec 08             	sub    esp,0x8
c00267aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00267af:	83 c0 3c             	add    eax,0x3c
c00267b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00267b4:	83 ec 0c             	sub    esp,0xc
c00267b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267ba:	ff d0                	call   eax
c00267bc:	83 c4 10             	add    esp,0x10
c00267bf:	b8 00 00 00 00       	mov    eax,0x0
c00267c4:	c9                   	leave  
c00267c5:	c3                   	ret    

c00267c6 <PIC::PIC()>:
c00267c6:	83 ec 0c             	sub    esp,0xc
c00267c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267cd:	83 ec 08             	sub    esp,0x8
c00267d0:	68 30 df 02 c0       	push   0xc002df30
c00267d5:	50                   	push   eax
c00267d6:	e8 c1 df fe ff       	call   c001479c <InterruptController::InterruptController(char const*)>
c00267db:	83 c4 10             	add    esp,0x10
c00267de:	ba 5c df 02 c0       	mov    edx,0xc002df5c
c00267e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267e7:	89 10                	mov    DWORD PTR [eax],edx
c00267e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00267f3:	0f b6 d0             	movzx  edx,al
c00267f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00267fa:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026805:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002680b:	0f b6 d0             	movzx  edx,al
c002680e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026812:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002681b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026821:	8d 50 01             	lea    edx,[eax+0x1]
c0026824:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026828:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002682e:	0f b6 d0             	movzx  edx,al
c0026831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026835:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026839:	83 e1 3f             	and    ecx,0x3f
c002683c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002684a:	0f b6 d0             	movzx  edx,al
c002684d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026851:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002685c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026862:	0f b6 d0             	movzx  edx,al
c0026865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026869:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002686e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026872:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026878:	8d 50 01             	lea    edx,[eax+0x1]
c002687b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002687f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026885:	0f b6 d0             	movzx  edx,al
c0026888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002688c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026890:	83 e1 3f             	and    ecx,0x3f
c0026893:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026897:	90                   	nop
c0026898:	83 c4 0c             	add    esp,0xc
c002689b:	c3                   	ret    

c002689c <PIC::ioWait()>:
c002689c:	eb 00                	jmp    c002689e <PIC::ioWait()+0x2>
c002689e:	eb 00                	jmp    c00268a0 <PIC::ioWait()+0x4>
c00268a0:	90                   	nop
c00268a1:	c3                   	ret    

c00268a2 <PIC::getIRQReg(int)>:
c00268a2:	55                   	push   ebp
c00268a3:	89 e5                	mov    ebp,esp
c00268a5:	83 ec 10             	sub    esp,0x10
c00268a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268ab:	0f b6 c0             	movzx  eax,al
c00268ae:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00268b4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00268b7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00268ba:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00268be:	ee                   	out    dx,al
c00268bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00268c2:	0f b6 c0             	movzx  eax,al
c00268c5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00268cb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00268ce:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00268d1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00268d5:	ee                   	out    dx,al
c00268d6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00268dc:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00268e0:	89 c2                	mov    edx,eax
c00268e2:	ec                   	in     al,dx
c00268e3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00268e6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00268e9:	0f b6 c0             	movzx  eax,al
c00268ec:	c1 e0 08             	shl    eax,0x8
c00268ef:	89 c1                	mov    ecx,eax
c00268f1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00268f7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00268fb:	89 c2                	mov    edx,eax
c00268fd:	ec                   	in     al,dx
c00268fe:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026901:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026904:	0f b6 c0             	movzx  eax,al
c0026907:	09 c8                	or     eax,ecx
c0026909:	c9                   	leave  
c002690a:	c3                   	ret    
c002690b:	90                   	nop

c002690c <PIC::eoi(unsigned char)>:
c002690c:	55                   	push   ebp
c002690d:	89 e5                	mov    ebp,esp
c002690f:	83 ec 14             	sub    esp,0x14
c0026912:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026915:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026918:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002691c:	75 1e                	jne    c002693c <PIC::eoi(unsigned char)+0x30>
c002691e:	6a 0b                	push   0xb
c0026920:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026923:	e8 7a ff ff ff       	call   c00268a2 <PIC::getIRQReg(int)>
c0026928:	83 c4 08             	add    esp,0x8
c002692b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002692f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026933:	25 80 00 00 00       	and    eax,0x80
c0026938:	85 c0                	test   eax,eax
c002693a:	74 5f                	je     c002699b <PIC::eoi(unsigned char)+0x8f>
c002693c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026940:	75 2d                	jne    c002696f <PIC::eoi(unsigned char)+0x63>
c0026942:	6a 0b                	push   0xb
c0026944:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026947:	e8 56 ff ff ff       	call   c00268a2 <PIC::getIRQReg(int)>
c002694c:	83 c4 08             	add    esp,0x8
c002694f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026953:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026956:	66 85 c0             	test   ax,ax
c0026959:	78 14                	js     c002696f <PIC::eoi(unsigned char)+0x63>
c002695b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026961:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026965:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026968:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002696c:	ee                   	out    dx,al
c002696d:	eb 2d                	jmp    c002699c <PIC::eoi(unsigned char)+0x90>
c002696f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026973:	76 12                	jbe    c0026987 <PIC::eoi(unsigned char)+0x7b>
c0026975:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002697b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002697f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026982:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026986:	ee                   	out    dx,al
c0026987:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002698d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026991:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026994:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026998:	ee                   	out    dx,al
c0026999:	eb 01                	jmp    c002699c <PIC::eoi(unsigned char)+0x90>
c002699b:	90                   	nop
c002699c:	c9                   	leave  
c002699d:	c3                   	ret    

c002699e <PIC::remap()>:
c002699e:	55                   	push   ebp
c002699f:	89 e5                	mov    ebp,esp
c00269a1:	83 ec 48             	sub    esp,0x48
c00269a4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00269ab:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00269b2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00269b8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00269bb:	89 c2                	mov    edx,eax
c00269bd:	ec                   	in     al,dx
c00269be:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00269c1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00269c4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00269c7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00269cd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00269d0:	89 c2                	mov    edx,eax
c00269d2:	ec                   	in     al,dx
c00269d3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00269d6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00269d9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00269dc:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00269e2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00269e6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00269e9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00269ec:	ee                   	out    dx,al
c00269ed:	83 ec 0c             	sub    esp,0xc
c00269f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269f3:	e8 a4 fe ff ff       	call   c002689c <PIC::ioWait()>
c00269f8:	83 c4 10             	add    esp,0x10
c00269fb:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026a01:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026a05:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026a08:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026a0b:	ee                   	out    dx,al
c0026a0c:	83 ec 0c             	sub    esp,0xc
c0026a0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a12:	e8 85 fe ff ff       	call   c002689c <PIC::ioWait()>
c0026a17:	83 c4 10             	add    esp,0x10
c0026a1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026a1d:	0f b6 c0             	movzx  eax,al
c0026a20:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026a26:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026a29:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026a2c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026a2f:	ee                   	out    dx,al
c0026a30:	83 ec 0c             	sub    esp,0xc
c0026a33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a36:	e8 61 fe ff ff       	call   c002689c <PIC::ioWait()>
c0026a3b:	83 c4 10             	add    esp,0x10
c0026a3e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a41:	0f b6 c0             	movzx  eax,al
c0026a44:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026a4a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026a4d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026a50:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026a53:	ee                   	out    dx,al
c0026a54:	83 ec 0c             	sub    esp,0xc
c0026a57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a5a:	e8 3d fe ff ff       	call   c002689c <PIC::ioWait()>
c0026a5f:	83 c4 10             	add    esp,0x10
c0026a62:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026a68:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026a6c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026a6f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026a72:	ee                   	out    dx,al
c0026a73:	83 ec 0c             	sub    esp,0xc
c0026a76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a79:	e8 1e fe ff ff       	call   c002689c <PIC::ioWait()>
c0026a7e:	83 c4 10             	add    esp,0x10
c0026a81:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026a87:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026a8b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026a8e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a91:	ee                   	out    dx,al
c0026a92:	83 ec 0c             	sub    esp,0xc
c0026a95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a98:	e8 ff fd ff ff       	call   c002689c <PIC::ioWait()>
c0026a9d:	83 c4 10             	add    esp,0x10
c0026aa0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026aa6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026aaa:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026aad:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026ab0:	ee                   	out    dx,al
c0026ab1:	83 ec 0c             	sub    esp,0xc
c0026ab4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ab7:	e8 e0 fd ff ff       	call   c002689c <PIC::ioWait()>
c0026abc:	83 c4 10             	add    esp,0x10
c0026abf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026ac5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026ac9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026acc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026acf:	ee                   	out    dx,al
c0026ad0:	83 ec 0c             	sub    esp,0xc
c0026ad3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ad6:	e8 c1 fd ff ff       	call   c002689c <PIC::ioWait()>
c0026adb:	83 c4 10             	add    esp,0x10
c0026ade:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026ae2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026ae8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026aeb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026aee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026af1:	ee                   	out    dx,al
c0026af2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026af6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026afc:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026aff:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026b02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026b05:	ee                   	out    dx,al
c0026b06:	90                   	nop
c0026b07:	c9                   	leave  
c0026b08:	c3                   	ret    
c0026b09:	90                   	nop

c0026b0a <PIC::open(int, int, void*)>:
c0026b0a:	55                   	push   ebp
c0026b0b:	89 e5                	mov    ebp,esp
c0026b0d:	83 ec 18             	sub    esp,0x18
c0026b10:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026b16:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026b1a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026b1d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026b21:	ee                   	out    dx,al
c0026b22:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026b28:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026b2c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026b2f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026b33:	ee                   	out    dx,al
c0026b34:	83 ec 0c             	sub    esp,0xc
c0026b37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026b3a:	e8 5f fe ff ff       	call   c002699e <PIC::remap()>
c0026b3f:	83 c4 10             	add    esp,0x10
c0026b42:	b8 00 00 00 00       	mov    eax,0x0
c0026b47:	c9                   	leave  
c0026b48:	c3                   	ret    
c0026b49:	90                   	nop

c0026b4a <APICTimer::close(int, int, void*)>:
c0026b4a:	b8 00 00 00 00       	mov    eax,0x0
c0026b4f:	c3                   	ret    

c0026b50 <apicTimerHandler(regs*, void*)>:
c0026b50:	83 ec 0c             	sub    esp,0xc
c0026b53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b59:	99                   	cdq    
c0026b5a:	52                   	push   edx
c0026b5b:	50                   	push   eax
c0026b5c:	6a 00                	push   0x0
c0026b5e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026b63:	e8 8c 07 00 00       	call   c00272f4 <__udivdi3>
c0026b68:	83 c4 10             	add    esp,0x10
c0026b6b:	83 ec 08             	sub    esp,0x8
c0026b6e:	52                   	push   edx
c0026b6f:	50                   	push   eax
c0026b70:	e8 b6 fd fe ff       	call   c001692b <timerHandler(unsigned long long)>
c0026b75:	83 c4 10             	add    esp,0x10
c0026b78:	90                   	nop
c0026b79:	83 c4 0c             	add    esp,0xc
c0026b7c:	c3                   	ret    
c0026b7d:	90                   	nop

c0026b7e <APICTimer::write(int)>:
c0026b7e:	53                   	push   ebx
c0026b7f:	83 ec 28             	sub    esp,0x28
c0026b82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026b8a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026b90:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0026b95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b9b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026ba1:	83 ec 0c             	sub    esp,0xc
c0026ba4:	50                   	push   eax
c0026ba5:	e8 de f4 ff ff       	call   c0026088 <APIC::getBase()>
c0026baa:	83 c4 10             	add    esp,0x10
c0026bad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026bb1:	a1 d0 f8 02 c0       	mov    eax,ds:0xc002f8d0
c0026bb6:	8b 15 d4 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f8d4
c0026bbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026bc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026bc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bc8:	05 e0 03 00 00       	add    eax,0x3e0
c0026bcd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026bd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026bd7:	05 80 03 00 00       	add    eax,0x380
c0026bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026be2:	fb                   	sti    
c0026be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026be7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026beb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026bf0:	83 d2 00             	adc    edx,0x0
c0026bf3:	89 c1                	mov    ecx,eax
c0026bf5:	89 d3                	mov    ebx,edx
c0026bf7:	a1 d0 f8 02 c0       	mov    eax,ds:0xc002f8d0
c0026bfc:	8b 15 d4 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f8d4
c0026c02:	39 c8                	cmp    eax,ecx
c0026c04:	89 d0                	mov    eax,edx
c0026c06:	19 d8                	sbb    eax,ebx
c0026c08:	73 02                	jae    c0026c0c <APICTimer::write(int)+0x8e>
c0026c0a:	eb d7                	jmp    c0026be3 <APICTimer::write(int)+0x65>
c0026c0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c10:	05 20 03 00 00       	add    eax,0x320
c0026c15:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026c1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c1f:	05 90 03 00 00       	add    eax,0x390
c0026c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c26:	f7 d0                	not    eax
c0026c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c2c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026c30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026c34:	ba 00 00 00 00       	mov    edx,0x0
c0026c39:	f7 f3                	div    ebx
c0026c3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026c43:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026c49:	0d 00 00 02 00       	or     eax,0x20000
c0026c4e:	89 c2                	mov    edx,eax
c0026c50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c54:	05 20 03 00 00       	add    eax,0x320
c0026c59:	89 10                	mov    DWORD PTR [eax],edx
c0026c5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c5f:	05 e0 03 00 00       	add    eax,0x3e0
c0026c64:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026c6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026c6e:	05 80 03 00 00       	add    eax,0x380
c0026c73:	89 c2                	mov    edx,eax
c0026c75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026c79:	89 02                	mov    DWORD PTR [edx],eax
c0026c7b:	90                   	nop
c0026c7c:	83 c4 28             	add    esp,0x28
c0026c7f:	5b                   	pop    ebx
c0026c80:	c3                   	ret    
c0026c81:	90                   	nop

c0026c82 <APICTimer::open(int, int, void*)>:
c0026c82:	57                   	push   edi
c0026c83:	56                   	push   esi
c0026c84:	53                   	push   ebx
c0026c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c8b:	83 c0 24             	add    eax,0x24
c0026c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c90:	83 ec 08             	sub    esp,0x8
c0026c93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c9b:	ff d0                	call   eax
c0026c9d:	83 c4 10             	add    esp,0x10
c0026ca0:	a1 68 f2 02 c0       	mov    eax,ds:0xc002f268
c0026ca5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026cab:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026cb1:	83 ec 0c             	sub    esp,0xc
c0026cb4:	50                   	push   eax
c0026cb5:	e8 ce f3 ff ff       	call   c0026088 <APIC::getBase()>
c0026cba:	83 c4 10             	add    esp,0x10
c0026cbd:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026cc7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026ccd:	0f b6 f8             	movzx  edi,al
c0026cd0:	89 d0                	mov    eax,edx
c0026cd2:	ba 00 00 00 00       	mov    edx,0x0
c0026cd7:	89 c1                	mov    ecx,eax
c0026cd9:	80 e5 ff             	and    ch,0xff
c0026cdc:	89 cb                	mov    ebx,ecx
c0026cde:	0f b6 f2             	movzx  esi,dl
c0026ce1:	89 d8                	mov    eax,ebx
c0026ce3:	89 f2                	mov    edx,esi
c0026ce5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026ce9:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026cec:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026cf0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026cf4:	83 e0 00             	and    eax,0x0
c0026cf7:	09 d0                	or     eax,edx
c0026cf9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d01:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026d07:	8d 50 01             	lea    edx,[eax+0x1]
c0026d0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026d0e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026d14:	0f b6 d0             	movzx  edx,al
c0026d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d1b:	83 c2 08             	add    edx,0x8
c0026d1e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026d22:	0f b6 c9             	movzx  ecx,cl
c0026d25:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026d2b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026d37:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026d45:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026d4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026d4f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026d55:	83 ec 0c             	sub    esp,0xc
c0026d58:	51                   	push   ecx
c0026d59:	6a 01                	push   0x1
c0026d5b:	68 50 6b 02 c0       	push   0xc0026b50
c0026d60:	52                   	push   edx
c0026d61:	50                   	push   eax
c0026d62:	e8 2f d0 fe ff       	call   c0013d96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d67:	83 c4 20             	add    esp,0x20
c0026d6a:	89 c2                	mov    edx,eax
c0026d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d70:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d76:	b8 00 00 00 00       	mov    eax,0x0
c0026d7b:	5b                   	pop    ebx
c0026d7c:	5e                   	pop    esi
c0026d7d:	5f                   	pop    edi
c0026d7e:	c3                   	ret    
c0026d7f:	90                   	nop

c0026d80 <APICTimer::APICTimer()>:
c0026d80:	83 ec 0c             	sub    esp,0xc
c0026d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d87:	83 ec 08             	sub    esp,0x8
c0026d8a:	68 9c df 02 c0       	push   0xc002df9c
c0026d8f:	50                   	push   eax
c0026d90:	e8 07 fb fe ff       	call   c001689c <Timer::Timer(char const*)>
c0026d95:	83 c4 10             	add    esp,0x10
c0026d98:	ba b0 df 02 c0       	mov    edx,0xc002dfb0
c0026d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da1:	89 10                	mov    DWORD PTR [eax],edx
c0026da3:	90                   	nop
c0026da4:	83 c4 0c             	add    esp,0xc
c0026da7:	c3                   	ret    

c0026da8 <PIT::write(int)>:
c0026da8:	83 ec 10             	sub    esp,0x10
c0026dab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026daf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026db3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026db9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026dbd:	a3 04 36 03 c0       	mov    ds:0xc0033604,eax
c0026dc2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026dc7:	99                   	cdq    
c0026dc8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026dcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026dd0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026dd7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026ddc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026de0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026de5:	ee                   	out    dx,al
c0026de6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026dea:	0f b6 c0             	movzx  eax,al
c0026ded:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026df4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026df8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026dfc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026e01:	ee                   	out    dx,al
c0026e02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026e06:	c1 f8 08             	sar    eax,0x8
c0026e09:	0f b6 c0             	movzx  eax,al
c0026e0c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026e13:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026e17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026e1b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026e20:	ee                   	out    dx,al
c0026e21:	90                   	nop
c0026e22:	83 c4 10             	add    esp,0x10
c0026e25:	c3                   	ret    

c0026e26 <pitHandler(regs*, void*)>:
c0026e26:	83 ec 0c             	sub    esp,0xc
c0026e29:	a1 04 36 03 c0       	mov    eax,ds:0xc0033604
c0026e2e:	99                   	cdq    
c0026e2f:	52                   	push   edx
c0026e30:	50                   	push   eax
c0026e31:	6a 00                	push   0x0
c0026e33:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026e38:	e8 b7 04 00 00       	call   c00272f4 <__udivdi3>
c0026e3d:	83 c4 10             	add    esp,0x10
c0026e40:	83 ec 08             	sub    esp,0x8
c0026e43:	52                   	push   edx
c0026e44:	50                   	push   eax
c0026e45:	e8 e1 fa fe ff       	call   c001692b <timerHandler(unsigned long long)>
c0026e4a:	83 c4 10             	add    esp,0x10
c0026e4d:	90                   	nop
c0026e4e:	83 c4 0c             	add    esp,0xc
c0026e51:	c3                   	ret    

c0026e52 <PIT::open(int, int, void*)>:
c0026e52:	83 ec 0c             	sub    esp,0xc
c0026e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e5b:	83 c0 24             	add    eax,0x24
c0026e5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e60:	83 ec 08             	sub    esp,0x8
c0026e63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026e6b:	ff d0                	call   eax
c0026e6d:	83 c4 10             	add    esp,0x10
c0026e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e74:	83 ec 0c             	sub    esp,0xc
c0026e77:	6a 00                	push   0x0
c0026e79:	6a 01                	push   0x1
c0026e7b:	68 26 6e 02 c0       	push   0xc0026e26
c0026e80:	6a 00                	push   0x0
c0026e82:	50                   	push   eax
c0026e83:	e8 0e cf fe ff       	call   c0013d96 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026e88:	83 c4 20             	add    esp,0x20
c0026e8b:	89 c2                	mov    edx,eax
c0026e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e91:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026e97:	b8 00 00 00 00       	mov    eax,0x0
c0026e9c:	83 c4 0c             	add    esp,0xc
c0026e9f:	c3                   	ret    

c0026ea0 <PIT::close(int, int, void*)>:
c0026ea0:	83 ec 0c             	sub    esp,0xc
c0026ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ea7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026eb5:	6a 01                	push   0x1
c0026eb7:	68 26 6e 02 c0       	push   0xc0026e26
c0026ebc:	6a 00                	push   0x0
c0026ebe:	50                   	push   eax
c0026ebf:	e8 1c cf fe ff       	call   c0013de0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026ec4:	83 c4 10             	add    esp,0x10
c0026ec7:	b8 00 00 00 00       	mov    eax,0x0
c0026ecc:	83 c4 0c             	add    esp,0xc
c0026ecf:	c3                   	ret    

c0026ed0 <PIT::PIT()>:
c0026ed0:	83 ec 0c             	sub    esp,0xc
c0026ed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ed7:	83 ec 08             	sub    esp,0x8
c0026eda:	68 d8 df 02 c0       	push   0xc002dfd8
c0026edf:	50                   	push   eax
c0026ee0:	e8 b7 f9 fe ff       	call   c001689c <Timer::Timer(char const*)>
c0026ee5:	83 c4 10             	add    esp,0x10
c0026ee8:	ba 00 e0 02 c0       	mov    edx,0xc002e000
c0026eed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ef1:	89 10                	mov    DWORD PTR [eax],edx
c0026ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ef7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026efd:	0f b6 d0             	movzx  edx,al
c0026f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f04:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026f0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026f15:	0f b6 d0             	movzx  edx,al
c0026f18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f1c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026f2b:	8d 50 01             	lea    edx,[eax+0x1]
c0026f2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026f32:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026f38:	0f b6 d0             	movzx  edx,al
c0026f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f3f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026f43:	83 e1 3f             	and    ecx,0x3f
c0026f46:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026f4a:	90                   	nop
c0026f4b:	83 c4 0c             	add    esp,0xc
c0026f4e:	c3                   	ret    
c0026f4f:	90                   	nop

c0026f50 <avxDetect>:
c0026f50:	b8 00 00 00 00       	mov    eax,0x0
c0026f55:	c3                   	ret    

c0026f56 <avxSave>:
c0026f56:	c3                   	ret    

c0026f57 <avxLoad>:
c0026f57:	c3                   	ret    

c0026f58 <avxInit>:
c0026f58:	c3                   	ret    

c0026f59 <avxClose>:
c0026f59:	c3                   	ret    

c0026f5a <wouldSheSayYes>:
c0026f5a:	c3                   	ret    
c0026f5b:	49                   	dec    ecx
c0026f5c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026f60:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026f64:	75 20                	jne    c0026f86 <sseDetect.noSSE+0x1>
c0026f66:	4e                   	dec    esi
c0026f67:	79 61                	jns    c0026fca <x87Detect+0x14>
c0026f69:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026f6e:	66 90                	xchg   ax,ax

c0026f70 <absolutelyNoChanceInHell>:
c0026f70:	b8 01 00 00 00       	mov    eax,0x1
c0026f75:	0f a2                	cpuid  
c0026f77:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026f7d:	74 06                	je     c0026f85 <sseDetect.noSSE>
c0026f7f:	b8 01 00 00 00       	mov    eax,0x1
c0026f84:	c3                   	ret    

c0026f85 <sseDetect.noSSE>:
c0026f85:	31 c0                	xor    eax,eax
c0026f87:	c3                   	ret    

c0026f88 <sseSave>:
c0026f88:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026f8d:	c3                   	ret    

c0026f8e <sseLoad>:
c0026f8e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026f93:	c3                   	ret    

c0026f94 <sseInit>:
c0026f94:	e8 49 00 00 00       	call   c0026fe2 <x87Init>
c0026f99:	0f 20 e0             	mov    eax,cr4
c0026f9c:	66 0d 00 06          	or     ax,0x600
c0026fa0:	0f 22 e0             	mov    cr4,eax
c0026fa3:	c3                   	ret    

c0026fa4 <sseClose>:
c0026fa4:	c3                   	ret    
c0026fa5:	66 90                	xchg   ax,ax
c0026fa7:	66 90                	xchg   ax,ax
c0026fa9:	66 90                	xchg   ax,ax
c0026fab:	66 90                	xchg   ax,ax
c0026fad:	66 90                	xchg   ax,ax
c0026faf:	90                   	nop

c0026fb0 <value_37F>:
c0026fb0:	7f 03                	jg     c0026fb5 <value_37A+0x1>

c0026fb2 <value_37E>:
c0026fb2:	7e 03                	jle    c0026fb7 <x87Detect+0x1>

c0026fb4 <value_37A>:
c0026fb4:	7a 03                	jp     c0026fb9 <x87Detect+0x3>

c0026fb6 <x87Detect>:
c0026fb6:	b8 01 00 00 00       	mov    eax,0x1
c0026fbb:	0f a2                	cpuid  
c0026fbd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026fc3:	74 06                	je     c0026fcb <x87Detect.nox87>
c0026fc5:	b8 01 00 00 00       	mov    eax,0x1
c0026fca:	c3                   	ret    

c0026fcb <x87Detect.nox87>:
c0026fcb:	b8 00 00 00 00       	mov    eax,0x0
c0026fd0:	c3                   	ret    

c0026fd1 <x87Save>:
c0026fd1:	55                   	push   ebp
c0026fd2:	89 e5                	mov    ebp,esp
c0026fd4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026fd8:	c9                   	leave  
c0026fd9:	c3                   	ret    

c0026fda <x87Load>:
c0026fda:	55                   	push   ebp
c0026fdb:	89 e5                	mov    ebp,esp
c0026fdd:	dd 65 08             	frstor [ebp+0x8]
c0026fe0:	c9                   	leave  
c0026fe1:	c3                   	ret    

c0026fe2 <x87Init>:
c0026fe2:	9b db e3             	finit  
c0026fe5:	0f 20 c0             	mov    eax,cr0
c0026fe8:	66 25 fb ff          	and    ax,0xfffb
c0026fec:	66 0d 22 00          	or     ax,0x22
c0026ff0:	0f 22 c0             	mov    cr0,eax
c0026ff3:	0f 06                	clts   
c0026ff5:	d9 2d b4 6f 02 c0    	fldcw  WORD PTR ds:0xc0026fb4
c0026ffb:	c3                   	ret    

c0026ffc <x87Close>:
c0026ffc:	c3                   	ret    
c0026ffd:	66 90                	xchg   ax,ax
c0026fff:	90                   	nop

c0027000 <__do_global_ctors_aux>:
c0027000:	a1 38 9c 02 c0       	mov    eax,ds:0xc0029c38
c0027005:	83 f8 ff             	cmp    eax,0xffffffff
c0027008:	74 1a                	je     c0027024 <__do_global_ctors_aux+0x24>
c002700a:	55                   	push   ebp
c002700b:	89 e5                	mov    ebp,esp
c002700d:	53                   	push   ebx
c002700e:	52                   	push   edx
c002700f:	bb 38 9c 02 c0       	mov    ebx,0xc0029c38
c0027014:	ff d0                	call   eax
c0027016:	83 eb 04             	sub    ebx,0x4
c0027019:	8b 03                	mov    eax,DWORD PTR [ebx]
c002701b:	83 f8 ff             	cmp    eax,0xffffffff
c002701e:	75 f4                	jne    c0027014 <__do_global_ctors_aux+0x14>
c0027020:	58                   	pop    eax
c0027021:	5b                   	pop    ebx
c0027022:	5d                   	pop    ebp
c0027023:	c3                   	ret    
c0027024:	c3                   	ret    
c0027025:	66 90                	xchg   ax,ax
c0027027:	90                   	nop

c0027028 <__divdi3>:
c0027028:	55                   	push   ebp
c0027029:	57                   	push   edi
c002702a:	56                   	push   esi
c002702b:	53                   	push   ebx
c002702c:	83 ec 1c             	sub    esp,0x1c
c002702f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027033:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027037:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002703a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002703e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027042:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027046:	85 db                	test   ebx,ebx
c0027048:	0f 88 8e 00 00 00    	js     c00270dc <__divdi3+0xb4>
c002704e:	89 dd                	mov    ebp,ebx
c0027050:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027058:	89 d3                	mov    ebx,edx
c002705a:	85 d2                	test   edx,edx
c002705c:	79 0d                	jns    c002706b <__divdi3+0x43>
c002705e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0027062:	f7 d8                	neg    eax
c0027064:	83 d2 00             	adc    edx,0x0
c0027067:	f7 da                	neg    edx
c0027069:	89 d3                	mov    ebx,edx
c002706b:	89 c7                	mov    edi,eax
c002706d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027070:	85 db                	test   ebx,ebx
c0027072:	75 48                	jne    c00270bc <__divdi3+0x94>
c0027074:	39 ef                	cmp    edi,ebp
c0027076:	76 24                	jbe    c002709c <__divdi3+0x74>
c0027078:	89 ea                	mov    edx,ebp
c002707a:	f7 f7                	div    edi
c002707c:	89 c1                	mov    ecx,eax
c002707e:	31 f6                	xor    esi,esi
c0027080:	89 c8                	mov    eax,ecx
c0027082:	89 f2                	mov    edx,esi
c0027084:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027088:	85 c9                	test   ecx,ecx
c002708a:	74 07                	je     c0027093 <__divdi3+0x6b>
c002708c:	f7 d8                	neg    eax
c002708e:	83 d2 00             	adc    edx,0x0
c0027091:	f7 da                	neg    edx
c0027093:	83 c4 1c             	add    esp,0x1c
c0027096:	5b                   	pop    ebx
c0027097:	5e                   	pop    esi
c0027098:	5f                   	pop    edi
c0027099:	5d                   	pop    ebp
c002709a:	c3                   	ret    
c002709b:	90                   	nop
c002709c:	85 ff                	test   edi,edi
c002709e:	75 0b                	jne    c00270ab <__divdi3+0x83>
c00270a0:	b8 01 00 00 00       	mov    eax,0x1
c00270a5:	31 d2                	xor    edx,edx
c00270a7:	f7 f3                	div    ebx
c00270a9:	89 c7                	mov    edi,eax
c00270ab:	31 d2                	xor    edx,edx
c00270ad:	89 e8                	mov    eax,ebp
c00270af:	f7 f7                	div    edi
c00270b1:	89 c6                	mov    esi,eax
c00270b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00270b6:	f7 f7                	div    edi
c00270b8:	89 c1                	mov    ecx,eax
c00270ba:	eb c4                	jmp    c0027080 <__divdi3+0x58>
c00270bc:	39 eb                	cmp    ebx,ebp
c00270be:	77 3c                	ja     c00270fc <__divdi3+0xd4>
c00270c0:	0f bd f3             	bsr    esi,ebx
c00270c3:	83 f6 1f             	xor    esi,0x1f
c00270c6:	75 40                	jne    c0027108 <__divdi3+0xe0>
c00270c8:	39 eb                	cmp    ebx,ebp
c00270ca:	72 09                	jb     c00270d5 <__divdi3+0xad>
c00270cc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00270cf:	0f 87 97 00 00 00    	ja     c002716c <__divdi3+0x144>
c00270d5:	b9 01 00 00 00       	mov    ecx,0x1
c00270da:	eb a4                	jmp    c0027080 <__divdi3+0x58>
c00270dc:	f7 d9                	neg    ecx
c00270de:	83 d3 00             	adc    ebx,0x0
c00270e1:	f7 db                	neg    ebx
c00270e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00270e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00270ea:	89 dd                	mov    ebp,ebx
c00270ec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00270f4:	e9 5f ff ff ff       	jmp    c0027058 <__divdi3+0x30>
c00270f9:	8d 76 00             	lea    esi,[esi+0x0]
c00270fc:	31 f6                	xor    esi,esi
c00270fe:	31 c9                	xor    ecx,ecx
c0027100:	e9 7b ff ff ff       	jmp    c0027080 <__divdi3+0x58>
c0027105:	8d 76 00             	lea    esi,[esi+0x0]
c0027108:	b8 20 00 00 00       	mov    eax,0x20
c002710d:	29 f0                	sub    eax,esi
c002710f:	89 f1                	mov    ecx,esi
c0027111:	d3 e3                	shl    ebx,cl
c0027113:	89 fa                	mov    edx,edi
c0027115:	88 c1                	mov    cl,al
c0027117:	d3 ea                	shr    edx,cl
c0027119:	09 da                	or     edx,ebx
c002711b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002711f:	89 f1                	mov    ecx,esi
c0027121:	d3 e7                	shl    edi,cl
c0027123:	89 eb                	mov    ebx,ebp
c0027125:	88 c1                	mov    cl,al
c0027127:	d3 eb                	shr    ebx,cl
c0027129:	89 f1                	mov    ecx,esi
c002712b:	d3 e5                	shl    ebp,cl
c002712d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027130:	88 c1                	mov    cl,al
c0027132:	d3 ea                	shr    edx,cl
c0027134:	09 d5                	or     ebp,edx
c0027136:	89 e8                	mov    eax,ebp
c0027138:	89 da                	mov    edx,ebx
c002713a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002713e:	89 d3                	mov    ebx,edx
c0027140:	89 c5                	mov    ebp,eax
c0027142:	f7 e7                	mul    edi
c0027144:	39 d3                	cmp    ebx,edx
c0027146:	72 18                	jb     c0027160 <__divdi3+0x138>
c0027148:	74 0a                	je     c0027154 <__divdi3+0x12c>
c002714a:	89 e9                	mov    ecx,ebp
c002714c:	31 f6                	xor    esi,esi
c002714e:	e9 2d ff ff ff       	jmp    c0027080 <__divdi3+0x58>
c0027153:	90                   	nop
c0027154:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027157:	89 f1                	mov    ecx,esi
c0027159:	d3 e7                	shl    edi,cl
c002715b:	39 c7                	cmp    edi,eax
c002715d:	73 eb                	jae    c002714a <__divdi3+0x122>
c002715f:	90                   	nop
c0027160:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027163:	31 f6                	xor    esi,esi
c0027165:	e9 16 ff ff ff       	jmp    c0027080 <__divdi3+0x58>
c002716a:	66 90                	xchg   ax,ax
c002716c:	31 c9                	xor    ecx,ecx
c002716e:	e9 0d ff ff ff       	jmp    c0027080 <__divdi3+0x58>
c0027173:	90                   	nop

c0027174 <__moddi3>:
c0027174:	55                   	push   ebp
c0027175:	57                   	push   edi
c0027176:	56                   	push   esi
c0027177:	53                   	push   ebx
c0027178:	83 ec 2c             	sub    esp,0x2c
c002717b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002717f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027183:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027187:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002718b:	85 db                	test   ebx,ebx
c002718d:	0f 88 85 00 00 00    	js     c0027218 <__moddi3+0xa4>
c0027193:	89 de                	mov    esi,ebx
c0027195:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002719d:	89 d7                	mov    edi,edx
c002719f:	85 d2                	test   edx,edx
c00271a1:	79 09                	jns    c00271ac <__moddi3+0x38>
c00271a3:	f7 d8                	neg    eax
c00271a5:	83 d2 00             	adc    edx,0x0
c00271a8:	f7 da                	neg    edx
c00271aa:	89 d7                	mov    edi,edx
c00271ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00271b0:	89 cd                	mov    ebp,ecx
c00271b2:	85 ff                	test   edi,edi
c00271b4:	75 52                	jne    c0027208 <__moddi3+0x94>
c00271b6:	89 c3                	mov    ebx,eax
c00271b8:	39 f0                	cmp    eax,esi
c00271ba:	76 24                	jbe    c00271e0 <__moddi3+0x6c>
c00271bc:	89 c8                	mov    eax,ecx
c00271be:	89 f2                	mov    edx,esi
c00271c0:	f7 f3                	div    ebx
c00271c2:	89 d6                	mov    esi,edx
c00271c4:	89 f0                	mov    eax,esi
c00271c6:	31 d2                	xor    edx,edx
c00271c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00271cc:	85 c9                	test   ecx,ecx
c00271ce:	74 07                	je     c00271d7 <__moddi3+0x63>
c00271d0:	f7 d8                	neg    eax
c00271d2:	83 d2 00             	adc    edx,0x0
c00271d5:	f7 da                	neg    edx
c00271d7:	83 c4 2c             	add    esp,0x2c
c00271da:	5b                   	pop    ebx
c00271db:	5e                   	pop    esi
c00271dc:	5f                   	pop    edi
c00271dd:	5d                   	pop    ebp
c00271de:	c3                   	ret    
c00271df:	90                   	nop
c00271e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00271e4:	85 db                	test   ebx,ebx
c00271e6:	75 0d                	jne    c00271f5 <__moddi3+0x81>
c00271e8:	b8 01 00 00 00       	mov    eax,0x1
c00271ed:	31 d2                	xor    edx,edx
c00271ef:	f7 f7                	div    edi
c00271f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00271f5:	89 f0                	mov    eax,esi
c00271f7:	31 d2                	xor    edx,edx
c00271f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00271fd:	f7 f7                	div    edi
c00271ff:	89 e8                	mov    eax,ebp
c0027201:	f7 f7                	div    edi
c0027203:	89 d6                	mov    esi,edx
c0027205:	eb bd                	jmp    c00271c4 <__moddi3+0x50>
c0027207:	90                   	nop
c0027208:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002720c:	39 f7                	cmp    edi,esi
c002720e:	76 20                	jbe    c0027230 <__moddi3+0xbc>
c0027210:	89 c8                	mov    eax,ecx
c0027212:	89 f2                	mov    edx,esi
c0027214:	eb b2                	jmp    c00271c8 <__moddi3+0x54>
c0027216:	66 90                	xchg   ax,ax
c0027218:	f7 d9                	neg    ecx
c002721a:	83 d3 00             	adc    ebx,0x0
c002721d:	f7 db                	neg    ebx
c002721f:	89 de                	mov    esi,ebx
c0027221:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027229:	e9 6f ff ff ff       	jmp    c002719d <__moddi3+0x29>
c002722e:	66 90                	xchg   ax,ax
c0027230:	0f bd c7             	bsr    eax,edi
c0027233:	83 f0 1f             	xor    eax,0x1f
c0027236:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002723a:	75 24                	jne    c0027260 <__moddi3+0xec>
c002723c:	39 f7                	cmp    edi,esi
c002723e:	72 06                	jb     c0027246 <__moddi3+0xd2>
c0027240:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027244:	77 0c                	ja     c0027252 <__moddi3+0xde>
c0027246:	89 e9                	mov    ecx,ebp
c0027248:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002724c:	19 fe                	sbb    esi,edi
c002724e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027252:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027256:	89 f2                	mov    edx,esi
c0027258:	e9 6b ff ff ff       	jmp    c00271c8 <__moddi3+0x54>
c002725d:	8d 76 00             	lea    esi,[esi+0x0]
c0027260:	b8 20 00 00 00       	mov    eax,0x20
c0027265:	89 c2                	mov    edx,eax
c0027267:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002726b:	29 da                	sub    edx,ebx
c002726d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027271:	88 d9                	mov    cl,bl
c0027273:	d3 e7                	shl    edi,cl
c0027275:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027279:	88 d1                	mov    cl,dl
c002727b:	d3 e8                	shr    eax,cl
c002727d:	09 c7                	or     edi,eax
c002727f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027283:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027287:	89 d8                	mov    eax,ebx
c0027289:	88 d9                	mov    cl,bl
c002728b:	d3 e7                	shl    edi,cl
c002728d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027291:	89 f3                	mov    ebx,esi
c0027293:	88 d1                	mov    cl,dl
c0027295:	d3 eb                	shr    ebx,cl
c0027297:	89 c7                	mov    edi,eax
c0027299:	88 c1                	mov    cl,al
c002729b:	d3 e6                	shl    esi,cl
c002729d:	89 e8                	mov    eax,ebp
c002729f:	88 d1                	mov    cl,dl
c00272a1:	d3 e8                	shr    eax,cl
c00272a3:	09 f0                	or     eax,esi
c00272a5:	89 f9                	mov    ecx,edi
c00272a7:	d3 e5                	shl    ebp,cl
c00272a9:	89 da                	mov    edx,ebx
c00272ab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00272af:	89 d3                	mov    ebx,edx
c00272b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00272b5:	89 c6                	mov    esi,eax
c00272b7:	89 d1                	mov    ecx,edx
c00272b9:	39 d3                	cmp    ebx,edx
c00272bb:	72 27                	jb     c00272e4 <__moddi3+0x170>
c00272bd:	74 21                	je     c00272e0 <__moddi3+0x16c>
c00272bf:	29 f5                	sub    ebp,esi
c00272c1:	19 cb                	sbb    ebx,ecx
c00272c3:	89 de                	mov    esi,ebx
c00272c5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00272c9:	d3 e6                	shl    esi,cl
c00272cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00272cf:	89 f9                	mov    ecx,edi
c00272d1:	d3 ed                	shr    ebp,cl
c00272d3:	09 ee                	or     esi,ebp
c00272d5:	89 f0                	mov    eax,esi
c00272d7:	d3 eb                	shr    ebx,cl
c00272d9:	89 da                	mov    edx,ebx
c00272db:	e9 e8 fe ff ff       	jmp    c00271c8 <__moddi3+0x54>
c00272e0:	39 c5                	cmp    ebp,eax
c00272e2:	73 db                	jae    c00272bf <__moddi3+0x14b>
c00272e4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00272e8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00272ec:	89 d1                	mov    ecx,edx
c00272ee:	89 c6                	mov    esi,eax
c00272f0:	eb cd                	jmp    c00272bf <__moddi3+0x14b>
c00272f2:	66 90                	xchg   ax,ax

c00272f4 <__udivdi3>:
c00272f4:	55                   	push   ebp
c00272f5:	57                   	push   edi
c00272f6:	56                   	push   esi
c00272f7:	53                   	push   ebx
c00272f8:	83 ec 1c             	sub    esp,0x1c
c00272fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00272ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027303:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027307:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002730b:	85 d2                	test   edx,edx
c002730d:	75 41                	jne    c0027350 <__udivdi3+0x5c>
c002730f:	39 f7                	cmp    edi,esi
c0027311:	76 15                	jbe    c0027328 <__udivdi3+0x34>
c0027313:	89 e8                	mov    eax,ebp
c0027315:	89 f2                	mov    edx,esi
c0027317:	f7 f7                	div    edi
c0027319:	31 db                	xor    ebx,ebx
c002731b:	89 da                	mov    edx,ebx
c002731d:	83 c4 1c             	add    esp,0x1c
c0027320:	5b                   	pop    ebx
c0027321:	5e                   	pop    esi
c0027322:	5f                   	pop    edi
c0027323:	5d                   	pop    ebp
c0027324:	c3                   	ret    
c0027325:	8d 76 00             	lea    esi,[esi+0x0]
c0027328:	89 f9                	mov    ecx,edi
c002732a:	85 ff                	test   edi,edi
c002732c:	75 0b                	jne    c0027339 <__udivdi3+0x45>
c002732e:	b8 01 00 00 00       	mov    eax,0x1
c0027333:	31 d2                	xor    edx,edx
c0027335:	f7 f7                	div    edi
c0027337:	89 c1                	mov    ecx,eax
c0027339:	31 d2                	xor    edx,edx
c002733b:	89 f0                	mov    eax,esi
c002733d:	f7 f1                	div    ecx
c002733f:	89 c3                	mov    ebx,eax
c0027341:	89 e8                	mov    eax,ebp
c0027343:	f7 f1                	div    ecx
c0027345:	89 da                	mov    edx,ebx
c0027347:	83 c4 1c             	add    esp,0x1c
c002734a:	5b                   	pop    ebx
c002734b:	5e                   	pop    esi
c002734c:	5f                   	pop    edi
c002734d:	5d                   	pop    ebp
c002734e:	c3                   	ret    
c002734f:	90                   	nop
c0027350:	39 f2                	cmp    edx,esi
c0027352:	77 1c                	ja     c0027370 <__udivdi3+0x7c>
c0027354:	0f bd da             	bsr    ebx,edx
c0027357:	83 f3 1f             	xor    ebx,0x1f
c002735a:	75 24                	jne    c0027380 <__udivdi3+0x8c>
c002735c:	39 f2                	cmp    edx,esi
c002735e:	72 08                	jb     c0027368 <__udivdi3+0x74>
c0027360:	39 ef                	cmp    edi,ebp
c0027362:	0f 87 84 00 00 00    	ja     c00273ec <__udivdi3+0xf8>
c0027368:	b8 01 00 00 00       	mov    eax,0x1
c002736d:	eb ac                	jmp    c002731b <__udivdi3+0x27>
c002736f:	90                   	nop
c0027370:	31 db                	xor    ebx,ebx
c0027372:	31 c0                	xor    eax,eax
c0027374:	89 da                	mov    edx,ebx
c0027376:	83 c4 1c             	add    esp,0x1c
c0027379:	5b                   	pop    ebx
c002737a:	5e                   	pop    esi
c002737b:	5f                   	pop    edi
c002737c:	5d                   	pop    ebp
c002737d:	c3                   	ret    
c002737e:	66 90                	xchg   ax,ax
c0027380:	b8 20 00 00 00       	mov    eax,0x20
c0027385:	29 d8                	sub    eax,ebx
c0027387:	88 d9                	mov    cl,bl
c0027389:	d3 e2                	shl    edx,cl
c002738b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002738f:	89 fa                	mov    edx,edi
c0027391:	88 c1                	mov    cl,al
c0027393:	d3 ea                	shr    edx,cl
c0027395:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027399:	09 d1                	or     ecx,edx
c002739b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002739f:	88 d9                	mov    cl,bl
c00273a1:	d3 e7                	shl    edi,cl
c00273a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00273a7:	89 f7                	mov    edi,esi
c00273a9:	88 c1                	mov    cl,al
c00273ab:	d3 ef                	shr    edi,cl
c00273ad:	88 d9                	mov    cl,bl
c00273af:	d3 e6                	shl    esi,cl
c00273b1:	89 ea                	mov    edx,ebp
c00273b3:	88 c1                	mov    cl,al
c00273b5:	d3 ea                	shr    edx,cl
c00273b7:	09 d6                	or     esi,edx
c00273b9:	89 f0                	mov    eax,esi
c00273bb:	89 fa                	mov    edx,edi
c00273bd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00273c1:	89 d7                	mov    edi,edx
c00273c3:	89 c6                	mov    esi,eax
c00273c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273c9:	39 d7                	cmp    edi,edx
c00273cb:	72 13                	jb     c00273e0 <__udivdi3+0xec>
c00273cd:	74 09                	je     c00273d8 <__udivdi3+0xe4>
c00273cf:	89 f0                	mov    eax,esi
c00273d1:	31 db                	xor    ebx,ebx
c00273d3:	e9 43 ff ff ff       	jmp    c002731b <__udivdi3+0x27>
c00273d8:	88 d9                	mov    cl,bl
c00273da:	d3 e5                	shl    ebp,cl
c00273dc:	39 c5                	cmp    ebp,eax
c00273de:	73 ef                	jae    c00273cf <__udivdi3+0xdb>
c00273e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00273e3:	31 db                	xor    ebx,ebx
c00273e5:	e9 31 ff ff ff       	jmp    c002731b <__udivdi3+0x27>
c00273ea:	66 90                	xchg   ax,ax
c00273ec:	31 c0                	xor    eax,eax
c00273ee:	e9 28 ff ff ff       	jmp    c002731b <__udivdi3+0x27>
c00273f3:	90                   	nop

c00273f4 <__umoddi3>:
c00273f4:	55                   	push   ebp
c00273f5:	57                   	push   edi
c00273f6:	56                   	push   esi
c00273f7:	53                   	push   ebx
c00273f8:	83 ec 1c             	sub    esp,0x1c
c00273fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00273ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027403:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027407:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002740b:	89 da                	mov    edx,ebx
c002740d:	85 c0                	test   eax,eax
c002740f:	75 37                	jne    c0027448 <__umoddi3+0x54>
c0027411:	39 df                	cmp    edi,ebx
c0027413:	76 13                	jbe    c0027428 <__umoddi3+0x34>
c0027415:	89 f0                	mov    eax,esi
c0027417:	f7 f7                	div    edi
c0027419:	89 d0                	mov    eax,edx
c002741b:	31 d2                	xor    edx,edx
c002741d:	83 c4 1c             	add    esp,0x1c
c0027420:	5b                   	pop    ebx
c0027421:	5e                   	pop    esi
c0027422:	5f                   	pop    edi
c0027423:	5d                   	pop    ebp
c0027424:	c3                   	ret    
c0027425:	8d 76 00             	lea    esi,[esi+0x0]
c0027428:	89 fd                	mov    ebp,edi
c002742a:	85 ff                	test   edi,edi
c002742c:	75 0b                	jne    c0027439 <__umoddi3+0x45>
c002742e:	b8 01 00 00 00       	mov    eax,0x1
c0027433:	31 d2                	xor    edx,edx
c0027435:	f7 f7                	div    edi
c0027437:	89 c5                	mov    ebp,eax
c0027439:	89 d8                	mov    eax,ebx
c002743b:	31 d2                	xor    edx,edx
c002743d:	f7 f5                	div    ebp
c002743f:	89 f0                	mov    eax,esi
c0027441:	f7 f5                	div    ebp
c0027443:	89 d0                	mov    eax,edx
c0027445:	eb d4                	jmp    c002741b <__umoddi3+0x27>
c0027447:	90                   	nop
c0027448:	89 f1                	mov    ecx,esi
c002744a:	39 d8                	cmp    eax,ebx
c002744c:	76 0a                	jbe    c0027458 <__umoddi3+0x64>
c002744e:	89 f0                	mov    eax,esi
c0027450:	83 c4 1c             	add    esp,0x1c
c0027453:	5b                   	pop    ebx
c0027454:	5e                   	pop    esi
c0027455:	5f                   	pop    edi
c0027456:	5d                   	pop    ebp
c0027457:	c3                   	ret    
c0027458:	0f bd e8             	bsr    ebp,eax
c002745b:	83 f5 1f             	xor    ebp,0x1f
c002745e:	75 1c                	jne    c002747c <__umoddi3+0x88>
c0027460:	39 d8                	cmp    eax,ebx
c0027462:	72 04                	jb     c0027468 <__umoddi3+0x74>
c0027464:	39 f7                	cmp    edi,esi
c0027466:	77 08                	ja     c0027470 <__umoddi3+0x7c>
c0027468:	89 da                	mov    edx,ebx
c002746a:	29 fe                	sub    esi,edi
c002746c:	19 c2                	sbb    edx,eax
c002746e:	89 f1                	mov    ecx,esi
c0027470:	89 c8                	mov    eax,ecx
c0027472:	83 c4 1c             	add    esp,0x1c
c0027475:	5b                   	pop    ebx
c0027476:	5e                   	pop    esi
c0027477:	5f                   	pop    edi
c0027478:	5d                   	pop    ebp
c0027479:	c3                   	ret    
c002747a:	66 90                	xchg   ax,ax
c002747c:	ba 20 00 00 00       	mov    edx,0x20
c0027481:	29 ea                	sub    edx,ebp
c0027483:	89 e9                	mov    ecx,ebp
c0027485:	d3 e0                	shl    eax,cl
c0027487:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002748b:	89 f8                	mov    eax,edi
c002748d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027491:	88 d1                	mov    cl,dl
c0027493:	d3 e8                	shr    eax,cl
c0027495:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027499:	09 c1                	or     ecx,eax
c002749b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002749f:	89 e9                	mov    ecx,ebp
c00274a1:	d3 e7                	shl    edi,cl
c00274a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00274a7:	89 d8                	mov    eax,ebx
c00274a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00274ad:	88 d1                	mov    cl,dl
c00274af:	d3 e8                	shr    eax,cl
c00274b1:	89 c7                	mov    edi,eax
c00274b3:	89 e9                	mov    ecx,ebp
c00274b5:	d3 e3                	shl    ebx,cl
c00274b7:	89 f0                	mov    eax,esi
c00274b9:	88 d1                	mov    cl,dl
c00274bb:	d3 e8                	shr    eax,cl
c00274bd:	09 d8                	or     eax,ebx
c00274bf:	89 e9                	mov    ecx,ebp
c00274c1:	d3 e6                	shl    esi,cl
c00274c3:	89 f3                	mov    ebx,esi
c00274c5:	89 fa                	mov    edx,edi
c00274c7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00274cb:	89 d1                	mov    ecx,edx
c00274cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00274d1:	89 c6                	mov    esi,eax
c00274d3:	89 d7                	mov    edi,edx
c00274d5:	39 d1                	cmp    ecx,edx
c00274d7:	72 27                	jb     c0027500 <__umoddi3+0x10c>
c00274d9:	74 21                	je     c00274fc <__umoddi3+0x108>
c00274db:	89 ca                	mov    edx,ecx
c00274dd:	29 f3                	sub    ebx,esi
c00274df:	19 fa                	sbb    edx,edi
c00274e1:	89 d0                	mov    eax,edx
c00274e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00274e7:	d3 e0                	shl    eax,cl
c00274e9:	89 e9                	mov    ecx,ebp
c00274eb:	d3 eb                	shr    ebx,cl
c00274ed:	09 d8                	or     eax,ebx
c00274ef:	d3 ea                	shr    edx,cl
c00274f1:	83 c4 1c             	add    esp,0x1c
c00274f4:	5b                   	pop    ebx
c00274f5:	5e                   	pop    esi
c00274f6:	5f                   	pop    edi
c00274f7:	5d                   	pop    ebp
c00274f8:	c3                   	ret    
c00274f9:	8d 76 00             	lea    esi,[esi+0x0]
c00274fc:	39 c3                	cmp    ebx,eax
c00274fe:	73 db                	jae    c00274db <__umoddi3+0xe7>
c0027500:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027504:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027508:	89 d7                	mov    edi,edx
c002750a:	89 c6                	mov    esi,eax
c002750c:	eb cd                	jmp    c00274db <__umoddi3+0xe7>

c002750e <__addsf3>:
c002750e:	55                   	push   ebp
c002750f:	89 e5                	mov    ebp,esp
c0027511:	57                   	push   edi
c0027512:	56                   	push   esi
c0027513:	53                   	push   ebx
c0027514:	83 ec 08             	sub    esp,0x8
c0027517:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002751a:	89 fa                	mov    edx,edi
c002751c:	89 f8                	mov    eax,edi
c002751e:	c1 f8 17             	sar    eax,0x17
c0027521:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027524:	c1 e2 08             	shl    edx,0x8
c0027527:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002752d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027530:	89 de                	mov    esi,ebx
c0027532:	c1 fe 17             	sar    esi,0x17
c0027535:	c1 e3 08             	shl    ebx,0x8
c0027538:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002753e:	31 f0                	xor    eax,esi
c0027540:	0f 88 3b 01 00 00    	js     c0027681 <__addsf3+0x173>
c0027546:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027549:	29 f1                	sub    ecx,esi
c002754b:	85 c9                	test   ecx,ecx
c002754d:	7e 54                	jle    c00275a3 <__addsf3+0x95>
c002754f:	89 f0                	mov    eax,esi
c0027551:	84 c0                	test   al,al
c0027553:	75 10                	jne    c0027565 <__addsf3+0x57>
c0027555:	85 db                	test   ebx,ebx
c0027557:	0f 84 aa 02 00 00    	je     c0027807 <__addsf3+0x2f9>
c002755d:	49                   	dec    ecx
c002755e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027561:	74 38                	je     c002759b <__addsf3+0x8d>
c0027563:	eb 13                	jmp    c0027578 <__addsf3+0x6a>
c0027565:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027568:	f7 d0                	not    eax
c002756a:	84 c0                	test   al,al
c002756c:	0f 84 95 02 00 00    	je     c0027807 <__addsf3+0x2f9>
c0027572:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027578:	83 f9 1f             	cmp    ecx,0x1f
c002757b:	0f 8f 86 02 00 00    	jg     c0027807 <__addsf3+0x2f9>
c0027581:	89 de                	mov    esi,ebx
c0027583:	d3 ee                	shr    esi,cl
c0027585:	b8 20 00 00 00       	mov    eax,0x20
c002758a:	29 c8                	sub    eax,ecx
c002758c:	89 c1                	mov    ecx,eax
c002758e:	d3 e3                	shl    ebx,cl
c0027590:	31 c0                	xor    eax,eax
c0027592:	85 db                	test   ebx,ebx
c0027594:	0f 95 c0             	setne  al
c0027597:	09 f0                	or     eax,esi
c0027599:	01 d0                	add    eax,edx
c002759b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002759e:	e9 b6 00 00 00       	jmp    c0027659 <__addsf3+0x14b>
c00275a3:	74 5c                	je     c0027601 <__addsf3+0xf3>
c00275a5:	89 f1                	mov    ecx,esi
c00275a7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00275aa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275ad:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00275b1:	75 14                	jne    c00275c7 <__addsf3+0xb9>
c00275b3:	85 d2                	test   edx,edx
c00275b5:	0f 84 4c 02 00 00    	je     c0027807 <__addsf3+0x2f9>
c00275bb:	49                   	dec    ecx
c00275bc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00275bf:	0f 84 94 00 00 00    	je     c0027659 <__addsf3+0x14b>
c00275c5:	eb 12                	jmp    c00275d9 <__addsf3+0xcb>
c00275c7:	89 f0                	mov    eax,esi
c00275c9:	f7 d0                	not    eax
c00275cb:	84 c0                	test   al,al
c00275cd:	0f 84 34 02 00 00    	je     c0027807 <__addsf3+0x2f9>
c00275d3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00275d9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275dc:	83 f9 1f             	cmp    ecx,0x1f
c00275df:	0f 8f 22 02 00 00    	jg     c0027807 <__addsf3+0x2f9>
c00275e5:	89 d7                	mov    edi,edx
c00275e7:	d3 ef                	shr    edi,cl
c00275e9:	b8 20 00 00 00       	mov    eax,0x20
c00275ee:	29 c8                	sub    eax,ecx
c00275f0:	89 c1                	mov    ecx,eax
c00275f2:	d3 e2                	shl    edx,cl
c00275f4:	31 c0                	xor    eax,eax
c00275f6:	85 d2                	test   edx,edx
c00275f8:	0f 95 c0             	setne  al
c00275fb:	09 f8                	or     eax,edi
c00275fd:	01 d8                	add    eax,ebx
c00275ff:	eb 58                	jmp    c0027659 <__addsf3+0x14b>
c0027601:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027604:	8d 70 01             	lea    esi,[eax+0x1]
c0027607:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002760d:	75 32                	jne    c0027641 <__addsf3+0x133>
c002760f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027613:	75 1f                	jne    c0027634 <__addsf3+0x126>
c0027615:	85 d2                	test   edx,edx
c0027617:	0f 84 e0 01 00 00    	je     c00277fd <__addsf3+0x2ef>
c002761d:	85 db                	test   ebx,ebx
c002761f:	0f 84 e2 01 00 00    	je     c0027807 <__addsf3+0x2f9>
c0027625:	89 d0                	mov    eax,edx
c0027627:	01 d8                	add    eax,ebx
c0027629:	0f 89 a9 01 00 00    	jns    c00277d8 <__addsf3+0x2ca>
c002762f:	e9 9d 01 00 00       	jmp    c00277d1 <__addsf3+0x2c3>
c0027634:	85 d2                	test   edx,edx
c0027636:	0f 85 cb 01 00 00    	jne    c0027807 <__addsf3+0x2f9>
c002763c:	e9 bc 01 00 00       	jmp    c00277fd <__addsf3+0x2ef>
c0027641:	31 c0                	xor    eax,eax
c0027643:	89 f1                	mov    ecx,esi
c0027645:	f7 d1                	not    ecx
c0027647:	84 c9                	test   cl,cl
c0027649:	0f 84 90 01 00 00    	je     c00277df <__addsf3+0x2d1>
c002764f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027652:	d1 e8                	shr    eax,1
c0027654:	e9 86 01 00 00       	jmp    c00277df <__addsf3+0x2d1>
c0027659:	85 c0                	test   eax,eax
c002765b:	0f 89 7e 01 00 00    	jns    c00277df <__addsf3+0x2d1>
c0027661:	46                   	inc    esi
c0027662:	89 f2                	mov    edx,esi
c0027664:	f7 d2                	not    edx
c0027666:	84 d2                	test   dl,dl
c0027668:	0f 84 6f 01 00 00    	je     c00277dd <__addsf3+0x2cf>
c002766e:	89 c2                	mov    edx,eax
c0027670:	83 e2 01             	and    edx,0x1
c0027673:	d1 e8                	shr    eax,1
c0027675:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002767a:	09 d0                	or     eax,edx
c002767c:	e9 5e 01 00 00       	jmp    c00277df <__addsf3+0x2d1>
c0027681:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027685:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027688:	89 f0                	mov    eax,esi
c002768a:	0f b6 c0             	movzx  eax,al
c002768d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027690:	29 c1                	sub    ecx,eax
c0027692:	85 c9                	test   ecx,ecx
c0027694:	7e 55                	jle    c00276eb <__addsf3+0x1dd>
c0027696:	85 c0                	test   eax,eax
c0027698:	75 11                	jne    c00276ab <__addsf3+0x19d>
c002769a:	85 db                	test   ebx,ebx
c002769c:	0f 84 65 01 00 00    	je     c0027807 <__addsf3+0x2f9>
c00276a2:	49                   	dec    ecx
c00276a3:	75 19                	jne    c00276be <__addsf3+0x1b0>
c00276a5:	89 d0                	mov    eax,edx
c00276a7:	29 d8                	sub    eax,ebx
c00276a9:	eb 38                	jmp    c00276e3 <__addsf3+0x1d5>
c00276ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00276ae:	f7 d0                	not    eax
c00276b0:	84 c0                	test   al,al
c00276b2:	0f 84 4f 01 00 00    	je     c0027807 <__addsf3+0x2f9>
c00276b8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00276be:	83 f9 1f             	cmp    ecx,0x1f
c00276c1:	0f 8f 40 01 00 00    	jg     c0027807 <__addsf3+0x2f9>
c00276c7:	89 de                	mov    esi,ebx
c00276c9:	d3 ee                	shr    esi,cl
c00276cb:	b8 20 00 00 00       	mov    eax,0x20
c00276d0:	29 c8                	sub    eax,ecx
c00276d2:	89 c1                	mov    ecx,eax
c00276d4:	d3 e3                	shl    ebx,cl
c00276d6:	31 c0                	xor    eax,eax
c00276d8:	85 db                	test   ebx,ebx
c00276da:	0f 95 c0             	setne  al
c00276dd:	09 f0                	or     eax,esi
c00276df:	29 c2                	sub    edx,eax
c00276e1:	89 d0                	mov    eax,edx
c00276e3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276e6:	e9 af 00 00 00       	jmp    c002779a <__addsf3+0x28c>
c00276eb:	74 5c                	je     c0027749 <__addsf3+0x23b>
c00276ed:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00276f0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276f3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00276f7:	75 14                	jne    c002770d <__addsf3+0x1ff>
c00276f9:	85 d2                	test   edx,edx
c00276fb:	0f 84 06 01 00 00    	je     c0027807 <__addsf3+0x2f9>
c0027701:	48                   	dec    eax
c0027702:	75 1b                	jne    c002771f <__addsf3+0x211>
c0027704:	89 d8                	mov    eax,ebx
c0027706:	29 d0                	sub    eax,edx
c0027708:	e9 8d 00 00 00       	jmp    c002779a <__addsf3+0x28c>
c002770d:	89 f1                	mov    ecx,esi
c002770f:	f7 d1                	not    ecx
c0027711:	84 c9                	test   cl,cl
c0027713:	0f 84 ee 00 00 00    	je     c0027807 <__addsf3+0x2f9>
c0027719:	81 ca 00 00 00 80    	or     edx,0x80000000
c002771f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027722:	83 f8 1f             	cmp    eax,0x1f
c0027725:	0f 8f dc 00 00 00    	jg     c0027807 <__addsf3+0x2f9>
c002772b:	89 d7                	mov    edi,edx
c002772d:	88 c1                	mov    cl,al
c002772f:	d3 ef                	shr    edi,cl
c0027731:	b9 20 00 00 00       	mov    ecx,0x20
c0027736:	29 c1                	sub    ecx,eax
c0027738:	d3 e2                	shl    edx,cl
c002773a:	31 c0                	xor    eax,eax
c002773c:	85 d2                	test   edx,edx
c002773e:	0f 95 c0             	setne  al
c0027741:	09 f8                	or     eax,edi
c0027743:	29 c3                	sub    ebx,eax
c0027745:	89 d8                	mov    eax,ebx
c0027747:	eb 51                	jmp    c002779a <__addsf3+0x28c>
c0027749:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002774c:	40                   	inc    eax
c002774d:	a8 fe                	test   al,0xfe
c002774f:	75 3d                	jne    c002778e <__addsf3+0x280>
c0027751:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027755:	0f 85 a7 00 00 00    	jne    c0027802 <__addsf3+0x2f4>
c002775b:	85 d2                	test   edx,edx
c002775d:	75 12                	jne    c0027771 <__addsf3+0x263>
c002775f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027762:	85 db                	test   ebx,ebx
c0027764:	0f 85 9d 00 00 00    	jne    c0027807 <__addsf3+0x2f9>
c002776a:	31 ff                	xor    edi,edi
c002776c:	e9 96 00 00 00       	jmp    c0027807 <__addsf3+0x2f9>
c0027771:	85 db                	test   ebx,ebx
c0027773:	0f 84 8e 00 00 00    	je     c0027807 <__addsf3+0x2f9>
c0027779:	89 d0                	mov    eax,edx
c002777b:	29 d8                	sub    eax,ebx
c002777d:	79 06                	jns    c0027785 <__addsf3+0x277>
c002777f:	89 d8                	mov    eax,ebx
c0027781:	29 d0                	sub    eax,edx
c0027783:	eb 5a                	jmp    c00277df <__addsf3+0x2d1>
c0027785:	bf 00 00 00 00       	mov    edi,0x0
c002778a:	74 7b                	je     c0027807 <__addsf3+0x2f9>
c002778c:	eb 4a                	jmp    c00277d8 <__addsf3+0x2ca>
c002778e:	89 d0                	mov    eax,edx
c0027790:	29 d8                	sub    eax,ebx
c0027792:	79 12                	jns    c00277a6 <__addsf3+0x298>
c0027794:	89 d8                	mov    eax,ebx
c0027796:	29 d0                	sub    eax,edx
c0027798:	eb 09                	jmp    c00277a3 <__addsf3+0x295>
c002779a:	85 c0                	test   eax,eax
c002779c:	79 41                	jns    c00277df <__addsf3+0x2d1>
c002779e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277a3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00277a6:	31 f6                	xor    esi,esi
c00277a8:	85 c0                	test   eax,eax
c00277aa:	74 33                	je     c00277df <__addsf3+0x2d1>
c00277ac:	0f bd c8             	bsr    ecx,eax
c00277af:	83 f1 1f             	xor    ecx,0x1f
c00277b2:	d3 e0                	shl    eax,cl
c00277b4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00277b8:	39 ca                	cmp    edx,ecx
c00277ba:	7f 10                	jg     c00277cc <__addsf3+0x2be>
c00277bc:	29 d1                	sub    ecx,edx
c00277be:	41                   	inc    ecx
c00277bf:	d3 e8                	shr    eax,cl
c00277c1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00277c4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00277ca:	eb 13                	jmp    c00277df <__addsf3+0x2d1>
c00277cc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00277cf:	29 ce                	sub    esi,ecx
c00277d1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277d6:	eb 07                	jmp    c00277df <__addsf3+0x2d1>
c00277d8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00277db:	eb 02                	jmp    c00277df <__addsf3+0x2d1>
c00277dd:	31 c0                	xor    eax,eax
c00277df:	89 c2                	mov    edx,eax
c00277e1:	c1 ea 08             	shr    edx,0x8
c00277e4:	a8 7f                	test   al,0x7f
c00277e6:	0f 95 c1             	setne  cl
c00277e9:	09 d1                	or     ecx,edx
c00277eb:	83 e1 01             	and    ecx,0x1
c00277ee:	c1 e8 07             	shr    eax,0x7
c00277f1:	21 c8                	and    eax,ecx
c00277f3:	c1 e6 17             	shl    esi,0x17
c00277f6:	09 d6                	or     esi,edx
c00277f8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00277fb:	eb 0a                	jmp    c0027807 <__addsf3+0x2f9>
c00277fd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027800:	eb 05                	jmp    c0027807 <__addsf3+0x2f9>
c0027802:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027807:	89 f8                	mov    eax,edi
c0027809:	5a                   	pop    edx
c002780a:	59                   	pop    ecx
c002780b:	5b                   	pop    ebx
c002780c:	5e                   	pop    esi
c002780d:	5f                   	pop    edi
c002780e:	5d                   	pop    ebp
c002780f:	c3                   	ret    

c0027810 <__subsf3>:
c0027810:	55                   	push   ebp
c0027811:	89 e5                	mov    ebp,esp
c0027813:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027816:	05 00 00 00 80       	add    eax,0x80000000
c002781b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002781e:	5d                   	pop    ebp
c002781f:	e9 ea fc ff ff       	jmp    c002750e <__addsf3>

c0027824 <__negsf2>:
c0027824:	55                   	push   ebp
c0027825:	89 e5                	mov    ebp,esp
c0027827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002782a:	05 00 00 00 80       	add    eax,0x80000000
c002782f:	5d                   	pop    ebp
c0027830:	c3                   	ret    

c0027831 <__mulsf3>:
c0027831:	55                   	push   ebp
c0027832:	89 e5                	mov    ebp,esp
c0027834:	57                   	push   edi
c0027835:	56                   	push   esi
c0027836:	53                   	push   ebx
c0027837:	83 ec 1c             	sub    esp,0x1c
c002783a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002783d:	89 f0                	mov    eax,esi
c002783f:	89 f1                	mov    ecx,esi
c0027841:	c1 f9 17             	sar    ecx,0x17
c0027844:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027847:	c1 e0 08             	shl    eax,0x8
c002784a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002784f:	89 c1                	mov    ecx,eax
c0027851:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027854:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027857:	89 c7                	mov    edi,eax
c0027859:	c1 ff 17             	sar    edi,0x17
c002785c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027860:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027863:	89 f8                	mov    eax,edi
c0027865:	0f b6 c0             	movzx  eax,al
c0027868:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002786b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002786f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027872:	42                   	inc    edx
c0027873:	80 e2 fe             	and    dl,0xfe
c0027876:	75 7b                	jne    c00278f3 <__mulsf3+0xc2>
c0027878:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002787c:	74 54                	je     c00278d2 <__mulsf3+0xa1>
c002787e:	85 c9                	test   ecx,ecx
c0027880:	0f 85 64 01 00 00    	jne    c00279ea <__mulsf3+0x1b9>
c0027886:	8d 57 01             	lea    edx,[edi+0x1]
c0027889:	80 e2 fe             	and    dl,0xfe
c002788c:	75 1f                	jne    c00278ad <__mulsf3+0x7c>
c002788e:	85 c0                	test   eax,eax
c0027890:	b8 00 00 00 00       	mov    eax,0x0
c0027895:	74 29                	je     c00278c0 <__mulsf3+0x8f>
c0027897:	53                   	push   ebx
c0027898:	53                   	push   ebx
c0027899:	50                   	push   eax
c002789a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002789d:	e8 96 05 00 00       	call   c0027e38 <__nesf2>
c00278a2:	83 c4 10             	add    esp,0x10
c00278a5:	85 c0                	test   eax,eax
c00278a7:	0f 85 3a 01 00 00    	jne    c00279e7 <__mulsf3+0x1b6>
c00278ad:	85 ff                	test   edi,edi
c00278af:	0f 89 35 01 00 00    	jns    c00279ea <__mulsf3+0x1b9>
c00278b5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00278bb:	e9 2a 01 00 00       	jmp    c00279ea <__mulsf3+0x1b9>
c00278c0:	51                   	push   ecx
c00278c1:	51                   	push   ecx
c00278c2:	50                   	push   eax
c00278c3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00278c6:	e8 6d 05 00 00       	call   c0027e38 <__nesf2>
c00278cb:	83 c4 10             	add    esp,0x10
c00278ce:	85 c0                	test   eax,eax
c00278d0:	eb 15                	jmp    c00278e7 <__mulsf3+0xb6>
c00278d2:	85 c9                	test   ecx,ecx
c00278d4:	74 0b                	je     c00278e1 <__mulsf3+0xb0>
c00278d6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00278d9:	01 c9                	add    ecx,ecx
c00278db:	78 16                	js     c00278f3 <__mulsf3+0xc2>
c00278dd:	89 d3                	mov    ebx,edx
c00278df:	eb f5                	jmp    c00278d6 <__mulsf3+0xa5>
c00278e1:	89 f8                	mov    eax,edi
c00278e3:	f7 d0                	not    eax
c00278e5:	84 c0                	test   al,al
c00278e7:	75 c4                	jne    c00278ad <__mulsf3+0x7c>
c00278e9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00278ee:	e9 f7 00 00 00       	jmp    c00279ea <__mulsf3+0x1b9>
c00278f3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00278f6:	c1 e6 08             	shl    esi,0x8
c00278f9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00278ff:	8d 57 01             	lea    edx,[edi+0x1]
c0027902:	80 e2 fe             	and    dl,0xfe
c0027905:	75 63                	jne    c002796a <__mulsf3+0x139>
c0027907:	85 c0                	test   eax,eax
c0027909:	74 2f                	je     c002793a <__mulsf3+0x109>
c002790b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002790f:	0f 89 d2 00 00 00    	jns    c00279e7 <__mulsf3+0x1b6>
c0027915:	52                   	push   edx
c0027916:	52                   	push   edx
c0027917:	6a 00                	push   0x0
c0027919:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002791c:	e8 dc 04 00 00       	call   c0027dfd <__eqsf2>
c0027921:	83 c4 10             	add    esp,0x10
c0027924:	85 c0                	test   eax,eax
c0027926:	0f 85 bb 00 00 00    	jne    c00279e7 <__mulsf3+0x1b6>
c002792c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002792f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027935:	e9 b0 00 00 00       	jmp    c00279ea <__mulsf3+0x1b9>
c002793a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002793d:	50                   	push   eax
c002793e:	50                   	push   eax
c002793f:	6a 00                	push   0x0
c0027941:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027944:	e8 b4 04 00 00       	call   c0027dfd <__eqsf2>
c0027949:	83 c4 10             	add    esp,0x10
c002794c:	85 c0                	test   eax,eax
c002794e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027951:	75 0c                	jne    c002795f <__mulsf3+0x12e>
c0027953:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027957:	0f 89 8a 00 00 00    	jns    c00279e7 <__mulsf3+0x1b6>
c002795d:	eb cd                	jmp    c002792c <__mulsf3+0xfb>
c002795f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027962:	01 f6                	add    esi,esi
c0027964:	78 04                	js     c002796a <__mulsf3+0x139>
c0027966:	89 c3                	mov    ebx,eax
c0027968:	eb f5                	jmp    c002795f <__mulsf3+0x12e>
c002796a:	89 c8                	mov    eax,ecx
c002796c:	0d 00 00 00 80       	or     eax,0x80000000
c0027971:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027977:	f7 e6                	mul    esi
c0027979:	85 c0                	test   eax,eax
c002797b:	0f 95 c0             	setne  al
c002797e:	0f b6 c0             	movzx  eax,al
c0027981:	09 c2                	or     edx,eax
c0027983:	78 03                	js     c0027988 <__mulsf3+0x157>
c0027985:	01 d2                	add    edx,edx
c0027987:	4b                   	dec    ebx
c0027988:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002798e:	7f 22                	jg     c00279b2 <__mulsf3+0x181>
c0027990:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027996:	85 db                	test   ebx,ebx
c0027998:	7f 23                	jg     c00279bd <__mulsf3+0x18c>
c002799a:	83 fb e9             	cmp    ebx,0xffffffe9
c002799d:	7c 1a                	jl     c00279b9 <__mulsf3+0x188>
c002799f:	81 ca 00 00 00 80    	or     edx,0x80000000
c00279a5:	b9 01 00 00 00       	mov    ecx,0x1
c00279aa:	29 d9                	sub    ecx,ebx
c00279ac:	d3 ea                	shr    edx,cl
c00279ae:	31 db                	xor    ebx,ebx
c00279b0:	eb 0b                	jmp    c00279bd <__mulsf3+0x18c>
c00279b2:	bb ff 00 00 00       	mov    ebx,0xff
c00279b7:	eb 02                	jmp    c00279bb <__mulsf3+0x18a>
c00279b9:	31 db                	xor    ebx,ebx
c00279bb:	31 d2                	xor    edx,edx
c00279bd:	89 d0                	mov    eax,edx
c00279bf:	c1 e8 08             	shr    eax,0x8
c00279c2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00279c5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00279cb:	09 fb                	or     ebx,edi
c00279cd:	c1 e3 17             	shl    ebx,0x17
c00279d0:	09 c3                	or     ebx,eax
c00279d2:	f6 c2 7f             	test   dl,0x7f
c00279d5:	0f 95 c1             	setne  cl
c00279d8:	09 c8                	or     eax,ecx
c00279da:	83 e0 01             	and    eax,0x1
c00279dd:	c1 ea 07             	shr    edx,0x7
c00279e0:	21 c2                	and    edx,eax
c00279e2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00279e5:	eb 03                	jmp    c00279ea <__mulsf3+0x1b9>
c00279e7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00279ea:	89 f0                	mov    eax,esi
c00279ec:	8d 65 f4             	lea    esp,[ebp-0xc]
c00279ef:	5b                   	pop    ebx
c00279f0:	5e                   	pop    esi
c00279f1:	5f                   	pop    edi
c00279f2:	5d                   	pop    ebp
c00279f3:	c3                   	ret    

c00279f4 <__divsf3>:
c00279f4:	55                   	push   ebp
c00279f5:	89 e5                	mov    ebp,esp
c00279f7:	57                   	push   edi
c00279f8:	56                   	push   esi
c00279f9:	53                   	push   ebx
c00279fa:	83 ec 1c             	sub    esp,0x1c
c00279fd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027a00:	89 d8                	mov    eax,ebx
c0027a02:	89 d9                	mov    ecx,ebx
c0027a04:	c1 f9 17             	sar    ecx,0x17
c0027a07:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027a0a:	c1 e0 08             	shl    eax,0x8
c0027a0d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027a12:	89 c1                	mov    ecx,eax
c0027a14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027a17:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027a1a:	89 c7                	mov    edi,eax
c0027a1c:	c1 ff 17             	sar    edi,0x17
c0027a1f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027a23:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027a26:	89 f8                	mov    eax,edi
c0027a28:	0f b6 c0             	movzx  eax,al
c0027a2b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027a2e:	29 c6                	sub    esi,eax
c0027a30:	83 c6 7f             	add    esi,0x7f
c0027a33:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027a36:	42                   	inc    edx
c0027a37:	80 e2 fe             	and    dl,0xfe
c0027a3a:	0f 85 9c 00 00 00    	jne    c0027adc <__divsf3+0xe8>
c0027a40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027a44:	74 33                	je     c0027a79 <__divsf3+0x85>
c0027a46:	85 c9                	test   ecx,ecx
c0027a48:	0f 85 c7 01 00 00    	jne    c0027c15 <__divsf3+0x221>
c0027a4e:	8d 57 01             	lea    edx,[edi+0x1]
c0027a51:	80 e2 fe             	and    dl,0xfe
c0027a54:	75 2f                	jne    c0027a85 <__divsf3+0x91>
c0027a56:	85 c0                	test   eax,eax
c0027a58:	74 2b                	je     c0027a85 <__divsf3+0x91>
c0027a5a:	51                   	push   ecx
c0027a5b:	51                   	push   ecx
c0027a5c:	6a 00                	push   0x0
c0027a5e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a61:	e8 d2 03 00 00       	call   c0027e38 <__nesf2>
c0027a66:	83 c4 10             	add    esp,0x10
c0027a69:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027a6c:	85 c0                	test   eax,eax
c0027a6e:	0f 85 a1 01 00 00    	jne    c0027c15 <__divsf3+0x221>
c0027a74:	e9 92 01 00 00       	jmp    c0027c0b <__divsf3+0x217>
c0027a79:	85 c9                	test   ecx,ecx
c0027a7b:	75 1b                	jne    c0027a98 <__divsf3+0xa4>
c0027a7d:	8d 57 01             	lea    edx,[edi+0x1]
c0027a80:	80 e2 fe             	and    dl,0xfe
c0027a83:	74 1e                	je     c0027aa3 <__divsf3+0xaf>
c0027a85:	85 ff                	test   edi,edi
c0027a87:	0f 89 88 01 00 00    	jns    c0027c15 <__divsf3+0x221>
c0027a8d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027a93:	e9 7d 01 00 00       	jmp    c0027c15 <__divsf3+0x221>
c0027a98:	8d 56 ff             	lea    edx,[esi-0x1]
c0027a9b:	01 c9                	add    ecx,ecx
c0027a9d:	78 3d                	js     c0027adc <__divsf3+0xe8>
c0027a9f:	89 d6                	mov    esi,edx
c0027aa1:	eb f5                	jmp    c0027a98 <__divsf3+0xa4>
c0027aa3:	85 c0                	test   eax,eax
c0027aa5:	b8 00 00 00 00       	mov    eax,0x0
c0027aaa:	74 18                	je     c0027ac4 <__divsf3+0xd0>
c0027aac:	52                   	push   edx
c0027aad:	52                   	push   edx
c0027aae:	50                   	push   eax
c0027aaf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ab2:	e8 81 03 00 00       	call   c0027e38 <__nesf2>
c0027ab7:	83 c4 10             	add    esp,0x10
c0027aba:	85 c0                	test   eax,eax
c0027abc:	0f 85 50 01 00 00    	jne    c0027c12 <__divsf3+0x21e>
c0027ac2:	eb c1                	jmp    c0027a85 <__divsf3+0x91>
c0027ac4:	56                   	push   esi
c0027ac5:	56                   	push   esi
c0027ac6:	50                   	push   eax
c0027ac7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027aca:	e8 69 03 00 00       	call   c0027e38 <__nesf2>
c0027acf:	83 c4 10             	add    esp,0x10
c0027ad2:	85 c0                	test   eax,eax
c0027ad4:	0f 84 31 01 00 00    	je     c0027c0b <__divsf3+0x217>
c0027ada:	eb a9                	jmp    c0027a85 <__divsf3+0x91>
c0027adc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027adf:	c1 e3 08             	shl    ebx,0x8
c0027ae2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027ae8:	8d 57 01             	lea    edx,[edi+0x1]
c0027aeb:	80 e2 fe             	and    dl,0xfe
c0027aee:	75 71                	jne    c0027b61 <__divsf3+0x16d>
c0027af0:	85 c0                	test   eax,eax
c0027af2:	ba 00 00 00 00       	mov    edx,0x0
c0027af7:	74 2f                	je     c0027b28 <__divsf3+0x134>
c0027af9:	51                   	push   ecx
c0027afa:	51                   	push   ecx
c0027afb:	52                   	push   edx
c0027afc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027aff:	e8 f9 02 00 00       	call   c0027dfd <__eqsf2>
c0027b04:	83 c4 10             	add    esp,0x10
c0027b07:	85 c0                	test   eax,eax
c0027b09:	0f 85 03 01 00 00    	jne    c0027c12 <__divsf3+0x21e>
c0027b0f:	31 d2                	xor    edx,edx
c0027b11:	89 d3                	mov    ebx,edx
c0027b13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b16:	31 f8                	xor    eax,edi
c0027b18:	0f 89 f7 00 00 00    	jns    c0027c15 <__divsf3+0x221>
c0027b1e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027b23:	e9 ed 00 00 00       	jmp    c0027c15 <__divsf3+0x221>
c0027b28:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027b2b:	50                   	push   eax
c0027b2c:	50                   	push   eax
c0027b2d:	52                   	push   edx
c0027b2e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027b31:	e8 c7 02 00 00       	call   c0027dfd <__eqsf2>
c0027b36:	83 c4 10             	add    esp,0x10
c0027b39:	85 c0                	test   eax,eax
c0027b3b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027b3e:	75 16                	jne    c0027b56 <__divsf3+0x162>
c0027b40:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b43:	31 fb                	xor    ebx,edi
c0027b45:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027b4b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027b51:	e9 bf 00 00 00       	jmp    c0027c15 <__divsf3+0x221>
c0027b56:	8d 46 01             	lea    eax,[esi+0x1]
c0027b59:	01 db                	add    ebx,ebx
c0027b5b:	78 04                	js     c0027b61 <__divsf3+0x16d>
c0027b5d:	89 c6                	mov    esi,eax
c0027b5f:	eb f5                	jmp    c0027b56 <__divsf3+0x162>
c0027b61:	89 c8                	mov    eax,ecx
c0027b63:	0d 00 00 00 80       	or     eax,0x80000000
c0027b68:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027b6e:	31 d2                	xor    edx,edx
c0027b70:	39 d8                	cmp    eax,ebx
c0027b72:	72 07                	jb     c0027b7b <__divsf3+0x187>
c0027b74:	29 d8                	sub    eax,ebx
c0027b76:	ba 01 00 00 00       	mov    edx,0x1
c0027b7b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027b82:	01 d2                	add    edx,edx
c0027b84:	89 c1                	mov    ecx,eax
c0027b86:	01 c0                	add    eax,eax
c0027b88:	85 c9                	test   ecx,ecx
c0027b8a:	78 04                	js     c0027b90 <__divsf3+0x19c>
c0027b8c:	39 c3                	cmp    ebx,eax
c0027b8e:	77 05                	ja     c0027b95 <__divsf3+0x1a1>
c0027b90:	29 d8                	sub    eax,ebx
c0027b92:	83 ca 01             	or     edx,0x1
c0027b95:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027b98:	75 e8                	jne    c0027b82 <__divsf3+0x18e>
c0027b9a:	85 c0                	test   eax,eax
c0027b9c:	0f 95 c0             	setne  al
c0027b9f:	0f b6 c0             	movzx  eax,al
c0027ba2:	c1 e2 06             	shl    edx,0x6
c0027ba5:	09 c2                	or     edx,eax
c0027ba7:	78 03                	js     c0027bac <__divsf3+0x1b8>
c0027ba9:	01 d2                	add    edx,edx
c0027bab:	4e                   	dec    esi
c0027bac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027bb2:	7f 22                	jg     c0027bd6 <__divsf3+0x1e2>
c0027bb4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027bba:	85 f6                	test   esi,esi
c0027bbc:	7f 23                	jg     c0027be1 <__divsf3+0x1ed>
c0027bbe:	83 fe e9             	cmp    esi,0xffffffe9
c0027bc1:	7c 1a                	jl     c0027bdd <__divsf3+0x1e9>
c0027bc3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027bc9:	b9 01 00 00 00       	mov    ecx,0x1
c0027bce:	29 f1                	sub    ecx,esi
c0027bd0:	d3 ea                	shr    edx,cl
c0027bd2:	31 f6                	xor    esi,esi
c0027bd4:	eb 0b                	jmp    c0027be1 <__divsf3+0x1ed>
c0027bd6:	be ff 00 00 00       	mov    esi,0xff
c0027bdb:	eb 02                	jmp    c0027bdf <__divsf3+0x1eb>
c0027bdd:	31 f6                	xor    esi,esi
c0027bdf:	31 d2                	xor    edx,edx
c0027be1:	89 d0                	mov    eax,edx
c0027be3:	c1 e8 08             	shr    eax,0x8
c0027be6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027be9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027bef:	09 fe                	or     esi,edi
c0027bf1:	c1 e6 17             	shl    esi,0x17
c0027bf4:	09 c6                	or     esi,eax
c0027bf6:	f6 c2 7f             	test   dl,0x7f
c0027bf9:	0f 95 c1             	setne  cl
c0027bfc:	09 c8                	or     eax,ecx
c0027bfe:	83 e0 01             	and    eax,0x1
c0027c01:	c1 ea 07             	shr    edx,0x7
c0027c04:	21 c2                	and    edx,eax
c0027c06:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027c09:	eb 0a                	jmp    c0027c15 <__divsf3+0x221>
c0027c0b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027c10:	eb 03                	jmp    c0027c15 <__divsf3+0x221>
c0027c12:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027c15:	89 d8                	mov    eax,ebx
c0027c17:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027c1a:	5b                   	pop    ebx
c0027c1b:	5e                   	pop    esi
c0027c1c:	5f                   	pop    edi
c0027c1d:	5d                   	pop    ebp
c0027c1e:	c3                   	ret    

c0027c1f <__floatsisf>:
c0027c1f:	55                   	push   ebp
c0027c20:	89 e5                	mov    ebp,esp
c0027c22:	53                   	push   ebx
c0027c23:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c26:	85 d2                	test   edx,edx
c0027c28:	7e 2b                	jle    c0027c55 <__floatsisf+0x36>
c0027c2a:	0f bd ca             	bsr    ecx,edx
c0027c2d:	83 f1 1f             	xor    ecx,0x1f
c0027c30:	d3 e2                	shl    edx,cl
c0027c32:	89 d0                	mov    eax,edx
c0027c34:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c39:	89 c3                	mov    ebx,eax
c0027c3b:	c1 eb 08             	shr    ebx,0x8
c0027c3e:	80 e2 7f             	and    dl,0x7f
c0027c41:	0f 95 c2             	setne  dl
c0027c44:	09 da                	or     edx,ebx
c0027c46:	83 e2 01             	and    edx,0x1
c0027c49:	c1 e8 07             	shr    eax,0x7
c0027c4c:	21 c2                	and    edx,eax
c0027c4e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027c53:	eb 32                	jmp    c0027c87 <__floatsisf+0x68>
c0027c55:	b8 00 00 00 00       	mov    eax,0x0
c0027c5a:	74 34                	je     c0027c90 <__floatsisf+0x71>
c0027c5c:	f7 da                	neg    edx
c0027c5e:	0f bd ca             	bsr    ecx,edx
c0027c61:	83 f1 1f             	xor    ecx,0x1f
c0027c64:	d3 e2                	shl    edx,cl
c0027c66:	89 d0                	mov    eax,edx
c0027c68:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027c6d:	89 c3                	mov    ebx,eax
c0027c6f:	c1 eb 08             	shr    ebx,0x8
c0027c72:	80 e2 7f             	and    dl,0x7f
c0027c75:	0f 95 c2             	setne  dl
c0027c78:	09 da                	or     edx,ebx
c0027c7a:	83 e2 01             	and    edx,0x1
c0027c7d:	c1 e8 07             	shr    eax,0x7
c0027c80:	21 c2                	and    edx,eax
c0027c82:	b8 9e 01 00 00       	mov    eax,0x19e
c0027c87:	29 c8                	sub    eax,ecx
c0027c89:	c1 e0 17             	shl    eax,0x17
c0027c8c:	09 d8                	or     eax,ebx
c0027c8e:	01 d0                	add    eax,edx
c0027c90:	5b                   	pop    ebx
c0027c91:	5d                   	pop    ebp
c0027c92:	c3                   	ret    

c0027c93 <__floatunsisf>:
c0027c93:	55                   	push   ebp
c0027c94:	89 e5                	mov    ebp,esp
c0027c96:	53                   	push   ebx
c0027c97:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c9a:	31 c0                	xor    eax,eax
c0027c9c:	85 d2                	test   edx,edx
c0027c9e:	74 32                	je     c0027cd2 <__floatunsisf+0x3f>
c0027ca0:	0f bd ca             	bsr    ecx,edx
c0027ca3:	83 f1 1f             	xor    ecx,0x1f
c0027ca6:	d3 e2                	shl    edx,cl
c0027ca8:	89 d0                	mov    eax,edx
c0027caa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027caf:	89 c3                	mov    ebx,eax
c0027cb1:	c1 eb 08             	shr    ebx,0x8
c0027cb4:	80 e2 7f             	and    dl,0x7f
c0027cb7:	0f 95 c2             	setne  dl
c0027cba:	09 da                	or     edx,ebx
c0027cbc:	83 e2 01             	and    edx,0x1
c0027cbf:	c1 e8 07             	shr    eax,0x7
c0027cc2:	21 c2                	and    edx,eax
c0027cc4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027cc9:	29 c8                	sub    eax,ecx
c0027ccb:	c1 e0 17             	shl    eax,0x17
c0027cce:	09 d8                	or     eax,ebx
c0027cd0:	01 d0                	add    eax,edx
c0027cd2:	5b                   	pop    ebx
c0027cd3:	5d                   	pop    ebp
c0027cd4:	c3                   	ret    

c0027cd5 <__fixsfsi>:
c0027cd5:	55                   	push   ebp
c0027cd6:	89 e5                	mov    ebp,esp
c0027cd8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027cdb:	89 d1                	mov    ecx,edx
c0027cdd:	c1 e1 08             	shl    ecx,0x8
c0027ce0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027ce6:	c1 fa 17             	sar    edx,0x17
c0027ce9:	78 1c                	js     c0027d07 <__fixsfsi+0x32>
c0027ceb:	83 ea 7f             	sub    edx,0x7f
c0027cee:	31 c0                	xor    eax,eax
c0027cf0:	83 fa 1e             	cmp    edx,0x1e
c0027cf3:	77 40                	ja     c0027d35 <__fixsfsi+0x60>
c0027cf5:	89 c8                	mov    eax,ecx
c0027cf7:	0d 00 00 00 80       	or     eax,0x80000000
c0027cfc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d01:	29 d1                	sub    ecx,edx
c0027d03:	d3 e8                	shr    eax,cl
c0027d05:	eb 2e                	jmp    c0027d35 <__fixsfsi+0x60>
c0027d07:	31 c0                	xor    eax,eax
c0027d09:	81 c2 81 00 00 00    	add    edx,0x81
c0027d0f:	78 24                	js     c0027d35 <__fixsfsi+0x60>
c0027d11:	83 fa 1e             	cmp    edx,0x1e
c0027d14:	7e 09                	jle    c0027d1f <__fixsfsi+0x4a>
c0027d16:	83 fa 1f             	cmp    edx,0x1f
c0027d19:	75 18                	jne    c0027d33 <__fixsfsi+0x5e>
c0027d1b:	85 c9                	test   ecx,ecx
c0027d1d:	75 14                	jne    c0027d33 <__fixsfsi+0x5e>
c0027d1f:	89 c8                	mov    eax,ecx
c0027d21:	0d 00 00 00 80       	or     eax,0x80000000
c0027d26:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d2b:	29 d1                	sub    ecx,edx
c0027d2d:	d3 e8                	shr    eax,cl
c0027d2f:	f7 d8                	neg    eax
c0027d31:	eb 02                	jmp    c0027d35 <__fixsfsi+0x60>
c0027d33:	31 c0                	xor    eax,eax
c0027d35:	5d                   	pop    ebp
c0027d36:	c3                   	ret    

c0027d37 <__fixunssfsi>:
c0027d37:	55                   	push   ebp
c0027d38:	89 e5                	mov    ebp,esp
c0027d3a:	53                   	push   ebx
c0027d3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027d3e:	89 d3                	mov    ebx,edx
c0027d40:	c1 fb 17             	sar    ebx,0x17
c0027d43:	83 eb 7f             	sub    ebx,0x7f
c0027d46:	31 c0                	xor    eax,eax
c0027d48:	83 fb 1f             	cmp    ebx,0x1f
c0027d4b:	77 18                	ja     c0027d65 <__fixunssfsi+0x2e>
c0027d4d:	89 d0                	mov    eax,edx
c0027d4f:	c1 e0 08             	shl    eax,0x8
c0027d52:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027d57:	0d 00 00 00 80       	or     eax,0x80000000
c0027d5c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027d61:	29 d9                	sub    ecx,ebx
c0027d63:	d3 e8                	shr    eax,cl
c0027d65:	5b                   	pop    ebx
c0027d66:	5d                   	pop    ebp
c0027d67:	c3                   	ret    

c0027d68 <__cmpsf2>:
c0027d68:	55                   	push   ebp
c0027d69:	89 e5                	mov    ebp,esp
c0027d6b:	57                   	push   edi
c0027d6c:	56                   	push   esi
c0027d6d:	53                   	push   ebx
c0027d6e:	83 ec 24             	sub    esp,0x24
c0027d71:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d77:	e8 4f 10 00 00       	call   c0028dcb <__truncdfsf2>
c0027d7c:	5a                   	pop    edx
c0027d7d:	59                   	pop    ecx
c0027d7e:	89 c3                	mov    ebx,eax
c0027d80:	c1 e8 17             	shr    eax,0x17
c0027d83:	0f b6 f0             	movzx  esi,al
c0027d86:	89 d8                	mov    eax,ebx
c0027d88:	c1 e8 1f             	shr    eax,0x1f
c0027d8b:	31 c6                	xor    esi,eax
c0027d8d:	c1 e3 08             	shl    ebx,0x8
c0027d90:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027d93:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027d96:	e8 30 10 00 00       	call   c0028dcb <__truncdfsf2>
c0027d9b:	83 c4 10             	add    esp,0x10
c0027d9e:	89 c1                	mov    ecx,eax
c0027da0:	c1 e9 17             	shr    ecx,0x17
c0027da3:	0f b6 c9             	movzx  ecx,cl
c0027da6:	89 c7                	mov    edi,eax
c0027da8:	c1 ef 1f             	shr    edi,0x1f
c0027dab:	89 ca                	mov    edx,ecx
c0027dad:	31 fa                	xor    edx,edi
c0027daf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027db2:	c1 e0 08             	shl    eax,0x8
c0027db5:	89 c2                	mov    edx,eax
c0027db7:	89 d8                	mov    eax,ebx
c0027db9:	09 d0                	or     eax,edx
c0027dbb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027dc0:	09 f0                	or     eax,esi
c0027dc2:	75 08                	jne    c0027dcc <__cmpsf2+0x64>
c0027dc4:	31 c0                	xor    eax,eax
c0027dc6:	39 f9                	cmp    ecx,edi
c0027dc8:	75 0c                	jne    c0027dd6 <__cmpsf2+0x6e>
c0027dca:	eb 29                	jmp    c0027df5 <__cmpsf2+0x8d>
c0027dcc:	b8 01 00 00 00       	mov    eax,0x1
c0027dd1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027dd4:	7f 1f                	jg     c0027df5 <__cmpsf2+0x8d>
c0027dd6:	83 c8 ff             	or     eax,0xffffffff
c0027dd9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027ddc:	7c 17                	jl     c0027df5 <__cmpsf2+0x8d>
c0027dde:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027de4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027dea:	b8 01 00 00 00       	mov    eax,0x1
c0027def:	39 d3                	cmp    ebx,edx
c0027df1:	77 02                	ja     c0027df5 <__cmpsf2+0x8d>
c0027df3:	19 c0                	sbb    eax,eax
c0027df5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027df8:	5b                   	pop    ebx
c0027df9:	5e                   	pop    esi
c0027dfa:	5f                   	pop    edi
c0027dfb:	5d                   	pop    ebp
c0027dfc:	c3                   	ret    

c0027dfd <__eqsf2>:
c0027dfd:	55                   	push   ebp
c0027dfe:	89 e5                	mov    ebp,esp
c0027e00:	83 ec 24             	sub    esp,0x24
c0027e03:	6a 01                	push   0x1
c0027e05:	83 ec 0c             	sub    esp,0xc
c0027e08:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e0b:	e8 df 10 00 00       	call   c0028eef <__extendsfdf2>
c0027e10:	83 c4 10             	add    esp,0x10
c0027e13:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e16:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e19:	52                   	push   edx
c0027e1a:	50                   	push   eax
c0027e1b:	50                   	push   eax
c0027e1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027e1f:	e8 cb 10 00 00       	call   c0028eef <__extendsfdf2>
c0027e24:	59                   	pop    ecx
c0027e25:	59                   	pop    ecx
c0027e26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e2c:	52                   	push   edx
c0027e2d:	50                   	push   eax
c0027e2e:	e8 35 ff ff ff       	call   c0027d68 <__cmpsf2>
c0027e33:	83 c4 20             	add    esp,0x20
c0027e36:	c9                   	leave  
c0027e37:	c3                   	ret    

c0027e38 <__nesf2>:
c0027e38:	eb c3                	jmp    c0027dfd <__eqsf2>

c0027e3a <__gtsf2>:
c0027e3a:	55                   	push   ebp
c0027e3b:	89 e5                	mov    ebp,esp
c0027e3d:	83 ec 24             	sub    esp,0x24
c0027e40:	6a ff                	push   0xffffffff
c0027e42:	83 ec 0c             	sub    esp,0xc
c0027e45:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e48:	e8 a2 10 00 00       	call   c0028eef <__extendsfdf2>
c0027e4d:	83 c4 10             	add    esp,0x10
c0027e50:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e53:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e56:	52                   	push   edx
c0027e57:	50                   	push   eax
c0027e58:	50                   	push   eax
c0027e59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027e5c:	e8 8e 10 00 00       	call   c0028eef <__extendsfdf2>
c0027e61:	59                   	pop    ecx
c0027e62:	59                   	pop    ecx
c0027e63:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027e66:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027e69:	52                   	push   edx
c0027e6a:	50                   	push   eax
c0027e6b:	e8 f8 fe ff ff       	call   c0027d68 <__cmpsf2>
c0027e70:	83 c4 20             	add    esp,0x20
c0027e73:	c9                   	leave  
c0027e74:	c3                   	ret    

c0027e75 <__gesf2>:
c0027e75:	eb c3                	jmp    c0027e3a <__gtsf2>

c0027e77 <__ltsf2>:
c0027e77:	eb 84                	jmp    c0027dfd <__eqsf2>

c0027e79 <__lesf2>:
c0027e79:	eb 82                	jmp    c0027dfd <__eqsf2>

c0027e7b <__adddf3>:
c0027e7b:	55                   	push   ebp
c0027e7c:	89 e5                	mov    ebp,esp
c0027e7e:	57                   	push   edi
c0027e7f:	56                   	push   esi
c0027e80:	53                   	push   ebx
c0027e81:	83 ec 24             	sub    esp,0x24
c0027e84:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027e87:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027e8a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027e8d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027e90:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027e93:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027e96:	89 c8                	mov    eax,ecx
c0027e98:	89 ce                	mov    esi,ecx
c0027e9a:	c1 fe 14             	sar    esi,0x14
c0027e9d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027ea0:	89 fb                	mov    ebx,edi
c0027ea2:	89 fa                	mov    edx,edi
c0027ea4:	c1 e2 0b             	shl    edx,0xb
c0027ea7:	c1 e0 0b             	shl    eax,0xb
c0027eaa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027eaf:	c1 eb 15             	shr    ebx,0x15
c0027eb2:	09 d8                	or     eax,ebx
c0027eb4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027eb7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027eba:	c1 fe 14             	sar    esi,0x14
c0027ebd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027ec0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027ec3:	89 f3                	mov    ebx,esi
c0027ec5:	c1 e3 0b             	shl    ebx,0xb
c0027ec8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027ecb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027ece:	c1 e3 0b             	shl    ebx,0xb
c0027ed1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027ed7:	c1 ee 15             	shr    esi,0x15
c0027eda:	09 f3                	or     ebx,esi
c0027edc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027edf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ee2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027ee5:	0f 88 5f 02 00 00    	js     c002814a <__adddf3+0x2cf>
c0027eeb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027eee:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027ef1:	85 db                	test   ebx,ebx
c0027ef3:	0f 8e c7 00 00 00    	jle    c0027fc0 <__adddf3+0x145>
c0027ef9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027f00:	75 1a                	jne    c0027f1c <__adddf3+0xa1>
c0027f02:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f05:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027f08:	0f 84 b2 05 00 00    	je     c00284c0 <__adddf3+0x645>
c0027f0e:	4b                   	dec    ebx
c0027f0f:	75 23                	jne    c0027f34 <__adddf3+0xb9>
c0027f11:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f14:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027f17:	e9 99 00 00 00       	jmp    c0027fb5 <__adddf3+0x13a>
c0027f1c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f1f:	f7 d6                	not    esi
c0027f21:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f27:	0f 84 93 05 00 00    	je     c00284c0 <__adddf3+0x645>
c0027f2d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027f34:	83 fb 1f             	cmp    ebx,0x1f
c0027f37:	7e 42                	jle    c0027f7b <__adddf3+0x100>
c0027f39:	83 fb 3f             	cmp    ebx,0x3f
c0027f3c:	0f 8f 7e 05 00 00    	jg     c00284c0 <__adddf3+0x645>
c0027f42:	83 e3 1f             	and    ebx,0x1f
c0027f45:	89 d9                	mov    ecx,ebx
c0027f47:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027f4a:	d3 ef                	shr    edi,cl
c0027f4c:	31 db                	xor    ebx,ebx
c0027f4e:	85 c9                	test   ecx,ecx
c0027f50:	74 15                	je     c0027f67 <__adddf3+0xec>
c0027f52:	be 20 00 00 00       	mov    esi,0x20
c0027f57:	29 ce                	sub    esi,ecx
c0027f59:	89 f1                	mov    ecx,esi
c0027f5b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f5e:	d3 e6                	shl    esi,cl
c0027f60:	31 db                	xor    ebx,ebx
c0027f62:	85 f6                	test   esi,esi
c0027f64:	0f 95 c3             	setne  bl
c0027f67:	31 c9                	xor    ecx,ecx
c0027f69:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027f6d:	0f 95 c1             	setne  cl
c0027f70:	09 cf                	or     edi,ecx
c0027f72:	09 fb                	or     ebx,edi
c0027f74:	01 da                	add    edx,ebx
c0027f76:	83 d0 00             	adc    eax,0x0
c0027f79:	eb 3a                	jmp    c0027fb5 <__adddf3+0x13a>
c0027f7b:	bf 20 00 00 00       	mov    edi,0x20
c0027f80:	29 df                	sub    edi,ebx
c0027f82:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f85:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f88:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027f8b:	d3 e6                	shl    esi,cl
c0027f8d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027f90:	88 d9                	mov    cl,bl
c0027f92:	d3 ef                	shr    edi,cl
c0027f94:	09 fe                	or     esi,edi
c0027f96:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027f99:	88 d9                	mov    cl,bl
c0027f9b:	d3 ef                	shr    edi,cl
c0027f9d:	89 fb                	mov    ebx,edi
c0027f9f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027fa2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027fa5:	d3 e7                	shl    edi,cl
c0027fa7:	85 ff                	test   edi,edi
c0027fa9:	0f 95 c1             	setne  cl
c0027fac:	0f b6 c9             	movzx  ecx,cl
c0027faf:	09 ce                	or     esi,ecx
c0027fb1:	01 f2                	add    edx,esi
c0027fb3:	11 d8                	adc    eax,ebx
c0027fb5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027fb8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027fbb:	e9 52 01 00 00       	jmp    c0028112 <__adddf3+0x297>
c0027fc0:	0f 84 d5 00 00 00    	je     c002809b <__adddf3+0x220>
c0027fc6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027fc9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027fcc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027fcf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027fd2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027fd9:	75 20                	jne    c0027ffb <__adddf3+0x180>
c0027fdb:	89 d6                	mov    esi,edx
c0027fdd:	09 c6                	or     esi,eax
c0027fdf:	0f 84 db 04 00 00    	je     c00284c0 <__adddf3+0x645>
c0027fe5:	4b                   	dec    ebx
c0027fe6:	75 29                	jne    c0028011 <__adddf3+0x196>
c0027fe8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027feb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027fee:	01 d1                	add    ecx,edx
c0027ff0:	11 c6                	adc    esi,eax
c0027ff2:	89 f0                	mov    eax,esi
c0027ff4:	89 ca                	mov    edx,ecx
c0027ff6:	e9 17 01 00 00       	jmp    c0028112 <__adddf3+0x297>
c0027ffb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ffe:	f7 d6                	not    esi
c0028000:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028006:	0f 84 b4 04 00 00    	je     c00284c0 <__adddf3+0x645>
c002800c:	0d 00 00 00 80       	or     eax,0x80000000
c0028011:	83 fb 1f             	cmp    ebx,0x1f
c0028014:	7e 48                	jle    c002805e <__adddf3+0x1e3>
c0028016:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028019:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002801c:	83 fb 3f             	cmp    ebx,0x3f
c002801f:	0f 8f 9b 04 00 00    	jg     c00284c0 <__adddf3+0x645>
c0028025:	83 e3 1f             	and    ebx,0x1f
c0028028:	89 d9                	mov    ecx,ebx
c002802a:	89 c7                	mov    edi,eax
c002802c:	d3 ef                	shr    edi,cl
c002802e:	31 db                	xor    ebx,ebx
c0028030:	85 c9                	test   ecx,ecx
c0028032:	74 12                	je     c0028046 <__adddf3+0x1cb>
c0028034:	be 20 00 00 00       	mov    esi,0x20
c0028039:	29 ce                	sub    esi,ecx
c002803b:	89 f1                	mov    ecx,esi
c002803d:	d3 e0                	shl    eax,cl
c002803f:	31 db                	xor    ebx,ebx
c0028041:	85 c0                	test   eax,eax
c0028043:	0f 95 c3             	setne  bl
c0028046:	31 c0                	xor    eax,eax
c0028048:	85 d2                	test   edx,edx
c002804a:	0f 95 c0             	setne  al
c002804d:	09 c7                	or     edi,eax
c002804f:	09 fb                	or     ebx,edi
c0028051:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028054:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028057:	01 da                	add    edx,ebx
c0028059:	83 d6 00             	adc    esi,0x0
c002805c:	eb 39                	jmp    c0028097 <__adddf3+0x21c>
c002805e:	be 20 00 00 00       	mov    esi,0x20
c0028063:	29 de                	sub    esi,ebx
c0028065:	89 c7                	mov    edi,eax
c0028067:	89 f1                	mov    ecx,esi
c0028069:	d3 e7                	shl    edi,cl
c002806b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002806e:	89 d7                	mov    edi,edx
c0028070:	88 d9                	mov    cl,bl
c0028072:	d3 ef                	shr    edi,cl
c0028074:	89 f9                	mov    ecx,edi
c0028076:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028079:	09 cf                	or     edi,ecx
c002807b:	88 d9                	mov    cl,bl
c002807d:	d3 e8                	shr    eax,cl
c002807f:	89 f1                	mov    ecx,esi
c0028081:	d3 e2                	shl    edx,cl
c0028083:	85 d2                	test   edx,edx
c0028085:	0f 95 c2             	setne  dl
c0028088:	0f b6 d2             	movzx  edx,dl
c002808b:	09 d7                	or     edi,edx
c002808d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028090:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028093:	01 fa                	add    edx,edi
c0028095:	11 c6                	adc    esi,eax
c0028097:	89 f0                	mov    eax,esi
c0028099:	eb 77                	jmp    c0028112 <__adddf3+0x297>
c002809b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002809e:	46                   	inc    esi
c002809f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00280a2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00280a8:	75 41                	jne    c00280eb <__adddf3+0x270>
c00280aa:	89 d3                	mov    ebx,edx
c00280ac:	09 c3                	or     ebx,eax
c00280ae:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00280b5:	75 27                	jne    c00280de <__adddf3+0x263>
c00280b7:	85 db                	test   ebx,ebx
c00280b9:	0f 84 fb 03 00 00    	je     c00284ba <__adddf3+0x63f>
c00280bf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00280c2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00280c5:	0f 84 f5 03 00 00    	je     c00284c0 <__adddf3+0x645>
c00280cb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00280ce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00280d1:	85 c0                	test   eax,eax
c00280d3:	0f 89 91 03 00 00    	jns    c002846a <__adddf3+0x5ef>
c00280d9:	e9 85 03 00 00       	jmp    c0028463 <__adddf3+0x5e8>
c00280de:	85 db                	test   ebx,ebx
c00280e0:	0f 85 da 03 00 00    	jne    c00284c0 <__adddf3+0x645>
c00280e6:	e9 cf 03 00 00       	jmp    c00284ba <__adddf3+0x63f>
c00280eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00280ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00280f1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00280f4:	f7 d1                	not    ecx
c00280f6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00280fc:	0f 84 70 03 00 00    	je     c0028472 <__adddf3+0x5f7>
c0028102:	d1 ea                	shr    edx,1
c0028104:	89 c1                	mov    ecx,eax
c0028106:	c1 e1 1f             	shl    ecx,0x1f
c0028109:	09 ca                	or     edx,ecx
c002810b:	d1 e8                	shr    eax,1
c002810d:	e9 6f 03 00 00       	jmp    c0028481 <__adddf3+0x606>
c0028112:	85 c0                	test   eax,eax
c0028114:	0f 89 67 03 00 00    	jns    c0028481 <__adddf3+0x606>
c002811a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002811d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028120:	f7 d1                	not    ecx
c0028122:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028128:	0f 84 44 03 00 00    	je     c0028472 <__adddf3+0x5f7>
c002812e:	89 d1                	mov    ecx,edx
c0028130:	d1 e9                	shr    ecx,1
c0028132:	83 e2 01             	and    edx,0x1
c0028135:	09 ca                	or     edx,ecx
c0028137:	89 c1                	mov    ecx,eax
c0028139:	c1 e1 1f             	shl    ecx,0x1f
c002813c:	09 ca                	or     edx,ecx
c002813e:	d1 e8                	shr    eax,1
c0028140:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028145:	e9 37 03 00 00       	jmp    c0028481 <__adddf3+0x606>
c002814a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002814d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028153:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028156:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028159:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002815f:	29 de                	sub    esi,ebx
c0028161:	85 f6                	test   esi,esi
c0028163:	0f 8e bd 00 00 00    	jle    c0028226 <__adddf3+0x3ab>
c0028169:	85 db                	test   ebx,ebx
c002816b:	75 17                	jne    c0028184 <__adddf3+0x309>
c002816d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028170:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028173:	0f 84 47 03 00 00    	je     c00284c0 <__adddf3+0x645>
c0028179:	4e                   	dec    esi
c002817a:	75 20                	jne    c002819c <__adddf3+0x321>
c002817c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002817f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028182:	eb 5b                	jmp    c00281df <__adddf3+0x364>
c0028184:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028187:	f7 d3                	not    ebx
c0028189:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002818f:	0f 84 2b 03 00 00    	je     c00284c0 <__adddf3+0x645>
c0028195:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002819c:	83 fe 1f             	cmp    esi,0x1f
c002819f:	7e 49                	jle    c00281ea <__adddf3+0x36f>
c00281a1:	83 fe 3f             	cmp    esi,0x3f
c00281a4:	0f 8f 16 03 00 00    	jg     c00284c0 <__adddf3+0x645>
c00281aa:	83 e6 1f             	and    esi,0x1f
c00281ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00281b0:	89 f1                	mov    ecx,esi
c00281b2:	d3 ef                	shr    edi,cl
c00281b4:	31 db                	xor    ebx,ebx
c00281b6:	85 f6                	test   esi,esi
c00281b8:	74 13                	je     c00281cd <__adddf3+0x352>
c00281ba:	b9 20 00 00 00       	mov    ecx,0x20
c00281bf:	29 f1                	sub    ecx,esi
c00281c1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281c4:	d3 e6                	shl    esi,cl
c00281c6:	31 db                	xor    ebx,ebx
c00281c8:	85 f6                	test   esi,esi
c00281ca:	0f 95 c3             	setne  bl
c00281cd:	31 c9                	xor    ecx,ecx
c00281cf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00281d3:	0f 95 c1             	setne  cl
c00281d6:	09 cf                	or     edi,ecx
c00281d8:	09 fb                	or     ebx,edi
c00281da:	29 da                	sub    edx,ebx
c00281dc:	83 d8 00             	sbb    eax,0x0
c00281df:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281e2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281e5:	e9 aa 01 00 00       	jmp    c0028394 <__adddf3+0x519>
c00281ea:	bf 20 00 00 00       	mov    edi,0x20
c00281ef:	29 f7                	sub    edi,esi
c00281f1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00281f4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00281f7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00281fa:	d3 e3                	shl    ebx,cl
c00281fc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00281ff:	89 f1                	mov    ecx,esi
c0028201:	d3 ef                	shr    edi,cl
c0028203:	09 fb                	or     ebx,edi
c0028205:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028208:	89 f1                	mov    ecx,esi
c002820a:	d3 ef                	shr    edi,cl
c002820c:	89 fe                	mov    esi,edi
c002820e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028211:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028214:	d3 e7                	shl    edi,cl
c0028216:	85 ff                	test   edi,edi
c0028218:	0f 95 c1             	setne  cl
c002821b:	0f b6 c9             	movzx  ecx,cl
c002821e:	09 cb                	or     ebx,ecx
c0028220:	29 da                	sub    edx,ebx
c0028222:	19 f0                	sbb    eax,esi
c0028224:	eb b9                	jmp    c00281df <__adddf3+0x364>
c0028226:	0f 84 cd 00 00 00    	je     c00282f9 <__adddf3+0x47e>
c002822c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002822f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028232:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028235:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028239:	75 1b                	jne    c0028256 <__adddf3+0x3db>
c002823b:	89 d6                	mov    esi,edx
c002823d:	09 c6                	or     esi,eax
c002823f:	0f 84 7b 02 00 00    	je     c00284c0 <__adddf3+0x645>
c0028245:	4b                   	dec    ebx
c0028246:	75 24                	jne    c002826c <__adddf3+0x3f1>
c0028248:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002824b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002824e:	29 d1                	sub    ecx,edx
c0028250:	19 c6                	sbb    esi,eax
c0028252:	89 ca                	mov    edx,ecx
c0028254:	eb 61                	jmp    c00282b7 <__adddf3+0x43c>
c0028256:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028259:	f7 d6                	not    esi
c002825b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028261:	0f 84 59 02 00 00    	je     c00284c0 <__adddf3+0x645>
c0028267:	0d 00 00 00 80       	or     eax,0x80000000
c002826c:	83 fb 1f             	cmp    ebx,0x1f
c002826f:	7e 4d                	jle    c00282be <__adddf3+0x443>
c0028271:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028274:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028277:	83 fb 3f             	cmp    ebx,0x3f
c002827a:	0f 8f 40 02 00 00    	jg     c00284c0 <__adddf3+0x645>
c0028280:	83 e3 1f             	and    ebx,0x1f
c0028283:	89 d9                	mov    ecx,ebx
c0028285:	89 c7                	mov    edi,eax
c0028287:	d3 ef                	shr    edi,cl
c0028289:	31 db                	xor    ebx,ebx
c002828b:	85 c9                	test   ecx,ecx
c002828d:	74 12                	je     c00282a1 <__adddf3+0x426>
c002828f:	be 20 00 00 00       	mov    esi,0x20
c0028294:	29 ce                	sub    esi,ecx
c0028296:	89 f1                	mov    ecx,esi
c0028298:	d3 e0                	shl    eax,cl
c002829a:	31 db                	xor    ebx,ebx
c002829c:	85 c0                	test   eax,eax
c002829e:	0f 95 c3             	setne  bl
c00282a1:	31 c0                	xor    eax,eax
c00282a3:	85 d2                	test   edx,edx
c00282a5:	0f 95 c0             	setne  al
c00282a8:	09 c7                	or     edi,eax
c00282aa:	09 fb                	or     ebx,edi
c00282ac:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282af:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00282b2:	29 da                	sub    edx,ebx
c00282b4:	83 de 00             	sbb    esi,0x0
c00282b7:	89 f0                	mov    eax,esi
c00282b9:	e9 d6 00 00 00       	jmp    c0028394 <__adddf3+0x519>
c00282be:	be 20 00 00 00       	mov    esi,0x20
c00282c3:	29 de                	sub    esi,ebx
c00282c5:	89 c7                	mov    edi,eax
c00282c7:	89 f1                	mov    ecx,esi
c00282c9:	d3 e7                	shl    edi,cl
c00282cb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00282ce:	89 d7                	mov    edi,edx
c00282d0:	88 d9                	mov    cl,bl
c00282d2:	d3 ef                	shr    edi,cl
c00282d4:	89 f9                	mov    ecx,edi
c00282d6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282d9:	09 cf                	or     edi,ecx
c00282db:	88 d9                	mov    cl,bl
c00282dd:	d3 e8                	shr    eax,cl
c00282df:	89 f1                	mov    ecx,esi
c00282e1:	d3 e2                	shl    edx,cl
c00282e3:	85 d2                	test   edx,edx
c00282e5:	0f 95 c2             	setne  dl
c00282e8:	0f b6 d2             	movzx  edx,dl
c00282eb:	09 d7                	or     edi,edx
c00282ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282f0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00282f3:	29 fa                	sub    edx,edi
c00282f5:	19 c6                	sbb    esi,eax
c00282f7:	eb be                	jmp    c00282b7 <__adddf3+0x43c>
c00282f9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00282fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00282ff:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028305:	75 6a                	jne    c0028371 <__adddf3+0x4f6>
c0028307:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002830b:	75 58                	jne    c0028365 <__adddf3+0x4ea>
c002830d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028310:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028313:	89 d6                	mov    esi,edx
c0028315:	09 c6                	or     esi,eax
c0028317:	75 17                	jne    c0028330 <__adddf3+0x4b5>
c0028319:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002831c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002831f:	85 db                	test   ebx,ebx
c0028321:	0f 85 99 01 00 00    	jne    c00284c0 <__adddf3+0x645>
c0028327:	31 ff                	xor    edi,edi
c0028329:	31 c9                	xor    ecx,ecx
c002832b:	e9 90 01 00 00       	jmp    c00284c0 <__adddf3+0x645>
c0028330:	85 db                	test   ebx,ebx
c0028332:	0f 84 88 01 00 00    	je     c00284c0 <__adddf3+0x645>
c0028338:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002833b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002833e:	85 c0                	test   eax,eax
c0028340:	79 10                	jns    c0028352 <__adddf3+0x4d7>
c0028342:	31 c9                	xor    ecx,ecx
c0028344:	f7 da                	neg    edx
c0028346:	0f 95 c1             	setne  cl
c0028349:	01 c8                	add    eax,ecx
c002834b:	f7 d8                	neg    eax
c002834d:	e9 2f 01 00 00       	jmp    c0028481 <__adddf3+0x606>
c0028352:	31 ff                	xor    edi,edi
c0028354:	31 c9                	xor    ecx,ecx
c0028356:	89 c3                	mov    ebx,eax
c0028358:	09 d3                	or     ebx,edx
c002835a:	0f 84 60 01 00 00    	je     c00284c0 <__adddf3+0x645>
c0028360:	e9 05 01 00 00       	jmp    c002846a <__adddf3+0x5ef>
c0028365:	31 ff                	xor    edi,edi
c0028367:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002836c:	e9 4f 01 00 00       	jmp    c00284c0 <__adddf3+0x645>
c0028371:	89 c1                	mov    ecx,eax
c0028373:	89 d0                	mov    eax,edx
c0028375:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028378:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002837b:	89 ca                	mov    edx,ecx
c002837d:	85 c9                	test   ecx,ecx
c002837f:	79 2c                	jns    c00283ad <__adddf3+0x532>
c0028381:	31 c9                	xor    ecx,ecx
c0028383:	f7 d8                	neg    eax
c0028385:	0f 95 c1             	setne  cl
c0028388:	01 ca                	add    edx,ecx
c002838a:	f7 da                	neg    edx
c002838c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002838f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028392:	eb 19                	jmp    c00283ad <__adddf3+0x532>
c0028394:	85 c0                	test   eax,eax
c0028396:	0f 89 e5 00 00 00    	jns    c0028481 <__adddf3+0x606>
c002839c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00283a1:	89 c1                	mov    ecx,eax
c00283a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00283a6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00283a9:	89 d0                	mov    eax,edx
c00283ab:	89 ca                	mov    edx,ecx
c00283ad:	85 d2                	test   edx,edx
c00283af:	74 59                	je     c002840a <__adddf3+0x58f>
c00283b1:	0f bd da             	bsr    ebx,edx
c00283b4:	83 f3 1f             	xor    ebx,0x1f
c00283b7:	88 d9                	mov    cl,bl
c00283b9:	d3 e2                	shl    edx,cl
c00283bb:	bf 20 00 00 00       	mov    edi,0x20
c00283c0:	89 f9                	mov    ecx,edi
c00283c2:	29 d9                	sub    ecx,ebx
c00283c4:	89 c6                	mov    esi,eax
c00283c6:	d3 ee                	shr    esi,cl
c00283c8:	09 d6                	or     esi,edx
c00283ca:	88 d9                	mov    cl,bl
c00283cc:	d3 e0                	shl    eax,cl
c00283ce:	89 c2                	mov    edx,eax
c00283d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00283d3:	25 ff 07 00 00       	and    eax,0x7ff
c00283d8:	39 d8                	cmp    eax,ebx
c00283da:	7f 22                	jg     c00283fe <__adddf3+0x583>
c00283dc:	29 c3                	sub    ebx,eax
c00283de:	43                   	inc    ebx
c00283df:	88 d9                	mov    cl,bl
c00283e1:	d3 ea                	shr    edx,cl
c00283e3:	29 df                	sub    edi,ebx
c00283e5:	89 f9                	mov    ecx,edi
c00283e7:	89 f0                	mov    eax,esi
c00283e9:	d3 e0                	shl    eax,cl
c00283eb:	09 c2                	or     edx,eax
c00283ed:	89 f0                	mov    eax,esi
c00283ef:	88 d9                	mov    cl,bl
c00283f1:	d3 e8                	shr    eax,cl
c00283f3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00283f6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00283fc:	eb 6f                	jmp    c002846d <__adddf3+0x5f2>
c00283fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028401:	29 d8                	sub    eax,ebx
c0028403:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028406:	89 f0                	mov    eax,esi
c0028408:	eb 59                	jmp    c0028463 <__adddf3+0x5e8>
c002840a:	85 c0                	test   eax,eax
c002840c:	74 6a                	je     c0028478 <__adddf3+0x5fd>
c002840e:	0f bd c8             	bsr    ecx,eax
c0028411:	83 f1 1f             	xor    ecx,0x1f
c0028414:	d3 e0                	shl    eax,cl
c0028416:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028419:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002841f:	83 c1 20             	add    ecx,0x20
c0028422:	39 cb                	cmp    ebx,ecx
c0028424:	7f 35                	jg     c002845b <__adddf3+0x5e0>
c0028426:	29 d9                	sub    ecx,ebx
c0028428:	8d 71 01             	lea    esi,[ecx+0x1]
c002842b:	83 fe 1f             	cmp    esi,0x1f
c002842e:	7e 09                	jle    c0028439 <__adddf3+0x5be>
c0028430:	83 e9 1f             	sub    ecx,0x1f
c0028433:	d3 e8                	shr    eax,cl
c0028435:	89 c3                	mov    ebx,eax
c0028437:	eb 11                	jmp    c002844a <__adddf3+0x5cf>
c0028439:	b9 20 00 00 00       	mov    ecx,0x20
c002843e:	29 f1                	sub    ecx,esi
c0028440:	89 c3                	mov    ebx,eax
c0028442:	d3 e3                	shl    ebx,cl
c0028444:	89 f1                	mov    ecx,esi
c0028446:	d3 e8                	shr    eax,cl
c0028448:	89 c2                	mov    edx,eax
c002844a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002844d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028452:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028455:	89 d0                	mov    eax,edx
c0028457:	89 da                	mov    edx,ebx
c0028459:	eb 26                	jmp    c0028481 <__adddf3+0x606>
c002845b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002845e:	29 cf                	sub    edi,ecx
c0028460:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028463:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028468:	eb 17                	jmp    c0028481 <__adddf3+0x606>
c002846a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002846d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028470:	eb 0f                	jmp    c0028481 <__adddf3+0x606>
c0028472:	31 d2                	xor    edx,edx
c0028474:	31 c0                	xor    eax,eax
c0028476:	eb 09                	jmp    c0028481 <__adddf3+0x606>
c0028478:	89 c2                	mov    edx,eax
c002847a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028481:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028484:	c1 e1 14             	shl    ecx,0x14
c0028487:	89 c3                	mov    ebx,eax
c0028489:	c1 eb 0b             	shr    ebx,0xb
c002848c:	09 d9                	or     ecx,ebx
c002848e:	89 d3                	mov    ebx,edx
c0028490:	c1 eb 0b             	shr    ebx,0xb
c0028493:	c1 e0 15             	shl    eax,0x15
c0028496:	09 d8                	or     eax,ebx
c0028498:	89 c7                	mov    edi,eax
c002849a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00284a0:	0f 95 c0             	setne  al
c00284a3:	89 c6                	mov    esi,eax
c00284a5:	09 f3                	or     ebx,esi
c00284a7:	83 e3 01             	and    ebx,0x1
c00284aa:	c1 ea 0a             	shr    edx,0xa
c00284ad:	21 da                	and    edx,ebx
c00284af:	89 f8                	mov    eax,edi
c00284b1:	01 d0                	add    eax,edx
c00284b3:	83 d1 00             	adc    ecx,0x0
c00284b6:	89 c7                	mov    edi,eax
c00284b8:	eb 06                	jmp    c00284c0 <__adddf3+0x645>
c00284ba:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00284bd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00284c0:	89 f8                	mov    eax,edi
c00284c2:	89 ca                	mov    edx,ecx
c00284c4:	83 c4 24             	add    esp,0x24
c00284c7:	5b                   	pop    ebx
c00284c8:	5e                   	pop    esi
c00284c9:	5f                   	pop    edi
c00284ca:	5d                   	pop    ebp
c00284cb:	c3                   	ret    

c00284cc <__subdf3>:
c00284cc:	55                   	push   ebp
c00284cd:	89 e5                	mov    ebp,esp
c00284cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00284d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00284d5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00284db:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00284de:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00284e1:	5d                   	pop    ebp
c00284e2:	e9 94 f9 ff ff       	jmp    c0027e7b <__adddf3>

c00284e7 <__negdf2>:
c00284e7:	55                   	push   ebp
c00284e8:	89 e5                	mov    ebp,esp
c00284ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00284ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00284f0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00284f6:	5d                   	pop    ebp
c00284f7:	c3                   	ret    

c00284f8 <__muldf3>:
c00284f8:	55                   	push   ebp
c00284f9:	89 e5                	mov    ebp,esp
c00284fb:	57                   	push   edi
c00284fc:	56                   	push   esi
c00284fd:	53                   	push   ebx
c00284fe:	83 ec 24             	sub    esp,0x24
c0028501:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028504:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028507:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002850a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002850d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028510:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028513:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028516:	89 c8                	mov    eax,ecx
c0028518:	c1 f8 14             	sar    eax,0x14
c002851b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002851e:	89 f8                	mov    eax,edi
c0028520:	89 fb                	mov    ebx,edi
c0028522:	c1 e3 0b             	shl    ebx,0xb
c0028525:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028528:	c1 e1 0b             	shl    ecx,0xb
c002852b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028531:	c1 e8 15             	shr    eax,0x15
c0028534:	09 c1                	or     ecx,eax
c0028536:	89 d6                	mov    esi,edx
c0028538:	89 d0                	mov    eax,edx
c002853a:	c1 f8 14             	sar    eax,0x14
c002853d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028540:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028543:	89 c3                	mov    ebx,eax
c0028545:	c1 e3 0b             	shl    ebx,0xb
c0028548:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002854b:	c1 e6 0b             	shl    esi,0xb
c002854e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028554:	c1 e8 15             	shr    eax,0x15
c0028557:	09 c6                	or     esi,eax
c0028559:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002855c:	25 ff 07 00 00       	and    eax,0x7ff
c0028561:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028564:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028567:	25 ff 07 00 00       	and    eax,0x7ff
c002856c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002856f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028572:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028575:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002857c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002857f:	40                   	inc    eax
c0028580:	a9 fe 07 00 00       	test   eax,0x7fe
c0028585:	0f 85 8d 00 00 00    	jne    c0028618 <__muldf3+0x120>
c002858b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002858e:	09 c8                	or     eax,ecx
c0028590:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028594:	74 44                	je     c00285da <__muldf3+0xe2>
c0028596:	85 c0                	test   eax,eax
c0028598:	0f 85 31 02 00 00    	jne    c00287cf <__muldf3+0x2d7>
c002859e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00285a1:	40                   	inc    eax
c00285a2:	a9 fe 07 00 00       	test   eax,0x7fe
c00285a7:	75 13                	jne    c00285bc <__muldf3+0xc4>
c00285a9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00285ac:	09 f1                	or     ecx,esi
c00285ae:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00285b2:	74 22                	je     c00285d6 <__muldf3+0xde>
c00285b4:	85 c9                	test   ecx,ecx
c00285b6:	0f 85 0d 02 00 00    	jne    c00287c9 <__muldf3+0x2d1>
c00285bc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00285c0:	0f 89 09 02 00 00    	jns    c00287cf <__muldf3+0x2d7>
c00285c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00285c9:	05 00 00 00 80       	add    eax,0x80000000
c00285ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285d1:	e9 f9 01 00 00       	jmp    c00287cf <__muldf3+0x2d7>
c00285d6:	85 c9                	test   ecx,ecx
c00285d8:	eb 2e                	jmp    c0028608 <__muldf3+0x110>
c00285da:	85 c0                	test   eax,eax
c00285dc:	74 20                	je     c00285fe <__muldf3+0x106>
c00285de:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00285e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00285e4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285e7:	c1 ef 1f             	shr    edi,0x1f
c00285ea:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00285ed:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00285f0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00285f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00285f6:	09 f9                	or     ecx,edi
c00285f8:	78 1e                	js     c0028618 <__muldf3+0x120>
c00285fa:	89 c3                	mov    ebx,eax
c00285fc:	eb e0                	jmp    c00285de <__muldf3+0xe6>
c00285fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028601:	f7 d0                	not    eax
c0028603:	a9 ff 07 00 00       	test   eax,0x7ff
c0028608:	75 b2                	jne    c00285bc <__muldf3+0xc4>
c002860a:	31 ff                	xor    edi,edi
c002860c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028613:	e9 b7 01 00 00       	jmp    c00287cf <__muldf3+0x2d7>
c0028618:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002861b:	40                   	inc    eax
c002861c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028621:	75 57                	jne    c002867a <__muldf3+0x182>
c0028623:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028626:	09 f0                	or     eax,esi
c0028628:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002862c:	74 23                	je     c0028651 <__muldf3+0x159>
c002862e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028632:	0f 89 91 01 00 00    	jns    c00287c9 <__muldf3+0x2d1>
c0028638:	85 c0                	test   eax,eax
c002863a:	0f 85 89 01 00 00    	jne    c00287c9 <__muldf3+0x2d1>
c0028640:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028643:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028649:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002864c:	e9 7e 01 00 00       	jmp    c00287cf <__muldf3+0x2d7>
c0028651:	85 c0                	test   eax,eax
c0028653:	75 0c                	jne    c0028661 <__muldf3+0x169>
c0028655:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028659:	0f 89 6a 01 00 00    	jns    c00287c9 <__muldf3+0x2d1>
c002865f:	eb df                	jmp    c0028640 <__muldf3+0x148>
c0028661:	01 f6                	add    esi,esi
c0028663:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028666:	c1 ea 1f             	shr    edx,0x1f
c0028669:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002866c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002866f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028672:	09 d6                	or     esi,edx
c0028674:	78 04                	js     c002867a <__muldf3+0x182>
c0028676:	89 c3                	mov    ebx,eax
c0028678:	eb e7                	jmp    c0028661 <__muldf3+0x169>
c002867a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028680:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028686:	89 c8                	mov    eax,ecx
c0028688:	f7 e6                	mul    esi
c002868a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002868d:	89 c7                	mov    edi,eax
c002868f:	89 c8                	mov    eax,ecx
c0028691:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028694:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028697:	89 c1                	mov    ecx,eax
c0028699:	89 f0                	mov    eax,esi
c002869b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002869e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00286a1:	89 c6                	mov    esi,eax
c00286a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00286a6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00286a9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00286ac:	31 c0                	xor    eax,eax
c00286ae:	01 f1                	add    ecx,esi
c00286b0:	0f 92 c0             	setb   al
c00286b3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00286b6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00286b9:	83 d6 00             	adc    esi,0x0
c00286bc:	01 c7                	add    edi,eax
c00286be:	83 d6 00             	adc    esi,0x0
c00286c1:	01 ca                	add    edx,ecx
c00286c3:	0f 92 c1             	setb   cl
c00286c6:	0f b6 c9             	movzx  ecx,cl
c00286c9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00286cc:	83 d6 00             	adc    esi,0x0
c00286cf:	01 cf                	add    edi,ecx
c00286d1:	83 d6 00             	adc    esi,0x0
c00286d4:	31 c9                	xor    ecx,ecx
c00286d6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00286d9:	0f 95 c1             	setne  cl
c00286dc:	09 cf                	or     edi,ecx
c00286de:	85 f6                	test   esi,esi
c00286e0:	78 0c                	js     c00286ee <__muldf3+0x1f6>
c00286e2:	01 f6                	add    esi,esi
c00286e4:	89 f8                	mov    eax,edi
c00286e6:	c1 e8 1f             	shr    eax,0x1f
c00286e9:	09 c6                	or     esi,eax
c00286eb:	01 ff                	add    edi,edi
c00286ed:	4b                   	dec    ebx
c00286ee:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00286f4:	0f 8f 85 00 00 00    	jg     c002877f <__muldf3+0x287>
c00286fa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028700:	85 db                	test   ebx,ebx
c0028702:	0f 8f 84 00 00 00    	jg     c002878c <__muldf3+0x294>
c0028708:	83 fb cc             	cmp    ebx,0xffffffcc
c002870b:	7c 79                	jl     c0028786 <__muldf3+0x28e>
c002870d:	ba 01 00 00 00       	mov    edx,0x1
c0028712:	29 da                	sub    edx,ebx
c0028714:	81 ce 00 00 00 80    	or     esi,0x80000000
c002871a:	83 fa 1f             	cmp    edx,0x1f
c002871d:	7e 30                	jle    c002874f <__muldf3+0x257>
c002871f:	83 fa 20             	cmp    edx,0x20
c0028722:	75 0b                	jne    c002872f <__muldf3+0x237>
c0028724:	31 c0                	xor    eax,eax
c0028726:	85 ff                	test   edi,edi
c0028728:	0f 95 c0             	setne  al
c002872b:	89 c7                	mov    edi,eax
c002872d:	eb 1a                	jmp    c0028749 <__muldf3+0x251>
c002872f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028732:	89 f0                	mov    eax,esi
c0028734:	d3 e0                	shl    eax,cl
c0028736:	09 f8                	or     eax,edi
c0028738:	0f 95 c0             	setne  al
c002873b:	0f b6 c0             	movzx  eax,al
c002873e:	89 c7                	mov    edi,eax
c0028740:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028745:	29 d9                	sub    ecx,ebx
c0028747:	d3 ee                	shr    esi,cl
c0028749:	09 f7                	or     edi,esi
c002874b:	31 db                	xor    ebx,ebx
c002874d:	eb 3b                	jmp    c002878a <__muldf3+0x292>
c002874f:	83 c3 1f             	add    ebx,0x1f
c0028752:	89 f0                	mov    eax,esi
c0028754:	88 d9                	mov    cl,bl
c0028756:	d3 e0                	shl    eax,cl
c0028758:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002875b:	89 f8                	mov    eax,edi
c002875d:	88 d1                	mov    cl,dl
c002875f:	d3 e8                	shr    eax,cl
c0028761:	89 c1                	mov    ecx,eax
c0028763:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028766:	09 c8                	or     eax,ecx
c0028768:	88 d9                	mov    cl,bl
c002876a:	d3 e7                	shl    edi,cl
c002876c:	31 db                	xor    ebx,ebx
c002876e:	85 ff                	test   edi,edi
c0028770:	0f 95 c3             	setne  bl
c0028773:	89 df                	mov    edi,ebx
c0028775:	09 c7                	or     edi,eax
c0028777:	88 d1                	mov    cl,dl
c0028779:	d3 ee                	shr    esi,cl
c002877b:	31 db                	xor    ebx,ebx
c002877d:	eb 0d                	jmp    c002878c <__muldf3+0x294>
c002877f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028784:	eb 02                	jmp    c0028788 <__muldf3+0x290>
c0028786:	31 db                	xor    ebx,ebx
c0028788:	31 ff                	xor    edi,edi
c002878a:	31 f6                	xor    esi,esi
c002878c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002878f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028792:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028797:	09 c3                	or     ebx,eax
c0028799:	c1 e3 14             	shl    ebx,0x14
c002879c:	89 f0                	mov    eax,esi
c002879e:	c1 e8 0b             	shr    eax,0xb
c00287a1:	09 c3                	or     ebx,eax
c00287a3:	89 f8                	mov    eax,edi
c00287a5:	c1 e8 0b             	shr    eax,0xb
c00287a8:	c1 e6 15             	shl    esi,0x15
c00287ab:	09 c6                	or     esi,eax
c00287ad:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00287b3:	0f 95 c1             	setne  cl
c00287b6:	09 c8                	or     eax,ecx
c00287b8:	83 e0 01             	and    eax,0x1
c00287bb:	c1 ef 0a             	shr    edi,0xa
c00287be:	21 c7                	and    edi,eax
c00287c0:	01 f7                	add    edi,esi
c00287c2:	83 d3 00             	adc    ebx,0x0
c00287c5:	89 da                	mov    edx,ebx
c00287c7:	eb 03                	jmp    c00287cc <__muldf3+0x2d4>
c00287c9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00287cc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00287cf:	89 f8                	mov    eax,edi
c00287d1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00287d4:	83 c4 24             	add    esp,0x24
c00287d7:	5b                   	pop    ebx
c00287d8:	5e                   	pop    esi
c00287d9:	5f                   	pop    edi
c00287da:	5d                   	pop    ebp
c00287db:	c3                   	ret    

c00287dc <__divdf3>:
c00287dc:	55                   	push   ebp
c00287dd:	89 e5                	mov    ebp,esp
c00287df:	57                   	push   edi
c00287e0:	56                   	push   esi
c00287e1:	53                   	push   ebx
c00287e2:	83 ec 2c             	sub    esp,0x2c
c00287e5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00287e8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00287eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00287ee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00287f1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00287f4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00287f7:	89 ce                	mov    esi,ecx
c00287f9:	89 c8                	mov    eax,ecx
c00287fb:	c1 f8 14             	sar    eax,0x14
c00287fe:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028801:	89 f8                	mov    eax,edi
c0028803:	89 fb                	mov    ebx,edi
c0028805:	c1 e3 0b             	shl    ebx,0xb
c0028808:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002880b:	c1 e6 0b             	shl    esi,0xb
c002880e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028814:	c1 e8 15             	shr    eax,0x15
c0028817:	09 c6                	or     esi,eax
c0028819:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002881c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002881f:	89 c2                	mov    edx,eax
c0028821:	c1 fa 14             	sar    edx,0x14
c0028824:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028827:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002882a:	89 de                	mov    esi,ebx
c002882c:	c1 e6 0b             	shl    esi,0xb
c002882f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028832:	c1 e0 0b             	shl    eax,0xb
c0028835:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002883a:	c1 eb 15             	shr    ebx,0x15
c002883d:	09 d8                	or     eax,ebx
c002883f:	89 c2                	mov    edx,eax
c0028841:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028844:	25 ff 07 00 00       	and    eax,0x7ff
c0028849:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002884c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002884f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028855:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028858:	29 d8                	sub    eax,ebx
c002885a:	05 ff 03 00 00       	add    eax,0x3ff
c002885f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028862:	46                   	inc    esi
c0028863:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028869:	0f 85 a5 00 00 00    	jne    c0028914 <__divdf3+0x138>
c002886f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028872:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028875:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028879:	74 2a                	je     c00288a5 <__divdf3+0xc9>
c002887b:	85 f6                	test   esi,esi
c002887d:	0f 85 cc 02 00 00    	jne    c0028b4f <__divdf3+0x373>
c0028883:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028886:	40                   	inc    eax
c0028887:	a9 fe 07 00 00       	test   eax,0x7fe
c002888c:	75 26                	jne    c00288b4 <__divdf3+0xd8>
c002888e:	85 db                	test   ebx,ebx
c0028890:	74 22                	je     c00288b4 <__divdf3+0xd8>
c0028892:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028895:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028898:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002889b:	09 d0                	or     eax,edx
c002889d:	0f 85 ac 02 00 00    	jne    c0028b4f <__divdf3+0x373>
c00288a3:	eb 63                	jmp    c0028908 <__divdf3+0x12c>
c00288a5:	85 f6                	test   esi,esi
c00288a7:	75 22                	jne    c00288cb <__divdf3+0xef>
c00288a9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00288ac:	40                   	inc    eax
c00288ad:	a9 fe 07 00 00       	test   eax,0x7fe
c00288b2:	74 36                	je     c00288ea <__divdf3+0x10e>
c00288b4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00288b8:	0f 89 91 02 00 00    	jns    c0028b4f <__divdf3+0x373>
c00288be:	89 f8                	mov    eax,edi
c00288c0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00288c6:	e9 80 02 00 00       	jmp    c0028b4b <__divdf3+0x36f>
c00288cb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00288ce:	01 f6                	add    esi,esi
c00288d0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00288d3:	c1 ef 1f             	shr    edi,0x1f
c00288d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00288d9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00288dc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00288df:	09 f7                	or     edi,esi
c00288e1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00288e4:	78 2e                	js     c0028914 <__divdf3+0x138>
c00288e6:	89 c8                	mov    eax,ecx
c00288e8:	eb e1                	jmp    c00288cb <__divdf3+0xef>
c00288ea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00288ed:	09 d0                	or     eax,edx
c00288ef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00288f3:	74 0f                	je     c0028904 <__divdf3+0x128>
c00288f5:	85 c0                	test   eax,eax
c00288f7:	74 bb                	je     c00288b4 <__divdf3+0xd8>
c00288f9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00288fc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00288ff:	e9 4b 02 00 00       	jmp    c0028b4f <__divdf3+0x373>
c0028904:	85 c0                	test   eax,eax
c0028906:	75 ac                	jne    c00288b4 <__divdf3+0xd8>
c0028908:	31 ff                	xor    edi,edi
c002890a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002890f:	e9 3b 02 00 00       	jmp    c0028b4f <__divdf3+0x373>
c0028914:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028917:	8d 4f 01             	lea    ecx,[edi+0x1]
c002891a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028920:	75 6b                	jne    c002898d <__divdf3+0x1b1>
c0028922:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028925:	09 d6                	or     esi,edx
c0028927:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002892b:	74 28                	je     c0028955 <__divdf3+0x179>
c002892d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028930:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028933:	85 f6                	test   esi,esi
c0028935:	0f 85 14 02 00 00    	jne    c0028b4f <__divdf3+0x373>
c002893b:	31 ff                	xor    edi,edi
c002893d:	31 c9                	xor    ecx,ecx
c002893f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028942:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028945:	0f 89 04 02 00 00    	jns    c0028b4f <__divdf3+0x373>
c002894b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028950:	e9 fa 01 00 00       	jmp    c0028b4f <__divdf3+0x373>
c0028955:	85 f6                	test   esi,esi
c0028957:	75 1b                	jne    c0028974 <__divdf3+0x198>
c0028959:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002895c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002895f:	25 00 00 00 80       	and    eax,0x80000000
c0028964:	31 c9                	xor    ecx,ecx
c0028966:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002896b:	89 cf                	mov    edi,ecx
c002896d:	89 c1                	mov    ecx,eax
c002896f:	e9 db 01 00 00       	jmp    c0028b4f <__divdf3+0x373>
c0028974:	01 d2                	add    edx,edx
c0028976:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028979:	c1 eb 1f             	shr    ebx,0x1f
c002897c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002897f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028982:	8d 48 01             	lea    ecx,[eax+0x1]
c0028985:	09 da                	or     edx,ebx
c0028987:	78 04                	js     c002898d <__divdf3+0x1b1>
c0028989:	89 c8                	mov    eax,ecx
c002898b:	eb e7                	jmp    c0028974 <__divdf3+0x198>
c002898d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028990:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028996:	81 ca 00 00 00 80    	or     edx,0x80000000
c002899c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002899f:	39 d6                	cmp    esi,edx
c00289a1:	77 0d                	ja     c00289b0 <__divdf3+0x1d4>
c00289a3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00289a6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00289a9:	72 1b                	jb     c00289c6 <__divdf3+0x1ea>
c00289ab:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00289ae:	75 16                	jne    c00289c6 <__divdf3+0x1ea>
c00289b0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00289b3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00289b6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00289b9:	83 de 00             	sbb    esi,0x0
c00289bc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00289bf:	ba 01 00 00 00       	mov    edx,0x1
c00289c4:	eb 02                	jmp    c00289c8 <__divdf3+0x1ec>
c00289c6:	31 d2                	xor    edx,edx
c00289c8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00289cf:	31 ff                	xor    edi,edi
c00289d1:	01 ff                	add    edi,edi
c00289d3:	89 d1                	mov    ecx,edx
c00289d5:	c1 e9 1f             	shr    ecx,0x1f
c00289d8:	09 cf                	or     edi,ecx
c00289da:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00289dd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00289e0:	89 da                	mov    edx,ebx
c00289e2:	89 f3                	mov    ebx,esi
c00289e4:	8d 34 36             	lea    esi,[esi+esi*1]
c00289e7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00289ea:	c1 e9 1f             	shr    ecx,0x1f
c00289ed:	09 ce                	or     esi,ecx
c00289ef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00289f2:	01 c9                	add    ecx,ecx
c00289f4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00289f7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00289fa:	85 db                	test   ebx,ebx
c00289fc:	78 29                	js     c0028a27 <__divdf3+0x24b>
c00289fe:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028a01:	72 07                	jb     c0028a0a <__divdf3+0x22e>
c0028a03:	75 3c                	jne    c0028a41 <__divdf3+0x265>
c0028a05:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028a08:	77 37                	ja     c0028a41 <__divdf3+0x265>
c0028a0a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028a0d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028a10:	31 d2                	xor    edx,edx
c0028a12:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028a15:	0f 97 c2             	seta   dl
c0028a18:	29 d6                	sub    esi,edx
c0028a1a:	89 d9                	mov    ecx,ebx
c0028a1c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028a1f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028a22:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028a25:	eb 17                	jmp    c0028a3e <__divdf3+0x262>
c0028a27:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028a2a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028a2d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028a30:	0f 97 c1             	seta   cl
c0028a33:	0f b6 c9             	movzx  ecx,cl
c0028a36:	29 ce                	sub    esi,ecx
c0028a38:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028a3b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028a3e:	83 ca 01             	or     edx,0x1
c0028a41:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028a44:	75 8b                	jne    c00289d1 <__divdf3+0x1f5>
c0028a46:	c1 e7 09             	shl    edi,0x9
c0028a49:	89 d1                	mov    ecx,edx
c0028a4b:	c1 e9 17             	shr    ecx,0x17
c0028a4e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028a51:	09 f3                	or     ebx,esi
c0028a53:	0f 95 c3             	setne  bl
c0028a56:	0f b6 db             	movzx  ebx,bl
c0028a59:	c1 e2 09             	shl    edx,0x9
c0028a5c:	09 d3                	or     ebx,edx
c0028a5e:	89 ca                	mov    edx,ecx
c0028a60:	09 fa                	or     edx,edi
c0028a62:	78 0c                	js     c0028a70 <__divdf3+0x294>
c0028a64:	01 d2                	add    edx,edx
c0028a66:	89 d9                	mov    ecx,ebx
c0028a68:	c1 e9 1f             	shr    ecx,0x1f
c0028a6b:	09 ca                	or     edx,ecx
c0028a6d:	01 db                	add    ebx,ebx
c0028a6f:	48                   	dec    eax
c0028a70:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028a75:	0f 8f 83 00 00 00    	jg     c0028afe <__divdf3+0x322>
c0028a7b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028a81:	85 c0                	test   eax,eax
c0028a83:	0f 8f 82 00 00 00    	jg     c0028b0b <__divdf3+0x32f>
c0028a89:	83 f8 cc             	cmp    eax,0xffffffcc
c0028a8c:	7c 77                	jl     c0028b05 <__divdf3+0x329>
c0028a8e:	be 01 00 00 00       	mov    esi,0x1
c0028a93:	29 c6                	sub    esi,eax
c0028a95:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028a9b:	83 fe 1f             	cmp    esi,0x1f
c0028a9e:	7e 2f                	jle    c0028acf <__divdf3+0x2f3>
c0028aa0:	83 fe 20             	cmp    esi,0x20
c0028aa3:	75 0a                	jne    c0028aaf <__divdf3+0x2d3>
c0028aa5:	85 db                	test   ebx,ebx
c0028aa7:	0f 95 c3             	setne  bl
c0028aaa:	0f b6 db             	movzx  ebx,bl
c0028aad:	eb 1a                	jmp    c0028ac9 <__divdf3+0x2ed>
c0028aaf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028ab2:	89 d7                	mov    edi,edx
c0028ab4:	d3 e7                	shl    edi,cl
c0028ab6:	89 f9                	mov    ecx,edi
c0028ab8:	09 d9                	or     ecx,ebx
c0028aba:	0f 95 c3             	setne  bl
c0028abd:	0f b6 db             	movzx  ebx,bl
c0028ac0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028ac5:	29 c1                	sub    ecx,eax
c0028ac7:	d3 ea                	shr    edx,cl
c0028ac9:	09 d3                	or     ebx,edx
c0028acb:	31 c0                	xor    eax,eax
c0028acd:	eb 3a                	jmp    c0028b09 <__divdf3+0x32d>
c0028acf:	83 c0 1f             	add    eax,0x1f
c0028ad2:	89 d7                	mov    edi,edx
c0028ad4:	88 c1                	mov    cl,al
c0028ad6:	d3 e7                	shl    edi,cl
c0028ad8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028adb:	89 df                	mov    edi,ebx
c0028add:	89 f1                	mov    ecx,esi
c0028adf:	d3 ef                	shr    edi,cl
c0028ae1:	89 f9                	mov    ecx,edi
c0028ae3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028ae6:	09 cf                	or     edi,ecx
c0028ae8:	88 c1                	mov    cl,al
c0028aea:	d3 e3                	shl    ebx,cl
c0028aec:	85 db                	test   ebx,ebx
c0028aee:	0f 95 c3             	setne  bl
c0028af1:	0f b6 db             	movzx  ebx,bl
c0028af4:	09 fb                	or     ebx,edi
c0028af6:	89 f1                	mov    ecx,esi
c0028af8:	d3 ea                	shr    edx,cl
c0028afa:	31 c0                	xor    eax,eax
c0028afc:	eb 0d                	jmp    c0028b0b <__divdf3+0x32f>
c0028afe:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028b03:	eb 02                	jmp    c0028b07 <__divdf3+0x32b>
c0028b05:	31 c0                	xor    eax,eax
c0028b07:	31 db                	xor    ebx,ebx
c0028b09:	31 d2                	xor    edx,edx
c0028b0b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028b0e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028b11:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028b17:	09 c8                	or     eax,ecx
c0028b19:	c1 e0 14             	shl    eax,0x14
c0028b1c:	89 d1                	mov    ecx,edx
c0028b1e:	c1 e9 0b             	shr    ecx,0xb
c0028b21:	09 c8                	or     eax,ecx
c0028b23:	89 c6                	mov    esi,eax
c0028b25:	89 d9                	mov    ecx,ebx
c0028b27:	c1 e9 0b             	shr    ecx,0xb
c0028b2a:	c1 e2 15             	shl    edx,0x15
c0028b2d:	09 ca                	or     edx,ecx
c0028b2f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028b35:	0f 95 c0             	setne  al
c0028b38:	09 c1                	or     ecx,eax
c0028b3a:	83 e1 01             	and    ecx,0x1
c0028b3d:	c1 eb 0a             	shr    ebx,0xa
c0028b40:	21 cb                	and    ebx,ecx
c0028b42:	01 d3                	add    ebx,edx
c0028b44:	89 d8                	mov    eax,ebx
c0028b46:	83 d6 00             	adc    esi,0x0
c0028b49:	89 f2                	mov    edx,esi
c0028b4b:	89 c7                	mov    edi,eax
c0028b4d:	89 d1                	mov    ecx,edx
c0028b4f:	89 f8                	mov    eax,edi
c0028b51:	89 ca                	mov    edx,ecx
c0028b53:	83 c4 2c             	add    esp,0x2c
c0028b56:	5b                   	pop    ebx
c0028b57:	5e                   	pop    esi
c0028b58:	5f                   	pop    edi
c0028b59:	5d                   	pop    ebp
c0028b5a:	c3                   	ret    

c0028b5b <__floatsidf>:
c0028b5b:	55                   	push   ebp
c0028b5c:	89 e5                	mov    ebp,esp
c0028b5e:	56                   	push   esi
c0028b5f:	53                   	push   ebx
c0028b60:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b63:	85 db                	test   ebx,ebx
c0028b65:	7e 15                	jle    c0028b7c <__floatsidf+0x21>
c0028b67:	0f bd cb             	bsr    ecx,ebx
c0028b6a:	83 f1 1f             	xor    ecx,0x1f
c0028b6d:	d3 e3                	shl    ebx,cl
c0028b6f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b75:	b8 1e 04 00 00       	mov    eax,0x41e
c0028b7a:	eb 21                	jmp    c0028b9d <__floatsidf+0x42>
c0028b7c:	b8 00 00 00 00       	mov    eax,0x0
c0028b81:	ba 00 00 00 00       	mov    edx,0x0
c0028b86:	74 2a                	je     c0028bb2 <__floatsidf+0x57>
c0028b88:	f7 db                	neg    ebx
c0028b8a:	0f bd cb             	bsr    ecx,ebx
c0028b8d:	83 f1 1f             	xor    ecx,0x1f
c0028b90:	d3 e3                	shl    ebx,cl
c0028b92:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028b98:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028b9d:	29 c8                	sub    eax,ecx
c0028b9f:	c1 e0 14             	shl    eax,0x14
c0028ba2:	89 c1                	mov    ecx,eax
c0028ba4:	89 de                	mov    esi,ebx
c0028ba6:	c1 ee 0b             	shr    esi,0xb
c0028ba9:	09 f1                	or     ecx,esi
c0028bab:	89 ca                	mov    edx,ecx
c0028bad:	c1 e3 15             	shl    ebx,0x15
c0028bb0:	89 d8                	mov    eax,ebx
c0028bb2:	5b                   	pop    ebx
c0028bb3:	5e                   	pop    esi
c0028bb4:	5d                   	pop    ebp
c0028bb5:	c3                   	ret    

c0028bb6 <__floatunsidf>:
c0028bb6:	55                   	push   ebp
c0028bb7:	89 e5                	mov    ebp,esp
c0028bb9:	56                   	push   esi
c0028bba:	53                   	push   ebx
c0028bbb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028bbe:	85 db                	test   ebx,ebx
c0028bc0:	74 2a                	je     c0028bec <__floatunsidf+0x36>
c0028bc2:	0f bd cb             	bsr    ecx,ebx
c0028bc5:	83 f1 1f             	xor    ecx,0x1f
c0028bc8:	d3 e3                	shl    ebx,cl
c0028bca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028bd0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028bd5:	29 c8                	sub    eax,ecx
c0028bd7:	c1 e0 14             	shl    eax,0x14
c0028bda:	89 c1                	mov    ecx,eax
c0028bdc:	89 de                	mov    esi,ebx
c0028bde:	c1 ee 0b             	shr    esi,0xb
c0028be1:	09 f1                	or     ecx,esi
c0028be3:	89 ca                	mov    edx,ecx
c0028be5:	c1 e3 15             	shl    ebx,0x15
c0028be8:	89 d8                	mov    eax,ebx
c0028bea:	eb 04                	jmp    c0028bf0 <__floatunsidf+0x3a>
c0028bec:	31 c0                	xor    eax,eax
c0028bee:	31 d2                	xor    edx,edx
c0028bf0:	5b                   	pop    ebx
c0028bf1:	5e                   	pop    esi
c0028bf2:	5d                   	pop    ebp
c0028bf3:	c3                   	ret    

c0028bf4 <__fixdfsi>:
c0028bf4:	55                   	push   ebp
c0028bf5:	89 e5                	mov    ebp,esp
c0028bf7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028bfa:	89 d1                	mov    ecx,edx
c0028bfc:	c1 e1 0b             	shl    ecx,0xb
c0028bff:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028c08:	c1 e8 15             	shr    eax,0x15
c0028c0b:	09 c1                	or     ecx,eax
c0028c0d:	c1 fa 14             	sar    edx,0x14
c0028c10:	78 1f                	js     c0028c31 <__fixdfsi+0x3d>
c0028c12:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028c18:	31 c0                	xor    eax,eax
c0028c1a:	83 fa 1e             	cmp    edx,0x1e
c0028c1d:	77 40                	ja     c0028c5f <__fixdfsi+0x6b>
c0028c1f:	89 c8                	mov    eax,ecx
c0028c21:	0d 00 00 00 80       	or     eax,0x80000000
c0028c26:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c2b:	29 d1                	sub    ecx,edx
c0028c2d:	d3 e8                	shr    eax,cl
c0028c2f:	eb 2e                	jmp    c0028c5f <__fixdfsi+0x6b>
c0028c31:	31 c0                	xor    eax,eax
c0028c33:	81 c2 01 04 00 00    	add    edx,0x401
c0028c39:	78 24                	js     c0028c5f <__fixdfsi+0x6b>
c0028c3b:	83 fa 1e             	cmp    edx,0x1e
c0028c3e:	7e 09                	jle    c0028c49 <__fixdfsi+0x55>
c0028c40:	83 fa 1f             	cmp    edx,0x1f
c0028c43:	75 18                	jne    c0028c5d <__fixdfsi+0x69>
c0028c45:	85 c9                	test   ecx,ecx
c0028c47:	75 14                	jne    c0028c5d <__fixdfsi+0x69>
c0028c49:	89 c8                	mov    eax,ecx
c0028c4b:	0d 00 00 00 80       	or     eax,0x80000000
c0028c50:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c55:	29 d1                	sub    ecx,edx
c0028c57:	d3 e8                	shr    eax,cl
c0028c59:	f7 d8                	neg    eax
c0028c5b:	eb 02                	jmp    c0028c5f <__fixdfsi+0x6b>
c0028c5d:	31 c0                	xor    eax,eax
c0028c5f:	5d                   	pop    ebp
c0028c60:	c3                   	ret    

c0028c61 <__fixunsdfsi>:
c0028c61:	55                   	push   ebp
c0028c62:	89 e5                	mov    ebp,esp
c0028c64:	53                   	push   ebx
c0028c65:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028c68:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c6b:	89 d3                	mov    ebx,edx
c0028c6d:	c1 fb 14             	sar    ebx,0x14
c0028c70:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028c76:	31 c0                	xor    eax,eax
c0028c78:	83 fb 1f             	cmp    ebx,0x1f
c0028c7b:	77 1d                	ja     c0028c9a <__fixunsdfsi+0x39>
c0028c7d:	89 d0                	mov    eax,edx
c0028c7f:	c1 e0 0b             	shl    eax,0xb
c0028c82:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028c87:	c1 e9 15             	shr    ecx,0x15
c0028c8a:	09 c8                	or     eax,ecx
c0028c8c:	0d 00 00 00 80       	or     eax,0x80000000
c0028c91:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028c96:	29 d9                	sub    ecx,ebx
c0028c98:	d3 e8                	shr    eax,cl
c0028c9a:	5b                   	pop    ebx
c0028c9b:	5d                   	pop    ebp
c0028c9c:	c3                   	ret    

c0028c9d <__cmpdf2>:
c0028c9d:	55                   	push   ebp
c0028c9e:	89 e5                	mov    ebp,esp
c0028ca0:	57                   	push   edi
c0028ca1:	56                   	push   esi
c0028ca2:	53                   	push   ebx
c0028ca3:	83 ec 0c             	sub    esp,0xc
c0028ca6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028ca9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028cac:	89 ca                	mov    edx,ecx
c0028cae:	c1 ea 14             	shr    edx,0x14
c0028cb1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028cb7:	89 cb                	mov    ebx,ecx
c0028cb9:	c1 fb 1f             	sar    ebx,0x1f
c0028cbc:	31 da                	xor    edx,ebx
c0028cbe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028cc1:	89 df                	mov    edi,ebx
c0028cc3:	c1 e7 0b             	shl    edi,0xb
c0028cc6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028cc9:	c1 e1 0b             	shl    ecx,0xb
c0028ccc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028cd2:	c1 eb 15             	shr    ebx,0x15
c0028cd5:	09 d9                	or     ecx,ebx
c0028cd7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028cda:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028cdd:	89 ce                	mov    esi,ecx
c0028cdf:	c1 ee 14             	shr    esi,0x14
c0028ce2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028ce8:	89 cb                	mov    ebx,ecx
c0028cea:	c1 fb 1f             	sar    ebx,0x1f
c0028ced:	31 de                	xor    esi,ebx
c0028cef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028cf2:	89 df                	mov    edi,ebx
c0028cf4:	c1 e7 0b             	shl    edi,0xb
c0028cf7:	c1 e1 0b             	shl    ecx,0xb
c0028cfa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028d00:	c1 eb 15             	shr    ebx,0x15
c0028d03:	09 d9                	or     ecx,ebx
c0028d05:	89 d3                	mov    ebx,edx
c0028d07:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028d0d:	43                   	inc    ebx
c0028d0e:	83 fb 01             	cmp    ebx,0x1
c0028d11:	77 08                	ja     c0028d1b <__cmpdf2+0x7e>
c0028d13:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028d16:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028d19:	75 68                	jne    c0028d83 <__cmpdf2+0xe6>
c0028d1b:	89 f3                	mov    ebx,esi
c0028d1d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028d23:	43                   	inc    ebx
c0028d24:	83 fb 01             	cmp    ebx,0x1
c0028d27:	77 06                	ja     c0028d2f <__cmpdf2+0x92>
c0028d29:	89 fb                	mov    ebx,edi
c0028d2b:	09 cb                	or     ebx,ecx
c0028d2d:	75 54                	jne    c0028d83 <__cmpdf2+0xe6>
c0028d2f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028d32:	09 f8                	or     eax,edi
c0028d34:	09 c8                	or     eax,ecx
c0028d36:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028d39:	75 12                	jne    c0028d4d <__cmpdf2+0xb0>
c0028d3b:	8d 42 01             	lea    eax,[edx+0x1]
c0028d3e:	83 f8 01             	cmp    eax,0x1
c0028d41:	77 0a                	ja     c0028d4d <__cmpdf2+0xb0>
c0028d43:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028d46:	31 c0                	xor    eax,eax
c0028d48:	83 fb 01             	cmp    ebx,0x1
c0028d4b:	76 36                	jbe    c0028d83 <__cmpdf2+0xe6>
c0028d4d:	b8 01 00 00 00       	mov    eax,0x1
c0028d52:	39 f2                	cmp    edx,esi
c0028d54:	7f 2d                	jg     c0028d83 <__cmpdf2+0xe6>
c0028d56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028d5b:	7c 26                	jl     c0028d83 <__cmpdf2+0xe6>
c0028d5d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028d60:	77 07                	ja     c0028d69 <__cmpdf2+0xcc>
c0028d62:	72 16                	jb     c0028d7a <__cmpdf2+0xdd>
c0028d64:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028d67:	76 0a                	jbe    c0028d73 <__cmpdf2+0xd6>
c0028d69:	89 d0                	mov    eax,edx
c0028d6b:	c1 f8 1f             	sar    eax,0x1f
c0028d6e:	83 c8 01             	or     eax,0x1
c0028d71:	eb 10                	jmp    c0028d83 <__cmpdf2+0xe6>
c0028d73:	b8 00 00 00 00       	mov    eax,0x0
c0028d78:	73 09                	jae    c0028d83 <__cmpdf2+0xe6>
c0028d7a:	89 d0                	mov    eax,edx
c0028d7c:	c1 f8 1f             	sar    eax,0x1f
c0028d7f:	83 e0 02             	and    eax,0x2
c0028d82:	48                   	dec    eax
c0028d83:	83 c4 0c             	add    esp,0xc
c0028d86:	5b                   	pop    ebx
c0028d87:	5e                   	pop    esi
c0028d88:	5f                   	pop    edi
c0028d89:	5d                   	pop    ebp
c0028d8a:	c3                   	ret    

c0028d8b <__eqdf2>:
c0028d8b:	55                   	push   ebp
c0028d8c:	89 e5                	mov    ebp,esp
c0028d8e:	50                   	push   eax
c0028d8f:	6a 01                	push   0x1
c0028d91:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028d94:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028d97:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028d9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028d9d:	e8 fb fe ff ff       	call   c0028c9d <__cmpdf2>
c0028da2:	83 c4 18             	add    esp,0x18
c0028da5:	c9                   	leave  
c0028da6:	c3                   	ret    

c0028da7 <__nedf2>:
c0028da7:	eb e2                	jmp    c0028d8b <__eqdf2>

c0028da9 <__gtdf2>:
c0028da9:	55                   	push   ebp
c0028daa:	89 e5                	mov    ebp,esp
c0028dac:	50                   	push   eax
c0028dad:	6a ff                	push   0xffffffff
c0028daf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028db2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028db5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028db8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028dbb:	e8 dd fe ff ff       	call   c0028c9d <__cmpdf2>
c0028dc0:	83 c4 18             	add    esp,0x18
c0028dc3:	c9                   	leave  
c0028dc4:	c3                   	ret    

c0028dc5 <__gedf2>:
c0028dc5:	eb e2                	jmp    c0028da9 <__gtdf2>

c0028dc7 <__ltdf2>:
c0028dc7:	eb c2                	jmp    c0028d8b <__eqdf2>

c0028dc9 <__ledf2>:
c0028dc9:	eb c0                	jmp    c0028d8b <__eqdf2>

c0028dcb <__truncdfsf2>:
c0028dcb:	55                   	push   ebp
c0028dcc:	89 e5                	mov    ebp,esp
c0028dce:	57                   	push   edi
c0028dcf:	56                   	push   esi
c0028dd0:	53                   	push   ebx
c0028dd1:	83 ec 0c             	sub    esp,0xc
c0028dd4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028dd7:	89 d1                	mov    ecx,edx
c0028dd9:	c1 f9 14             	sar    ecx,0x14
c0028ddc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ddf:	89 df                	mov    edi,ebx
c0028de1:	c1 e7 0b             	shl    edi,0xb
c0028de4:	89 d0                	mov    eax,edx
c0028de6:	c1 e0 0b             	shl    eax,0xb
c0028de9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028dee:	c1 eb 15             	shr    ebx,0x15
c0028df1:	09 d8                	or     eax,ebx
c0028df3:	89 cb                	mov    ebx,ecx
c0028df5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028dfb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028e01:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028e07:	0f 86 9e 00 00 00    	jbe    c0028eab <__truncdfsf2+0xe0>
c0028e0d:	85 db                	test   ebx,ebx
c0028e0f:	75 0a                	jne    c0028e1b <__truncdfsf2+0x50>
c0028e11:	c1 fa 17             	sar    edx,0x17
c0028e14:	30 d2                	xor    dl,dl
c0028e16:	e9 84 00 00 00       	jmp    c0028e9f <__truncdfsf2+0xd4>
c0028e1b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028e21:	83 fe 83             	cmp    esi,0xffffff83
c0028e24:	7d 4b                	jge    c0028e71 <__truncdfsf2+0xa6>
c0028e26:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028e2b:	29 f1                	sub    ecx,esi
c0028e2d:	83 f9 1f             	cmp    ecx,0x1f
c0028e30:	7f 6b                	jg     c0028e9d <__truncdfsf2+0xd2>
c0028e32:	0d 00 00 00 80       	or     eax,0x80000000
c0028e37:	89 c3                	mov    ebx,eax
c0028e39:	d3 eb                	shr    ebx,cl
c0028e3b:	be 01 00 00 00       	mov    esi,0x1
c0028e40:	d3 e6                	shl    esi,cl
c0028e42:	4e                   	dec    esi
c0028e43:	21 f0                	and    eax,esi
c0028e45:	09 f8                	or     eax,edi
c0028e47:	0f 95 c0             	setne  al
c0028e4a:	0f b6 c0             	movzx  eax,al
c0028e4d:	09 c3                	or     ebx,eax
c0028e4f:	89 d9                	mov    ecx,ebx
c0028e51:	c1 e9 08             	shr    ecx,0x8
c0028e54:	f6 c3 7f             	test   bl,0x7f
c0028e57:	0f 95 c0             	setne  al
c0028e5a:	09 c8                	or     eax,ecx
c0028e5c:	83 e0 01             	and    eax,0x1
c0028e5f:	c1 eb 07             	shr    ebx,0x7
c0028e62:	21 c3                	and    ebx,eax
c0028e64:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028e6a:	09 d1                	or     ecx,edx
c0028e6c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028e6f:	eb 76                	jmp    c0028ee7 <__truncdfsf2+0x11c>
c0028e71:	83 c6 80             	add    esi,0xffffff80
c0028e74:	7e 1d                	jle    c0028e93 <__truncdfsf2+0xc8>
c0028e76:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028e7c:	75 0b                	jne    c0028e89 <__truncdfsf2+0xbe>
c0028e7e:	09 f8                	or     eax,edi
c0028e80:	74 09                	je     c0028e8b <__truncdfsf2+0xc0>
c0028e82:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028e87:	eb 02                	jmp    c0028e8b <__truncdfsf2+0xc0>
c0028e89:	31 c0                	xor    eax,eax
c0028e8b:	c1 fa 17             	sar    edx,0x17
c0028e8e:	80 ca ff             	or     dl,0xff
c0028e91:	eb 0e                	jmp    c0028ea1 <__truncdfsf2+0xd6>
c0028e93:	c1 fa 1f             	sar    edx,0x1f
c0028e96:	c1 e2 08             	shl    edx,0x8
c0028e99:	09 ca                	or     edx,ecx
c0028e9b:	eb 04                	jmp    c0028ea1 <__truncdfsf2+0xd6>
c0028e9d:	31 d2                	xor    edx,edx
c0028e9f:	31 c0                	xor    eax,eax
c0028ea1:	c1 e2 17             	shl    edx,0x17
c0028ea4:	c1 e8 08             	shr    eax,0x8
c0028ea7:	09 d0                	or     eax,edx
c0028ea9:	eb 3c                	jmp    c0028ee7 <__truncdfsf2+0x11c>
c0028eab:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028eb1:	89 ca                	mov    edx,ecx
c0028eb3:	c1 fa 0b             	sar    edx,0xb
c0028eb6:	c1 e2 08             	shl    edx,0x8
c0028eb9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028ebc:	31 db                	xor    ebx,ebx
c0028ebe:	85 ff                	test   edi,edi
c0028ec0:	0f 95 c3             	setne  bl
c0028ec3:	09 d8                	or     eax,ebx
c0028ec5:	89 c3                	mov    ebx,eax
c0028ec7:	c1 eb 08             	shr    ebx,0x8
c0028eca:	a8 7f                	test   al,0x7f
c0028ecc:	0f 95 c2             	setne  dl
c0028ecf:	89 d6                	mov    esi,edx
c0028ed1:	09 de                	or     esi,ebx
c0028ed3:	83 e6 01             	and    esi,0x1
c0028ed6:	c1 e8 07             	shr    eax,0x7
c0028ed9:	21 f0                	and    eax,esi
c0028edb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028ede:	09 ca                	or     edx,ecx
c0028ee0:	c1 e2 17             	shl    edx,0x17
c0028ee3:	09 da                	or     edx,ebx
c0028ee5:	01 d0                	add    eax,edx
c0028ee7:	83 c4 0c             	add    esp,0xc
c0028eea:	5b                   	pop    ebx
c0028eeb:	5e                   	pop    esi
c0028eec:	5f                   	pop    edi
c0028eed:	5d                   	pop    ebp
c0028eee:	c3                   	ret    

c0028eef <__extendsfdf2>:
c0028eef:	55                   	push   ebp
c0028ef0:	89 e5                	mov    ebp,esp
c0028ef2:	57                   	push   edi
c0028ef3:	56                   	push   esi
c0028ef4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028ef7:	89 d1                	mov    ecx,edx
c0028ef9:	c1 f9 17             	sar    ecx,0x17
c0028efc:	c1 e2 08             	shl    edx,0x8
c0028eff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028f05:	89 c8                	mov    eax,ecx
c0028f07:	80 e4 f8             	and    ah,0xf8
c0028f0a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028f0d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028f13:	75 27                	jne    c0028f3c <__extendsfdf2+0x4d>
c0028f15:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028f1b:	75 18                	jne    c0028f35 <__extendsfdf2+0x46>
c0028f1d:	85 d2                	test   edx,edx
c0028f1f:	74 20                	je     c0028f41 <__extendsfdf2+0x52>
c0028f21:	41                   	inc    ecx
c0028f22:	01 d2                	add    edx,edx
c0028f24:	79 fb                	jns    c0028f21 <__extendsfdf2+0x32>
c0028f26:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028f2c:	29 c8                	sub    eax,ecx
c0028f2e:	05 81 03 00 00       	add    eax,0x381
c0028f33:	eb 0c                	jmp    c0028f41 <__extendsfdf2+0x52>
c0028f35:	05 00 07 00 00       	add    eax,0x700
c0028f3a:	eb 05                	jmp    c0028f41 <__extendsfdf2+0x52>
c0028f3c:	05 80 03 00 00       	add    eax,0x380
c0028f41:	c1 e0 14             	shl    eax,0x14
c0028f44:	89 c1                	mov    ecx,eax
c0028f46:	89 d0                	mov    eax,edx
c0028f48:	c1 e8 0b             	shr    eax,0xb
c0028f4b:	09 c1                	or     ecx,eax
c0028f4d:	c1 e2 15             	shl    edx,0x15
c0028f50:	89 d0                	mov    eax,edx
c0028f52:	89 ca                	mov    edx,ecx
c0028f54:	5e                   	pop    esi
c0028f55:	5f                   	pop    edi
c0028f56:	5d                   	pop    ebp
c0028f57:	c3                   	ret    
c0028f58:	66 90                	xchg   ax,ax
c0028f5a:	66 90                	xchg   ax,ax
c0028f5c:	66 90                	xchg   ax,ax
c0028f5e:	66 90                	xchg   ax,ax

c0028f60 <fabs>:
c0028f60:	83 ec 0c             	sub    esp,0xc
c0028f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f67:	89 04 24             	mov    DWORD PTR [esp],eax
c0028f6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028f6e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028f73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028f77:	dd 04 24             	fld    QWORD PTR [esp]
c0028f7a:	83 c4 0c             	add    esp,0xc
c0028f7d:	c3                   	ret    
c0028f7e:	66 90                	xchg   ax,ax

c0028f80 <lrint>:
c0028f80:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028f84:	83 ec 04             	sub    esp,0x4
c0028f87:	db 1c 24             	fistp  DWORD PTR [esp]
c0028f8a:	58                   	pop    eax
c0028f8b:	c3                   	ret    

c0028f8c <lrintf>:
c0028f8c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028f90:	83 ec 04             	sub    esp,0x4
c0028f93:	db 1c 24             	fistp  DWORD PTR [esp]
c0028f96:	58                   	pop    eax
c0028f97:	c3                   	ret    

Disassembly of section .init:

c0028f98 <_init>:
c0028f98:	55                   	push   ebp
c0028f99:	89 e5                	mov    ebp,esp
c0028f9b:	e8 78 71 fd ff       	call   c0000118 <frame_dummy>
c0028fa0:	e8 5b e0 ff ff       	call   c0027000 <__do_global_ctors_aux>
c0028fa5:	5d                   	pop    ebp
c0028fa6:	c3                   	ret    

Disassembly of section .fini:

c0028fa7 <_fini>:
c0028fa7:	55                   	push   ebp
c0028fa8:	89 e5                	mov    ebp,esp
c0028faa:	e8 f9 70 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028faf:	5d                   	pop    ebp
c0028fb0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028fb2 <Computer::~Computer()>:
c0028fb2:	83 ec 0c             	sub    esp,0xc
c0028fb5:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c0028fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbe:	89 10                	mov    DWORD PTR [eax],edx
c0028fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc4:	83 ec 0c             	sub    esp,0xc
c0028fc7:	50                   	push   eax
c0028fc8:	e8 1f ad fe ff       	call   c0013cec <Device::~Device()>
c0028fcd:	83 c4 10             	add    esp,0x10
c0028fd0:	90                   	nop
c0028fd1:	83 c4 0c             	add    esp,0xc
c0028fd4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028fd6 <Computer::~Computer()>:
c0028fd6:	83 ec 0c             	sub    esp,0xc
c0028fd9:	83 ec 0c             	sub    esp,0xc
c0028fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe0:	e8 cd ff ff ff       	call   c0028fb2 <Computer::~Computer()>
c0028fe5:	83 c4 10             	add    esp,0x10
c0028fe8:	83 ec 08             	sub    esp,0x8
c0028feb:	68 ec 01 00 00       	push   0x1ec
c0028ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ff4:	e8 0c 99 fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0028ff9:	83 c4 10             	add    esp,0x10
c0028ffc:	83 c4 0c             	add    esp,0xc
c0028fff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029000 <idleCommon()>:
c0029000:	83 ec 0c             	sub    esp,0xc
c0029003:	fa                   	cli    
c0029004:	ff 05 88 27 03 c0    	inc    DWORD PTR ds:0xc0032788
c002900a:	e8 a9 51 ff ff       	call   c001e1b8 <schedule()>
c002900f:	a1 88 27 03 c0       	mov    eax,ds:0xc0032788
c0029014:	48                   	dec    eax
c0029015:	a3 88 27 03 c0       	mov    ds:0xc0032788,eax
c002901a:	75 01                	jne    c002901d <idleCommon()+0x1d>
c002901c:	fb                   	sti    
c002901d:	83 c4 0c             	add    esp,0xc
c0029020:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029022 <LinkedList<UnixFile>::~LinkedList()>:
c0029022:	90                   	nop
c0029023:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029024 <LinkedList<UnixFile>::LinkedList()>:
c0029024:	83 ec 0c             	sub    esp,0xc
c0029027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029035:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029040:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029055:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002905c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029060:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029067:	83 ec 0c             	sub    esp,0xc
c002906a:	68 5a af 02 c0       	push   0xc002af5a
c002906f:	e8 71 99 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0029074:	83 c4 10             	add    esp,0x10
c0029077:	90                   	nop
c0029078:	83 c4 0c             	add    esp,0xc
c002907b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002907c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002907c:	83 ec 0c             	sub    esp,0xc
c002907f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029084:	75 10                	jne    c0029096 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0029086:	83 ec 0c             	sub    esp,0xc
c0029089:	68 74 af 02 c0       	push   0xc002af74
c002908e:	e8 72 13 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0029093:	83 c4 10             	add    esp,0x10
c0029096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909a:	8b 00                	mov    eax,DWORD PTR [eax]
c002909c:	85 c0                	test   eax,eax
c002909e:	74 34                	je     c00290d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00290a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290a7:	85 c0                	test   eax,eax
c00290a9:	74 29                	je     c00290d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00290ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00290c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00290d2:	eb 65                	jmp    c0029139 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00290d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00290da:	85 c0                	test   eax,eax
c00290dc:	75 4b                	jne    c0029129 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00290de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00290e5:	85 c0                	test   eax,eax
c00290e7:	75 40                	jne    c0029129 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00290e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290f1:	89 10                	mov    DWORD PTR [eax],edx
c00290f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00290fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00290fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029102:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029105:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002910c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029110:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029113:	85 c0                	test   eax,eax
c0029115:	74 22                	je     c0029139 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029117:	83 ec 0c             	sub    esp,0xc
c002911a:	68 96 af 02 c0       	push   0xc002af96
c002911f:	e8 e1 12 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0029124:	83 c4 10             	add    esp,0x10
c0029127:	eb 10                	jmp    c0029139 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029129:	83 ec 0c             	sub    esp,0xc
c002912c:	68 a0 af 02 c0       	push   0xc002afa0
c0029131:	e8 cf 12 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0029136:	83 c4 10             	add    esp,0x10
c0029139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029140:	8d 50 01             	lea    edx,[eax+0x1]
c0029143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029147:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002914a:	90                   	nop
c002914b:	83 c4 0c             	add    esp,0xc
c002914e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029150 <LinkedList<UnixFile>::getFirstElement()>:
c0029150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029154:	8b 00                	mov    eax,DWORD PTR [eax]
c0029156:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029158 <LinkedList<UnixFile>::removeFirst()>:
c0029158:	83 ec 0c             	sub    esp,0xc
c002915b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029161:	85 c0                	test   eax,eax
c0029163:	75 12                	jne    c0029177 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029165:	83 ec 0c             	sub    esp,0xc
c0029168:	68 ac af 02 c0       	push   0xc002afac
c002916d:	e8 93 12 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0029172:	83 c4 10             	add    esp,0x10
c0029175:	eb 7e                	jmp    c00291f5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002917e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029181:	85 c0                	test   eax,eax
c0029183:	74 10                	je     c0029195 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029185:	83 ec 0c             	sub    esp,0xc
c0029188:	68 f7 af 02 c0       	push   0xc002aff7
c002918d:	e8 73 12 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0029192:	83 c4 10             	add    esp,0x10
c0029195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029199:	8b 00                	mov    eax,DWORD PTR [eax]
c002919b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002919e:	85 c0                	test   eax,eax
c00291a0:	75 33                	jne    c00291d5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00291a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291be:	83 f8 01             	cmp    eax,0x1
c00291c1:	74 21                	je     c00291e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00291c3:	83 ec 0c             	sub    esp,0xc
c00291c6:	68 d0 af 02 c0       	push   0xc002afd0
c00291cb:	e8 35 12 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c00291d0:	83 c4 10             	add    esp,0x10
c00291d3:	eb 0f                	jmp    c00291e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00291d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00291db:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00291de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e2:	89 10                	mov    DWORD PTR [eax],edx
c00291e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00291ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291f5:	83 c4 0c             	add    esp,0xc
c00291f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00291fa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00291fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00291fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029201:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029202 <DriverlessDevice::~DriverlessDevice()>:
c0029202:	ba 9c b7 02 c0       	mov    edx,0xc002b79c
c0029207:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002920b:	89 10                	mov    DWORD PTR [eax],edx
c002920d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029211:	50                   	push   eax
c0029212:	e8 d5 aa fe ff       	call   c0013cec <Device::~Device()>
c0029217:	83 c4 04             	add    esp,0x4
c002921a:	90                   	nop
c002921b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002921c <DriverlessDevice::~DriverlessDevice()>:
c002921c:	83 ec 0c             	sub    esp,0xc
c002921f:	83 ec 0c             	sub    esp,0xc
c0029222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029226:	e8 d7 ff ff ff       	call   c0029202 <DriverlessDevice::~DriverlessDevice()>
c002922b:	83 c4 10             	add    esp,0x10
c002922e:	83 ec 08             	sub    esp,0x8
c0029231:	68 58 01 00 00       	push   0x158
c0029236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002923a:	e8 c6 96 fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c002923f:	83 c4 10             	add    esp,0x10
c0029242:	83 c4 0c             	add    esp,0xc
c0029245:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029246 <LinkedList<Device>::addElement(Device*)>:
c0029246:	83 ec 0c             	sub    esp,0xc
c0029249:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002924e:	75 10                	jne    c0029260 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029250:	83 ec 0c             	sub    esp,0xc
c0029253:	68 74 af 02 c0       	push   0xc002af74
c0029258:	e8 a8 11 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c002925d:	83 c4 10             	add    esp,0x10
c0029260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029264:	8b 00                	mov    eax,DWORD PTR [eax]
c0029266:	85 c0                	test   eax,eax
c0029268:	74 3a                	je     c00292a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002926a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029271:	85 c0                	test   eax,eax
c0029273:	74 2f                	je     c00292a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029279:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002927c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029280:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002928a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002928e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029295:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029298:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00292a2:	eb 68                	jmp    c002930c <LinkedList<Device>::addElement(Device*)+0xc6>
c00292a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00292aa:	85 c0                	test   eax,eax
c00292ac:	75 4e                	jne    c00292fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00292ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292b5:	85 c0                	test   eax,eax
c00292b7:	75 43                	jne    c00292fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00292b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00292c1:	89 10                	mov    DWORD PTR [eax],edx
c00292c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00292cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00292ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292d5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00292df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292e6:	85 c0                	test   eax,eax
c00292e8:	74 22                	je     c002930c <LinkedList<Device>::addElement(Device*)+0xc6>
c00292ea:	83 ec 0c             	sub    esp,0xc
c00292ed:	68 96 af 02 c0       	push   0xc002af96
c00292f2:	e8 0e 11 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c00292f7:	83 c4 10             	add    esp,0x10
c00292fa:	eb 10                	jmp    c002930c <LinkedList<Device>::addElement(Device*)+0xc6>
c00292fc:	83 ec 0c             	sub    esp,0xc
c00292ff:	68 a0 af 02 c0       	push   0xc002afa0
c0029304:	e8 fc 10 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0029309:	83 c4 10             	add    esp,0x10
c002930c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029310:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029313:	8d 50 01             	lea    edx,[eax+0x1]
c0029316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002931d:	90                   	nop
c002931e:	83 c4 0c             	add    esp,0xc
c0029321:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029322 <LinkedList<Device>::LinkedList()>:
c0029322:	83 ec 0c             	sub    esp,0xc
c0029325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029329:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002932f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029333:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002933a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029349:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002934f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029353:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002935a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002935e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029365:	83 ec 0c             	sub    esp,0xc
c0029368:	68 5a af 02 c0       	push   0xc002af5a
c002936d:	e8 73 96 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c0029372:	83 c4 10             	add    esp,0x10
c0029375:	90                   	nop
c0029376:	83 c4 0c             	add    esp,0xc
c0029379:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002937a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002937a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002937e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029380:	85 c0                	test   eax,eax
c0029382:	75 0e                	jne    c0029392 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029388:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002938b:	85 c0                	test   eax,eax
c002938d:	75 03                	jne    c0029392 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002938f:	b0 01                	mov    al,0x1
c0029391:	c3                   	ret    
c0029392:	b0 00                	mov    al,0x0
c0029394:	90                   	nop
c0029395:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029396 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002939a:	8b 00                	mov    eax,DWORD PTR [eax]
c002939c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002939e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002939e:	83 ec 0c             	sub    esp,0xc
c00293a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00293a7:	85 c0                	test   eax,eax
c00293a9:	75 15                	jne    c00293c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00293ab:	83 ec 0c             	sub    esp,0xc
c00293ae:	68 ac af 02 c0       	push   0xc002afac
c00293b3:	e8 4d 10 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c00293b8:	83 c4 10             	add    esp,0x10
c00293bb:	e9 88 00 00 00       	jmp    c0029448 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00293c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00293ca:	85 c0                	test   eax,eax
c00293cc:	0f 95 c0             	setne  al
c00293cf:	84 c0                	test   al,al
c00293d1:	74 10                	je     c00293e3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00293d3:	83 ec 0c             	sub    esp,0xc
c00293d6:	68 f7 af 02 c0       	push   0xc002aff7
c00293db:	e8 25 10 ff ff       	call   c001a405 <Krnl::panic(char const*)>
c00293e0:	83 c4 10             	add    esp,0x10
c00293e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00293e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00293ec:	85 c0                	test   eax,eax
c00293ee:	0f 94 c0             	sete   al
c00293f1:	84 c0                	test   al,al
c00293f3:	74 33                	je     c0029428 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00293f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00293ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029403:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002940a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029411:	83 f8 01             	cmp    eax,0x1
c0029414:	74 21                	je     c0029437 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029416:	83 ec 0c             	sub    esp,0xc
c0029419:	68 d0 af 02 c0       	push   0xc002afd0
c002941e:	e8 e2 0f ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0029423:	83 c4 10             	add    esp,0x10
c0029426:	eb 0f                	jmp    c0029437 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942c:	8b 00                	mov    eax,DWORD PTR [eax]
c002942e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029431:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029435:	89 10                	mov    DWORD PTR [eax],edx
c0029437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002943b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002943e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029445:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029448:	83 c4 0c             	add    esp,0xc
c002944b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002944c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002944c:	83 ec 0c             	sub    esp,0xc
c002944f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029454:	75 10                	jne    c0029466 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029456:	83 ec 0c             	sub    esp,0xc
c0029459:	68 74 af 02 c0       	push   0xc002af74
c002945e:	e8 a2 0f ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0029463:	83 c4 10             	add    esp,0x10
c0029466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946a:	8b 00                	mov    eax,DWORD PTR [eax]
c002946c:	85 c0                	test   eax,eax
c002946e:	74 34                	je     c00294a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029474:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029477:	85 c0                	test   eax,eax
c0029479:	74 29                	je     c00294a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002947b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002947f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029482:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029486:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029491:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029498:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002949b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00294a2:	eb 65                	jmp    c0029509 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00294a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00294aa:	85 c0                	test   eax,eax
c00294ac:	75 4b                	jne    c00294f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00294ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294b5:	85 c0                	test   eax,eax
c00294b7:	75 40                	jne    c00294f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00294b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294c1:	89 10                	mov    DWORD PTR [eax],edx
c00294c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00294cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00294ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294d5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00294dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294e3:	85 c0                	test   eax,eax
c00294e5:	74 22                	je     c0029509 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00294e7:	83 ec 0c             	sub    esp,0xc
c00294ea:	68 96 af 02 c0       	push   0xc002af96
c00294ef:	e8 11 0f ff ff       	call   c001a405 <Krnl::panic(char const*)>
c00294f4:	83 c4 10             	add    esp,0x10
c00294f7:	eb 10                	jmp    c0029509 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00294f9:	83 ec 0c             	sub    esp,0xc
c00294fc:	68 a0 af 02 c0       	push   0xc002afa0
c0029501:	e8 ff 0e ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0029506:	83 c4 10             	add    esp,0x10
c0029509:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029510:	8d 50 01             	lea    edx,[eax+0x1]
c0029513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029517:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002951a:	90                   	nop
c002951b:	83 c4 0c             	add    esp,0xc
c002951e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029520 <ACPI::~ACPI()>:
c0029520:	83 ec 0c             	sub    esp,0xc
c0029523:	ba d8 c1 02 c0       	mov    edx,0xc002c1d8
c0029528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002952c:	89 10                	mov    DWORD PTR [eax],edx
c002952e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029532:	83 ec 0c             	sub    esp,0xc
c0029535:	50                   	push   eax
c0029536:	e8 b1 a7 fe ff       	call   c0013cec <Device::~Device()>
c002953b:	83 c4 10             	add    esp,0x10
c002953e:	90                   	nop
c002953f:	83 c4 0c             	add    esp,0xc
c0029542:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029544 <ACPI::~ACPI()>:
c0029544:	83 ec 0c             	sub    esp,0xc
c0029547:	83 ec 0c             	sub    esp,0xc
c002954a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002954e:	e8 cd ff ff ff       	call   c0029520 <ACPI::~ACPI()>
c0029553:	83 c4 10             	add    esp,0x10
c0029556:	83 ec 08             	sub    esp,0x8
c0029559:	68 64 12 00 00       	push   0x1264
c002955e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029562:	e8 9e 93 fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029567:	83 c4 10             	add    esp,0x10
c002956a:	83 c4 0c             	add    esp,0xc
c002956d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002956e <LinkedList<Device>::~LinkedList()>:
c002956e:	90                   	nop
c002956f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029570 <LinkedList<Device>::isEmpty()>:
c0029570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029574:	8b 00                	mov    eax,DWORD PTR [eax]
c0029576:	85 c0                	test   eax,eax
c0029578:	75 0e                	jne    c0029588 <LinkedList<Device>::isEmpty()+0x18>
c002957a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002957e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029581:	85 c0                	test   eax,eax
c0029583:	75 03                	jne    c0029588 <LinkedList<Device>::isEmpty()+0x18>
c0029585:	b0 01                	mov    al,0x1
c0029587:	c3                   	ret    
c0029588:	b0 00                	mov    al,0x0
c002958a:	90                   	nop
c002958b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002958c <LinkedList<Device>::getFirstElement()>:
c002958c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029590:	8b 00                	mov    eax,DWORD PTR [eax]
c0029592:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029594 <LinkedList<Device>::removeFirst()>:
c0029594:	83 ec 0c             	sub    esp,0xc
c0029597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959b:	8b 00                	mov    eax,DWORD PTR [eax]
c002959d:	85 c0                	test   eax,eax
c002959f:	75 15                	jne    c00295b6 <LinkedList<Device>::removeFirst()+0x22>
c00295a1:	83 ec 0c             	sub    esp,0xc
c00295a4:	68 ac af 02 c0       	push   0xc002afac
c00295a9:	e8 57 0e ff ff       	call   c001a405 <Krnl::panic(char const*)>
c00295ae:	83 c4 10             	add    esp,0x10
c00295b1:	e9 87 00 00 00       	jmp    c002963d <LinkedList<Device>::removeFirst()+0xa9>
c00295b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295bd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00295c3:	85 c0                	test   eax,eax
c00295c5:	74 10                	je     c00295d7 <LinkedList<Device>::removeFirst()+0x43>
c00295c7:	83 ec 0c             	sub    esp,0xc
c00295ca:	68 f7 af 02 c0       	push   0xc002aff7
c00295cf:	e8 31 0e ff ff       	call   c001a405 <Krnl::panic(char const*)>
c00295d4:	83 c4 10             	add    esp,0x10
c00295d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295db:	8b 00                	mov    eax,DWORD PTR [eax]
c00295dd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00295e3:	85 c0                	test   eax,eax
c00295e5:	75 33                	jne    c002961a <LinkedList<Device>::removeFirst()+0x86>
c00295e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029600:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029603:	83 f8 01             	cmp    eax,0x1
c0029606:	74 24                	je     c002962c <LinkedList<Device>::removeFirst()+0x98>
c0029608:	83 ec 0c             	sub    esp,0xc
c002960b:	68 d0 af 02 c0       	push   0xc002afd0
c0029610:	e8 f0 0d ff ff       	call   c001a405 <Krnl::panic(char const*)>
c0029615:	83 c4 10             	add    esp,0x10
c0029618:	eb 12                	jmp    c002962c <LinkedList<Device>::removeFirst()+0x98>
c002961a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002961e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029620:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002962a:	89 10                	mov    DWORD PTR [eax],edx
c002962c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029630:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029633:	8d 50 ff             	lea    edx,[eax-0x1]
c0029636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002963d:	83 c4 0c             	add    esp,0xc
c0029640:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029642 <CPU::~CPU()>:
c0029642:	83 ec 0c             	sub    esp,0xc
c0029645:	ba c8 c5 02 c0       	mov    edx,0xc002c5c8
c002964a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002964e:	89 10                	mov    DWORD PTR [eax],edx
c0029650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029654:	83 ec 0c             	sub    esp,0xc
c0029657:	50                   	push   eax
c0029658:	e8 8f a6 fe ff       	call   c0013cec <Device::~Device()>
c002965d:	83 c4 10             	add    esp,0x10
c0029660:	90                   	nop
c0029661:	83 c4 0c             	add    esp,0xc
c0029664:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029666 <CPU::~CPU()>:
c0029666:	83 ec 0c             	sub    esp,0xc
c0029669:	83 ec 0c             	sub    esp,0xc
c002966c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029670:	e8 cd ff ff ff       	call   c0029642 <CPU::~CPU()>
c0029675:	83 c4 10             	add    esp,0x10
c0029678:	83 ec 08             	sub    esp,0x8
c002967b:	68 98 11 00 00       	push   0x1198
c0029680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029684:	e8 7c 92 fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029689:	83 c4 10             	add    esp,0x10
c002968c:	83 c4 0c             	add    esp,0xc
c002968f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029690 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029690:	90                   	nop
c0029691:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029692 <ThreadControlBlock::ThreadControlBlock()>:
c0029692:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029696:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002969d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296a1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00296a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296ac:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00296b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296b7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00296be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296c2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00296c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296cd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00296d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296d5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00296d9:	90                   	nop
c00296da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00296dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00296dc:	83 ec 0c             	sub    esp,0xc
c00296df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00296e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00296f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00296ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029703:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002970d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029718:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002971f:	83 ec 0c             	sub    esp,0xc
c0029722:	68 5a af 02 c0       	push   0xc002af5a
c0029727:	e8 b9 92 fe ff       	call   c00129e5 <Dbg::kprintf(char const*, ...)>
c002972c:	83 c4 10             	add    esp,0x10
c002972f:	90                   	nop
c0029730:	83 c4 0c             	add    esp,0xc
c0029733:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029734 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029734:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029738:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002973b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002973c <Vm::_FPUState::_FPUState()>:
c002973c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029740:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029747:	90                   	nop
c0029748:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002974a <PCI::~PCI()>:
c002974a:	83 ec 0c             	sub    esp,0xc
c002974d:	ba 5c d7 02 c0       	mov    edx,0xc002d75c
c0029752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029756:	89 10                	mov    DWORD PTR [eax],edx
c0029758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002975c:	83 ec 0c             	sub    esp,0xc
c002975f:	50                   	push   eax
c0029760:	e8 57 9f fe ff       	call   c00136bc <Bus::~Bus()>
c0029765:	83 c4 10             	add    esp,0x10
c0029768:	90                   	nop
c0029769:	83 c4 0c             	add    esp,0xc
c002976c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002976e <PCI::~PCI()>:
c002976e:	83 ec 0c             	sub    esp,0xc
c0029771:	83 ec 0c             	sub    esp,0xc
c0029774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029778:	e8 cd ff ff ff       	call   c002974a <PCI::~PCI()>
c002977d:	83 c4 10             	add    esp,0x10
c0029780:	83 ec 08             	sub    esp,0x8
c0029783:	68 5c 01 00 00       	push   0x15c
c0029788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002978c:	e8 74 91 fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029791:	83 c4 10             	add    esp,0x10
c0029794:	83 c4 0c             	add    esp,0xc
c0029797:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029798 <IDE::~IDE()>:
c0029798:	83 ec 0c             	sub    esp,0xc
c002979b:	ba c0 d9 02 c0       	mov    edx,0xc002d9c0
c00297a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a4:	89 10                	mov    DWORD PTR [eax],edx
c00297a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297aa:	83 ec 0c             	sub    esp,0xc
c00297ad:	50                   	push   eax
c00297ae:	e8 4f aa fe ff       	call   c0014202 <HardDiskController::~HardDiskController()>
c00297b3:	83 c4 10             	add    esp,0x10
c00297b6:	90                   	nop
c00297b7:	83 c4 0c             	add    esp,0xc
c00297ba:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00297bc <IDE::~IDE()>:
c00297bc:	83 ec 0c             	sub    esp,0xc
c00297bf:	83 ec 0c             	sub    esp,0xc
c00297c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297c6:	e8 cd ff ff ff       	call   c0029798 <IDE::~IDE()>
c00297cb:	83 c4 10             	add    esp,0x10
c00297ce:	83 ec 08             	sub    esp,0x8
c00297d1:	68 70 02 00 00       	push   0x270
c00297d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297da:	e8 26 91 fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c00297df:	83 c4 10             	add    esp,0x10
c00297e2:	83 c4 0c             	add    esp,0xc
c00297e5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00297e6 <SATABus::~SATABus()>:
c00297e6:	83 ec 0c             	sub    esp,0xc
c00297e9:	ba a0 da 02 c0       	mov    edx,0xc002daa0
c00297ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297f2:	89 10                	mov    DWORD PTR [eax],edx
c00297f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297f8:	83 ec 0c             	sub    esp,0xc
c00297fb:	50                   	push   eax
c00297fc:	e8 01 aa fe ff       	call   c0014202 <HardDiskController::~HardDiskController()>
c0029801:	83 c4 10             	add    esp,0x10
c0029804:	90                   	nop
c0029805:	83 c4 0c             	add    esp,0xc
c0029808:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002980a <SATABus::~SATABus()>:
c002980a:	83 ec 0c             	sub    esp,0xc
c002980d:	83 ec 0c             	sub    esp,0xc
c0029810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029814:	e8 cd ff ff ff       	call   c00297e6 <SATABus::~SATABus()>
c0029819:	83 c4 10             	add    esp,0x10
c002981c:	83 ec 08             	sub    esp,0x8
c002981f:	68 64 01 00 00       	push   0x164
c0029824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029828:	e8 d8 90 fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c002982d:	83 c4 10             	add    esp,0x10
c0029830:	83 c4 0c             	add    esp,0xc
c0029833:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029834 <ATA::~ATA()>:
c0029834:	83 ec 0c             	sub    esp,0xc
c0029837:	ba ec da 02 c0       	mov    edx,0xc002daec
c002983c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029840:	89 10                	mov    DWORD PTR [eax],edx
c0029842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029846:	83 ec 0c             	sub    esp,0xc
c0029849:	50                   	push   eax
c002984a:	e8 a5 aa fe ff       	call   c00142f4 <PhysicalDisk::~PhysicalDisk()>
c002984f:	83 c4 10             	add    esp,0x10
c0029852:	90                   	nop
c0029853:	83 c4 0c             	add    esp,0xc
c0029856:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029858 <ATA::~ATA()>:
c0029858:	83 ec 0c             	sub    esp,0xc
c002985b:	83 ec 0c             	sub    esp,0xc
c002985e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029862:	e8 cd ff ff ff       	call   c0029834 <ATA::~ATA()>
c0029867:	83 c4 10             	add    esp,0x10
c002986a:	83 ec 08             	sub    esp,0x8
c002986d:	68 7c 01 00 00       	push   0x17c
c0029872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029876:	e8 8a 90 fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c002987b:	83 c4 10             	add    esp,0x10
c002987e:	83 c4 0c             	add    esp,0xc
c0029881:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029882 <ATAPI::~ATAPI()>:
c0029882:	83 ec 0c             	sub    esp,0xc
c0029885:	ba 24 db 02 c0       	mov    edx,0xc002db24
c002988a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988e:	89 10                	mov    DWORD PTR [eax],edx
c0029890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029894:	83 ec 0c             	sub    esp,0xc
c0029897:	50                   	push   eax
c0029898:	e8 57 aa fe ff       	call   c00142f4 <PhysicalDisk::~PhysicalDisk()>
c002989d:	83 c4 10             	add    esp,0x10
c00298a0:	90                   	nop
c00298a1:	83 c4 0c             	add    esp,0xc
c00298a4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00298a6 <ATAPI::~ATAPI()>:
c00298a6:	83 ec 0c             	sub    esp,0xc
c00298a9:	83 ec 0c             	sub    esp,0xc
c00298ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298b0:	e8 cd ff ff ff       	call   c0029882 <ATAPI::~ATAPI()>
c00298b5:	83 c4 10             	add    esp,0x10
c00298b8:	83 ec 08             	sub    esp,0x8
c00298bb:	68 80 01 00 00       	push   0x180
c00298c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298c4:	e8 3c 90 fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c00298c9:	83 c4 10             	add    esp,0x10
c00298cc:	83 c4 0c             	add    esp,0xc
c00298cf:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00298d0 <SATA::~SATA()>:
c00298d0:	83 ec 0c             	sub    esp,0xc
c00298d3:	ba d8 db 02 c0       	mov    edx,0xc002dbd8
c00298d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298dc:	89 10                	mov    DWORD PTR [eax],edx
c00298de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e2:	83 ec 0c             	sub    esp,0xc
c00298e5:	50                   	push   eax
c00298e6:	e8 09 aa fe ff       	call   c00142f4 <PhysicalDisk::~PhysicalDisk()>
c00298eb:	83 c4 10             	add    esp,0x10
c00298ee:	90                   	nop
c00298ef:	83 c4 0c             	add    esp,0xc
c00298f2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00298f4 <SATA::~SATA()>:
c00298f4:	83 ec 0c             	sub    esp,0xc
c00298f7:	83 ec 0c             	sub    esp,0xc
c00298fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298fe:	e8 cd ff ff ff       	call   c00298d0 <SATA::~SATA()>
c0029903:	83 c4 10             	add    esp,0x10
c0029906:	83 ec 08             	sub    esp,0x8
c0029909:	68 7c 01 00 00       	push   0x17c
c002990e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029912:	e8 ee 8f fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029917:	83 c4 10             	add    esp,0x10
c002991a:	83 c4 0c             	add    esp,0xc
c002991d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002991e <SATAPI::~SATAPI()>:
c002991e:	83 ec 0c             	sub    esp,0xc
c0029921:	ba b4 dc 02 c0       	mov    edx,0xc002dcb4
c0029926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002992a:	89 10                	mov    DWORD PTR [eax],edx
c002992c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029930:	83 ec 0c             	sub    esp,0xc
c0029933:	50                   	push   eax
c0029934:	e8 bb a9 fe ff       	call   c00142f4 <PhysicalDisk::~PhysicalDisk()>
c0029939:	83 c4 10             	add    esp,0x10
c002993c:	90                   	nop
c002993d:	83 c4 0c             	add    esp,0xc
c0029940:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029942 <SATAPI::~SATAPI()>:
c0029942:	83 ec 0c             	sub    esp,0xc
c0029945:	83 ec 0c             	sub    esp,0xc
c0029948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002994c:	e8 cd ff ff ff       	call   c002991e <SATAPI::~SATAPI()>
c0029951:	83 c4 10             	add    esp,0x10
c0029954:	83 ec 08             	sub    esp,0x8
c0029957:	68 80 01 00 00       	push   0x180
c002995c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029960:	e8 a0 8f fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029965:	83 c4 10             	add    esp,0x10
c0029968:	83 c4 0c             	add    esp,0xc
c002996b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002996c <AVX::~AVX()>:
c002996c:	83 ec 0c             	sub    esp,0xc
c002996f:	ba f4 dc 02 c0       	mov    edx,0xc002dcf4
c0029974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029978:	89 10                	mov    DWORD PTR [eax],edx
c002997a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002997e:	83 ec 0c             	sub    esp,0xc
c0029981:	50                   	push   eax
c0029982:	e8 f1 a9 fe ff       	call   c0014378 <FPU::~FPU()>
c0029987:	83 c4 10             	add    esp,0x10
c002998a:	90                   	nop
c002998b:	83 c4 0c             	add    esp,0xc
c002998e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029990 <AVX::~AVX()>:
c0029990:	83 ec 0c             	sub    esp,0xc
c0029993:	83 ec 0c             	sub    esp,0xc
c0029996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002999a:	e8 cd ff ff ff       	call   c002996c <AVX::~AVX()>
c002999f:	83 c4 10             	add    esp,0x10
c00299a2:	83 ec 08             	sub    esp,0x8
c00299a5:	68 58 01 00 00       	push   0x158
c00299aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299ae:	e8 52 8f fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c00299b3:	83 c4 10             	add    esp,0x10
c00299b6:	83 c4 0c             	add    esp,0xc
c00299b9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00299ba <MMX::~MMX()>:
c00299ba:	83 ec 0c             	sub    esp,0xc
c00299bd:	ba 34 dd 02 c0       	mov    edx,0xc002dd34
c00299c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c6:	89 10                	mov    DWORD PTR [eax],edx
c00299c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299cc:	83 ec 0c             	sub    esp,0xc
c00299cf:	50                   	push   eax
c00299d0:	e8 a3 a9 fe ff       	call   c0014378 <FPU::~FPU()>
c00299d5:	83 c4 10             	add    esp,0x10
c00299d8:	90                   	nop
c00299d9:	83 c4 0c             	add    esp,0xc
c00299dc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00299de <MMX::~MMX()>:
c00299de:	83 ec 0c             	sub    esp,0xc
c00299e1:	83 ec 0c             	sub    esp,0xc
c00299e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e8:	e8 cd ff ff ff       	call   c00299ba <MMX::~MMX()>
c00299ed:	83 c4 10             	add    esp,0x10
c00299f0:	83 ec 08             	sub    esp,0x8
c00299f3:	68 58 01 00 00       	push   0x158
c00299f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299fc:	e8 04 8f fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029a01:	83 c4 10             	add    esp,0x10
c0029a04:	83 c4 0c             	add    esp,0xc
c0029a07:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029a08 <SSE::~SSE()>:
c0029a08:	83 ec 0c             	sub    esp,0xc
c0029a0b:	ba 74 dd 02 c0       	mov    edx,0xc002dd74
c0029a10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a14:	89 10                	mov    DWORD PTR [eax],edx
c0029a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a1a:	83 ec 0c             	sub    esp,0xc
c0029a1d:	50                   	push   eax
c0029a1e:	e8 55 a9 fe ff       	call   c0014378 <FPU::~FPU()>
c0029a23:	83 c4 10             	add    esp,0x10
c0029a26:	90                   	nop
c0029a27:	83 c4 0c             	add    esp,0xc
c0029a2a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029a2c <SSE::~SSE()>:
c0029a2c:	83 ec 0c             	sub    esp,0xc
c0029a2f:	83 ec 0c             	sub    esp,0xc
c0029a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a36:	e8 cd ff ff ff       	call   c0029a08 <SSE::~SSE()>
c0029a3b:	83 c4 10             	add    esp,0x10
c0029a3e:	83 ec 08             	sub    esp,0x8
c0029a41:	68 58 01 00 00       	push   0x158
c0029a46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a4a:	e8 b6 8e fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029a4f:	83 c4 10             	add    esp,0x10
c0029a52:	83 c4 0c             	add    esp,0xc
c0029a55:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029a56 <x87::~x87()>:
c0029a56:	83 ec 0c             	sub    esp,0xc
c0029a59:	ba b4 dd 02 c0       	mov    edx,0xc002ddb4
c0029a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a62:	89 10                	mov    DWORD PTR [eax],edx
c0029a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a68:	83 ec 0c             	sub    esp,0xc
c0029a6b:	50                   	push   eax
c0029a6c:	e8 07 a9 fe ff       	call   c0014378 <FPU::~FPU()>
c0029a71:	83 c4 10             	add    esp,0x10
c0029a74:	90                   	nop
c0029a75:	83 c4 0c             	add    esp,0xc
c0029a78:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029a7a <x87::~x87()>:
c0029a7a:	83 ec 0c             	sub    esp,0xc
c0029a7d:	83 ec 0c             	sub    esp,0xc
c0029a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a84:	e8 cd ff ff ff       	call   c0029a56 <x87::~x87()>
c0029a89:	83 c4 10             	add    esp,0x10
c0029a8c:	83 ec 08             	sub    esp,0x8
c0029a8f:	68 58 01 00 00       	push   0x158
c0029a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a98:	e8 68 8e fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029a9d:	83 c4 10             	add    esp,0x10
c0029aa0:	83 c4 0c             	add    esp,0xc
c0029aa3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029aa4 <IOAPIC::~IOAPIC()>:
c0029aa4:	83 ec 0c             	sub    esp,0xc
c0029aa7:	ba 0c df 02 c0       	mov    edx,0xc002df0c
c0029aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ab0:	89 10                	mov    DWORD PTR [eax],edx
c0029ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ab6:	83 ec 0c             	sub    esp,0xc
c0029ab9:	50                   	push   eax
c0029aba:	e8 2d a2 fe ff       	call   c0013cec <Device::~Device()>
c0029abf:	83 c4 10             	add    esp,0x10
c0029ac2:	90                   	nop
c0029ac3:	83 c4 0c             	add    esp,0xc
c0029ac6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029ac8 <IOAPIC::~IOAPIC()>:
c0029ac8:	83 ec 0c             	sub    esp,0xc
c0029acb:	83 ec 0c             	sub    esp,0xc
c0029ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ad2:	e8 cd ff ff ff       	call   c0029aa4 <IOAPIC::~IOAPIC()>
c0029ad7:	83 c4 10             	add    esp,0x10
c0029ada:	83 ec 08             	sub    esp,0x8
c0029add:	68 68 01 00 00       	push   0x168
c0029ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ae6:	e8 1a 8e fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029aeb:	83 c4 10             	add    esp,0x10
c0029aee:	83 c4 0c             	add    esp,0xc
c0029af1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029af2 <APIC::~APIC()>:
c0029af2:	83 ec 0c             	sub    esp,0xc
c0029af5:	ba c4 de 02 c0       	mov    edx,0xc002dec4
c0029afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029afe:	89 10                	mov    DWORD PTR [eax],edx
c0029b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b04:	83 ec 0c             	sub    esp,0xc
c0029b07:	50                   	push   eax
c0029b08:	e8 35 ad fe ff       	call   c0014842 <InterruptController::~InterruptController()>
c0029b0d:	83 c4 10             	add    esp,0x10
c0029b10:	90                   	nop
c0029b11:	83 c4 0c             	add    esp,0xc
c0029b14:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029b16 <APIC::~APIC()>:
c0029b16:	83 ec 0c             	sub    esp,0xc
c0029b19:	83 ec 0c             	sub    esp,0xc
c0029b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b20:	e8 cd ff ff ff       	call   c0029af2 <APIC::~APIC()>
c0029b25:	83 c4 10             	add    esp,0x10
c0029b28:	83 ec 08             	sub    esp,0x8
c0029b2b:	68 58 21 00 00       	push   0x2158
c0029b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b34:	e8 cc 8d fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029b39:	83 c4 10             	add    esp,0x10
c0029b3c:	83 c4 0c             	add    esp,0xc
c0029b3f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029b40 <PIC::~PIC()>:
c0029b40:	83 ec 0c             	sub    esp,0xc
c0029b43:	ba 5c df 02 c0       	mov    edx,0xc002df5c
c0029b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b4c:	89 10                	mov    DWORD PTR [eax],edx
c0029b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b52:	83 ec 0c             	sub    esp,0xc
c0029b55:	50                   	push   eax
c0029b56:	e8 e7 ac fe ff       	call   c0014842 <InterruptController::~InterruptController()>
c0029b5b:	83 c4 10             	add    esp,0x10
c0029b5e:	90                   	nop
c0029b5f:	83 c4 0c             	add    esp,0xc
c0029b62:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029b64 <PIC::~PIC()>:
c0029b64:	83 ec 0c             	sub    esp,0xc
c0029b67:	83 ec 0c             	sub    esp,0xc
c0029b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b6e:	e8 cd ff ff ff       	call   c0029b40 <PIC::~PIC()>
c0029b73:	83 c4 10             	add    esp,0x10
c0029b76:	83 ec 08             	sub    esp,0x8
c0029b79:	68 58 21 00 00       	push   0x2158
c0029b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b82:	e8 7e 8d fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029b87:	83 c4 10             	add    esp,0x10
c0029b8a:	83 c4 0c             	add    esp,0xc
c0029b8d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029b8e <APICTimer::~APICTimer()>:
c0029b8e:	83 ec 0c             	sub    esp,0xc
c0029b91:	ba b0 df 02 c0       	mov    edx,0xc002dfb0
c0029b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b9a:	89 10                	mov    DWORD PTR [eax],edx
c0029b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ba0:	83 ec 0c             	sub    esp,0xc
c0029ba3:	50                   	push   eax
c0029ba4:	e8 29 cd fe ff       	call   c00168d2 <Timer::~Timer()>
c0029ba9:	83 c4 10             	add    esp,0x10
c0029bac:	90                   	nop
c0029bad:	83 c4 0c             	add    esp,0xc
c0029bb0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029bb2 <APICTimer::~APICTimer()>:
c0029bb2:	83 ec 0c             	sub    esp,0xc
c0029bb5:	83 ec 0c             	sub    esp,0xc
c0029bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bbc:	e8 cd ff ff ff       	call   c0029b8e <APICTimer::~APICTimer()>
c0029bc1:	83 c4 10             	add    esp,0x10
c0029bc4:	83 ec 08             	sub    esp,0x8
c0029bc7:	68 60 01 00 00       	push   0x160
c0029bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bd0:	e8 30 8d fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029bd5:	83 c4 10             	add    esp,0x10
c0029bd8:	83 c4 0c             	add    esp,0xc
c0029bdb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029bdc <PIT::~PIT()>:
c0029bdc:	83 ec 0c             	sub    esp,0xc
c0029bdf:	ba 00 e0 02 c0       	mov    edx,0xc002e000
c0029be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029be8:	89 10                	mov    DWORD PTR [eax],edx
c0029bea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bee:	83 ec 0c             	sub    esp,0xc
c0029bf1:	50                   	push   eax
c0029bf2:	e8 db cc fe ff       	call   c00168d2 <Timer::~Timer()>
c0029bf7:	83 c4 10             	add    esp,0x10
c0029bfa:	90                   	nop
c0029bfb:	83 c4 0c             	add    esp,0xc
c0029bfe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029c00 <PIT::~PIT()>:
c0029c00:	83 ec 0c             	sub    esp,0xc
c0029c03:	83 ec 0c             	sub    esp,0xc
c0029c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c0a:	e8 cd ff ff ff       	call   c0029bdc <PIT::~PIT()>
c0029c0f:	83 c4 10             	add    esp,0x10
c0029c12:	83 ec 08             	sub    esp,0x8
c0029c15:	68 5c 01 00 00       	push   0x15c
c0029c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c1e:	e8 e2 8c fe ff       	call   c0012905 <operator delete(void*, unsigned long)>
c0029c23:	83 c4 10             	add    esp,0x10
c0029c26:	83 c4 0c             	add    esp,0xc
c0029c29:	c3                   	ret    
