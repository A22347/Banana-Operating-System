
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b5 9a 00 00       	call   c0009ad5 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e9 29 02 00       	call   c0022a0e <_init>
c0000025:	c3                   	ret    
c0000026:	bb 92 36 02 c0       	mov    ebx,0xc0023692
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a0 36 02 c0    	cmp    ebx,0xc00236a0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 7b 02 c0       	mov    eax,0xc0027b18
c0000049:	3d 18 7b 02 c0       	cmp    eax,0xc0027b18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 7b 02 c0       	push   0xc0027b18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 7b 02 c0       	mov    eax,0xc0027b18
c0000075:	2d 18 7b 02 c0       	sub    eax,0xc0027b18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 7b 02 c0       	push   0xc0027b18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a0 7c 02 c0 00 	cmp    BYTE PTR ds:0xc0027ca0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a8 36 02 c0       	mov    ebx,0xc00236a8
c00000bb:	81 eb a4 36 02 c0    	sub    ebx,0xc00236a4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a4 36 02 c0       	mov    esi,0xc00236a4
c00000ca:	a1 a4 7c 02 c0       	mov    eax,ds:0xc0027ca4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 a4 7c 02 c0       	mov    ds:0xc0027ca4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 a4 7c 02 c0       	mov    eax,ds:0xc0027ca4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 7b 02 c0       	push   0xc0027b18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a0 7c 02 c0 01 	mov    BYTE PTR ds:0xc0027ca0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 a8 7c 02 c0       	push   0xc0027ca8
c000012c:	68 18 7b 02 c0       	push   0xc0027b18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 00 7d 01 00       	call   c0017fd8 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 7c c7 00 00       	call   c000ca6c <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 de 7c 01 00       	call   c0017fd8 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 a7 81 01 00       	call   c00184c0 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 ea 87 01 00       	call   c0018b0c <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 f0 80 02 c0 	lgdtd  ds:0xc00280f0
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 02 e6 00 00       	call   c000eb19 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 c0 7c 02 c0       	mov    ds:0xc0027cc0,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 c0 7c 02 c0    	mov    DWORD PTR ds:0xc0027cc0,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d c0 7c 02 c0    	mov    ebx,DWORD PTR ds:0xc0027cc0
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 c0 36 02 c0 02 	test   BYTE PTR [edx-0x3ffdc940],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 c0 36 02 c0 01 	test   BYTE PTR [edx-0x3ffdc940],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 c0 36 02 c0 08 	test   BYTE PTR [edx-0x3ffdc940],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 c0 36 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc940],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 c0 36 02 c0 01 	test   BYTE PTR [edx-0x3ffdc940],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d e0 7c 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ce0
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d e0 7c 02 c0    	mov    DWORD PTR ds:0xc0027ce0,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 e4 7c 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd831c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 e4 7c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd831c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d e0 7c 02 c0    	mov    DWORD PTR ds:0xc0027ce0,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 0c 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d0c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 1c 7d 02 c0    	mov    ecx,DWORD PTR ds:0xc0027d1c
c0000d6c:	c7 42 0c 14 7d 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027d14
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 1c 7d 02 c0    	mov    DWORD PTR ds:0xc0027d1c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 0c 7d 02 c0    	mov    DWORD PTR ds:0xc0027d0c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 e0 7c 02 c0 02 	test   BYTE PTR ds:0xc0027ce0,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 e0 7c 02 c0       	mov    eax,0xc0027ce0
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 8b 8a 00 00       	call   c00098d8 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 cd 89 00 00       	call   c00098d8 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 b7 89 00 00       	call   c00098d8 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 93 89 00 00       	call   c00098d8 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d e0 7c 02 c0    	mov    edi,DWORD PTR ds:0xc0027ce0
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 e0 7c 02 c0       	mov    eax,0xc0027ce0
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 e4 7c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd831c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 e4 7c 02 c0 	mov    DWORD PTR [edx*4-0x3ffd831c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 14 7d 02 c0 	lea    edx,[eax*8-0x3ffd82ec]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 e0 7c 02 c0       	mov    eax,0xc0027ce0
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 20 7d 02 c0    	mov    ebx,DWORD PTR ds:0xc0027d20
c00010ee:	81 fb 14 7d 02 c0    	cmp    ebx,0xc0027d14
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 14 7d 02 c0       	cmp    eax,0xc0027d14
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 10 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d10,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 1c 7d 02 c0       	mov    ds:0xc0027d1c,eax
c000112a:	a3 20 7d 02 c0       	mov    ds:0xc0027d20,eax
c000112f:	a3 10 7d 02 c0       	mov    ds:0xc0027d10,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 14 7d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027d14
c000113d:	c7 40 0c 14 7d 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027d14
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 20 7d 02 c0       	mov    ds:0xc0027d20,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 14 7d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027d14
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 d8 7c 02 c0 	lea    ebp,[edx*4-0x3ffd8328]
c000118e:	8b 14 95 e0 7c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8320]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 e0 7c 02 c0 	lea    ecx,[edx*4-0x3ffd8320]
c00011a9:	8b 14 95 e0 7c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8320]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 14 80 02 c0 	or     DWORD PTR [edi*4-0x3ffd7fec],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 14 7d 02 c0 	lea    eax,[eax*8-0x3ffd82ec]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 1c 7d 02 c0    	mov    DWORD PTR ds:0xc0027d1c,ecx
c0001263:	89 0d 20 7d 02 c0    	mov    DWORD PTR ds:0xc0027d20,ecx
c0001269:	c7 41 08 14 7d 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027d14
c0001270:	c7 41 0c 14 7d 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027d14
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 0c 7d 02 c0 	lea    edx,[ecx*8-0x3ffd82f4]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 14 80 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7fec]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 14 80 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7fec]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 0c 7d 02 c0 	lea    edx,[eax*4-0x3ffd82f4]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 14 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fec],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 1c 7d 02 c0    	mov    DWORD PTR ds:0xc0027d1c,edi
c0001336:	89 3d 20 7d 02 c0    	mov    DWORD PTR ds:0xc0027d20,edi
c000133c:	c7 47 08 14 7d 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027d14
c0001343:	c7 47 0c 14 7d 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027d14
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 10 7d 02 c0    	mov    DWORD PTR ds:0xc0027d10,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 0c 7d 02 c0       	mov    eax,ds:0xc0027d0c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 0c 7d 02 c0    	mov    DWORD PTR ds:0xc0027d0c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba e0 7c 02 c0       	mov    edx,0xc0027ce0
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d e0 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027ce0,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 e0 7c 02 c0       	mov    eax,0xc0027ce0
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 34 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028034
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 34 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028034,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 34 80 02 c0    	mov    DWORD PTR ds:0xc0028034,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 0c 7d 02 c0    	cmp    DWORD PTR ds:0xc0027d0c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 0c 7d 02 c0    	mov    DWORD PTR ds:0xc0027d0c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d e0 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027ce0,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 e0 7c 02 c0       	mov    eax,0xc0027ce0
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 3c 80 02 c0    	push   DWORD PTR ds:0xc002803c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d e0 7c 02 c0 00 	cmp    DWORD PTR ds:0xc0027ce0,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 e0 7c 02 c0       	mov    eax,0xc0027ce0
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 3c 80 02 c0       	mov    eax,ds:0xc002803c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 e0 7c 02 c0       	mov    eax,0xc0027ce0
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 0c 7d 02 c0 00 	cmp    DWORD PTR ds:0xc0027d0c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 e0 7c 02 c0       	mov    eax,0xc0027ce0
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 0c 7d 02 c0       	mov    eax,ds:0xc0027d0c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 e4 7c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd831c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 14 7d 02 c0       	mov    eax,0xc0027d14
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 0c 80 02 c0       	cmp    eax,0xc002800c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 48 80 02 c0       	mov    eax,ds:0xc0028048
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 30 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028030
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 44 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028044
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 54 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028054
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 e0 7c 02 c0       	mov    eax,0xc0027ce0
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 c4 37 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc83c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 e0 7c 02 c0       	mov    eax,ds:0xc0027ce0
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 e0 7c 02 c0       	mov    ds:0xc0027ce0,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 24 80 02 c0    	mov    DWORD PTR ds:0xc0028024,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 28 80 02 c0    	mov    DWORD PTR ds:0xc0028028,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 2c 80 02 c0    	mov    DWORD PTR ds:0xc002802c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 34 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028034,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 a0 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6860]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 ea 9c 01 00       	jmp    c001b810 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 a0 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6860]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 1c 9d 01 00       	jmp    c001b858 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 a0 97 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6860]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 45 9d 01 00       	jmp    c001b8a0 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 b6 09 02 00       	call   c00227f4 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 e0 38 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc720]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 e0 38 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc720]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 00 39 02 c0       	mov    edx,0xc0023900
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 4c 64 02 c0       	mov    edx,0xc002644c
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 0c 39 02 c0       	mov    edx,0xc002390c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba f0 38 02 c0       	mov    edx,0xc00238f0
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 80 80 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7f80]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 60 80 02 c0    	mov    ax,ds:0xc0028060
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 60 80 02 c0    	mov    ds:0xc0028060,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 b3 f7 01 00       	call   c00227f4 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 12 39 02 c0       	mov    eax,0xc0023912
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 60 38 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc7a0]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 1b 39 02 c0       	mov    eax,0xc002391b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 e0 38 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc720]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 7e e1 01 00       	call   c00227f4 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba f0 38 02 c0       	mov    edx,0xc00238f0
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba f0 37 02 c0       	mov    edx,0xc00237f0
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 80 80 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7f80]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 80 80 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7f80],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 45 cb 01 00       	call   c00227f4 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 2b cb 01 00       	call   c00227f4 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 37 38 02 c0       	mov    eax,0xc0023837
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 30 38 02 c0       	mov    eax,0xc0023830
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 c4 b6 01 00       	call   c00227f4 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be 20 38 02 c0       	mov    esi,0xc0023820
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 38 b0 01 00       	call   c00227f4 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 00 39 02 c0       	mov    edx,0xc0023900
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 00 38 02 c0       	mov    edx,0xc0023800
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 10 38 02 c0       	mov    edx,0xc0023810
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba 22 39 02 c0       	mov    edx,0xc0023922
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba 2e 39 02 c0       	mov    edx,0xc002392e
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba 42 39 02 c0       	mov    edx,0xc0023942
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 3c 14 00 00       	call   c0009a0f <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 34 14 00 00       	call   c0009a1f <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 60 3c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023c60
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 60 3c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023c60
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 60 3a 02 c0       	mov    eax,0xc0023a60
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 a0 39 02 c0       	mov    eax,0xc00239a0
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 60 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6a0]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 96 11 00 00       	jmp    c0009a0f <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 b1 11 00 00       	jmp    c0009a2f <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000888b:	48                   	dec    eax
c000888c:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00088a2:	48                   	dec    eax
c00088a3:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c00088b3:	ff 05 04 96 02 c0    	inc    DWORD PTR ds:0xc0029604
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c00088c2:	48                   	dec    eax
c00088c3:	a3 04 96 02 c0       	mov    ds:0xc0029604,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 00 96 02 c0 00 	cmp    DWORD PTR ds:0xc0029600,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c00088dd:	e8 4a fe 00 00       	call   c001872c <schedule()>
c00088e2:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00088e7:	48                   	dec    eax
c00088e8:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 60 3d 02 c0       	push   0xc0023d60
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 e8 80 02 c0       	mov    eax,0xc00280e8
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 69 3d 02 c0       	push   0xc0023d69
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 f4 27 02 c0       	mov    eax,0xc00227f4
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 73 3d 02 c0       	push   0xc0023d73
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 28 25 02 c0       	mov    eax,0xc0022528
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 7c 3d 02 c0       	push   0xc0023d7c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 f4 28 02 c0       	mov    eax,0xc00228f4
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 86 3d 02 c0       	push   0xc0023d86
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 74 26 02 c0       	mov    eax,0xc0022674
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 8f 3d 02 c0       	push   0xc0023d8f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 ec 80 02 c0       	mov    eax,0xc00280ec
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 9c 3d 02 c0       	push   0xc0023d9c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 ed 80 02 c0       	mov    eax,0xc00280ed
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 83 59 00 00       	call   c000e3c8 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 a9 3d 02 c0       	push   0xc0023da9
c0008a75:	e8 ef 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 c0 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dc0
c0008a82:	e8 e2 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 7c 0f 00 00       	call   c0009a0f <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c0008aa2:	68 d9 3d 02 c0       	push   0xc0023dd9
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 59 f8 00 00       	call   c0018308 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 07 94 00 c0       	push   0xc0009407
c0008abe:	53                   	push   ebx
c0008abf:	e8 4c fa 00 00       	call   c0018510 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 54 8f 01 c0       	push   0xc0018f54
c0008acd:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c0008ad3:	e8 38 fa 00 00       	call   c0018510 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 e8 95 02 c0       	mov    ds:0xc00295e8,eax
c0008ae0:	68 80 3f 02 c0       	push   0xc0023f80
c0008ae5:	c6 05 ed 80 02 c0 01 	mov    BYTE PTR ds:0xc00280ed,0x1
c0008aec:	e8 78 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 39 08 01 00       	call   c001932f <Vm::initialise8086()>
c0008af6:	e8 9b 45 00 00       	call   c000d096 <Fs::initVFS()>
c0008afb:	c7 04 24 e6 3d 02 c0 	mov    DWORD PTR [esp],0xc0023de6
c0008b02:	e8 62 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 80 3f 02 c0       	push   0xc0023f80
c0008b26:	e8 3e 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 46 e0 00 00       	call   c0016b76 <Sys::loadSyscalls()>
c0008b30:	e8 89 bd 00 00       	call   c00148be <Krnl::loadSystemEnv()>
c0008b35:	e8 34 c3 00 00       	call   c0014e6e <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 00 3e 02 c0       	push   0xc0023e00
c0008b44:	68 09 3e 02 c0       	push   0xc0023e09
c0008b49:	e8 eb cd 00 00       	call   c0015939 <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 2a 51 00 00       	call   c000dc80 <User::loadClockSettings(int)>
c0008b56:	c7 04 24 a4 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fa4
c0008b5d:	e8 07 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 15 58 00 00       	call   c000e388 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 11 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e11
c0008b7a:	e8 ea 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 a2 b8 00 00       	call   c0014426 <Krnl::startCPUs()>
c0008b84:	c7 04 24 2b 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e2b
c0008b8b:	e8 d9 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d e8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e8
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 3c 3e 02 c0       	push   0xc0023e3c
c0008b9f:	e8 a2 f1 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 ca f3 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 6a fd 00 00       	call   c0018924 <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 58 3e 02 c0       	push   0xc0023e58
c0008bcf:	50                   	push   eax
c0008bd0:	e8 6d 58 00 00       	call   c000e442 <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba 54 40 02 c0       	mov    edx,0xc0024054
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 01 81 02 c0 04 	test   BYTE PTR ds:0xc0028101,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 4d 97 01 00       	call   c00224b6 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 26 a5 00 00       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 ff a4 00 00       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 dd a4 00 00       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 bb a4 00 00       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 00 81 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028100,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 c9 a3 00 00       	call   c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 a4 a3 00 00       	call   c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 b7 95 01 00       	call   c0022470 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 74 95 01 00       	call   c0022450 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 c0 a3 00 00       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <Computer::rdmsr(unsigned int)>:
c0008f2a:	83 ec 0c             	sub    esp,0xc
c0008f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f31:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f38:	74 0a                	je     c0008f44 <Computer::rdmsr(unsigned int)+0x1a>
c0008f3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f3e:	0f 32                	rdmsr  
c0008f40:	83 c4 0c             	add    esp,0xc
c0008f43:	c3                   	ret    
c0008f44:	83 ec 0c             	sub    esp,0xc
c0008f47:	68 61 3e 02 c0       	push   0xc0023e61
c0008f4c:	e8 76 ba 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	eb e4                	jmp    c0008f3a <Computer::rdmsr(unsigned int)+0x10>

c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f56:	57                   	push   edi
c0008f57:	56                   	push   esi
c0008f58:	52                   	push   edx
c0008f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f61:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f65:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f6c:	74 0e                	je     c0008f7c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f72:	89 f0                	mov    eax,esi
c0008f74:	89 fa                	mov    edx,edi
c0008f76:	0f 30                	wrmsr  
c0008f78:	58                   	pop    eax
c0008f79:	5e                   	pop    esi
c0008f7a:	5f                   	pop    edi
c0008f7b:	c3                   	ret    
c0008f7c:	83 ec 0c             	sub    esp,0xc
c0008f7f:	68 67 3e 02 c0       	push   0xc0023e67
c0008f84:	e8 3e ba 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c0008f89:	83 c4 10             	add    esp,0x10
c0008f8c:	eb e0                	jmp    c0008f6e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f8e <Computer::shutdown()>:
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f95:	8b 10                	mov    edx,DWORD PTR [eax]
c0008f97:	6a 00                	push   0x0
c0008f99:	6a 00                	push   0x0
c0008f9b:	6a 00                	push   0x0
c0008f9d:	50                   	push   eax
c0008f9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fa1:	83 c4 1c             	add    esp,0x1c
c0008fa4:	c3                   	ret    
c0008fa5:	90                   	nop

c0008fa6 <Computer::restart()>:
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fad:	8b 10                	mov    edx,DWORD PTR [eax]
c0008faf:	6a 00                	push   0x0
c0008fb1:	6a 00                	push   0x0
c0008fb3:	6a 01                	push   0x1
c0008fb5:	50                   	push   eax
c0008fb6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fb9:	83 c4 1c             	add    esp,0x1c
c0008fbc:	c3                   	ret    
c0008fbd:	90                   	nop

c0008fbe <Computer::sleep()>:
c0008fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fc2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fcc:	e9 c7 98 00 00       	jmp    c0012898 <ACPI::sleep()>
c0008fd1:	90                   	nop

c0008fd2 <Computer::nmiEnabled()>:
c0008fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fd6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008fdc:	c3                   	ret    
c0008fdd:	90                   	nop

c0008fde <Computer::readCMOS(unsigned char)>:
c0008fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fe2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008fe9:	19 c0                	sbb    eax,eax
c0008feb:	83 e0 80             	and    eax,0xffffff80
c0008fee:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008ff2:	e6 70                	out    0x70,al
c0008ff4:	e4 71                	in     al,0x71
c0008ff6:	c3                   	ret    
c0008ff7:	90                   	nop

c0008ff8 <Computer::enableNMI(bool)>:
c0008ff8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009000:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009006:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000900e:	eb ce                	jmp    c0008fde <Computer::readCMOS(unsigned char)>

c0009010 <Computer::open(int, int, void*)>:
c0009010:	56                   	push   esi
c0009011:	53                   	push   ebx
c0009012:	83 ec 10             	sub    esp,0x10
c0009015:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009019:	68 c4 3f 02 c0       	push   0xc0023fc4
c000901e:	e8 46 0a 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009023:	58                   	pop    eax
c0009024:	f6 05 00 81 02 c0 04 	test   BYTE PTR ds:0xc0028100,0x4
c000902b:	5a                   	pop    edx
c000902c:	0f 94 05 c0 74 02 c0 	sete   BYTE PTR ds:0xc00274c0
c0009033:	68 58 01 00 00       	push   0x158
c0009038:	68 6d 3e 02 c0       	push   0xc0023e6d
c000903d:	e8 bd 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009042:	59                   	pop    ecx
c0009043:	5e                   	pop    esi
c0009044:	68 14 01 00 00       	push   0x114
c0009049:	68 83 3e 02 c0       	push   0xc0023e83
c000904e:	e8 ac 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009053:	58                   	pop    eax
c0009054:	5a                   	pop    edx
c0009055:	6a 14                	push   0x14
c0009057:	68 97 3e 02 c0       	push   0xc0023e97
c000905c:	e8 9e 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009061:	59                   	pop    ecx
c0009062:	5e                   	pop    esi
c0009063:	68 1f 07 00 00       	push   0x71f
c0009068:	68 aa 3e 02 c0       	push   0xc0023eaa
c000906d:	e8 8d 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009072:	58                   	pop    eax
c0009073:	5a                   	pop    edx
c0009074:	6a 5f                	push   0x5f
c0009076:	68 c1 3e 02 c0       	push   0xc0023ec1
c000907b:	e8 7f 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009080:	c7 04 24 d7 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ed7
c0009087:	e8 73 3c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000908c:	c7 04 24 e9 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ee9
c0009093:	e8 d1 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009098:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000909f:	e8 6b 09 00 00       	call   c0009a0f <malloc>
c00090a4:	89 c6                	mov    esi,eax
c00090a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00090a9:	e8 a2 90 00 00       	call   c0012150 <ACPI::ACPI()>
c00090ae:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00090b4:	c7 04 24 03 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f03
c00090bb:	e8 a9 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090c0:	59                   	pop    ecx
c00090c1:	5e                   	pop    esi
c00090c2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c00090c8:	53                   	push   ebx
c00090c9:	e8 70 51 00 00       	call   c000e23e <Device::addChild(Device*)>
c00090ce:	c7 04 24 e8 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fe8
c00090d5:	e8 8f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00090dd:	e8 3c fc ff ff       	call   c0008d1e <Computer::detectFeatures()>
c00090e2:	c7 04 24 08 40 02 c0 	mov    DWORD PTR [esp],0xc0024008
c00090e9:	e8 7b 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090ee:	c7 04 24 1d 3f 02 c0 	mov    DWORD PTR [esp],0xc0023f1d
c00090f5:	e8 6f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090fa:	58                   	pop    eax
c00090fb:	5a                   	pop    edx
c00090fc:	6a 01                	push   0x1
c00090fe:	53                   	push   ebx
c00090ff:	e8 f4 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c0009104:	c7 04 24 11 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e11
c000910b:	e8 59 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009110:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009117:	e8 f3 08 00 00       	call   c0009a0f <malloc>
c000911c:	89 04 24             	mov    DWORD PTR [esp],eax
c000911f:	89 c6                	mov    esi,eax
c0009121:	e8 5c a2 00 00       	call   c0013382 <CPU::CPU()>
c0009126:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000912c:	59                   	pop    ecx
c000912d:	58                   	pop    eax
c000912e:	56                   	push   esi
c000912f:	53                   	push   ebx
c0009130:	e8 09 51 00 00       	call   c000e23e <Device::addChild(Device*)>
c0009135:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000913b:	8b 10                	mov    edx,DWORD PTR [eax]
c000913d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009141:	6a 00                	push   0x0
c0009143:	6a 00                	push   0x0
c0009145:	50                   	push   eax
c0009146:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009149:	83 c4 14             	add    esp,0x14
c000914c:	68 28 40 02 c0       	push   0xc0024028
c0009151:	e8 13 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009156:	e8 7f 56 00 00       	call   c000e7da <setupFPU()>
c000915b:	83 c4 10             	add    esp,0x10
c000915e:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0009164:	85 c0                	test   eax,eax
c0009166:	74 1f                	je     c0009187 <Computer::open(int, int, void*)+0x177>
c0009168:	83 ec 08             	sub    esp,0x8
c000916b:	50                   	push   eax
c000916c:	53                   	push   ebx
c000916d:	e8 cc 50 00 00       	call   c000e23e <Device::addChild(Device*)>
c0009172:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c0009178:	8b 10                	mov    edx,DWORD PTR [eax]
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	6a 00                	push   0x0
c0009180:	50                   	push   eax
c0009181:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009184:	83 c4 20             	add    esp,0x20
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	68 2e 3f 02 c0       	push   0xc0023f2e
c000918f:	e8 d5 08 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009194:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c000919b:	e8 84 f4 00 00       	call   c0018624 <setupMultitasking(void (*)())>
c00091a0:	83 c4 14             	add    esp,0x14
c00091a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00091a8:	5b                   	pop    ebx
c00091a9:	5e                   	pop    esi
c00091aa:	c3                   	ret    
c00091ab:	90                   	nop

c00091ac <Computer::disableNMI()>:
c00091ac:	6a 00                	push   0x0
c00091ae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00091b2:	e8 41 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c00091b7:	58                   	pop    eax
c00091b8:	5a                   	pop    edx
c00091b9:	c3                   	ret    

c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>:
c00091ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091be:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00091c5:	19 c0                	sbb    eax,eax
c00091c7:	83 e0 80             	and    eax,0xffffff80
c00091ca:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00091ce:	e6 70                	out    0x70,al
c00091d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091d4:	e6 71                	out    0x71,al
c00091d6:	c3                   	ret    
c00091d7:	90                   	nop

c00091d8 <Computer::handleNMI()>:
c00091d8:	56                   	push   esi
c00091d9:	53                   	push   ebx
c00091da:	83 ec 10             	sub    esp,0x10
c00091dd:	e4 92                	in     al,0x92
c00091df:	89 c6                	mov    esi,eax
c00091e1:	e4 61                	in     al,0x61
c00091e3:	68 49 3f 02 c0       	push   0xc0023f49
c00091e8:	88 c3                	mov    bl,al
c00091ea:	e8 10 3b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00091ef:	83 c4 10             	add    esp,0x10
c00091f2:	83 e6 10             	and    esi,0x10
c00091f5:	75 0d                	jne    c0009204 <Computer::handleNMI()+0x2c>
c00091f7:	f6 c3 40             	test   bl,0x40
c00091fa:	75 1d                	jne    c0009219 <Computer::handleNMI()+0x41>
c00091fc:	84 db                	test   bl,bl
c00091fe:	78 2d                	js     c000922d <Computer::handleNMI()+0x55>
c0009200:	58                   	pop    eax
c0009201:	5b                   	pop    ebx
c0009202:	5e                   	pop    esi
c0009203:	c3                   	ret    
c0009204:	83 ec 0c             	sub    esp,0xc
c0009207:	68 5a 3f 02 c0       	push   0xc0023f5a
c000920c:	e8 b6 b7 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	f6 c3 40             	test   bl,0x40
c0009217:	74 e3                	je     c00091fc <Computer::handleNMI()+0x24>
c0009219:	83 ec 0c             	sub    esp,0xc
c000921c:	68 67 3f 02 c0       	push   0xc0023f67
c0009221:	e8 a1 b7 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	84 db                	test   bl,bl
c000922b:	79 d3                	jns    c0009200 <Computer::handleNMI()+0x28>
c000922d:	c7 44 24 10 71 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f71
c0009235:	5a                   	pop    edx
c0009236:	5b                   	pop    ebx
c0009237:	5e                   	pop    esi
c0009238:	e9 8a b7 00 00       	jmp    c00149c7 <Krnl::panic(char const*)>
c000923d:	90                   	nop

c000923e <Computer::setDiskActivityLight(int, bool)>:
c000923e:	56                   	push   esi
c000923f:	53                   	push   ebx
c0009240:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009244:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009249:	77 1b                	ja     c0009266 <Computer::setDiskActivityLight(int, bool)+0x28>
c000924b:	e4 92                	in     al,0x92
c000924d:	bb 40 00 00 00       	mov    ebx,0x40
c0009252:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0009256:	89 da                	mov    edx,ebx
c0009258:	d3 e2                	shl    edx,cl
c000925a:	89 f1                	mov    ecx,esi
c000925c:	f7 d2                	not    edx
c000925e:	d3 e3                	shl    ebx,cl
c0009260:	21 d0                	and    eax,edx
c0009262:	09 d8                	or     eax,ebx
c0009264:	e6 92                	out    0x92,al
c0009266:	5b                   	pop    ebx
c0009267:	5e                   	pop    esi
c0009268:	c3                   	ret    
c0009269:	90                   	nop

c000926a <GDTEntry::setBase(unsigned int)>:
c000926a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000926e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009272:	89 c1                	mov    ecx,eax
c0009274:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009278:	c1 e9 10             	shr    ecx,0x10
c000927b:	c1 e8 18             	shr    eax,0x18
c000927e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009281:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0009284:	c3                   	ret    
c0009285:	90                   	nop

c0009286 <GDTEntry::setLimit(unsigned int)>:
c0009286:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000928a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000928e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009291:	66 89 01             	mov    WORD PTR [ecx],ax
c0009294:	83 e2 f0             	and    edx,0xfffffff0
c0009297:	c1 e8 10             	shr    eax,0x10
c000929a:	83 e0 0f             	and    eax,0xf
c000929d:	09 d0                	or     eax,edx
c000929f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00092a2:	c3                   	ret    
c00092a3:	90                   	nop

c00092a4 <GDT::GDT()>:
c00092a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092b8:	90                   	nop
c00092b9:	c3                   	ret    

c00092ba <GDT::addEntry(GDTEntry)>:
c00092ba:	53                   	push   ebx
c00092bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00092bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00092c3:	8b 02                	mov    eax,DWORD PTR [edx]
c00092c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092c9:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00092cd:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00092d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00092d4:	c1 e0 03             	shl    eax,0x3
c00092d7:	89 0a                	mov    DWORD PTR [edx],ecx
c00092d9:	5b                   	pop    ebx
c00092da:	c3                   	ret    
c00092db:	90                   	nop

c00092dc <GDT::getNumberOfEntries()>:
c00092dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e2:	c3                   	ret    
c00092e3:	90                   	nop

c00092e4 <GDT::flush()>:
c00092e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00092ea:	83 c0 04             	add    eax,0x4
c00092ed:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092f4:	a3 f2 80 02 c0       	mov    ds:0xc00280f2,eax
c00092f9:	66 89 15 f0 80 02 c0 	mov    WORD PTR ds:0xc00280f0,dx
c0009300:	e9 80 70 ff ff       	jmp    c0000385 <loadGDT>
c0009305:	90                   	nop

c0009306 <GDT::setup()>:
c0009306:	55                   	push   ebp
c0009307:	57                   	push   edi
c0009308:	56                   	push   esi
c0009309:	53                   	push   ebx
c000930a:	83 ec 3c             	sub    esp,0x3c
c000930d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009311:	6a 00                	push   0x0
c0009313:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009317:	53                   	push   ebx
c0009318:	e8 4d ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000931d:	6a 00                	push   0x0
c000931f:	53                   	push   ebx
c0009320:	e8 61 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009325:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000932d:	6a 00                	push   0x0
c000932f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009333:	53                   	push   ebx
c0009334:	e8 31 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009339:	68 ff ff ff 00       	push   0xffffff
c000933e:	53                   	push   ebx
c000933f:	e8 42 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009348:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000934d:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009352:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009356:	83 c4 20             	add    esp,0x20
c0009359:	6a 00                	push   0x0
c000935b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000935f:	53                   	push   ebx
c0009360:	e8 05 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009365:	68 ff ff ff 00       	push   0xffffff
c000936a:	53                   	push   ebx
c000936b:	e8 16 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009370:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0009374:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009378:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000937c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009380:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009384:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009389:	0d 00 92 c0 00       	or     eax,0xc09200
c000938e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009392:	89 d8                	mov    eax,ebx
c0009394:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009398:	80 cc 60             	or     ah,0x60
c000939b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000939f:	83 c4 0c             	add    esp,0xc
c00093a2:	89 f8                	mov    eax,edi
c00093a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093a8:	80 cc 60             	or     ah,0x60
c00093ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093af:	89 c7                	mov    edi,eax
c00093b1:	55                   	push   ebp
c00093b2:	e8 03 ff ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093b7:	83 c4 0c             	add    esp,0xc
c00093ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093c2:	55                   	push   ebp
c00093c3:	e8 f2 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093c8:	83 c4 0c             	add    esp,0xc
c00093cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093d3:	55                   	push   ebp
c00093d4:	e8 e1 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093d9:	83 c4 0c             	add    esp,0xc
c00093dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00093e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00093e4:	53                   	push   ebx
c00093e5:	51                   	push   ecx
c00093e6:	55                   	push   ebp
c00093e7:	e8 ce fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093ec:	83 c4 0c             	add    esp,0xc
c00093ef:	57                   	push   edi
c00093f0:	56                   	push   esi
c00093f1:	55                   	push   ebp
c00093f2:	e8 c3 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093fa:	e8 e5 fe ff ff       	call   c00092e4 <GDT::flush()>
c00093ff:	83 c4 4c             	add    esp,0x4c
c0009402:	5b                   	pop    ebx
c0009403:	5e                   	pop    esi
c0009404:	5f                   	pop    edi
c0009405:	5d                   	pop    ebp
c0009406:	c3                   	ret    

c0009407 <idleFunction(void*)>:
c0009407:	53                   	push   ebx
c0009408:	83 ec 08             	sub    esp,0x8
c000940b:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0009410:	48                   	dec    eax
c0009411:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0009416:	75 01                	jne    c0009419 <idleFunction(void*)+0x12>
c0009418:	fb                   	sti    
c0009419:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000941e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009424:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000942b:	74 3c                	je     c0009469 <idleFunction(void*)+0x62>
c000942d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009434:	74 33                	je     c0009469 <idleFunction(void*)+0x62>
c0009436:	31 db                	xor    ebx,ebx
c0009438:	52                   	push   edx
c0009439:	52                   	push   edx
c000943a:	68 e1 00 00 00       	push   0xe1
c000943f:	50                   	push   eax
c0009440:	e8 e5 fa ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0009445:	53                   	push   ebx
c0009446:	83 e0 02             	and    eax,0x2
c0009449:	50                   	push   eax
c000944a:	68 e1 00 00 00       	push   0xe1
c000944f:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0009455:	e8 fc fa ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c000945a:	83 c4 20             	add    esp,0x20
c000945d:	e8 52 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009462:	e8 0f 96 01 00       	call   c0022a76 <idleCommon()>
c0009467:	eb f4                	jmp    c000945d <idleFunction(void*)+0x56>
c0009469:	fb                   	sti    
c000946a:	f4                   	hlt    
c000946b:	e8 06 96 01 00       	call   c0022a76 <idleCommon()>
c0009470:	eb f7                	jmp    c0009469 <idleFunction(void*)+0x62>
c0009472:	66 90                	xchg   ax,ax

c0009474 <IDTEntry::IDTEntry(bool)>:
c0009474:	83 ec 04             	sub    esp,0x4
c0009477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000947b:	88 04 24             	mov    BYTE PTR [esp],al
c000947e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009482:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009494:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009497:	83 e2 f0             	and    edx,0xfffffff0
c000949a:	83 ca 0e             	or     edx,0xe
c000949d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094a7:	83 e2 ef             	and    edx,0xffffffef
c00094aa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094ad:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00094b1:	74 05                	je     c00094b8 <IDTEntry::IDTEntry(bool)+0x44>
c00094b3:	b2 03                	mov    dl,0x3
c00094b5:	eb 05                	jmp    c00094bc <IDTEntry::IDTEntry(bool)+0x48>
c00094b7:	90                   	nop
c00094b8:	b2 00                	mov    dl,0x0
c00094ba:	66 90                	xchg   ax,ax
c00094bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094c0:	83 e2 03             	and    edx,0x3
c00094c3:	88 d1                	mov    cl,dl
c00094c5:	c1 e1 05             	shl    ecx,0x5
c00094c8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094cb:	83 e2 9f             	and    edx,0xffffff9f
c00094ce:	09 ca                	or     edx,ecx
c00094d0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094da:	83 ca 80             	or     edx,0xffffff80
c00094dd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094e0:	90                   	nop
c00094e1:	83 c4 04             	add    esp,0x4
c00094e4:	c3                   	ret    
c00094e5:	90                   	nop

c00094e6 <IDTEntry::setOffset(unsigned int)>:
c00094e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094ee:	66 89 02             	mov    WORD PTR [edx],ax
c00094f1:	c1 e8 10             	shr    eax,0x10
c00094f4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094f8:	c3                   	ret    
c00094f9:	90                   	nop
c00094fa:	66 90                	xchg   ax,ax

c00094fc <IDT::IDT()>:
c00094fc:	90                   	nop
c00094fd:	c3                   	ret    

c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009502:	83 c0 30             	add    eax,0x30
c0009505:	c3                   	ret    

c0009506 <IDT::addEntry(IDTEntry, int)>:
c0009506:	53                   	push   ebx
c0009507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000950b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000950f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009517:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000951a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000951e:	5b                   	pop    ebx
c000951f:	c3                   	ret    

c0009520 <IDT::addEntry(int, void (*)(), bool)>:
c0009520:	53                   	push   ebx
c0009521:	83 ec 10             	sub    esp,0x10
c0009524:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009529:	50                   	push   eax
c000952a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000952e:	53                   	push   ebx
c000952f:	e8 40 ff ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c0009534:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009538:	53                   	push   ebx
c0009539:	e8 a8 ff ff ff       	call   c00094e6 <IDTEntry::setOffset(unsigned int)>
c000953e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009542:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009546:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000954a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000954e:	e8 b3 ff ff ff       	call   c0009506 <IDT::addEntry(IDTEntry, int)>
c0009553:	83 c4 30             	add    esp,0x30
c0009556:	5b                   	pop    ebx
c0009557:	c3                   	ret    

c0009558 <IDT::flush()>:
c0009558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000955c:	66 c7 05 f8 80 02 c0 ff 07 	mov    WORD PTR ds:0xc00280f8,0x7ff
c0009565:	a3 fa 80 02 c0       	mov    ds:0xc00280fa,eax
c000956a:	0f 01 1d f8 80 02 c0 	lidtd  ds:0xc00280f8
c0009571:	c3                   	ret    

c0009572 <IDT::setup()>:
c0009572:	57                   	push   edi
c0009573:	56                   	push   esi
c0009574:	53                   	push   ebx
c0009575:	83 ec 10             	sub    esp,0x10
c0009578:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000957c:	6a 00                	push   0x0
c000957e:	68 a5 03 00 c0       	push   0xc00003a5
c0009583:	6a 00                	push   0x0
c0009585:	53                   	push   ebx
c0009586:	e8 95 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000958b:	6a 00                	push   0x0
c000958d:	68 b5 03 00 c0       	push   0xc00003b5
c0009592:	6a 01                	push   0x1
c0009594:	53                   	push   ebx
c0009595:	e8 86 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000959a:	83 c4 20             	add    esp,0x20
c000959d:	6a 00                	push   0x0
c000959f:	68 bf 03 00 c0       	push   0xc00003bf
c00095a4:	6a 02                	push   0x2
c00095a6:	53                   	push   ebx
c00095a7:	e8 74 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ac:	6a 00                	push   0x0
c00095ae:	68 c9 03 00 c0       	push   0xc00003c9
c00095b3:	6a 03                	push   0x3
c00095b5:	53                   	push   ebx
c00095b6:	e8 65 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095bb:	83 c4 20             	add    esp,0x20
c00095be:	6a 00                	push   0x0
c00095c0:	68 d3 03 00 c0       	push   0xc00003d3
c00095c5:	6a 04                	push   0x4
c00095c7:	53                   	push   ebx
c00095c8:	e8 53 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095cd:	6a 00                	push   0x0
c00095cf:	68 dd 03 00 c0       	push   0xc00003dd
c00095d4:	6a 05                	push   0x5
c00095d6:	53                   	push   ebx
c00095d7:	e8 44 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095dc:	83 c4 20             	add    esp,0x20
c00095df:	6a 00                	push   0x0
c00095e1:	68 e7 03 00 c0       	push   0xc00003e7
c00095e6:	6a 06                	push   0x6
c00095e8:	53                   	push   ebx
c00095e9:	e8 32 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ee:	6a 00                	push   0x0
c00095f0:	68 f1 03 00 c0       	push   0xc00003f1
c00095f5:	6a 07                	push   0x7
c00095f7:	53                   	push   ebx
c00095f8:	e8 23 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095fd:	83 c4 20             	add    esp,0x20
c0009600:	6a 00                	push   0x0
c0009602:	68 fb 03 00 c0       	push   0xc00003fb
c0009607:	6a 08                	push   0x8
c0009609:	53                   	push   ebx
c000960a:	e8 11 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000960f:	6a 00                	push   0x0
c0009611:	68 03 04 00 c0       	push   0xc0000403
c0009616:	6a 09                	push   0x9
c0009618:	53                   	push   ebx
c0009619:	e8 02 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000961e:	83 c4 20             	add    esp,0x20
c0009621:	6a 00                	push   0x0
c0009623:	68 0d 04 00 c0       	push   0xc000040d
c0009628:	6a 0a                	push   0xa
c000962a:	53                   	push   ebx
c000962b:	e8 f0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009630:	6a 00                	push   0x0
c0009632:	68 15 04 00 c0       	push   0xc0000415
c0009637:	6a 0b                	push   0xb
c0009639:	53                   	push   ebx
c000963a:	e8 e1 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000963f:	83 c4 20             	add    esp,0x20
c0009642:	6a 00                	push   0x0
c0009644:	68 1d 04 00 c0       	push   0xc000041d
c0009649:	6a 0c                	push   0xc
c000964b:	53                   	push   ebx
c000964c:	e8 cf fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009651:	6a 00                	push   0x0
c0009653:	68 25 04 00 c0       	push   0xc0000425
c0009658:	6a 0d                	push   0xd
c000965a:	53                   	push   ebx
c000965b:	e8 c0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009660:	83 c4 20             	add    esp,0x20
c0009663:	6a 00                	push   0x0
c0009665:	68 2d 04 00 c0       	push   0xc000042d
c000966a:	6a 0e                	push   0xe
c000966c:	53                   	push   ebx
c000966d:	e8 ae fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009672:	6a 00                	push   0x0
c0009674:	68 35 04 00 c0       	push   0xc0000435
c0009679:	6a 0f                	push   0xf
c000967b:	53                   	push   ebx
c000967c:	e8 9f fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009681:	83 c4 20             	add    esp,0x20
c0009684:	6a 00                	push   0x0
c0009686:	68 3f 04 00 c0       	push   0xc000043f
c000968b:	6a 10                	push   0x10
c000968d:	53                   	push   ebx
c000968e:	e8 8d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009693:	6a 00                	push   0x0
c0009695:	68 49 04 00 c0       	push   0xc0000449
c000969a:	6a 11                	push   0x11
c000969c:	53                   	push   ebx
c000969d:	e8 7e fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096a2:	83 c4 20             	add    esp,0x20
c00096a5:	6a 00                	push   0x0
c00096a7:	68 53 04 00 c0       	push   0xc0000453
c00096ac:	6a 12                	push   0x12
c00096ae:	53                   	push   ebx
c00096af:	e8 6c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096b4:	6a 01                	push   0x1
c00096b6:	68 ed 04 00 c0       	push   0xc00004ed
c00096bb:	6a 60                	push   0x60
c00096bd:	53                   	push   ebx
c00096be:	e8 5d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096c3:	83 c4 20             	add    esp,0x20
c00096c6:	6a 00                	push   0x0
c00096c8:	68 f4 04 00 c0       	push   0xc00004f4
c00096cd:	6a 20                	push   0x20
c00096cf:	53                   	push   ebx
c00096d0:	e8 4b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096d5:	6a 00                	push   0x0
c00096d7:	68 df 04 00 c0       	push   0xc00004df
c00096dc:	6a 21                	push   0x21
c00096de:	53                   	push   ebx
c00096df:	e8 3c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096e4:	83 c4 20             	add    esp,0x20
c00096e7:	6a 00                	push   0x0
c00096e9:	68 e6 04 00 c0       	push   0xc00004e6
c00096ee:	6a 22                	push   0x22
c00096f0:	53                   	push   ebx
c00096f1:	e8 2a fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096f6:	6a 00                	push   0x0
c00096f8:	68 5d 04 00 c0       	push   0xc000045d
c00096fd:	6a 23                	push   0x23
c00096ff:	53                   	push   ebx
c0009700:	e8 1b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009705:	83 c4 20             	add    esp,0x20
c0009708:	6a 00                	push   0x0
c000970a:	68 67 04 00 c0       	push   0xc0000467
c000970f:	6a 24                	push   0x24
c0009711:	53                   	push   ebx
c0009712:	e8 09 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009717:	6a 00                	push   0x0
c0009719:	68 71 04 00 c0       	push   0xc0000471
c000971e:	6a 25                	push   0x25
c0009720:	53                   	push   ebx
c0009721:	e8 fa fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009726:	83 c4 20             	add    esp,0x20
c0009729:	6a 00                	push   0x0
c000972b:	68 7b 04 00 c0       	push   0xc000047b
c0009730:	6a 26                	push   0x26
c0009732:	53                   	push   ebx
c0009733:	e8 e8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009738:	6a 00                	push   0x0
c000973a:	68 85 04 00 c0       	push   0xc0000485
c000973f:	6a 27                	push   0x27
c0009741:	53                   	push   ebx
c0009742:	e8 d9 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009747:	83 c4 20             	add    esp,0x20
c000974a:	6a 00                	push   0x0
c000974c:	68 8f 04 00 c0       	push   0xc000048f
c0009751:	6a 28                	push   0x28
c0009753:	53                   	push   ebx
c0009754:	e8 c7 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009759:	6a 00                	push   0x0
c000975b:	68 99 04 00 c0       	push   0xc0000499
c0009760:	6a 29                	push   0x29
c0009762:	53                   	push   ebx
c0009763:	e8 b8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009768:	83 c4 20             	add    esp,0x20
c000976b:	6a 00                	push   0x0
c000976d:	68 a3 04 00 c0       	push   0xc00004a3
c0009772:	6a 2a                	push   0x2a
c0009774:	53                   	push   ebx
c0009775:	e8 a6 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000977a:	6a 00                	push   0x0
c000977c:	68 ad 04 00 c0       	push   0xc00004ad
c0009781:	6a 2b                	push   0x2b
c0009783:	53                   	push   ebx
c0009784:	e8 97 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009789:	83 c4 20             	add    esp,0x20
c000978c:	6a 00                	push   0x0
c000978e:	68 b7 04 00 c0       	push   0xc00004b7
c0009793:	6a 2c                	push   0x2c
c0009795:	53                   	push   ebx
c0009796:	e8 85 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000979b:	6a 00                	push   0x0
c000979d:	68 c1 04 00 c0       	push   0xc00004c1
c00097a2:	6a 2d                	push   0x2d
c00097a4:	53                   	push   ebx
c00097a5:	e8 76 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097aa:	83 c4 20             	add    esp,0x20
c00097ad:	6a 00                	push   0x0
c00097af:	68 cb 04 00 c0       	push   0xc00004cb
c00097b4:	6a 2e                	push   0x2e
c00097b6:	53                   	push   ebx
c00097b7:	e8 64 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097bc:	6a 00                	push   0x0
c00097be:	68 d5 04 00 c0       	push   0xc00004d5
c00097c3:	6a 2f                	push   0x2f
c00097c5:	53                   	push   ebx
c00097c6:	e8 55 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097cb:	83 c4 20             	add    esp,0x20
c00097ce:	6a 00                	push   0x0
c00097d0:	68 2b 05 00 c0       	push   0xc000052b
c00097d5:	6a 30                	push   0x30
c00097d7:	53                   	push   ebx
c00097d8:	e8 43 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097dd:	6a 00                	push   0x0
c00097df:	68 35 05 00 c0       	push   0xc0000535
c00097e4:	6a 31                	push   0x31
c00097e6:	53                   	push   ebx
c00097e7:	e8 34 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097ec:	83 c4 20             	add    esp,0x20
c00097ef:	6a 00                	push   0x0
c00097f1:	68 3f 05 00 c0       	push   0xc000053f
c00097f6:	6a 32                	push   0x32
c00097f8:	53                   	push   ebx
c00097f9:	e8 22 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097fe:	6a 00                	push   0x0
c0009800:	68 49 05 00 c0       	push   0xc0000549
c0009805:	6a 33                	push   0x33
c0009807:	53                   	push   ebx
c0009808:	e8 13 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000980d:	83 c4 20             	add    esp,0x20
c0009810:	6a 00                	push   0x0
c0009812:	68 53 05 00 c0       	push   0xc0000553
c0009817:	6a 34                	push   0x34
c0009819:	53                   	push   ebx
c000981a:	e8 01 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000981f:	6a 00                	push   0x0
c0009821:	68 5d 05 00 c0       	push   0xc000055d
c0009826:	6a 35                	push   0x35
c0009828:	53                   	push   ebx
c0009829:	e8 f2 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000982e:	83 c4 20             	add    esp,0x20
c0009831:	6a 00                	push   0x0
c0009833:	68 67 05 00 c0       	push   0xc0000567
c0009838:	6a 36                	push   0x36
c000983a:	53                   	push   ebx
c000983b:	e8 e0 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009840:	6a 00                	push   0x0
c0009842:	68 71 05 00 c0       	push   0xc0000571
c0009847:	6a 37                	push   0x37
c0009849:	53                   	push   ebx
c000984a:	e8 d1 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000984f:	83 c4 1c             	add    esp,0x1c
c0009852:	6a 03                	push   0x3
c0009854:	6a 02                	push   0x2
c0009856:	ff 35 10 82 02 c0    	push   DWORD PTR ds:0xc0028210
c000985c:	e8 21 29 00 00       	call   c000c182 <VAS::allocatePages(int, int)>
c0009861:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009868:	89 c6                	mov    esi,eax
c000986a:	e8 a0 01 00 00       	call   c0009a0f <malloc>
c000986f:	81 c6 00 20 00 00    	add    esi,0x2000
c0009875:	89 04 24             	mov    DWORD PTR [esp],eax
c0009878:	89 c7                	mov    edi,eax
c000987a:	e8 9d 1a 00 00       	call   c000b31c <TSS::TSS()>
c000987f:	83 c4 0c             	add    esp,0xc
c0009882:	68 fb 03 00 c0       	push   0xc00003fb
c0009887:	56                   	push   esi
c0009888:	57                   	push   edi
c0009889:	e8 d2 1a 00 00       	call   c000b360 <TSS::setup(unsigned long, unsigned long)>
c000988e:	89 c6                	mov    esi,eax
c0009890:	58                   	pop    eax
c0009891:	5a                   	pop    edx
c0009892:	6a 00                	push   0x0
c0009894:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009898:	50                   	push   eax
c0009899:	e8 d6 fb ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c000989e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00098a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00098ae:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00098b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098b8:	80 ce 05             	or     dh,0x5
c00098bb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00098be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00098c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098cc:	e8 87 fc ff ff       	call   c0009558 <IDT::flush()>
c00098d1:	83 c4 20             	add    esp,0x20
c00098d4:	5b                   	pop    ebx
c00098d5:	5e                   	pop    esi
c00098d6:	5f                   	pop    edi
c00098d7:	c3                   	ret    

c00098d8 <sbrk>:
c00098d8:	55                   	push   ebp
c00098d9:	57                   	push   edi
c00098da:	56                   	push   esi
c00098db:	53                   	push   ebx
c00098dc:	83 ec 24             	sub    esp,0x24
c00098df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098e3:	53                   	push   ebx
c00098e4:	68 78 40 02 c0       	push   0xc0024078
c00098e9:	e8 11 34 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	85 db                	test   ebx,ebx
c00098f3:	74 5f                	je     c0009954 <sbrk+0x7c>
c00098f5:	78 64                	js     c000995b <sbrk+0x83>
c00098f7:	a1 50 73 02 c0       	mov    eax,ds:0xc0027350
c00098fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009900:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009906:	89 dd                	mov    ebp,ebx
c0009908:	78 69                	js     c0009973 <sbrk+0x9b>
c000990a:	c1 fd 0c             	sar    ebp,0xc
c000990d:	bb 00 00 00 00       	mov    ebx,0x0
c0009912:	8b 35 10 82 02 c0    	mov    esi,DWORD PTR ds:0xc0028210
c0009918:	8b 3d 50 73 02 c0    	mov    edi,DWORD PTR ds:0xc0027350
c000991e:	e8 a3 07 00 00       	call   c000a0c6 <Phys::allocatePage()>
c0009923:	68 01 04 00 00       	push   0x401
c0009928:	57                   	push   edi
c0009929:	50                   	push   eax
c000992a:	56                   	push   esi
c000992b:	e8 50 27 00 00       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009930:	81 05 50 73 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027350,0x1000
c000993a:	43                   	inc    ebx
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	39 dd                	cmp    ebp,ebx
c0009940:	75 d0                	jne    c0009912 <sbrk+0x3a>
c0009942:	0f 20 d8             	mov    eax,cr3
c0009945:	0f 22 d8             	mov    cr3,eax
c0009948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994c:	83 c4 1c             	add    esp,0x1c
c000994f:	5b                   	pop    ebx
c0009950:	5e                   	pop    esi
c0009951:	5f                   	pop    edi
c0009952:	5d                   	pop    ebp
c0009953:	c3                   	ret    
c0009954:	a1 50 73 02 c0       	mov    eax,ds:0xc0027350
c0009959:	eb f1                	jmp    c000994c <sbrk+0x74>
c000995b:	83 ec 08             	sub    esp,0x8
c000995e:	53                   	push   ebx
c000995f:	68 a4 40 02 c0       	push   0xc00240a4
c0009964:	e8 96 33 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009969:	83 c4 10             	add    esp,0x10
c000996c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009971:	eb d9                	jmp    c000994c <sbrk+0x74>
c0009973:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009979:	eb 8f                	jmp    c000990a <sbrk+0x32>

c000997b <mmap>:
c000997b:	83 ec 18             	sub    esp,0x18
c000997e:	68 96 40 02 c0       	push   0xc0024096
c0009983:	e8 3f b0 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c0009988:	b8 00 00 00 00       	mov    eax,0x0
c000998d:	83 c4 1c             	add    esp,0x1c
c0009990:	c3                   	ret    

c0009991 <munmap>:
c0009991:	83 ec 18             	sub    esp,0x18
c0009994:	68 9b 40 02 c0       	push   0xc002409b
c0009999:	e8 29 b0 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000999e:	b8 00 00 00 00       	mov    eax,0x0
c00099a3:	83 c4 1c             	add    esp,0x1c
c00099a6:	c3                   	ret    

c00099a7 <liballoc_lock()>:
c00099a7:	fa                   	cli    
c00099a8:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c00099ae:	b8 00 00 00 00       	mov    eax,0x0
c00099b3:	c3                   	ret    

c00099b4 <liballoc_unlock()>:
c00099b4:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00099b9:	48                   	dec    eax
c00099ba:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c00099bf:	75 01                	jne    c00099c2 <liballoc_unlock()+0xe>
c00099c1:	fb                   	sti    
c00099c2:	b8 00 00 00 00       	mov    eax,0x0
c00099c7:	c3                   	ret    

c00099c8 <liballoc_alloc(int)>:
c00099c8:	83 ec 10             	sub    esp,0x10
c00099cb:	6a 01                	push   0x1
c00099cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099d1:	ff 35 10 82 02 c0    	push   DWORD PTR ds:0xc0028210
c00099d7:	e8 a6 27 00 00       	call   c000c182 <VAS::allocatePages(int, int)>
c00099dc:	83 c4 1c             	add    esp,0x1c
c00099df:	c3                   	ret    

c00099e0 <liballoc_free(void*, int)>:
c00099e0:	83 ec 14             	sub    esp,0x14
c00099e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099e7:	ff 35 10 82 02 c0    	push   DWORD PTR ds:0xc0028210
c00099ed:	e8 3a 24 00 00       	call   c000be2c <VAS::freeAllocatedPages(unsigned long)>
c00099f2:	b8 00 00 00 00       	mov    eax,0x0
c00099f7:	83 c4 1c             	add    esp,0x1c
c00099fa:	c3                   	ret    

c00099fb <realloc>:
c00099fb:	83 ec 14             	sub    esp,0x14
c00099fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a06:	e8 55 7b ff ff       	call   c0001560 <dlrealloc>
c0009a0b:	83 c4 1c             	add    esp,0x1c
c0009a0e:	c3                   	ret    

c0009a0f <malloc>:
c0009a0f:	83 ec 18             	sub    esp,0x18
c0009a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a16:	e8 08 76 ff ff       	call   c0001023 <dlmalloc>
c0009a1b:	83 c4 1c             	add    esp,0x1c
c0009a1e:	c3                   	ret    

c0009a1f <free>:
c0009a1f:	83 ec 18             	sub    esp,0x18
c0009a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a26:	e8 9d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a2b:	83 c4 1c             	add    esp,0x1c
c0009a2e:	c3                   	ret    

c0009a2f <rfree>:
c0009a2f:	83 ec 18             	sub    esp,0x18
c0009a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a36:	e8 8d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a3b:	83 c4 1c             	add    esp,0x1c
c0009a3e:	c3                   	ret    

c0009a3f <calloc>:
c0009a3f:	56                   	push   esi
c0009a40:	53                   	push   ebx
c0009a41:	83 ec 10             	sub    esp,0x10
c0009a44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a48:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a4d:	53                   	push   ebx
c0009a4e:	e8 bc ff ff ff       	call   c0009a0f <malloc>
c0009a53:	89 c6                	mov    esi,eax
c0009a55:	83 c4 0c             	add    esp,0xc
c0009a58:	53                   	push   ebx
c0009a59:	6a 00                	push   0x0
c0009a5b:	50                   	push   eax
c0009a5c:	e8 23 6c ff ff       	call   c0000684 <memset>
c0009a61:	89 f0                	mov    eax,esi
c0009a63:	83 c4 14             	add    esp,0x14
c0009a66:	5b                   	pop    ebx
c0009a67:	5e                   	pop    esi
c0009a68:	c3                   	ret    

c0009a69 <Krnl::setBootMessage(char const*)>:
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a72:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a79:	68 9e 00 00 00       	push   0x9e
c0009a7e:	6a 00                	push   0x0
c0009a80:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a84:	56                   	push   esi
c0009a85:	e8 fa 6b ff ff       	call   c0000684 <memset>
c0009a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a8d:	e8 0e 6c ff ff       	call   c00006a0 <strlen>
c0009a92:	ba 50 00 00 00       	mov    edx,0x50
c0009a97:	83 c4 10             	add    esp,0x10
c0009a9a:	29 c2                	sub    edx,eax
c0009a9c:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009aa0:	d1 ea                	shr    edx,1
c0009aa2:	84 c0                	test   al,al
c0009aa4:	74 19                	je     c0009abf <Krnl::setBootMessage(char const*)+0x56>
c0009aa6:	01 d2                	add    edx,edx
c0009aa8:	43                   	inc    ebx
c0009aa9:	01 f2                	add    edx,esi
c0009aab:	80 cc 0f             	or     ah,0xf
c0009aae:	83 c2 02             	add    edx,0x2
c0009ab1:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009ab5:	43                   	inc    ebx
c0009ab6:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009abb:	84 c0                	test   al,al
c0009abd:	75 ec                	jne    c0009aab <Krnl::setBootMessage(char const*)+0x42>
c0009abf:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009ac4:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ac9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009acb:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ad1:	5b                   	pop    ebx
c0009ad2:	5e                   	pop    esi
c0009ad3:	5f                   	pop    edi
c0009ad4:	c3                   	ret    

c0009ad5 <kernel_main>:
c0009ad5:	57                   	push   edi
c0009ad6:	56                   	push   esi
c0009ad7:	53                   	push   ebx
c0009ad8:	83 ec 20             	sub    esp,0x20
c0009adb:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009ae0:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0009ae5:	f6 c4 08             	test   ah,0x8
c0009ae8:	0f 85 7a 03 00 00    	jne    c0009e68 <kernel_main+0x393>
c0009aee:	31 f6                	xor    esi,esi
c0009af0:	bf f9 03 00 00       	mov    edi,0x3f9
c0009af5:	89 f0                	mov    eax,esi
c0009af7:	89 fa                	mov    edx,edi
c0009af9:	ee                   	out    dx,al
c0009afa:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aff:	b0 80                	mov    al,0x80
c0009b01:	89 da                	mov    edx,ebx
c0009b03:	ee                   	out    dx,al
c0009b04:	b1 03                	mov    cl,0x3
c0009b06:	ba f8 03 00 00       	mov    edx,0x3f8
c0009b0b:	88 c8                	mov    al,cl
c0009b0d:	ee                   	out    dx,al
c0009b0e:	89 f0                	mov    eax,esi
c0009b10:	89 fa                	mov    edx,edi
c0009b12:	ee                   	out    dx,al
c0009b13:	88 c8                	mov    al,cl
c0009b15:	89 da                	mov    edx,ebx
c0009b17:	ee                   	out    dx,al
c0009b18:	b0 c7                	mov    al,0xc7
c0009b1a:	ba fa 03 00 00       	mov    edx,0x3fa
c0009b1f:	ee                   	out    dx,al
c0009b20:	b0 0b                	mov    al,0xb
c0009b22:	ba fc 03 00 00       	mov    edx,0x3fc
c0009b27:	ee                   	out    dx,al
c0009b28:	83 ec 0c             	sub    esp,0xc
c0009b2b:	68 d4 40 02 c0       	push   0xc00240d4
c0009b30:	e8 ca 31 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009b35:	83 c4 10             	add    esp,0x10
c0009b38:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0009b3f:	0f 85 eb 02 00 00    	jne    c0009e30 <kernel_main+0x35b>
c0009b45:	e8 d2 0c 00 00       	call   c000a81c <installVgaTextImplementation()>
c0009b4a:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0009b51:	0f 85 94 02 00 00    	jne    c0009deb <kernel_main+0x316>
c0009b57:	0f b6 05 60 73 02 c0 	movzx  eax,BYTE PTR ds:0xc0027360
c0009b5e:	84 c0                	test   al,al
c0009b60:	74 7b                	je     c0009bdd <kernel_main+0x108>
c0009b62:	31 db                	xor    ebx,ebx
c0009b64:	bf 0a 00 00 00       	mov    edi,0xa
c0009b69:	be 05 00 00 00       	mov    esi,0x5
c0009b6e:	31 c9                	xor    ecx,ecx
c0009b70:	eb 2a                	jmp    c0009b9c <kernel_main+0xc7>
c0009b72:	3c 0d                	cmp    al,0xd
c0009b74:	74 1a                	je     c0009b90 <kernel_main+0xbb>
c0009b76:	3c 0a                	cmp    al,0xa
c0009b78:	74 40                	je     c0009bba <kernel_main+0xe5>
c0009b7a:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b7d:	80 cc 0e             	or     ah,0xe
c0009b80:	c1 e2 04             	shl    edx,0x4
c0009b83:	01 ca                	add    edx,ecx
c0009b85:	41                   	inc    ecx
c0009b86:	01 fa                	add    edx,edi
c0009b88:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b90:	43                   	inc    ebx
c0009b91:	0f b6 83 60 73 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8ca0]
c0009b98:	84 c0                	test   al,al
c0009b9a:	74 32                	je     c0009bce <kernel_main+0xf9>
c0009b9c:	80 b9 96 73 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8c6a],0xdb
c0009ba3:	75 cd                	jne    c0009b72 <kernel_main+0x9d>
c0009ba5:	0f b6 91 95 73 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8c6b]
c0009bac:	83 e2 fe             	and    edx,0xfffffffe
c0009baf:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009bb5:	75 bb                	jne    c0009b72 <kernel_main+0x9d>
c0009bb7:	47                   	inc    edi
c0009bb8:	eb b8                	jmp    c0009b72 <kernel_main+0x9d>
c0009bba:	43                   	inc    ebx
c0009bbb:	46                   	inc    esi
c0009bbc:	31 c9                	xor    ecx,ecx
c0009bbe:	0f b6 83 60 73 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8ca0]
c0009bc5:	bf 0a 00 00 00       	mov    edi,0xa
c0009bca:	84 c0                	test   al,al
c0009bcc:	75 ce                	jne    c0009b9c <kernel_main+0xc7>
c0009bce:	8b 15 00 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028100
c0009bd4:	80 e6 08             	and    dh,0x8
c0009bd7:	0f 85 bf 00 00 00    	jne    c0009c9c <kernel_main+0x1c7>
c0009bdd:	83 ec 0c             	sub    esp,0xc
c0009be0:	68 70 41 02 c0       	push   0xc0024170
c0009be5:	e8 7f fe ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009bea:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009bef:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bfc:	e8 44 06 00 00       	call   c000a245 <Phys::physicalMemorySetup(unsigned int)>
c0009c01:	83 c4 10             	add    esp,0x10
c0009c04:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0009c0b:	0f 85 a2 01 00 00    	jne    c0009db3 <kernel_main+0x2de>
c0009c11:	e8 82 1f 00 00       	call   c000bb98 <Virt::virtualMemorySetup()>
c0009c16:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0009c1d:	0f 85 58 01 00 00    	jne    c0009d7b <kernel_main+0x2a6>
c0009c23:	83 ec 0c             	sub    esp,0xc
c0009c26:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009c2a:	56                   	push   esi
c0009c2b:	e8 24 20 00 00       	call   c000bc54 <VAS::VAS()>
c0009c30:	83 c4 10             	add    esp,0x10
c0009c33:	89 35 10 82 02 c0    	mov    DWORD PTR ds:0xc0028210,esi
c0009c39:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0009c40:	0f 85 fd 00 00 00    	jne    c0009d43 <kernel_main+0x26e>
c0009c46:	e8 d5 63 ff ff       	call   c0000020 <callGlobalConstructors>
c0009c4b:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0009c52:	0f 85 b3 00 00 00    	jne    c0009d0b <kernel_main+0x236>
c0009c58:	83 ec 0c             	sub    esp,0xc
c0009c5b:	68 ec 01 00 00       	push   0x1ec
c0009c60:	e8 aa fd ff ff       	call   c0009a0f <malloc>
c0009c65:	89 c3                	mov    ebx,eax
c0009c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c6a:	e8 51 ef ff ff       	call   c0008bc0 <Computer::Computer()>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	89 1d e8 80 02 c0    	mov    DWORD PTR ds:0xc00280e8,ebx
c0009c78:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0009c7f:	75 53                	jne    c0009cd4 <kernel_main+0x1ff>
c0009c81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c83:	6a 00                	push   0x0
c0009c85:	6a 00                	push   0x0
c0009c87:	6a 00                	push   0x0
c0009c89:	53                   	push   ebx
c0009c8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c90:	e8 6f 22 00 00       	call   c000bf04 <VAS::~VAS()>
c0009c95:	83 c4 30             	add    esp,0x30
c0009c98:	5b                   	pop    ebx
c0009c99:	5e                   	pop    esi
c0009c9a:	5f                   	pop    edi
c0009c9b:	c3                   	ret    
c0009c9c:	83 ec 0c             	sub    esp,0xc
c0009c9f:	68 1f 41 02 c0       	push   0xc002411f
c0009ca4:	e8 c0 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ca9:	83 c4 10             	add    esp,0x10
c0009cac:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0009cb3:	0f 85 24 ff ff ff    	jne    c0009bdd <kernel_main+0x108>
c0009cb9:	eb 04                	jmp    c0009cbf <kernel_main+0x1ea>
c0009cbb:	3c 1c                	cmp    al,0x1c
c0009cbd:	74 06                	je     c0009cc5 <kernel_main+0x1f0>
c0009cbf:	e4 60                	in     al,0x60
c0009cc1:	3c 5a                	cmp    al,0x5a
c0009cc3:	75 f6                	jne    c0009cbb <kernel_main+0x1e6>
c0009cc5:	e4 60                	in     al,0x60
c0009cc7:	3c 5a                	cmp    al,0x5a
c0009cc9:	74 fa                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccb:	3c 1c                	cmp    al,0x1c
c0009ccd:	74 f6                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccf:	e9 09 ff ff ff       	jmp    c0009bdd <kernel_main+0x108>
c0009cd4:	83 ec 0c             	sub    esp,0xc
c0009cd7:	68 5e 41 02 c0       	push   0xc002415e
c0009cdc:	e8 88 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0009ceb:	74 0c                	je     c0009cf9 <kernel_main+0x224>
c0009ced:	8b 1d e8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e8
c0009cf3:	eb 8c                	jmp    c0009c81 <kernel_main+0x1ac>
c0009cf5:	3c 1c                	cmp    al,0x1c
c0009cf7:	74 06                	je     c0009cff <kernel_main+0x22a>
c0009cf9:	e4 60                	in     al,0x60
c0009cfb:	3c 5a                	cmp    al,0x5a
c0009cfd:	75 f6                	jne    c0009cf5 <kernel_main+0x220>
c0009cff:	e4 60                	in     al,0x60
c0009d01:	3c 5a                	cmp    al,0x5a
c0009d03:	74 fa                	je     c0009cff <kernel_main+0x22a>
c0009d05:	3c 1c                	cmp    al,0x1c
c0009d07:	74 f6                	je     c0009cff <kernel_main+0x22a>
c0009d09:	eb e2                	jmp    c0009ced <kernel_main+0x218>
c0009d0b:	83 ec 0c             	sub    esp,0xc
c0009d0e:	68 4b 41 02 c0       	push   0xc002414b
c0009d13:	e8 51 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d18:	83 c4 10             	add    esp,0x10
c0009d1b:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0009d22:	0f 85 30 ff ff ff    	jne    c0009c58 <kernel_main+0x183>
c0009d28:	eb 04                	jmp    c0009d2e <kernel_main+0x259>
c0009d2a:	3c 1c                	cmp    al,0x1c
c0009d2c:	74 06                	je     c0009d34 <kernel_main+0x25f>
c0009d2e:	e4 60                	in     al,0x60
c0009d30:	3c 5a                	cmp    al,0x5a
c0009d32:	75 f6                	jne    c0009d2a <kernel_main+0x255>
c0009d34:	e4 60                	in     al,0x60
c0009d36:	3c 5a                	cmp    al,0x5a
c0009d38:	74 fa                	je     c0009d34 <kernel_main+0x25f>
c0009d3a:	3c 1c                	cmp    al,0x1c
c0009d3c:	74 f6                	je     c0009d34 <kernel_main+0x25f>
c0009d3e:	e9 15 ff ff ff       	jmp    c0009c58 <kernel_main+0x183>
c0009d43:	83 ec 0c             	sub    esp,0xc
c0009d46:	68 41 41 02 c0       	push   0xc0024141
c0009d4b:	e8 19 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d50:	83 c4 10             	add    esp,0x10
c0009d53:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0009d5a:	0f 85 e6 fe ff ff    	jne    c0009c46 <kernel_main+0x171>
c0009d60:	eb 04                	jmp    c0009d66 <kernel_main+0x291>
c0009d62:	3c 1c                	cmp    al,0x1c
c0009d64:	74 06                	je     c0009d6c <kernel_main+0x297>
c0009d66:	e4 60                	in     al,0x60
c0009d68:	3c 5a                	cmp    al,0x5a
c0009d6a:	75 f6                	jne    c0009d62 <kernel_main+0x28d>
c0009d6c:	e4 60                	in     al,0x60
c0009d6e:	3c 5a                	cmp    al,0x5a
c0009d70:	74 fa                	je     c0009d6c <kernel_main+0x297>
c0009d72:	3c 1c                	cmp    al,0x1c
c0009d74:	74 f6                	je     c0009d6c <kernel_main+0x297>
c0009d76:	e9 cb fe ff ff       	jmp    c0009c46 <kernel_main+0x171>
c0009d7b:	83 ec 0c             	sub    esp,0xc
c0009d7e:	68 36 41 02 c0       	push   0xc0024136
c0009d83:	e8 e1 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d88:	83 c4 10             	add    esp,0x10
c0009d8b:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0009d92:	0f 85 8b fe ff ff    	jne    c0009c23 <kernel_main+0x14e>
c0009d98:	eb 04                	jmp    c0009d9e <kernel_main+0x2c9>
c0009d9a:	3c 1c                	cmp    al,0x1c
c0009d9c:	74 06                	je     c0009da4 <kernel_main+0x2cf>
c0009d9e:	e4 60                	in     al,0x60
c0009da0:	3c 5a                	cmp    al,0x5a
c0009da2:	75 f6                	jne    c0009d9a <kernel_main+0x2c5>
c0009da4:	e4 60                	in     al,0x60
c0009da6:	3c 5a                	cmp    al,0x5a
c0009da8:	74 fa                	je     c0009da4 <kernel_main+0x2cf>
c0009daa:	3c 1c                	cmp    al,0x1c
c0009dac:	74 f6                	je     c0009da4 <kernel_main+0x2cf>
c0009dae:	e9 70 fe ff ff       	jmp    c0009c23 <kernel_main+0x14e>
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	68 2b 41 02 c0       	push   0xc002412b
c0009dbb:	e8 a9 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0009dca:	0f 85 41 fe ff ff    	jne    c0009c11 <kernel_main+0x13c>
c0009dd0:	eb 04                	jmp    c0009dd6 <kernel_main+0x301>
c0009dd2:	3c 1c                	cmp    al,0x1c
c0009dd4:	74 06                	je     c0009ddc <kernel_main+0x307>
c0009dd6:	e4 60                	in     al,0x60
c0009dd8:	3c 5a                	cmp    al,0x5a
c0009dda:	75 f6                	jne    c0009dd2 <kernel_main+0x2fd>
c0009ddc:	e4 60                	in     al,0x60
c0009dde:	3c 5a                	cmp    al,0x5a
c0009de0:	74 fa                	je     c0009ddc <kernel_main+0x307>
c0009de2:	3c 1c                	cmp    al,0x1c
c0009de4:	74 f6                	je     c0009ddc <kernel_main+0x307>
c0009de6:	e9 26 fe ff ff       	jmp    c0009c11 <kernel_main+0x13c>
c0009deb:	83 ec 0c             	sub    esp,0xc
c0009dee:	68 0d 41 02 c0       	push   0xc002410d
c0009df3:	e8 71 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009df8:	8b 15 00 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028100
c0009dfe:	83 c4 10             	add    esp,0x10
c0009e01:	f6 c2 80             	test   dl,0x80
c0009e04:	74 18                	je     c0009e1e <kernel_main+0x349>
c0009e06:	0f b6 05 60 73 02 c0 	movzx  eax,BYTE PTR ds:0xc0027360
c0009e0d:	84 c0                	test   al,al
c0009e0f:	0f 85 4d fd ff ff    	jne    c0009b62 <kernel_main+0x8d>
c0009e15:	e9 ba fd ff ff       	jmp    c0009bd4 <kernel_main+0xff>
c0009e1a:	3c 1c                	cmp    al,0x1c
c0009e1c:	74 06                	je     c0009e24 <kernel_main+0x34f>
c0009e1e:	e4 60                	in     al,0x60
c0009e20:	3c 5a                	cmp    al,0x5a
c0009e22:	75 f6                	jne    c0009e1a <kernel_main+0x345>
c0009e24:	e4 60                	in     al,0x60
c0009e26:	3c 5a                	cmp    al,0x5a
c0009e28:	74 fa                	je     c0009e24 <kernel_main+0x34f>
c0009e2a:	3c 1c                	cmp    al,0x1c
c0009e2c:	74 f6                	je     c0009e24 <kernel_main+0x34f>
c0009e2e:	eb d6                	jmp    c0009e06 <kernel_main+0x331>
c0009e30:	83 ec 0c             	sub    esp,0xc
c0009e33:	68 fe 40 02 c0       	push   0xc00240fe
c0009e38:	e8 2c fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0009e47:	0f 85 f8 fc ff ff    	jne    c0009b45 <kernel_main+0x70>
c0009e4d:	eb 04                	jmp    c0009e53 <kernel_main+0x37e>
c0009e4f:	3c 1c                	cmp    al,0x1c
c0009e51:	74 06                	je     c0009e59 <kernel_main+0x384>
c0009e53:	e4 60                	in     al,0x60
c0009e55:	3c 5a                	cmp    al,0x5a
c0009e57:	75 f6                	jne    c0009e4f <kernel_main+0x37a>
c0009e59:	e4 60                	in     al,0x60
c0009e5b:	3c 5a                	cmp    al,0x5a
c0009e5d:	74 fa                	je     c0009e59 <kernel_main+0x384>
c0009e5f:	3c 1c                	cmp    al,0x1c
c0009e61:	74 f6                	je     c0009e59 <kernel_main+0x384>
c0009e63:	e9 dd fc ff ff       	jmp    c0009b45 <kernel_main+0x70>
c0009e68:	83 ec 0c             	sub    esp,0xc
c0009e6b:	68 eb 40 02 c0       	push   0xc00240eb
c0009e70:	e8 f4 fb ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e75:	83 c4 10             	add    esp,0x10
c0009e78:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0009e7f:	0f 85 69 fc ff ff    	jne    c0009aee <kernel_main+0x19>
c0009e85:	eb 04                	jmp    c0009e8b <kernel_main+0x3b6>
c0009e87:	3c 1c                	cmp    al,0x1c
c0009e89:	74 06                	je     c0009e91 <kernel_main+0x3bc>
c0009e8b:	e4 60                	in     al,0x60
c0009e8d:	3c 5a                	cmp    al,0x5a
c0009e8f:	75 f6                	jne    c0009e87 <kernel_main+0x3b2>
c0009e91:	e4 60                	in     al,0x60
c0009e93:	3c 5a                	cmp    al,0x5a
c0009e95:	74 fa                	je     c0009e91 <kernel_main+0x3bc>
c0009e97:	3c 1c                	cmp    al,0x1c
c0009e99:	74 f6                	je     c0009e91 <kernel_main+0x3bc>
c0009e9b:	e9 4e fc ff ff       	jmp    c0009aee <kernel_main+0x19>

c0009ea0 <Phys::allocateDMA(unsigned long)>:
c0009ea0:	55                   	push   ebp
c0009ea1:	31 ed                	xor    ebp,ebp
c0009ea3:	57                   	push   edi
c0009ea4:	56                   	push   esi
c0009ea5:	53                   	push   ebx
c0009ea6:	31 db                	xor    ebx,ebx
c0009ea8:	83 ec 28             	sub    esp,0x28
c0009eab:	68 8f 41 02 c0       	push   0xc002418f
c0009eb0:	e8 4a 2e 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009eb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009ec2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009eca:	c1 ef 0c             	shr    edi,0xc
c0009ecd:	31 c0                	xor    eax,eax
c0009ecf:	eb 19                	jmp    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009ed1:	85 c0                	test   eax,eax
c0009ed3:	75 06                	jne    c0009edb <Phys::allocateDMA(unsigned long)+0x3b>
c0009ed5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ed9:	89 dd                	mov    ebp,ebx
c0009edb:	8d 70 01             	lea    esi,[eax+0x1]
c0009ede:	39 f7                	cmp    edi,esi
c0009ee0:	74 3f                	je     c0009f21 <Phys::allocateDMA(unsigned long)+0x81>
c0009ee2:	89 f0                	mov    eax,esi
c0009ee4:	43                   	inc    ebx
c0009ee5:	83 fb 0f             	cmp    ebx,0xf
c0009ee8:	7f 11                	jg     c0009efb <Phys::allocateDMA(unsigned long)+0x5b>
c0009eea:	80 bb 1c 81 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7ee4],0x0
c0009ef1:	74 de                	je     c0009ed1 <Phys::allocateDMA(unsigned long)+0x31>
c0009ef3:	31 c0                	xor    eax,eax
c0009ef5:	43                   	inc    ebx
c0009ef6:	83 fb 0f             	cmp    ebx,0xf
c0009ef9:	7e ef                	jle    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009efb:	83 ec 0c             	sub    esp,0xc
c0009efe:	68 a0 6f 02 c0       	push   0xc0026fa0
c0009f03:	e8 f7 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f08:	c7 04 24 78 42 02 c0 	mov    DWORD PTR [esp],0xc0024278
c0009f0f:	e8 b3 aa 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c0009f14:	83 c4 10             	add    esp,0x10
c0009f17:	31 c0                	xor    eax,eax
c0009f19:	83 c4 1c             	add    esp,0x1c
c0009f1c:	5b                   	pop    ebx
c0009f1d:	5e                   	pop    esi
c0009f1e:	5f                   	pop    edi
c0009f1f:	5d                   	pop    ebp
c0009f20:	c3                   	ret    
c0009f21:	89 e9                	mov    ecx,ebp
c0009f23:	c1 f9 04             	sar    ecx,0x4
c0009f26:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f2a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009f2e:	89 ca                	mov    edx,ecx
c0009f30:	4a                   	dec    edx
c0009f31:	79 03                	jns    c0009f36 <Phys::allocateDMA(unsigned long)+0x96>
c0009f33:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009f36:	c1 fa 04             	sar    edx,0x4
c0009f39:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009f3d:	74 08                	je     c0009f47 <Phys::allocateDMA(unsigned long)+0xa7>
c0009f3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f43:	31 c0                	xor    eax,eax
c0009f45:	eb ae                	jmp    c0009ef5 <Phys::allocateDMA(unsigned long)+0x55>
c0009f47:	85 f6                	test   esi,esi
c0009f49:	74 15                	je     c0009f60 <Phys::allocateDMA(unsigned long)+0xc0>
c0009f4b:	8d 95 1c 81 02 c0    	lea    edx,[ebp-0x3ffd7ee4]
c0009f51:	8d 84 05 1d 81 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7ee3]
c0009f58:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009f5b:	42                   	inc    edx
c0009f5c:	39 d0                	cmp    eax,edx
c0009f5e:	75 f8                	jne    c0009f58 <Phys::allocateDMA(unsigned long)+0xb8>
c0009f60:	83 ec 0c             	sub    esp,0xc
c0009f63:	01 3d 14 81 02 c0    	add    DWORD PTR ds:0xc0028114,edi
c0009f69:	68 a8 41 02 c0       	push   0xc00241a8
c0009f6e:	e8 8c 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f73:	83 c4 10             	add    esp,0x10
c0009f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7a:	85 c0                	test   eax,eax
c0009f7c:	74 23                	je     c0009fa1 <Phys::allocateDMA(unsigned long)+0x101>
c0009f7e:	83 ec 0c             	sub    esp,0xc
c0009f81:	68 7e 6f 02 c0       	push   0xc0026f7e
c0009f86:	e8 74 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009f8b:	c7 04 24 78 42 02 c0 	mov    DWORD PTR [esp],0xc0024278
c0009f92:	e8 30 aa 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c0009f97:	83 c4 10             	add    esp,0x10
c0009f9a:	89 f0                	mov    eax,esi
c0009f9c:	e9 43 ff ff ff       	jmp    c0009ee4 <Phys::allocateDMA(unsigned long)+0x44>
c0009fa1:	c1 e5 0c             	shl    ebp,0xc
c0009fa4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009faa:	e9 6a ff ff ff       	jmp    c0009f19 <Phys::allocateDMA(unsigned long)+0x79>

c0009faf <Phys::freeDMA(unsigned long, unsigned long)>:
c0009faf:	83 ec 18             	sub    esp,0x18
c0009fb2:	68 bf 41 02 c0       	push   0xc00241bf
c0009fb7:	e8 43 2d 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0009fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fc0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fca:	c1 ea 0c             	shr    edx,0xc
c0009fcd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009fd2:	29 15 14 81 02 c0    	sub    DWORD PTR ds:0xc0028114,edx
c0009fd8:	c1 e8 0c             	shr    eax,0xc
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	85 d2                	test   edx,edx
c0009fe0:	74 0f                	je     c0009ff1 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009fe2:	05 1c 81 02 c0       	add    eax,0xc002811c
c0009fe7:	01 c2                	add    edx,eax
c0009fe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009fec:	40                   	inc    eax
c0009fed:	39 d0                	cmp    eax,edx
c0009fef:	75 f8                	jne    c0009fe9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009ff1:	83 c4 0c             	add    esp,0xc
c0009ff4:	c3                   	ret    

c0009ff5 <Phys::setPageState(unsigned long, bool)>:
c0009ff5:	56                   	push   esi
c0009ff6:	ba 01 00 00 00       	mov    edx,0x1
c0009ffb:	53                   	push   ebx
c0009ffc:	8b 35 a4 74 02 c0    	mov    esi,DWORD PTR ds:0xc00274a4
c000a002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a00a:	89 c8                	mov    eax,ecx
c000a00c:	83 e1 07             	and    ecx,0x7
c000a00f:	c1 e8 03             	shr    eax,0x3
c000a012:	d3 e3                	shl    ebx,cl
c000a014:	01 c6                	add    esi,eax
c000a016:	d3 e2                	shl    edx,cl
c000a018:	f7 d2                	not    edx
c000a01a:	20 16                	and    BYTE PTR [esi],dl
c000a01c:	03 05 a4 74 02 c0    	add    eax,DWORD PTR ds:0xc00274a4
c000a022:	08 18                	or     BYTE PTR [eax],bl
c000a024:	5b                   	pop    ebx
c000a025:	5e                   	pop    esi
c000a026:	c3                   	ret    

c000a027 <Phys::getPageState(unsigned long)>:
c000a027:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a02b:	8b 15 a4 74 02 c0    	mov    edx,DWORD PTR ds:0xc00274a4
c000a031:	89 c8                	mov    eax,ecx
c000a033:	83 e1 07             	and    ecx,0x7
c000a036:	c1 e8 03             	shr    eax,0x3
c000a039:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a03d:	d3 f8                	sar    eax,cl
c000a03f:	83 e0 01             	and    eax,0x1
c000a042:	c3                   	ret    

c000a043 <Phys::freePage(unsigned long)>:
c000a043:	53                   	push   ebx
c000a044:	83 ec 10             	sub    esp,0x10
c000a047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a04b:	53                   	push   ebx
c000a04c:	68 d5 41 02 c0       	push   0xc00241d5
c000a051:	e8 a9 2c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a056:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	3d ff ff 00 00       	cmp    eax,0xffff
c000a064:	76 3d                	jbe    c000a0a3 <Phys::freePage(unsigned long)+0x60>
c000a066:	83 ec 0c             	sub    esp,0xc
c000a069:	c1 eb 0c             	shr    ebx,0xc
c000a06c:	53                   	push   ebx
c000a06d:	e8 b5 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a072:	83 c4 10             	add    esp,0x10
c000a075:	84 c0                	test   al,al
c000a077:	74 19                	je     c000a092 <Phys::freePage(unsigned long)+0x4f>
c000a079:	83 ec 08             	sub    esp,0x8
c000a07c:	ff 0d 14 81 02 c0    	dec    DWORD PTR ds:0xc0028114
c000a082:	6a 00                	push   0x0
c000a084:	53                   	push   ebx
c000a085:	e8 6b ff ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a08a:	83 c4 10             	add    esp,0x10
c000a08d:	83 c4 08             	add    esp,0x8
c000a090:	5b                   	pop    ebx
c000a091:	c3                   	ret    
c000a092:	c7 44 24 10 ff 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc00241ff
c000a09a:	83 c4 08             	add    esp,0x8
c000a09d:	5b                   	pop    ebx
c000a09e:	e9 24 a9 00 00       	jmp    c00149c7 <Krnl::panic(char const*)>
c000a0a3:	83 ec 08             	sub    esp,0x8
c000a0a6:	53                   	push   ebx
c000a0a7:	68 e8 41 02 c0       	push   0xc00241e8
c000a0ac:	e8 4e 2c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a0b1:	58                   	pop    eax
c000a0b2:	5a                   	pop    edx
c000a0b3:	68 00 10 00 00       	push   0x1000
c000a0b8:	53                   	push   ebx
c000a0b9:	e8 f1 fe ff ff       	call   c0009faf <Phys::freeDMA(unsigned long, unsigned long)>
c000a0be:	83 c4 10             	add    esp,0x10
c000a0c1:	83 c4 08             	add    esp,0x8
c000a0c4:	5b                   	pop    ebx
c000a0c5:	c3                   	ret    

c000a0c6 <Phys::allocatePage()>:
c000a0c6:	56                   	push   esi
c000a0c7:	53                   	push   ebx
c000a0c8:	83 ec 14             	sub    esp,0x14
c000a0cb:	8b 35 08 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028108
c000a0d1:	89 f3                	mov    ebx,esi
c000a0d3:	eb 0a                	jmp    c000a0df <Phys::allocatePage()+0x19>
c000a0d5:	89 1d 08 81 02 c0    	mov    DWORD PTR ds:0xc0028108,ebx
c000a0db:	39 de                	cmp    esi,ebx
c000a0dd:	74 24                	je     c000a103 <Phys::allocatePage()+0x3d>
c000a0df:	53                   	push   ebx
c000a0e0:	e8 42 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a0e5:	5a                   	pop    edx
c000a0e6:	84 c0                	test   al,al
c000a0e8:	74 69                	je     c000a153 <Phys::allocatePage()+0x8d>
c000a0ea:	43                   	inc    ebx
c000a0eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a0f1:	75 e2                	jne    c000a0d5 <Phys::allocatePage()+0xf>
c000a0f3:	31 db                	xor    ebx,ebx
c000a0f5:	c7 05 08 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028108,0x0
c000a0ff:	39 de                	cmp    esi,ebx
c000a101:	75 dc                	jne    c000a0df <Phys::allocatePage()+0x19>
c000a103:	83 ec 0c             	sub    esp,0xc
c000a106:	80 35 2c 81 02 c0 01 	xor    BYTE PTR ds:0xc002812c,0x1
c000a10d:	68 a0 42 02 c0       	push   0xc00242a0
c000a112:	e8 e8 2b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a117:	58                   	pop    eax
c000a118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a11d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a120:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a126:	e8 63 28 00 00       	call   c000c98e <VAS::scanForEviction()>
c000a12b:	83 c4 10             	add    esp,0x10
c000a12e:	85 c0                	test   eax,eax
c000a130:	75 62                	jne    c000a194 <Phys::allocatePage()+0xce>
c000a132:	83 ec 0c             	sub    esp,0xc
c000a135:	68 c4 42 02 c0       	push   0xc00242c4
c000a13a:	e8 88 a8 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000a13f:	83 c4 10             	add    esp,0x10
c000a142:	8b 1d 08 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028108
c000a148:	53                   	push   ebx
c000a149:	e8 d9 fe ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a14e:	5a                   	pop    edx
c000a14f:	84 c0                	test   al,al
c000a151:	75 97                	jne    c000a0ea <Phys::allocatePage()+0x24>
c000a153:	6a 01                	push   0x1
c000a155:	53                   	push   ebx
c000a156:	e8 9a fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a15b:	5a                   	pop    edx
c000a15c:	a1 14 81 02 c0       	mov    eax,ds:0xc0028114
c000a161:	59                   	pop    ecx
c000a162:	40                   	inc    eax
c000a163:	8b 15 08 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028108
c000a169:	a3 14 81 02 c0       	mov    ds:0xc0028114,eax
c000a16e:	c1 e2 0c             	shl    edx,0xc
c000a171:	52                   	push   edx
c000a172:	ff 35 18 81 02 c0    	push   DWORD PTR ds:0xc0028118
c000a178:	50                   	push   eax
c000a179:	68 15 42 02 c0       	push   0xc0024215
c000a17e:	e8 7c 2b 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a183:	a1 08 81 02 c0       	mov    eax,ds:0xc0028108
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	c1 e0 0c             	shl    eax,0xc
c000a18e:	83 c4 14             	add    esp,0x14
c000a191:	5b                   	pop    ebx
c000a192:	5e                   	pop    esi
c000a193:	c3                   	ret    
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	89 c2                	mov    edx,eax
c000a199:	6a 01                	push   0x1
c000a19b:	c1 ea 0c             	shr    edx,0xc
c000a19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1a2:	52                   	push   edx
c000a1a3:	e8 4d fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a1a8:	83 c4 10             	add    esp,0x10
c000a1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1af:	eb dd                	jmp    c000a18e <Phys::allocatePage()+0xc8>

c000a1b1 <Phys::allocateContiguousPages(int)>:
c000a1b1:	57                   	push   edi
c000a1b2:	56                   	push   esi
c000a1b3:	53                   	push   ebx
c000a1b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a1b8:	fa                   	cli    
c000a1b9:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c000a1bf:	31 db                	xor    ebx,ebx
c000a1c1:	85 db                	test   ebx,ebx
c000a1c3:	75 11                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1c5:	e8 fc fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1ca:	83 fe 01             	cmp    esi,0x1
c000a1cd:	89 c7                	mov    edi,eax
c000a1cf:	74 21                	je     c000a1f2 <Phys::allocateContiguousPages(int)+0x41>
c000a1d1:	bb 01 00 00 00       	mov    ebx,0x1
c000a1d6:	e8 eb fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1db:	89 da                	mov    edx,ebx
c000a1dd:	c1 e2 0c             	shl    edx,0xc
c000a1e0:	01 fa                	add    edx,edi
c000a1e2:	39 c2                	cmp    edx,eax
c000a1e4:	74 20                	je     c000a206 <Phys::allocateContiguousPages(int)+0x55>
c000a1e6:	bb 01 00 00 00       	mov    ebx,0x1
c000a1eb:	89 c7                	mov    edi,eax
c000a1ed:	83 fe 01             	cmp    esi,0x1
c000a1f0:	75 e4                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1f2:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000a1f7:	48                   	dec    eax
c000a1f8:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000a1fd:	75 01                	jne    c000a200 <Phys::allocateContiguousPages(int)+0x4f>
c000a1ff:	fb                   	sti    
c000a200:	89 f8                	mov    eax,edi
c000a202:	5b                   	pop    ebx
c000a203:	5e                   	pop    esi
c000a204:	5f                   	pop    edi
c000a205:	c3                   	ret    
c000a206:	43                   	inc    ebx
c000a207:	39 f3                	cmp    ebx,esi
c000a209:	75 b6                	jne    c000a1c1 <Phys::allocateContiguousPages(int)+0x10>
c000a20b:	eb e5                	jmp    c000a1f2 <Phys::allocateContiguousPages(int)+0x41>

c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a20d:	56                   	push   esi
c000a20e:	53                   	push   ebx
c000a20f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a213:	39 1d 0c 81 02 c0    	cmp    DWORD PTR ds:0xc002810c,ebx
c000a219:	73 06                	jae    c000a221 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a21b:	89 1d 0c 81 02 c0    	mov    DWORD PTR ds:0xc002810c,ebx
c000a221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a225:	c1 eb 0c             	shr    ebx,0xc
c000a228:	c1 e8 0c             	shr    eax,0xc
c000a22b:	39 d8                	cmp    eax,ebx
c000a22d:	73 13                	jae    c000a242 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a22f:	6a 00                	push   0x0
c000a231:	8d 70 01             	lea    esi,[eax+0x1]
c000a234:	50                   	push   eax
c000a235:	e8 bb fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a23a:	5a                   	pop    edx
c000a23b:	89 f0                	mov    eax,esi
c000a23d:	59                   	pop    ecx
c000a23e:	39 f3                	cmp    ebx,esi
c000a240:	75 ed                	jne    c000a22f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a242:	5b                   	pop    ebx
c000a243:	5e                   	pop    esi
c000a244:	c3                   	ret    

c000a245 <Phys::physicalMemorySetup(unsigned int)>:
c000a245:	55                   	push   ebp
c000a246:	57                   	push   edi
c000a247:	56                   	push   esi
c000a248:	53                   	push   ebx
c000a249:	31 db                	xor    ebx,ebx
c000a24b:	83 ec 40             	sub    esp,0x40
c000a24e:	6a 10                	push   0x10
c000a250:	6a 00                	push   0x0
c000a252:	68 1c 81 02 c0       	push   0xc002811c
c000a257:	e8 28 64 ff ff       	call   c0000684 <memset>
c000a25c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a260:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a265:	05 00 10 00 00       	add    eax,0x1000
c000a26a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a26e:	5a                   	pop    edx
c000a26f:	59                   	pop    ecx
c000a270:	50                   	push   eax
c000a271:	68 33 42 02 c0       	push   0xc0024233
c000a276:	e8 84 2a 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	83 ec 08             	sub    esp,0x8
c000a281:	6a 01                	push   0x1
c000a283:	53                   	push   ebx
c000a284:	43                   	inc    ebx
c000a285:	e8 6b fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a293:	75 e9                	jne    c000a27e <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a295:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a29c:	66 85 c0             	test   ax,ax
c000a29f:	0f 84 8e 01 00 00    	je     c000a433 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a2a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a2a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a2b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a2b5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a2ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2be:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a2c6:	eb 15                	jmp    c000a2dd <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a2c8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a2cc:	83 c3 18             	add    ebx,0x18
c000a2cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a2d3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a2d7:	0f 84 66 01 00 00    	je     c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a2dd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a2e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a2e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a2e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a2ee:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a2f0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a2f3:	01 f0                	add    eax,esi
c000a2f5:	55                   	push   ebp
c000a2f6:	11 fa                	adc    edx,edi
c000a2f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a300:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a304:	56                   	push   esi
c000a305:	68 f4 42 02 c0       	push   0xc00242f4
c000a30a:	e8 f0 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a313:	83 c4 10             	add    esp,0x10
c000a316:	09 f8                	or     eax,edi
c000a318:	0f 85 25 01 00 00    	jne    c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a31e:	4d                   	dec    ebp
c000a31f:	75 a7                	jne    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a321:	ba 00 00 08 00       	mov    edx,0x80000
c000a326:	89 c1                	mov    ecx,eax
c000a328:	39 f2                	cmp    edx,esi
c000a32a:	19 f9                	sbb    ecx,edi
c000a32c:	0f 82 a7 00 00 00    	jb     c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a332:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a336:	89 c1                	mov    ecx,eax
c000a338:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a33c:	0f 83 97 00 00 00    	jae    c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a342:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a347:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a34b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a34f:	39 fa                	cmp    edx,edi
c000a351:	19 e8                	sbb    eax,ebp
c000a353:	0f 82 a5 01 00 00    	jb     c000a4fe <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a359:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a35d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a361:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a367:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a36c:	83 d5 ff             	adc    ebp,0xffffffff
c000a36f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a373:	31 c0                	xor    eax,eax
c000a375:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a379:	39 fa                	cmp    edx,edi
c000a37b:	89 c1                	mov    ecx,eax
c000a37d:	19 e9                	sbb    ecx,ebp
c000a37f:	0f 83 43 ff ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a385:	be 00 00 08 00       	mov    esi,0x80000
c000a38a:	57                   	push   edi
c000a38b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a38f:	57                   	push   edi
c000a390:	56                   	push   esi
c000a391:	68 18 43 02 c0       	push   0xc0024318
c000a396:	e8 64 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a39b:	5d                   	pop    ebp
c000a39c:	58                   	pop    eax
c000a39d:	57                   	push   edi
c000a39e:	56                   	push   esi
c000a39f:	e8 69 fe ff ff       	call   c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a3a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a3a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a3ac:	83 c4 0c             	add    esp,0xc
c000a3af:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a3b3:	03 05 18 81 02 c0    	add    eax,DWORD PTR ds:0xc0028118
c000a3b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a3c0:	a3 18 81 02 c0       	mov    ds:0xc0028118,eax
c000a3c5:	52                   	push   edx
c000a3c6:	50                   	push   eax
c000a3c7:	68 59 42 02 c0       	push   0xc0024259
c000a3cc:	e8 2e 29 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	e9 ef fe ff ff       	jmp    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3d9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a3dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e5:	39 ea                	cmp    edx,ebp
c000a3e7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a3eb:	0f 82 d7 fe ff ff    	jb     c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3f1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a3f6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a3fa:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a3fe:	0f 83 c4 fe ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a404:	39 ee                	cmp    esi,ebp
c000a406:	89 f8                	mov    eax,edi
c000a408:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a40c:	0f 83 78 ff ff ff    	jae    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a416:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a41a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a41e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a422:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a42e:	e9 57 ff ff ff       	jmp    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a433:	83 ec 0c             	sub    esp,0xc
c000a436:	68 4b 42 02 c0       	push   0xc002424b
c000a43b:	e8 87 a5 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000a440:	83 c4 10             	add    esp,0x10
c000a443:	83 ec 08             	sub    esp,0x8
c000a446:	6a 00                	push   0x0
c000a448:	6a 05                	push   0x5
c000a44a:	e8 a6 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a44f:	58                   	pop    eax
c000a450:	5a                   	pop    edx
c000a451:	6a 00                	push   0x0
c000a453:	6a 06                	push   0x6
c000a455:	e8 9b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a45a:	59                   	pop    ecx
c000a45b:	5b                   	pop    ebx
c000a45c:	bb 60 00 00 00       	mov    ebx,0x60
c000a461:	6a 00                	push   0x0
c000a463:	6a 07                	push   0x7
c000a465:	e8 8b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a46a:	83 05 18 81 02 c0 03 	add    DWORD PTR ds:0xc0028118,0x3
c000a471:	83 c4 10             	add    esp,0x10
c000a474:	83 ec 08             	sub    esp,0x8
c000a477:	6a 00                	push   0x0
c000a479:	53                   	push   ebx
c000a47a:	43                   	inc    ebx
c000a47b:	e8 75 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a480:	83 c4 10             	add    esp,0x10
c000a483:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a489:	75 e9                	jne    c000a474 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a48b:	a1 18 81 02 c0       	mov    eax,ds:0xc0028118
c000a490:	bb 40 01 00 00       	mov    ebx,0x140
c000a495:	83 c0 20             	add    eax,0x20
c000a498:	a3 18 81 02 c0       	mov    ds:0xc0028118,eax
c000a49d:	eb 22                	jmp    c000a4c1 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a49f:	83 ec 08             	sub    esp,0x8
c000a4a2:	6a 00                	push   0x0
c000a4a4:	53                   	push   ebx
c000a4a5:	43                   	inc    ebx
c000a4a6:	e8 4a fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4ab:	a1 18 81 02 c0       	mov    eax,ds:0xc0028118
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	40                   	inc    eax
c000a4b4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a4ba:	a3 18 81 02 c0       	mov    ds:0xc0028118,eax
c000a4bf:	74 07                	je     c000a4c8 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a4c1:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a4c6:	7e d7                	jle    c000a49f <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a4c8:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a4cd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a4d2:	7f 22                	jg     c000a4f6 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a4d4:	83 ec 08             	sub    esp,0x8
c000a4d7:	6a 00                	push   0x0
c000a4d9:	53                   	push   ebx
c000a4da:	43                   	inc    ebx
c000a4db:	e8 15 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4e0:	a1 18 81 02 c0       	mov    eax,ds:0xc0028118
c000a4e5:	83 c4 10             	add    esp,0x10
c000a4e8:	40                   	inc    eax
c000a4e9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a4ef:	a3 18 81 02 c0       	mov    ds:0xc0028118,eax
c000a4f4:	75 d7                	jne    c000a4cd <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a4f6:	83 c4 3c             	add    esp,0x3c
c000a4f9:	5b                   	pop    ebx
c000a4fa:	5e                   	pop    esi
c000a4fb:	5f                   	pop    edi
c000a4fc:	5d                   	pop    ebp
c000a4fd:	c3                   	ret    
c000a4fe:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a506:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a50e:	e9 46 fe ff ff       	jmp    c000a359 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a513:	90                   	nop

c000a514 <Pipe::isAtty()>:
c000a514:	31 c0                	xor    eax,eax
c000a516:	c3                   	ret    
c000a517:	90                   	nop

c000a518 <Pipe::~Pipe()>:
c000a518:	83 ec 0c             	sub    esp,0xc
c000a51b:	ba 84 43 02 c0       	mov    edx,0xc0024384
c000a520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a524:	89 10                	mov    DWORD PTR [eax],edx
c000a526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a52a:	83 ec 0c             	sub    esp,0xc
c000a52d:	50                   	push   eax
c000a52e:	e8 45 12 00 00       	call   c000b778 <UnixFile::~UnixFile()>
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	90                   	nop
c000a537:	83 c4 0c             	add    esp,0xc
c000a53a:	c3                   	ret    
c000a53b:	90                   	nop

c000a53c <Pipe::~Pipe()>:
c000a53c:	83 ec 0c             	sub    esp,0xc
c000a53f:	83 ec 0c             	sub    esp,0xc
c000a542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a546:	e8 cd ff ff ff       	call   c000a518 <Pipe::~Pipe()>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	83 ec 08             	sub    esp,0x8
c000a551:	6a 20                	push   0x20
c000a553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a557:	e8 c2 26 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000a55c:	83 c4 10             	add    esp,0x10
c000a55f:	83 c4 0c             	add    esp,0xc
c000a562:	c3                   	ret    
c000a563:	90                   	nop

c000a564 <Pipe::read(unsigned long long, void*, int*)>:
c000a564:	55                   	push   ebp
c000a565:	57                   	push   edi
c000a566:	56                   	push   esi
c000a567:	53                   	push   ebx
c000a568:	83 ec 1c             	sub    esp,0x1c
c000a56b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a56f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a573:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a577:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a57a:	89 c8                	mov    eax,ecx
c000a57c:	99                   	cdq    
c000a57d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a581:	74 24                	je     c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a583:	39 f9                	cmp    ecx,edi
c000a585:	89 d1                	mov    ecx,edx
c000a587:	19 f1                	sbb    ecx,esi
c000a589:	73 1c                	jae    c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a58b:	fa                   	cli    
c000a58c:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c000a592:	e8 95 e1 00 00       	call   c001872c <schedule()>
c000a597:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000a59c:	48                   	dec    eax
c000a59d:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000a5a2:	75 d3                	jne    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a4:	fb                   	sti    
c000a5a5:	eb d0                	jmp    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a7:	39 f8                	cmp    eax,edi
c000a5a9:	89 d1                	mov    ecx,edx
c000a5ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ae:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a5b2:	19 f1                	sbb    ecx,esi
c000a5b4:	73 07                	jae    c000a5bd <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5bd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a5c0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a5c3:	29 f7                	sub    edi,esi
c000a5c5:	89 f8                	mov    eax,edi
c000a5c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a5cb:	99                   	cdq    
c000a5cc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d3:	19 d0                	sbb    eax,edx
c000a5d5:	73 07                	jae    c000a5de <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a5d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a5da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5de:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a5e1:	89 ea                	mov    edx,ebp
c000a5e3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a5e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5ec:	74 0d                	je     c000a5fb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5ee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a5f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a5f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a5f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5fb:	85 d2                	test   edx,edx
c000a5fd:	74 11                	je     c000a610 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a5ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a603:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a606:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a60a:	89 d1                	mov    ecx,edx
c000a60c:	89 c7                	mov    edi,eax
c000a60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a610:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a613:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a616:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a619:	99                   	cdq    
c000a61a:	89 f7                	mov    edi,esi
c000a61c:	03 04 24             	add    eax,DWORD PTR [esp]
c000a61f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a623:	c1 ff 1f             	sar    edi,0x1f
c000a626:	57                   	push   edi
c000a627:	56                   	push   esi
c000a628:	52                   	push   edx
c000a629:	50                   	push   eax
c000a62a:	e8 c5 82 01 00       	call   c00228f4 <__umoddi3>
c000a62f:	83 c4 10             	add    esp,0x10
c000a632:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a635:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a63a:	75 10                	jne    c000a64c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a63c:	83 ec 0c             	sub    esp,0xc
c000a63f:	68 41 43 02 c0       	push   0xc0024341
c000a644:	e8 7e a3 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000a649:	83 c4 10             	add    esp,0x10
c000a64c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a650:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a653:	89 10                	mov    DWORD PTR [eax],edx
c000a655:	83 c4 1c             	add    esp,0x1c
c000a658:	31 c0                	xor    eax,eax
c000a65a:	5b                   	pop    ebx
c000a65b:	5e                   	pop    esi
c000a65c:	5f                   	pop    edi
c000a65d:	5d                   	pop    ebp
c000a65e:	c3                   	ret    
c000a65f:	90                   	nop

c000a660 <Pipe::write(unsigned long long, void*, int*)>:
c000a660:	55                   	push   ebp
c000a661:	57                   	push   edi
c000a662:	56                   	push   esi
c000a663:	53                   	push   ebx
c000a664:	83 ec 1c             	sub    esp,0x1c
c000a667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a66b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a66f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a672:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a676:	89 04 24             	mov    DWORD PTR [esp],eax
c000a679:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a67d:	89 d8                	mov    eax,ebx
c000a67f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a682:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a686:	89 d6                	mov    esi,edx
c000a688:	89 d7                	mov    edi,edx
c000a68a:	c1 ff 1f             	sar    edi,0x1f
c000a68d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a690:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a694:	c1 f8 1f             	sar    eax,0x1f
c000a697:	39 f3                	cmp    ebx,esi
c000a699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6a1:	19 f8                	sbb    eax,edi
c000a6a3:	b8 01 00 00 00       	mov    eax,0x1
c000a6a8:	72 6e                	jb     c000a718 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a6aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a6ad:	01 d0                	add    eax,edx
c000a6af:	99                   	cdq    
c000a6b0:	f7 fb                	idiv   ebx
c000a6b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6b6:	29 d3                	sub    ebx,edx
c000a6b8:	89 d7                	mov    edi,edx
c000a6ba:	89 de                	mov    esi,ebx
c000a6bc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a6bf:	c1 fb 1f             	sar    ebx,0x1f
c000a6c2:	39 f2                	cmp    edx,esi
c000a6c4:	19 d8                	sbb    eax,ebx
c000a6c6:	b8 00 00 00 00       	mov    eax,0x0
c000a6cb:	72 04                	jb     c000a6d1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a6cd:	89 d0                	mov    eax,edx
c000a6cf:	29 f0                	sub    eax,esi
c000a6d1:	89 d3                	mov    ebx,edx
c000a6d3:	29 c3                	sub    ebx,eax
c000a6d5:	74 0b                	je     c000a6e2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a6d7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a6da:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a6de:	89 d9                	mov    ecx,ebx
c000a6e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6e2:	85 c0                	test   eax,eax
c000a6e4:	74 0d                	je     c000a6f3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a6e6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a6ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a6ed:	89 de                	mov    esi,ebx
c000a6ef:	89 c1                	mov    ecx,eax
c000a6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6f3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a6f6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a6fb:	75 10                	jne    c000a70d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a6fd:	83 ec 0c             	sub    esp,0xc
c000a700:	68 5d 43 02 c0       	push   0xc002435d
c000a705:	e8 bd a2 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a711:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a714:	89 08                	mov    DWORD PTR [eax],ecx
c000a716:	31 c0                	xor    eax,eax
c000a718:	83 c4 1c             	add    esp,0x1c
c000a71b:	5b                   	pop    ebx
c000a71c:	5e                   	pop    esi
c000a71d:	5f                   	pop    edi
c000a71e:	5d                   	pop    ebp
c000a71f:	c3                   	ret    

c000a720 <Pipe::Pipe(int)>:
c000a720:	83 ec 0c             	sub    esp,0xc
c000a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a727:	83 ec 08             	sub    esp,0x8
c000a72a:	6a 00                	push   0x0
c000a72c:	50                   	push   eax
c000a72d:	e8 64 0e 00 00       	call   c000b596 <UnixFile::UnixFile(int)>
c000a732:	83 c4 10             	add    esp,0x10
c000a735:	ba 84 43 02 c0       	mov    edx,0xc0024384
c000a73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73e:	89 10                	mov    DWORD PTR [eax],edx
c000a740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a744:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a748:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a75a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a765:	83 ec 0c             	sub    esp,0xc
c000a768:	50                   	push   eax
c000a769:	e8 a1 f2 ff ff       	call   c0009a0f <malloc>
c000a76e:	83 c4 10             	add    esp,0x10
c000a771:	89 c2                	mov    edx,eax
c000a773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a777:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a782:	90                   	nop
c000a783:	83 c4 0c             	add    esp,0xc
c000a786:	c3                   	ret    
c000a787:	90                   	nop

c000a788 <VgaText::isAtty()>:
c000a788:	b0 01                	mov    al,0x1
c000a78a:	c3                   	ret    
c000a78b:	90                   	nop

c000a78c <VgaText::~VgaText()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba 0c 44 02 c0       	mov    edx,0xc002440c
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 d1 0f 00 00       	call   c000b778 <UnixFile::~UnixFile()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <VgaText::~VgaText()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <VgaText::~VgaText()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 c4 02 00 00       	push   0x2c4
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 4b 24 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <VgaText::read(unsigned long long, void*, int*)>:
c000a7da:	83 ec 10             	sub    esp,0x10
c000a7dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e9:	e8 9d 58 00 00       	call   c001008b <readKeyboard(VgaText*, char*, unsigned long)>
c000a7ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a7f2:	89 02                	mov    DWORD PTR [edx],eax
c000a7f4:	31 c0                	xor    eax,eax
c000a7f6:	83 c4 1c             	add    esp,0x1c
c000a7f9:	c3                   	ret    

c000a7fa <setTerminalScrollLock(bool)>:
c000a7fa:	c3                   	ret    

c000a7fb <addToTerminalCycle(VgaText*)>:
c000a7fb:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c000a801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a805:	85 d2                	test   edx,edx
c000a807:	75 09                	jne    c000a812 <addToTerminalCycle(VgaText*)+0x17>
c000a809:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a80c:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c000a811:	c3                   	ret    
c000a812:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a815:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a818:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a81b:	c3                   	ret    

c000a81c <installVgaTextImplementation()>:
c000a81c:	83 ec 10             	sub    esp,0x10
c000a81f:	6a 20                	push   0x20
c000a821:	6a 00                	push   0x0
c000a823:	68 40 81 02 c0       	push   0xc0028140
c000a828:	e8 57 5e ff ff       	call   c0000684 <memset>
c000a82d:	83 c4 1c             	add    esp,0x1c
c000a830:	c3                   	ret    

c000a831 <scrollTerminalScrollLock(int)>:
c000a831:	c3                   	ret    

c000a832 <VgaText::updateTitle()>:
c000a832:	53                   	push   ebx
c000a833:	31 c0                	xor    eax,eax
c000a835:	83 ec 58             	sub    esp,0x58
c000a838:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a83c:	89 e1                	mov    ecx,esp
c000a83e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a842:	40                   	inc    eax
c000a843:	83 f8 50             	cmp    eax,0x50
c000a846:	75 f6                	jne    c000a83e <VgaText::updateTitle()+0xc>
c000a848:	31 c0                	xor    eax,eax
c000a84a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a851:	84 db                	test   bl,bl
c000a853:	74 06                	je     c000a85b <VgaText::updateTitle()+0x29>
c000a855:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a858:	40                   	inc    eax
c000a859:	eb ef                	jmp    c000a84a <VgaText::updateTitle()+0x18>
c000a85b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a85e:	85 c0                	test   eax,eax
c000a860:	74 09                	je     c000a86b <VgaText::updateTitle()+0x39>
c000a862:	53                   	push   ebx
c000a863:	53                   	push   ebx
c000a864:	51                   	push   ecx
c000a865:	52                   	push   edx
c000a866:	ff d0                	call   eax
c000a868:	83 c4 10             	add    esp,0x10
c000a86b:	83 c4 58             	add    esp,0x58
c000a86e:	5b                   	pop    ebx
c000a86f:	c3                   	ret    

c000a870 <VgaText::load()>:
c000a870:	53                   	push   ebx
c000a871:	31 c0                	xor    eax,eax
c000a873:	83 ec 58             	sub    esp,0x58
c000a876:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a87a:	89 e2                	mov    edx,esp
c000a87c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a880:	40                   	inc    eax
c000a881:	83 f8 50             	cmp    eax,0x50
c000a884:	75 f6                	jne    c000a87c <VgaText::load()+0xc>
c000a886:	31 c0                	xor    eax,eax
c000a888:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a88f:	84 c9                	test   cl,cl
c000a891:	74 06                	je     c000a899 <VgaText::load()+0x29>
c000a893:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a896:	40                   	inc    eax
c000a897:	eb ef                	jmp    c000a888 <VgaText::load()+0x18>
c000a899:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a89c:	85 c0                	test   eax,eax
c000a89e:	74 09                	je     c000a8a9 <VgaText::load()+0x39>
c000a8a0:	51                   	push   ecx
c000a8a1:	51                   	push   ecx
c000a8a2:	52                   	push   edx
c000a8a3:	53                   	push   ebx
c000a8a4:	ff d0                	call   eax
c000a8a6:	83 c4 10             	add    esp,0x10
c000a8a9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a8ac:	85 c0                	test   eax,eax
c000a8ae:	74 09                	je     c000a8b9 <VgaText::load()+0x49>
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	53                   	push   ebx
c000a8b4:	ff d0                	call   eax
c000a8b6:	83 c4 10             	add    esp,0x10
c000a8b9:	83 c4 58             	add    esp,0x58
c000a8bc:	5b                   	pop    ebx
c000a8bd:	c3                   	ret    

c000a8be <VgaText::updateCursor()>:
c000a8be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8c2:	39 05 64 81 02 c0    	cmp    DWORD PTR ds:0xc0028164,eax
c000a8c8:	75 09                	jne    c000a8d3 <VgaText::updateCursor()+0x15>
c000a8ca:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a8cd:	85 c0                	test   eax,eax
c000a8cf:	74 02                	je     c000a8d3 <VgaText::updateCursor()+0x15>
c000a8d1:	ff e0                	jmp    eax
c000a8d3:	c3                   	ret    

c000a8d4 <VgaText::doANSI_SGR(int)>:
c000a8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8dc:	85 d2                	test   edx,edx
c000a8de:	75 0b                	jne    c000a8eb <VgaText::doANSI_SGR(int)+0x17>
c000a8e0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a8e3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8e6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a8e9:	eb 59                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8eb:	83 fa 07             	cmp    edx,0x7
c000a8ee:	75 0b                	jne    c000a8fb <VgaText::doANSI_SGR(int)+0x27>
c000a8f0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a8f3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a8f6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a8f9:	eb 49                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8fb:	83 fa 1b             	cmp    edx,0x1b
c000a8fe:	74 e0                	je     c000a8e0 <VgaText::doANSI_SGR(int)+0xc>
c000a900:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a903:	83 f9 07             	cmp    ecx,0x7
c000a906:	77 09                	ja     c000a911 <VgaText::doANSI_SGR(int)+0x3d>
c000a908:	8b 14 8d e0 74 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8b20]
c000a90f:	eb 20                	jmp    c000a931 <VgaText::doANSI_SGR(int)+0x5d>
c000a911:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a914:	83 f9 07             	cmp    ecx,0x7
c000a917:	77 09                	ja     c000a922 <VgaText::doANSI_SGR(int)+0x4e>
c000a919:	8b 14 8d e0 74 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8b20]
c000a920:	eb 22                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a922:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a925:	83 f9 07             	cmp    ecx,0x7
c000a928:	77 0b                	ja     c000a935 <VgaText::doANSI_SGR(int)+0x61>
c000a92a:	8b 14 95 98 73 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8c68]
c000a931:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a934:	c3                   	ret    
c000a935:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a938:	83 f9 07             	cmp    ecx,0x7
c000a93b:	77 0a                	ja     c000a947 <VgaText::doANSI_SGR(int)+0x73>
c000a93d:	8b 14 95 70 73 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8c90]
c000a944:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a947:	c3                   	ret    

c000a948 <VgaText::setDefaultBgColour(VgaColour)>:
c000a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a950:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a953:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a956:	c3                   	ret    
c000a957:	90                   	nop

c000a958 <VgaText::setDefaultFgColour(VgaColour)>:
c000a958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a960:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a963:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a966:	c3                   	ret    
c000a967:	90                   	nop

c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a968:	53                   	push   ebx
c000a969:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a96d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a971:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a975:	51                   	push   ecx
c000a976:	e8 cd ff ff ff       	call   c000a948 <VgaText::setDefaultBgColour(VgaColour)>
c000a97b:	58                   	pop    eax
c000a97c:	5a                   	pop    edx
c000a97d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a981:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a985:	5b                   	pop    ebx
c000a986:	eb d0                	jmp    c000a958 <VgaText::setDefaultFgColour(VgaColour)>

c000a988 <VgaText::setTitleTextColour(VgaColour)>:
c000a988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a98c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a990:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a993:	e9 9a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a998 <VgaText::setTitleColour(VgaColour)>:
c000a998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9a3:	e9 8a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a9a8 <VgaText::setTitle(char*)>:
c000a9a8:	53                   	push   ebx
c000a9a9:	83 ec 10             	sub    esp,0x10
c000a9ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9b4:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a9ba:	50                   	push   eax
c000a9bb:	e8 80 5d ff ff       	call   c0000740 <strcpy>
c000a9c0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a9c4:	83 c4 18             	add    esp,0x18
c000a9c7:	5b                   	pop    ebx
c000a9c8:	e9 65 fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>
c000a9cd:	90                   	nop

c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>:
c000a9ce:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a9d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a9d7:	83 e0 0f             	and    eax,0xf
c000a9da:	c1 e2 04             	shl    edx,0x4
c000a9dd:	09 d0                	or     eax,edx
c000a9df:	c3                   	ret    

c000a9e0 <VgaText::scrollScreen()>:
c000a9e0:	55                   	push   ebp
c000a9e1:	b9 01 00 00 00       	mov    ecx,0x1
c000a9e6:	57                   	push   edi
c000a9e7:	56                   	push   esi
c000a9e8:	53                   	push   ebx
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9f0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a9f6:	31 ff                	xor    edi,edi
c000a9f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a9fb:	83 f9 17             	cmp    ecx,0x17
c000a9fe:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000aa01:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aa08:	75 27                	jne    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa0a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aa0d:	01 f5                	add    ebp,esi
c000aa0f:	f7 c7 01 00 00 00    	test   edi,0x1
c000aa15:	74 16                	je     c000aa2d <VgaText::scrollScreen()+0x4d>
c000aa17:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000aa1b:	50                   	push   eax
c000aa1c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000aa20:	50                   	push   eax
c000aa21:	e8 a8 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa26:	5a                   	pop    edx
c000aa27:	5a                   	pop    edx
c000aa28:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000aa2b:	eb 04                	jmp    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa2d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000aa31:	47                   	inc    edi
c000aa32:	46                   	inc    esi
c000aa33:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000aa39:	75 bd                	jne    c000a9f8 <VgaText::scrollScreen()+0x18>
c000aa3b:	41                   	inc    ecx
c000aa3c:	83 f9 18             	cmp    ecx,0x18
c000aa3f:	75 af                	jne    c000a9f0 <VgaText::scrollScreen()+0x10>
c000aa41:	39 1d 64 81 02 c0    	cmp    DWORD PTR ds:0xc0028164,ebx
c000aa47:	75 1b                	jne    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa49:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa4d:	74 05                	je     c000aa54 <VgaText::scrollScreen()+0x74>
c000aa4f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000aa52:	eb 10                	jmp    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa54:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000aa57:	85 c0                	test   eax,eax
c000aa59:	74 09                	je     c000aa64 <VgaText::scrollScreen()+0x84>
c000aa5b:	83 ec 0c             	sub    esp,0xc
c000aa5e:	53                   	push   ebx
c000aa5f:	ff d0                	call   eax
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000aa68:	83 c4 0c             	add    esp,0xc
c000aa6b:	5b                   	pop    ebx
c000aa6c:	5e                   	pop    esi
c000aa6d:	5f                   	pop    edi
c000aa6e:	5d                   	pop    ebp
c000aa6f:	e9 4a fe ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>:
c000aa74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000aa79:	c1 e0 08             	shl    eax,0x8
c000aa7c:	89 c2                	mov    edx,eax
c000aa7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000aa83:	09 d0                	or     eax,edx
c000aa85:	c3                   	ret    

c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000aa86:	56                   	push   esi
c000aa87:	53                   	push   ebx
c000aa88:	51                   	push   ecx
c000aa89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aa8d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa92:	50                   	push   eax
c000aa93:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa98:	50                   	push   eax
c000aa99:	e8 30 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa9e:	5b                   	pop    ebx
c000aa9f:	0f b6 c0             	movzx  eax,al
c000aaa2:	5e                   	pop    esi
c000aaa3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000aaa8:	50                   	push   eax
c000aaa9:	53                   	push   ebx
c000aaaa:	e8 c5 ff ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000aaaf:	5a                   	pop    edx
c000aab0:	5e                   	pop    esi
c000aab1:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aab4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aaba:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aabe:	0f b7 d2             	movzx  edx,dx
c000aac1:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aac5:	39 0d 64 81 02 c0    	cmp    DWORD PTR ds:0xc0028164,ecx
c000aacb:	75 10                	jne    c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aacd:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aad0:	85 c0                	test   eax,eax
c000aad2:	74 09                	je     c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aad4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aad8:	5a                   	pop    edx
c000aad9:	5b                   	pop    ebx
c000aada:	5e                   	pop    esi
c000aadb:	ff e0                	jmp    eax
c000aadd:	58                   	pop    eax
c000aade:	5b                   	pop    ebx
c000aadf:	5e                   	pop    esi
c000aae0:	c3                   	ret    
c000aae1:	90                   	nop

c000aae2 <VgaText::getCursorX()>:
c000aae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aae6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aae9:	c3                   	ret    

c000aaea <VgaText::getCursorY()>:
c000aaea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aaf1:	c3                   	ret    

c000aaf2 <VgaText::setCursor(int, int)>:
c000aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aafa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aafd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab04:	e9 b5 fd ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000ab09 <setActiveTerminal(VgaText*)>:
c000ab09:	53                   	push   ebx
c000ab0a:	83 ec 08             	sub    esp,0x8
c000ab0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab11:	85 db                	test   ebx,ebx
c000ab13:	75 11                	jne    c000ab26 <setActiveTerminal(VgaText*)+0x1d>
c000ab15:	c7 44 24 10 98 43 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024398
c000ab1d:	83 c4 08             	add    esp,0x8
c000ab20:	5b                   	pop    ebx
c000ab21:	e9 a1 9e 00 00       	jmp    c00149c7 <Krnl::panic(char const*)>
c000ab26:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000ab2b:	85 c0                	test   eax,eax
c000ab2d:	74 0c                	je     c000ab3b <setActiveTerminal(VgaText*)+0x32>
c000ab2f:	83 ec 0c             	sub    esp,0xc
c000ab32:	50                   	push   eax
c000ab33:	e8 86 fd ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c000ab41:	51                   	push   ecx
c000ab42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab45:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab48:	53                   	push   ebx
c000ab49:	e8 a4 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab4e:	83 c4 10             	add    esp,0x10
c000ab51:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ab55:	75 07                	jne    c000ab5e <setActiveTerminal(VgaText*)+0x55>
c000ab57:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ab5e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab62:	83 c4 08             	add    esp,0x8
c000ab65:	5b                   	pop    ebx
c000ab66:	e9 05 fd ff ff       	jmp    c000a870 <VgaText::load()>

c000ab6b <doTerminalCycle()>:
c000ab6b:	83 ec 18             	sub    esp,0x18
c000ab6e:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000ab73:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ab76:	50                   	push   eax
c000ab77:	a3 60 81 02 c0       	mov    ds:0xc0028160,eax
c000ab7c:	e8 88 ff ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ab81:	83 c4 1c             	add    esp,0x1c
c000ab84:	c3                   	ret    
c000ab85:	90                   	nop

c000ab86 <VgaText::setCursorX(int)>:
c000ab86:	83 ec 10             	sub    esp,0x10
c000ab89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab8d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ab90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab94:	50                   	push   eax
c000ab95:	e8 58 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab9a:	83 c4 1c             	add    esp,0x1c
c000ab9d:	c3                   	ret    

c000ab9e <VgaText::setCursorY(int)>:
c000ab9e:	83 ec 10             	sub    esp,0x10
c000aba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aba9:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000abac:	50                   	push   eax
c000abad:	e8 40 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000abb2:	83 c4 1c             	add    esp,0x1c
c000abb5:	c3                   	ret    

c000abb6 <VgaText::incrementCursor(bool)>:
c000abb6:	56                   	push   esi
c000abb7:	53                   	push   ebx
c000abb8:	51                   	push   ecx
c000abb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000abc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000abc4:	40                   	inc    eax
c000abc5:	83 f8 50             	cmp    eax,0x50
c000abc8:	74 05                	je     c000abcf <VgaText::incrementCursor(bool)+0x19>
c000abca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000abcd:	eb 24                	jmp    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abcf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000abd2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abd9:	8d 50 01             	lea    edx,[eax+0x1]
c000abdc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000abdf:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000abe2:	75 0f                	jne    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000abea:	53                   	push   ebx
c000abeb:	e8 f0 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000abf0:	83 c4 10             	add    esp,0x10
c000abf3:	89 f0                	mov    eax,esi
c000abf5:	84 c0                	test   al,al
c000abf7:	74 0c                	je     c000ac05 <VgaText::incrementCursor(bool)+0x4f>
c000abf9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abfd:	5a                   	pop    edx
c000abfe:	5b                   	pop    ebx
c000abff:	5e                   	pop    esi
c000ac00:	e9 b9 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac05:	58                   	pop    eax
c000ac06:	5b                   	pop    ebx
c000ac07:	5e                   	pop    esi
c000ac08:	c3                   	ret    
c000ac09:	90                   	nop

c000ac0a <VgaText::decrementCursor(bool)>:
c000ac0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac12:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000ac15:	85 c0                	test   eax,eax
c000ac17:	74 04                	je     c000ac1d <VgaText::decrementCursor(bool)+0x13>
c000ac19:	48                   	dec    eax
c000ac1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000ac1d:	84 c9                	test   cl,cl
c000ac1f:	74 09                	je     c000ac2a <VgaText::decrementCursor(bool)+0x20>
c000ac21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac25:	e9 94 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ac2c:	53                   	push   ebx
c000ac2d:	83 ec 08             	sub    esp,0x8
c000ac30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ac3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ac40:	3c 07                	cmp    al,0x7
c000ac42:	75 2a                	jne    c000ac6e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ac44:	a1 18 82 02 c0       	mov    eax,ds:0xc0028218
c000ac49:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ac51:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ac59:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ac61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac65:	83 c4 08             	add    esp,0x8
c000ac68:	5b                   	pop    ebx
c000ac69:	e9 a4 2f 00 00       	jmp    c000dc12 <Buzzer::beep(int, int, bool)>
c000ac6e:	3c 0d                	cmp    al,0xd
c000ac70:	75 09                	jne    c000ac7b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000ac72:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac79:	eb 2c                	jmp    c000aca7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000ac7b:	3c 0a                	cmp    al,0xa
c000ac7d:	75 31                	jne    c000acb0 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000ac7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac89:	8d 50 01             	lea    edx,[eax+0x1]
c000ac8c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ac8f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ac92:	75 0f                	jne    c000aca3 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ac9a:	53                   	push   ebx
c000ac9b:	e8 40 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aca7:	83 c4 08             	add    esp,0x8
c000acaa:	5b                   	pop    ebx
c000acab:	e9 0e fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000acb0:	3c 08                	cmp    al,0x8
c000acb2:	75 25                	jne    c000acd9 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000acb4:	50                   	push   eax
c000acb5:	50                   	push   eax
c000acb6:	6a 01                	push   0x1
c000acb8:	53                   	push   ebx
c000acb9:	e8 4c ff ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000acbe:	5a                   	pop    edx
c000acbf:	59                   	pop    ecx
c000acc0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000acc3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000acc6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acc9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000accc:	6a 20                	push   0x20
c000acce:	53                   	push   ebx
c000accf:	e8 b2 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acd4:	83 c4 28             	add    esp,0x28
c000acd7:	5b                   	pop    ebx
c000acd8:	c3                   	ret    
c000acd9:	83 ec 08             	sub    esp,0x8
c000acdc:	0f be c0             	movsx  eax,al
c000acdf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ace2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ace5:	51                   	push   ecx
c000ace6:	52                   	push   edx
c000ace7:	50                   	push   eax
c000ace8:	53                   	push   ebx
c000ace9:	e8 98 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acee:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000acf2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000acfa:	83 c4 28             	add    esp,0x28
c000acfd:	5b                   	pop    ebx
c000acfe:	e9 b3 fe ff ff       	jmp    c000abb6 <VgaText::incrementCursor(bool)>
c000ad03:	90                   	nop

c000ad04 <VgaText::doUpdate()>:
c000ad04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad08:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ad0b:	85 c0                	test   eax,eax
c000ad0d:	74 02                	je     c000ad11 <VgaText::doUpdate()+0xd>
c000ad0f:	ff e0                	jmp    eax
c000ad11:	c3                   	ret    

c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000ad12:	55                   	push   ebp
c000ad13:	31 ed                	xor    ebp,ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	83 ec 1c             	sub    esp,0x1c
c000ad1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ad1f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad24:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ad2b:	50                   	push   eax
c000ad2c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad31:	50                   	push   eax
c000ad32:	e8 97 fc ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000ad37:	59                   	pop    ecx
c000ad38:	0f b6 c0             	movzx  eax,al
c000ad3b:	5e                   	pop    esi
c000ad3c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ad45:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad4c:	0f b7 f6             	movzx  esi,si
c000ad4f:	01 f6                	add    esi,esi
c000ad51:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad54:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad57:	84 c0                	test   al,al
c000ad59:	0f 84 fd 00 00 00    	je     c000ae5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000ad5f:	3c 0d                	cmp    al,0xd
c000ad61:	75 0c                	jne    c000ad6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000ad63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad6a:	e9 e7 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad6f:	3c 0a                	cmp    al,0xa
c000ad71:	75 47                	jne    c000adba <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000ad73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad7d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ad80:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000ad83:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000ad86:	75 0f                	jne    c000ad97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000ad88:	83 ec 0c             	sub    esp,0xc
c000ad8b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ad8e:	53                   	push   ebx
c000ad8f:	e8 4c fc ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000ad94:	83 c4 10             	add    esp,0x10
c000ad97:	83 ec 0c             	sub    esp,0xc
c000ad9a:	31 ed                	xor    ebp,ebp
c000ad9c:	53                   	push   ebx
c000ad9d:	e8 1c fb ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ada2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000adad:	0f b7 f6             	movzx  esi,si
c000adb0:	01 f6                	add    esi,esi
c000adb2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adb5:	e9 9c 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adba:	3c 08                	cmp    al,0x8
c000adbc:	75 35                	jne    c000adf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000adbe:	56                   	push   esi
c000adbf:	56                   	push   esi
c000adc0:	6a 01                	push   0x1
c000adc2:	53                   	push   ebx
c000adc3:	e8 42 fe ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000adc8:	58                   	pop    eax
c000adc9:	5a                   	pop    edx
c000adca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000adcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000add0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000add3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000add6:	6a 20                	push   0x20
c000add8:	53                   	push   ebx
c000add9:	e8 a8 fc ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000adde:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ade3:	83 c4 20             	add    esp,0x20
c000ade6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ade9:	0f b7 f6             	movzx  esi,si
c000adec:	01 f6                	add    esi,esi
c000adee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adf1:	eb 63                	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adf3:	51                   	push   ecx
c000adf4:	51                   	push   ecx
c000adf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adf9:	50                   	push   eax
c000adfa:	e8 75 fc ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000adff:	83 c4 10             	add    esp,0x10
c000ae02:	66 89 06             	mov    WORD PTR [esi],ax
c000ae05:	39 1d 64 81 02 c0    	cmp    DWORD PTR ds:0xc0028164,ebx
c000ae0b:	75 21                	jne    c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae0d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ae10:	85 c0                	test   eax,eax
c000ae12:	74 1a                	je     c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae14:	52                   	push   edx
c000ae15:	52                   	push   edx
c000ae16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae19:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae24:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ae27:	51                   	push   ecx
c000ae28:	53                   	push   ebx
c000ae29:	ff d0                	call   eax
c000ae2b:	83 c4 20             	add    esp,0x20
c000ae2e:	83 c6 02             	add    esi,0x2
c000ae31:	50                   	push   eax
c000ae32:	50                   	push   eax
c000ae33:	6a 00                	push   0x0
c000ae35:	53                   	push   ebx
c000ae36:	e8 7b fd ff ff       	call   c000abb6 <VgaText::incrementCursor(bool)>
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ae42:	75 0d                	jne    c000ae51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ae44:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ae49:	0f b7 f6             	movzx  esi,si
c000ae4c:	01 f6                	add    esi,esi
c000ae4e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ae51:	bd 01 00 00 00       	mov    ebp,0x1
c000ae56:	47                   	inc    edi
c000ae57:	e9 f8 fe ff ff       	jmp    c000ad54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ae5c:	83 ec 0c             	sub    esp,0xc
c000ae5f:	53                   	push   ebx
c000ae60:	e8 59 fa ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 e8                	mov    eax,ebp
c000ae6a:	84 c0                	test   al,al
c000ae6c:	74 0c                	je     c000ae7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	53                   	push   ebx
c000ae72:	e8 8d fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae81:	83 c4 1c             	add    esp,0x1c
c000ae84:	5b                   	pop    ebx
c000ae85:	5e                   	pop    esi
c000ae86:	5f                   	pop    edi
c000ae87:	5d                   	pop    ebp
c000ae88:	c3                   	ret    
c000ae89:	90                   	nop

c000ae8a <VgaText::clearScreen()>:
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	31 f6                	xor    esi,esi
c000ae8e:	53                   	push   ebx
c000ae8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae93:	52                   	push   edx
c000ae94:	6a 00                	push   0x0
c000ae96:	6a 00                	push   0x0
c000ae98:	53                   	push   ebx
c000ae99:	e8 54 fc ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ae9e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000aeab:	7e 20                	jle    c000aecd <VgaText::clearScreen()+0x43>
c000aead:	31 ff                	xor    edi,edi
c000aeaf:	50                   	push   eax
c000aeb0:	50                   	push   eax
c000aeb1:	56                   	push   esi
c000aeb2:	57                   	push   edi
c000aeb3:	47                   	inc    edi
c000aeb4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aeb7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aeba:	6a 20                	push   0x20
c000aebc:	53                   	push   ebx
c000aebd:	e8 c4 fb ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aec2:	83 c4 20             	add    esp,0x20
c000aec5:	83 ff 50             	cmp    edi,0x50
c000aec8:	75 e5                	jne    c000aeaf <VgaText::clearScreen()+0x25>
c000aeca:	46                   	inc    esi
c000aecb:	eb db                	jmp    c000aea8 <VgaText::clearScreen()+0x1e>
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	53                   	push   ebx
c000aed1:	e8 2e fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000aed6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aedd:	83 c4 10             	add    esp,0x10
c000aee0:	5b                   	pop    ebx
c000aee1:	5e                   	pop    esi
c000aee2:	5f                   	pop    edi
c000aee3:	c3                   	ret    

c000aee4 <VgaText::putchar(char)>:
c000aee4:	56                   	push   esi
c000aee5:	53                   	push   ebx
c000aee6:	83 ec 14             	sub    esp,0x14
c000aee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aeed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aef1:	3c 5b                	cmp    al,0x5b
c000aef3:	75 18                	jne    c000af0d <VgaText::putchar(char)+0x29>
c000aef5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aef9:	74 1f                	je     c000af1a <VgaText::putchar(char)+0x36>
c000aefb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000af01:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000af08:	e9 bd 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af0d:	3c 1b                	cmp    al,0x1b
c000af0f:	75 09                	jne    c000af1a <VgaText::putchar(char)+0x36>
c000af11:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000af15:	e9 b0 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af1a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000af1d:	84 c9                	test   cl,cl
c000af1f:	0f 84 92 00 00 00    	je     c000afb7 <VgaText::putchar(char)+0xd3>
c000af25:	8d 50 c0             	lea    edx,[eax-0x40]
c000af28:	80 fa 3e             	cmp    dl,0x3e
c000af2b:	77 76                	ja     c000afa3 <VgaText::putchar(char)+0xbf>
c000af2d:	3c 6d                	cmp    al,0x6d
c000af2f:	75 47                	jne    c000af78 <VgaText::putchar(char)+0x94>
c000af31:	31 f6                	xor    esi,esi
c000af33:	31 d2                	xor    edx,edx
c000af35:	31 c0                	xor    eax,eax
c000af37:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000af3a:	7e 2d                	jle    c000af69 <VgaText::putchar(char)+0x85>
c000af3c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000af41:	80 fa 3b             	cmp    dl,0x3b
c000af44:	75 17                	jne    c000af5d <VgaText::putchar(char)+0x79>
c000af46:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000af4a:	50                   	push   eax
c000af4b:	53                   	push   ebx
c000af4c:	e8 83 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af51:	59                   	pop    ecx
c000af52:	31 d2                	xor    edx,edx
c000af54:	58                   	pop    eax
c000af55:	31 c0                	xor    eax,eax
c000af57:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000af5b:	eb 09                	jmp    c000af66 <VgaText::putchar(char)+0x82>
c000af5d:	6b c0 0a             	imul   eax,eax,0xa
c000af60:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000af64:	88 ca                	mov    dl,cl
c000af66:	46                   	inc    esi
c000af67:	eb ce                	jmp    c000af37 <VgaText::putchar(char)+0x53>
c000af69:	84 d2                	test   dl,dl
c000af6b:	74 2e                	je     c000af9b <VgaText::putchar(char)+0xb7>
c000af6d:	50                   	push   eax
c000af6e:	53                   	push   ebx
c000af6f:	e8 60 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af74:	58                   	pop    eax
c000af75:	5a                   	pop    edx
c000af76:	eb 23                	jmp    c000af9b <VgaText::putchar(char)+0xb7>
c000af78:	3c 4a                	cmp    al,0x4a
c000af7a:	75 1f                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af7c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000af80:	75 19                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af82:	83 ec 0c             	sub    esp,0xc
c000af85:	53                   	push   ebx
c000af86:	e8 ff fe ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000af8b:	83 c4 0c             	add    esp,0xc
c000af8e:	6a 00                	push   0x0
c000af90:	6a 00                	push   0x0
c000af92:	53                   	push   ebx
c000af93:	e8 5a fb ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000af98:	83 c4 10             	add    esp,0x10
c000af9b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000afa1:	eb 27                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afa3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000afa6:	83 fa 0e             	cmp    edx,0xe
c000afa9:	7f 1f                	jg     c000afca <VgaText::putchar(char)+0xe6>
c000afab:	8d 4a 01             	lea    ecx,[edx+0x1]
c000afae:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000afb1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000afb5:	eb 13                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afb7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000afba:	0f be c0             	movsx  eax,al
c000afbd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000afc0:	50                   	push   eax
c000afc1:	53                   	push   ebx
c000afc2:	e8 65 fc ff ff       	call   c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	83 c4 14             	add    esp,0x14
c000afcd:	5b                   	pop    ebx
c000afce:	5e                   	pop    esi
c000afcf:	c3                   	ret    

c000afd0 <VgaText::putx(unsigned int)>:
c000afd0:	57                   	push   edi
c000afd1:	b9 11 00 00 00       	mov    ecx,0x11
c000afd6:	56                   	push   esi
c000afd7:	be a6 43 02 c0       	mov    esi,0xc00243a6
c000afdc:	53                   	push   ebx
c000afdd:	83 ec 20             	sub    esp,0x20
c000afe0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000afe4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000afe8:	fc                   	cld    
c000afe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000afeb:	be 08 00 00 00       	mov    esi,0x8
c000aff0:	50                   	push   eax
c000aff1:	50                   	push   eax
c000aff2:	89 d8                	mov    eax,ebx
c000aff4:	c1 e3 04             	shl    ebx,0x4
c000aff7:	c1 e8 1c             	shr    eax,0x1c
c000affa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000afff:	50                   	push   eax
c000b000:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b004:	e8 db fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b009:	83 c4 10             	add    esp,0x10
c000b00c:	4e                   	dec    esi
c000b00d:	75 e1                	jne    c000aff0 <VgaText::putx(unsigned int)+0x20>
c000b00f:	83 c4 20             	add    esp,0x20
c000b012:	5b                   	pop    ebx
c000b013:	5e                   	pop    esi
c000b014:	5f                   	pop    edi
c000b015:	c3                   	ret    

c000b016 <VgaText::puts(char const*)>:
c000b016:	53                   	push   ebx
c000b017:	83 ec 08             	sub    esp,0x8
c000b01a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b01e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b021:	84 c0                	test   al,al
c000b023:	74 12                	je     c000b037 <VgaText::puts(char const*)+0x21>
c000b025:	43                   	inc    ebx
c000b026:	51                   	push   ecx
c000b027:	51                   	push   ecx
c000b028:	50                   	push   eax
c000b029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02d:	e8 b2 fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	eb e7                	jmp    c000b01e <VgaText::puts(char const*)+0x8>
c000b037:	83 c4 08             	add    esp,0x8
c000b03a:	5b                   	pop    ebx
c000b03b:	c3                   	ret    

c000b03c <VgaText::VgaText(char const*)>:
c000b03c:	57                   	push   edi
c000b03d:	56                   	push   esi
c000b03e:	53                   	push   ebx
c000b03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b043:	83 ec 08             	sub    esp,0x8
c000b046:	6a 00                	push   0x0
c000b048:	50                   	push   eax
c000b049:	e8 48 05 00 00       	call   c000b596 <UnixFile::UnixFile(int)>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	ba 0c 44 02 c0       	mov    edx,0xc002440c
c000b056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05a:	89 10                	mov    DWORD PTR [eax],edx
c000b05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b060:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b086:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b091:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b2:	8d 50 60             	lea    edx,[eax+0x60]
c000b0b5:	bb 40 81 02 c0       	mov    ebx,0xc0028140
c000b0ba:	b8 08 00 00 00       	mov    eax,0x8
c000b0bf:	fc                   	cld    
c000b0c0:	89 d7                	mov    edi,edx
c000b0c2:	89 de                	mov    esi,ebx
c000b0c4:	89 c1                	mov    ecx,eax
c000b0c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	05 82 00 00 00       	add    eax,0x82
c000b0d1:	83 ec 08             	sub    esp,0x8
c000b0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d8:	50                   	push   eax
c000b0d9:	e8 62 56 ff ff       	call   c0000740 <strcpy>
c000b0de:	83 c4 10             	add    esp,0x10
c000b0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	6a 01                	push   0x1
c000b0f1:	e8 e3 08 00 00       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	89 c2                	mov    edx,eax
c000b0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b102:	8b 1d 10 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028210
c000b108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b10f:	89 c6                	mov    esi,eax
c000b111:	e8 b0 ef ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000b116:	68 05 0c 00 00       	push   0xc05
c000b11b:	56                   	push   esi
c000b11c:	50                   	push   eax
c000b11d:	53                   	push   ebx
c000b11e:	e8 5d 0f 00 00       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b123:	83 c4 10             	add    esp,0x10
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b12d:	83 ec 04             	sub    esp,0x4
c000b130:	68 00 0f 00 00       	push   0xf00
c000b135:	6a 00                	push   0x0
c000b137:	50                   	push   eax
c000b138:	e8 47 55 ff ff       	call   c0000684 <memset>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	83 ec 04             	sub    esp,0x4
c000b143:	6a 00                	push   0x0
c000b145:	6a 07                	push   0x7
c000b147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b14b:	e8 18 f8 ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	83 ec 04             	sub    esp,0x4
c000b156:	6a 00                	push   0x0
c000b158:	6a 00                	push   0x0
c000b15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b15e:	e8 8f f9 ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b16d:	e8 18 fd ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b179:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b181:	05 02 01 00 00       	add    eax,0x102
c000b186:	83 ec 04             	sub    esp,0x4
c000b189:	68 96 00 00 00       	push   0x96
c000b18e:	6a 00                	push   0x0
c000b190:	50                   	push   eax
c000b191:	e8 ee 54 ff ff       	call   c0000684 <memset>
c000b196:	83 c4 10             	add    esp,0x10
c000b199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19d:	05 98 01 00 00       	add    eax,0x198
c000b1a2:	83 ec 04             	sub    esp,0x4
c000b1a5:	68 2c 01 00 00       	push   0x12c
c000b1aa:	6a 00                	push   0x0
c000b1ac:	50                   	push   eax
c000b1ad:	e8 d2 54 ff ff       	call   c0000684 <memset>
c000b1b2:	83 c4 10             	add    esp,0x10
c000b1b5:	90                   	nop
c000b1b6:	5b                   	pop    ebx
c000b1b7:	5e                   	pop    esi
c000b1b8:	5f                   	pop    edi
c000b1b9:	c3                   	ret    

c000b1ba <VgaText::receiveKey(unsigned char)>:
c000b1ba:	55                   	push   ebp
c000b1bb:	57                   	push   edi
c000b1bc:	56                   	push   esi
c000b1bd:	53                   	push   ebx
c000b1be:	83 ec 1c             	sub    esp,0x1c
c000b1c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b1c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b1c9:	84 db                	test   bl,bl
c000b1cb:	0f 84 c9 00 00 00    	je     c000b29a <VgaText::receiveKey(unsigned char)+0xe0>
c000b1d1:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b1d7:	80 fb 08             	cmp    bl,0x8
c000b1da:	75 2c                	jne    c000b208 <VgaText::receiveKey(unsigned char)+0x4e>
c000b1dc:	83 ec 0c             	sub    esp,0xc
c000b1df:	57                   	push   edi
c000b1e0:	e8 bb 54 ff ff       	call   c00006a0 <strlen>
c000b1e5:	83 c4 10             	add    esp,0x10
c000b1e8:	85 c0                	test   eax,eax
c000b1ea:	74 41                	je     c000b22d <VgaText::receiveKey(unsigned char)+0x73>
c000b1ec:	50                   	push   eax
c000b1ed:	50                   	push   eax
c000b1ee:	6a 08                	push   0x8
c000b1f0:	56                   	push   esi
c000b1f1:	e8 ee fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b1f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b1f9:	e8 a2 54 ff ff       	call   c00006a0 <strlen>
c000b1fe:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b206:	eb 22                	jmp    c000b22a <VgaText::receiveKey(unsigned char)+0x70>
c000b208:	0f be c3             	movsx  eax,bl
c000b20b:	52                   	push   edx
c000b20c:	52                   	push   edx
c000b20d:	50                   	push   eax
c000b20e:	56                   	push   esi
c000b20f:	e8 d0 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b214:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b218:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b21d:	59                   	pop    ecx
c000b21e:	5d                   	pop    ebp
c000b21f:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b223:	50                   	push   eax
c000b224:	57                   	push   edi
c000b225:	e8 56 56 ff ff       	call   c0000880 <strcat>
c000b22a:	83 c4 10             	add    esp,0x10
c000b22d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b234:	75 05                	jne    c000b23b <VgaText::receiveKey(unsigned char)+0x81>
c000b236:	80 fb 0a             	cmp    bl,0xa
c000b239:	75 53                	jne    c000b28e <VgaText::receiveKey(unsigned char)+0xd4>
c000b23b:	83 ec 0c             	sub    esp,0xc
c000b23e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000b244:	53                   	push   ebx
c000b245:	e8 56 54 ff ff       	call   c00006a0 <strlen>
c000b24a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b24d:	89 c5                	mov    ebp,eax
c000b24f:	e8 4c 54 ff ff       	call   c00006a0 <strlen>
c000b254:	83 c4 10             	add    esp,0x10
c000b257:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b25b:	3d 2c 01 00 00       	cmp    eax,0x12c
c000b260:	76 10                	jbe    c000b272 <VgaText::receiveKey(unsigned char)+0xb8>
c000b262:	83 ec 0c             	sub    esp,0xc
c000b265:	68 b7 43 02 c0       	push   0xc00243b7
c000b26a:	e8 58 97 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000b26f:	83 c4 10             	add    esp,0x10
c000b272:	50                   	push   eax
c000b273:	50                   	push   eax
c000b274:	57                   	push   edi
c000b275:	53                   	push   ebx
c000b276:	e8 05 56 ff ff       	call   c0000880 <strcat>
c000b27b:	83 c4 0c             	add    esp,0xc
c000b27e:	68 96 00 00 00       	push   0x96
c000b283:	6a 00                	push   0x0
c000b285:	57                   	push   edi
c000b286:	e8 f9 53 ff ff       	call   c0000684 <memset>
c000b28b:	83 c4 10             	add    esp,0x10
c000b28e:	83 ec 0c             	sub    esp,0xc
c000b291:	56                   	push   esi
c000b292:	e8 6d fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b297:	83 c4 10             	add    esp,0x10
c000b29a:	83 c4 1c             	add    esp,0x1c
c000b29d:	5b                   	pop    ebx
c000b29e:	5e                   	pop    esi
c000b29f:	5f                   	pop    edi
c000b2a0:	5d                   	pop    ebp
c000b2a1:	c3                   	ret    

c000b2a2 <VgaText::write(unsigned long long, void*, int*)>:
c000b2a2:	55                   	push   ebp
c000b2a3:	57                   	push   edi
c000b2a4:	56                   	push   esi
c000b2a5:	53                   	push   ebx
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b2ad:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b2b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b2b5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b2bc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b2bf:	39 eb                	cmp    ebx,ebp
c000b2c1:	74 13                	je     c000b2d6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b2c3:	43                   	inc    ebx
c000b2c4:	50                   	push   eax
c000b2c5:	50                   	push   eax
c000b2c6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b2ca:	50                   	push   eax
c000b2cb:	56                   	push   esi
c000b2cc:	e8 13 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b2d1:	83 c4 10             	add    esp,0x10
c000b2d4:	eb e9                	jmp    c000b2bf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b2d6:	83 ec 0c             	sub    esp,0xc
c000b2d9:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b2e0:	56                   	push   esi
c000b2e1:	e8 1e fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b2e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b2ea:	89 38                	mov    DWORD PTR [eax],edi
c000b2ec:	83 c4 1c             	add    esp,0x1c
c000b2ef:	31 c0                	xor    eax,eax
c000b2f1:	5b                   	pop    ebx
c000b2f2:	5e                   	pop    esi
c000b2f3:	5f                   	pop    edi
c000b2f4:	5d                   	pop    ebp
c000b2f5:	c3                   	ret    

c000b2f6 <newTerminal(char*)>:
c000b2f6:	83 ec 28             	sub    esp,0x28
c000b2f9:	68 c4 02 00 00       	push   0x2c4
c000b2fe:	e8 0c e7 ff ff       	call   c0009a0f <malloc>
c000b303:	5a                   	pop    edx
c000b304:	59                   	pop    ecx
c000b305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b309:	50                   	push   eax
c000b30a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b30e:	e8 29 fd ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c000b313:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b317:	83 c4 2c             	add    esp,0x2c
c000b31a:	c3                   	ret    
c000b31b:	90                   	nop

c000b31c <TSS::TSS()>:
c000b31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b320:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b327:	90                   	nop
c000b328:	c3                   	ret    
c000b329:	90                   	nop
c000b32a:	66 90                	xchg   ax,ax

c000b32c <TSS::setESP(unsigned long)>:
c000b32c:	55                   	push   ebp
c000b32d:	89 e5                	mov    ebp,esp
c000b32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b332:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b335:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b338:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b33b:	90                   	nop
c000b33c:	5d                   	pop    ebp
c000b33d:	c3                   	ret    
c000b33e:	66 90                	xchg   ax,ax

c000b340 <TSS::flush()>:
c000b340:	55                   	push   ebp
c000b341:	89 e5                	mov    ebp,esp
c000b343:	83 ec 10             	sub    esp,0x10
c000b346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b349:	8b 00                	mov    eax,DWORD PTR [eax]
c000b34b:	83 c8 03             	or     eax,0x3
c000b34e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b352:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b356:	66 89 d0             	mov    ax,dx
c000b359:	0f 00 d8             	ltr    ax
c000b35c:	90                   	nop
c000b35d:	c9                   	leave  
c000b35e:	c3                   	ret    
c000b35f:	90                   	nop

c000b360 <TSS::setup(unsigned long, unsigned long)>:
c000b360:	55                   	push   ebp
c000b361:	89 e5                	mov    ebp,esp
c000b363:	83 ec 18             	sub    esp,0x18
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	6a 68                	push   0x68
c000b36b:	e8 9f e6 ff ff       	call   c0009a0f <malloc>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	89 c2                	mov    edx,eax
c000b375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b378:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b37b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b37e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b381:	83 ec 04             	sub    esp,0x4
c000b384:	6a 68                	push   0x68
c000b386:	6a 00                	push   0x0
c000b388:	50                   	push   eax
c000b389:	e8 f6 52 ff ff       	call   c0000684 <memset>
c000b38e:	83 c4 10             	add    esp,0x10
c000b391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b397:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3a3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b3a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b3b2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3bb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b3c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3c7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b3cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3d3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b3d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3df:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3eb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3f7:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b3fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b400:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b403:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b406:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b409:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b40c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b40f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b412:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b418:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b41b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b425:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b428:	0f 20 da             	mov    edx,cr3
c000b42b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b42e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b431:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b437:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b43a:	83 ec 08             	sub    esp,0x8
c000b43d:	50                   	push   eax
c000b43e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b441:	50                   	push   eax
c000b442:	e8 23 de ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000b447:	83 c4 10             	add    esp,0x10
c000b44a:	83 ec 08             	sub    esp,0x8
c000b44d:	6a 68                	push   0x68
c000b44f:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b452:	50                   	push   eax
c000b453:	e8 2e de ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c000b458:	83 c4 10             	add    esp,0x10
c000b45b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b45f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b462:	83 e0 0f             	and    eax,0xf
c000b465:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b468:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b46b:	83 c8 40             	or     eax,0x40
c000b46e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b471:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000b476:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b47c:	05 78 01 00 00       	add    eax,0x178
c000b481:	83 ec 04             	sub    esp,0x4
c000b484:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b487:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b48a:	50                   	push   eax
c000b48b:	e8 2a de ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	89 c2                	mov    edx,eax
c000b495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b498:	89 10                	mov    DWORD PTR [eax],edx
c000b49a:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000b49f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b4a5:	05 78 01 00 00       	add    eax,0x178
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	50                   	push   eax
c000b4ae:	e8 31 de ff ff       	call   c00092e4 <GDT::flush()>
c000b4b3:	83 c4 10             	add    esp,0x10
c000b4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4b9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4bb:	c9                   	leave  
c000b4bc:	c3                   	ret    
c000b4bd:	90                   	nop

c000b4be <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b4be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b4ce:	75 08                	jne    c000b4d8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b4d0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b4d6:	eb 38                	jmp    c000b510 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b4d8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b4dd:	75 17                	jne    c000b4f6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b4df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b4e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b4e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4ed:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4f3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b4f6:	89 c1                	mov    ecx,eax
c000b4f8:	83 e1 fd             	and    ecx,0xfffffffd
c000b4fb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b501:	74 cd                	je     c000b4d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b503:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b508:	83 e0 ef             	and    eax,0xffffffef
c000b50b:	83 f8 08             	cmp    eax,0x8
c000b50e:	76 c0                	jbe    c000b4d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b510:	31 c0                	xor    eax,eax
c000b512:	c3                   	ret    
c000b513:	90                   	nop

c000b514 <ReservedFilename::isAtty()>:
c000b514:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b518:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b51b:	31 c0                	xor    eax,eax
c000b51d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b523:	74 09                	je     c000b52e <ReservedFilename::isAtty()+0x1a>
c000b525:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b52b:	0f 94 c0             	sete   al
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b534:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b538:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b53b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b53f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b544:	75 08                	jne    c000b54e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b546:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b54c:	eb 3d                	jmp    c000b58b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b54e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b553:	75 17                	jne    c000b56c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b555:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b55a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b55d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b563:	8b 10                	mov    edx,DWORD PTR [eax]
c000b565:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b569:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b56c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b571:	75 04                	jne    c000b577 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b573:	89 0a                	mov    DWORD PTR [edx],ecx
c000b575:	eb 14                	jmp    c000b58b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b577:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b57c:	74 c8                	je     c000b546 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b57e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b583:	83 e0 ef             	and    eax,0xffffffef
c000b586:	83 f8 08             	cmp    eax,0x8
c000b589:	76 bb                	jbe    c000b546 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b58b:	31 c0                	xor    eax,eax
c000b58d:	c3                   	ret    

c000b58e <UnixFile::getFileDescriptor()>:
c000b58e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b595:	c3                   	ret    

c000b596 <UnixFile::UnixFile(int)>:
c000b596:	53                   	push   ebx
c000b597:	83 ec 28             	sub    esp,0x28
c000b59a:	ba d4 44 02 c0       	mov    edx,0xc00244d4
c000b59f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5a3:	89 10                	mov    DWORD PTR [eax],edx
c000b5a5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b5ad:	0f 8f 8c 01 00 00    	jg     c000b73f <UnixFile::UnixFile(int)+0x1a9>
c000b5b3:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c000b5b8:	8d 50 01             	lea    edx,[eax+0x1]
c000b5bb:	89 15 20 75 02 c0    	mov    DWORD PTR ds:0xc0027520,edx
c000b5c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5c5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b5c8:	83 ec 08             	sub    esp,0x8
c000b5cb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b5cf:	68 f8 81 02 c0       	push   0xc00281f8
c000b5d4:	e8 03 75 01 00       	call   c0022adc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b5d9:	83 c4 10             	add    esp,0x10
c000b5dc:	a0 f4 81 02 c0       	mov    al,ds:0xc00281f4
c000b5e1:	83 f0 01             	xor    eax,0x1
c000b5e4:	84 c0                	test   al,al
c000b5e6:	0f 84 54 01 00 00    	je     c000b740 <UnixFile::UnixFile(int)+0x1aa>
c000b5ec:	c6 05 f4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281f4,0x1
c000b5f3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b5fb:	83 ec 0c             	sub    esp,0xc
c000b5fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b602:	e8 08 e4 ff ff       	call   c0009a0f <malloc>
c000b607:	83 c4 10             	add    esp,0x10
c000b60a:	89 c3                	mov    ebx,eax
c000b60c:	83 ec 08             	sub    esp,0x8
c000b60f:	68 03 ff ff 0f       	push   0xfffff03
c000b614:	53                   	push   ebx
c000b615:	e8 2c 01 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b61a:	83 c4 10             	add    esp,0x10
c000b61d:	89 1d ec 81 02 c0    	mov    DWORD PTR ds:0xc00281ec,ebx
c000b623:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b62b:	83 ec 0c             	sub    esp,0xc
c000b62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b632:	e8 d8 e3 ff ff       	call   c0009a0f <malloc>
c000b637:	83 c4 10             	add    esp,0x10
c000b63a:	89 c3                	mov    ebx,eax
c000b63c:	83 ec 08             	sub    esp,0x8
c000b63f:	68 01 ff ff 0f       	push   0xfffff01
c000b644:	53                   	push   ebx
c000b645:	e8 fc 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b64a:	83 c4 10             	add    esp,0x10
c000b64d:	89 1d f0 81 02 c0    	mov    DWORD PTR ds:0xc00281f0,ebx
c000b653:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b65b:	83 ec 0c             	sub    esp,0xc
c000b65e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b662:	e8 a8 e3 ff ff       	call   c0009a0f <malloc>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	89 c3                	mov    ebx,eax
c000b66c:	83 ec 08             	sub    esp,0x8
c000b66f:	68 00 ff ff 0f       	push   0xfffff00
c000b674:	53                   	push   ebx
c000b675:	e8 cc 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b67a:	83 c4 10             	add    esp,0x10
c000b67d:	89 1d e4 81 02 c0    	mov    DWORD PTR ds:0xc00281e4,ebx
c000b683:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b68b:	83 ec 0c             	sub    esp,0xc
c000b68e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b692:	e8 78 e3 ff ff       	call   c0009a0f <malloc>
c000b697:	83 c4 10             	add    esp,0x10
c000b69a:	89 c3                	mov    ebx,eax
c000b69c:	83 ec 08             	sub    esp,0x8
c000b69f:	68 02 ff ff 0f       	push   0xfffff02
c000b6a4:	53                   	push   ebx
c000b6a5:	e8 9c 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	89 1d e8 81 02 c0    	mov    DWORD PTR ds:0xc00281e8,ebx
c000b6b3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b6bb:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b6c0:	7f 7e                	jg     c000b740 <UnixFile::UnixFile(int)+0x1aa>
c000b6c2:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b6ca:	83 ec 0c             	sub    esp,0xc
c000b6cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b6d1:	e8 39 e3 ff ff       	call   c0009a0f <malloc>
c000b6d6:	83 c4 10             	add    esp,0x10
c000b6d9:	89 c3                	mov    ebx,eax
c000b6db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6df:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b6e4:	83 ec 08             	sub    esp,0x8
c000b6e7:	50                   	push   eax
c000b6e8:	53                   	push   ebx
c000b6e9:	e8 58 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b6ee:	83 c4 10             	add    esp,0x10
c000b6f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f5:	89 1c 85 c0 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7e40],ebx
c000b6fc:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b704:	83 ec 0c             	sub    esp,0xc
c000b707:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70b:	e8 ff e2 ff ff       	call   c0009a0f <malloc>
c000b710:	83 c4 10             	add    esp,0x10
c000b713:	89 c3                	mov    ebx,eax
c000b715:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b719:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b71e:	83 ec 08             	sub    esp,0x8
c000b721:	50                   	push   eax
c000b722:	53                   	push   ebx
c000b723:	e8 1e 00 00 00       	call   c000b746 <ReservedFilename::ReservedFilename(int)>
c000b728:	83 c4 10             	add    esp,0x10
c000b72b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b72f:	89 1c 85 80 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7e80],ebx
c000b736:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b73a:	e9 7c ff ff ff       	jmp    c000b6bb <UnixFile::UnixFile(int)+0x125>
c000b73f:	90                   	nop
c000b740:	83 c4 28             	add    esp,0x28
c000b743:	5b                   	pop    ebx
c000b744:	c3                   	ret    
c000b745:	90                   	nop

c000b746 <ReservedFilename::ReservedFilename(int)>:
c000b746:	83 ec 0c             	sub    esp,0xc
c000b749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b74d:	83 ec 08             	sub    esp,0x8
c000b750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b754:	50                   	push   eax
c000b755:	e8 3c fe ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000b75a:	83 c4 10             	add    esp,0x10
c000b75d:	ba f0 44 02 c0       	mov    edx,0xc00244f0
c000b762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b766:	89 10                	mov    DWORD PTR [eax],edx
c000b768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b76c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b770:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b773:	90                   	nop
c000b774:	83 c4 0c             	add    esp,0xc
c000b777:	c3                   	ret    

c000b778 <UnixFile::~UnixFile()>:
c000b778:	83 ec 1c             	sub    esp,0x1c
c000b77b:	ba d4 44 02 c0       	mov    edx,0xc00244d4
c000b780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b784:	89 10                	mov    DWORD PTR [eax],edx
c000b786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b78a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b78d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b792:	7f 73                	jg     c000b807 <UnixFile::~UnixFile()+0x8f>
c000b794:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b79c:	83 ec 0c             	sub    esp,0xc
c000b79f:	68 f8 81 02 c0       	push   0xc00281f8
c000b7a4:	e8 07 74 01 00       	call   c0022bb0 <LinkedList<UnixFile>::getFirstElement()>
c000b7a9:	83 c4 10             	add    esp,0x10
c000b7ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7b0:	83 ec 0c             	sub    esp,0xc
c000b7b3:	68 f8 81 02 c0       	push   0xc00281f8
c000b7b8:	e8 fb 73 01 00       	call   c0022bb8 <LinkedList<UnixFile>::removeFirst()>
c000b7bd:	83 c4 10             	add    esp,0x10
c000b7c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b7c8:	74 40                	je     c000b80a <UnixFile::~UnixFile()+0x92>
c000b7ca:	83 ec 08             	sub    esp,0x8
c000b7cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7d1:	68 f8 81 02 c0       	push   0xc00281f8
c000b7d6:	e8 01 73 01 00       	call   c0022adc <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b7db:	83 c4 10             	add    esp,0x10
c000b7de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7e2:	8d 50 01             	lea    edx,[eax+0x1]
c000b7e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7e9:	3d 88 13 00 00       	cmp    eax,0x1388
c000b7ee:	0f 94 c0             	sete   al
c000b7f1:	84 c0                	test   al,al
c000b7f3:	74 a7                	je     c000b79c <UnixFile::~UnixFile()+0x24>
c000b7f5:	83 ec 0c             	sub    esp,0xc
c000b7f8:	68 ac 44 02 c0       	push   0xc00244ac
c000b7fd:	e8 c5 91 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000b802:	83 c4 10             	add    esp,0x10
c000b805:	eb 95                	jmp    c000b79c <UnixFile::~UnixFile()+0x24>
c000b807:	90                   	nop
c000b808:	eb 01                	jmp    c000b80b <UnixFile::~UnixFile()+0x93>
c000b80a:	90                   	nop
c000b80b:	90                   	nop
c000b80c:	83 c4 1c             	add    esp,0x1c
c000b80f:	c3                   	ret    

c000b810 <UnixFile::~UnixFile()>:
c000b810:	83 ec 0c             	sub    esp,0xc
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b81a:	e8 59 ff ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	83 ec 08             	sub    esp,0x8
c000b825:	6a 0c                	push   0xc
c000b827:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b82b:	e8 ee 13 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000b830:	83 c4 10             	add    esp,0x10
c000b833:	83 c4 0c             	add    esp,0xc
c000b836:	c3                   	ret    
c000b837:	90                   	nop

c000b838 <ReservedFilename::~ReservedFilename()>:
c000b838:	83 ec 0c             	sub    esp,0xc
c000b83b:	ba f0 44 02 c0       	mov    edx,0xc00244f0
c000b840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b844:	89 10                	mov    DWORD PTR [eax],edx
c000b846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b84a:	83 ec 0c             	sub    esp,0xc
c000b84d:	50                   	push   eax
c000b84e:	e8 25 ff ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000b853:	83 c4 10             	add    esp,0x10
c000b856:	90                   	nop
c000b857:	83 c4 0c             	add    esp,0xc
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <ReservedFilename::~ReservedFilename()>:
c000b85c:	83 ec 0c             	sub    esp,0xc
c000b85f:	83 ec 0c             	sub    esp,0xc
c000b862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b866:	e8 cd ff ff ff       	call   c000b838 <ReservedFilename::~ReservedFilename()>
c000b86b:	83 c4 10             	add    esp,0x10
c000b86e:	83 ec 08             	sub    esp,0x8
c000b871:	6a 0c                	push   0xc
c000b873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b877:	e8 a2 13 00 00       	call   c000cc1e <operator delete(void*, unsigned long)>
c000b87c:	83 c4 10             	add    esp,0x10
c000b87f:	83 c4 0c             	add    esp,0xc
c000b882:	c3                   	ret    

c000b883 <getFromFileDescriptor(int)>:
c000b883:	53                   	push   ebx
c000b884:	83 ec 08             	sub    esp,0x8
c000b887:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b88b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b891:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b897:	7f 2c                	jg     c000b8c5 <getFromFileDescriptor(int)+0x42>
c000b899:	83 ec 0c             	sub    esp,0xc
c000b89c:	68 f8 81 02 c0       	push   0xc00281f8
c000b8a1:	e8 0a 73 01 00       	call   c0022bb0 <LinkedList<UnixFile>::getFirstElement()>
c000b8a6:	83 c4 10             	add    esp,0x10
c000b8a9:	85 c0                	test   eax,eax
c000b8ab:	75 04                	jne    c000b8b1 <getFromFileDescriptor(int)+0x2e>
c000b8ad:	31 c0                	xor    eax,eax
c000b8af:	eb 6e                	jmp    c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8b1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b8b4:	74 69                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8b6:	52                   	push   edx
c000b8b7:	52                   	push   edx
c000b8b8:	50                   	push   eax
c000b8b9:	68 f8 81 02 c0       	push   0xc00281f8
c000b8be:	e8 97 73 01 00       	call   c0022c5a <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b8c3:	eb e1                	jmp    c000b8a6 <getFromFileDescriptor(int)+0x23>
c000b8c5:	a1 ec 81 02 c0       	mov    eax,ds:0xc00281ec
c000b8ca:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b8d0:	74 4d                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8d2:	a1 f0 81 02 c0       	mov    eax,ds:0xc00281f0
c000b8d7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b8dd:	74 40                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8df:	a1 e8 81 02 c0       	mov    eax,ds:0xc00281e8
c000b8e4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b8ea:	74 33                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8ec:	a1 e4 81 02 c0       	mov    eax,ds:0xc00281e4
c000b8f1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b8f7:	74 26                	je     c000b91f <getFromFileDescriptor(int)+0x9c>
c000b8f9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b8ff:	83 f8 08             	cmp    eax,0x8
c000b902:	77 09                	ja     c000b90d <getFromFileDescriptor(int)+0x8a>
c000b904:	8b 04 85 c0 81 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7e40]
c000b90b:	eb 12                	jmp    c000b91f <getFromFileDescriptor(int)+0x9c>
c000b90d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b913:	83 fb 08             	cmp    ebx,0x8
c000b916:	77 95                	ja     c000b8ad <getFromFileDescriptor(int)+0x2a>
c000b918:	8b 04 9d 80 81 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7e80]
c000b91f:	83 c4 08             	add    esp,0x8
c000b922:	5b                   	pop    ebx
c000b923:	c3                   	ret    

c000b924 <__static_initialization_and_destruction_0(int, int)>:
c000b924:	83 ec 0c             	sub    esp,0xc
c000b927:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b92c:	75 34                	jne    c000b962 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b92e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b936:	75 2a                	jne    c000b962 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b938:	83 ec 0c             	sub    esp,0xc
c000b93b:	68 f8 81 02 c0       	push   0xc00281f8
c000b940:	e8 55 71 01 00       	call   c0022a9a <LinkedList<UnixFile>::LinkedList()>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	83 ec 04             	sub    esp,0x4
c000b94b:	68 4c 73 02 c0       	push   0xc002734c
c000b950:	68 f8 81 02 c0       	push   0xc00281f8
c000b955:	68 98 2a 02 c0       	push   0xc0022a98
c000b95a:	e8 39 12 00 00       	call   c000cb98 <__cxa_atexit>
c000b95f:	83 c4 10             	add    esp,0x10
c000b962:	90                   	nop
c000b963:	83 c4 0c             	add    esp,0xc
c000b966:	c3                   	ret    

c000b967 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b967:	83 ec 0c             	sub    esp,0xc
c000b96a:	83 ec 08             	sub    esp,0x8
c000b96d:	68 ff ff 00 00       	push   0xffff
c000b972:	6a 01                	push   0x1
c000b974:	e8 ab ff ff ff       	call   c000b924 <__static_initialization_and_destruction_0(int, int)>
c000b979:	83 c4 10             	add    esp,0x10
c000b97c:	83 c4 0c             	add    esp,0xc
c000b97f:	c3                   	ret    

c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b980:	53                   	push   ebx
c000b981:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b985:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b989:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b98f:	89 c8                	mov    eax,ecx
c000b991:	d1 e8                	shr    eax,1
c000b993:	03 05 28 75 02 c0    	add    eax,DWORD PTR ds:0xc0027528
c000b999:	83 e1 01             	and    ecx,0x1
c000b99c:	8a 10                	mov    dl,BYTE PTR [eax]
c000b99e:	75 09                	jne    c000b9a9 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b9a0:	83 e2 f0             	and    edx,0xfffffff0
c000b9a3:	09 da                	or     edx,ebx
c000b9a5:	88 10                	mov    BYTE PTR [eax],dl
c000b9a7:	5b                   	pop    ebx
c000b9a8:	c3                   	ret    
c000b9a9:	c1 e3 04             	shl    ebx,0x4
c000b9ac:	83 e2 0f             	and    edx,0xf
c000b9af:	09 da                	or     edx,ebx
c000b9b1:	88 10                	mov    BYTE PTR [eax],dl
c000b9b3:	5b                   	pop    ebx
c000b9b4:	c3                   	ret    

c000b9b5 <Virt::getPageState(unsigned long)>:
c000b9b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b9:	8b 0d 28 75 02 c0    	mov    ecx,DWORD PTR ds:0xc0027528
c000b9bf:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b9c5:	89 d0                	mov    eax,edx
c000b9c7:	d1 e8                	shr    eax,1
c000b9c9:	83 e2 01             	and    edx,0x1
c000b9cc:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b9cf:	75 04                	jne    c000b9d5 <Virt::getPageState(unsigned long)+0x20>
c000b9d1:	83 e0 0f             	and    eax,0xf
c000b9d4:	c3                   	ret    
c000b9d5:	c0 e8 04             	shr    al,0x4
c000b9d8:	c3                   	ret    

c000b9d9 <Virt::allocateKernelVirtualPages(int)>:
c000b9d9:	55                   	push   ebp
c000b9da:	31 ed                	xor    ebp,ebp
c000b9dc:	57                   	push   edi
c000b9dd:	56                   	push   esi
c000b9de:	53                   	push   ebx
c000b9df:	31 db                	xor    ebx,ebx
c000b9e1:	83 ec 1c             	sub    esp,0x1c
c000b9e4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b9e8:	8b 3d 24 75 02 c0    	mov    edi,DWORD PTR ds:0xc0027524
c000b9ee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b9f3:	57                   	push   edi
c000b9f4:	e8 bc ff ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000b9f9:	5a                   	pop    edx
c000b9fa:	84 c0                	test   al,al
c000b9fc:	75 3a                	jne    c000ba38 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b9fe:	85 db                	test   ebx,ebx
c000ba00:	75 02                	jne    c000ba04 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000ba02:	89 fd                	mov    ebp,edi
c000ba04:	43                   	inc    ebx
c000ba05:	39 f3                	cmp    ebx,esi
c000ba07:	74 5a                	je     c000ba63 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000ba09:	47                   	inc    edi
c000ba0a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba10:	76 31                	jbe    c000ba43 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000ba12:	c7 05 24 75 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027524,0xc8000
c000ba1c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ba21:	75 28                	jne    c000ba4b <Virt::allocateKernelVirtualPages(int)+0x72>
c000ba23:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ba28:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ba2d:	57                   	push   edi
c000ba2e:	e8 82 ff ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000ba33:	5a                   	pop    edx
c000ba34:	84 c0                	test   al,al
c000ba36:	74 c6                	je     c000b9fe <Virt::allocateKernelVirtualPages(int)+0x25>
c000ba38:	31 db                	xor    ebx,ebx
c000ba3a:	47                   	inc    edi
c000ba3b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba41:	77 cf                	ja     c000ba12 <Virt::allocateKernelVirtualPages(int)+0x39>
c000ba43:	89 3d 24 75 02 c0    	mov    DWORD PTR ds:0xc0027524,edi
c000ba49:	eb a8                	jmp    c000b9f3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba4b:	83 ec 0c             	sub    esp,0xc
c000ba4e:	68 04 45 02 c0       	push   0xc0024504
c000ba53:	e8 6f 8f 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000ba58:	8b 3d 24 75 02 c0    	mov    edi,DWORD PTR ds:0xc0027524
c000ba5e:	83 c4 10             	add    esp,0x10
c000ba61:	eb 90                	jmp    c000b9f3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba63:	89 2d 24 75 02 c0    	mov    DWORD PTR ds:0xc0027524,ebp
c000ba69:	4b                   	dec    ebx
c000ba6a:	74 5f                	je     c000bacb <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ba6c:	85 f6                	test   esi,esi
c000ba6e:	74 3d                	je     c000baad <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba70:	89 e8                	mov    eax,ebp
c000ba72:	31 db                	xor    ebx,ebx
c000ba74:	8d 7e ff             	lea    edi,[esi-0x1]
c000ba77:	eb 14                	jmp    c000ba8d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ba79:	6a 01                	push   0x1
c000ba7b:	43                   	inc    ebx
c000ba7c:	50                   	push   eax
c000ba7d:	e8 fe fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba82:	58                   	pop    eax
c000ba83:	39 f3                	cmp    ebx,esi
c000ba85:	5a                   	pop    edx
c000ba86:	74 25                	je     c000baad <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba88:	a1 24 75 02 c0       	mov    eax,ds:0xc0027524
c000ba8d:	8d 50 01             	lea    edx,[eax+0x1]
c000ba90:	85 db                	test   ebx,ebx
c000ba92:	89 15 24 75 02 c0    	mov    DWORD PTR ds:0xc0027524,edx
c000ba98:	74 20                	je     c000baba <Virt::allocateKernelVirtualPages(int)+0xe1>
c000ba9a:	39 df                	cmp    edi,ebx
c000ba9c:	75 db                	jne    c000ba79 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000ba9e:	6a 03                	push   0x3
c000baa0:	43                   	inc    ebx
c000baa1:	50                   	push   eax
c000baa2:	e8 d9 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000baa7:	59                   	pop    ecx
c000baa8:	39 f3                	cmp    ebx,esi
c000baaa:	58                   	pop    eax
c000baab:	75 db                	jne    c000ba88 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000baad:	83 c4 1c             	add    esp,0x1c
c000bab0:	89 e8                	mov    eax,ebp
c000bab2:	5b                   	pop    ebx
c000bab3:	c1 e0 0c             	shl    eax,0xc
c000bab6:	5e                   	pop    esi
c000bab7:	5f                   	pop    edi
c000bab8:	5d                   	pop    ebp
c000bab9:	c3                   	ret    
c000baba:	6a 02                	push   0x2
c000babc:	bb 01 00 00 00       	mov    ebx,0x1
c000bac1:	50                   	push   eax
c000bac2:	e8 b9 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bac7:	58                   	pop    eax
c000bac8:	5a                   	pop    edx
c000bac9:	eb bd                	jmp    c000ba88 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bacb:	6a 04                	push   0x4
c000bacd:	8d 45 01             	lea    eax,[ebp+0x1]
c000bad0:	55                   	push   ebp
c000bad1:	a3 24 75 02 c0       	mov    ds:0xc0027524,eax
c000bad6:	e8 a5 fe ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000badb:	59                   	pop    ecx
c000badc:	89 e8                	mov    eax,ebp
c000bade:	5b                   	pop    ebx
c000badf:	c1 e0 0c             	shl    eax,0xc
c000bae2:	83 c4 1c             	add    esp,0x1c
c000bae5:	5b                   	pop    ebx
c000bae6:	5e                   	pop    esi
c000bae7:	5f                   	pop    edi
c000bae8:	5d                   	pop    ebp
c000bae9:	c3                   	ret    

c000baea <Virt::freeSwapfilePage(unsigned long)>:
c000baea:	53                   	push   ebx
c000baeb:	8b 15 0c 82 02 c0    	mov    edx,DWORD PTR ds:0xc002820c
c000baf1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000baf5:	b8 01 00 00 00       	mov    eax,0x1
c000bafa:	89 cb                	mov    ebx,ecx
c000bafc:	d3 e0                	shl    eax,cl
c000bafe:	c1 eb 05             	shr    ebx,0x5
c000bb01:	f7 d0                	not    eax
c000bb03:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bb06:	5b                   	pop    ebx
c000bb07:	c3                   	ret    

c000bb08 <Virt::swapIDToSector(unsigned long)>:
c000bb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb0c:	0f af 05 2c 75 02 c0 	imul   eax,DWORD PTR ds:0xc002752c
c000bb13:	03 05 34 75 02 c0    	add    eax,DWORD PTR ds:0xc0027534
c000bb19:	c3                   	ret    

c000bb1a <Virt::allocateSwapfilePage()>:
c000bb1a:	55                   	push   ebp
c000bb1b:	31 d2                	xor    edx,edx
c000bb1d:	57                   	push   edi
c000bb1e:	56                   	push   esi
c000bb1f:	53                   	push   ebx
c000bb20:	83 ec 0c             	sub    esp,0xc
c000bb23:	8b 0d 2c 75 02 c0    	mov    ecx,DWORD PTR ds:0xc002752c
c000bb29:	a1 30 75 02 c0       	mov    eax,ds:0xc0027530
c000bb2e:	f7 f1                	div    ecx
c000bb30:	39 0d 30 75 02 c0    	cmp    DWORD PTR ds:0xc0027530,ecx
c000bb36:	72 2d                	jb     c000bb65 <Virt::allocateSwapfilePage()+0x4b>
c000bb38:	8b 35 0c 82 02 c0    	mov    esi,DWORD PTR ds:0xc002820c
c000bb3e:	8b 16                	mov    edx,DWORD PTR [esi]
c000bb40:	f6 c2 01             	test   dl,0x1
c000bb43:	74 3c                	je     c000bb81 <Virt::allocateSwapfilePage()+0x67>
c000bb45:	31 c9                	xor    ecx,ecx
c000bb47:	bf 01 00 00 00       	mov    edi,0x1
c000bb4c:	eb 12                	jmp    c000bb60 <Virt::allocateSwapfilePage()+0x46>
c000bb4e:	89 fd                	mov    ebp,edi
c000bb50:	89 ca                	mov    edx,ecx
c000bb52:	d3 e5                	shl    ebp,cl
c000bb54:	c1 ea 05             	shr    edx,0x5
c000bb57:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bb5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb5c:	85 ea                	test   edx,ebp
c000bb5e:	74 2a                	je     c000bb8a <Virt::allocateSwapfilePage()+0x70>
c000bb60:	41                   	inc    ecx
c000bb61:	39 c8                	cmp    eax,ecx
c000bb63:	77 e9                	ja     c000bb4e <Virt::allocateSwapfilePage()+0x34>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	68 bc 46 02 c0       	push   0xc00246bc
c000bb6d:	e8 55 8e 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000bb72:	83 c4 10             	add    esp,0x10
c000bb75:	31 c9                	xor    ecx,ecx
c000bb77:	83 c4 0c             	add    esp,0xc
c000bb7a:	89 c8                	mov    eax,ecx
c000bb7c:	5b                   	pop    ebx
c000bb7d:	5e                   	pop    esi
c000bb7e:	5f                   	pop    edi
c000bb7f:	5d                   	pop    ebp
c000bb80:	c3                   	ret    
c000bb81:	89 f3                	mov    ebx,esi
c000bb83:	bd 01 00 00 00       	mov    ebp,0x1
c000bb88:	31 c9                	xor    ecx,ecx
c000bb8a:	09 ea                	or     edx,ebp
c000bb8c:	89 c8                	mov    eax,ecx
c000bb8e:	89 13                	mov    DWORD PTR [ebx],edx
c000bb90:	83 c4 0c             	add    esp,0xc
c000bb93:	5b                   	pop    ebx
c000bb94:	5e                   	pop    esi
c000bb95:	5f                   	pop    edi
c000bb96:	5d                   	pop    ebp
c000bb97:	c3                   	ret    

c000bb98 <Virt::virtualMemorySetup()>:
c000bb98:	53                   	push   ebx
c000bb99:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb9e:	6a 0f                	push   0xf
c000bba0:	53                   	push   ebx
c000bba1:	43                   	inc    ebx
c000bba2:	e8 d9 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bba7:	58                   	pop    eax
c000bba8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbae:	5a                   	pop    edx
c000bbaf:	75 ed                	jne    c000bb9e <Virt::virtualMemorySetup()+0x6>
c000bbb1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bbb6:	6a 00                	push   0x0
c000bbb8:	53                   	push   ebx
c000bbb9:	43                   	inc    ebx
c000bbba:	e8 c1 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbbf:	59                   	pop    ecx
c000bbc0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbc6:	58                   	pop    eax
c000bbc7:	75 ed                	jne    c000bbb6 <Virt::virtualMemorySetup()+0x1e>
c000bbc9:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bbce:	6a 0f                	push   0xf
c000bbd0:	53                   	push   ebx
c000bbd1:	43                   	inc    ebx
c000bbd2:	e8 a9 fd ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbd7:	58                   	pop    eax
c000bbd8:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bbde:	5a                   	pop    edx
c000bbdf:	75 ed                	jne    c000bbce <Virt::virtualMemorySetup()+0x36>
c000bbe1:	5b                   	pop    ebx
c000bbe2:	c3                   	ret    

c000bbe3 <Virt::setupPageSwapping(int)>:
c000bbe3:	53                   	push   ebx
c000bbe4:	83 ec 0c             	sub    esp,0xc
c000bbe7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bbeb:	a1 a8 86 02 c0       	mov    eax,ds:0xc00286a8
c000bbf0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bbf6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbf8:	53                   	push   ebx
c000bbf9:	c1 e3 0b             	shl    ebx,0xb
c000bbfc:	68 d3 46 02 c0       	push   0xc00246d3
c000bc01:	50                   	push   eax
c000bc02:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bc05:	89 1d 30 75 02 c0    	mov    DWORD PTR ds:0xc0027530,ebx
c000bc0b:	c6 05 38 75 02 c0 43 	mov    BYTE PTR ds:0xc0027538,0x43
c000bc12:	c1 eb 08             	shr    ebx,0x8
c000bc15:	a3 34 75 02 c0       	mov    ds:0xc0027534,eax
c000bc1a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc1d:	c7 05 2c 75 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002752c,0x8
c000bc27:	e8 e3 dd ff ff       	call   c0009a0f <malloc>
c000bc2c:	83 c4 0c             	add    esp,0xc
c000bc2f:	89 c1                	mov    ecx,eax
c000bc31:	a3 0c 82 02 c0       	mov    ds:0xc002820c,eax
c000bc36:	31 d2                	xor    edx,edx
c000bc38:	a1 30 75 02 c0       	mov    eax,ds:0xc0027530
c000bc3d:	f7 35 2c 75 02 c0    	div    DWORD PTR ds:0xc002752c
c000bc43:	c1 e8 05             	shr    eax,0x5
c000bc46:	50                   	push   eax
c000bc47:	6a 00                	push   0x0
c000bc49:	51                   	push   ecx
c000bc4a:	e8 35 4a ff ff       	call   c0000684 <memset>
c000bc4f:	83 c4 18             	add    esp,0x18
c000bc52:	5b                   	pop    ebx
c000bc53:	c3                   	ret    

c000bc54 <VAS::VAS()>:
c000bc54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc58:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc63:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc6e:	a3 10 82 02 c0       	mov    ds:0xc0028210,eax
c000bc73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc77:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bc7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc7f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bc82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc86:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bc8d:	90                   	nop
c000bc8e:	c3                   	ret    
c000bc8f:	90                   	nop

c000bc90 <VAS::VAS(VAS*)>:
c000bc90:	83 ec 0c             	sub    esp,0xc
c000bc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bca9:	83 ec 0c             	sub    esp,0xc
c000bcac:	68 24 45 02 c0       	push   0xc0024524
c000bcb1:	e8 11 8d 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000bcb6:	83 c4 10             	add    esp,0x10
c000bcb9:	90                   	nop
c000bcba:	83 c4 0c             	add    esp,0xc
c000bcbd:	c3                   	ret    

c000bcbe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bcbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcc2:	89 c2                	mov    edx,eax
c000bcc4:	c1 e8 0a             	shr    eax,0xa
c000bcc7:	c1 ea 16             	shr    edx,0x16
c000bcca:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bccf:	19 c9                	sbb    ecx,ecx
c000bcd1:	c1 e2 0c             	shl    edx,0xc
c000bcd4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bcda:	25 fc 0f 00 00       	and    eax,0xffc
c000bcdf:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bce6:	01 d0                	add    eax,edx
c000bce8:	c3                   	ret    
c000bce9:	90                   	nop

c000bcea <VAS::getPageTableEntry(unsigned long)>:
c000bcea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bcee:	89 ca                	mov    edx,ecx
c000bcf0:	c1 e9 0a             	shr    ecx,0xa
c000bcf3:	c1 ea 16             	shr    edx,0x16
c000bcf6:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bcfc:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bd02:	c1 e0 0c             	shl    eax,0xc
c000bd05:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bd08:	c3                   	ret    

c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bd09:	57                   	push   edi
c000bd0a:	56                   	push   esi
c000bd0b:	be 01 00 00 00       	mov    esi,0x1
c000bd10:	53                   	push   ebx
c000bd11:	83 ec 10             	sub    esp,0x10
c000bd14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bd18:	c1 eb 0c             	shr    ebx,0xc
c000bd1b:	eb 3f                	jmp    c000bd5c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bd1d:	83 ec 08             	sub    esp,0x8
c000bd20:	57                   	push   edi
c000bd21:	ff 35 10 82 02 c0    	push   DWORD PTR ds:0xc0028210
c000bd27:	e8 be ff ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000bd2c:	83 c4 10             	add    esp,0x10
c000bd2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd31:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd35:	f6 c4 04             	test   ah,0x4
c000bd38:	75 5f                	jne    c000bd99 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bd3a:	80 fa 04             	cmp    dl,0x4
c000bd3d:	74 78                	je     c000bdb7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bd3f:	80 fa 02             	cmp    dl,0x2
c000bd42:	0f 84 88 00 00 00    	je     c000bdd0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bd48:	80 fa 03             	cmp    dl,0x3
c000bd4b:	0f 84 ad 00 00 00    	je     c000bdfe <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bd51:	fe ca                	dec    dl
c000bd53:	0f 84 92 00 00 00    	je     c000bdeb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd59:	43                   	inc    ebx
c000bd5a:	31 f6                	xor    esi,esi
c000bd5c:	53                   	push   ebx
c000bd5d:	89 df                	mov    edi,ebx
c000bd5f:	e8 51 fc ff ff       	call   c000b9b5 <Virt::getPageState(unsigned long)>
c000bd64:	c1 e7 0c             	shl    edi,0xc
c000bd67:	59                   	pop    ecx
c000bd68:	84 c0                	test   al,al
c000bd6a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bd6e:	75 ad                	jne    c000bd1d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bd70:	83 ec 0c             	sub    esp,0xc
c000bd73:	68 ea 46 02 c0       	push   0xc00246ea
c000bd78:	e8 4a 8c 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000bd7d:	58                   	pop    eax
c000bd7e:	5a                   	pop    edx
c000bd7f:	57                   	push   edi
c000bd80:	ff 35 10 82 02 c0    	push   DWORD PTR ds:0xc0028210
c000bd86:	e8 5f ff ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000bd8b:	83 c4 10             	add    esp,0x10
c000bd8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd90:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd94:	f6 c4 04             	test   ah,0x4
c000bd97:	74 c0                	je     c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd99:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bd9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bda2:	83 ec 0c             	sub    esp,0xc
c000bda5:	50                   	push   eax
c000bda6:	e8 98 e2 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bdab:	83 c4 10             	add    esp,0x10
c000bdae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bdb2:	80 fa 04             	cmp    dl,0x4
c000bdb5:	75 88                	jne    c000bd3f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bdb7:	89 f0                	mov    eax,esi
c000bdb9:	84 c0                	test   al,al
c000bdbb:	75 47                	jne    c000be04 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bdbd:	c7 44 24 20 48 45 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024548
c000bdc5:	83 c4 10             	add    esp,0x10
c000bdc8:	5b                   	pop    ebx
c000bdc9:	5e                   	pop    esi
c000bdca:	5f                   	pop    edi
c000bdcb:	e9 f7 8b 00 00       	jmp    c00149c7 <Krnl::panic(char const*)>
c000bdd0:	89 f0                	mov    eax,esi
c000bdd2:	84 c0                	test   al,al
c000bdd4:	75 15                	jne    c000bdeb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bdd6:	83 ec 0c             	sub    esp,0xc
c000bdd9:	68 06 47 02 c0       	push   0xc0024706
c000bdde:	e8 e4 8b 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	e9 6e ff ff ff       	jmp    c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdeb:	83 ec 08             	sub    esp,0x8
c000bdee:	6a 00                	push   0x0
c000bdf0:	53                   	push   ebx
c000bdf1:	e8 8a fb ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdf6:	83 c4 10             	add    esp,0x10
c000bdf9:	e9 5b ff ff ff       	jmp    c000bd59 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdfe:	89 f0                	mov    eax,esi
c000be00:	84 c0                	test   al,al
c000be02:	75 15                	jne    c000be19 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000be04:	83 ec 08             	sub    esp,0x8
c000be07:	6a 00                	push   0x0
c000be09:	53                   	push   ebx
c000be0a:	e8 71 fb ff ff       	call   c000b980 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be0f:	83 c4 10             	add    esp,0x10
c000be12:	83 c4 10             	add    esp,0x10
c000be15:	5b                   	pop    ebx
c000be16:	5e                   	pop    esi
c000be17:	5f                   	pop    edi
c000be18:	c3                   	ret    
c000be19:	c7 44 24 20 22 47 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024722
c000be21:	83 c4 10             	add    esp,0x10
c000be24:	5b                   	pop    ebx
c000be25:	5e                   	pop    esi
c000be26:	5f                   	pop    edi
c000be27:	e9 9b 8b 00 00       	jmp    c00149c7 <Krnl::panic(char const*)>

c000be2c <VAS::freeAllocatedPages(unsigned long)>:
c000be2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be34:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000be38:	74 09                	je     c000be43 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000be3a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000be3e:	e9 c6 fe ff ff       	jmp    c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000be43:	c7 44 24 04 6c 45 02 c0 	mov    DWORD PTR [esp+0x4],0xc002456c
c000be4b:	e9 af 0e 00 00       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c000be50 <VAS::virtualToPhysical(unsigned long)>:
c000be50:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be54:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be58:	e8 8d fe ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000be5d:	5a                   	pop    edx
c000be5e:	8b 00                	mov    eax,DWORD PTR [eax]
c000be60:	59                   	pop    ecx
c000be61:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be66:	c3                   	ret    
c000be67:	90                   	nop

c000be68 <VAS::reflagRange(unsigned long, int, int, int)>:
c000be68:	55                   	push   ebp
c000be69:	57                   	push   edi
c000be6a:	56                   	push   esi
c000be6b:	53                   	push   ebx
c000be6c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be70:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000be74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be78:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be7c:	85 db                	test   ebx,ebx
c000be7e:	7e 22                	jle    c000bea2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000be80:	c1 e3 0c             	shl    ebx,0xc
c000be83:	01 f3                	add    ebx,esi
c000be85:	56                   	push   esi
c000be86:	81 c6 00 10 00 00    	add    esi,0x1000
c000be8c:	55                   	push   ebp
c000be8d:	e8 58 fe ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000be92:	5a                   	pop    edx
c000be93:	59                   	pop    ecx
c000be94:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be96:	21 f9                	and    ecx,edi
c000be98:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000be9c:	39 f3                	cmp    ebx,esi
c000be9e:	89 08                	mov    DWORD PTR [eax],ecx
c000bea0:	75 e3                	jne    c000be85 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bea2:	5b                   	pop    ebx
c000bea3:	5e                   	pop    esi
c000bea4:	5f                   	pop    edi
c000bea5:	5d                   	pop    ebp
c000bea6:	c3                   	ret    
c000bea7:	90                   	nop

c000bea8 <VAS::setToWriteCombining(unsigned long, int)>:
c000bea8:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000bead:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000beb3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000beba:	75 01                	jne    c000bebd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bebc:	c3                   	ret    
c000bebd:	68 80 00 00 00       	push   0x80
c000bec2:	6a ff                	push   0xffffffff
c000bec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000becc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed0:	e8 93 ff ff ff       	call   c000be68 <VAS::reflagRange(unsigned long, int, int, int)>
c000bed5:	83 c4 14             	add    esp,0x14
c000bed8:	c3                   	ret    
c000bed9:	90                   	nop

c000beda <VAS::mapOtherVASIn(bool, VAS*)>:
c000beda:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bedf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bee3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000beea:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000beed:	19 c0                	sbb    eax,eax
c000beef:	83 ca 03             	or     edx,0x3
c000bef2:	83 e0 fc             	and    eax,0xfffffffc
c000bef5:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000befc:	0f 20 d8             	mov    eax,cr3
c000beff:	0f 22 d8             	mov    cr3,eax
c000bf02:	c3                   	ret    
c000bf03:	90                   	nop

c000bf04 <VAS::~VAS()>:
c000bf04:	83 ec 2c             	sub    esp,0x2c
c000bf07:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf0f:	fa                   	cli    
c000bf10:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000bf15:	40                   	inc    eax
c000bf16:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000bf1b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf20:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf25:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bf2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bf2f:	6a 01                	push   0x1
c000bf31:	50                   	push   eax
c000bf32:	e8 a3 ff ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c000bf37:	83 c4 0c             	add    esp,0xc
c000bf3a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf42:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bf4a:	0f 8f d4 00 00 00    	jg     c000c024 <VAS::~VAS()+0x120>
c000bf50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf5b:	c1 e2 02             	shl    edx,0x2
c000bf5e:	01 d0                	add    eax,edx
c000bf60:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf6a:	83 e0 01             	and    eax,0x1
c000bf6d:	0f 84 a8 00 00 00    	je     c000c01b <VAS::~VAS()+0x117>
c000bf73:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf7b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bf83:	7f 72                	jg     c000bff7 <VAS::~VAS()+0xf3>
c000bf85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf89:	c1 e0 0a             	shl    eax,0xa
c000bf8c:	89 c2                	mov    edx,eax
c000bf8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf92:	01 d0                	add    eax,edx
c000bf94:	c1 e0 0c             	shl    eax,0xc
c000bf97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf9b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bfa0:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfa2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfa5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bfab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfaf:	6a 01                	push   0x1
c000bfb1:	50                   	push   eax
c000bfb2:	e8 07 fd ff ff       	call   c000bcbe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bfb7:	83 c4 0c             	add    esp,0xc
c000bfba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bfc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfc4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfcc:	25 01 04 00 00       	and    eax,0x401
c000bfd1:	3d 01 04 00 00       	cmp    eax,0x401
c000bfd6:	75 19                	jne    c000bff1 <VAS::~VAS()+0xed>
c000bfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfdc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfe1:	83 ec 0c             	sub    esp,0xc
c000bfe4:	50                   	push   eax
c000bfe5:	e8 59 e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bfea:	83 c4 10             	add    esp,0x10
c000bfed:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bff1:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bff5:	eb 84                	jmp    c000bf7b <VAS::~VAS()+0x77>
c000bff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bffb:	25 00 04 00 00       	and    eax,0x400
c000c000:	74 19                	je     c000c01b <VAS::~VAS()+0x117>
c000c002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c006:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c00b:	83 ec 0c             	sub    esp,0xc
c000c00e:	50                   	push   eax
c000c00f:	e8 2f e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c014:	83 c4 10             	add    esp,0x10
c000c017:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c01b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c01f:	e9 1e ff ff ff       	jmp    c000bf42 <VAS::~VAS()+0x3e>
c000c024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c028:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c02b:	83 ec 0c             	sub    esp,0xc
c000c02e:	50                   	push   eax
c000c02f:	e8 d5 fc ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c034:	83 c4 10             	add    esp,0x10
c000c037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c03b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 fc df ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c04e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c052:	c1 e0 02             	shl    eax,0x2
c000c055:	83 ec 08             	sub    esp,0x8
c000c058:	50                   	push   eax
c000c059:	68 90 45 02 c0       	push   0xc0024590
c000c05e:	e8 9c 0c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000c06b:	48                   	dec    eax
c000c06c:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000c071:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000c076:	85 c0                	test   eax,eax
c000c078:	75 01                	jne    c000c07b <VAS::~VAS()+0x177>
c000c07a:	fb                   	sti    
c000c07b:	90                   	nop
c000c07c:	83 c4 2c             	add    esp,0x2c
c000c07f:	c3                   	ret    

c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c080:	55                   	push   ebp
c000c081:	57                   	push   edi
c000c082:	56                   	push   esi
c000c083:	53                   	push   ebx
c000c084:	83 ec 1c             	sub    esp,0x1c
c000c087:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c08b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c08f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c095:	77 08                	ja     c000c09f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c097:	0f 20 d8             	mov    eax,cr3
c000c09a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c09d:	75 47                	jne    c000c0e6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c09f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0a3:	09 d8                	or     eax,ebx
c000c0a5:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0aa:	75 57                	jne    c000c103 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c0ac:	89 de                	mov    esi,ebx
c000c0ae:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0b1:	c1 ee 16             	shr    esi,0x16
c000c0b4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c0bb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c0bf:	74 54                	je     c000c115 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c0c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c0cb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c0cf:	c1 e6 0c             	shl    esi,0xc
c000c0d2:	c1 eb 0a             	shr    ebx,0xa
c000c0d5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c0db:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c0de:	83 c4 1c             	add    esp,0x1c
c000c0e1:	5b                   	pop    ebx
c000c0e2:	5e                   	pop    esi
c000c0e3:	5f                   	pop    edi
c000c0e4:	5d                   	pop    ebp
c000c0e5:	c3                   	ret    
c000c0e6:	83 ec 0c             	sub    esp,0xc
c000c0e9:	68 b0 45 02 c0       	push   0xc00245b0
c000c0ee:	e8 0c 0c 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c0f3:	83 c4 10             	add    esp,0x10
c000c0f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0fa:	09 d8                	or     eax,ebx
c000c0fc:	a9 ff 0f 00 00       	test   eax,0xfff
c000c101:	74 a9                	je     c000c0ac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c103:	83 ec 0c             	sub    esp,0xc
c000c106:	68 18 46 02 c0       	push   0xc0024618
c000c10b:	e8 b7 88 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000c110:	83 c4 10             	add    esp,0x10
c000c113:	eb 97                	jmp    c000c0ac <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c115:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c119:	e8 a8 df ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c11e:	83 ec 0c             	sub    esp,0xc
c000c121:	89 c5                	mov    ebp,eax
c000c123:	8b 0d 10 82 02 c0    	mov    ecx,DWORD PTR ds:0xc0028210
c000c129:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c12d:	6a 01                	push   0x1
c000c12f:	e8 a5 f8 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c134:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c13b:	6a 01                	push   0x1
c000c13d:	50                   	push   eax
c000c13e:	55                   	push   ebp
c000c13f:	81 cd 07 04 00 00    	or     ebp,0x407
c000c145:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c149:	51                   	push   ecx
c000c14a:	e8 27 02 00 00       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c14f:	83 c4 1c             	add    esp,0x1c
c000c152:	68 00 10 00 00       	push   0x1000
c000c157:	6a 00                	push   0x0
c000c159:	50                   	push   eax
c000c15a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c15e:	e8 21 45 ff ff       	call   c0000684 <memset>
c000c163:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c167:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c16a:	e8 9a fb ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c16f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c173:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c176:	83 c4 10             	add    esp,0x10
c000c179:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c17c:	e9 40 ff ff ff       	jmp    c000c0c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c181:	90                   	nop

c000c182 <VAS::allocatePages(int, int)>:
c000c182:	55                   	push   ebp
c000c183:	57                   	push   edi
c000c184:	56                   	push   esi
c000c185:	53                   	push   ebx
c000c186:	83 ec 1c             	sub    esp,0x1c
c000c189:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c18d:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000c192:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c198:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c19e:	83 e0 01             	and    eax,0x1
c000c1a1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c1a5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c1a9:	0f 85 cc 00 00 00    	jne    c000c27b <VAS::allocatePages(int, int)+0xf9>
c000c1af:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1b6:	85 c0                	test   eax,eax
c000c1b8:	0f 84 a1 00 00 00    	je     c000c25f <VAS::allocatePages(int, int)+0xdd>
c000c1be:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c1c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1c6:	c1 e6 0c             	shl    esi,0xc
c000c1c9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c1cd:	85 c0                	test   eax,eax
c000c1cf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c1d2:	7e 33                	jle    c000c207 <VAS::allocatePages(int, int)+0x85>
c000c1d4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c1d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1dc:	81 cd 00 04 00 00    	or     ebp,0x400
c000c1e2:	e8 df de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c1e7:	55                   	push   ebp
c000c1e8:	53                   	push   ebx
c000c1e9:	50                   	push   eax
c000c1ea:	57                   	push   edi
c000c1eb:	e8 90 fe ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1f0:	83 c4 10             	add    esp,0x10
c000c1f3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1f8:	74 03                	je     c000c1fd <VAS::allocatePages(int, int)+0x7b>
c000c1fa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1fd:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c203:	39 de                	cmp    esi,ebx
c000c205:	75 db                	jne    c000c1e2 <VAS::allocatePages(int, int)+0x60>
c000c207:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c20c:	75 12                	jne    c000c220 <VAS::allocatePages(int, int)+0x9e>
c000c20e:	0f 20 d8             	mov    eax,cr3
c000c211:	0f 22 d8             	mov    cr3,eax
c000c214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c218:	83 c4 1c             	add    esp,0x1c
c000c21b:	5b                   	pop    ebx
c000c21c:	5e                   	pop    esi
c000c21d:	5f                   	pop    edi
c000c21e:	5d                   	pop    ebp
c000c21f:	c3                   	ret    
c000c220:	c1 ee 0a             	shr    esi,0xa
c000c223:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c227:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c22d:	c1 eb 0a             	shr    ebx,0xa
c000c230:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c236:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c23c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c242:	39 c3                	cmp    ebx,eax
c000c244:	77 ce                	ja     c000c214 <VAS::allocatePages(int, int)+0x92>
c000c246:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c249:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c24f:	39 d8                	cmp    eax,ebx
c000c251:	73 f3                	jae    c000c246 <VAS::allocatePages(int, int)+0xc4>
c000c253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c257:	83 c4 1c             	add    esp,0x1c
c000c25a:	5b                   	pop    ebx
c000c25b:	5e                   	pop    esi
c000c25c:	5f                   	pop    edi
c000c25d:	5d                   	pop    ebp
c000c25e:	c3                   	ret    
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	68 3c 46 02 c0       	push   0xc002463c
c000c267:	e8 5b 87 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000c26c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c26f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	e9 43 ff ff ff       	jmp    c000c1be <VAS::allocatePages(int, int)+0x3c>
c000c27b:	83 ec 0c             	sub    esp,0xc
c000c27e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c282:	e8 52 f7 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c287:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c28b:	83 c4 10             	add    esp,0x10
c000c28e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c293:	0f 87 9b 00 00 00    	ja     c000c334 <VAS::allocatePages(int, int)+0x1b2>
c000c299:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c29d:	85 d2                	test   edx,edx
c000c29f:	7e 3c                	jle    c000c2dd <VAS::allocatePages(int, int)+0x15b>
c000c2a1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c2a5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c2a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c2ad:	c1 e5 0c             	shl    ebp,0xc
c000c2b0:	81 ce 00 04 00 00    	or     esi,0x400
c000c2b6:	01 dd                	add    ebp,ebx
c000c2b8:	e8 09 de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c2bd:	56                   	push   esi
c000c2be:	53                   	push   ebx
c000c2bf:	50                   	push   eax
c000c2c0:	57                   	push   edi
c000c2c1:	e8 ba fd ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c2c6:	83 c4 10             	add    esp,0x10
c000c2c9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2ce:	74 03                	je     c000c2d3 <VAS::allocatePages(int, int)+0x151>
c000c2d0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2d3:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2d9:	39 dd                	cmp    ebp,ebx
c000c2db:	75 db                	jne    c000c2b8 <VAS::allocatePages(int, int)+0x136>
c000c2dd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2e2:	0f 84 26 ff ff ff    	je     c000c20e <VAS::allocatePages(int, int)+0x8c>
c000c2e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2f0:	89 d3                	mov    ebx,edx
c000c2f2:	c1 e0 0c             	shl    eax,0xc
c000c2f5:	c1 eb 0a             	shr    ebx,0xa
c000c2f8:	01 d0                	add    eax,edx
c000c2fa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c300:	c1 e8 0a             	shr    eax,0xa
c000c303:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c309:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c30e:	2d 00 00 40 00       	sub    eax,0x400000
c000c313:	39 c3                	cmp    ebx,eax
c000c315:	0f 87 f9 fe ff ff    	ja     c000c214 <VAS::allocatePages(int, int)+0x92>
c000c31b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c31e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c324:	39 d8                	cmp    eax,ebx
c000c326:	73 f3                	jae    c000c31b <VAS::allocatePages(int, int)+0x199>
c000c328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c32c:	83 c4 1c             	add    esp,0x1c
c000c32f:	5b                   	pop    ebx
c000c330:	5e                   	pop    esi
c000c331:	5f                   	pop    edi
c000c332:	5d                   	pop    ebp
c000c333:	c3                   	ret    
c000c334:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000c339:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c33f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c346:	0f 84 4d ff ff ff    	je     c000c299 <VAS::allocatePages(int, int)+0x117>
c000c34c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c354:	e9 40 ff ff ff       	jmp    c000c299 <VAS::allocatePages(int, int)+0x117>
c000c359:	90                   	nop

c000c35a <VAS::setCPUSpecific(unsigned long)>:
c000c35a:	83 ec 0c             	sub    esp,0xc
c000c35d:	6a 05                	push   0x5
c000c35f:	68 00 00 40 c2       	push   0xc2400000
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	e8 0f fd ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c371:	83 c4 1c             	add    esp,0x1c
c000c374:	c3                   	ret    
c000c375:	90                   	nop

c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c376:	55                   	push   ebp
c000c377:	57                   	push   edi
c000c378:	56                   	push   esi
c000c379:	53                   	push   ebx
c000c37a:	83 ec 1c             	sub    esp,0x1c
c000c37d:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000c382:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c386:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c38c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c390:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c396:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c39a:	83 e0 01             	and    eax,0x1
c000c39d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c3a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a5:	85 c0                	test   eax,eax
c000c3a7:	7e 39                	jle    c000c3e2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c3a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ad:	89 f3                	mov    ebx,esi
c000c3af:	c1 e0 0c             	shl    eax,0xc
c000c3b2:	01 f0                	add    eax,esi
c000c3b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c3b8:	55                   	push   ebp
c000c3b9:	53                   	push   ebx
c000c3ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3be:	29 f0                	sub    eax,esi
c000c3c0:	01 d8                	add    eax,ebx
c000c3c2:	50                   	push   eax
c000c3c3:	57                   	push   edi
c000c3c4:	e8 b7 fc ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c3c9:	83 c4 10             	add    esp,0x10
c000c3cc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3d1:	74 03                	je     c000c3d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c3d3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c3d6:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3dc:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c3e0:	75 d6                	jne    c000c3b8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c3e2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3e7:	75 10                	jne    c000c3f9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c3e9:	0f 20 d8             	mov    eax,cr3
c000c3ec:	0f 22 d8             	mov    cr3,eax
c000c3ef:	83 c4 1c             	add    esp,0x1c
c000c3f2:	89 f0                	mov    eax,esi
c000c3f4:	5b                   	pop    ebx
c000c3f5:	5e                   	pop    esi
c000c3f6:	5f                   	pop    edi
c000c3f7:	5d                   	pop    ebp
c000c3f8:	c3                   	ret    
c000c3f9:	89 f3                	mov    ebx,esi
c000c3fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ff:	c1 eb 0a             	shr    ebx,0xa
c000c402:	c1 e0 0c             	shl    eax,0xc
c000c405:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c40b:	01 f0                	add    eax,esi
c000c40d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c413:	c1 e8 0a             	shr    eax,0xa
c000c416:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c41b:	2d 00 00 40 00       	sub    eax,0x400000
c000c420:	39 c3                	cmp    ebx,eax
c000c422:	77 cb                	ja     c000c3ef <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c424:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c427:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c42d:	39 d8                	cmp    eax,ebx
c000c42f:	73 f3                	jae    c000c424 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c431:	83 c4 1c             	add    esp,0x1c
c000c434:	89 f0                	mov    eax,esi
c000c436:	5b                   	pop    ebx
c000c437:	5e                   	pop    esi
c000c438:	5f                   	pop    edi
c000c439:	5d                   	pop    ebp
c000c43a:	c3                   	ret    
c000c43b:	90                   	nop

c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c43c:	55                   	push   ebp
c000c43d:	57                   	push   edi
c000c43e:	56                   	push   esi
c000c43f:	53                   	push   ebx
c000c440:	83 ec 1c             	sub    esp,0x1c
c000c443:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c447:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c44b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c44f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c453:	a9 ff 0f 00 00       	test   eax,0xfff
c000c458:	75 4a                	jne    c000c4a4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c45a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c45e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c461:	c1 eb 16             	shr    ebx,0x16
c000c464:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c46b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c46f:	74 4d                	je     c000c4be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c471:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c475:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c479:	c1 e8 0a             	shr    eax,0xa
c000c47c:	80 fa 01             	cmp    dl,0x1
c000c47f:	19 d2                	sbb    edx,edx
c000c481:	c1 e3 0c             	shl    ebx,0xc
c000c484:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c488:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c48e:	25 fc 0f 00 00       	and    eax,0xffc
c000c493:	01 d8                	add    eax,ebx
c000c495:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c49c:	83 c4 1c             	add    esp,0x1c
c000c49f:	5b                   	pop    ebx
c000c4a0:	5e                   	pop    esi
c000c4a1:	5f                   	pop    edi
c000c4a2:	5d                   	pop    ebp
c000c4a3:	c3                   	ret    
c000c4a4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c4a8:	83 ec 0c             	sub    esp,0xc
c000c4ab:	68 68 46 02 c0       	push   0xc0024668
c000c4b0:	e8 12 85 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4bc:	eb 9c                	jmp    c000c45a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c4be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4c2:	e8 ff db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c4c7:	83 ec 0c             	sub    esp,0xc
c000c4ca:	89 c5                	mov    ebp,eax
c000c4cc:	8b 0d 10 82 02 c0    	mov    ecx,DWORD PTR ds:0xc0028210
c000c4d2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4d6:	6a 01                	push   0x1
c000c4d8:	e8 fc f4 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c4dd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4e4:	6a 01                	push   0x1
c000c4e6:	50                   	push   eax
c000c4e7:	55                   	push   ebp
c000c4e8:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4ee:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4f2:	51                   	push   ecx
c000c4f3:	e8 7e fe ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4f8:	83 c4 1c             	add    esp,0x1c
c000c4fb:	68 00 10 00 00       	push   0x1000
c000c500:	6a 00                	push   0x0
c000c502:	50                   	push   eax
c000c503:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c507:	e8 78 41 ff ff       	call   c0000684 <memset>
c000c50c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c510:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c513:	e8 f1 f7 ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c000c518:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c51b:	83 c4 10             	add    esp,0x10
c000c51e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c521:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c525:	e9 47 ff ff ff       	jmp    c000c471 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c52a <VAS::VAS(bool)>:
c000c52a:	53                   	push   ebx
c000c52b:	83 ec 28             	sub    esp,0x28
c000c52e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c532:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c536:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c53a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c541:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c545:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c54c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c550:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c554:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c557:	e8 6a db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c55c:	89 c2                	mov    edx,eax
c000c55e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c562:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c565:	8b 1d 10 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028210
c000c56b:	83 ec 0c             	sub    esp,0xc
c000c56e:	6a 01                	push   0x1
c000c570:	e8 64 f4 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 c2                	mov    edx,eax
c000c57a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c57e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c581:	83 ec 0c             	sub    esp,0xc
c000c584:	6a 03                	push   0x3
c000c586:	6a 01                	push   0x1
c000c588:	52                   	push   edx
c000c589:	50                   	push   eax
c000c58a:	53                   	push   ebx
c000c58b:	e8 e6 fd ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c590:	83 c4 20             	add    esp,0x20
c000c593:	89 c2                	mov    edx,eax
c000c595:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c599:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c59c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c5a4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c5ac:	7f 1c                	jg     c000c5ca <VAS::VAS(bool)+0xa0>
c000c5ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5b2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c5b9:	c1 e2 02             	shl    edx,0x2
c000c5bc:	01 d0                	add    eax,edx
c000c5be:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c5c4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c5c8:	eb da                	jmp    c000c5a4 <VAS::VAS(bool)+0x7a>
c000c5ca:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c5d2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c5da:	7f 7a                	jg     c000c656 <VAS::VAS(bool)+0x12c>
c000c5dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5e0:	2d 00 02 00 00       	sub    eax,0x200
c000c5e5:	c1 e0 0c             	shl    eax,0xc
c000c5e8:	83 c8 03             	or     eax,0x3
c000c5eb:	89 c2                	mov    edx,eax
c000c5ed:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000c5f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5f8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5fe:	83 e0 10             	and    eax,0x10
c000c601:	84 c0                	test   al,al
c000c603:	74 07                	je     c000c60c <VAS::VAS(bool)+0xe2>
c000c605:	b8 00 01 00 00       	mov    eax,0x100
c000c60a:	eb 05                	jmp    c000c611 <VAS::VAS(bool)+0xe7>
c000c60c:	b8 00 00 00 00       	mov    eax,0x0
c000c611:	09 d0                	or     eax,edx
c000c613:	89 c1                	mov    ecx,eax
c000c615:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c619:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c61c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c620:	c1 e2 02             	shl    edx,0x2
c000c623:	01 d0                	add    eax,edx
c000c625:	89 ca                	mov    edx,ecx
c000c627:	89 10                	mov    DWORD PTR [eax],edx
c000c629:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c62d:	2d 40 03 00 00       	sub    eax,0x340
c000c632:	83 f8 7f             	cmp    eax,0x7f
c000c635:	77 16                	ja     c000c64d <VAS::VAS(bool)+0x123>
c000c637:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c63b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c63e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c642:	c1 e2 02             	shl    edx,0x2
c000c645:	01 d0                	add    eax,edx
c000c647:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c64d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c651:	e9 7c ff ff ff       	jmp    c000c5d2 <VAS::VAS(bool)+0xa8>
c000c656:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000c65b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c661:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c667:	83 e0 10             	and    eax,0x10
c000c66a:	84 c0                	test   al,al
c000c66c:	74 07                	je     c000c675 <VAS::VAS(bool)+0x14b>
c000c66e:	b8 03 41 00 00       	mov    eax,0x4103
c000c673:	eb 05                	jmp    c000c67a <VAS::VAS(bool)+0x150>
c000c675:	b8 03 40 00 00       	mov    eax,0x4003
c000c67a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c67e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c681:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c687:	89 02                	mov    DWORD PTR [edx],eax
c000c689:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000c68e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c694:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c69a:	83 ec 08             	sub    esp,0x8
c000c69d:	50                   	push   eax
c000c69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a2:	e8 b3 fc ff ff       	call   c000c35a <VAS::setCPUSpecific(unsigned long)>
c000c6a7:	83 c4 10             	add    esp,0x10
c000c6aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6ae:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c6b1:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000c6b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6bc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c6c2:	83 e0 10             	and    eax,0x10
c000c6c5:	84 c0                	test   al,al
c000c6c7:	74 07                	je     c000c6d0 <VAS::VAS(bool)+0x1a6>
c000c6c9:	b8 00 01 00 00       	mov    eax,0x100
c000c6ce:	eb 05                	jmp    c000c6d5 <VAS::VAS(bool)+0x1ab>
c000c6d0:	b8 00 00 00 00       	mov    eax,0x0
c000c6d5:	09 c2                	or     edx,eax
c000c6d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6db:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6de:	05 fc 0f 00 00       	add    eax,0xffc
c000c6e3:	83 ca 03             	or     edx,0x3
c000c6e6:	89 10                	mov    DWORD PTR [eax],edx
c000c6e8:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000c6ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6f3:	83 ec 0c             	sub    esp,0xc
c000c6f6:	50                   	push   eax
c000c6f7:	e8 42 1e 00 00       	call   c000e53e <Device::getName()>
c000c6fc:	83 c4 10             	add    esp,0x10
c000c6ff:	83 ec 08             	sub    esp,0x8
c000c702:	68 3c 47 02 c0       	push   0xc002473c
c000c707:	50                   	push   eax
c000c708:	e8 bf 40 ff ff       	call   c00007cc <strcmp>
c000c70d:	83 c4 10             	add    esp,0x10
c000c710:	85 c0                	test   eax,eax
c000c712:	0f 94 c0             	sete   al
c000c715:	84 c0                	test   al,al
c000c717:	0f 84 87 00 00 00    	je     c000c7a4 <VAS::VAS(bool)+0x27a>
c000c71d:	fa                   	cli    
c000c71e:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000c723:	40                   	inc    eax
c000c724:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000c729:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000c72e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c734:	05 7c 09 00 00       	add    eax,0x97c
c000c739:	83 ec 0c             	sub    esp,0xc
c000c73c:	50                   	push   eax
c000c73d:	e8 bc cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c74a:	89 c3                	mov    ebx,eax
c000c74c:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000c751:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c757:	05 7c 09 00 00       	add    eax,0x97c
c000c75c:	83 ec 0c             	sub    esp,0xc
c000c75f:	50                   	push   eax
c000c760:	e8 99 cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c765:	83 c4 10             	add    esp,0x10
c000c768:	83 ec 08             	sub    esp,0x8
c000c76b:	50                   	push   eax
c000c76c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c770:	e8 75 f5 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c775:	83 c4 10             	add    esp,0x10
c000c778:	8b 00                	mov    eax,DWORD PTR [eax]
c000c77a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c77f:	6a 11                	push   0x11
c000c781:	53                   	push   ebx
c000c782:	50                   	push   eax
c000c783:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c787:	e8 f4 f8 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c78c:	83 c4 10             	add    esp,0x10
c000c78f:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000c794:	48                   	dec    eax
c000c795:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000c79a:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000c79f:	85 c0                	test   eax,eax
c000c7a1:	75 01                	jne    c000c7a4 <VAS::VAS(bool)+0x27a>
c000c7a3:	fb                   	sti    
c000c7a4:	90                   	nop
c000c7a5:	83 c4 28             	add    esp,0x28
c000c7a8:	5b                   	pop    ebx
c000c7a9:	c3                   	ret    

c000c7aa <VAS::evict(unsigned long)>:
c000c7aa:	55                   	push   ebp
c000c7ab:	57                   	push   edi
c000c7ac:	56                   	push   esi
c000c7ad:	53                   	push   ebx
c000c7ae:	83 ec 1c             	sub    esp,0x1c
c000c7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c7b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7bd:	e8 58 f3 ff ff       	call   c000bb1a <Virt::allocateSwapfilePage()>
c000c7c2:	89 c7                	mov    edi,eax
c000c7c4:	a1 2c 75 02 c0       	mov    eax,ds:0xc002752c
c000c7c9:	85 c0                	test   eax,eax
c000c7cb:	7e 3d                	jle    c000c80a <VAS::evict(unsigned long)+0x60>
c000c7cd:	89 ee                	mov    esi,ebp
c000c7cf:	31 db                	xor    ebx,ebx
c000c7d1:	83 ec 0c             	sub    esp,0xc
c000c7d4:	57                   	push   edi
c000c7d5:	e8 2e f3 ff ff       	call   c000bb08 <Virt::swapIDToSector(unsigned long)>
c000c7da:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7dd:	01 d8                	add    eax,ebx
c000c7df:	6a 01                	push   0x1
c000c7e1:	31 d2                	xor    edx,edx
c000c7e3:	43                   	inc    ebx
c000c7e4:	52                   	push   edx
c000c7e5:	81 c6 00 02 00 00    	add    esi,0x200
c000c7eb:	50                   	push   eax
c000c7ec:	0f be 05 38 75 02 c0 	movsx  eax,BYTE PTR ds:0xc0027538
c000c7f3:	ff 34 85 9c 85 02 c0 	push   DWORD PTR [eax*4-0x3ffd7a64]
c000c7fa:	e8 c5 3d 00 00       	call   c00105c4 <LogicalDisk::write(unsigned long long, int, void*)>
c000c7ff:	83 c4 20             	add    esp,0x20
c000c802:	39 1d 2c 75 02 c0    	cmp    DWORD PTR ds:0xc002752c,ebx
c000c808:	7f c7                	jg     c000c7d1 <VAS::evict(unsigned long)+0x27>
c000c80a:	83 ec 08             	sub    esp,0x8
c000c80d:	c1 e7 0b             	shl    edi,0xb
c000c810:	55                   	push   ebp
c000c811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c815:	e8 d0 f4 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c81a:	8b 10                	mov    edx,DWORD PTR [eax]
c000c81c:	89 d3                	mov    ebx,edx
c000c81e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c824:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c82a:	09 d7                	or     edi,edx
c000c82c:	89 38                	mov    DWORD PTR [eax],edi
c000c82e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c831:	ff 05 08 82 02 c0    	inc    DWORD PTR ds:0xc0028208
c000c837:	e8 07 d8 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c83c:	0f 20 d8             	mov    eax,cr3
c000c83f:	0f 22 d8             	mov    cr3,eax
c000c842:	ff 35 08 82 02 c0    	push   DWORD PTR ds:0xc0028208
c000c848:	55                   	push   ebp
c000c849:	53                   	push   ebx
c000c84a:	68 8c 46 02 c0       	push   0xc002468c
c000c84f:	e8 ab 04 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c854:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c000c859:	c7 44 24 50 4a 47 02 c0 	mov    DWORD PTR [esp+0x50],0xc002474a
c000c861:	8d 50 01             	lea    edx,[eax+0x1]
c000c864:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c868:	89 15 04 82 02 c0    	mov    DWORD PTR ds:0xc0028204,edx
c000c86e:	83 c4 3c             	add    esp,0x3c
c000c871:	5b                   	pop    ebx
c000c872:	5e                   	pop    esi
c000c873:	5f                   	pop    edi
c000c874:	5d                   	pop    ebp
c000c875:	e9 85 04 00 00       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c000c87a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c87a:	55                   	push   ebp
c000c87b:	57                   	push   edi
c000c87c:	56                   	push   esi
c000c87d:	53                   	push   ebx
c000c87e:	83 ec 14             	sub    esp,0x14
c000c881:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c885:	68 5b 47 02 c0       	push   0xc002475b
c000c88a:	e8 70 04 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c88f:	83 c4 10             	add    esp,0x10
c000c892:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c896:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c89c:	74 20                	je     c000c8be <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c89e:	83 ec 08             	sub    esp,0x8
c000c8a1:	55                   	push   ebp
c000c8a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8a6:	e8 3f f4 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c8ab:	83 c4 10             	add    esp,0x10
c000c8ae:	89 c3                	mov    ebx,eax
c000c8b0:	85 c0                	test   eax,eax
c000c8b2:	74 0a                	je     c000c8be <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c8b4:	8b 38                	mov    edi,DWORD PTR [eax]
c000c8b6:	f7 c7 01 00 00 00    	test   edi,0x1
c000c8bc:	74 0a                	je     c000c8c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c8be:	31 c0                	xor    eax,eax
c000c8c0:	83 c4 0c             	add    esp,0xc
c000c8c3:	5b                   	pop    ebx
c000c8c4:	5e                   	pop    esi
c000c8c5:	5f                   	pop    edi
c000c8c6:	5d                   	pop    ebp
c000c8c7:	c3                   	ret    
c000c8c8:	e8 f9 d7 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c8cd:	c1 ef 0b             	shr    edi,0xb
c000c8d0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c8d2:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c8d8:	09 c2                	or     edx,eax
c000c8da:	81 ca 01 08 00 00    	or     edx,0x801
c000c8e0:	89 13                	mov    DWORD PTR [ebx],edx
c000c8e2:	8b 0d 2c 75 02 c0    	mov    ecx,DWORD PTR ds:0xc002752c
c000c8e8:	85 c9                	test   ecx,ecx
c000c8ea:	7e 3d                	jle    c000c929 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c8ec:	89 ee                	mov    esi,ebp
c000c8ee:	31 db                	xor    ebx,ebx
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	57                   	push   edi
c000c8f4:	e8 0f f2 ff ff       	call   c000bb08 <Virt::swapIDToSector(unsigned long)>
c000c8f9:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8fc:	01 d8                	add    eax,ebx
c000c8fe:	6a 01                	push   0x1
c000c900:	31 d2                	xor    edx,edx
c000c902:	43                   	inc    ebx
c000c903:	52                   	push   edx
c000c904:	81 c6 00 02 00 00    	add    esi,0x200
c000c90a:	50                   	push   eax
c000c90b:	0f be 05 38 75 02 c0 	movsx  eax,BYTE PTR ds:0xc0027538
c000c912:	ff 34 85 9c 85 02 c0 	push   DWORD PTR [eax*4-0x3ffd7a64]
c000c919:	e8 3a 3c 00 00       	call   c0010558 <LogicalDisk::read(unsigned long long, int, void*)>
c000c91e:	83 c4 20             	add    esp,0x20
c000c921:	39 1d 2c 75 02 c0    	cmp    DWORD PTR ds:0xc002752c,ebx
c000c927:	7f c7                	jg     c000c8f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c929:	a1 08 82 02 c0       	mov    eax,ds:0xc0028208
c000c92e:	48                   	dec    eax
c000c92f:	52                   	push   edx
c000c930:	a3 08 82 02 c0       	mov    ds:0xc0028208,eax
c000c935:	50                   	push   eax
c000c936:	55                   	push   ebp
c000c937:	68 6e 47 02 c0       	push   0xc002476e
c000c93c:	e8 be 03 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c941:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c944:	e8 a1 f1 ff ff       	call   c000baea <Virt::freeSwapfilePage(unsigned long)>
c000c949:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000c94e:	83 c4 10             	add    esp,0x10
c000c951:	48                   	dec    eax
c000c952:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000c957:	85 c0                	test   eax,eax
c000c959:	74 1d                	je     c000c978 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c95b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c95f:	25 ff 0f 00 00       	and    eax,0xfff
c000c964:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c969:	77 10                	ja     c000c97b <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c96b:	0f 20 d8             	mov    eax,cr3
c000c96e:	0f 22 d8             	mov    cr3,eax
c000c971:	b0 01                	mov    al,0x1
c000c973:	e9 48 ff ff ff       	jmp    c000c8c0 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c978:	fb                   	sti    
c000c979:	eb e0                	jmp    c000c95b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c97b:	83 ec 0c             	sub    esp,0xc
c000c97e:	68 83 47 02 c0       	push   0xc0024783
c000c983:	e8 77 03 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000c988:	83 c4 10             	add    esp,0x10
c000c98b:	eb de                	jmp    c000c96b <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c98d:	90                   	nop

c000c98e <VAS::scanForEviction()>:
c000c98e:	57                   	push   edi
c000c98f:	31 ff                	xor    edi,edi
c000c991:	56                   	push   esi
c000c992:	53                   	push   ebx
c000c993:	83 ec 10             	sub    esp,0x10
c000c996:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c99a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c99d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9a3:	75 0e                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000c9a5:	89 da                	mov    edx,ebx
c000c9a7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9aa:	c1 ea 16             	shr    edx,0x16
c000c9ad:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9b1:	74 4e                	je     c000ca01 <VAS::scanForEviction()+0x73>
c000c9b3:	53                   	push   ebx
c000c9b4:	56                   	push   esi
c000c9b5:	e8 30 f3 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000c9ba:	5a                   	pop    edx
c000c9bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9bd:	59                   	pop    ecx
c000c9be:	89 d1                	mov    ecx,edx
c000c9c0:	81 e1 01 08 00 00    	and    ecx,0x801
c000c9c6:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c9cc:	74 3e                	je     c000ca0c <VAS::scanForEviction()+0x7e>
c000c9ce:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c9d4:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c9da:	76 2b                	jbe    c000ca07 <VAS::scanForEviction()+0x79>
c000c9dc:	47                   	inc    edi
c000c9dd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c9e4:	83 ff 03             	cmp    edi,0x3
c000c9e7:	74 32                	je     c000ca1b <VAS::scanForEviction()+0x8d>
c000c9e9:	31 db                	xor    ebx,ebx
c000c9eb:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9f1:	75 c0                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000c9f3:	89 da                	mov    edx,ebx
c000c9f5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9f8:	c1 ea 16             	shr    edx,0x16
c000c9fb:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9ff:	75 b2                	jne    c000c9b3 <VAS::scanForEviction()+0x25>
c000ca01:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ca07:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ca0a:	eb 91                	jmp    c000c99d <VAS::scanForEviction()+0xf>
c000ca0c:	f6 c2 20             	test   dl,0x20
c000ca0f:	74 13                	je     c000ca24 <VAS::scanForEviction()+0x96>
c000ca11:	83 e2 df             	and    edx,0xffffffdf
c000ca14:	89 10                	mov    DWORD PTR [eax],edx
c000ca16:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ca19:	eb b3                	jmp    c000c9ce <VAS::scanForEviction()+0x40>
c000ca1b:	83 c4 10             	add    esp,0x10
c000ca1e:	31 c0                	xor    eax,eax
c000ca20:	5b                   	pop    ebx
c000ca21:	5e                   	pop    esi
c000ca22:	5f                   	pop    edi
c000ca23:	c3                   	ret    
c000ca24:	83 ec 08             	sub    esp,0x8
c000ca27:	89 d0                	mov    eax,edx
c000ca29:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca2e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ca32:	53                   	push   ebx
c000ca33:	68 93 47 02 c0       	push   0xc0024793
c000ca38:	e8 c2 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ca3d:	58                   	pop    eax
c000ca3e:	5a                   	pop    edx
c000ca3f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca42:	56                   	push   esi
c000ca43:	e8 62 fd ff ff       	call   c000c7aa <VAS::evict(unsigned long)>
c000ca48:	59                   	pop    ecx
c000ca49:	5b                   	pop    ebx
c000ca4a:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca4d:	68 a7 47 02 c0       	push   0xc00247a7
c000ca52:	e8 a8 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ca57:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca65:	83 c4 10             	add    esp,0x10
c000ca68:	5b                   	pop    ebx
c000ca69:	5e                   	pop    esi
c000ca6a:	5f                   	pop    edi
c000ca6b:	c3                   	ret    

c000ca6c <mapVASFirstTime>:
c000ca6c:	55                   	push   ebp
c000ca6d:	57                   	push   edi
c000ca6e:	56                   	push   esi
c000ca6f:	53                   	push   ebx
c000ca70:	83 ec 0c             	sub    esp,0xc
c000ca73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ca78:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ca7b:	4a                   	dec    edx
c000ca7c:	0f 84 fe 00 00 00    	je     c000cb80 <mapVASFirstTime+0x114>
c000ca82:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ca85:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca88:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca8d:	c1 e5 15             	shl    ebp,0x15
c000ca90:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca95:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca9b:	29 eb                	sub    ebx,ebp
c000ca9d:	29 ef                	sub    edi,ebp
c000ca9f:	83 ec 08             	sub    esp,0x8
c000caa2:	53                   	push   ebx
c000caa3:	68 d3 47 02 c0       	push   0xc00247d3
c000caa8:	e8 52 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000caad:	e8 14 d6 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cab2:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cab9:	6a 01                	push   0x1
c000cabb:	53                   	push   ebx
c000cabc:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cac2:	50                   	push   eax
c000cac3:	56                   	push   esi
c000cac4:	e8 ad f8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cac9:	83 c4 20             	add    esp,0x20
c000cacc:	39 fb                	cmp    ebx,edi
c000cace:	75 cf                	jne    c000ca9f <mapVASFirstTime+0x33>
c000cad0:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cad5:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cada:	29 eb                	sub    ebx,ebp
c000cadc:	29 ef                	sub    edi,ebp
c000cade:	83 ec 08             	sub    esp,0x8
c000cae1:	53                   	push   ebx
c000cae2:	68 ef 47 02 c0       	push   0xc00247ef
c000cae7:	e8 13 02 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000caec:	58                   	pop    eax
c000caed:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000caf1:	5a                   	pop    edx
c000caf2:	19 c0                	sbb    eax,eax
c000caf4:	83 e0 04             	and    eax,0x4
c000caf7:	05 03 04 00 00       	add    eax,0x403
c000cafc:	50                   	push   eax
c000cafd:	68 03 48 02 c0       	push   0xc0024803
c000cb02:	e8 f8 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb07:	e8 ba d5 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cb0c:	59                   	pop    ecx
c000cb0d:	89 c5                	mov    ebp,eax
c000cb0f:	58                   	pop    eax
c000cb10:	55                   	push   ebp
c000cb11:	68 11 48 02 c0       	push   0xc0024811
c000cb16:	e8 e4 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb1b:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cb1f:	19 d2                	sbb    edx,edx
c000cb21:	83 e2 04             	and    edx,0x4
c000cb24:	81 c2 03 04 00 00    	add    edx,0x403
c000cb2a:	89 14 24             	mov    DWORD PTR [esp],edx
c000cb2d:	6a 01                	push   0x1
c000cb2f:	53                   	push   ebx
c000cb30:	55                   	push   ebp
c000cb31:	56                   	push   esi
c000cb32:	e8 3f f8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	53                   	push   ebx
c000cb3b:	56                   	push   esi
c000cb3c:	e8 a9 f1 ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c000cb41:	5a                   	pop    edx
c000cb42:	59                   	pop    ecx
c000cb43:	ff 30                	push   DWORD PTR [eax]
c000cb45:	68 2d 48 02 c0       	push   0xc002482d
c000cb4a:	e8 b0 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb4f:	0f 20 d8             	mov    eax,cr3
c000cb52:	83 c4 0c             	add    esp,0xc
c000cb55:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cb5b:	56                   	push   esi
c000cb5c:	50                   	push   eax
c000cb5d:	68 38 48 02 c0       	push   0xc0024838
c000cb62:	e8 98 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb67:	83 c4 10             	add    esp,0x10
c000cb6a:	39 df                	cmp    edi,ebx
c000cb6c:	0f 85 6c ff ff ff    	jne    c000cade <mapVASFirstTime+0x72>
c000cb72:	0f 20 d8             	mov    eax,cr3
c000cb75:	0f 22 d8             	mov    cr3,eax
c000cb78:	83 c4 0c             	add    esp,0xc
c000cb7b:	5b                   	pop    ebx
c000cb7c:	5e                   	pop    esi
c000cb7d:	5f                   	pop    edi
c000cb7e:	5d                   	pop    ebp
c000cb7f:	c3                   	ret    
c000cb80:	83 ec 0c             	sub    esp,0xc
c000cb83:	68 ba 47 02 c0       	push   0xc00247ba
c000cb88:	e8 72 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cb8d:	83 c4 10             	add    esp,0x10
c000cb90:	83 c4 0c             	add    esp,0xc
c000cb93:	5b                   	pop    ebx
c000cb94:	5e                   	pop    esi
c000cb95:	5f                   	pop    edi
c000cb96:	5d                   	pop    ebp
c000cb97:	c3                   	ret    

c000cb98 <__cxa_atexit>:
c000cb98:	31 c0                	xor    eax,eax
c000cb9a:	c3                   	ret    

c000cb9b <__cxa_finalize>:
c000cb9b:	c3                   	ret    

c000cb9c <__stack_chk_fail>:
c000cb9c:	55                   	push   ebp
c000cb9d:	89 e5                	mov    ebp,esp
c000cb9f:	83 ec 14             	sub    esp,0x14
c000cba2:	68 50 48 02 c0       	push   0xc0024850
c000cba7:	e8 53 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbac:	58                   	pop    eax
c000cbad:	5a                   	pop    edx
c000cbae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb1:	68 a0 48 02 c0       	push   0xc00248a0
c000cbb6:	e8 44 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbbb:	59                   	pop    ecx
c000cbbc:	58                   	pop    eax
c000cbbd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbc0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbc3:	68 a0 48 02 c0       	push   0xc00248a0
c000cbc8:	e8 32 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbcd:	5a                   	pop    edx
c000cbce:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbd1:	59                   	pop    ecx
c000cbd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbd7:	68 a0 48 02 c0       	push   0xc00248a0
c000cbdc:	e8 1e 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbe1:	5a                   	pop    edx
c000cbe2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe5:	59                   	pop    ecx
c000cbe6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe8:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbea:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbed:	68 a0 48 02 c0       	push   0xc00248a0
c000cbf2:	e8 08 01 00 00       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000cbf7:	c7 04 24 a8 48 02 c0 	mov    DWORD PTR [esp],0xc00248a8
c000cbfe:	e8 c4 7d 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000cc03:	83 c4 10             	add    esp,0x10
c000cc06:	c9                   	leave  
c000cc07:	c3                   	ret    

c000cc08 <__cxa_pure_virtual>:
c000cc08:	83 ec 18             	sub    esp,0x18
c000cc0b:	68 c0 48 02 c0       	push   0xc00248c0
c000cc10:	e8 b2 7d 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000cc15:	83 c4 1c             	add    esp,0x1c
c000cc18:	c3                   	ret    

c000cc19 <operator new[](unsigned long)>:
c000cc19:	e9 f1 cd ff ff       	jmp    c0009a0f <malloc>

c000cc1e <operator delete(void*, unsigned long)>:
c000cc1e:	e9 0c ce ff ff       	jmp    c0009a2f <rfree>

c000cc23 <operator delete[](void*)>:
c000cc23:	e9 07 ce ff ff       	jmp    c0009a2f <rfree>

c000cc28 <operator delete[](void*, unsigned long)>:
c000cc28:	e9 02 ce ff ff       	jmp    c0009a2f <rfree>

c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cc2d:	55                   	push   ebp
c000cc2e:	b9 11 00 00 00       	mov    ecx,0x11
c000cc33:	57                   	push   edi
c000cc34:	56                   	push   esi
c000cc35:	be a6 43 02 c0       	mov    esi,0xc00243a6
c000cc3a:	53                   	push   ebx
c000cc3b:	83 ec 20             	sub    esp,0x20
c000cc3e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc42:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc46:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cc4a:	fc                   	cld    
c000cc4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc4d:	89 ee                	mov    esi,ebp
c000cc4f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc53:	eb 02                	jmp    c000cc57 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cc55:	89 c6                	mov    esi,eax
c000cc57:	31 d2                	xor    edx,edx
c000cc59:	41                   	inc    ecx
c000cc5a:	89 f0                	mov    eax,esi
c000cc5c:	f7 f3                	div    ebx
c000cc5e:	39 de                	cmp    esi,ebx
c000cc60:	73 f3                	jae    c000cc55 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cc62:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cc65:	eb 02                	jmp    c000cc69 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cc67:	89 c5                	mov    ebp,eax
c000cc69:	31 d2                	xor    edx,edx
c000cc6b:	49                   	dec    ecx
c000cc6c:	89 e8                	mov    eax,ebp
c000cc6e:	f7 f3                	div    ebx
c000cc70:	39 dd                	cmp    ebp,ebx
c000cc72:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cc76:	88 11                	mov    BYTE PTR [ecx],dl
c000cc78:	73 ed                	jae    c000cc67 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cc7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc7e:	83 c4 20             	add    esp,0x20
c000cc81:	5b                   	pop    ebx
c000cc82:	5e                   	pop    esi
c000cc83:	5f                   	pop    edi
c000cc84:	5d                   	pop    ebp
c000cc85:	c3                   	ret    

c000cc86 <Dbg::logc(char)>:
c000cc86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc8a:	f6 05 00 81 02 c0 10 	test   BYTE PTR ds:0xc0028100,0x10
c000cc91:	75 12                	jne    c000cca5 <Dbg::logc(char)+0x1f>
c000cc93:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc98:	ec                   	in     al,dx
c000cc99:	a8 20                	test   al,0x20
c000cc9b:	74 fb                	je     c000cc98 <Dbg::logc(char)+0x12>
c000cc9d:	ba f8 03 00 00       	mov    edx,0x3f8
c000cca2:	88 c8                	mov    al,cl
c000cca4:	ee                   	out    dx,al
c000cca5:	c3                   	ret    

c000cca6 <Dbg::logs(char*)>:
c000cca6:	53                   	push   ebx
c000cca7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ccab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccae:	84 c0                	test   al,al
c000ccb0:	74 0f                	je     c000ccc1 <Dbg::logs(char*)+0x1b>
c000ccb2:	50                   	push   eax
c000ccb3:	43                   	inc    ebx
c000ccb4:	e8 cd ff ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ccb9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccbc:	5a                   	pop    edx
c000ccbd:	84 c0                	test   al,al
c000ccbf:	75 f1                	jne    c000ccb2 <Dbg::logs(char*)+0xc>
c000ccc1:	5b                   	pop    ebx
c000ccc2:	c3                   	ret    

c000ccc3 <Dbg::logWriteInt(unsigned int)>:
c000ccc3:	83 ec 10             	sub    esp,0x10
c000ccc6:	6a 0a                	push   0xa
c000ccc8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cccc:	50                   	push   eax
c000cccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd1:	e8 57 ff ff ff       	call   c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccd6:	50                   	push   eax
c000ccd7:	e8 ca ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000ccdc:	83 c4 20             	add    esp,0x20
c000ccdf:	c3                   	ret    

c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cce0:	83 ec 10             	sub    esp,0x10
c000cce3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cce7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cceb:	50                   	push   eax
c000ccec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf0:	e8 38 ff ff ff       	call   c000cc2d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccf5:	50                   	push   eax
c000ccf6:	e8 ab ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000ccfb:	83 c4 20             	add    esp,0x20
c000ccfe:	c3                   	ret    

c000ccff <Dbg::kprintf(char const*, ...)>:
c000ccff:	55                   	push   ebp
c000cd00:	57                   	push   edi
c000cd01:	56                   	push   esi
c000cd02:	53                   	push   ebx
c000cd03:	83 ec 0c             	sub    esp,0xc
c000cd06:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd0a:	f6 05 00 81 02 c0 10 	test   BYTE PTR ds:0xc0028100,0x10
c000cd11:	74 08                	je     c000cd1b <Dbg::kprintf(char const*, ...)+0x1c>
c000cd13:	83 c4 0c             	add    esp,0xc
c000cd16:	5b                   	pop    ebx
c000cd17:	5e                   	pop    esi
c000cd18:	5f                   	pop    edi
c000cd19:	5d                   	pop    ebp
c000cd1a:	c3                   	ret    
c000cd1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cd1f:	31 db                	xor    ebx,ebx
c000cd21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd25:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cd28:	84 c0                	test   al,al
c000cd2a:	74 e7                	je     c000cd13 <Dbg::kprintf(char const*, ...)+0x14>
c000cd2c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd2f:	3c 25                	cmp    al,0x25
c000cd31:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd34:	75 44                	jne    c000cd7a <Dbg::kprintf(char const*, ...)+0x7b>
c000cd36:	83 c3 02             	add    ebx,0x2
c000cd39:	8a 07                	mov    al,BYTE PTR [edi]
c000cd3b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cd3e:	83 e8 25             	sub    eax,0x25
c000cd41:	3c 53                	cmp    al,0x53
c000cd43:	0f 87 c9 00 00 00    	ja     c000ce12 <Dbg::kprintf(char const*, ...)+0x113>
c000cd49:	0f b6 c0             	movzx  eax,al
c000cd4c:	ff 24 85 d4 48 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb72c]
c000cd53:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd57:	89 c8                	mov    eax,ecx
c000cd59:	83 c1 04             	add    ecx,0x4
c000cd5c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd60:	ff 30                	push   DWORD PTR [eax]
c000cd62:	e8 5c ff ff ff       	call   c000ccc3 <Dbg::logWriteInt(unsigned int)>
c000cd67:	5f                   	pop    edi
c000cd68:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cd6c:	84 c0                	test   al,al
c000cd6e:	74 a3                	je     c000cd13 <Dbg::kprintf(char const*, ...)+0x14>
c000cd70:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd73:	3c 25                	cmp    al,0x25
c000cd75:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd78:	74 bc                	je     c000cd36 <Dbg::kprintf(char const*, ...)+0x37>
c000cd7a:	50                   	push   eax
c000cd7b:	89 eb                	mov    ebx,ebp
c000cd7d:	e8 04 ff ff ff       	call   c000cc86 <Dbg::logc(char)>
c000cd82:	89 fd                	mov    ebp,edi
c000cd84:	58                   	pop    eax
c000cd85:	eb e1                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cd87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd8b:	89 c8                	mov    eax,ecx
c000cd8d:	83 c1 04             	add    ecx,0x4
c000cd90:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd94:	ff 30                	push   DWORD PTR [eax]
c000cd96:	e8 0b ff ff ff       	call   c000cca6 <Dbg::logs(char*)>
c000cd9b:	58                   	pop    eax
c000cd9c:	eb ca                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cd9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cda2:	89 d0                	mov    eax,edx
c000cda4:	83 c2 04             	add    edx,0x4
c000cda7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdab:	ff 30                	push   DWORD PTR [eax]
c000cdad:	e8 11 ff ff ff       	call   c000ccc3 <Dbg::logWriteInt(unsigned int)>
c000cdb2:	58                   	pop    eax
c000cdb3:	eb b3                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cdb5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdb9:	89 d0                	mov    eax,edx
c000cdbb:	83 c2 04             	add    edx,0x4
c000cdbe:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cdc1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdc5:	50                   	push   eax
c000cdc6:	e8 bb fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000cdcb:	58                   	pop    eax
c000cdcc:	eb 9a                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cdce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdd2:	89 c8                	mov    eax,ecx
c000cdd4:	83 c1 04             	add    ecx,0x4
c000cdd7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cddb:	6a 10                	push   0x10
c000cddd:	ff 30                	push   DWORD PTR [eax]
c000cddf:	e8 fc fe ff ff       	call   c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cde4:	59                   	pop    ecx
c000cde5:	5f                   	pop    edi
c000cde6:	eb 80                	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000cde8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdec:	89 d0                	mov    eax,edx
c000cdee:	83 c2 08             	add    edx,0x8
c000cdf1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdf5:	6a 10                	push   0x10
c000cdf7:	ff 30                	push   DWORD PTR [eax]
c000cdf9:	e8 e2 fe ff ff       	call   c000cce0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cdfe:	58                   	pop    eax
c000cdff:	5a                   	pop    edx
c000ce00:	e9 63 ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce05:	6a 25                	push   0x25
c000ce07:	e8 7a fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce0c:	58                   	pop    eax
c000ce0d:	e9 56 ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce12:	6a 25                	push   0x25
c000ce14:	e8 6d fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ce1c:	50                   	push   eax
c000ce1d:	e8 64 fe ff ff       	call   c000cc86 <Dbg::logc(char)>
c000ce22:	5a                   	pop    edx
c000ce23:	59                   	pop    ecx
c000ce24:	e9 3f ff ff ff       	jmp    c000cd68 <Dbg::kprintf(char const*, ...)+0x69>
c000ce29:	90                   	nop

c000ce2a <File::read(unsigned long long, void*, int*)>:
c000ce2a:	53                   	push   ebx
c000ce2b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce2f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce33:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce3a:	3c 19                	cmp    al,0x19
c000ce3c:	77 35                	ja     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce3e:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c000ce45:	85 c0                	test   eax,eax
c000ce47:	74 2a                	je     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce49:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce4f:	85 c0                	test   eax,eax
c000ce51:	74 20                	je     c000ce73 <File::read(unsigned long long, void*, int*)+0x49>
c000ce53:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce57:	74 21                	je     c000ce7a <File::read(unsigned long long, void*, int*)+0x50>
c000ce59:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce5b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce5f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce6d:	5b                   	pop    ebx
c000ce6e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ce71:	ff e0                	jmp    eax
c000ce73:	b8 0b 00 00 00       	mov    eax,0xb
c000ce78:	eb 05                	jmp    c000ce7f <File::read(unsigned long long, void*, int*)+0x55>
c000ce7a:	b8 05 00 00 00       	mov    eax,0x5
c000ce7f:	5b                   	pop    ebx
c000ce80:	c3                   	ret    
c000ce81:	90                   	nop

c000ce82 <File::write(unsigned long long, void*, int*)>:
c000ce82:	53                   	push   ebx
c000ce83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce8b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce92:	3c 19                	cmp    al,0x19
c000ce94:	77 35                	ja     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000ce96:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c000ce9d:	85 c0                	test   eax,eax
c000ce9f:	74 2a                	je     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000cea1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cea7:	85 c0                	test   eax,eax
c000cea9:	74 20                	je     c000cecb <File::write(unsigned long long, void*, int*)+0x49>
c000ceab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ceaf:	74 21                	je     c000ced2 <File::write(unsigned long long, void*, int*)+0x50>
c000ceb1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ceb3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ceb7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cec5:	5b                   	pop    ebx
c000cec6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cec9:	ff e0                	jmp    eax
c000cecb:	b8 0b 00 00 00       	mov    eax,0xb
c000ced0:	eb 05                	jmp    c000ced7 <File::write(unsigned long long, void*, int*)+0x55>
c000ced2:	b8 05 00 00 00       	mov    eax,0x5
c000ced7:	5b                   	pop    ebx
c000ced8:	c3                   	ret    
c000ced9:	90                   	nop

c000ceda <Directory::read(unsigned long long, void*, int*)>:
c000ceda:	53                   	push   ebx
c000cedb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cedf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cee3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ceea:	3c 19                	cmp    al,0x19
c000ceec:	77 35                	ja     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceee:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c000cef5:	85 c0                	test   eax,eax
c000cef7:	74 2a                	je     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cef9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ceff:	85 c0                	test   eax,eax
c000cf01:	74 20                	je     c000cf23 <Directory::read(unsigned long long, void*, int*)+0x49>
c000cf03:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf07:	74 21                	je     c000cf2a <Directory::read(unsigned long long, void*, int*)+0x50>
c000cf09:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cf0b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf0f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cf15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf1d:	5b                   	pop    ebx
c000cf1e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cf21:	ff e0                	jmp    eax
c000cf23:	b8 0b 00 00 00       	mov    eax,0xb
c000cf28:	eb 05                	jmp    c000cf2f <Directory::read(unsigned long long, void*, int*)+0x55>
c000cf2a:	b8 05 00 00 00       	mov    eax,0x5
c000cf2f:	5b                   	pop    ebx
c000cf30:	c3                   	ret    
c000cf31:	90                   	nop

c000cf32 <Directory::write(unsigned long long, void*, int*)>:
c000cf32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf36:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cf3d:	b8 0b 00 00 00       	mov    eax,0xb
c000cf42:	80 fa 19             	cmp    dl,0x19
c000cf45:	77 18                	ja     c000cf5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf47:	8b 14 95 a0 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7960]
c000cf4e:	85 d2                	test   edx,edx
c000cf50:	74 0d                	je     c000cf5f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf52:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cf59:	19 c0                	sbb    eax,eax
c000cf5b:	83 e0 0a             	and    eax,0xa
c000cf5e:	40                   	inc    eax
c000cf5f:	c3                   	ret    

c000cf60 <File::isAtty()>:
c000cf60:	31 c0                	xor    eax,eax
c000cf62:	c3                   	ret    
c000cf63:	90                   	nop

c000cf64 <Directory::isAtty()>:
c000cf64:	31 c0                	xor    eax,eax
c000cf66:	c3                   	ret    
c000cf67:	90                   	nop

c000cf68 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cf68:	b8 0a 00 00 00       	mov    eax,0xa
c000cf6d:	c3                   	ret    

c000cf6e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cf6e:	b8 0a 00 00 00       	mov    eax,0xa
c000cf73:	c3                   	ret    

c000cf74 <Filesystem::allocateSwapfile(char const*, int)>:
c000cf74:	31 c0                	xor    eax,eax
c000cf76:	31 d2                	xor    edx,edx
c000cf78:	c3                   	ret    
c000cf79:	90                   	nop

c000cf7a <File::~File()>:
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	ba 10 4b 02 c0       	mov    edx,0xc0024b10
c000cf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf86:	89 10                	mov    DWORD PTR [eax],edx
c000cf88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf8c:	83 ec 0c             	sub    esp,0xc
c000cf8f:	50                   	push   eax
c000cf90:	e8 e3 e7 ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	90                   	nop
c000cf99:	83 c4 0c             	add    esp,0xc
c000cf9c:	c3                   	ret    
c000cf9d:	90                   	nop

c000cf9e <File::~File()>:
c000cf9e:	83 ec 0c             	sub    esp,0xc
c000cfa1:	83 ec 0c             	sub    esp,0xc
c000cfa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa8:	e8 cd ff ff ff       	call   c000cf7a <File::~File()>
c000cfad:	83 c4 10             	add    esp,0x10
c000cfb0:	83 ec 08             	sub    esp,0x8
c000cfb3:	68 14 01 00 00       	push   0x114
c000cfb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfbc:	e8 5d fc ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000cfc1:	83 c4 10             	add    esp,0x10
c000cfc4:	83 c4 0c             	add    esp,0xc
c000cfc7:	c3                   	ret    

c000cfc8 <Directory::~Directory()>:
c000cfc8:	83 ec 0c             	sub    esp,0xc
c000cfcb:	ba 2c 4b 02 c0       	mov    edx,0xc0024b2c
c000cfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd4:	89 10                	mov    DWORD PTR [eax],edx
c000cfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfda:	83 ec 0c             	sub    esp,0xc
c000cfdd:	50                   	push   eax
c000cfde:	e8 95 e7 ff ff       	call   c000b778 <UnixFile::~UnixFile()>
c000cfe3:	83 c4 10             	add    esp,0x10
c000cfe6:	90                   	nop
c000cfe7:	83 c4 0c             	add    esp,0xc
c000cfea:	c3                   	ret    
c000cfeb:	90                   	nop

c000cfec <Directory::~Directory()>:
c000cfec:	83 ec 0c             	sub    esp,0xc
c000cfef:	83 ec 0c             	sub    esp,0xc
c000cff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff6:	e8 cd ff ff ff       	call   c000cfc8 <Directory::~Directory()>
c000cffb:	83 c4 10             	add    esp,0x10
c000cffe:	83 ec 08             	sub    esp,0x8
c000d001:	68 14 01 00 00       	push   0x114
c000d006:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00a:	e8 0f fc ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000d00f:	83 c4 10             	add    esp,0x10
c000d012:	83 c4 0c             	add    esp,0xc
c000d015:	c3                   	ret    

c000d016 <Filesystem::Filesystem()>:
c000d016:	ba a8 4a 02 c0       	mov    edx,0xc0024aa8
c000d01b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d01f:	89 10                	mov    DWORD PTR [eax],edx
c000d021:	8b 15 14 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028214
c000d027:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d02b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d02e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d032:	a3 14 82 02 c0       	mov    ds:0xc0028214,eax
c000d037:	90                   	nop
c000d038:	c3                   	ret    
c000d039:	90                   	nop

c000d03a <Filesystem::~Filesystem()>:
c000d03a:	ba a8 4a 02 c0       	mov    edx,0xc0024aa8
c000d03f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d043:	89 10                	mov    DWORD PTR [eax],edx
c000d045:	90                   	nop
c000d046:	c3                   	ret    
c000d047:	90                   	nop

c000d048 <Filesystem::~Filesystem()>:
c000d048:	83 ec 0c             	sub    esp,0xc
c000d04b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d04f:	e8 e6 ff ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c000d054:	83 c4 04             	add    esp,0x4
c000d057:	83 ec 08             	sub    esp,0x8
c000d05a:	6a 08                	push   0x8
c000d05c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d060:	e8 b9 fb ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000d065:	83 c4 10             	add    esp,0x10
c000d068:	83 c4 0c             	add    esp,0xc
c000d06b:	c3                   	ret    

c000d06c <Fs::getcwd(Process*, char*, int)>:
c000d06c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d070:	31 c0                	xor    eax,eax
c000d072:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d075:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d079:	7d 15                	jge    c000d090 <Fs::getcwd(Process*, char*, int)+0x24>
c000d07b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d07f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d086:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d089:	84 c9                	test   cl,cl
c000d08b:	74 06                	je     c000d093 <Fs::getcwd(Process*, char*, int)+0x27>
c000d08d:	40                   	inc    eax
c000d08e:	eb e2                	jmp    c000d072 <Fs::getcwd(Process*, char*, int)+0x6>
c000d090:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d093:	31 c0                	xor    eax,eax
c000d095:	c3                   	ret    

c000d096 <Fs::initVFS()>:
c000d096:	83 ec 18             	sub    esp,0x18
c000d099:	6a 08                	push   0x8
c000d09b:	e8 6f c9 ff ff       	call   c0009a0f <malloc>
c000d0a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0a3:	e8 08 e9 00 00       	call   c001b9b0 <FAT::FAT()>
c000d0a8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d0af:	e8 5b c9 ff ff       	call   c0009a0f <malloc>
c000d0b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0b7:	e8 52 fb 00 00       	call   c001cc0e <ISO9660::ISO9660()>
c000d0bc:	83 c4 1c             	add    esp,0x1c
c000d0bf:	c3                   	ret    

c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d0c0:	55                   	push   ebp
c000d0c1:	57                   	push   edi
c000d0c2:	56                   	push   esi
c000d0c3:	53                   	push   ebx
c000d0c4:	81 ec 10 04 00 00    	sub    esp,0x410
c000d0ca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d0d1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d0d8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d0df:	68 00 04 00 00       	push   0x400
c000d0e4:	6a 00                	push   0x0
c000d0e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d0ea:	56                   	push   esi
c000d0eb:	e8 94 35 ff ff       	call   c0000684 <memset>
c000d0f0:	83 c4 10             	add    esp,0x10
c000d0f3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d0f7:	75 0b                	jne    c000d104 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d0f9:	50                   	push   eax
c000d0fa:	50                   	push   eax
c000d0fb:	57                   	push   edi
c000d0fc:	56                   	push   esi
c000d0fd:	e8 3e 36 ff ff       	call   c0000740 <strcpy>
c000d102:	eb 41                	jmp    c000d145 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d104:	8a 07                	mov    al,BYTE PTR [edi]
c000d106:	3c 5c                	cmp    al,0x5c
c000d108:	74 04                	je     c000d10e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d10a:	3c 2f                	cmp    al,0x2f
c000d10c:	75 18                	jne    c000d126 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d10e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d111:	3c 60                	cmp    al,0x60
c000d113:	7e 03                	jle    c000d118 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d115:	83 e8 20             	sub    eax,0x20
c000d118:	88 04 24             	mov    BYTE PTR [esp],al
c000d11b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d122:	50                   	push   eax
c000d123:	50                   	push   eax
c000d124:	eb 18                	jmp    c000d13e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d126:	50                   	push   eax
c000d127:	50                   	push   eax
c000d128:	55                   	push   ebp
c000d129:	56                   	push   esi
c000d12a:	e8 11 36 ff ff       	call   c0000740 <strcpy>
c000d12f:	5a                   	pop    edx
c000d130:	59                   	pop    ecx
c000d131:	68 62 61 02 c0       	push   0xc0026162
c000d136:	56                   	push   esi
c000d137:	e8 44 37 ff ff       	call   c0000880 <strcat>
c000d13c:	5d                   	pop    ebp
c000d13d:	58                   	pop    eax
c000d13e:	57                   	push   edi
c000d13f:	56                   	push   esi
c000d140:	e8 3b 37 ff ff       	call   c0000880 <strcat>
c000d145:	83 c4 10             	add    esp,0x10
c000d148:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d14b:	3c 60                	cmp    al,0x60
c000d14d:	7e 03                	jle    c000d152 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d14f:	83 e8 20             	sub    eax,0x20
c000d152:	88 04 24             	mov    BYTE PTR [esp],al
c000d155:	88 03                	mov    BYTE PTR [ebx],al
c000d157:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d15e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d164:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d168:	bf 03 00 00 00       	mov    edi,0x3
c000d16d:	b8 03 00 00 00       	mov    eax,0x3
c000d172:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d175:	84 d2                	test   dl,dl
c000d177:	0f 84 91 00 00 00    	je     c000d20e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d17d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d180:	80 fa 5c             	cmp    dl,0x5c
c000d183:	74 05                	je     c000d18a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d185:	80 fa 2f             	cmp    dl,0x2f
c000d188:	75 12                	jne    c000d19c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d18a:	89 c5                	mov    ebp,eax
c000d18c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d191:	74 09                	je     c000d19c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d193:	40                   	inc    eax
c000d194:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d198:	89 cf                	mov    edi,ecx
c000d19a:	eb d6                	jmp    c000d172 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d19c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d1a1:	75 5b                	jne    c000d1fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a3:	80 fa 2e             	cmp    dl,0x2e
c000d1a6:	75 56                	jne    c000d1fe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d1ac:	74 19                	je     c000d1c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d1ae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1b3:	74 53                	je     c000d208 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1b5:	89 f9                	mov    ecx,edi
c000d1b7:	41                   	inc    ecx
c000d1b8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1bb:	80 fa 2f             	cmp    dl,0x2f
c000d1be:	74 f7                	je     c000d1b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c0:	80 fa 5c             	cmp    dl,0x5c
c000d1c3:	74 f2                	je     c000d1b7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c5:	eb d1                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1c7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1cc:	74 3a                	je     c000d208 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1ce:	83 f8 03             	cmp    eax,0x3
c000d1d1:	74 c5                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1d3:	41                   	inc    ecx
c000d1d4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1d7:	80 fa 2f             	cmp    dl,0x2f
c000d1da:	74 f7                	je     c000d1d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1dc:	80 fa 5c             	cmp    dl,0x5c
c000d1df:	74 f2                	je     c000d1d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1e1:	48                   	dec    eax
c000d1e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1e6:	75 06                	jne    c000d1ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1ec:	eb f3                	jmp    c000d1e1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d1ee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1f2:	74 07                	je     c000d1fb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d1f4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1f8:	48                   	dec    eax
c000d1f9:	eb f3                	jmp    c000d1ee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1fb:	40                   	inc    eax
c000d1fc:	eb 9a                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1fe:	80 fa 2f             	cmp    dl,0x2f
c000d201:	74 95                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d203:	80 fa 5c             	cmp    dl,0x5c
c000d206:	74 90                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d208:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d20b:	40                   	inc    eax
c000d20c:	eb 8a                	jmp    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d20e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d212:	83 ec 0c             	sub    esp,0xc
c000d215:	53                   	push   ebx
c000d216:	e8 85 34 ff ff       	call   c00006a0 <strlen>
c000d21b:	83 c4 10             	add    esp,0x10
c000d21e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d223:	75 26                	jne    c000d24b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d225:	83 ec 0c             	sub    esp,0xc
c000d228:	53                   	push   ebx
c000d229:	e8 72 34 ff ff       	call   c00006a0 <strlen>
c000d22e:	83 c4 10             	add    esp,0x10
c000d231:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d236:	74 26                	je     c000d25e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d238:	83 ec 0c             	sub    esp,0xc
c000d23b:	53                   	push   ebx
c000d23c:	e8 5f 34 ff ff       	call   c00006a0 <strlen>
c000d241:	83 c4 10             	add    esp,0x10
c000d244:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d249:	eb c7                	jmp    c000d212 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d24b:	83 ec 0c             	sub    esp,0xc
c000d24e:	53                   	push   ebx
c000d24f:	e8 4c 34 ff ff       	call   c00006a0 <strlen>
c000d254:	83 c4 10             	add    esp,0x10
c000d257:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d25c:	74 c7                	je     c000d225 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d25e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d264:	5b                   	pop    ebx
c000d265:	5e                   	pop    esi
c000d266:	5f                   	pop    edi
c000d267:	5d                   	pop    ebp
c000d268:	c3                   	ret    
c000d269:	90                   	nop

c000d26a <File::File(char const*, Process*)>:
c000d26a:	83 ec 0c             	sub    esp,0xc
c000d26d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d271:	83 ec 08             	sub    esp,0x8
c000d274:	6a 00                	push   0x0
c000d276:	50                   	push   eax
c000d277:	e8 1a e3 ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000d27c:	83 c4 10             	add    esp,0x10
c000d27f:	ba 10 4b 02 c0       	mov    edx,0xc0024b10
c000d284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d288:	89 10                	mov    DWORD PTR [eax],edx
c000d28a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d28e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d298:	83 c0 0d             	add    eax,0xd
c000d29b:	83 ec 04             	sub    esp,0x4
c000d29e:	52                   	push   edx
c000d29f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a3:	50                   	push   eax
c000d2a4:	e8 17 fe ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d2b3:	8d 50 bf             	lea    edx,[eax-0x41]
c000d2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d2c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2cc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2d2:	0f b6 c0             	movzx  eax,al
c000d2d5:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c000d2dc:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2e2:	85 c0                	test   eax,eax
c000d2e4:	75 40                	jne    c000d326 <File::File(char const*, Process*)+0xbc>
c000d2e6:	83 ec 0c             	sub    esp,0xc
c000d2e9:	68 4c 4a 02 c0       	push   0xc0024a4c
c000d2ee:	e8 0c fa ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d2f3:	83 c4 10             	add    esp,0x10
c000d2f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2fa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d300:	0f b6 c0             	movzx  eax,al
c000d303:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c000d30a:	83 ec 0c             	sub    esp,0xc
c000d30d:	50                   	push   eax
c000d30e:	e8 43 31 00 00       	call   c0010456 <LogicalDisk::mount()>
c000d313:	83 c4 10             	add    esp,0x10
c000d316:	83 ec 0c             	sub    esp,0xc
c000d319:	68 e9 6b 02 c0       	push   0xc0026be9
c000d31e:	e8 dc f9 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d323:	83 c4 10             	add    esp,0x10
c000d326:	90                   	nop
c000d327:	83 c4 0c             	add    esp,0xc
c000d32a:	c3                   	ret    
c000d32b:	90                   	nop

c000d32c <File::open(FileOpenMode)>:
c000d32c:	53                   	push   ebx
c000d32d:	b8 0b 00 00 00       	mov    eax,0xb
c000d332:	83 ec 08             	sub    esp,0x8
c000d335:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d339:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d340:	80 fa 19             	cmp    dl,0x19
c000d343:	77 40                	ja     c000d385 <File::open(FileOpenMode)+0x59>
c000d345:	8b 14 95 a0 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7960]
c000d34c:	85 d2                	test   edx,edx
c000d34e:	74 35                	je     c000d385 <File::open(FileOpenMode)+0x59>
c000d350:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d356:	85 d2                	test   edx,edx
c000d358:	74 2b                	je     c000d385 <File::open(FileOpenMode)+0x59>
c000d35a:	b8 06 00 00 00       	mov    eax,0x6
c000d35f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d363:	75 20                	jne    c000d385 <File::open(FileOpenMode)+0x59>
c000d365:	8b 02                	mov    eax,DWORD PTR [edx]
c000d367:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d36d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d371:	51                   	push   ecx
c000d372:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d375:	51                   	push   ecx
c000d376:	52                   	push   edx
c000d377:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d37a:	83 c4 10             	add    esp,0x10
c000d37d:	85 c0                	test   eax,eax
c000d37f:	75 04                	jne    c000d385 <File::open(FileOpenMode)+0x59>
c000d381:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d385:	83 c4 08             	add    esp,0x8
c000d388:	5b                   	pop    ebx
c000d389:	c3                   	ret    

c000d38a <File::close()>:
c000d38a:	53                   	push   ebx
c000d38b:	b8 0b 00 00 00       	mov    eax,0xb
c000d390:	83 ec 08             	sub    esp,0x8
c000d393:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d397:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d39e:	80 fa 19             	cmp    dl,0x19
c000d3a1:	77 41                	ja     c000d3e4 <File::close()+0x5a>
c000d3a3:	8b 1c 95 a0 86 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7960]
c000d3aa:	85 db                	test   ebx,ebx
c000d3ac:	74 36                	je     c000d3e4 <File::close()+0x5a>
c000d3ae:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d3b5:	74 2d                	je     c000d3e4 <File::close()+0x5a>
c000d3b7:	b8 05 00 00 00       	mov    eax,0x5
c000d3bc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d3c0:	74 22                	je     c000d3e4 <File::close()+0x5a>
c000d3c2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d3c6:	8b 04 95 a0 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7960]
c000d3cd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d3d3:	53                   	push   ebx
c000d3d4:	53                   	push   ebx
c000d3d5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3d7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d3dd:	50                   	push   eax
c000d3de:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d3e1:	83 c4 10             	add    esp,0x10
c000d3e4:	83 c4 08             	add    esp,0x8
c000d3e7:	5b                   	pop    ebx
c000d3e8:	c3                   	ret    
c000d3e9:	90                   	nop

c000d3ea <File::seek(unsigned long long)>:
c000d3ea:	56                   	push   esi
c000d3eb:	53                   	push   ebx
c000d3ec:	b8 0b 00 00 00       	mov    eax,0xb
c000d3f1:	51                   	push   ecx
c000d3f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d3f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3fa:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d401:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d405:	80 fa 19             	cmp    dl,0x19
c000d408:	77 31                	ja     c000d43b <File::seek(unsigned long long)+0x51>
c000d40a:	8b 14 95 a0 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7960]
c000d411:	85 d2                	test   edx,edx
c000d413:	74 26                	je     c000d43b <File::seek(unsigned long long)+0x51>
c000d415:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d41b:	85 d2                	test   edx,edx
c000d41d:	74 1c                	je     c000d43b <File::seek(unsigned long long)+0x51>
c000d41f:	b8 05 00 00 00       	mov    eax,0x5
c000d424:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d428:	74 11                	je     c000d43b <File::seek(unsigned long long)+0x51>
c000d42a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d42c:	53                   	push   ebx
c000d42d:	51                   	push   ecx
c000d42e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d434:	52                   	push   edx
c000d435:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d438:	83 c4 10             	add    esp,0x10
c000d43b:	5a                   	pop    edx
c000d43c:	5b                   	pop    ebx
c000d43d:	5e                   	pop    esi
c000d43e:	c3                   	ret    
c000d43f:	90                   	nop

c000d440 <File::tell(unsigned long long*)>:
c000d440:	83 ec 0c             	sub    esp,0xc
c000d443:	b8 0b 00 00 00       	mov    eax,0xb
c000d448:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d44c:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d453:	80 fa 19             	cmp    dl,0x19
c000d456:	77 34                	ja     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d458:	8b 14 95 a0 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7960]
c000d45f:	85 d2                	test   edx,edx
c000d461:	74 29                	je     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d463:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d469:	85 d2                	test   edx,edx
c000d46b:	74 1f                	je     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d46d:	b8 05 00 00 00       	mov    eax,0x5
c000d472:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d476:	74 14                	je     c000d48c <File::tell(unsigned long long*)+0x4c>
c000d478:	50                   	push   eax
c000d479:	8b 02                	mov    eax,DWORD PTR [edx]
c000d47b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d47f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d485:	52                   	push   edx
c000d486:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d489:	83 c4 10             	add    esp,0x10
c000d48c:	83 c4 0c             	add    esp,0xc
c000d48f:	c3                   	ret    

c000d490 <File::rewind()>:
c000d490:	83 ec 10             	sub    esp,0x10
c000d493:	6a 00                	push   0x0
c000d495:	6a 00                	push   0x0
c000d497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49b:	e8 4a ff ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c000d4a0:	83 c4 1c             	add    esp,0x1c
c000d4a3:	c3                   	ret    

c000d4a4 <File::unlink()>:
c000d4a4:	83 ec 0c             	sub    esp,0xc
c000d4a7:	b8 0b 00 00 00       	mov    eax,0xb
c000d4ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4b7:	80 f9 19             	cmp    cl,0x19
c000d4ba:	77 2f                	ja     c000d4eb <File::unlink()+0x47>
c000d4bc:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c000d4c3:	85 c9                	test   ecx,ecx
c000d4c5:	74 24                	je     c000d4eb <File::unlink()+0x47>
c000d4c7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4cd:	85 c9                	test   ecx,ecx
c000d4cf:	74 1a                	je     c000d4eb <File::unlink()+0x47>
c000d4d1:	b8 06 00 00 00       	mov    eax,0x6
c000d4d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4da:	75 0f                	jne    c000d4eb <File::unlink()+0x47>
c000d4dc:	83 c2 0d             	add    edx,0xd
c000d4df:	50                   	push   eax
c000d4e0:	50                   	push   eax
c000d4e1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4e3:	52                   	push   edx
c000d4e4:	51                   	push   ecx
c000d4e5:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	83 c4 0c             	add    esp,0xc
c000d4ee:	c3                   	ret    
c000d4ef:	90                   	nop

c000d4f0 <File::rename(char const*)>:
c000d4f0:	83 ec 0c             	sub    esp,0xc
c000d4f3:	b8 0b 00 00 00       	mov    eax,0xb
c000d4f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d503:	80 f9 19             	cmp    cl,0x19
c000d506:	77 32                	ja     c000d53a <File::rename(char const*)+0x4a>
c000d508:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c000d50f:	85 c9                	test   ecx,ecx
c000d511:	74 27                	je     c000d53a <File::rename(char const*)+0x4a>
c000d513:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d519:	85 c9                	test   ecx,ecx
c000d51b:	74 1d                	je     c000d53a <File::rename(char const*)+0x4a>
c000d51d:	b8 06 00 00 00       	mov    eax,0x6
c000d522:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d526:	75 12                	jne    c000d53a <File::rename(char const*)+0x4a>
c000d528:	83 c2 0d             	add    edx,0xd
c000d52b:	50                   	push   eax
c000d52c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d52e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d532:	52                   	push   edx
c000d533:	51                   	push   ecx
c000d534:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	83 c4 0c             	add    esp,0xc
c000d53d:	c3                   	ret    

c000d53e <File::chfatattr(unsigned char, unsigned char)>:
c000d53e:	57                   	push   edi
c000d53f:	b8 0b 00 00 00       	mov    eax,0xb
c000d544:	56                   	push   esi
c000d545:	53                   	push   ebx
c000d546:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d54a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d54e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d555:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d559:	80 f9 19             	cmp    cl,0x19
c000d55c:	77 37                	ja     c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d55e:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c000d565:	85 c9                	test   ecx,ecx
c000d567:	74 2c                	je     c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d569:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d56f:	85 c9                	test   ecx,ecx
c000d571:	74 22                	je     c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d573:	b8 06 00 00 00       	mov    eax,0x6
c000d578:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d57c:	75 17                	jne    c000d595 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d57e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d580:	89 f0                	mov    eax,esi
c000d582:	83 c2 0d             	add    edx,0xd
c000d585:	0f b6 f0             	movzx  esi,al
c000d588:	0f b6 db             	movzx  ebx,bl
c000d58b:	56                   	push   esi
c000d58c:	53                   	push   ebx
c000d58d:	52                   	push   edx
c000d58e:	51                   	push   ecx
c000d58f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d592:	83 c4 10             	add    esp,0x10
c000d595:	5b                   	pop    ebx
c000d596:	5e                   	pop    esi
c000d597:	5f                   	pop    edi
c000d598:	c3                   	ret    
c000d599:	90                   	nop

c000d59a <File::exists()>:
c000d59a:	83 ec 0c             	sub    esp,0xc
c000d59d:	31 c0                	xor    eax,eax
c000d59f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5a3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5aa:	80 f9 19             	cmp    cl,0x19
c000d5ad:	77 24                	ja     c000d5d3 <File::exists()+0x39>
c000d5af:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c000d5b6:	85 c9                	test   ecx,ecx
c000d5b8:	74 19                	je     c000d5d3 <File::exists()+0x39>
c000d5ba:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5c0:	85 c9                	test   ecx,ecx
c000d5c2:	74 0f                	je     c000d5d3 <File::exists()+0x39>
c000d5c4:	83 c2 0d             	add    edx,0xd
c000d5c7:	50                   	push   eax
c000d5c8:	50                   	push   eax
c000d5c9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5cb:	52                   	push   edx
c000d5cc:	51                   	push   ecx
c000d5cd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d5d0:	83 c4 10             	add    esp,0x10
c000d5d3:	83 c4 0c             	add    esp,0xc
c000d5d6:	c3                   	ret    
c000d5d7:	90                   	nop

c000d5d8 <File::stat(unsigned long long*, bool*)>:
c000d5d8:	56                   	push   esi
c000d5d9:	53                   	push   ebx
c000d5da:	50                   	push   eax
c000d5db:	b8 0b 00 00 00       	mov    eax,0xb
c000d5e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d5e8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d5f3:	80 f9 19             	cmp    cl,0x19
c000d5f6:	77 3d                	ja     c000d635 <File::stat(unsigned long long*, bool*)+0x5d>
c000d5f8:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c000d5ff:	85 c9                	test   ecx,ecx
c000d601:	74 32                	je     c000d635 <File::stat(unsigned long long*, bool*)+0x5d>
c000d603:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d609:	85 c9                	test   ecx,ecx
c000d60b:	74 28                	je     c000d635 <File::stat(unsigned long long*, bool*)+0x5d>
c000d60d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d60f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d613:	74 13                	je     c000d628 <File::stat(unsigned long long*, bool*)+0x50>
c000d615:	83 ec 04             	sub    esp,0x4
c000d618:	56                   	push   esi
c000d619:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d61f:	51                   	push   ecx
c000d620:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d623:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d626:	eb 0a                	jmp    c000d632 <File::stat(unsigned long long*, bool*)+0x5a>
c000d628:	53                   	push   ebx
c000d629:	83 c2 0d             	add    edx,0xd
c000d62c:	56                   	push   esi
c000d62d:	52                   	push   edx
c000d62e:	51                   	push   ecx
c000d62f:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d632:	83 c4 10             	add    esp,0x10
c000d635:	5a                   	pop    edx
c000d636:	5b                   	pop    ebx
c000d637:	5e                   	pop    esi
c000d638:	c3                   	ret    

c000d639 <Fs::setcwd(Process*, char*)>:
c000d639:	55                   	push   ebp
c000d63a:	57                   	push   edi
c000d63b:	56                   	push   esi
c000d63c:	53                   	push   ebx
c000d63d:	81 ec 20 02 00 00    	sub    esp,0x220
c000d643:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d64a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d650:	57                   	push   edi
c000d651:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d658:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d65c:	56                   	push   esi
c000d65d:	e8 5e fa ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d662:	89 34 24             	mov    DWORD PTR [esp],esi
c000d665:	e8 36 30 ff ff       	call   c00006a0 <strlen>
c000d66a:	83 c4 10             	add    esp,0x10
c000d66d:	83 f8 02             	cmp    eax,0x2
c000d670:	77 43                	ja     c000d6b5 <Fs::setcwd(Process*, char*)+0x7c>
c000d672:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d677:	83 eb 41             	sub    ebx,0x41
c000d67a:	8b 04 9d a0 86 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7960]
c000d681:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d688:	75 45                	jne    c000d6cf <Fs::setcwd(Process*, char*)+0x96>
c000d68a:	83 ec 0c             	sub    esp,0xc
c000d68d:	68 24 4a 02 c0       	push   0xc0024a24
c000d692:	e8 68 f6 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d697:	5a                   	pop    edx
c000d698:	ff 34 9d a0 86 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7960]
c000d69f:	e8 b2 2d 00 00       	call   c0010456 <LogicalDisk::mount()>
c000d6a4:	c7 04 24 e9 6b 02 c0 	mov    DWORD PTR [esp],0xc0026be9
c000d6ab:	e8 4f f6 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d6b0:	83 c4 10             	add    esp,0x10
c000d6b3:	eb 1a                	jmp    c000d6cf <Fs::setcwd(Process*, char*)+0x96>
c000d6b5:	83 ec 0c             	sub    esp,0xc
c000d6b8:	56                   	push   esi
c000d6b9:	e8 e2 2f ff ff       	call   c00006a0 <strlen>
c000d6be:	83 c4 10             	add    esp,0x10
c000d6c1:	83 f8 03             	cmp    eax,0x3
c000d6c4:	75 42                	jne    c000d708 <Fs::setcwd(Process*, char*)+0xcf>
c000d6c6:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d6cb:	75 3b                	jne    c000d708 <Fs::setcwd(Process*, char*)+0xcf>
c000d6cd:	eb a3                	jmp    c000d672 <Fs::setcwd(Process*, char*)+0x39>
c000d6cf:	b8 03 00 00 00       	mov    eax,0x3
c000d6d4:	83 fb 19             	cmp    ebx,0x19
c000d6d7:	0f 87 c6 00 00 00    	ja     c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d6dd:	8b 14 9d a0 86 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7960]
c000d6e4:	b8 05 00 00 00       	mov    eax,0x5
c000d6e9:	85 d2                	test   edx,edx
c000d6eb:	0f 84 b2 00 00 00    	je     c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d6f1:	b8 06 00 00 00       	mov    eax,0x6
c000d6f6:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6fd:	0f 85 92 00 00 00    	jne    c000d795 <Fs::setcwd(Process*, char*)+0x15c>
c000d703:	e9 9b 00 00 00       	jmp    c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d708:	83 ec 0c             	sub    esp,0xc
c000d70b:	68 14 01 00 00       	push   0x114
c000d710:	e8 fa c2 ff ff       	call   c0009a0f <malloc>
c000d715:	83 c4 0c             	add    esp,0xc
c000d718:	89 c3                	mov    ebx,eax
c000d71a:	55                   	push   ebp
c000d71b:	56                   	push   esi
c000d71c:	50                   	push   eax
c000d71d:	e8 48 fb ff ff       	call   c000d26a <File::File(char const*, Process*)>
c000d722:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d727:	83 c4 0c             	add    esp,0xc
c000d72a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d72e:	50                   	push   eax
c000d72f:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d733:	50                   	push   eax
c000d734:	53                   	push   ebx
c000d735:	e8 9e fe ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c000d73a:	83 c4 10             	add    esp,0x10
c000d73d:	83 f8 02             	cmp    eax,0x2
c000d740:	74 04                	je     c000d746 <Fs::setcwd(Process*, char*)+0x10d>
c000d742:	85 c0                	test   eax,eax
c000d744:	74 1c                	je     c000d762 <Fs::setcwd(Process*, char*)+0x129>
c000d746:	b8 01 00 00 00       	mov    eax,0x1
c000d74b:	85 db                	test   ebx,ebx
c000d74d:	74 54                	je     c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d74f:	83 ec 0c             	sub    esp,0xc
c000d752:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d754:	53                   	push   ebx
c000d755:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d758:	83 c4 10             	add    esp,0x10
c000d75b:	b8 01 00 00 00       	mov    eax,0x1
c000d760:	eb 41                	jmp    c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d762:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d767:	75 1c                	jne    c000d785 <Fs::setcwd(Process*, char*)+0x14c>
c000d769:	b8 02 00 00 00       	mov    eax,0x2
c000d76e:	85 db                	test   ebx,ebx
c000d770:	74 31                	je     c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d772:	83 ec 0c             	sub    esp,0xc
c000d775:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d777:	53                   	push   ebx
c000d778:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d77b:	83 c4 10             	add    esp,0x10
c000d77e:	b8 02 00 00 00       	mov    eax,0x2
c000d783:	eb 1e                	jmp    c000d7a3 <Fs::setcwd(Process*, char*)+0x16a>
c000d785:	85 db                	test   ebx,ebx
c000d787:	74 0c                	je     c000d795 <Fs::setcwd(Process*, char*)+0x15c>
c000d789:	83 ec 0c             	sub    esp,0xc
c000d78c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d78e:	53                   	push   ebx
c000d78f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d792:	83 c4 10             	add    esp,0x10
c000d795:	50                   	push   eax
c000d796:	50                   	push   eax
c000d797:	56                   	push   esi
c000d798:	57                   	push   edi
c000d799:	e8 a2 2f ff ff       	call   c0000740 <strcpy>
c000d79e:	83 c4 10             	add    esp,0x10
c000d7a1:	31 c0                	xor    eax,eax
c000d7a3:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d7a9:	5b                   	pop    ebx
c000d7aa:	5e                   	pop    esi
c000d7ab:	5f                   	pop    edi
c000d7ac:	5d                   	pop    ebp
c000d7ad:	c3                   	ret    

c000d7ae <Directory::Directory(char const*, Process*)>:
c000d7ae:	83 ec 0c             	sub    esp,0xc
c000d7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b5:	83 ec 08             	sub    esp,0x8
c000d7b8:	6a 00                	push   0x0
c000d7ba:	50                   	push   eax
c000d7bb:	e8 d6 dd ff ff       	call   c000b596 <UnixFile::UnixFile(int)>
c000d7c0:	83 c4 10             	add    esp,0x10
c000d7c3:	ba 2c 4b 02 c0       	mov    edx,0xc0024b2c
c000d7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cc:	89 10                	mov    DWORD PTR [eax],edx
c000d7ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d7d2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7dc:	83 c0 0d             	add    eax,0xd
c000d7df:	83 ec 04             	sub    esp,0x4
c000d7e2:	52                   	push   edx
c000d7e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e7:	50                   	push   eax
c000d7e8:	e8 d3 f8 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d7ed:	83 c4 10             	add    esp,0x10
c000d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d7f7:	8d 50 bf             	lea    edx,[eax-0x41]
c000d7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fe:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d808:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d810:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d816:	0f b6 c0             	movzx  eax,al
c000d819:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c000d820:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d826:	85 c0                	test   eax,eax
c000d828:	75 40                	jne    c000d86a <Directory::Directory(char const*, Process*)+0xbc>
c000d82a:	83 ec 0c             	sub    esp,0xc
c000d82d:	68 74 4a 02 c0       	push   0xc0024a74
c000d832:	e8 c8 f4 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d837:	83 c4 10             	add    esp,0x10
c000d83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d83e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d844:	0f b6 c0             	movzx  eax,al
c000d847:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c000d84e:	83 ec 0c             	sub    esp,0xc
c000d851:	50                   	push   eax
c000d852:	e8 ff 2b 00 00       	call   c0010456 <LogicalDisk::mount()>
c000d857:	83 c4 10             	add    esp,0x10
c000d85a:	83 ec 0c             	sub    esp,0xc
c000d85d:	68 e9 6b 02 c0       	push   0xc0026be9
c000d862:	e8 98 f4 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000d867:	83 c4 10             	add    esp,0x10
c000d86a:	90                   	nop
c000d86b:	83 c4 0c             	add    esp,0xc
c000d86e:	c3                   	ret    
c000d86f:	90                   	nop

c000d870 <Directory::open()>:
c000d870:	53                   	push   ebx
c000d871:	b8 0b 00 00 00       	mov    eax,0xb
c000d876:	83 ec 08             	sub    esp,0x8
c000d879:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d87d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d884:	80 fa 19             	cmp    dl,0x19
c000d887:	77 3d                	ja     c000d8c6 <Directory::open()+0x56>
c000d889:	8b 14 95 a0 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7960]
c000d890:	85 d2                	test   edx,edx
c000d892:	74 32                	je     c000d8c6 <Directory::open()+0x56>
c000d894:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d89a:	85 d2                	test   edx,edx
c000d89c:	74 28                	je     c000d8c6 <Directory::open()+0x56>
c000d89e:	b8 06 00 00 00       	mov    eax,0x6
c000d8a3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d8a7:	75 1d                	jne    c000d8c6 <Directory::open()+0x56>
c000d8a9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d8af:	50                   	push   eax
c000d8b0:	8b 02                	mov    eax,DWORD PTR [edx]
c000d8b2:	51                   	push   ecx
c000d8b3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d8b6:	51                   	push   ecx
c000d8b7:	52                   	push   edx
c000d8b8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d8bb:	83 c4 10             	add    esp,0x10
c000d8be:	85 c0                	test   eax,eax
c000d8c0:	75 04                	jne    c000d8c6 <Directory::open()+0x56>
c000d8c2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d8c6:	83 c4 08             	add    esp,0x8
c000d8c9:	5b                   	pop    ebx
c000d8ca:	c3                   	ret    
c000d8cb:	90                   	nop

c000d8cc <Directory::close()>:
c000d8cc:	53                   	push   ebx
c000d8cd:	b8 0b 00 00 00       	mov    eax,0xb
c000d8d2:	83 ec 08             	sub    esp,0x8
c000d8d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d8d9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d8e0:	80 fa 19             	cmp    dl,0x19
c000d8e3:	77 41                	ja     c000d926 <Directory::close()+0x5a>
c000d8e5:	8b 1c 95 a0 86 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7960]
c000d8ec:	85 db                	test   ebx,ebx
c000d8ee:	74 36                	je     c000d926 <Directory::close()+0x5a>
c000d8f0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d8f7:	74 2d                	je     c000d926 <Directory::close()+0x5a>
c000d8f9:	b8 05 00 00 00       	mov    eax,0x5
c000d8fe:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d902:	74 22                	je     c000d926 <Directory::close()+0x5a>
c000d904:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d908:	8b 04 95 a0 86 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7960]
c000d90f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d915:	53                   	push   ebx
c000d916:	53                   	push   ebx
c000d917:	8b 10                	mov    edx,DWORD PTR [eax]
c000d919:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d91f:	50                   	push   eax
c000d920:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d923:	83 c4 10             	add    esp,0x10
c000d926:	83 c4 08             	add    esp,0x8
c000d929:	5b                   	pop    ebx
c000d92a:	c3                   	ret    
c000d92b:	90                   	nop

c000d92c <Directory::unlink()>:
c000d92c:	83 ec 0c             	sub    esp,0xc
c000d92f:	b8 0b 00 00 00       	mov    eax,0xb
c000d934:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d938:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d93f:	80 f9 19             	cmp    cl,0x19
c000d942:	77 2f                	ja     c000d973 <Directory::unlink()+0x47>
c000d944:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c000d94b:	85 c9                	test   ecx,ecx
c000d94d:	74 24                	je     c000d973 <Directory::unlink()+0x47>
c000d94f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d955:	85 c9                	test   ecx,ecx
c000d957:	74 1a                	je     c000d973 <Directory::unlink()+0x47>
c000d959:	b8 06 00 00 00       	mov    eax,0x6
c000d95e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d962:	75 0f                	jne    c000d973 <Directory::unlink()+0x47>
c000d964:	83 c2 0d             	add    edx,0xd
c000d967:	50                   	push   eax
c000d968:	50                   	push   eax
c000d969:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d96b:	52                   	push   edx
c000d96c:	51                   	push   ecx
c000d96d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d970:	83 c4 10             	add    esp,0x10
c000d973:	83 c4 0c             	add    esp,0xc
c000d976:	c3                   	ret    
c000d977:	90                   	nop

c000d978 <Directory::rename(char const*)>:
c000d978:	83 ec 0c             	sub    esp,0xc
c000d97b:	b8 0b 00 00 00       	mov    eax,0xb
c000d980:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d984:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d98b:	80 f9 19             	cmp    cl,0x19
c000d98e:	77 32                	ja     c000d9c2 <Directory::rename(char const*)+0x4a>
c000d990:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c000d997:	85 c9                	test   ecx,ecx
c000d999:	74 27                	je     c000d9c2 <Directory::rename(char const*)+0x4a>
c000d99b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9a1:	85 c9                	test   ecx,ecx
c000d9a3:	74 1d                	je     c000d9c2 <Directory::rename(char const*)+0x4a>
c000d9a5:	b8 06 00 00 00       	mov    eax,0x6
c000d9aa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9ae:	75 12                	jne    c000d9c2 <Directory::rename(char const*)+0x4a>
c000d9b0:	83 c2 0d             	add    edx,0xd
c000d9b3:	50                   	push   eax
c000d9b4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9ba:	52                   	push   edx
c000d9bb:	51                   	push   ecx
c000d9bc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d9bf:	83 c4 10             	add    esp,0x10
c000d9c2:	83 c4 0c             	add    esp,0xc
c000d9c5:	c3                   	ret    

c000d9c6 <Directory::exists()>:
c000d9c6:	83 ec 0c             	sub    esp,0xc
c000d9c9:	31 c0                	xor    eax,eax
c000d9cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9cf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9d6:	80 f9 19             	cmp    cl,0x19
c000d9d9:	77 24                	ja     c000d9ff <Directory::exists()+0x39>
c000d9db:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c000d9e2:	85 c9                	test   ecx,ecx
c000d9e4:	74 19                	je     c000d9ff <Directory::exists()+0x39>
c000d9e6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9ec:	85 c9                	test   ecx,ecx
c000d9ee:	74 0f                	je     c000d9ff <Directory::exists()+0x39>
c000d9f0:	83 c2 0d             	add    edx,0xd
c000d9f3:	50                   	push   eax
c000d9f4:	50                   	push   eax
c000d9f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9f7:	52                   	push   edx
c000d9f8:	51                   	push   ecx
c000d9f9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	83 c4 0c             	add    esp,0xc
c000da02:	c3                   	ret    
c000da03:	90                   	nop

c000da04 <Directory::read(dirent*)>:
c000da04:	83 ec 1c             	sub    esp,0x1c
c000da07:	b8 0b 00 00 00       	mov    eax,0xb
c000da0c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da10:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000da17:	80 fa 19             	cmp    dl,0x19
c000da1a:	77 30                	ja     c000da4c <Directory::read(dirent*)+0x48>
c000da1c:	8b 14 95 a0 86 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7960]
c000da23:	85 d2                	test   edx,edx
c000da25:	74 25                	je     c000da4c <Directory::read(dirent*)+0x48>
c000da27:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da2e:	74 1c                	je     c000da4c <Directory::read(dirent*)+0x48>
c000da30:	83 ec 0c             	sub    esp,0xc
c000da33:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da35:	8d 54 24 18          	lea    edx,[esp+0x18]
c000da39:	52                   	push   edx
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	6a 00                	push   0x0
c000da40:	68 10 01 00 00       	push   0x110
c000da45:	51                   	push   ecx
c000da46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000da49:	83 c4 20             	add    esp,0x20
c000da4c:	83 c4 1c             	add    esp,0x1c
c000da4f:	c3                   	ret    

c000da50 <Directory::create()>:
c000da50:	83 ec 0c             	sub    esp,0xc
c000da53:	b8 0b 00 00 00       	mov    eax,0xb
c000da58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da5c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da63:	80 f9 19             	cmp    cl,0x19
c000da66:	77 2f                	ja     c000da97 <Directory::create()+0x47>
c000da68:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c000da6f:	85 c9                	test   ecx,ecx
c000da71:	74 24                	je     c000da97 <Directory::create()+0x47>
c000da73:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000da79:	85 c9                	test   ecx,ecx
c000da7b:	74 1a                	je     c000da97 <Directory::create()+0x47>
c000da7d:	b8 06 00 00 00       	mov    eax,0x6
c000da82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000da86:	75 0f                	jne    c000da97 <Directory::create()+0x47>
c000da88:	83 c2 0d             	add    edx,0xd
c000da8b:	50                   	push   eax
c000da8c:	50                   	push   eax
c000da8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da8f:	52                   	push   edx
c000da90:	51                   	push   ecx
c000da91:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000da94:	83 c4 10             	add    esp,0x10
c000da97:	83 c4 0c             	add    esp,0xc
c000da9a:	c3                   	ret    
c000da9b:	90                   	nop

c000da9c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000da9c:	b8 0a 00 00 00       	mov    eax,0xa
c000daa1:	c3                   	ret    
c000daa2:	66 90                	xchg   ax,ax

c000daa4 <Bus::Bus(char const*)>:
c000daa4:	83 ec 0c             	sub    esp,0xc
c000daa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daab:	83 ec 08             	sub    esp,0x8
c000daae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dab2:	50                   	push   eax
c000dab3:	e8 8a 09 00 00       	call   c000e442 <Device::Device(char const*)>
c000dab8:	83 c4 10             	add    esp,0x10
c000dabb:	ba 48 4b 02 c0       	mov    edx,0xc0024b48
c000dac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac4:	89 10                	mov    DWORD PTR [eax],edx
c000dac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daca:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dad4:	90                   	nop
c000dad5:	83 c4 0c             	add    esp,0xc
c000dad8:	c3                   	ret    
c000dad9:	90                   	nop
c000dada:	66 90                	xchg   ax,ax

c000dadc <Bus::~Bus()>:
c000dadc:	83 ec 0c             	sub    esp,0xc
c000dadf:	ba 48 4b 02 c0       	mov    edx,0xc0024b48
c000dae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae8:	89 10                	mov    DWORD PTR [eax],edx
c000daea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daee:	83 ec 0c             	sub    esp,0xc
c000daf1:	50                   	push   eax
c000daf2:	e8 15 06 00 00       	call   c000e10c <Device::~Device()>
c000daf7:	83 c4 10             	add    esp,0x10
c000dafa:	90                   	nop
c000dafb:	83 c4 0c             	add    esp,0xc
c000dafe:	c3                   	ret    
c000daff:	90                   	nop

c000db00 <Bus::~Bus()>:
c000db00:	83 ec 0c             	sub    esp,0xc
c000db03:	83 ec 0c             	sub    esp,0xc
c000db06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db0a:	e8 cd ff ff ff       	call   c000dadc <Bus::~Bus()>
c000db0f:	83 c4 10             	add    esp,0x10
c000db12:	83 ec 08             	sub    esp,0x8
c000db15:	68 58 01 00 00       	push   0x158
c000db1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db1e:	e8 fb f0 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000db23:	83 c4 10             	add    esp,0x10
c000db26:	83 c4 0c             	add    esp,0xc
c000db29:	c3                   	ret    
c000db2a:	66 90                	xchg   ax,ax

c000db2c <Buzzer::Buzzer(char const*)>:
c000db2c:	83 ec 0c             	sub    esp,0xc
c000db2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db33:	83 ec 08             	sub    esp,0x8
c000db36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3a:	50                   	push   eax
c000db3b:	e8 02 09 00 00       	call   c000e442 <Device::Device(char const*)>
c000db40:	83 c4 10             	add    esp,0x10
c000db43:	ba 74 4b 02 c0       	mov    edx,0xc0024b74
c000db48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db4c:	89 10                	mov    DWORD PTR [eax],edx
c000db4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db52:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db60:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000db6a:	90                   	nop
c000db6b:	83 c4 0c             	add    esp,0xc
c000db6e:	c3                   	ret    
c000db6f:	90                   	nop

c000db70 <Buzzer::~Buzzer()>:
c000db70:	83 ec 0c             	sub    esp,0xc
c000db73:	ba 74 4b 02 c0       	mov    edx,0xc0024b74
c000db78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7c:	89 10                	mov    DWORD PTR [eax],edx
c000db7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db82:	83 ec 0c             	sub    esp,0xc
c000db85:	50                   	push   eax
c000db86:	e8 81 05 00 00       	call   c000e10c <Device::~Device()>
c000db8b:	83 c4 10             	add    esp,0x10
c000db8e:	90                   	nop
c000db8f:	83 c4 0c             	add    esp,0xc
c000db92:	c3                   	ret    
c000db93:	90                   	nop

c000db94 <Buzzer::~Buzzer()>:
c000db94:	83 ec 0c             	sub    esp,0xc
c000db97:	83 ec 0c             	sub    esp,0xc
c000db9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db9e:	e8 cd ff ff ff       	call   c000db70 <Buzzer::~Buzzer()>
c000dba3:	83 c4 10             	add    esp,0x10
c000dba6:	83 ec 08             	sub    esp,0x8
c000dba9:	68 5c 01 00 00       	push   0x15c
c000dbae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb2:	e8 67 f0 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000dbb7:	83 c4 10             	add    esp,0x10
c000dbba:	83 c4 0c             	add    esp,0xc
c000dbbd:	c3                   	ret    

c000dbbe <Buzzer::stop()>:
c000dbbe:	83 ec 14             	sub    esp,0x14
c000dbc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dbc5:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbc7:	6a 00                	push   0x0
c000dbc9:	50                   	push   eax
c000dbca:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dbcd:	83 c4 1c             	add    esp,0x1c
c000dbd0:	c3                   	ret    

c000dbd1 <beepThread(void*)>:
c000dbd1:	53                   	push   ebx
c000dbd2:	83 ec 08             	sub    esp,0x8
c000dbd5:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000dbda:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dbde:	48                   	dec    eax
c000dbdf:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000dbe4:	75 02                	jne    c000dbe8 <beepThread(void*)+0x17>
c000dbe6:	fb                   	sti    
c000dbe7:	90                   	nop
c000dbe8:	83 ec 0c             	sub    esp,0xc
c000dbeb:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000dbf2:	50                   	push   eax
c000dbf3:	e8 2c ae 00 00       	call   c0018a24 <milliTenthSleep(unsigned int)>
c000dbf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dbfb:	e8 be ff ff ff       	call   c000dbbe <Buzzer::stop()>
c000dc00:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000dc08:	83 c4 18             	add    esp,0x18
c000dc0b:	5b                   	pop    ebx
c000dc0c:	e9 13 ad 00 00       	jmp    c0018924 <blockTask(TaskState)>
c000dc11:	90                   	nop

c000dc12 <Buzzer::beep(int, int, bool)>:
c000dc12:	57                   	push   edi
c000dc13:	56                   	push   esi
c000dc14:	53                   	push   ebx
c000dc15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc19:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000dc1d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dc21:	50                   	push   eax
c000dc22:	50                   	push   eax
c000dc23:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc29:	53                   	push   ebx
c000dc2a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc2d:	83 c4 10             	add    esp,0x10
c000dc30:	89 f8                	mov    eax,edi
c000dc32:	84 c0                	test   al,al
c000dc34:	74 1e                	je     c000dc54 <Buzzer::beep(int, int, bool)+0x42>
c000dc36:	83 ec 0c             	sub    esp,0xc
c000dc39:	6b f6 0a             	imul   esi,esi,0xa
c000dc3c:	56                   	push   esi
c000dc3d:	e8 e2 ad 00 00       	call   c0018a24 <milliTenthSleep(unsigned int)>
c000dc42:	83 c4 10             	add    esp,0x10
c000dc45:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dc49:	5b                   	pop    ebx
c000dc4a:	5e                   	pop    esi
c000dc4b:	5f                   	pop    edi
c000dc4c:	e9 6d ff ff ff       	jmp    c000dbbe <Buzzer::stop()>
c000dc51:	8d 76 00             	lea    esi,[esi+0x0]
c000dc54:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dc5a:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000dc5f:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dc67:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc6b:	c7 44 24 14 d1 db 00 c0 	mov    DWORD PTR [esp+0x14],0xc000dbd1
c000dc73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc77:	5b                   	pop    ebx
c000dc78:	5e                   	pop    esi
c000dc79:	5f                   	pop    edi
c000dc7a:	e9 91 a8 00 00       	jmp    c0018510 <Process::createThread(void (*)(void*), void*, int)>
c000dc7f:	90                   	nop

c000dc80 <User::loadClockSettings(int)>:
c000dc80:	53                   	push   ebx
c000dc81:	83 ec 14             	sub    esp,0x14
c000dc84:	68 14 01 00 00       	push   0x114
c000dc89:	e8 81 bd ff ff       	call   c0009a0f <malloc>
c000dc8e:	83 c4 0c             	add    esp,0xc
c000dc91:	89 c3                	mov    ebx,eax
c000dc93:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c000dc99:	68 9c 4b 02 c0       	push   0xc0024b9c
c000dc9e:	50                   	push   eax
c000dc9f:	e8 c6 f5 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c000dca4:	58                   	pop    eax
c000dca5:	5a                   	pop    edx
c000dca6:	6a 01                	push   0x1
c000dca8:	53                   	push   ebx
c000dca9:	e8 7e f6 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c000dcae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dcb1:	e8 d4 f6 ff ff       	call   c000d38a <File::close()>
c000dcb6:	83 c4 10             	add    esp,0x10
c000dcb9:	85 db                	test   ebx,ebx
c000dcbb:	74 0f                	je     c000dccc <User::loadClockSettings(int)+0x4c>
c000dcbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcbf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dcc3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dcc6:	83 c4 08             	add    esp,0x8
c000dcc9:	5b                   	pop    ebx
c000dcca:	ff e0                	jmp    eax
c000dccc:	83 c4 08             	add    esp,0x8
c000dccf:	5b                   	pop    ebx
c000dcd0:	c3                   	ret    
c000dcd1:	90                   	nop

c000dcd2 <Clock::Clock(char const*)>:
c000dcd2:	83 ec 0c             	sub    esp,0xc
c000dcd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcd9:	83 ec 08             	sub    esp,0x8
c000dcdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dce0:	50                   	push   eax
c000dce1:	e8 5c 07 00 00       	call   c000e442 <Device::Device(char const*)>
c000dce6:	83 c4 10             	add    esp,0x10
c000dce9:	ba c4 4b 02 c0       	mov    edx,0xc0024bc4
c000dcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf2:	89 10                	mov    DWORD PTR [eax],edx
c000dcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dcf8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dd02:	90                   	nop
c000dd03:	83 c4 0c             	add    esp,0xc
c000dd06:	c3                   	ret    
c000dd07:	90                   	nop

c000dd08 <Clock::~Clock()>:
c000dd08:	83 ec 0c             	sub    esp,0xc
c000dd0b:	ba c4 4b 02 c0       	mov    edx,0xc0024bc4
c000dd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd14:	89 10                	mov    DWORD PTR [eax],edx
c000dd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd1a:	83 ec 0c             	sub    esp,0xc
c000dd1d:	50                   	push   eax
c000dd1e:	e8 e9 03 00 00       	call   c000e10c <Device::~Device()>
c000dd23:	83 c4 10             	add    esp,0x10
c000dd26:	90                   	nop
c000dd27:	83 c4 0c             	add    esp,0xc
c000dd2a:	c3                   	ret    
c000dd2b:	90                   	nop

c000dd2c <Clock::~Clock()>:
c000dd2c:	83 ec 0c             	sub    esp,0xc
c000dd2f:	83 ec 0c             	sub    esp,0xc
c000dd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd36:	e8 cd ff ff ff       	call   c000dd08 <Clock::~Clock()>
c000dd3b:	83 c4 10             	add    esp,0x10
c000dd3e:	83 ec 08             	sub    esp,0x8
c000dd41:	68 58 01 00 00       	push   0x158
c000dd46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd4a:	e8 cf ee ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000dd4f:	83 c4 10             	add    esp,0x10
c000dd52:	83 c4 0c             	add    esp,0xc
c000dd55:	c3                   	ret    

c000dd56 <Clock::timeInSecondsLocal()>:
c000dd56:	53                   	push   ebx
c000dd57:	83 ec 14             	sub    esp,0x14
c000dd5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd5e:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd60:	50                   	push   eax
c000dd61:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dd64:	0f b6 0d 1c 82 02 c0 	movzx  ecx,BYTE PTR ds:0xc002821c
c000dd6b:	03 0d 20 82 02 c0    	add    ecx,DWORD PTR ds:0xc0028220
c000dd71:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dd77:	89 cb                	mov    ebx,ecx
c000dd79:	c1 fb 1f             	sar    ebx,0x1f
c000dd7c:	01 c8                	add    eax,ecx
c000dd7e:	11 da                	adc    edx,ebx
c000dd80:	83 c4 10             	add    esp,0x10
c000dd83:	31 c9                	xor    ecx,ecx
c000dd85:	80 3d 1d 82 02 c0 00 	cmp    BYTE PTR ds:0xc002821d,0x0
c000dd8c:	74 05                	je     c000dd93 <Clock::timeInSecondsLocal()+0x3d>
c000dd8e:	b9 08 07 00 00       	mov    ecx,0x708
c000dd93:	31 db                	xor    ebx,ebx
c000dd95:	01 c8                	add    eax,ecx
c000dd97:	11 da                	adc    edx,ebx
c000dd99:	83 c4 08             	add    esp,0x8
c000dd9c:	5b                   	pop    ebx
c000dd9d:	c3                   	ret    

c000dd9e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dd9e:	57                   	push   edi
c000dd9f:	56                   	push   esi
c000dda0:	53                   	push   ebx
c000dda1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dda5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dda9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ddaf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000ddb2:	0f b6 05 1c 82 02 c0 	movzx  eax,BYTE PTR ds:0xc002821c
c000ddb9:	03 05 20 82 02 c0    	add    eax,DWORD PTR ds:0xc0028220
c000ddbf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ddc5:	99                   	cdq    
c000ddc6:	29 c6                	sub    esi,eax
c000ddc8:	19 d7                	sbb    edi,edx
c000ddca:	89 f0                	mov    eax,esi
c000ddcc:	89 fa                	mov    edx,edi
c000ddce:	31 f6                	xor    esi,esi
c000ddd0:	80 3d 1d 82 02 c0 00 	cmp    BYTE PTR ds:0xc002821d,0x0
c000ddd7:	74 05                	je     c000ddde <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000ddd9:	be 08 07 00 00       	mov    esi,0x708
c000ddde:	31 ff                	xor    edi,edi
c000dde0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000dde4:	29 f0                	sub    eax,esi
c000dde6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ddea:	19 fa                	sbb    edx,edi
c000ddec:	89 d8                	mov    eax,ebx
c000ddee:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ddf2:	5b                   	pop    ebx
c000ddf3:	5e                   	pop    esi
c000ddf4:	5f                   	pop    edi
c000ddf5:	ff e0                	jmp    eax

c000ddf7 <datetimeToSeconds(datetime_t)>:
c000ddf7:	55                   	push   ebp
c000ddf8:	57                   	push   edi
c000ddf9:	56                   	push   esi
c000ddfa:	53                   	push   ebx
c000ddfb:	83 ec 14             	sub    esp,0x14
c000ddfe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000de02:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000de06:	89 d3                	mov    ebx,edx
c000de08:	0f b6 c6             	movzx  eax,dh
c000de0b:	c1 eb 10             	shr    ebx,0x10
c000de0e:	48                   	dec    eax
c000de0f:	66 81 eb 6c 07       	sub    bx,0x76c
c000de14:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000de18:	0f b6 f5             	movzx  esi,ch
c000de1b:	89 cf                	mov    edi,ecx
c000de1d:	6b f6 3c             	imul   esi,esi,0x3c
c000de20:	c1 ef 10             	shr    edi,0x10
c000de23:	0f b6 c9             	movzx  ecx,cl
c000de26:	89 f8                	mov    eax,edi
c000de28:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000de2e:	0f b6 f8             	movzx  edi,al
c000de31:	0f b6 d2             	movzx  edx,dl
c000de34:	01 fe                	add    esi,edi
c000de36:	01 f1                	add    ecx,esi
c000de38:	0f b7 f3             	movzx  esi,bx
c000de3b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000de3f:	c1 f9 1f             	sar    ecx,0x1f
c000de42:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000de47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000de4b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000de50:	8b 0c 8d 00 4c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb400]
c000de57:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000de5b:	76 29                	jbe    c000de86 <datetimeToSeconds(datetime_t)+0x8f>
c000de5d:	f6 c3 03             	test   bl,0x3
c000de60:	75 24                	jne    c000de86 <datetimeToSeconds(datetime_t)+0x8f>
c000de62:	31 d2                	xor    edx,edx
c000de64:	bf 64 00 00 00       	mov    edi,0x64
c000de69:	89 d8                	mov    eax,ebx
c000de6b:	66 f7 f7             	div    di
c000de6e:	66 85 d2             	test   dx,dx
c000de71:	75 12                	jne    c000de85 <datetimeToSeconds(datetime_t)+0x8e>
c000de73:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000de79:	bf 90 01 00 00       	mov    edi,0x190
c000de7e:	99                   	cdq    
c000de7f:	f7 ff                	idiv   edi
c000de81:	85 d2                	test   edx,edx
c000de83:	75 01                	jne    c000de86 <datetimeToSeconds(datetime_t)+0x8f>
c000de85:	41                   	inc    ecx
c000de86:	66 83 fb 46          	cmp    bx,0x46
c000de8a:	76 45                	jbe    c000ded1 <datetimeToSeconds(datetime_t)+0xda>
c000de8c:	bb 46 00 00 00       	mov    ebx,0x46
c000de91:	bf 64 00 00 00       	mov    edi,0x64
c000de96:	bd 90 01 00 00       	mov    ebp,0x190
c000de9b:	b8 6d 01 00 00       	mov    eax,0x16d
c000dea0:	f6 c3 03             	test   bl,0x3
c000dea3:	75 23                	jne    c000dec8 <datetimeToSeconds(datetime_t)+0xd1>
c000dea5:	89 d8                	mov    eax,ebx
c000dea7:	99                   	cdq    
c000dea8:	f7 ff                	idiv   edi
c000deaa:	b8 6e 01 00 00       	mov    eax,0x16e
c000deaf:	85 d2                	test   edx,edx
c000deb1:	75 15                	jne    c000dec8 <datetimeToSeconds(datetime_t)+0xd1>
c000deb3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000deb9:	99                   	cdq    
c000deba:	f7 fd                	idiv   ebp
c000debc:	83 fa 01             	cmp    edx,0x1
c000debf:	19 c0                	sbb    eax,eax
c000dec1:	f7 d0                	not    eax
c000dec3:	05 6e 01 00 00       	add    eax,0x16e
c000dec8:	01 c1                	add    ecx,eax
c000deca:	43                   	inc    ebx
c000decb:	39 f3                	cmp    ebx,esi
c000decd:	7c cc                	jl     c000de9b <datetimeToSeconds(datetime_t)+0xa4>
c000decf:	eb 35                	jmp    c000df06 <datetimeToSeconds(datetime_t)+0x10f>
c000ded1:	74 33                	je     c000df06 <datetimeToSeconds(datetime_t)+0x10f>
c000ded3:	b8 45 00 00 00       	mov    eax,0x45
c000ded8:	89 c2                	mov    edx,eax
c000deda:	83 e2 03             	and    edx,0x3
c000dedd:	39 f0                	cmp    eax,esi
c000dedf:	7e 0f                	jle    c000def0 <datetimeToSeconds(datetime_t)+0xf9>
c000dee1:	83 fa 01             	cmp    edx,0x1
c000dee4:	19 d2                	sbb    edx,edx
c000dee6:	48                   	dec    eax
c000dee7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000deee:	eb e8                	jmp    c000ded8 <datetimeToSeconds(datetime_t)+0xe1>
c000def0:	b8 6d 01 00 00       	mov    eax,0x16d
c000def5:	85 d2                	test   edx,edx
c000def7:	75 0b                	jne    c000df04 <datetimeToSeconds(datetime_t)+0x10d>
c000def9:	66 83 fb 01          	cmp    bx,0x1
c000defd:	19 c0                	sbb    eax,eax
c000deff:	05 6e 01 00 00       	add    eax,0x16e
c000df04:	29 c1                	sub    ecx,eax
c000df06:	b8 80 51 01 00       	mov    eax,0x15180
c000df0b:	f7 e9                	imul   ecx
c000df0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000df11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000df15:	83 c4 14             	add    esp,0x14
c000df18:	5b                   	pop    ebx
c000df19:	5e                   	pop    esi
c000df1a:	5f                   	pop    edi
c000df1b:	5d                   	pop    ebp
c000df1c:	c3                   	ret    
c000df1d:	90                   	nop

c000df1e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000df1e:	57                   	push   edi
c000df1f:	56                   	push   esi
c000df20:	53                   	push   ebx
c000df21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df25:	8b 06                	mov    eax,DWORD PTR [esi]
c000df27:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000df2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df32:	e8 c0 fe ff ff       	call   c000ddf7 <datetimeToSeconds(datetime_t)>
c000df37:	59                   	pop    ecx
c000df38:	0f b6 0d 1c 82 02 c0 	movzx  ecx,BYTE PTR ds:0xc002821c
c000df3f:	5b                   	pop    ebx
c000df40:	03 0d 20 82 02 c0    	add    ecx,DWORD PTR ds:0xc0028220
c000df46:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000df4c:	89 cb                	mov    ebx,ecx
c000df4e:	c1 fb 1f             	sar    ebx,0x1f
c000df51:	29 c8                	sub    eax,ecx
c000df53:	19 da                	sbb    edx,ebx
c000df55:	31 c9                	xor    ecx,ecx
c000df57:	80 3d 1d 82 02 c0 00 	cmp    BYTE PTR ds:0xc002821d,0x0
c000df5e:	74 05                	je     c000df65 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000df60:	b9 08 07 00 00       	mov    ecx,0x708
c000df65:	31 db                	xor    ebx,ebx
c000df67:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000df6b:	29 c8                	sub    eax,ecx
c000df6d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df71:	19 da                	sbb    edx,ebx
c000df73:	89 f8                	mov    eax,edi
c000df75:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df79:	5b                   	pop    ebx
c000df7a:	5e                   	pop    esi
c000df7b:	5f                   	pop    edi
c000df7c:	ff e0                	jmp    eax

c000df7e <secondsToDatetime(unsigned long long)>:
c000df7e:	55                   	push   ebp
c000df7f:	57                   	push   edi
c000df80:	56                   	push   esi
c000df81:	53                   	push   ebx
c000df82:	83 ec 1c             	sub    esp,0x1c
c000df85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000df89:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000df8d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000df91:	6a 00                	push   0x0
c000df93:	68 80 51 01 00       	push   0x15180
c000df98:	55                   	push   ebp
c000df99:	57                   	push   edi
c000df9a:	e8 55 48 01 00       	call   c00227f4 <__udivdi3>
c000df9f:	83 c4 10             	add    esp,0x10
c000dfa2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dfa8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfac:	6a 00                	push   0x0
c000dfae:	68 80 51 01 00       	push   0x15180
c000dfb3:	55                   	push   ebp
c000dfb4:	57                   	push   edi
c000dfb5:	bf 10 0e 00 00       	mov    edi,0xe10
c000dfba:	e8 35 49 01 00       	call   c00228f4 <__umoddi3>
c000dfbf:	83 c4 10             	add    esp,0x10
c000dfc2:	99                   	cdq    
c000dfc3:	f7 ff                	idiv   edi
c000dfc5:	bf 3c 00 00 00       	mov    edi,0x3c
c000dfca:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dfcd:	89 d0                	mov    eax,edx
c000dfcf:	99                   	cdq    
c000dfd0:	f7 ff                	idiv   edi
c000dfd2:	85 db                	test   ebx,ebx
c000dfd4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dfd7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dfda:	79 11                	jns    c000dfed <secondsToDatetime(unsigned long long)+0x6f>
c000dfdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dfe0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dfe6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dfeb:	eb 07                	jmp    c000dff4 <secondsToDatetime(unsigned long long)+0x76>
c000dfed:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dff2:	89 d8                	mov    eax,ebx
c000dff4:	bf b4 05 00 00       	mov    edi,0x5b4
c000dff9:	99                   	cdq    
c000dffa:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dfff:	f7 f9                	idiv   ecx
c000e001:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e006:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e00a:	31 d2                	xor    edx,edx
c000e00c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e014:	01 c3                	add    ebx,eax
c000e016:	89 d8                	mov    eax,ebx
c000e018:	f7 f1                	div    ecx
c000e01a:	31 d2                	xor    edx,edx
c000e01c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e01f:	89 d8                	mov    eax,ebx
c000e021:	f7 f7                	div    edi
c000e023:	31 d2                	xor    edx,edx
c000e025:	29 c1                	sub    ecx,eax
c000e027:	89 d8                	mov    eax,ebx
c000e029:	f7 f5                	div    ebp
c000e02b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e030:	29 c1                	sub    ecx,eax
c000e032:	31 d2                	xor    edx,edx
c000e034:	89 c8                	mov    eax,ecx
c000e036:	f7 f5                	div    ebp
c000e038:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e03d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e041:	31 d2                	xor    edx,edx
c000e043:	89 c8                	mov    eax,ecx
c000e045:	f7 f5                	div    ebp
c000e047:	31 d2                	xor    edx,edx
c000e049:	01 c3                	add    ebx,eax
c000e04b:	89 c8                	mov    eax,ecx
c000e04d:	f7 f7                	div    edi
c000e04f:	bf 99 00 00 00       	mov    edi,0x99
c000e054:	29 c3                	sub    ebx,eax
c000e056:	31 d2                	xor    edx,edx
c000e058:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e060:	29 c3                	sub    ebx,eax
c000e062:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e065:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e068:	bb 05 00 00 00       	mov    ebx,0x5
c000e06d:	83 c1 02             	add    ecx,0x2
c000e070:	89 c8                	mov    eax,ecx
c000e072:	f7 f7                	div    edi
c000e074:	31 d2                	xor    edx,edx
c000e076:	89 c7                	mov    edi,eax
c000e078:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e07e:	83 c0 02             	add    eax,0x2
c000e081:	f7 f3                	div    ebx
c000e083:	89 eb                	mov    ebx,ebp
c000e085:	29 c3                	sub    ebx,eax
c000e087:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e08d:	88 1e                	mov    BYTE PTR [esi],bl
c000e08f:	19 c0                	sbb    eax,eax
c000e091:	31 d2                	xor    edx,edx
c000e093:	83 e0 0c             	and    eax,0xc
c000e096:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e09a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e0a2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e0a6:	83 f9 01             	cmp    ecx,0x1
c000e0a9:	0f 96 c2             	setbe  dl
c000e0ac:	41                   	inc    ecx
c000e0ad:	01 d0                	add    eax,edx
c000e0af:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e0b2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e0b6:	83 c4 1c             	add    esp,0x1c
c000e0b9:	89 f0                	mov    eax,esi
c000e0bb:	5b                   	pop    ebx
c000e0bc:	5e                   	pop    esi
c000e0bd:	5f                   	pop    edi
c000e0be:	5d                   	pop    ebp
c000e0bf:	c2 04 00             	ret    0x4

c000e0c2 <Clock::timeInDatetimeLocal()>:
c000e0c2:	53                   	push   ebx
c000e0c3:	83 ec 14             	sub    esp,0x14
c000e0c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e0ca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e0ce:	e8 83 fc ff ff       	call   c000dd56 <Clock::timeInSecondsLocal()>
c000e0d3:	83 c4 0c             	add    esp,0xc
c000e0d6:	52                   	push   edx
c000e0d7:	50                   	push   eax
c000e0d8:	53                   	push   ebx
c000e0d9:	e8 a0 fe ff ff       	call   c000df7e <secondsToDatetime(unsigned long long)>
c000e0de:	89 d8                	mov    eax,ebx
c000e0e0:	83 c4 14             	add    esp,0x14
c000e0e3:	5b                   	pop    ebx
c000e0e4:	c2 04 00             	ret    0x4
c000e0e7:	90                   	nop

c000e0e8 <Device::hibernate()>:
c000e0e8:	c3                   	ret    
c000e0e9:	90                   	nop

c000e0ea <Device::wake()>:
c000e0ea:	c3                   	ret    
c000e0eb:	90                   	nop

c000e0ec <Device::detect()>:
c000e0ec:	c3                   	ret    
c000e0ed:	90                   	nop

c000e0ee <Device::disableLegacy()>:
c000e0ee:	c3                   	ret    
c000e0ef:	90                   	nop

c000e0f0 <Device::powerSaving(PowerSavingLevel)>:
c000e0f0:	c3                   	ret    
c000e0f1:	90                   	nop

c000e0f2 <DriverlessDevice::close(int, int, void*)>:
c000e0f2:	31 c0                	xor    eax,eax
c000e0f4:	c3                   	ret    
c000e0f5:	90                   	nop

c000e0f6 <DriverlessDevice::detect()>:
c000e0f6:	c3                   	ret    
c000e0f7:	90                   	nop

c000e0f8 <DriverlessDevice::open(int, int, void*)>:
c000e0f8:	83 ec 18             	sub    esp,0x18
c000e0fb:	68 30 4c 02 c0       	push   0xc0024c30
c000e100:	e8 c2 68 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000e105:	83 c8 ff             	or     eax,0xffffffff
c000e108:	83 c4 1c             	add    esp,0x1c
c000e10b:	c3                   	ret    

c000e10c <Device::~Device()>:
c000e10c:	ba 90 4c 02 c0       	mov    edx,0xc0024c90
c000e111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e115:	89 10                	mov    DWORD PTR [eax],edx
c000e117:	90                   	nop
c000e118:	c3                   	ret    
c000e119:	90                   	nop

c000e11a <Device::~Device()>:
c000e11a:	83 ec 0c             	sub    esp,0xc
c000e11d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e121:	e8 e6 ff ff ff       	call   c000e10c <Device::~Device()>
c000e126:	83 c4 04             	add    esp,0x4
c000e129:	83 ec 08             	sub    esp,0x8
c000e12c:	68 58 01 00 00       	push   0x158
c000e131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e135:	e8 e4 ea ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e13a:	83 c4 10             	add    esp,0x10
c000e13d:	83 c4 0c             	add    esp,0xc
c000e140:	c3                   	ret    
c000e141:	90                   	nop

c000e142 <Device::findAndLoadDriver()>:
c000e142:	c7 44 24 04 4e 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c4e
c000e14a:	e9 b0 eb ff ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>
c000e14f:	90                   	nop

c000e150 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e150:	57                   	push   edi
c000e151:	b9 09 00 00 00       	mov    ecx,0x9
c000e156:	56                   	push   esi
c000e157:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e15b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e15f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e169:	81 c7 18 01 00 00    	add    edi,0x118
c000e16f:	fc                   	cld    
c000e170:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e172:	5e                   	pop    esi
c000e173:	5f                   	pop    edi
c000e174:	c3                   	ret    
c000e175:	90                   	nop

c000e176 <Device::preOpenACPI(void*, char*, char*)>:
c000e176:	57                   	push   edi
c000e177:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e17c:	56                   	push   esi
c000e17d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e181:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e185:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e18f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e195:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e19b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e19f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1a1:	b9 0e 00 00 00       	mov    ecx,0xe
c000e1a6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e1ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e1b0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1b2:	5e                   	pop    esi
c000e1b3:	5f                   	pop    edi
c000e1b4:	c3                   	ret    
c000e1b5:	90                   	nop

c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e1b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1ba:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e1bf:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e1c6:	75 0b                	jne    c000e1d3 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e1c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1ca:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e1ce:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e1d1:	eb 1e                	jmp    c000e1f1 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e1d3:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000e1d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e1de:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e1e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e1e6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e1ea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e1ee:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e1f1:	ff e0                	jmp    eax
c000e1f3:	90                   	nop

c000e1f4 <Device::getParent()>:
c000e1f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1f8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e1fe:	c3                   	ret    
c000e1ff:	90                   	nop

c000e200 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e204:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e209:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e210:	75 0b                	jne    c000e21d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e212:	8b 00                	mov    eax,DWORD PTR [eax]
c000e214:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e218:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e21b:	eb 1e                	jmp    c000e23b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e21d:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000e222:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e228:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e22e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e230:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e234:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e238:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e23b:	ff e0                	jmp    eax
c000e23d:	90                   	nop

c000e23e <Device::addChild(Device*)>:
c000e23e:	53                   	push   ebx
c000e23f:	83 ec 08             	sub    esp,0x8
c000e242:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e246:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e24a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e250:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e256:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e258:	85 d2                	test   edx,edx
c000e25a:	74 04                	je     c000e260 <Device::addChild(Device*)+0x22>
c000e25c:	89 d3                	mov    ebx,edx
c000e25e:	eb f6                	jmp    c000e256 <Device::addChild(Device*)+0x18>
c000e260:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e263:	83 ec 0c             	sub    esp,0xc
c000e266:	6a 08                	push   0x8
c000e268:	e8 a2 b7 ff ff       	call   c0009a0f <malloc>
c000e26d:	89 03                	mov    DWORD PTR [ebx],eax
c000e26f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e275:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e27c:	83 c4 18             	add    esp,0x18
c000e27f:	5b                   	pop    ebx
c000e280:	c3                   	ret    
c000e281:	90                   	nop

c000e282 <Device::removeAllChildren()>:
c000e282:	56                   	push   esi
c000e283:	53                   	push   ebx
c000e284:	52                   	push   edx
c000e285:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e289:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e28f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e292:	74 17                	je     c000e2ab <Device::removeAllChildren()+0x29>
c000e294:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e297:	85 c0                	test   eax,eax
c000e299:	74 0c                	je     c000e2a7 <Device::removeAllChildren()+0x25>
c000e29b:	83 ec 0c             	sub    esp,0xc
c000e29e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2a0:	50                   	push   eax
c000e2a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e2a4:	83 c4 10             	add    esp,0x10
c000e2a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2a9:	eb e4                	jmp    c000e28f <Device::removeAllChildren()+0xd>
c000e2ab:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e2b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e2b7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e2bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e2c4:	58                   	pop    eax
c000e2c5:	5b                   	pop    ebx
c000e2c6:	5e                   	pop    esi
c000e2c7:	c3                   	ret    

c000e2c8 <Device::hibernateAll()>:
c000e2c8:	53                   	push   ebx
c000e2c9:	83 ec 14             	sub    esp,0x14
c000e2cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e2d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e2d2:	53                   	push   ebx
c000e2d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e2d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e2dc:	83 c4 10             	add    esp,0x10
c000e2df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2e2:	74 0f                	je     c000e2f3 <Device::hibernateAll()+0x2b>
c000e2e4:	83 ec 0c             	sub    esp,0xc
c000e2e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e2ea:	e8 d9 ff ff ff       	call   c000e2c8 <Device::hibernateAll()>
c000e2ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2f1:	eb e9                	jmp    c000e2dc <Device::hibernateAll()+0x14>
c000e2f3:	83 c4 08             	add    esp,0x8
c000e2f6:	5b                   	pop    ebx
c000e2f7:	c3                   	ret    

c000e2f8 <Device::wakeAll()>:
c000e2f8:	53                   	push   ebx
c000e2f9:	83 ec 14             	sub    esp,0x14
c000e2fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e300:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e302:	53                   	push   ebx
c000e303:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e306:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e30c:	83 c4 10             	add    esp,0x10
c000e30f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e312:	74 0f                	je     c000e323 <Device::wakeAll()+0x2b>
c000e314:	83 ec 0c             	sub    esp,0xc
c000e317:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e31a:	e8 d9 ff ff ff       	call   c000e2f8 <Device::wakeAll()>
c000e31f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e321:	eb e9                	jmp    c000e30c <Device::wakeAll()+0x14>
c000e323:	83 c4 08             	add    esp,0x8
c000e326:	5b                   	pop    ebx
c000e327:	c3                   	ret    

c000e328 <Device::detectAll()>:
c000e328:	53                   	push   ebx
c000e329:	83 ec 14             	sub    esp,0x14
c000e32c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e330:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e332:	53                   	push   ebx
c000e333:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e336:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e33c:	83 c4 10             	add    esp,0x10
c000e33f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e342:	74 0f                	je     c000e353 <Device::detectAll()+0x2b>
c000e344:	83 ec 0c             	sub    esp,0xc
c000e347:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e34a:	e8 d9 ff ff ff       	call   c000e328 <Device::detectAll()>
c000e34f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e351:	eb e9                	jmp    c000e33c <Device::detectAll()+0x14>
c000e353:	83 c4 08             	add    esp,0x8
c000e356:	5b                   	pop    ebx
c000e357:	c3                   	ret    

c000e358 <Device::disableLegacyAll()>:
c000e358:	53                   	push   ebx
c000e359:	83 ec 14             	sub    esp,0x14
c000e35c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e360:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e362:	53                   	push   ebx
c000e363:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e366:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e36c:	83 c4 10             	add    esp,0x10
c000e36f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e372:	74 0f                	je     c000e383 <Device::disableLegacyAll()+0x2b>
c000e374:	83 ec 0c             	sub    esp,0xc
c000e377:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e37a:	e8 d9 ff ff ff       	call   c000e358 <Device::disableLegacyAll()>
c000e37f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e381:	eb e9                	jmp    c000e36c <Device::disableLegacyAll()+0x14>
c000e383:	83 c4 08             	add    esp,0x8
c000e386:	5b                   	pop    ebx
c000e387:	c3                   	ret    

c000e388 <Device::loadDriversForAll()>:
c000e388:	53                   	push   ebx
c000e389:	83 ec 08             	sub    esp,0x8
c000e38c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e390:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e397:	75 0c                	jne    c000e3a5 <Device::loadDriversForAll()+0x1d>
c000e399:	83 ec 0c             	sub    esp,0xc
c000e39c:	53                   	push   ebx
c000e39d:	e8 a0 fd ff ff       	call   c000e142 <Device::findAndLoadDriver()>
c000e3a2:	83 c4 10             	add    esp,0x10
c000e3a5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e3ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3ae:	74 12                	je     c000e3c2 <Device::loadDriversForAll()+0x3a>
c000e3b0:	83 ec 0c             	sub    esp,0xc
c000e3b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3b6:	e8 cd ff ff ff       	call   c000e388 <Device::loadDriversForAll()>
c000e3bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e3bd:	83 c4 10             	add    esp,0x10
c000e3c0:	eb e9                	jmp    c000e3ab <Device::loadDriversForAll()+0x23>
c000e3c2:	83 c4 08             	add    esp,0x8
c000e3c5:	5b                   	pop    ebx
c000e3c6:	c3                   	ret    
c000e3c7:	90                   	nop

c000e3c8 <Device::closeAll()>:
c000e3c8:	53                   	push   ebx
c000e3c9:	83 ec 08             	sub    esp,0x8
c000e3cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e3d2:	6a 00                	push   0x0
c000e3d4:	6a 00                	push   0x0
c000e3d6:	6a 00                	push   0x0
c000e3d8:	53                   	push   ebx
c000e3d9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e3dc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e3e2:	83 c4 10             	add    esp,0x10
c000e3e5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3e8:	74 0f                	je     c000e3f9 <Device::closeAll()+0x31>
c000e3ea:	83 ec 0c             	sub    esp,0xc
c000e3ed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3f0:	e8 d3 ff ff ff       	call   c000e3c8 <Device::closeAll()>
c000e3f5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e3f7:	eb e9                	jmp    c000e3e2 <Device::closeAll()+0x1a>
c000e3f9:	83 c4 08             	add    esp,0x8
c000e3fc:	5b                   	pop    ebx
c000e3fd:	c3                   	ret    

c000e3fe <Device::powerSavingAll(PowerSavingLevel)>:
c000e3fe:	56                   	push   esi
c000e3ff:	53                   	push   ebx
c000e400:	83 ec 0c             	sub    esp,0xc
c000e403:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e407:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e40b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e40d:	56                   	push   esi
c000e40e:	53                   	push   ebx
c000e40f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e412:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e418:	83 c4 10             	add    esp,0x10
c000e41b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e41e:	74 0f                	je     c000e42f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e420:	52                   	push   edx
c000e421:	52                   	push   edx
c000e422:	56                   	push   esi
c000e423:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e426:	e8 d3 ff ff ff       	call   c000e3fe <Device::powerSavingAll(PowerSavingLevel)>
c000e42b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e42d:	eb e9                	jmp    c000e418 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e42f:	58                   	pop    eax
c000e430:	5b                   	pop    ebx
c000e431:	5e                   	pop    esi
c000e432:	c3                   	ret    
c000e433:	90                   	nop

c000e434 <Device::setName(char const*)>:
c000e434:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e43c:	e9 ff 22 ff ff       	jmp    c0000740 <strcpy>
c000e441:	90                   	nop

c000e442 <Device::Device(char const*)>:
c000e442:	83 ec 1c             	sub    esp,0x1c
c000e445:	ba 90 4c 02 c0       	mov    edx,0xc0024c90
c000e44a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e44e:	89 10                	mov    DWORD PTR [eax],edx
c000e450:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e454:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e45e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e462:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e46c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e470:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e47a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e488:	83 ec 08             	sub    esp,0x8
c000e48b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e48f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e493:	e8 9c ff ff ff       	call   c000e434 <Device::setName(char const*)>
c000e498:	83 c4 10             	add    esp,0x10
c000e49b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e4a3:	83 ec 0c             	sub    esp,0xc
c000e4a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4aa:	e8 60 b5 ff ff       	call   c0009a0f <malloc>
c000e4af:	83 c4 10             	add    esp,0x10
c000e4b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e4c3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e4c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4cd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e4d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4dd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e4e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4ee:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e4f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4f9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e504:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e50e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e512:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e51c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e520:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e52a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e52e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e538:	90                   	nop
c000e539:	83 c4 1c             	add    esp,0x1c
c000e53c:	c3                   	ret    
c000e53d:	90                   	nop

c000e53e <Device::getName()>:
c000e53e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e542:	05 d0 00 00 00       	add    eax,0xd0
c000e547:	c3                   	ret    

c000e548 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e548:	83 ec 0c             	sub    esp,0xc
c000e54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e54f:	83 ec 08             	sub    esp,0x8
c000e552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e556:	50                   	push   eax
c000e557:	e8 e6 fe ff ff       	call   c000e442 <Device::Device(char const*)>
c000e55c:	83 c4 10             	add    esp,0x10
c000e55f:	ba bc 4c 02 c0       	mov    edx,0xc0024cbc
c000e564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e568:	89 10                	mov    DWORD PTR [eax],edx
c000e56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e578:	90                   	nop
c000e579:	83 c4 0c             	add    esp,0xc
c000e57c:	c3                   	ret    
c000e57d:	90                   	nop

c000e57e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e57e:	57                   	push   edi
c000e57f:	56                   	push   esi
c000e580:	53                   	push   ebx
c000e581:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e585:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e589:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e58d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e593:	75 0c                	jne    c000e5a1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e595:	52                   	push   edx
c000e596:	52                   	push   edx
c000e597:	53                   	push   ebx
c000e598:	56                   	push   esi
c000e599:	e8 08 47 01 00       	call   c0022ca6 <LinkedList<Device>::addElement(Device*)>
c000e59e:	83 c4 10             	add    esp,0x10
c000e5a1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5a7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5aa:	74 12                	je     c000e5be <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e5ac:	50                   	push   eax
c000e5ad:	57                   	push   edi
c000e5ae:	56                   	push   esi
c000e5af:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5b2:	e8 c7 ff ff ff       	call   c000e57e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e5b7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5b9:	83 c4 10             	add    esp,0x10
c000e5bc:	eb e9                	jmp    c000e5a7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e5be:	5b                   	pop    ebx
c000e5bf:	5e                   	pop    esi
c000e5c0:	5f                   	pop    edi
c000e5c1:	c3                   	ret    

c000e5c2 <getDevicesOfType(DeviceType)>:
c000e5c2:	53                   	push   ebx
c000e5c3:	83 ec 14             	sub    esp,0x14
c000e5c6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5ca:	53                   	push   ebx
c000e5cb:	e8 b2 47 01 00       	call   c0022d82 <LinkedList<Device>::LinkedList()>
c000e5d0:	83 c4 0c             	add    esp,0xc
c000e5d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e5d7:	53                   	push   ebx
c000e5d8:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c000e5de:	e8 9b ff ff ff       	call   c000e57e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e5e3:	89 d8                	mov    eax,ebx
c000e5e5:	83 c4 18             	add    esp,0x18
c000e5e8:	5b                   	pop    ebx
c000e5e9:	c2 04 00             	ret    0x4

c000e5ec <HardDiskController::HardDiskController(char const*)>:
c000e5ec:	83 ec 0c             	sub    esp,0xc
c000e5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f3:	83 ec 08             	sub    esp,0x8
c000e5f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5fa:	50                   	push   eax
c000e5fb:	e8 42 fe ff ff       	call   c000e442 <Device::Device(char const*)>
c000e600:	83 c4 10             	add    esp,0x10
c000e603:	ba e8 4c 02 c0       	mov    edx,0xc0024ce8
c000e608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e60c:	89 10                	mov    DWORD PTR [eax],edx
c000e60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e612:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e61c:	90                   	nop
c000e61d:	83 c4 0c             	add    esp,0xc
c000e620:	c3                   	ret    
c000e621:	90                   	nop
c000e622:	66 90                	xchg   ax,ax

c000e624 <HardDiskController::~HardDiskController()>:
c000e624:	83 ec 0c             	sub    esp,0xc
c000e627:	ba e8 4c 02 c0       	mov    edx,0xc0024ce8
c000e62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e630:	89 10                	mov    DWORD PTR [eax],edx
c000e632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e636:	83 ec 0c             	sub    esp,0xc
c000e639:	50                   	push   eax
c000e63a:	e8 cd fa ff ff       	call   c000e10c <Device::~Device()>
c000e63f:	83 c4 10             	add    esp,0x10
c000e642:	90                   	nop
c000e643:	83 c4 0c             	add    esp,0xc
c000e646:	c3                   	ret    
c000e647:	90                   	nop

c000e648 <HardDiskController::~HardDiskController()>:
c000e648:	83 ec 0c             	sub    esp,0xc
c000e64b:	83 ec 0c             	sub    esp,0xc
c000e64e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e652:	e8 cd ff ff ff       	call   c000e624 <HardDiskController::~HardDiskController()>
c000e657:	83 c4 10             	add    esp,0x10
c000e65a:	83 ec 08             	sub    esp,0x8
c000e65d:	68 58 01 00 00       	push   0x158
c000e662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e666:	e8 b3 e5 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e66b:	83 c4 10             	add    esp,0x10
c000e66e:	83 c4 0c             	add    esp,0xc
c000e671:	c3                   	ret    

c000e672 <PhysicalDisk::eject()>:
c000e672:	83 c8 ff             	or     eax,0xffffffff
c000e675:	c3                   	ret    

c000e676 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e676:	83 ec 0c             	sub    esp,0xc
c000e679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67d:	83 ec 08             	sub    esp,0x8
c000e680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e684:	50                   	push   eax
c000e685:	e8 b8 fd ff ff       	call   c000e442 <Device::Device(char const*)>
c000e68a:	83 c4 10             	add    esp,0x10
c000e68d:	ba 14 4d 02 c0       	mov    edx,0xc0024d14
c000e692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e696:	89 10                	mov    DWORD PTR [eax],edx
c000e698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e69c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e6a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6a7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6b2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e6bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e6d8:	90                   	nop
c000e6d9:	83 c4 0c             	add    esp,0xc
c000e6dc:	c3                   	ret    
c000e6dd:	90                   	nop

c000e6de <PhysicalDisk::startCache()>:
c000e6de:	56                   	push   esi
c000e6df:	53                   	push   ebx
c000e6e0:	83 ec 10             	sub    esp,0x10
c000e6e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6e7:	6a 44                	push   0x44
c000e6e9:	e8 21 b3 ff ff       	call   c0009a0f <malloc>
c000e6ee:	89 c6                	mov    esi,eax
c000e6f0:	58                   	pop    eax
c000e6f1:	5a                   	pop    edx
c000e6f2:	53                   	push   ebx
c000e6f3:	56                   	push   esi
c000e6f4:	e8 73 26 00 00       	call   c0010d6c <VCache::VCache(PhysicalDisk*)>
c000e6f9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e6ff:	83 c4 14             	add    esp,0x14
c000e702:	5b                   	pop    ebx
c000e703:	5e                   	pop    esi
c000e704:	c3                   	ret    
c000e705:	90                   	nop

c000e706 <PhysicalDisk::~PhysicalDisk()>:
c000e706:	83 ec 0c             	sub    esp,0xc
c000e709:	ba 14 4d 02 c0       	mov    edx,0xc0024d14
c000e70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e712:	89 10                	mov    DWORD PTR [eax],edx
c000e714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e718:	83 ec 0c             	sub    esp,0xc
c000e71b:	50                   	push   eax
c000e71c:	e8 eb f9 ff ff       	call   c000e10c <Device::~Device()>
c000e721:	83 c4 10             	add    esp,0x10
c000e724:	90                   	nop
c000e725:	83 c4 0c             	add    esp,0xc
c000e728:	c3                   	ret    
c000e729:	90                   	nop

c000e72a <PhysicalDisk::~PhysicalDisk()>:
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	83 ec 0c             	sub    esp,0xc
c000e730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e734:	e8 cd ff ff ff       	call   c000e706 <PhysicalDisk::~PhysicalDisk()>
c000e739:	83 c4 10             	add    esp,0x10
c000e73c:	83 ec 08             	sub    esp,0x8
c000e73f:	68 6c 01 00 00       	push   0x16c
c000e744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e748:	e8 d1 e4 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e74d:	83 c4 10             	add    esp,0x10
c000e750:	83 c4 0c             	add    esp,0xc
c000e753:	c3                   	ret    

c000e754 <FPU::FPU(char const*)>:
c000e754:	83 ec 0c             	sub    esp,0xc
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	83 ec 08             	sub    esp,0x8
c000e75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e762:	50                   	push   eax
c000e763:	e8 da fc ff ff       	call   c000e442 <Device::Device(char const*)>
c000e768:	83 c4 10             	add    esp,0x10
c000e76b:	ba 58 4d 02 c0       	mov    edx,0xc0024d58
c000e770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e774:	89 10                	mov    DWORD PTR [eax],edx
c000e776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e784:	90                   	nop
c000e785:	83 c4 0c             	add    esp,0xc
c000e788:	c3                   	ret    
c000e789:	90                   	nop
c000e78a:	66 90                	xchg   ax,ax

c000e78c <FPU::~FPU()>:
c000e78c:	83 ec 0c             	sub    esp,0xc
c000e78f:	ba 58 4d 02 c0       	mov    edx,0xc0024d58
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	89 10                	mov    DWORD PTR [eax],edx
c000e79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79e:	83 ec 0c             	sub    esp,0xc
c000e7a1:	50                   	push   eax
c000e7a2:	e8 65 f9 ff ff       	call   c000e10c <Device::~Device()>
c000e7a7:	83 c4 10             	add    esp,0x10
c000e7aa:	90                   	nop
c000e7ab:	83 c4 0c             	add    esp,0xc
c000e7ae:	c3                   	ret    
c000e7af:	90                   	nop

c000e7b0 <FPU::~FPU()>:
c000e7b0:	83 ec 0c             	sub    esp,0xc
c000e7b3:	83 ec 0c             	sub    esp,0xc
c000e7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ba:	e8 cd ff ff ff       	call   c000e78c <FPU::~FPU()>
c000e7bf:	83 c4 10             	add    esp,0x10
c000e7c2:	83 ec 08             	sub    esp,0x8
c000e7c5:	68 58 01 00 00       	push   0x158
c000e7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ce:	e8 4b e4 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000e7d3:	83 c4 10             	add    esp,0x10
c000e7d6:	83 c4 0c             	add    esp,0xc
c000e7d9:	c3                   	ret    

c000e7da <setupFPU()>:
c000e7da:	53                   	push   ebx
c000e7db:	83 ec 08             	sub    esp,0x8
c000e7de:	8b 15 e8 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280e8
c000e7e4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e7eb:	74 1b                	je     c000e808 <setupFPU()+0x2e>
c000e7ed:	83 ec 0c             	sub    esp,0xc
c000e7f0:	68 58 01 00 00       	push   0x158
c000e7f5:	e8 15 b2 ff ff       	call   c0009a0f <malloc>
c000e7fa:	89 c3                	mov    ebx,eax
c000e7fc:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7ff:	e8 84 2b 01 00       	call   c0021388 <AVX::AVX()>
c000e804:	eb 62                	jmp    c000e868 <setupFPU()+0x8e>
c000e806:	66 90                	xchg   ax,ax
c000e808:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e80e:	84 c0                	test   al,al
c000e810:	79 1a                	jns    c000e82c <setupFPU()+0x52>
c000e812:	83 ec 0c             	sub    esp,0xc
c000e815:	68 58 01 00 00       	push   0x158
c000e81a:	e8 f0 b1 ff ff       	call   c0009a0f <malloc>
c000e81f:	89 c3                	mov    ebx,eax
c000e821:	89 04 24             	mov    DWORD PTR [esp],eax
c000e824:	e8 8f 2c 01 00       	call   c00214b8 <SSE::SSE()>
c000e829:	eb 3d                	jmp    c000e868 <setupFPU()+0x8e>
c000e82b:	90                   	nop
c000e82c:	a8 20                	test   al,0x20
c000e82e:	74 1c                	je     c000e84c <setupFPU()+0x72>
c000e830:	83 ec 0c             	sub    esp,0xc
c000e833:	68 58 01 00 00       	push   0x158
c000e838:	e8 d2 b1 ff ff       	call   c0009a0f <malloc>
c000e83d:	89 c3                	mov    ebx,eax
c000e83f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e842:	e8 d5 2b 01 00       	call   c002141c <MMX::MMX()>
c000e847:	eb 1f                	jmp    c000e868 <setupFPU()+0x8e>
c000e849:	8d 76 00             	lea    esi,[esi+0x0]
c000e84c:	a8 10                	test   al,0x10
c000e84e:	74 20                	je     c000e870 <setupFPU()+0x96>
c000e850:	83 ec 0c             	sub    esp,0xc
c000e853:	68 58 01 00 00       	push   0x158
c000e858:	e8 b2 b1 ff ff       	call   c0009a0f <malloc>
c000e85d:	89 c3                	mov    ebx,eax
c000e85f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e862:	e8 e5 2c 01 00       	call   c002154c <x87::x87()>
c000e867:	90                   	nop
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	eb 27                	jmp    c000e894 <setupFPU()+0xba>
c000e86d:	8d 76 00             	lea    esi,[esi+0x0]
c000e870:	83 e0 ef             	and    eax,0xffffffef
c000e873:	83 ec 0c             	sub    esp,0xc
c000e876:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e87c:	68 44 4d 02 c0       	push   0xc0024d44
c000e881:	e8 79 e4 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000e886:	0f 20 c0             	mov    eax,cr0
c000e889:	83 c8 04             	or     eax,0x4
c000e88c:	0f 22 c0             	mov    cr0,eax
c000e88f:	31 db                	xor    ebx,ebx
c000e891:	83 c4 10             	add    esp,0x10
c000e894:	89 d8                	mov    eax,ebx
c000e896:	83 c4 08             	add    esp,0x8
c000e899:	5b                   	pop    ebx
c000e89a:	c3                   	ret    
c000e89b:	90                   	nop

c000e89c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e89c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e8a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e8a4:	c1 e0 04             	shl    eax,0x4
c000e8a7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e8ab:	8d 50 10             	lea    edx,[eax+0x10]
c000e8ae:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e8b4:	74 08                	je     c000e8be <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e8b6:	83 c0 04             	add    eax,0x4
c000e8b9:	39 d0                	cmp    eax,edx
c000e8bb:	75 f1                	jne    c000e8ae <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e8bd:	c3                   	ret    
c000e8be:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e8c8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e8d2:	eb e2                	jmp    c000e8b6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e8d4 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e8d4:	57                   	push   edi
c000e8d5:	31 c0                	xor    eax,eax
c000e8d7:	56                   	push   esi
c000e8d8:	53                   	push   ebx
c000e8d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8dd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e8e1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e8e5:	89 da                	mov    edx,ebx
c000e8e7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e8eb:	c1 e2 04             	shl    edx,0x4
c000e8ee:	01 ca                	add    edx,ecx
c000e8f0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e8f8:	74 16                	je     c000e910 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e8fa:	40                   	inc    eax
c000e8fb:	83 f8 04             	cmp    eax,0x4
c000e8fe:	75 f0                	jne    c000e8f0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e900:	c7 44 24 10 88 4d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024d88
c000e908:	5b                   	pop    ebx
c000e909:	5e                   	pop    esi
c000e90a:	5f                   	pop    edi
c000e90b:	e9 b7 60 00 00       	jmp    c00149c7 <Krnl::panic(char const*)>
c000e910:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e913:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e916:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e91c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e922:	5b                   	pop    ebx
c000e923:	5e                   	pop    esi
c000e924:	5f                   	pop    edi
c000e925:	c3                   	ret    

c000e926 <doubleFault(regs*, void*)>:
c000e926:	55                   	push   ebp
c000e927:	89 e5                	mov    ebp,esp
c000e929:	83 ec 08             	sub    esp,0x8
c000e92c:	83 ec 0c             	sub    esp,0xc
c000e92f:	68 95 4d 02 c0       	push   0xc0024d95
c000e934:	e8 8e 60 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000e939:	83 c4 10             	add    esp,0x10
c000e93c:	90                   	nop
c000e93d:	c9                   	leave  
c000e93e:	c3                   	ret    
c000e93f:	90                   	nop

c000e940 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e940:	56                   	push   esi
c000e941:	53                   	push   ebx
c000e942:	50                   	push   eax
c000e943:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e947:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e94b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e950:	75 35                	jne    c000e987 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e952:	8d 43 20             	lea    eax,[ebx+0x20]
c000e955:	31 d2                	xor    edx,edx
c000e957:	89 c1                	mov    ecx,eax
c000e959:	c1 e1 04             	shl    ecx,0x4
c000e95c:	01 f1                	add    ecx,esi
c000e95e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e966:	74 3e                	je     c000e9a6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e968:	42                   	inc    edx
c000e969:	83 fa 04             	cmp    edx,0x4
c000e96c:	75 f0                	jne    c000e95e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e96e:	83 ec 0c             	sub    esp,0xc
c000e971:	68 af 4d 02 c0       	push   0xc0024daf
c000e976:	e8 4c 60 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000e97b:	83 c4 10             	add    esp,0x10
c000e97e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e983:	5a                   	pop    edx
c000e984:	5b                   	pop    ebx
c000e985:	5e                   	pop    esi
c000e986:	c3                   	ret    
c000e987:	83 ec 0c             	sub    esp,0xc
c000e98a:	56                   	push   esi
c000e98b:	e8 ae fb ff ff       	call   c000e53e <Device::getName()>
c000e990:	83 c4 10             	add    esp,0x10
c000e993:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e996:	75 ba                	jne    c000e952 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e998:	83 fb 0f             	cmp    ebx,0xf
c000e99b:	7f 29                	jg     c000e9c6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e99d:	0f b6 9b e0 77 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8820]
c000e9a4:	eb ac                	jmp    c000e952 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e9a6:	8d 04 82             	lea    eax,[edx+eax*4]
c000e9a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9ad:	8d 04 86             	lea    eax,[esi+eax*4]
c000e9b0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e9b6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e9ba:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e9c0:	89 d8                	mov    eax,ebx
c000e9c2:	5a                   	pop    edx
c000e9c3:	5b                   	pop    ebx
c000e9c4:	5e                   	pop    esi
c000e9c5:	c3                   	ret    
c000e9c6:	83 ec 0c             	sub    esp,0xc
c000e9c9:	68 a2 4d 02 c0       	push   0xc0024da2
c000e9ce:	e8 f4 5f 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	e9 77 ff ff ff       	jmp    c000e952 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e9db:	90                   	nop

c000e9dc <InterruptController::clearAllHandlers(int, bool)>:
c000e9dc:	56                   	push   esi
c000e9dd:	53                   	push   ebx
c000e9de:	52                   	push   edx
c000e9df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e9e3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e9e7:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e9ec:	75 61                	jne    c000ea4f <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e9ee:	8d 46 20             	lea    eax,[esi+0x20]
c000e9f1:	c1 e6 04             	shl    esi,0x4
c000e9f4:	c1 e0 04             	shl    eax,0x4
c000e9f7:	01 de                	add    esi,ebx
c000e9f9:	01 d8                	add    eax,ebx
c000e9fb:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000ea05:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000ea0f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000ea19:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ea23:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000ea2d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ea37:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ea41:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ea4b:	58                   	pop    eax
c000ea4c:	5b                   	pop    ebx
c000ea4d:	5e                   	pop    esi
c000ea4e:	c3                   	ret    
c000ea4f:	83 ec 0c             	sub    esp,0xc
c000ea52:	53                   	push   ebx
c000ea53:	e8 e6 fa ff ff       	call   c000e53e <Device::getName()>
c000ea58:	83 c4 10             	add    esp,0x10
c000ea5b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea5e:	75 8e                	jne    c000e9ee <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea60:	83 fe 0f             	cmp    esi,0xf
c000ea63:	7f 09                	jg     c000ea6e <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ea65:	0f b6 b6 e0 77 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8820]
c000ea6c:	eb 80                	jmp    c000e9ee <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea6e:	83 ec 0c             	sub    esp,0xc
c000ea71:	68 bc 4d 02 c0       	push   0xc0024dbc
c000ea76:	e8 4c 5f 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000ea7b:	83 c4 10             	add    esp,0x10
c000ea7e:	e9 6b ff ff ff       	jmp    c000e9ee <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea83:	90                   	nop

c000ea84 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ea84:	56                   	push   esi
c000ea85:	53                   	push   ebx
c000ea86:	52                   	push   edx
c000ea87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ea8f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ea94:	75 3a                	jne    c000ead0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000ea96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea9a:	8d 50 20             	lea    edx,[eax+0x20]
c000ea9d:	c1 e2 04             	shl    edx,0x4
c000eaa0:	8d 04 16             	lea    eax,[esi+edx*1]
c000eaa3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000eaa7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000eaad:	74 0b                	je     c000eaba <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000eaaf:	83 c0 04             	add    eax,0x4
c000eab2:	39 d0                	cmp    eax,edx
c000eab4:	75 f1                	jne    c000eaa7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000eab6:	58                   	pop    eax
c000eab7:	5b                   	pop    ebx
c000eab8:	5e                   	pop    esi
c000eab9:	c3                   	ret    
c000eaba:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000eac4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000eace:	eb df                	jmp    c000eaaf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ead0:	83 ec 0c             	sub    esp,0xc
c000ead3:	56                   	push   esi
c000ead4:	e8 65 fa ff ff       	call   c000e53e <Device::getName()>
c000ead9:	83 c4 10             	add    esp,0x10
c000eadc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eadf:	75 b5                	jne    c000ea96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eae1:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000eae6:	7f 11                	jg     c000eaf9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000eae8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaec:	0f b6 80 e0 77 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8820]
c000eaf3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eaf7:	eb 9d                	jmp    c000ea96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eaf9:	83 ec 0c             	sub    esp,0xc
c000eafc:	68 c9 4d 02 c0       	push   0xc0024dc9
c000eb01:	e8 c1 5e 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000eb06:	83 c4 10             	add    esp,0x10
c000eb09:	eb 8b                	jmp    c000ea96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000eb0b <nmiHandler(regs*, void*)>:
c000eb0b:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000eb10:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eb14:	e9 bf a6 ff ff       	jmp    c00091d8 <Computer::handleNMI()>

c000eb19 <int_handler>:
c000eb19:	55                   	push   ebp
c000eb1a:	57                   	push   edi
c000eb1b:	56                   	push   esi
c000eb1c:	53                   	push   ebx
c000eb1d:	83 ec 0c             	sub    esp,0xc
c000eb20:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000eb24:	80 3d c4 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028bc4,0x0
c000eb2b:	74 0b                	je     c000eb38 <int_handler+0x1f>
c000eb2d:	fa                   	cli    
c000eb2e:	f4                   	hlt    
c000eb2f:	80 3d c4 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028bc4,0x0
c000eb36:	75 f5                	jne    c000eb2d <int_handler+0x14>
c000eb38:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000eb3d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000eb40:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eb46:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000eb4c:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eb4f:	83 f8 17             	cmp    eax,0x17
c000eb52:	77 13                	ja     c000eb67 <int_handler+0x4e>
c000eb54:	83 ec 08             	sub    esp,0x8
c000eb57:	8b 17                	mov    edx,DWORD PTR [edi]
c000eb59:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eb5c:	0f b6 c0             	movzx  eax,al
c000eb5f:	50                   	push   eax
c000eb60:	57                   	push   edi
c000eb61:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eb64:	83 c4 10             	add    esp,0x10
c000eb67:	83 c3 15             	add    ebx,0x15
c000eb6a:	c1 e3 04             	shl    ebx,0x4
c000eb6d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000eb71:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eb78:	31 db                	xor    ebx,ebx
c000eb7a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eb7e:	85 c0                	test   eax,eax
c000eb80:	74 13                	je     c000eb95 <int_handler+0x7c>
c000eb82:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eb85:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000eb89:	74 1c                	je     c000eba7 <int_handler+0x8e>
c000eb8b:	83 ec 08             	sub    esp,0x8
c000eb8e:	52                   	push   edx
c000eb8f:	56                   	push   esi
c000eb90:	ff d0                	call   eax
c000eb92:	83 c4 10             	add    esp,0x10
c000eb95:	43                   	inc    ebx
c000eb96:	83 fb 04             	cmp    ebx,0x4
c000eb99:	75 df                	jne    c000eb7a <int_handler+0x61>
c000eb9b:	83 c4 0c             	add    esp,0xc
c000eb9e:	31 c0                	xor    eax,eax
c000eba0:	5b                   	pop    ebx
c000eba1:	31 d2                	xor    edx,edx
c000eba3:	5e                   	pop    esi
c000eba4:	5f                   	pop    edi
c000eba5:	5d                   	pop    ebp
c000eba6:	c3                   	ret    
c000eba7:	83 ec 08             	sub    esp,0x8
c000ebaa:	52                   	push   edx
c000ebab:	56                   	push   esi
c000ebac:	ff d0                	call   eax
c000ebae:	83 c4 10             	add    esp,0x10
c000ebb1:	83 c4 0c             	add    esp,0xc
c000ebb4:	5b                   	pop    ebx
c000ebb5:	5e                   	pop    esi
c000ebb6:	5f                   	pop    edi
c000ebb7:	5d                   	pop    ebp
c000ebb8:	c3                   	ret    
c000ebb9:	90                   	nop

c000ebba <InterruptController::InterruptController(char const*)>:
c000ebba:	83 ec 1c             	sub    esp,0x1c
c000ebbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebc1:	83 ec 08             	sub    esp,0x8
c000ebc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebc8:	50                   	push   eax
c000ebc9:	e8 74 f8 ff ff       	call   c000e442 <Device::Device(char const*)>
c000ebce:	83 c4 10             	add    esp,0x10
c000ebd1:	ba 80 50 02 c0       	mov    edx,0xc0025080
c000ebd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebda:	89 10                	mov    DWORD PTR [eax],edx
c000ebdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebe0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ebea:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ebf2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ebfa:	7f 5e                	jg     c000ec5a <InterruptController::InterruptController(char const*)+0xa0>
c000ebfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ec04:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ec09:	7f 49                	jg     c000ec54 <InterruptController::InterruptController(char const*)+0x9a>
c000ec0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec0f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec13:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ec1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec1e:	01 ca                	add    edx,ecx
c000ec20:	83 c2 54             	add    edx,0x54
c000ec23:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ec2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ec2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ec33:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ec3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec3e:	01 ca                	add    edx,ecx
c000ec40:	81 c2 54 04 00 00    	add    edx,0x454
c000ec46:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ec4e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ec52:	eb b0                	jmp    c000ec04 <InterruptController::InterruptController(char const*)+0x4a>
c000ec54:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ec58:	eb 98                	jmp    c000ebf2 <InterruptController::InterruptController(char const*)+0x38>
c000ec5a:	90                   	nop
c000ec5b:	83 c4 1c             	add    esp,0x1c
c000ec5e:	c3                   	ret    
c000ec5f:	90                   	nop

c000ec60 <InterruptController::~InterruptController()>:
c000ec60:	83 ec 0c             	sub    esp,0xc
c000ec63:	ba 80 50 02 c0       	mov    edx,0xc0025080
c000ec68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec6c:	89 10                	mov    DWORD PTR [eax],edx
c000ec6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec72:	83 ec 0c             	sub    esp,0xc
c000ec75:	50                   	push   eax
c000ec76:	e8 91 f4 ff ff       	call   c000e10c <Device::~Device()>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	90                   	nop
c000ec7f:	83 c4 0c             	add    esp,0xc
c000ec82:	c3                   	ret    
c000ec83:	90                   	nop

c000ec84 <InterruptController::~InterruptController()>:
c000ec84:	83 ec 0c             	sub    esp,0xc
c000ec87:	83 ec 0c             	sub    esp,0xc
c000ec8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec8e:	e8 cd ff ff ff       	call   c000ec60 <InterruptController::~InterruptController()>
c000ec93:	83 c4 10             	add    esp,0x10
c000ec96:	83 ec 08             	sub    esp,0x8
c000ec99:	68 58 21 00 00       	push   0x2158
c000ec9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eca2:	e8 77 df ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c000eca7:	83 c4 10             	add    esp,0x10
c000ecaa:	83 c4 0c             	add    esp,0xc
c000ecad:	c3                   	ret    

c000ecae <displayDebugInfo(regs*)>:
c000ecae:	55                   	push   ebp
c000ecaf:	57                   	push   edi
c000ecb0:	56                   	push   esi
c000ecb1:	53                   	push   ebx
c000ecb2:	83 ec 24             	sub    esp,0x24
c000ecb5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ecb9:	0f 20 c2             	mov    edx,cr0
c000ecbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ecc0:	0f 20 d7             	mov    edi,cr2
c000ecc3:	0f 20 de             	mov    esi,cr3
c000ecc6:	0f 20 e5             	mov    ebp,cr4
c000ecc9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000eccc:	68 d6 4d 02 c0       	push   0xc0024dd6
c000ecd1:	e8 29 e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecd6:	59                   	pop    ecx
c000ecd7:	58                   	pop    eax
c000ecd8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000ecdb:	68 e1 4d 02 c0       	push   0xc0024de1
c000ece0:	e8 1a e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ece5:	58                   	pop    eax
c000ece6:	5a                   	pop    edx
c000ece7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ecea:	68 ec 4d 02 c0       	push   0xc0024dec
c000ecef:	e8 0b e0 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ecf4:	59                   	pop    ecx
c000ecf5:	58                   	pop    eax
c000ecf6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ecf9:	68 f7 4d 02 c0       	push   0xc0024df7
c000ecfe:	e8 fc df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed03:	58                   	pop    eax
c000ed04:	5a                   	pop    edx
c000ed05:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ed08:	68 02 4e 02 c0       	push   0xc0024e02
c000ed0d:	e8 ed df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed12:	59                   	pop    ecx
c000ed13:	58                   	pop    eax
c000ed14:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ed17:	68 0d 4e 02 c0       	push   0xc0024e0d
c000ed1c:	e8 de df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed21:	58                   	pop    eax
c000ed22:	5a                   	pop    edx
c000ed23:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ed26:	68 18 4e 02 c0       	push   0xc0024e18
c000ed2b:	e8 cf df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed30:	59                   	pop    ecx
c000ed31:	58                   	pop    eax
c000ed32:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ed35:	68 23 4e 02 c0       	push   0xc0024e23
c000ed3a:	e8 c0 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed3f:	58                   	pop    eax
c000ed40:	5a                   	pop    edx
c000ed41:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ed44:	68 2e 4e 02 c0       	push   0xc0024e2e
c000ed49:	e8 b1 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed4e:	59                   	pop    ecx
c000ed4f:	58                   	pop    eax
c000ed50:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed53:	68 3d 4e 02 c0       	push   0xc0024e3d
c000ed58:	e8 a2 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed5d:	58                   	pop    eax
c000ed5e:	5a                   	pop    edx
c000ed5f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ed62:	68 48 4e 02 c0       	push   0xc0024e48
c000ed67:	e8 93 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed6c:	59                   	pop    ecx
c000ed6d:	58                   	pop    eax
c000ed6e:	57                   	push   edi
c000ed6f:	68 53 4e 02 c0       	push   0xc0024e53
c000ed74:	e8 86 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed79:	58                   	pop    eax
c000ed7a:	5a                   	pop    edx
c000ed7b:	56                   	push   esi
c000ed7c:	68 5e 4e 02 c0       	push   0xc0024e5e
c000ed81:	e8 79 df ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000ed86:	59                   	pop    ecx
c000ed87:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ed8c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed92:	e8 72 bd ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ed97:	58                   	pop    eax
c000ed98:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ed9b:	5a                   	pop    edx
c000ed9c:	c1 e0 05             	shl    eax,0x5
c000ed9f:	05 40 75 02 c0       	add    eax,0xc0027540
c000eda4:	50                   	push   eax
c000eda5:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000edaa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edb0:	e8 61 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edb5:	59                   	pop    ecx
c000edb6:	58                   	pop    eax
c000edb7:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000edbc:	68 69 4e 02 c0       	push   0xc0024e69
c000edc1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edc7:	e8 4a c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edcc:	58                   	pop    eax
c000edcd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000edd2:	5a                   	pop    edx
c000edd3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000edd6:	83 c0 0c             	add    eax,0xc
c000edd9:	50                   	push   eax
c000edda:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000eddf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ede5:	e8 2c c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edea:	59                   	pop    ecx
c000edeb:	58                   	pop    eax
c000edec:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000edf1:	68 72 4e 02 c0       	push   0xc0024e72
c000edf6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edfc:	e8 15 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee01:	58                   	pop    eax
c000ee02:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ee07:	5a                   	pop    edx
c000ee08:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ee0b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee11:	e8 ba c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee16:	59                   	pop    ecx
c000ee17:	58                   	pop    eax
c000ee18:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ee1d:	68 7a 4e 02 c0       	push   0xc0024e7a
c000ee22:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee28:	e8 e9 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee2d:	58                   	pop    eax
c000ee2e:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ee33:	5a                   	pop    edx
c000ee34:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ee37:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee3d:	e8 8e c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee42:	59                   	pop    ecx
c000ee43:	58                   	pop    eax
c000ee44:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ee49:	68 82 4e 02 c0       	push   0xc0024e82
c000ee4e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee54:	e8 bd c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee59:	58                   	pop    eax
c000ee5a:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ee5f:	5a                   	pop    edx
c000ee60:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ee63:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee69:	e8 62 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee6e:	59                   	pop    ecx
c000ee6f:	58                   	pop    eax
c000ee70:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ee75:	68 8a 4e 02 c0       	push   0xc0024e8a
c000ee7a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee80:	e8 91 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee85:	58                   	pop    eax
c000ee86:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ee8b:	5a                   	pop    edx
c000ee8c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000ee8f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee95:	e8 36 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee9a:	59                   	pop    ecx
c000ee9b:	58                   	pop    eax
c000ee9c:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000eea1:	68 92 4e 02 c0       	push   0xc0024e92
c000eea6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeac:	e8 65 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eeb1:	58                   	pop    eax
c000eeb2:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000eeb7:	5a                   	pop    edx
c000eeb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eebb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eec1:	e8 0a c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eec6:	59                   	pop    ecx
c000eec7:	58                   	pop    eax
c000eec8:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000eecd:	68 9a 4e 02 c0       	push   0xc0024e9a
c000eed2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eed8:	e8 39 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eedd:	58                   	pop    eax
c000eede:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000eee3:	5a                   	pop    edx
c000eee4:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eee7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeed:	e8 de c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eef2:	59                   	pop    ecx
c000eef3:	58                   	pop    eax
c000eef4:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000eef9:	68 a2 4e 02 c0       	push   0xc0024ea2
c000eefe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef04:	e8 0d c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef09:	58                   	pop    eax
c000ef0a:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ef0f:	5a                   	pop    edx
c000ef10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef14:	52                   	push   edx
c000ef15:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef1b:	e8 b0 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef20:	59                   	pop    ecx
c000ef21:	58                   	pop    eax
c000ef22:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ef27:	68 ab 4e 02 c0       	push   0xc0024eab
c000ef2c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef32:	e8 df c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef37:	58                   	pop    eax
c000ef38:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ef3d:	5a                   	pop    edx
c000ef3e:	57                   	push   edi
c000ef3f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef45:	e8 86 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef4a:	59                   	pop    ecx
c000ef4b:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ef50:	5f                   	pop    edi
c000ef51:	68 b3 4e 02 c0       	push   0xc0024eb3
c000ef56:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef5c:	e8 b5 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef61:	58                   	pop    eax
c000ef62:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ef67:	5a                   	pop    edx
c000ef68:	56                   	push   esi
c000ef69:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef6f:	e8 5c c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef74:	59                   	pop    ecx
c000ef75:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ef7a:	5e                   	pop    esi
c000ef7b:	68 bb 4e 02 c0       	push   0xc0024ebb
c000ef80:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef86:	e8 8b c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef8b:	5f                   	pop    edi
c000ef8c:	58                   	pop    eax
c000ef8d:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000ef92:	55                   	push   ebp
c000ef93:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef99:	e8 32 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef9e:	58                   	pop    eax
c000ef9f:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000efa4:	5a                   	pop    edx
c000efa5:	68 c3 4e 02 c0       	push   0xc0024ec3
c000efaa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efb0:	e8 61 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efb5:	0f 21 c0             	mov    eax,db0
c000efb8:	59                   	pop    ecx
c000efb9:	5e                   	pop    esi
c000efba:	50                   	push   eax
c000efbb:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000efc0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efc6:	e8 05 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000efcb:	5f                   	pop    edi
c000efcc:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000efd1:	5d                   	pop    ebp
c000efd2:	68 cc 4e 02 c0       	push   0xc0024ecc
c000efd7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efdd:	e8 34 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efe2:	0f 21 c8             	mov    eax,db1
c000efe5:	5a                   	pop    edx
c000efe6:	59                   	pop    ecx
c000efe7:	50                   	push   eax
c000efe8:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000efed:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eff3:	e8 d8 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eff8:	5e                   	pop    esi
c000eff9:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000effe:	5f                   	pop    edi
c000efff:	68 d4 4e 02 c0       	push   0xc0024ed4
c000f004:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f00a:	e8 07 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f00f:	0f 21 d0             	mov    eax,db2
c000f012:	5d                   	pop    ebp
c000f013:	5a                   	pop    edx
c000f014:	50                   	push   eax
c000f015:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f01a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f020:	e8 ab bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f025:	59                   	pop    ecx
c000f026:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f02b:	5e                   	pop    esi
c000f02c:	68 dc 4e 02 c0       	push   0xc0024edc
c000f031:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f037:	e8 da bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f03c:	0f 21 d8             	mov    eax,db3
c000f03f:	5f                   	pop    edi
c000f040:	5d                   	pop    ebp
c000f041:	50                   	push   eax
c000f042:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f047:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f04d:	e8 7e bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f052:	58                   	pop    eax
c000f053:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f058:	5a                   	pop    edx
c000f059:	68 e4 4e 02 c0       	push   0xc0024ee4
c000f05e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f064:	e8 ad bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f069:	0f 21 f0             	mov    eax,db6
c000f06c:	59                   	pop    ecx
c000f06d:	5e                   	pop    esi
c000f06e:	50                   	push   eax
c000f06f:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f074:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f07a:	e8 51 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f07f:	5f                   	pop    edi
c000f080:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f085:	5d                   	pop    ebp
c000f086:	68 ec 4e 02 c0       	push   0xc0024eec
c000f08b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f091:	e8 80 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f096:	0f 21 f8             	mov    eax,db7
c000f099:	5a                   	pop    edx
c000f09a:	59                   	pop    ecx
c000f09b:	50                   	push   eax
c000f09c:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f0a1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0a7:	e8 24 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f0ac:	5e                   	pop    esi
c000f0ad:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f0b0:	e8 40 8c 00 00       	call   c0017cf5 <Thr::getDriverNameFromAddress(unsigned long)>
c000f0b5:	83 c4 10             	add    esp,0x10
c000f0b8:	85 c0                	test   eax,eax
c000f0ba:	74 7d                	je     c000f139 <displayDebugInfo(regs*)+0x48b>
c000f0bc:	89 c6                	mov    esi,eax
c000f0be:	50                   	push   eax
c000f0bf:	50                   	push   eax
c000f0c0:	56                   	push   esi
c000f0c1:	68 f4 4e 02 c0       	push   0xc0024ef4
c000f0c6:	e8 34 dc ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f0cb:	5a                   	pop    edx
c000f0cc:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f0d1:	59                   	pop    ecx
c000f0d2:	68 02 4f 02 c0       	push   0xc0024f02
c000f0d7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0dd:	e8 34 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f0e2:	5f                   	pop    edi
c000f0e3:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f0e8:	5d                   	pop    ebp
c000f0e9:	56                   	push   esi
c000f0ea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0f0:	e8 21 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f0f5:	58                   	pop    eax
c000f0f6:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f0fb:	5a                   	pop    edx
c000f0fc:	68 0e 4f 02 c0       	push   0xc0024f0e
c000f101:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f107:	e8 0a bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f10c:	59                   	pop    ecx
c000f10d:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000f112:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f118:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f11b:	e8 0c 8c 00 00       	call   c0017d2c <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f120:	5b                   	pop    ebx
c000f121:	5d                   	pop    ebp
c000f122:	50                   	push   eax
c000f123:	57                   	push   edi
c000f124:	e8 a7 be ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f129:	58                   	pop    eax
c000f12a:	5a                   	pop    edx
c000f12b:	56                   	push   esi
c000f12c:	68 1a 4f 02 c0       	push   0xc0024f1a
c000f131:	e8 c9 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f136:	83 c4 10             	add    esp,0x10
c000f139:	fa                   	cli    
c000f13a:	f4                   	hlt    
c000f13b:	eb fe                	jmp    c000f13b <displayDebugInfo(regs*)+0x48d>

c000f13d <x87EmulHandler(regs*, void*)>:
c000f13d:	83 ec 0c             	sub    esp,0xc
c000f140:	0f 20 c2             	mov    edx,cr0
c000f143:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f148:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f14c:	75 4b                	jne    c000f199 <x87EmulHandler(regs*, void*)+0x5c>
c000f14e:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000f153:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f159:	85 c0                	test   eax,eax
c000f15b:	74 05                	je     c000f162 <x87EmulHandler(regs*, void*)+0x25>
c000f15d:	83 e2 08             	and    edx,0x8
c000f160:	75 17                	jne    c000f179 <x87EmulHandler(regs*, void*)+0x3c>
c000f162:	83 ec 0c             	sub    esp,0xc
c000f165:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f169:	e8 34 b0 00 00       	call   c001a1a2 <Vm::x87Handler(regs*)>
c000f16e:	83 c4 10             	add    esp,0x10
c000f171:	84 c0                	test   al,al
c000f173:	74 24                	je     c000f199 <x87EmulHandler(regs*, void*)+0x5c>
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	c3                   	ret    
c000f179:	83 ec 0c             	sub    esp,0xc
c000f17c:	68 40 4f 02 c0       	push   0xc0024f40
c000f181:	e8 79 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f186:	0f 06                	clts   
c000f188:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f18d:	83 c4 10             	add    esp,0x10
c000f190:	a3 28 82 02 c0       	mov    ds:0xc0028228,eax
c000f195:	83 c4 0c             	add    esp,0xc
c000f198:	c3                   	ret    
c000f199:	83 ec 0c             	sub    esp,0xc
c000f19c:	68 2a 4f 02 c0       	push   0xc0024f2a
c000f1a1:	e8 59 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f1a6:	5a                   	pop    edx
c000f1a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f1ab:	e8 fe fa ff ff       	call   c000ecae <displayDebugInfo(regs*)>

c000f1b0 <gpFault(regs*, void*)>:
c000f1b0:	53                   	push   ebx
c000f1b1:	83 ec 14             	sub    esp,0x14
c000f1b4:	c7 05 24 82 02 c0 5e 96 01 c0 	mov    DWORD PTR ds:0xc0028224,0xc001965e
c000f1be:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f1c2:	53                   	push   ebx
c000f1c3:	e8 96 a4 00 00       	call   c001965e <Vm::faultHandler(regs*)>
c000f1c8:	83 c4 10             	add    esp,0x10
c000f1cb:	84 c0                	test   al,al
c000f1cd:	74 05                	je     c000f1d4 <gpFault(regs*, void*)+0x24>
c000f1cf:	83 c4 08             	add    esp,0x8
c000f1d2:	5b                   	pop    ebx
c000f1d3:	c3                   	ret    
c000f1d4:	83 ec 0c             	sub    esp,0xc
c000f1d7:	68 4d 4f 02 c0       	push   0xc0024f4d
c000f1dc:	e8 1e db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f1e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f1e4:	e8 c5 fa ff ff       	call   c000ecae <displayDebugInfo(regs*)>

c000f1e9 <pgFault(regs*, void*)>:
c000f1e9:	53                   	push   ebx
c000f1ea:	83 ec 10             	sub    esp,0x10
c000f1ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f1f1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f1f4:	68 68 4f 02 c0       	push   0xc0024f68
c000f1f9:	e8 01 db ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f1fe:	0f 20 d0             	mov    eax,cr2
c000f201:	5a                   	pop    edx
c000f202:	59                   	pop    ecx
c000f203:	50                   	push   eax
c000f204:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f209:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f20c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f212:	e8 63 d6 ff ff       	call   c000c87a <VAS::tryLoadBackOffDisk(unsigned long)>
c000f217:	83 c4 10             	add    esp,0x10
c000f21a:	84 c0                	test   al,al
c000f21c:	74 05                	je     c000f223 <pgFault(regs*, void*)+0x3a>
c000f21e:	83 c4 08             	add    esp,0x8
c000f221:	5b                   	pop    ebx
c000f222:	c3                   	ret    
c000f223:	83 ec 0c             	sub    esp,0xc
c000f226:	68 7d 4f 02 c0       	push   0xc0024f7d
c000f22b:	e8 cf da ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f230:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f233:	e8 76 fa ff ff       	call   c000ecae <displayDebugInfo(regs*)>

c000f238 <otherISRHandler(regs*, void*)>:
c000f238:	53                   	push   ebx
c000f239:	83 ec 0c             	sub    esp,0xc
c000f23c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f240:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f243:	50                   	push   eax
c000f244:	50                   	push   eax
c000f245:	68 8a 4f 02 c0       	push   0xc0024f8a
c000f24a:	e8 b0 da ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f24f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f252:	e8 57 fa ff ff       	call   c000ecae <displayDebugInfo(regs*)>

c000f257 <opcodeFault(regs*, void*)>:
c000f257:	55                   	push   ebp
c000f258:	89 e5                	mov    ebp,esp
c000f25a:	56                   	push   esi
c000f25b:	53                   	push   ebx
c000f25c:	83 ec 30             	sub    esp,0x30
c000f25f:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000f264:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f26a:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f270:	84 c0                	test   al,al
c000f272:	74 24                	je     c000f298 <opcodeFault(regs*, void*)+0x41>
c000f274:	83 ec 0c             	sub    esp,0xc
c000f277:	68 a8 4f 02 c0       	push   0xc0024fa8
c000f27c:	e8 7e da ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f281:	83 c4 10             	add    esp,0x10
c000f284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f287:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f28a:	8d 50 19             	lea    edx,[eax+0x19]
c000f28d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f290:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f293:	e9 7b 03 00 00       	jmp    c000f613 <opcodeFault(regs*, void*)+0x3bc>
c000f298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f29b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f29e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f2a1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f2a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2ab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f2ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2b1:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b3:	3c f0                	cmp    al,0xf0
c000f2b5:	75 17                	jne    c000f2ce <opcodeFault(regs*, void*)+0x77>
c000f2b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2c0:	8d 50 01             	lea    edx,[eax+0x1]
c000f2c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2c9:	e9 d6 00 00 00       	jmp    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f2ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2d1:	8a 00                	mov    al,BYTE PTR [eax]
c000f2d3:	3c f2                	cmp    al,0xf2
c000f2d5:	74 09                	je     c000f2e0 <opcodeFault(regs*, void*)+0x89>
c000f2d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2da:	8a 00                	mov    al,BYTE PTR [eax]
c000f2dc:	3c f3                	cmp    al,0xf3
c000f2de:	75 1b                	jne    c000f2fb <opcodeFault(regs*, void*)+0xa4>
c000f2e0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f2e4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2ed:	8d 50 01             	lea    edx,[eax+0x1]
c000f2f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2f6:	e9 a9 00 00 00       	jmp    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f2fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2fe:	8a 00                	mov    al,BYTE PTR [eax]
c000f300:	3c 66                	cmp    al,0x66
c000f302:	75 1b                	jne    c000f31f <opcodeFault(regs*, void*)+0xc8>
c000f304:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f308:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f30b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f30e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f311:	8d 50 01             	lea    edx,[eax+0x1]
c000f314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f317:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f31a:	e9 85 00 00 00       	jmp    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f31f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f322:	8a 00                	mov    al,BYTE PTR [eax]
c000f324:	3c 67                	cmp    al,0x67
c000f326:	75 18                	jne    c000f340 <opcodeFault(regs*, void*)+0xe9>
c000f328:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f32c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f332:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f335:	8d 50 01             	lea    edx,[eax+0x1]
c000f338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f33b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f33e:	eb 64                	jmp    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f340:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f343:	8a 00                	mov    al,BYTE PTR [eax]
c000f345:	3c 2e                	cmp    al,0x2e
c000f347:	74 09                	je     c000f352 <opcodeFault(regs*, void*)+0xfb>
c000f349:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f34c:	8a 00                	mov    al,BYTE PTR [eax]
c000f34e:	3c 3e                	cmp    al,0x3e
c000f350:	75 18                	jne    c000f36a <opcodeFault(regs*, void*)+0x113>
c000f352:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f356:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f35c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f35f:	8d 50 01             	lea    edx,[eax+0x1]
c000f362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f365:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f368:	eb 3a                	jmp    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f36a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f36d:	8a 00                	mov    al,BYTE PTR [eax]
c000f36f:	3c 36                	cmp    al,0x36
c000f371:	74 1b                	je     c000f38e <opcodeFault(regs*, void*)+0x137>
c000f373:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f376:	8a 00                	mov    al,BYTE PTR [eax]
c000f378:	3c 26                	cmp    al,0x26
c000f37a:	74 12                	je     c000f38e <opcodeFault(regs*, void*)+0x137>
c000f37c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f37f:	8a 00                	mov    al,BYTE PTR [eax]
c000f381:	3c 64                	cmp    al,0x64
c000f383:	74 09                	je     c000f38e <opcodeFault(regs*, void*)+0x137>
c000f385:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f388:	8a 00                	mov    al,BYTE PTR [eax]
c000f38a:	3c 65                	cmp    al,0x65
c000f38c:	75 16                	jne    c000f3a4 <opcodeFault(regs*, void*)+0x14d>
c000f38e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f392:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f398:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f39b:	8d 50 01             	lea    edx,[eax+0x1]
c000f39e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3a1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3a4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3a7:	8a 00                	mov    al,BYTE PTR [eax]
c000f3a9:	3c 0f                	cmp    al,0xf
c000f3ab:	0f 85 8d 01 00 00    	jne    c000f53e <opcodeFault(regs*, void*)+0x2e7>
c000f3b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3b4:	40                   	inc    eax
c000f3b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f3b7:	3c c7                	cmp    al,0xc7
c000f3b9:	0f 85 7f 01 00 00    	jne    c000f53e <opcodeFault(regs*, void*)+0x2e7>
c000f3bf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f3c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f3c8:	8d 50 01             	lea    edx,[eax+0x1]
c000f3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3ce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f3d1:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f3d4:	50                   	push   eax
c000f3d5:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f3d8:	50                   	push   eax
c000f3d9:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f3dc:	50                   	push   eax
c000f3dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f3e0:	e8 fb 4c 00 00       	call   c00140e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f3eb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f3ee:	83 f0 01             	xor    eax,0x1
c000f3f1:	84 c0                	test   al,al
c000f3f3:	0f 84 45 01 00 00    	je     c000f53e <opcodeFault(regs*, void*)+0x2e7>
c000f3f9:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f3fc:	3c 01                	cmp    al,0x1
c000f3fe:	0f 85 3a 01 00 00    	jne    c000f53e <opcodeFault(regs*, void*)+0x2e7>
c000f404:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f407:	83 f0 01             	xor    eax,0x1
c000f40a:	84 c0                	test   al,al
c000f40c:	0f 84 2c 01 00 00    	je     c000f53e <opcodeFault(regs*, void*)+0x2e7>
c000f412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f415:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f418:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f41b:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f422:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f425:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f428:	89 c2                	mov    edx,eax
c000f42a:	b8 00 00 00 00       	mov    eax,0x0
c000f42f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f432:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f438:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f43b:	ba 00 00 00 00       	mov    edx,0x0
c000f440:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f443:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f449:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f44c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f44f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f456:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f459:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f45c:	89 c2                	mov    edx,eax
c000f45e:	b8 00 00 00 00       	mov    eax,0x0
c000f463:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f466:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f46c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f46f:	ba 00 00 00 00       	mov    edx,0x0
c000f474:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f477:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f47a:	fa                   	cli    
c000f47b:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000f480:	40                   	inc    eax
c000f481:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000f486:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f489:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f48c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48e:	89 c1                	mov    ecx,eax
c000f490:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f493:	89 cb                	mov    ebx,ecx
c000f495:	89 d0                	mov    eax,edx
c000f497:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f49a:	89 c6                	mov    esi,eax
c000f49c:	89 f0                	mov    eax,esi
c000f49e:	09 d8                	or     eax,ebx
c000f4a0:	85 c0                	test   eax,eax
c000f4a2:	75 21                	jne    c000f4c5 <opcodeFault(regs*, void*)+0x26e>
c000f4a4:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f4a7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f4aa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f4ad:	89 01                	mov    DWORD PTR [ecx],eax
c000f4af:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4b8:	83 c8 40             	or     eax,0x40
c000f4bb:	89 c2                	mov    edx,eax
c000f4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4c0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f4c3:	eb 3e                	jmp    c000f503 <opcodeFault(regs*, void*)+0x2ac>
c000f4c5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f4c8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f4cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4cd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f4d0:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f4d3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f4d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4d9:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f4dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f4df:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f4e2:	89 d0                	mov    eax,edx
c000f4e4:	31 d2                	xor    edx,edx
c000f4e6:	89 c3                	mov    ebx,eax
c000f4e8:	89 d6                	mov    esi,edx
c000f4ea:	89 da                	mov    edx,ebx
c000f4ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4ef:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4f8:	83 e0 bf             	and    eax,0xffffffbf
c000f4fb:	89 c2                	mov    edx,eax
c000f4fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f500:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f503:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000f508:	48                   	dec    eax
c000f509:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000f50e:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000f513:	85 c0                	test   eax,eax
c000f515:	75 01                	jne    c000f518 <opcodeFault(regs*, void*)+0x2c1>
c000f517:	fb                   	sti    
c000f518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f51b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f51e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f521:	01 c2                	add    edx,eax
c000f523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f526:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f529:	83 ec 0c             	sub    esp,0xc
c000f52c:	68 cb 4f 02 c0       	push   0xc0024fcb
c000f531:	e8 c9 d7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f536:	83 c4 10             	add    esp,0x10
c000f539:	e9 d5 00 00 00       	jmp    c000f613 <opcodeFault(regs*, void*)+0x3bc>
c000f53e:	83 ec 0c             	sub    esp,0xc
c000f541:	68 de 4f 02 c0       	push   0xc0024fde
c000f546:	e8 b4 d7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f54b:	83 c4 10             	add    esp,0x10
c000f54e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f551:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f557:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f55a:	c1 e0 04             	shl    eax,0x4
c000f55d:	01 d0                	add    eax,edx
c000f55f:	83 c0 03             	add    eax,0x3
c000f562:	8a 00                	mov    al,BYTE PTR [eax]
c000f564:	0f b6 d8             	movzx  ebx,al
c000f567:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f56a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f56d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f570:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f573:	c1 e0 04             	shl    eax,0x4
c000f576:	01 d0                	add    eax,edx
c000f578:	83 c0 02             	add    eax,0x2
c000f57b:	8a 00                	mov    al,BYTE PTR [eax]
c000f57d:	0f b6 c8             	movzx  ecx,al
c000f580:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f583:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f589:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f58c:	c1 e0 04             	shl    eax,0x4
c000f58f:	01 d0                	add    eax,edx
c000f591:	40                   	inc    eax
c000f592:	8a 00                	mov    al,BYTE PTR [eax]
c000f594:	0f b6 d0             	movzx  edx,al
c000f597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f59a:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f59d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f5a3:	c1 e0 04             	shl    eax,0x4
c000f5a6:	01 f0                	add    eax,esi
c000f5a8:	8a 00                	mov    al,BYTE PTR [eax]
c000f5aa:	0f b6 c0             	movzx  eax,al
c000f5ad:	83 ec 0c             	sub    esp,0xc
c000f5b0:	53                   	push   ebx
c000f5b1:	51                   	push   ecx
c000f5b2:	52                   	push   edx
c000f5b3:	50                   	push   eax
c000f5b4:	68 f0 4f 02 c0       	push   0xc0024ff0
c000f5b9:	e8 41 d7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f5be:	83 c4 20             	add    esp,0x20
c000f5c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5c7:	83 c0 03             	add    eax,0x3
c000f5ca:	8a 00                	mov    al,BYTE PTR [eax]
c000f5cc:	0f b6 d8             	movzx  ebx,al
c000f5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5d5:	83 c0 02             	add    eax,0x2
c000f5d8:	8a 00                	mov    al,BYTE PTR [eax]
c000f5da:	0f b6 c8             	movzx  ecx,al
c000f5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5e0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5e3:	40                   	inc    eax
c000f5e4:	8a 00                	mov    al,BYTE PTR [eax]
c000f5e6:	0f b6 d0             	movzx  edx,al
c000f5e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5ec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5ef:	8a 00                	mov    al,BYTE PTR [eax]
c000f5f1:	0f b6 c0             	movzx  eax,al
c000f5f4:	83 ec 0c             	sub    esp,0xc
c000f5f7:	53                   	push   ebx
c000f5f8:	51                   	push   ecx
c000f5f9:	52                   	push   edx
c000f5fa:	50                   	push   eax
c000f5fb:	68 18 50 02 c0       	push   0xc0025018
c000f600:	e8 fa d6 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c000f605:	83 c4 20             	add    esp,0x20
c000f608:	83 ec 0c             	sub    esp,0xc
c000f60b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f60e:	e8 9b f6 ff ff       	call   c000ecae <displayDebugInfo(regs*)>
c000f613:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f616:	5b                   	pop    ebx
c000f617:	5e                   	pop    esi
c000f618:	5d                   	pop    ebp
c000f619:	c3                   	ret    

c000f61a <displayProgramFault(char const*)>:
c000f61a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f61f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f622:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f628:	85 c0                	test   eax,eax
c000f62a:	74 15                	je     c000f641 <displayProgramFault(char const*)+0x27>
c000f62c:	83 ec 0c             	sub    esp,0xc
c000f62f:	6a 04                	push   0x4
c000f631:	6a 0f                	push   0xf
c000f633:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f637:	50                   	push   eax
c000f638:	e8 d5 b6 ff ff       	call   c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f63d:	83 c4 1c             	add    esp,0x1c
c000f640:	c3                   	ret    
c000f641:	c3                   	ret    

c000f642 <setupInterruptController()>:
c000f642:	55                   	push   ebp
c000f643:	89 e5                	mov    ebp,esp
c000f645:	53                   	push   ebx
c000f646:	83 ec 24             	sub    esp,0x24
c000f649:	b8 00 00 00 00       	mov    eax,0x0
c000f64e:	85 c0                	test   eax,eax
c000f650:	0f 95 c0             	setne  al
c000f653:	84 c0                	test   al,al
c000f655:	74 5b                	je     c000f6b2 <setupInterruptController()+0x70>
c000f657:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f65e:	83 ec 0c             	sub    esp,0xc
c000f661:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f664:	e8 a6 a3 ff ff       	call   c0009a0f <malloc>
c000f669:	83 c4 10             	add    esp,0x10
c000f66c:	89 c3                	mov    ebx,eax
c000f66e:	83 ec 0c             	sub    esp,0xc
c000f671:	53                   	push   ebx
c000f672:	e8 13 21 01 00       	call   c002178a <APIC::APIC()>
c000f677:	83 c4 10             	add    esp,0x10
c000f67a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f67d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f680:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f683:	8b 00                	mov    eax,DWORD PTR [eax]
c000f685:	83 c0 08             	add    eax,0x8
c000f688:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68a:	6a 00                	push   0x0
c000f68c:	6a 00                	push   0x0
c000f68e:	6a 00                	push   0x0
c000f690:	52                   	push   edx
c000f691:	ff d0                	call   eax
c000f693:	83 c4 10             	add    esp,0x10
c000f696:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000f69b:	83 ec 08             	sub    esp,0x8
c000f69e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f6a1:	50                   	push   eax
c000f6a2:	e8 97 eb ff ff       	call   c000e23e <Device::addChild(Device*)>
c000f6a7:	83 c4 10             	add    esp,0x10
c000f6aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f6ad:	e9 79 03 00 00       	jmp    c000fa2b <setupInterruptController()+0x3e9>
c000f6b2:	a0 00 8a 02 c0       	mov    al,ds:0xc0028a00
c000f6b7:	84 c0                	test   al,al
c000f6b9:	75 14                	jne    c000f6cf <setupInterruptController()+0x8d>
c000f6bb:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000f6c0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f6c6:	83 e2 fe             	and    edx,0xfffffffe
c000f6c9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f6cf:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000f6d4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f6da:	83 e0 01             	and    eax,0x1
c000f6dd:	84 c0                	test   al,al
c000f6df:	0f 95 c0             	setne  al
c000f6e2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f6e5:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f6ec:	83 ec 0c             	sub    esp,0xc
c000f6ef:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f6f2:	e8 18 a3 ff ff       	call   c0009a0f <malloc>
c000f6f7:	83 c4 10             	add    esp,0x10
c000f6fa:	89 c3                	mov    ebx,eax
c000f6fc:	83 ec 0c             	sub    esp,0xc
c000f6ff:	53                   	push   ebx
c000f700:	e8 dd 25 01 00       	call   c0021ce2 <PIC::PIC()>
c000f705:	83 c4 10             	add    esp,0x10
c000f708:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f70b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f70e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f711:	8b 00                	mov    eax,DWORD PTR [eax]
c000f713:	83 c0 08             	add    eax,0x8
c000f716:	8b 00                	mov    eax,DWORD PTR [eax]
c000f718:	6a 00                	push   0x0
c000f71a:	6a 00                	push   0x0
c000f71c:	6a 00                	push   0x0
c000f71e:	52                   	push   edx
c000f71f:	ff d0                	call   eax
c000f721:	83 c4 10             	add    esp,0x10
c000f724:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f728:	74 73                	je     c000f79d <setupInterruptController()+0x15b>
c000f72a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f72d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f730:	8b 00                	mov    eax,DWORD PTR [eax]
c000f732:	83 c0 0c             	add    eax,0xc
c000f735:	8b 00                	mov    eax,DWORD PTR [eax]
c000f737:	6a 00                	push   0x0
c000f739:	6a 00                	push   0x0
c000f73b:	6a 00                	push   0x0
c000f73d:	52                   	push   edx
c000f73e:	ff d0                	call   eax
c000f740:	83 c4 10             	add    esp,0x10
c000f743:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f747:	74 15                	je     c000f75e <setupInterruptController()+0x11c>
c000f749:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f74c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f74e:	83 c0 04             	add    eax,0x4
c000f751:	8b 00                	mov    eax,DWORD PTR [eax]
c000f753:	83 ec 0c             	sub    esp,0xc
c000f756:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f759:	ff d0                	call   eax
c000f75b:	83 c4 10             	add    esp,0x10
c000f75e:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f765:	83 ec 0c             	sub    esp,0xc
c000f768:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f76b:	e8 9f a2 ff ff       	call   c0009a0f <malloc>
c000f770:	83 c4 10             	add    esp,0x10
c000f773:	89 c3                	mov    ebx,eax
c000f775:	83 ec 0c             	sub    esp,0xc
c000f778:	53                   	push   ebx
c000f779:	e8 0c 20 01 00       	call   c002178a <APIC::APIC()>
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f784:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f787:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f78a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f78c:	83 c0 08             	add    eax,0x8
c000f78f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f791:	6a 00                	push   0x0
c000f793:	6a 00                	push   0x0
c000f795:	6a 00                	push   0x0
c000f797:	52                   	push   edx
c000f798:	ff d0                	call   eax
c000f79a:	83 c4 10             	add    esp,0x10
c000f79d:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c000f7a2:	83 ec 08             	sub    esp,0x8
c000f7a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7a8:	50                   	push   eax
c000f7a9:	e8 90 ea ff ff       	call   c000e23e <Device::addChild(Device*)>
c000f7ae:	83 c4 10             	add    esp,0x10
c000f7b1:	c7 05 28 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028228,0x0
c000f7bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7be:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c0:	83 c0 24             	add    eax,0x24
c000f7c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c5:	6a 00                	push   0x0
c000f7c7:	68 38 f2 00 c0       	push   0xc000f238
c000f7cc:	6a 00                	push   0x0
c000f7ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7d1:	ff d0                	call   eax
c000f7d3:	83 c4 10             	add    esp,0x10
c000f7d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7db:	83 c0 24             	add    eax,0x24
c000f7de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e0:	6a 00                	push   0x0
c000f7e2:	68 38 f2 00 c0       	push   0xc000f238
c000f7e7:	6a 01                	push   0x1
c000f7e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7ec:	ff d0                	call   eax
c000f7ee:	83 c4 10             	add    esp,0x10
c000f7f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f6:	83 c0 24             	add    eax,0x24
c000f7f9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fb:	6a 00                	push   0x0
c000f7fd:	68 0b eb 00 c0       	push   0xc000eb0b
c000f802:	6a 02                	push   0x2
c000f804:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f807:	ff d0                	call   eax
c000f809:	83 c4 10             	add    esp,0x10
c000f80c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f80f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f811:	83 c0 24             	add    eax,0x24
c000f814:	8b 00                	mov    eax,DWORD PTR [eax]
c000f816:	6a 00                	push   0x0
c000f818:	68 38 f2 00 c0       	push   0xc000f238
c000f81d:	6a 03                	push   0x3
c000f81f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f822:	ff d0                	call   eax
c000f824:	83 c4 10             	add    esp,0x10
c000f827:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f82a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f82c:	83 c0 24             	add    eax,0x24
c000f82f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f831:	6a 00                	push   0x0
c000f833:	68 38 f2 00 c0       	push   0xc000f238
c000f838:	6a 04                	push   0x4
c000f83a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f83d:	ff d0                	call   eax
c000f83f:	83 c4 10             	add    esp,0x10
c000f842:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f845:	8b 00                	mov    eax,DWORD PTR [eax]
c000f847:	83 c0 24             	add    eax,0x24
c000f84a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f84c:	6a 00                	push   0x0
c000f84e:	68 38 f2 00 c0       	push   0xc000f238
c000f853:	6a 05                	push   0x5
c000f855:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f858:	ff d0                	call   eax
c000f85a:	83 c4 10             	add    esp,0x10
c000f85d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f860:	8b 00                	mov    eax,DWORD PTR [eax]
c000f862:	83 c0 24             	add    eax,0x24
c000f865:	8b 00                	mov    eax,DWORD PTR [eax]
c000f867:	6a 00                	push   0x0
c000f869:	68 57 f2 00 c0       	push   0xc000f257
c000f86e:	6a 06                	push   0x6
c000f870:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f873:	ff d0                	call   eax
c000f875:	83 c4 10             	add    esp,0x10
c000f878:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f87b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f87d:	83 c0 24             	add    eax,0x24
c000f880:	8b 00                	mov    eax,DWORD PTR [eax]
c000f882:	6a 00                	push   0x0
c000f884:	68 3d f1 00 c0       	push   0xc000f13d
c000f889:	6a 07                	push   0x7
c000f88b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f88e:	ff d0                	call   eax
c000f890:	83 c4 10             	add    esp,0x10
c000f893:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f896:	8b 00                	mov    eax,DWORD PTR [eax]
c000f898:	83 c0 24             	add    eax,0x24
c000f89b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89d:	6a 00                	push   0x0
c000f89f:	68 26 e9 00 c0       	push   0xc000e926
c000f8a4:	6a 08                	push   0x8
c000f8a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8a9:	ff d0                	call   eax
c000f8ab:	83 c4 10             	add    esp,0x10
c000f8ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b3:	83 c0 24             	add    eax,0x24
c000f8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b8:	6a 00                	push   0x0
c000f8ba:	68 38 f2 00 c0       	push   0xc000f238
c000f8bf:	6a 09                	push   0x9
c000f8c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8c4:	ff d0                	call   eax
c000f8c6:	83 c4 10             	add    esp,0x10
c000f8c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ce:	83 c0 24             	add    eax,0x24
c000f8d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d3:	6a 00                	push   0x0
c000f8d5:	68 38 f2 00 c0       	push   0xc000f238
c000f8da:	6a 0a                	push   0xa
c000f8dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8df:	ff d0                	call   eax
c000f8e1:	83 c4 10             	add    esp,0x10
c000f8e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8e7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8e9:	83 c0 24             	add    eax,0x24
c000f8ec:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ee:	6a 00                	push   0x0
c000f8f0:	68 38 f2 00 c0       	push   0xc000f238
c000f8f5:	6a 0b                	push   0xb
c000f8f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8fa:	ff d0                	call   eax
c000f8fc:	83 c4 10             	add    esp,0x10
c000f8ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f902:	8b 00                	mov    eax,DWORD PTR [eax]
c000f904:	83 c0 24             	add    eax,0x24
c000f907:	8b 00                	mov    eax,DWORD PTR [eax]
c000f909:	6a 00                	push   0x0
c000f90b:	68 38 f2 00 c0       	push   0xc000f238
c000f910:	6a 0c                	push   0xc
c000f912:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f915:	ff d0                	call   eax
c000f917:	83 c4 10             	add    esp,0x10
c000f91a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f91d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f91f:	83 c0 24             	add    eax,0x24
c000f922:	8b 00                	mov    eax,DWORD PTR [eax]
c000f924:	6a 00                	push   0x0
c000f926:	68 b0 f1 00 c0       	push   0xc000f1b0
c000f92b:	6a 0d                	push   0xd
c000f92d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f930:	ff d0                	call   eax
c000f932:	83 c4 10             	add    esp,0x10
c000f935:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f938:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93a:	83 c0 24             	add    eax,0x24
c000f93d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93f:	6a 00                	push   0x0
c000f941:	68 e9 f1 00 c0       	push   0xc000f1e9
c000f946:	6a 0e                	push   0xe
c000f948:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f94b:	ff d0                	call   eax
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f953:	8b 00                	mov    eax,DWORD PTR [eax]
c000f955:	83 c0 24             	add    eax,0x24
c000f958:	8b 00                	mov    eax,DWORD PTR [eax]
c000f95a:	6a 00                	push   0x0
c000f95c:	68 38 f2 00 c0       	push   0xc000f238
c000f961:	6a 0f                	push   0xf
c000f963:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f966:	ff d0                	call   eax
c000f968:	83 c4 10             	add    esp,0x10
c000f96b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f96e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f970:	83 c0 24             	add    eax,0x24
c000f973:	8b 00                	mov    eax,DWORD PTR [eax]
c000f975:	6a 00                	push   0x0
c000f977:	68 38 f2 00 c0       	push   0xc000f238
c000f97c:	6a 10                	push   0x10
c000f97e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f981:	ff d0                	call   eax
c000f983:	83 c4 10             	add    esp,0x10
c000f986:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f989:	8b 00                	mov    eax,DWORD PTR [eax]
c000f98b:	83 c0 24             	add    eax,0x24
c000f98e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f990:	6a 00                	push   0x0
c000f992:	68 38 f2 00 c0       	push   0xc000f238
c000f997:	6a 11                	push   0x11
c000f999:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f99c:	ff d0                	call   eax
c000f99e:	83 c4 10             	add    esp,0x10
c000f9a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9a6:	83 c0 24             	add    eax,0x24
c000f9a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ab:	6a 00                	push   0x0
c000f9ad:	68 38 f2 00 c0       	push   0xc000f238
c000f9b2:	6a 12                	push   0x12
c000f9b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9b7:	ff d0                	call   eax
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9bf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c1:	83 c0 24             	add    eax,0x24
c000f9c4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c6:	6a 00                	push   0x0
c000f9c8:	68 38 f2 00 c0       	push   0xc000f238
c000f9cd:	6a 13                	push   0x13
c000f9cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9d2:	ff d0                	call   eax
c000f9d4:	83 c4 10             	add    esp,0x10
c000f9d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9dc:	83 c0 24             	add    eax,0x24
c000f9df:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e1:	6a 00                	push   0x0
c000f9e3:	68 38 f2 00 c0       	push   0xc000f238
c000f9e8:	6a 14                	push   0x14
c000f9ea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9ed:	ff d0                	call   eax
c000f9ef:	83 c4 10             	add    esp,0x10
c000f9f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9f7:	83 c0 24             	add    eax,0x24
c000f9fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9fc:	6a 00                	push   0x0
c000f9fe:	68 38 f2 00 c0       	push   0xc000f238
c000fa03:	6a 1e                	push   0x1e
c000fa05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa08:	ff d0                	call   eax
c000fa0a:	83 c4 10             	add    esp,0x10
c000fa0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa10:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa12:	83 c0 24             	add    eax,0x24
c000fa15:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa17:	6a 00                	push   0x0
c000fa19:	68 6b 6d 01 c0       	push   0xc0016d6b
c000fa1e:	6a 60                	push   0x60
c000fa20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fa23:	ff d0                	call   eax
c000fa25:	83 c4 10             	add    esp,0x10
c000fa28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fa2b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fa2e:	c9                   	leave  
c000fa2f:	c3                   	ret    

c000fa30 <InterruptController::convertLegacyIRQNumber(int)>:
c000fa30:	55                   	push   ebp
c000fa31:	89 e5                	mov    ebp,esp
c000fa33:	83 ec 08             	sub    esp,0x8
c000fa36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa39:	83 ec 0c             	sub    esp,0xc
c000fa3c:	50                   	push   eax
c000fa3d:	e8 fc ea ff ff       	call   c000e53e <Device::getName()>
c000fa42:	83 c4 10             	add    esp,0x10
c000fa45:	8a 00                	mov    al,BYTE PTR [eax]
c000fa47:	3c 41                	cmp    al,0x41
c000fa49:	0f 94 c0             	sete   al
c000fa4c:	84 c0                	test   al,al
c000fa4e:	74 28                	je     c000fa78 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fa50:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fa54:	7f 12                	jg     c000fa68 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fa56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fa59:	05 e0 77 02 c0       	add    eax,0xc00277e0
c000fa5e:	8a 00                	mov    al,BYTE PTR [eax]
c000fa60:	0f b6 c0             	movzx  eax,al
c000fa63:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fa66:	eb 10                	jmp    c000fa78 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fa68:	83 ec 0c             	sub    esp,0xc
c000fa6b:	68 40 50 02 c0       	push   0xc0025040
c000fa70:	e8 52 4f 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c000fa75:	83 c4 10             	add    esp,0x10
c000fa78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fa7b:	c9                   	leave  
c000fa7c:	c3                   	ret    
c000fa7d:	90                   	nop

c000fa7e <startGUI(void*)>:
c000fa7e:	55                   	push   ebp
c000fa7f:	89 e5                	mov    ebp,esp
c000fa81:	53                   	push   ebx
c000fa82:	83 ec 04             	sub    esp,0x4
c000fa85:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000fa8a:	48                   	dec    eax
c000fa8b:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000fa90:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000fa95:	85 c0                	test   eax,eax
c000fa97:	75 01                	jne    c000fa9a <startGUI(void*)+0x1c>
c000fa99:	fb                   	sti    
c000fa9a:	8b 1d e8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e8
c000faa0:	83 ec 08             	sub    esp,0x8
c000faa3:	6a 01                	push   0x1
c000faa5:	68 c0 50 02 c0       	push   0xc00250c0
c000faaa:	e8 97 82 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c000faaf:	83 c4 10             	add    esp,0x10
c000fab2:	83 ec 08             	sub    esp,0x8
c000fab5:	53                   	push   ebx
c000fab6:	50                   	push   eax
c000fab7:	e8 bb 84 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c000fabc:	83 c4 10             	add    esp,0x10
c000fabf:	8b 1d e8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e8
c000fac5:	83 ec 08             	sub    esp,0x8
c000fac8:	6a 01                	push   0x1
c000faca:	68 da 50 02 c0       	push   0xc00250da
c000facf:	e8 72 82 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c000fad4:	83 c4 10             	add    esp,0x10
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	53                   	push   ebx
c000fadb:	50                   	push   eax
c000fadc:	e8 96 84 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c000fae1:	83 c4 10             	add    esp,0x10
c000fae4:	90                   	nop
c000fae5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fae8:	c9                   	leave  
c000fae9:	c3                   	ret    

c000faea <startGUIVESA(void*)>:
c000faea:	55                   	push   ebp
c000faeb:	89 e5                	mov    ebp,esp
c000faed:	53                   	push   ebx
c000faee:	83 ec 04             	sub    esp,0x4
c000faf1:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000faf6:	48                   	dec    eax
c000faf7:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000fafc:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000fb01:	85 c0                	test   eax,eax
c000fb03:	75 01                	jne    c000fb06 <startGUIVESA(void*)+0x1c>
c000fb05:	fb                   	sti    
c000fb06:	8b 1d e8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e8
c000fb0c:	83 ec 08             	sub    esp,0x8
c000fb0f:	6a 01                	push   0x1
c000fb11:	68 f4 50 02 c0       	push   0xc00250f4
c000fb16:	e8 2b 82 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c000fb1b:	83 c4 10             	add    esp,0x10
c000fb1e:	83 ec 08             	sub    esp,0x8
c000fb21:	53                   	push   ebx
c000fb22:	50                   	push   eax
c000fb23:	e8 4f 84 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	8b 1d e8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e8
c000fb31:	83 ec 08             	sub    esp,0x8
c000fb34:	6a 01                	push   0x1
c000fb36:	68 da 50 02 c0       	push   0xc00250da
c000fb3b:	e8 06 82 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	83 ec 08             	sub    esp,0x8
c000fb46:	53                   	push   ebx
c000fb47:	50                   	push   eax
c000fb48:	e8 2a 84 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c000fb4d:	83 c4 10             	add    esp,0x10
c000fb50:	90                   	nop
c000fb51:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fb54:	c9                   	leave  
c000fb55:	c3                   	ret    

c000fb56 <sendKeyToTerminal(unsigned char)>:
c000fb56:	55                   	push   ebp
c000fb57:	89 e5                	mov    ebp,esp
c000fb59:	83 ec 28             	sub    esp,0x28
c000fb5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb5f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fb62:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000fb67:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fb6b:	83 ec 08             	sub    esp,0x8
c000fb6e:	52                   	push   edx
c000fb6f:	50                   	push   eax
c000fb70:	e8 45 b6 ff ff       	call   c000b1ba <VgaText::receiveKey(unsigned char)>
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fb7c:	0f 85 8f 00 00 00    	jne    c000fc11 <sendKeyToTerminal(unsigned char)+0xbb>
c000fb82:	fa                   	cli    
c000fb83:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000fb88:	40                   	inc    eax
c000fb89:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000fb8e:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c000fb93:	40                   	inc    eax
c000fb94:	a3 04 96 02 c0       	mov    ds:0xc0029604,eax
c000fb99:	a1 40 82 02 c0       	mov    eax,ds:0xc0028240
c000fb9e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fba1:	c7 05 40 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028240,0x0
c000fbab:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fbaf:	74 1f                	je     c000fbd0 <sendKeyToTerminal(unsigned char)+0x7a>
c000fbb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbb4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fbb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fbba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fbbd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fbc0:	83 ec 0c             	sub    esp,0xc
c000fbc3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fbc6:	e8 1d 90 00 00       	call   c0018be8 <unblockTask(ThreadControlBlock*)>
c000fbcb:	83 c4 10             	add    esp,0x10
c000fbce:	eb db                	jmp    c000fbab <sendKeyToTerminal(unsigned char)+0x55>
c000fbd0:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c000fbd5:	48                   	dec    eax
c000fbd6:	a3 04 96 02 c0       	mov    ds:0xc0029604,eax
c000fbdb:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c000fbe0:	85 c0                	test   eax,eax
c000fbe2:	75 18                	jne    c000fbfc <sendKeyToTerminal(unsigned char)+0xa6>
c000fbe4:	a1 00 96 02 c0       	mov    eax,ds:0xc0029600
c000fbe9:	85 c0                	test   eax,eax
c000fbeb:	74 0f                	je     c000fbfc <sendKeyToTerminal(unsigned char)+0xa6>
c000fbed:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c000fbf7:	e8 30 8b 00 00       	call   c001872c <schedule()>
c000fbfc:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000fc01:	48                   	dec    eax
c000fc02:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c000fc07:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c000fc0c:	85 c0                	test   eax,eax
c000fc0e:	75 01                	jne    c000fc11 <sendKeyToTerminal(unsigned char)+0xbb>
c000fc10:	fb                   	sti    
c000fc11:	90                   	nop
c000fc12:	c9                   	leave  
c000fc13:	c3                   	ret    

c000fc14 <sendKeyboardToken(KeyboardToken)>:
c000fc14:	55                   	push   ebp
c000fc15:	89 e5                	mov    ebp,esp
c000fc17:	83 ec 18             	sub    esp,0x18
c000fc1a:	e8 da 51 00 00       	call   c0014df9 <Krnl::userIOReceived()>
c000fc1f:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fc22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc25:	0f b7 c0             	movzx  eax,ax
c000fc28:	83 f2 01             	xor    edx,0x1
c000fc2b:	88 90 60 82 02 c0    	mov    BYTE PTR [eax-0x3ffd7da0],dl
c000fc31:	a1 48 82 02 c0       	mov    eax,ds:0xc0028248
c000fc36:	85 c0                	test   eax,eax
c000fc38:	74 24                	je     c000fc5e <sendKeyboardToken(KeyboardToken)+0x4a>
c000fc3a:	8b 0d 48 82 02 c0    	mov    ecx,DWORD PTR ds:0xc0028248
c000fc40:	83 ec 04             	sub    esp,0x4
c000fc43:	68 60 82 02 c0       	push   0xc0028260
c000fc48:	83 ec 08             	sub    esp,0x8
c000fc4b:	89 e2                	mov    edx,esp
c000fc4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc50:	89 02                	mov    DWORD PTR [edx],eax
c000fc52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fc55:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fc59:	ff d1                	call   ecx
c000fc5b:	83 c4 10             	add    esp,0x10
c000fc5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc61:	66 3d 03 02          	cmp    ax,0x203
c000fc65:	75 07                	jne    c000fc6e <sendKeyboardToken(KeyboardToken)+0x5a>
c000fc67:	a0 60 83 02 c0       	mov    al,ds:0xc0028360
c000fc6c:	84 c0                	test   al,al
c000fc6e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fc72:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fc75:	a0 68 86 02 c0       	mov    al,ds:0xc0028668
c000fc7a:	38 c2                	cmp    dl,al
c000fc7c:	74 1c                	je     c000fc9a <sendKeyboardToken(KeyboardToken)+0x86>
c000fc7e:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fc81:	a2 68 86 02 c0       	mov    ds:0xc0028668,al
c000fc86:	a0 68 86 02 c0       	mov    al,ds:0xc0028668
c000fc8b:	0f b6 c0             	movzx  eax,al
c000fc8e:	83 ec 0c             	sub    esp,0xc
c000fc91:	50                   	push   eax
c000fc92:	e8 63 ab ff ff       	call   c000a7fa <setTerminalScrollLock(bool)>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fc9d:	84 c0                	test   al,al
c000fc9f:	0f 84 ae 00 00 00    	je     c000fd53 <sendKeyboardToken(KeyboardToken)+0x13f>
c000fca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca8:	66 3d 10 03          	cmp    ax,0x310
c000fcac:	75 06                	jne    c000fcb4 <sendKeyboardToken(KeyboardToken)+0xa0>
c000fcae:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fcb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcb7:	66 3d 11 03          	cmp    ax,0x311
c000fcbb:	75 06                	jne    c000fcc3 <sendKeyboardToken(KeyboardToken)+0xaf>
c000fcbd:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fcc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc6:	66 3d 12 03          	cmp    ax,0x312
c000fcca:	75 06                	jne    c000fcd2 <sendKeyboardToken(KeyboardToken)+0xbe>
c000fccc:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fcd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd5:	66 3d 13 03          	cmp    ax,0x313
c000fcd9:	75 06                	jne    c000fce1 <sendKeyboardToken(KeyboardToken)+0xcd>
c000fcdb:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fce1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fce4:	66 3d 14 03          	cmp    ax,0x314
c000fce8:	75 06                	jne    c000fcf0 <sendKeyboardToken(KeyboardToken)+0xdc>
c000fcea:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fcf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcf3:	66 3d 15 03          	cmp    ax,0x315
c000fcf7:	75 06                	jne    c000fcff <sendKeyboardToken(KeyboardToken)+0xeb>
c000fcf9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fcff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd02:	66 3d 16 03          	cmp    ax,0x316
c000fd06:	75 06                	jne    c000fd0e <sendKeyboardToken(KeyboardToken)+0xfa>
c000fd08:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fd0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd11:	66 3d 17 03          	cmp    ax,0x317
c000fd15:	75 06                	jne    c000fd1d <sendKeyboardToken(KeyboardToken)+0x109>
c000fd17:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fd1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd20:	66 3d 18 03          	cmp    ax,0x318
c000fd24:	75 06                	jne    c000fd2c <sendKeyboardToken(KeyboardToken)+0x118>
c000fd26:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fd2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd2f:	66 3d 19 03          	cmp    ax,0x319
c000fd33:	75 06                	jne    c000fd3b <sendKeyboardToken(KeyboardToken)+0x127>
c000fd35:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fd3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd3e:	66 3d 1a 03          	cmp    ax,0x31a
c000fd42:	0f 85 c9 00 00 00    	jne    c000fe11 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd48:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fd4e:	e9 be 00 00 00       	jmp    c000fe11 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd56:	66 3d 10 03          	cmp    ax,0x310
c000fd5a:	75 0a                	jne    c000fd66 <sendKeyboardToken(KeyboardToken)+0x152>
c000fd5c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fd62:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd69:	66 3d 11 03          	cmp    ax,0x311
c000fd6d:	75 0a                	jne    c000fd79 <sendKeyboardToken(KeyboardToken)+0x165>
c000fd6f:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fd75:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd7c:	66 3d 12 03          	cmp    ax,0x312
c000fd80:	75 0a                	jne    c000fd8c <sendKeyboardToken(KeyboardToken)+0x178>
c000fd82:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fd88:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd8f:	66 3d 13 03          	cmp    ax,0x313
c000fd93:	75 0a                	jne    c000fd9f <sendKeyboardToken(KeyboardToken)+0x18b>
c000fd95:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fd9b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fda2:	66 3d 14 03          	cmp    ax,0x314
c000fda6:	75 0a                	jne    c000fdb2 <sendKeyboardToken(KeyboardToken)+0x19e>
c000fda8:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fdae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdb5:	66 3d 15 03          	cmp    ax,0x315
c000fdb9:	75 0a                	jne    c000fdc5 <sendKeyboardToken(KeyboardToken)+0x1b1>
c000fdbb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fdc1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdc8:	66 3d 16 03          	cmp    ax,0x316
c000fdcc:	75 0a                	jne    c000fdd8 <sendKeyboardToken(KeyboardToken)+0x1c4>
c000fdce:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fdd4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fddb:	66 3d 17 03          	cmp    ax,0x317
c000fddf:	75 0a                	jne    c000fdeb <sendKeyboardToken(KeyboardToken)+0x1d7>
c000fde1:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fde7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdee:	66 3d 18 03          	cmp    ax,0x318
c000fdf2:	75 0a                	jne    c000fdfe <sendKeyboardToken(KeyboardToken)+0x1ea>
c000fdf4:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fdfa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe01:	66 3d 19 03          	cmp    ax,0x319
c000fe05:	75 0a                	jne    c000fe11 <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fe07:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fe0d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fe11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe14:	66 3d 00 02          	cmp    ax,0x200
c000fe18:	75 2c                	jne    c000fe46 <sendKeyboardToken(KeyboardToken)+0x232>
c000fe1a:	a0 60 86 02 c0       	mov    al,ds:0xc0028660
c000fe1f:	83 f0 01             	xor    eax,0x1
c000fe22:	84 c0                	test   al,al
c000fe24:	74 20                	je     c000fe46 <sendKeyboardToken(KeyboardToken)+0x232>
c000fe26:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000fe2b:	6a 01                	push   0x1
c000fe2d:	6a 00                	push   0x0
c000fe2f:	68 7e fa 00 c0       	push   0xc000fa7e
c000fe34:	50                   	push   eax
c000fe35:	e8 d6 86 00 00       	call   c0018510 <Process::createThread(void (*)(void*), void*, int)>
c000fe3a:	83 c4 10             	add    esp,0x10
c000fe3d:	c6 05 60 86 02 c0 01 	mov    BYTE PTR ds:0xc0028660,0x1
c000fe44:	eb 33                	jmp    c000fe79 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe49:	66 3d 01 02          	cmp    ax,0x201
c000fe4d:	75 2a                	jne    c000fe79 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe4f:	a0 60 86 02 c0       	mov    al,ds:0xc0028660
c000fe54:	83 f0 01             	xor    eax,0x1
c000fe57:	84 c0                	test   al,al
c000fe59:	74 1e                	je     c000fe79 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe5b:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c000fe60:	6a 01                	push   0x1
c000fe62:	6a 00                	push   0x0
c000fe64:	68 ea fa 00 c0       	push   0xc000faea
c000fe69:	50                   	push   eax
c000fe6a:	e8 a1 86 00 00       	call   c0018510 <Process::createThread(void (*)(void*), void*, int)>
c000fe6f:	83 c4 10             	add    esp,0x10
c000fe72:	c6 05 60 86 02 c0 01 	mov    BYTE PTR ds:0xc0028660,0x1
c000fe79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe7c:	66 3d 1d 03          	cmp    ax,0x31d
c000fe80:	75 06                	jne    c000fe88 <sendKeyboardToken(KeyboardToken)+0x274>
c000fe82:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fe88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe8b:	66 3d 1c 03          	cmp    ax,0x31c
c000fe8f:	75 06                	jne    c000fe97 <sendKeyboardToken(KeyboardToken)+0x283>
c000fe91:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fe97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe9a:	66 3d 1b 03          	cmp    ax,0x31b
c000fe9e:	75 06                	jne    c000fea6 <sendKeyboardToken(KeyboardToken)+0x292>
c000fea0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fea6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fea9:	66 3d 1e 03          	cmp    ax,0x31e
c000fead:	75 06                	jne    c000feb5 <sendKeyboardToken(KeyboardToken)+0x2a1>
c000feaf:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000feb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000feb8:	66 3d 1f 03          	cmp    ax,0x31f
c000febc:	75 06                	jne    c000fec4 <sendKeyboardToken(KeyboardToken)+0x2b0>
c000febe:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fec7:	66 3d 1a 03          	cmp    ax,0x31a
c000fecb:	75 06                	jne    c000fed3 <sendKeyboardToken(KeyboardToken)+0x2bf>
c000fecd:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fed3:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fed7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000feda:	83 f0 01             	xor    eax,0x1
c000fedd:	84 c0                	test   al,al
c000fedf:	74 77                	je     c000ff58 <sendKeyboardToken(KeyboardToken)+0x344>
c000fee1:	a0 61 83 02 c0       	mov    al,ds:0xc0028361
c000fee6:	84 c0                	test   al,al
c000fee8:	74 41                	je     c000ff2b <sendKeyboardToken(KeyboardToken)+0x317>
c000feea:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000feee:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fef2:	74 2b                	je     c000ff1f <sendKeyboardToken(KeyboardToken)+0x30b>
c000fef4:	8b 15 64 86 02 c0    	mov    edx,DWORD PTR ds:0xc0028664
c000fefa:	89 d0                	mov    eax,edx
c000fefc:	c1 e0 02             	shl    eax,0x2
c000feff:	01 d0                	add    eax,edx
c000ff01:	01 c0                	add    eax,eax
c000ff03:	a3 64 86 02 c0       	mov    ds:0xc0028664,eax
c000ff08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff0b:	0f b7 c0             	movzx  eax,ax
c000ff0e:	8d 50 d0             	lea    edx,[eax-0x30]
c000ff11:	a1 64 86 02 c0       	mov    eax,ds:0xc0028664
c000ff16:	01 d0                	add    eax,edx
c000ff18:	a3 64 86 02 c0       	mov    ds:0xc0028664,eax
c000ff1d:	eb 6d                	jmp    c000ff8c <sendKeyboardToken(KeyboardToken)+0x378>
c000ff1f:	c7 05 64 86 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028664,0x0
c000ff29:	eb 61                	jmp    c000ff8c <sendKeyboardToken(KeyboardToken)+0x378>
c000ff2b:	a1 64 86 02 c0       	mov    eax,ds:0xc0028664
c000ff30:	85 c0                	test   eax,eax
c000ff32:	74 18                	je     c000ff4c <sendKeyboardToken(KeyboardToken)+0x338>
c000ff34:	a1 64 86 02 c0       	mov    eax,ds:0xc0028664
c000ff39:	0f b6 c0             	movzx  eax,al
c000ff3c:	83 ec 0c             	sub    esp,0xc
c000ff3f:	50                   	push   eax
c000ff40:	e8 11 fc ff ff       	call   c000fb56 <sendKeyToTerminal(unsigned char)>
c000ff45:	83 c4 10             	add    esp,0x10
c000ff48:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff4c:	c7 05 64 86 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028664,0x0
c000ff56:	eb 34                	jmp    c000ff8c <sendKeyboardToken(KeyboardToken)+0x378>
c000ff58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff5b:	66 3d 01 01          	cmp    ax,0x101
c000ff5f:	75 2b                	jne    c000ff8c <sendKeyboardToken(KeyboardToken)+0x378>
c000ff61:	a1 64 86 02 c0       	mov    eax,ds:0xc0028664
c000ff66:	85 c0                	test   eax,eax
c000ff68:	74 18                	je     c000ff82 <sendKeyboardToken(KeyboardToken)+0x36e>
c000ff6a:	a1 64 86 02 c0       	mov    eax,ds:0xc0028664
c000ff6f:	0f b6 c0             	movzx  eax,al
c000ff72:	83 ec 0c             	sub    esp,0xc
c000ff75:	50                   	push   eax
c000ff76:	e8 db fb ff ff       	call   c000fb56 <sendKeyToTerminal(unsigned char)>
c000ff7b:	83 c4 10             	add    esp,0x10
c000ff7e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff82:	c7 05 64 86 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028664,0x0
c000ff8c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ff8f:	83 f0 01             	xor    eax,0x1
c000ff92:	84 c0                	test   al,al
c000ff94:	74 4c                	je     c000ffe2 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff96:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff99:	83 f0 01             	xor    eax,0x1
c000ff9c:	84 c0                	test   al,al
c000ff9e:	74 42                	je     c000ffe2 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffa0:	a0 60 83 02 c0       	mov    al,ds:0xc0028360
c000ffa5:	83 f0 01             	xor    eax,0x1
c000ffa8:	84 c0                	test   al,al
c000ffaa:	74 36                	je     c000ffe2 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffaf:	66 83 f8 1f          	cmp    ax,0x1f
c000ffb3:	76 09                	jbe    c000ffbe <sendKeyboardToken(KeyboardToken)+0x3aa>
c000ffb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffb8:	66 83 f8 7e          	cmp    ax,0x7e
c000ffbc:	76 12                	jbe    c000ffd0 <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ffbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffc1:	66 83 f8 0a          	cmp    ax,0xa
c000ffc5:	74 09                	je     c000ffd0 <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ffc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffca:	66 83 f8 08          	cmp    ax,0x8
c000ffce:	75 12                	jne    c000ffe2 <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ffd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffd3:	0f b6 c0             	movzx  eax,al
c000ffd6:	83 ec 0c             	sub    esp,0xc
c000ffd9:	50                   	push   eax
c000ffda:	e8 77 fb ff ff       	call   c000fb56 <sendKeyToTerminal(unsigned char)>
c000ffdf:	83 c4 10             	add    esp,0x10
c000ffe2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ffe5:	83 f0 01             	xor    eax,0x1
c000ffe8:	84 c0                	test   al,al
c000ffea:	74 4f                	je     c001003b <sendKeyboardToken(KeyboardToken)+0x427>
c000ffec:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ffef:	83 f0 01             	xor    eax,0x1
c000fff2:	84 c0                	test   al,al
c000fff4:	74 45                	je     c001003b <sendKeyboardToken(KeyboardToken)+0x427>
c000fff6:	a0 60 83 02 c0       	mov    al,ds:0xc0028360
c000fffb:	84 c0                	test   al,al
c000fffd:	74 3c                	je     c001003b <sendKeyboardToken(KeyboardToken)+0x427>
c000ffff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010002:	66 83 f8 3f          	cmp    ax,0x3f
c0010006:	76 33                	jbe    c001003b <sendKeyboardToken(KeyboardToken)+0x427>
c0010008:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001000b:	66 83 f8 7f          	cmp    ax,0x7f
c001000f:	77 2a                	ja     c001003b <sendKeyboardToken(KeyboardToken)+0x427>
c0010011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010014:	88 c2                	mov    dl,al
c0010016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010019:	66 83 f8 5f          	cmp    ax,0x5f
c001001d:	76 04                	jbe    c0010023 <sendKeyboardToken(KeyboardToken)+0x40f>
c001001f:	b0 20                	mov    al,0x20
c0010021:	eb 02                	jmp    c0010025 <sendKeyboardToken(KeyboardToken)+0x411>
c0010023:	b0 00                	mov    al,0x0
c0010025:	29 c2                	sub    edx,eax
c0010027:	88 d0                	mov    al,dl
c0010029:	83 e8 40             	sub    eax,0x40
c001002c:	0f b6 c0             	movzx  eax,al
c001002f:	83 ec 0c             	sub    esp,0xc
c0010032:	50                   	push   eax
c0010033:	e8 1e fb ff ff       	call   c000fb56 <sendKeyToTerminal(unsigned char)>
c0010038:	83 c4 10             	add    esp,0x10
c001003b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001003e:	66 3d 00 03          	cmp    ax,0x300
c0010042:	75 0f                	jne    c0010053 <sendKeyboardToken(KeyboardToken)+0x43f>
c0010044:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010047:	83 f0 01             	xor    eax,0x1
c001004a:	84 c0                	test   al,al
c001004c:	74 05                	je     c0010053 <sendKeyboardToken(KeyboardToken)+0x43f>
c001004e:	e8 18 ab ff ff       	call   c000ab6b <doTerminalCycle()>
c0010053:	90                   	nop
c0010054:	c9                   	leave  
c0010055:	c3                   	ret    

c0010056 <clearInternalKeybuffer(VgaText*)>:
c0010056:	55                   	push   ebp
c0010057:	89 e5                	mov    ebp,esp
c0010059:	83 ec 08             	sub    esp,0x8
c001005c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001005f:	05 98 01 00 00       	add    eax,0x198
c0010064:	83 ec 0c             	sub    esp,0xc
c0010067:	50                   	push   eax
c0010068:	e8 33 06 ff ff       	call   c00006a0 <strlen>
c001006d:	83 c4 10             	add    esp,0x10
c0010070:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010073:	81 c2 98 01 00 00    	add    edx,0x198
c0010079:	83 ec 04             	sub    esp,0x4
c001007c:	50                   	push   eax
c001007d:	6a 00                	push   0x0
c001007f:	52                   	push   edx
c0010080:	e8 ff 05 ff ff       	call   c0000684 <memset>
c0010085:	83 c4 10             	add    esp,0x10
c0010088:	90                   	nop
c0010089:	c9                   	leave  
c001008a:	c3                   	ret    

c001008b <readKeyboard(VgaText*, char*, unsigned long)>:
c001008b:	55                   	push   ebp
c001008c:	89 e5                	mov    ebp,esp
c001008e:	83 ec 18             	sub    esp,0x18
c0010091:	a1 48 82 02 c0       	mov    eax,ds:0xc0028248
c0010096:	85 c0                	test   eax,eax
c0010098:	74 2a                	je     c00100c4 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001009a:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00100a0:	8b 0d 48 82 02 c0    	mov    ecx,DWORD PTR ds:0xc0028248
c00100a6:	83 ec 04             	sub    esp,0x4
c00100a9:	68 60 82 02 c0       	push   0xc0028260
c00100ae:	83 ec 08             	sub    esp,0x8
c00100b1:	89 e2                	mov    edx,esp
c00100b3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00100b6:	89 02                	mov    DWORD PTR [edx],eax
c00100b8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00100bb:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00100bf:	ff d1                	call   ecx
c00100c1:	83 c4 10             	add    esp,0x10
c00100c4:	fb                   	sti    
c00100c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00100cc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00100d0:	0f 84 a1 00 00 00    	je     c0010177 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c00100d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100d9:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00100df:	84 c0                	test   al,al
c00100e1:	75 28                	jne    c001010b <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c00100e3:	fa                   	cli    
c00100e4:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00100e9:	40                   	inc    eax
c00100ea:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c00100ef:	e8 38 86 00 00       	call   c001872c <schedule()>
c00100f4:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00100f9:	48                   	dec    eax
c00100fa:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c00100ff:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0010104:	85 c0                	test   eax,eax
c0010106:	75 ce                	jne    c00100d6 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010108:	fb                   	sti    
c0010109:	eb cb                	jmp    c00100d6 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001010b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001010e:	8d 50 01             	lea    edx,[eax+0x1]
c0010111:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0010114:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010117:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c001011d:	88 10                	mov    BYTE PTR [eax],dl
c001011f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010122:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0010128:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001012b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001012e:	05 98 01 00 00       	add    eax,0x198
c0010133:	83 ec 0c             	sub    esp,0xc
c0010136:	50                   	push   eax
c0010137:	e8 64 05 ff ff       	call   c00006a0 <strlen>
c001013c:	83 c4 10             	add    esp,0x10
c001013f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010142:	81 c2 98 01 00 00    	add    edx,0x198
c0010148:	8d 4a 01             	lea    ecx,[edx+0x1]
c001014b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001014e:	81 c2 98 01 00 00    	add    edx,0x198
c0010154:	83 ec 04             	sub    esp,0x4
c0010157:	50                   	push   eax
c0010158:	51                   	push   ecx
c0010159:	52                   	push   edx
c001015a:	e8 5d 04 ff ff       	call   c00005bc <memmove>
c001015f:	83 c4 10             	add    esp,0x10
c0010162:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0010165:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0010168:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c001016c:	0f 85 5a ff ff ff    	jne    c00100cc <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0010172:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010175:	eb 03                	jmp    c001017a <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0010177:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001017a:	c9                   	leave  
c001017b:	c3                   	ret    

c001017c <Keyboard::Keyboard(char const*)>:
c001017c:	83 ec 0c             	sub    esp,0xc
c001017f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010183:	83 ec 08             	sub    esp,0x8
c0010186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001018a:	50                   	push   eax
c001018b:	e8 b2 e2 ff ff       	call   c000e442 <Device::Device(char const*)>
c0010190:	83 c4 10             	add    esp,0x10
c0010193:	ba 18 51 02 c0       	mov    edx,0xc0025118
c0010198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001019c:	89 10                	mov    DWORD PTR [eax],edx
c001019e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00101ac:	c6 05 44 82 02 c0 01 	mov    BYTE PTR ds:0xc0028244,0x1
c00101b3:	90                   	nop
c00101b4:	83 c4 0c             	add    esp,0xc
c00101b7:	c3                   	ret    

c00101b8 <Keyboard::~Keyboard()>:
c00101b8:	83 ec 0c             	sub    esp,0xc
c00101bb:	ba 18 51 02 c0       	mov    edx,0xc0025118
c00101c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101c4:	89 10                	mov    DWORD PTR [eax],edx
c00101c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101ca:	83 ec 0c             	sub    esp,0xc
c00101cd:	50                   	push   eax
c00101ce:	e8 39 df ff ff       	call   c000e10c <Device::~Device()>
c00101d3:	83 c4 10             	add    esp,0x10
c00101d6:	90                   	nop
c00101d7:	83 c4 0c             	add    esp,0xc
c00101da:	c3                   	ret    
c00101db:	90                   	nop

c00101dc <Keyboard::~Keyboard()>:
c00101dc:	83 ec 0c             	sub    esp,0xc
c00101df:	83 ec 0c             	sub    esp,0xc
c00101e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101e6:	e8 cd ff ff ff       	call   c00101b8 <Keyboard::~Keyboard()>
c00101eb:	83 c4 10             	add    esp,0x10
c00101ee:	83 ec 08             	sub    esp,0x8
c00101f1:	68 5c 01 00 00       	push   0x15c
c00101f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101fa:	e8 1f ca ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00101ff:	83 c4 10             	add    esp,0x10
c0010202:	83 c4 0c             	add    esp,0xc
c0010205:	c3                   	ret    

c0010206 <LogicalDisk::close(int, int, void*)>:
c0010206:	83 c8 ff             	or     eax,0xffffffff
c0010209:	c3                   	ret    

c001020a <LogicalDisk::~LogicalDisk()>:
c001020a:	83 ec 0c             	sub    esp,0xc
c001020d:	ba e8 51 02 c0       	mov    edx,0xc00251e8
c0010212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010216:	89 10                	mov    DWORD PTR [eax],edx
c0010218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001021c:	83 ec 0c             	sub    esp,0xc
c001021f:	50                   	push   eax
c0010220:	e8 e7 de ff ff       	call   c000e10c <Device::~Device()>
c0010225:	83 c4 10             	add    esp,0x10
c0010228:	90                   	nop
c0010229:	83 c4 0c             	add    esp,0xc
c001022c:	c3                   	ret    
c001022d:	90                   	nop

c001022e <LogicalDisk::~LogicalDisk()>:
c001022e:	83 ec 0c             	sub    esp,0xc
c0010231:	83 ec 0c             	sub    esp,0xc
c0010234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010238:	e8 cd ff ff ff       	call   c001020a <LogicalDisk::~LogicalDisk()>
c001023d:	83 c4 10             	add    esp,0x10
c0010240:	83 ec 08             	sub    esp,0x8
c0010243:	68 74 01 00 00       	push   0x174
c0010248:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001024c:	e8 cd c9 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010251:	83 c4 10             	add    esp,0x10
c0010254:	83 c4 0c             	add    esp,0xc
c0010257:	c3                   	ret    

c0010258 <LogicalDisk::open(int, int, void*)>:
c0010258:	83 ec 18             	sub    esp,0x18
c001025b:	68 44 51 02 c0       	push   0xc0025144
c0010260:	e8 62 47 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c0010265:	83 c8 ff             	or     eax,0xffffffff
c0010268:	83 c4 1c             	add    esp,0x1c
c001026b:	c3                   	ret    

c001026c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001026c:	53                   	push   ebx
c001026d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010275:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010279:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001027f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0010285:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001028b:	77 10                	ja     c001029d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001028d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0010293:	89 d3                	mov    ebx,edx
c0010295:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001029b:	72 05                	jb     c00102a2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001029d:	83 c8 ff             	or     eax,0xffffffff
c00102a0:	89 c2                	mov    edx,eax
c00102a2:	5b                   	pop    ebx
c00102a3:	c3                   	ret    

c00102a4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00102a4:	56                   	push   esi
c00102a5:	83 c8 ff             	or     eax,0xffffffff
c00102a8:	53                   	push   ebx
c00102a9:	89 c2                	mov    edx,eax
c00102ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00102af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00102b3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102b7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00102bd:	77 27                	ja     c00102e6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00102bf:	89 d8                	mov    eax,ebx
c00102c1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00102c7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00102cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102d2:	89 c2                	mov    edx,eax
c00102d4:	73 10                	jae    c00102e6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00102d6:	89 c8                	mov    eax,ecx
c00102d8:	89 da                	mov    edx,ebx
c00102da:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00102e0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00102e6:	5b                   	pop    ebx
c00102e7:	5e                   	pop    esi
c00102e8:	c3                   	ret    
c00102e9:	90                   	nop

c00102ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102ea:	83 ec 1c             	sub    esp,0x1c
c00102ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00102f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010301:	89 04 24             	mov    DWORD PTR [esp],eax
c0010304:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010308:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001030c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010310:	83 ec 08             	sub    esp,0x8
c0010313:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010317:	50                   	push   eax
c0010318:	e8 25 e1 ff ff       	call   c000e442 <Device::Device(char const*)>
c001031d:	83 c4 10             	add    esp,0x10
c0010320:	ba e8 51 02 c0       	mov    edx,0xc00251e8
c0010325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010329:	89 10                	mov    DWORD PTR [eax],edx
c001032b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001032f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001033a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010345:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001034f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010353:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010357:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001035b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010361:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010367:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001036b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001036e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010372:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010378:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001037e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010382:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010386:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001038c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010390:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001039a:	90                   	nop
c001039b:	83 c4 1c             	add    esp,0x1c
c001039e:	c3                   	ret    
c001039f:	90                   	nop

c00103a0 <LogicalDisk::assignDriveLetter()>:
c00103a0:	55                   	push   ebp
c00103a1:	57                   	push   edi
c00103a2:	56                   	push   esi
c00103a3:	53                   	push   ebx
c00103a4:	83 ec 14             	sub    esp,0x14
c00103a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103ab:	8b 3d 80 86 02 c0    	mov    edi,DWORD PTR ds:0xc0028680
c00103b1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00103b7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103bb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00103c1:	8b 3d 84 86 02 c0    	mov    edi,DWORD PTR ds:0xc0028684
c00103c7:	3c 01                	cmp    al,0x1
c00103c9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00103cd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00103d1:	19 c0                	sbb    eax,eax
c00103d3:	83 e0 02             	and    eax,0x2
c00103d6:	83 c0 41             	add    eax,0x41
c00103d9:	0f be e8             	movsx  ebp,al
c00103dc:	3c 43                	cmp    al,0x43
c00103de:	75 10                	jne    c00103f0 <LogicalDisk::assignDriveLetter()+0x50>
c00103e0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00103e7:	75 5d                	jne    c0010446 <LogicalDisk::assignDriveLetter()+0xa6>
c00103e9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00103ee:	75 56                	jne    c0010446 <LogicalDisk::assignDriveLetter()+0xa6>
c00103f0:	8d 75 bf             	lea    esi,[ebp-0x41]
c00103f3:	ba 01 00 00 00       	mov    edx,0x1
c00103f8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00103fc:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0010400:	d3 e2                	shl    edx,cl
c0010402:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010406:	89 d7                	mov    edi,edx
c0010408:	89 d6                	mov    esi,edx
c001040a:	c1 ff 1f             	sar    edi,0x1f
c001040d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0010411:	21 f9                	and    ecx,edi
c0010413:	09 d1                	or     ecx,edx
c0010415:	75 2f                	jne    c0010446 <LogicalDisk::assignDriveLetter()+0xa6>
c0010417:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001041b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001041f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0010425:	09 f2                	or     edx,esi
c0010427:	89 15 80 86 02 c0    	mov    DWORD PTR ds:0xc0028680,edx
c001042d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010431:	09 fa                	or     edx,edi
c0010433:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010437:	89 15 84 86 02 c0    	mov    DWORD PTR ds:0xc0028684,edx
c001043d:	89 1c bd a0 86 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7960],ebx
c0010444:	eb 08                	jmp    c001044e <LogicalDisk::assignDriveLetter()+0xae>
c0010446:	45                   	inc    ebp
c0010447:	40                   	inc    eax
c0010448:	3c 5b                	cmp    al,0x5b
c001044a:	75 90                	jne    c00103dc <LogicalDisk::assignDriveLetter()+0x3c>
c001044c:	31 c0                	xor    eax,eax
c001044e:	83 c4 14             	add    esp,0x14
c0010451:	5b                   	pop    ebx
c0010452:	5e                   	pop    esi
c0010453:	5f                   	pop    edi
c0010454:	5d                   	pop    ebp
c0010455:	c3                   	ret    

c0010456 <LogicalDisk::mount()>:
c0010456:	56                   	push   esi
c0010457:	53                   	push   ebx
c0010458:	83 ec 1c             	sub    esp,0x1c
c001045b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001045f:	8b 1d 14 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028214
c0010465:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001046c:	50                   	push   eax
c001046d:	68 68 51 02 c0       	push   0xc0025168
c0010472:	e8 88 c8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0010477:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010481:	83 c4 10             	add    esp,0x10
c0010484:	85 db                	test   ebx,ebx
c0010486:	74 4e                	je     c00104d6 <LogicalDisk::mount()+0x80>
c0010488:	83 ec 0c             	sub    esp,0xc
c001048b:	68 89 51 02 c0       	push   0xc0025189
c0010490:	e8 6a c8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0010495:	83 c4 0c             	add    esp,0xc
c0010498:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001049f:	8b 13                	mov    edx,DWORD PTR [ebx]
c00104a1:	83 e8 41             	sub    eax,0x41
c00104a4:	50                   	push   eax
c00104a5:	56                   	push   esi
c00104a6:	53                   	push   ebx
c00104a7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00104aa:	83 c4 10             	add    esp,0x10
c00104ad:	84 c0                	test   al,al
c00104af:	74 20                	je     c00104d1 <LogicalDisk::mount()+0x7b>
c00104b1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00104b5:	83 ec 0c             	sub    esp,0xc
c00104b8:	68 a5 51 02 c0       	push   0xc00251a5
c00104bd:	e8 3d c8 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00104c2:	83 c4 10             	add    esp,0x10
c00104c5:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00104cb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00104cf:	eb 07                	jmp    c00104d8 <LogicalDisk::mount()+0x82>
c00104d1:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00104d4:	eb ae                	jmp    c0010484 <LogicalDisk::mount()+0x2e>
c00104d6:	31 c0                	xor    eax,eax
c00104d8:	83 c4 14             	add    esp,0x14
c00104db:	5b                   	pop    ebx
c00104dc:	5e                   	pop    esi
c00104dd:	c3                   	ret    

c00104de <LogicalDisk::unmount()>:
c00104de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104e2:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00104ec:	c3                   	ret    
c00104ed:	90                   	nop

c00104ee <LogicalDisk::eject()>:
c00104ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104f2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00104f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00104fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00104fe:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010501:	90                   	nop

c0010502 <LogicalDisk::unassignDriveLetter()>:
c0010502:	57                   	push   edi
c0010503:	56                   	push   esi
c0010504:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010508:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001050f:	84 c9                	test   cl,cl
c0010511:	75 0f                	jne    c0010522 <LogicalDisk::unassignDriveLetter()+0x20>
c0010513:	c7 44 24 0c be 51 02 c0 	mov    DWORD PTR [esp+0xc],0xc00251be
c001051b:	5e                   	pop    esi
c001051c:	5f                   	pop    edi
c001051d:	e9 a5 44 00 00       	jmp    c00149c7 <Krnl::panic(char const*)>
c0010522:	83 e9 41             	sub    ecx,0x41
c0010525:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001052c:	b8 01 00 00 00       	mov    eax,0x1
c0010531:	c7 04 8d a0 86 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7960],0x0
c001053c:	d3 e0                	shl    eax,cl
c001053e:	89 c7                	mov    edi,eax
c0010540:	f7 d0                	not    eax
c0010542:	c1 ff 1f             	sar    edi,0x1f
c0010545:	21 05 80 86 02 c0    	and    DWORD PTR ds:0xc0028680,eax
c001054b:	89 fe                	mov    esi,edi
c001054d:	f7 d6                	not    esi
c001054f:	21 35 84 86 02 c0    	and    DWORD PTR ds:0xc0028684,esi
c0010555:	5e                   	pop    esi
c0010556:	5f                   	pop    edi
c0010557:	c3                   	ret    

c0010558 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010558:	57                   	push   edi
c0010559:	56                   	push   esi
c001055a:	53                   	push   ebx
c001055b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001055f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010563:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010567:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001056b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010571:	77 41                	ja     c00105b4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0010573:	99                   	cdq    
c0010574:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001057a:	01 c8                	add    eax,ecx
c001057c:	11 da                	adc    edx,ebx
c001057e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010584:	19 d7                	sbb    edi,edx
c0010586:	72 33                	jb     c00105bb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010588:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001058e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010594:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010598:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001059c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00105a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00105a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105ac:	5b                   	pop    ebx
c00105ad:	5e                   	pop    esi
c00105ae:	5f                   	pop    edi
c00105af:	e9 e2 0a 00 00       	jmp    c0011096 <VCache::read(unsigned long long, int, void*)>
c00105b4:	b8 05 00 00 00       	mov    eax,0x5
c00105b9:	eb 05                	jmp    c00105c0 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00105bb:	b8 07 00 00 00       	mov    eax,0x7
c00105c0:	5b                   	pop    ebx
c00105c1:	5e                   	pop    esi
c00105c2:	5f                   	pop    edi
c00105c3:	c3                   	ret    

c00105c4 <LogicalDisk::write(unsigned long long, int, void*)>:
c00105c4:	57                   	push   edi
c00105c5:	56                   	push   esi
c00105c6:	53                   	push   ebx
c00105c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00105cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105cf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00105d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105d7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00105dd:	77 41                	ja     c0010620 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00105df:	99                   	cdq    
c00105e0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00105e6:	01 c8                	add    eax,ecx
c00105e8:	11 da                	adc    edx,ebx
c00105ea:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00105f0:	19 d7                	sbb    edi,edx
c00105f2:	72 33                	jb     c0010627 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00105f4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00105fa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010600:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010604:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010608:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001060e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010614:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010618:	5b                   	pop    ebx
c0010619:	5e                   	pop    esi
c001061a:	5f                   	pop    edi
c001061b:	e9 7c 09 00 00       	jmp    c0010f9c <VCache::write(unsigned long long, int, void*)>
c0010620:	b8 05 00 00 00       	mov    eax,0x5
c0010625:	eb 05                	jmp    c001062c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010627:	b8 07 00 00 00       	mov    eax,0x7
c001062c:	5b                   	pop    ebx
c001062d:	5e                   	pop    esi
c001062e:	5f                   	pop    edi
c001062f:	c3                   	ret    

c0010630 <Mouse::Mouse(char const*)>:
c0010630:	83 ec 0c             	sub    esp,0xc
c0010633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010637:	83 ec 08             	sub    esp,0x8
c001063a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001063e:	50                   	push   eax
c001063f:	e8 fe dd ff ff       	call   c000e442 <Device::Device(char const*)>
c0010644:	83 c4 10             	add    esp,0x10
c0010647:	ba 14 52 02 c0       	mov    edx,0xc0025214
c001064c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010650:	89 10                	mov    DWORD PTR [eax],edx
c0010652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010656:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010660:	90                   	nop
c0010661:	83 c4 0c             	add    esp,0xc
c0010664:	c3                   	ret    
c0010665:	90                   	nop
c0010666:	66 90                	xchg   ax,ax

c0010668 <Mouse::~Mouse()>:
c0010668:	83 ec 0c             	sub    esp,0xc
c001066b:	ba 14 52 02 c0       	mov    edx,0xc0025214
c0010670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010674:	89 10                	mov    DWORD PTR [eax],edx
c0010676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001067a:	83 ec 0c             	sub    esp,0xc
c001067d:	50                   	push   eax
c001067e:	e8 89 da ff ff       	call   c000e10c <Device::~Device()>
c0010683:	83 c4 10             	add    esp,0x10
c0010686:	90                   	nop
c0010687:	83 c4 0c             	add    esp,0xc
c001068a:	c3                   	ret    
c001068b:	90                   	nop

c001068c <Mouse::~Mouse()>:
c001068c:	83 ec 0c             	sub    esp,0xc
c001068f:	83 ec 0c             	sub    esp,0xc
c0010692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010696:	e8 cd ff ff ff       	call   c0010668 <Mouse::~Mouse()>
c001069b:	83 c4 10             	add    esp,0x10
c001069e:	83 ec 08             	sub    esp,0x8
c00106a1:	68 58 01 00 00       	push   0x158
c00106a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106aa:	e8 6f c5 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00106af:	83 c4 10             	add    esp,0x10
c00106b2:	83 c4 0c             	add    esp,0xc
c00106b5:	c3                   	ret    

c00106b6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00106b6:	55                   	push   ebp
c00106b7:	57                   	push   edi
c00106b8:	56                   	push   esi
c00106b9:	53                   	push   ebx
c00106ba:	81 ec 28 01 00 00    	sub    esp,0x128
c00106c0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00106c7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00106ce:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00106d5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00106dc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00106e0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00106e4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00106eb:	e8 4e de ff ff       	call   c000e53e <Device::getName()>
c00106f0:	5a                   	pop    edx
c00106f1:	59                   	pop    ecx
c00106f2:	50                   	push   eax
c00106f3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00106f7:	55                   	push   ebp
c00106f8:	e8 43 00 ff ff       	call   c0000740 <strcpy>
c00106fd:	5b                   	pop    ebx
c00106fe:	58                   	pop    eax
c00106ff:	68 38 52 02 c0       	push   0xc0025238
c0010704:	55                   	push   ebp
c0010705:	e8 76 01 ff ff       	call   c0000880 <strcat>
c001070a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010711:	e8 f9 92 ff ff       	call   c0009a0f <malloc>
c0010716:	83 c4 0c             	add    esp,0xc
c0010719:	89 c3                	mov    ebx,eax
c001071b:	57                   	push   edi
c001071c:	56                   	push   esi
c001071d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010721:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010725:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001072c:	55                   	push   ebp
c001072d:	50                   	push   eax
c001072e:	e8 b7 fb ff ff       	call   c00102ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010733:	83 c4 14             	add    esp,0x14
c0010736:	53                   	push   ebx
c0010737:	e8 64 fc ff ff       	call   c00103a0 <LogicalDisk::assignDriveLetter()>
c001073c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001073f:	e8 12 fd ff ff       	call   c0010456 <LogicalDisk::mount()>
c0010744:	58                   	pop    eax
c0010745:	5a                   	pop    edx
c0010746:	53                   	push   ebx
c0010747:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001074e:	e8 eb da ff ff       	call   c000e23e <Device::addChild(Device*)>
c0010753:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010759:	5b                   	pop    ebx
c001075a:	5e                   	pop    esi
c001075b:	5f                   	pop    edi
c001075c:	5d                   	pop    ebp
c001075d:	c3                   	ret    

c001075e <createPartitionsForDisk(PhysicalDisk*)>:
c001075e:	55                   	push   ebp
c001075f:	57                   	push   edi
c0010760:	56                   	push   esi
c0010761:	53                   	push   ebx
c0010762:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010768:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001076f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010775:	3d 00 02 00 00       	cmp    eax,0x200
c001077a:	74 27                	je     c00107a3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001077c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010782:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010788:	83 ec 10             	sub    esp,0x10
c001078b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001078f:	99                   	cdq    
c0010790:	c1 e6 0a             	shl    esi,0xa
c0010793:	52                   	push   edx
c0010794:	89 fd                	mov    ebp,edi
c0010796:	50                   	push   eax
c0010797:	55                   	push   ebp
c0010798:	56                   	push   esi
c0010799:	e8 56 20 01 00       	call   c00227f4 <__udivdi3>
c001079e:	e9 b1 00 00 00       	jmp    c0010854 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00107a3:	83 ec 0c             	sub    esp,0xc
c00107a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107a8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00107ac:	56                   	push   esi
c00107ad:	6a 01                	push   0x1
c00107af:	6a 00                	push   0x0
c00107b1:	6a 00                	push   0x0
c00107b3:	53                   	push   ebx
c00107b4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00107b7:	83 c4 20             	add    esp,0x20
c00107ba:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00107c2:	75 0a                	jne    c00107ce <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00107c4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00107cc:	74 2c                	je     c00107fa <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00107ce:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00107d4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00107da:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00107e0:	83 ec 10             	sub    esp,0x10
c00107e3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00107e7:	89 f7                	mov    edi,esi
c00107e9:	c1 e0 0a             	shl    eax,0xa
c00107ec:	c1 ff 1f             	sar    edi,0x1f
c00107ef:	57                   	push   edi
c00107f0:	56                   	push   esi
c00107f1:	52                   	push   edx
c00107f2:	50                   	push   eax
c00107f3:	e8 fc 1f 01 00       	call   c00227f4 <__udivdi3>
c00107f8:	eb 5a                	jmp    c0010854 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00107fa:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010801:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010808:	83 e1 7f             	and    ecx,0x7f
c001080b:	83 e0 7f             	and    eax,0x7f
c001080e:	01 c1                	add    ecx,eax
c0010810:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010817:	83 e0 7f             	and    eax,0x7f
c001081a:	01 c1                	add    ecx,eax
c001081c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010823:	83 e0 7f             	and    eax,0x7f
c0010826:	00 c1                	add    cl,al
c0010828:	74 41                	je     c001086b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001082a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010830:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010836:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001083c:	83 ec 10             	sub    esp,0x10
c001083f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010843:	89 f7                	mov    edi,esi
c0010845:	c1 e0 0a             	shl    eax,0xa
c0010848:	c1 ff 1f             	sar    edi,0x1f
c001084b:	57                   	push   edi
c001084c:	56                   	push   esi
c001084d:	52                   	push   edx
c001084e:	50                   	push   eax
c001084f:	e8 a0 1f 01 00       	call   c00227f4 <__udivdi3>
c0010854:	83 c4 14             	add    esp,0x14
c0010857:	52                   	push   edx
c0010858:	50                   	push   eax
c0010859:	6a 00                	push   0x0
c001085b:	6a 00                	push   0x0
c001085d:	53                   	push   ebx
c001085e:	e8 53 fe ff ff       	call   c00106b6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010863:	83 c4 20             	add    esp,0x20
c0010866:	e9 79 01 00 00       	jmp    c00109e4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001086b:	89 f0                	mov    eax,esi
c001086d:	31 f6                	xor    esi,esi
c001086f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010876:	75 02                	jne    c001087a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010878:	89 f1                	mov    ecx,esi
c001087a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010881:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010888:	c1 e2 08             	shl    edx,0x8
c001088b:	c1 e7 10             	shl    edi,0x10
c001088e:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010896:	09 fa                	or     edx,edi
c0010898:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00108a0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00108a7:	83 c0 10             	add    eax,0x10
c00108aa:	09 fa                	or     edx,edi
c00108ac:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00108b3:	c1 e7 18             	shl    edi,0x18
c00108b6:	09 fa                	or     edx,edi
c00108b8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00108bf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00108c3:	c1 e7 10             	shl    edi,0x10
c00108c6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00108cd:	c1 e2 08             	shl    edx,0x8
c00108d0:	09 fa                	or     edx,edi
c00108d2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00108d9:	09 fa                	or     edx,edi
c00108db:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00108e2:	c1 e7 18             	shl    edi,0x18
c00108e5:	09 fa                	or     edx,edi
c00108e7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00108eb:	46                   	inc    esi
c00108ec:	83 fe 04             	cmp    esi,0x4
c00108ef:	0f 85 7a ff ff ff    	jne    c001086f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00108f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f9:	83 f0 01             	xor    eax,0x1
c00108fc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010900:	75 57                	jne    c0010959 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010902:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010906:	83 f0 01             	xor    eax,0x1
c0010909:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001090d:	75 4a                	jne    c0010959 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001090f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010913:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001091b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010923:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010929:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001092f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010935:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010939:	89 f7                	mov    edi,esi
c001093b:	c1 e0 0a             	shl    eax,0xa
c001093e:	c1 ff 1f             	sar    edi,0x1f
c0010941:	57                   	push   edi
c0010942:	56                   	push   esi
c0010943:	52                   	push   edx
c0010944:	50                   	push   eax
c0010945:	e8 aa 1e 01 00       	call   c00227f4 <__udivdi3>
c001094a:	83 c4 10             	add    esp,0x10
c001094d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010951:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010955:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010959:	84 c9                	test   cl,cl
c001095b:	74 53                	je     c00109b0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001095d:	0f b6 c9             	movzx  ecx,cl
c0010960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010964:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010968:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001096c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010970:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010974:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010978:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001097c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010980:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010984:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001098c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010990:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010994:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010998:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001099c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00109a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00109a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00109a8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00109ac:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00109b0:	31 ed                	xor    ebp,ebp
c00109b2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00109b6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00109ba:	89 f8                	mov    eax,edi
c00109bc:	09 f0                	or     eax,esi
c00109be:	74 1e                	je     c00109de <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00109c0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00109c4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00109c8:	89 d1                	mov    ecx,edx
c00109ca:	09 c1                	or     ecx,eax
c00109cc:	74 10                	je     c00109de <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00109ce:	83 ec 0c             	sub    esp,0xc
c00109d1:	57                   	push   edi
c00109d2:	56                   	push   esi
c00109d3:	52                   	push   edx
c00109d4:	50                   	push   eax
c00109d5:	53                   	push   ebx
c00109d6:	e8 db fc ff ff       	call   c00106b6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00109db:	83 c4 20             	add    esp,0x20
c00109de:	45                   	inc    ebp
c00109df:	83 fd 04             	cmp    ebp,0x4
c00109e2:	75 ce                	jne    c00109b2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00109e4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00109ea:	5b                   	pop    ebx
c00109eb:	5e                   	pop    esi
c00109ec:	5f                   	pop    edi
c00109ed:	5d                   	pop    ebp
c00109ee:	c3                   	ret    
c00109ef:	90                   	nop

c00109f0 <Serial::Serial(char const*)>:
c00109f0:	83 ec 0c             	sub    esp,0xc
c00109f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f7:	83 ec 08             	sub    esp,0x8
c00109fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109fe:	50                   	push   eax
c00109ff:	e8 3e da ff ff       	call   c000e442 <Device::Device(char const*)>
c0010a04:	83 c4 10             	add    esp,0x10
c0010a07:	ba 4c 52 02 c0       	mov    edx,0xc002524c
c0010a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a10:	89 10                	mov    DWORD PTR [eax],edx
c0010a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a16:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010a20:	90                   	nop
c0010a21:	83 c4 0c             	add    esp,0xc
c0010a24:	c3                   	ret    
c0010a25:	90                   	nop
c0010a26:	66 90                	xchg   ax,ax

c0010a28 <Serial::~Serial()>:
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	ba 4c 52 02 c0       	mov    edx,0xc002524c
c0010a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a34:	89 10                	mov    DWORD PTR [eax],edx
c0010a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a3a:	83 ec 0c             	sub    esp,0xc
c0010a3d:	50                   	push   eax
c0010a3e:	e8 c9 d6 ff ff       	call   c000e10c <Device::~Device()>
c0010a43:	83 c4 10             	add    esp,0x10
c0010a46:	90                   	nop
c0010a47:	83 c4 0c             	add    esp,0xc
c0010a4a:	c3                   	ret    
c0010a4b:	90                   	nop

c0010a4c <Serial::~Serial()>:
c0010a4c:	83 ec 0c             	sub    esp,0xc
c0010a4f:	83 ec 0c             	sub    esp,0xc
c0010a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a56:	e8 cd ff ff ff       	call   c0010a28 <Serial::~Serial()>
c0010a5b:	83 c4 10             	add    esp,0x10
c0010a5e:	83 ec 08             	sub    esp,0x8
c0010a61:	68 58 01 00 00       	push   0x158
c0010a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a6a:	e8 af c1 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010a6f:	83 c4 10             	add    esp,0x10
c0010a72:	83 c4 0c             	add    esp,0xc
c0010a75:	c3                   	ret    
c0010a76:	66 90                	xchg   ax,ax

c0010a78 <Timer::Timer(char const*)>:
c0010a78:	83 ec 0c             	sub    esp,0xc
c0010a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7f:	83 ec 08             	sub    esp,0x8
c0010a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a86:	50                   	push   eax
c0010a87:	e8 b6 d9 ff ff       	call   c000e442 <Device::Device(char const*)>
c0010a8c:	83 c4 10             	add    esp,0x10
c0010a8f:	ba 90 52 02 c0       	mov    edx,0xc0025290
c0010a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a98:	89 10                	mov    DWORD PTR [eax],edx
c0010a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010aa8:	90                   	nop
c0010aa9:	83 c4 0c             	add    esp,0xc
c0010aac:	c3                   	ret    
c0010aad:	90                   	nop
c0010aae:	66 90                	xchg   ax,ax

c0010ab0 <Timer::~Timer()>:
c0010ab0:	83 ec 0c             	sub    esp,0xc
c0010ab3:	ba 90 52 02 c0       	mov    edx,0xc0025290
c0010ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010abc:	89 10                	mov    DWORD PTR [eax],edx
c0010abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac2:	83 ec 0c             	sub    esp,0xc
c0010ac5:	50                   	push   eax
c0010ac6:	e8 41 d6 ff ff       	call   c000e10c <Device::~Device()>
c0010acb:	83 c4 10             	add    esp,0x10
c0010ace:	90                   	nop
c0010acf:	83 c4 0c             	add    esp,0xc
c0010ad2:	c3                   	ret    
c0010ad3:	90                   	nop

c0010ad4 <Timer::~Timer()>:
c0010ad4:	83 ec 0c             	sub    esp,0xc
c0010ad7:	83 ec 0c             	sub    esp,0xc
c0010ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ade:	e8 cd ff ff ff       	call   c0010ab0 <Timer::~Timer()>
c0010ae3:	83 c4 10             	add    esp,0x10
c0010ae6:	83 ec 08             	sub    esp,0x8
c0010ae9:	68 5c 01 00 00       	push   0x15c
c0010aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af2:	e8 27 c1 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010af7:	83 c4 10             	add    esp,0x10
c0010afa:	83 c4 0c             	add    esp,0xc
c0010afd:	c3                   	ret    

c0010afe <Timer::read()>:
c0010afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b02:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010b08:	c3                   	ret    

c0010b09 <timerHandler(unsigned int)>:
c0010b09:	56                   	push   esi
c0010b0a:	53                   	push   ebx
c0010b0b:	51                   	push   ecx
c0010b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b10:	01 05 0c 87 02 c0    	add    DWORD PTR ds:0xc002870c,eax
c0010b16:	80 3d ed 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280ed,0x0
c0010b1d:	0f 84 49 01 00 00    	je     c0010c6c <timerHandler(unsigned int)+0x163>
c0010b23:	fa                   	cli    
c0010b24:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0010b2a:	83 ec 0c             	sub    esp,0xc
c0010b2d:	ff 05 04 96 02 c0    	inc    DWORD PTR ds:0xc0029604
c0010b33:	68 18 96 02 c0       	push   0xc0029618
c0010b38:	e8 87 22 01 00       	call   c0022dc4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010b3d:	83 c4 10             	add    esp,0x10
c0010b40:	84 c0                	test   al,al
c0010b42:	0f 85 a0 00 00 00    	jne    c0010be8 <timerHandler(unsigned int)+0xdf>
c0010b48:	83 ec 0c             	sub    esp,0xc
c0010b4b:	68 18 96 02 c0       	push   0xc0029618
c0010b50:	e8 8b 22 01 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b55:	83 c4 10             	add    esp,0x10
c0010b58:	89 c6                	mov    esi,eax
c0010b5a:	66 90                	xchg   ax,ax
c0010b5c:	83 ec 0c             	sub    esp,0xc
c0010b5f:	68 18 96 02 c0       	push   0xc0029618
c0010b64:	e8 77 22 01 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b69:	c7 04 24 18 96 02 c0 	mov    DWORD PTR [esp],0xc0029618
c0010b70:	89 c3                	mov    ebx,eax
c0010b72:	e8 71 22 01 00       	call   c0022de8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010b77:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	3b 05 0c 87 02 c0    	cmp    eax,DWORD PTR ds:0xc002870c
c0010b83:	77 23                	ja     c0010ba8 <timerHandler(unsigned int)+0x9f>
c0010b85:	83 ec 0c             	sub    esp,0xc
c0010b88:	53                   	push   ebx
c0010b89:	e8 5a 80 00 00       	call   c0018be8 <unblockTask(ThreadControlBlock*)>
c0010b8e:	83 c4 10             	add    esp,0x10
c0010b91:	39 de                	cmp    esi,ebx
c0010b93:	75 27                	jne    c0010bbc <timerHandler(unsigned int)+0xb3>
c0010b95:	83 ec 0c             	sub    esp,0xc
c0010b98:	68 18 96 02 c0       	push   0xc0029618
c0010b9d:	e8 3e 22 01 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010ba2:	89 c6                	mov    esi,eax
c0010ba4:	eb 12                	jmp    c0010bb8 <timerHandler(unsigned int)+0xaf>
c0010ba6:	66 90                	xchg   ax,ax
c0010ba8:	52                   	push   edx
c0010ba9:	52                   	push   edx
c0010baa:	53                   	push   ebx
c0010bab:	68 18 96 02 c0       	push   0xc0029618
c0010bb0:	e8 eb 22 01 00       	call   c0022ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0010bb8:	83 c4 10             	add    esp,0x10
c0010bbb:	90                   	nop
c0010bbc:	83 ec 0c             	sub    esp,0xc
c0010bbf:	68 18 96 02 c0       	push   0xc0029618
c0010bc4:	e8 fb 21 01 00       	call   c0022dc4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010bc9:	83 c4 10             	add    esp,0x10
c0010bcc:	84 c0                	test   al,al
c0010bce:	75 18                	jne    c0010be8 <timerHandler(unsigned int)+0xdf>
c0010bd0:	83 ec 0c             	sub    esp,0xc
c0010bd3:	68 18 96 02 c0       	push   0xc0029618
c0010bd8:	e8 03 22 01 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010bdd:	83 c4 10             	add    esp,0x10
c0010be0:	39 f0                	cmp    eax,esi
c0010be2:	0f 85 74 ff ff ff    	jne    c0010b5c <timerHandler(unsigned int)+0x53>
c0010be8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bed:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010bf1:	74 41                	je     c0010c34 <timerHandler(unsigned int)+0x12b>
c0010bf3:	80 3d ec 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280ec,0x0
c0010bfa:	74 38                	je     c0010c34 <timerHandler(unsigned int)+0x12b>
c0010bfc:	fa                   	cli    
c0010bfd:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0010c03:	a1 0c 87 02 c0       	mov    eax,ds:0xc002870c
c0010c08:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c0e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010c11:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010c17:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010c1a:	72 08                	jb     c0010c24 <timerHandler(unsigned int)+0x11b>
c0010c1c:	e8 0b 7b 00 00       	call   c001872c <schedule()>
c0010c21:	8d 76 00             	lea    esi,[esi+0x0]
c0010c24:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0010c29:	48                   	dec    eax
c0010c2a:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0010c2f:	75 03                	jne    c0010c34 <timerHandler(unsigned int)+0x12b>
c0010c31:	fb                   	sti    
c0010c32:	66 90                	xchg   ax,ax
c0010c34:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c0010c39:	48                   	dec    eax
c0010c3a:	a3 04 96 02 c0       	mov    ds:0xc0029604,eax
c0010c3f:	75 1b                	jne    c0010c5c <timerHandler(unsigned int)+0x153>
c0010c41:	83 3d 00 96 02 c0 00 	cmp    DWORD PTR ds:0xc0029600,0x0
c0010c48:	74 12                	je     c0010c5c <timerHandler(unsigned int)+0x153>
c0010c4a:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c0010c54:	e8 d3 7a 00 00       	call   c001872c <schedule()>
c0010c59:	8d 76 00             	lea    esi,[esi+0x0]
c0010c5c:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0010c61:	48                   	dec    eax
c0010c62:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0010c67:	75 03                	jne    c0010c6c <timerHandler(unsigned int)+0x163>
c0010c69:	fb                   	sti    
c0010c6a:	66 90                	xchg   ax,ax
c0010c6c:	58                   	pop    eax
c0010c6d:	5b                   	pop    ebx
c0010c6e:	5e                   	pop    esi
c0010c6f:	c3                   	ret    

c0010c70 <setupTimer(int)>:
c0010c70:	57                   	push   edi
c0010c71:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0010c76:	56                   	push   esi
c0010c77:	53                   	push   ebx
c0010c78:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c82:	83 ec 0c             	sub    esp,0xc
c0010c85:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010c8b:	e8 ae d8 ff ff       	call   c000e53e <Device::getName()>
c0010c90:	83 c4 10             	add    esp,0x10
c0010c93:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c96:	0f 85 94 00 00 00    	jne    c0010d30 <setupTimer(int)+0xc0>
c0010c9c:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0010ca1:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010ca8:	0f 84 82 00 00 00    	je     c0010d30 <setupTimer(int)+0xc0>
c0010cae:	83 ec 0c             	sub    esp,0xc
c0010cb1:	68 5c 01 00 00       	push   0x15c
c0010cb6:	e8 54 8d ff ff       	call   c0009a0f <malloc>
c0010cbb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cbe:	89 c3                	mov    ebx,eax
c0010cc0:	e8 07 17 01 00       	call   c00223cc <PIT::PIT()>
c0010cc5:	59                   	pop    ecx
c0010cc6:	5f                   	pop    edi
c0010cc7:	53                   	push   ebx
c0010cc8:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0010cce:	e8 6b d5 ff ff       	call   c000e23e <Device::addChild(Device*)>
c0010cd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cd5:	6a 00                	push   0x0
c0010cd7:	6a 00                	push   0x0
c0010cd9:	56                   	push   esi
c0010cda:	53                   	push   ebx
c0010cdb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010cde:	83 c4 14             	add    esp,0x14
c0010ce1:	68 60 01 00 00       	push   0x160
c0010ce6:	e8 24 8d ff ff       	call   c0009a0f <malloc>
c0010ceb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cee:	89 c7                	mov    edi,eax
c0010cf0:	e8 8b 15 01 00       	call   c0022280 <APICTimer::APICTimer()>
c0010cf5:	6a 00                	push   0x0
c0010cf7:	6a 00                	push   0x0
c0010cf9:	56                   	push   esi
c0010cfa:	57                   	push   edi
c0010cfb:	e8 80 14 01 00       	call   c0022180 <APICTimer::open(int, int, void*)>
c0010d00:	83 c4 20             	add    esp,0x20
c0010d03:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d05:	6a 00                	push   0x0
c0010d07:	6a 00                	push   0x0
c0010d09:	6a 00                	push   0x0
c0010d0b:	53                   	push   ebx
c0010d0c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d0f:	58                   	pop    eax
c0010d10:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0010d15:	5a                   	pop    edx
c0010d16:	57                   	push   edi
c0010d17:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010d1d:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010d23:	e8 16 d5 ff ff       	call   c000e23e <Device::addChild(Device*)>
c0010d28:	83 c4 10             	add    esp,0x10
c0010d2b:	eb 37                	jmp    c0010d64 <setupTimer(int)+0xf4>
c0010d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	68 5c 01 00 00       	push   0x15c
c0010d38:	e8 d2 8c ff ff       	call   c0009a0f <malloc>
c0010d3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d40:	89 c3                	mov    ebx,eax
c0010d42:	e8 85 16 01 00       	call   c00223cc <PIT::PIT()>
c0010d47:	58                   	pop    eax
c0010d48:	5a                   	pop    edx
c0010d49:	53                   	push   ebx
c0010d4a:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0010d50:	e8 e9 d4 ff ff       	call   c000e23e <Device::addChild(Device*)>
c0010d55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d57:	6a 00                	push   0x0
c0010d59:	6a 00                	push   0x0
c0010d5b:	56                   	push   esi
c0010d5c:	53                   	push   ebx
c0010d5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d60:	83 c4 20             	add    esp,0x20
c0010d63:	90                   	nop
c0010d64:	89 d8                	mov    eax,ebx
c0010d66:	5b                   	pop    ebx
c0010d67:	5e                   	pop    esi
c0010d68:	5f                   	pop    edi
c0010d69:	c3                   	ret    
c0010d6a:	66 90                	xchg   ax,ax

c0010d6c <VCache::VCache(PhysicalDisk*)>:
c0010d6c:	53                   	push   ebx
c0010d6d:	83 ec 18             	sub    esp,0x18
c0010d70:	ba c0 52 02 c0       	mov    edx,0xc00252c0
c0010d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d79:	89 10                	mov    DWORD PTR [eax],edx
c0010d7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d7f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010d86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d8a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d95:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010d9c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010da7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010dae:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010db5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010db9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dc4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010dc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dcc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010dd3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010dda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dde:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010de6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dee:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010df2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010df6:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010dfd:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010e05:	83 ec 0c             	sub    esp,0xc
c0010e08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e0c:	e8 fe 8b ff ff       	call   c0009a0f <malloc>
c0010e11:	83 c4 10             	add    esp,0x10
c0010e14:	89 c3                	mov    ebx,eax
c0010e16:	83 ec 0c             	sub    esp,0xc
c0010e19:	53                   	push   ebx
c0010e1a:	e8 dd 76 00 00       	call   c00184fc <Mutex::Mutex()>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e26:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010e29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e31:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e38:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010e3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e43:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010e49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e4d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e54:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010e5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010e60:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010e64:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010e67:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010e6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e6e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010e72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e76:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010e7c:	05 00 01 00 00       	add    eax,0x100
c0010e81:	c1 e0 04             	shl    eax,0x4
c0010e84:	83 ec 0c             	sub    esp,0xc
c0010e87:	50                   	push   eax
c0010e88:	e8 82 8b ff ff       	call   c0009a0f <malloc>
c0010e8d:	83 c4 10             	add    esp,0x10
c0010e90:	89 c2                	mov    edx,eax
c0010e92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e96:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e9d:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ea8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010eac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010eb0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010eb6:	c1 e0 06             	shl    eax,0x6
c0010eb9:	83 ec 0c             	sub    esp,0xc
c0010ebc:	50                   	push   eax
c0010ebd:	e8 4d 8b ff ff       	call   c0009a0f <malloc>
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	89 c2                	mov    edx,eax
c0010ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ecb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010ece:	90                   	nop
c0010ecf:	83 c4 18             	add    esp,0x18
c0010ed2:	5b                   	pop    ebx
c0010ed3:	c3                   	ret    

c0010ed4 <VCache::invalidateReadBuffer()>:
c0010ed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ed8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010ede:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010ee2:	c3                   	ret    
c0010ee3:	90                   	nop

c0010ee4 <VCache::writeWriteBuffer()>:
c0010ee4:	53                   	push   ebx
c0010ee5:	83 ec 14             	sub    esp,0x14
c0010ee8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010eec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010eef:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ef1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010ef4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010ef7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010efa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010efd:	50                   	push   eax
c0010efe:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010f01:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010f08:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010f0f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010f13:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010f1a:	83 c4 28             	add    esp,0x28
c0010f1d:	5b                   	pop    ebx
c0010f1e:	c3                   	ret    
c0010f1f:	90                   	nop

c0010f20 <VCache::~VCache()>:
c0010f20:	83 ec 0c             	sub    esp,0xc
c0010f23:	ba c0 52 02 c0       	mov    edx,0xc00252c0
c0010f28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2c:	89 10                	mov    DWORD PTR [eax],edx
c0010f2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f32:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010f35:	84 c0                	test   al,al
c0010f37:	74 0f                	je     c0010f48 <VCache::~VCache()+0x28>
c0010f39:	83 ec 0c             	sub    esp,0xc
c0010f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f40:	e8 9f ff ff ff       	call   c0010ee4 <VCache::writeWriteBuffer()>
c0010f45:	83 c4 10             	add    esp,0x10
c0010f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010f4f:	83 ec 0c             	sub    esp,0xc
c0010f52:	50                   	push   eax
c0010f53:	e8 c7 8a ff ff       	call   c0009a1f <free>
c0010f58:	83 c4 10             	add    esp,0x10
c0010f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010f62:	83 ec 0c             	sub    esp,0xc
c0010f65:	50                   	push   eax
c0010f66:	e8 b4 8a ff ff       	call   c0009a1f <free>
c0010f6b:	83 c4 10             	add    esp,0x10
c0010f6e:	90                   	nop
c0010f6f:	83 c4 0c             	add    esp,0xc
c0010f72:	c3                   	ret    
c0010f73:	90                   	nop

c0010f74 <VCache::~VCache()>:
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	83 ec 0c             	sub    esp,0xc
c0010f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f7e:	e8 9d ff ff ff       	call   c0010f20 <VCache::~VCache()>
c0010f83:	83 c4 10             	add    esp,0x10
c0010f86:	83 ec 08             	sub    esp,0x8
c0010f89:	6a 44                	push   0x44
c0010f8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f8f:	e8 8a bc ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0010f94:	83 c4 10             	add    esp,0x10
c0010f97:	83 c4 0c             	add    esp,0xc
c0010f9a:	c3                   	ret    
c0010f9b:	90                   	nop

c0010f9c <VCache::write(unsigned long long, int, void*)>:
c0010f9c:	55                   	push   ebp
c0010f9d:	31 c0                	xor    eax,eax
c0010f9f:	57                   	push   edi
c0010fa0:	56                   	push   esi
c0010fa1:	53                   	push   ebx
c0010fa2:	83 ec 0c             	sub    esp,0xc
c0010fa5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fa9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fad:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fb4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010fb8:	7d 1a                	jge    c0010fd4 <VCache::write(unsigned long long, int, void*)+0x38>
c0010fba:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010fbd:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010fc3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010fc7:	0f af c8             	imul   ecx,eax
c0010fca:	01 ca                	add    edx,ecx
c0010fcc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010fce:	40                   	inc    eax
c0010fcf:	eb e3                	jmp    c0010fb4 <VCache::write(unsigned long long, int, void*)+0x18>
c0010fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010fd8:	74 0a                	je     c0010fe4 <VCache::write(unsigned long long, int, void*)+0x48>
c0010fda:	53                   	push   ebx
c0010fdb:	e8 f4 fe ff ff       	call   c0010ed4 <VCache::invalidateReadBuffer()>
c0010fe0:	58                   	pop    eax
c0010fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fe4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010fe8:	74 5e                	je     c0011048 <VCache::write(unsigned long long, int, void*)+0xac>
c0010fea:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010fed:	89 e8                	mov    eax,ebp
c0010fef:	99                   	cdq    
c0010ff0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010ff3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010ff6:	89 c1                	mov    ecx,eax
c0010ff8:	89 d0                	mov    eax,edx
c0010ffa:	31 f1                	xor    ecx,esi
c0010ffc:	31 f8                	xor    eax,edi
c0010ffe:	09 c1                	or     ecx,eax
c0011000:	75 3a                	jne    c001103c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011002:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0011007:	75 33                	jne    c001103c <VCache::write(unsigned long long, int, void*)+0xa0>
c0011009:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001100c:	89 ef                	mov    edi,ebp
c001100e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011014:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011018:	0f af f9             	imul   edi,ecx
c001101b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001101e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011020:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011023:	40                   	inc    eax
c0011024:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0011027:	83 f8 40             	cmp    eax,0x40
c001102a:	75 60                	jne    c001108c <VCache::write(unsigned long long, int, void*)+0xf0>
c001102c:	83 ec 0c             	sub    esp,0xc
c001102f:	53                   	push   ebx
c0011030:	e8 af fe ff ff       	call   c0010ee4 <VCache::writeWriteBuffer()>
c0011035:	83 c4 10             	add    esp,0x10
c0011038:	eb 52                	jmp    c001108c <VCache::write(unsigned long long, int, void*)+0xf0>
c001103a:	66 90                	xchg   ax,ax
c001103c:	83 ec 0c             	sub    esp,0xc
c001103f:	53                   	push   ebx
c0011040:	e8 9f fe ff ff       	call   c0010ee4 <VCache::writeWriteBuffer()>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001104b:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0011050:	7f 22                	jg     c0011074 <VCache::write(unsigned long long, int, void*)+0xd8>
c0011052:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0011055:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0011058:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001105c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0011060:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0011063:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0011066:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001106c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011070:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011072:	eb 18                	jmp    c001108c <VCache::write(unsigned long long, int, void*)+0xf0>
c0011074:	83 ec 0c             	sub    esp,0xc
c0011077:	8b 10                	mov    edx,DWORD PTR [eax]
c0011079:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001107d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011081:	57                   	push   edi
c0011082:	56                   	push   esi
c0011083:	50                   	push   eax
c0011084:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0011087:	83 c4 20             	add    esp,0x20
c001108a:	66 90                	xchg   ax,ax
c001108c:	83 c4 0c             	add    esp,0xc
c001108f:	31 c0                	xor    eax,eax
c0011091:	5b                   	pop    ebx
c0011092:	5e                   	pop    esi
c0011093:	5f                   	pop    edi
c0011094:	5d                   	pop    ebp
c0011095:	c3                   	ret    

c0011096 <VCache::read(unsigned long long, int, void*)>:
c0011096:	55                   	push   ebp
c0011097:	31 c0                	xor    eax,eax
c0011099:	57                   	push   edi
c001109a:	56                   	push   esi
c001109b:	53                   	push   ebx
c001109c:	83 ec 1c             	sub    esp,0x1c
c001109f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00110a3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00110a7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00110ab:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00110af:	90                   	nop
c00110b0:	39 e8                	cmp    eax,ebp
c00110b2:	7d 18                	jge    c00110cc <VCache::read(unsigned long long, int, void*)+0x36>
c00110b4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00110b7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c00110bd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00110c1:	0f af c8             	imul   ecx,eax
c00110c4:	01 ca                	add    edx,ecx
c00110c6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00110c8:	40                   	inc    eax
c00110c9:	eb e5                	jmp    c00110b0 <VCache::read(unsigned long long, int, void*)+0x1a>
c00110cb:	90                   	nop
c00110cc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00110d0:	74 0e                	je     c00110e0 <VCache::read(unsigned long long, int, void*)+0x4a>
c00110d2:	83 ec 0c             	sub    esp,0xc
c00110d5:	53                   	push   ebx
c00110d6:	e8 09 fe ff ff       	call   c0010ee4 <VCache::writeWriteBuffer()>
c00110db:	83 c4 10             	add    esp,0x10
c00110de:	66 90                	xchg   ax,ax
c00110e0:	83 fd 01             	cmp    ebp,0x1
c00110e3:	0f 85 87 00 00 00    	jne    c0011170 <VCache::read(unsigned long long, int, void*)+0xda>
c00110e9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00110ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110f0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00110f7:	75 77                	jne    c0011170 <VCache::read(unsigned long long, int, void*)+0xda>
c00110f9:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00110fc:	89 e9                	mov    ecx,ebp
c00110fe:	f7 d9                	neg    ecx
c0011100:	89 c8                	mov    eax,ecx
c0011102:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011106:	c1 f8 1f             	sar    eax,0x1f
c0011109:	21 f1                	and    ecx,esi
c001110b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001110f:	89 c8                	mov    eax,ecx
c0011111:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011115:	21 f9                	and    ecx,edi
c0011117:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001111b:	89 ca                	mov    edx,ecx
c001111d:	74 0d                	je     c001112c <VCache::read(unsigned long long, int, void*)+0x96>
c001111f:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0011122:	75 08                	jne    c001112c <VCache::read(unsigned long long, int, void*)+0x96>
c0011124:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0011127:	74 27                	je     c0011150 <VCache::read(unsigned long long, int, void*)+0xba>
c0011129:	8d 76 00             	lea    esi,[esi+0x0]
c001112c:	83 ec 0c             	sub    esp,0xc
c001112f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0011133:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011137:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001113a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001113d:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001113f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011142:	55                   	push   ebp
c0011143:	52                   	push   edx
c0011144:	50                   	push   eax
c0011145:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011149:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001114c:	83 c4 20             	add    esp,0x20
c001114f:	90                   	nop
c0011150:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011153:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011157:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001115d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0011160:	48                   	dec    eax
c0011161:	21 c6                	and    esi,eax
c0011163:	0f af f1             	imul   esi,ecx
c0011166:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011169:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001116b:	eb 23                	jmp    c0011190 <VCache::read(unsigned long long, int, void*)+0xfa>
c001116d:	8d 76 00             	lea    esi,[esi+0x0]
c0011170:	83 ec 0c             	sub    esp,0xc
c0011173:	53                   	push   ebx
c0011174:	e8 5b fd ff ff       	call   c0010ed4 <VCache::invalidateReadBuffer()>
c0011179:	5a                   	pop    edx
c001117a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001117d:	8b 10                	mov    edx,DWORD PTR [eax]
c001117f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011183:	55                   	push   ebp
c0011184:	57                   	push   edi
c0011185:	56                   	push   esi
c0011186:	50                   	push   eax
c0011187:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001118a:	83 c4 20             	add    esp,0x20
c001118d:	8d 76 00             	lea    esi,[esi+0x0]
c0011190:	83 c4 1c             	add    esp,0x1c
c0011193:	31 c0                	xor    eax,eax
c0011195:	5b                   	pop    ebx
c0011196:	5e                   	pop    esi
c0011197:	5f                   	pop    edi
c0011198:	5d                   	pop    ebp
c0011199:	c3                   	ret    

c001119a <Video::putrect(int, int, int, int, unsigned int)>:
c001119a:	55                   	push   ebp
c001119b:	57                   	push   edi
c001119c:	56                   	push   esi
c001119d:	53                   	push   ebx
c001119e:	83 ec 1c             	sub    esp,0x1c
c00111a1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00111a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111a9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00111ad:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00111b1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111b9:	01 df                	add    edi,ebx
c00111bb:	39 fb                	cmp    ebx,edi
c00111bd:	7d 1f                	jge    c00111de <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00111bf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00111c3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00111c7:	7d 12                	jge    c00111db <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00111c9:	8b 16                	mov    edx,DWORD PTR [esi]
c00111cb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00111cf:	53                   	push   ebx
c00111d0:	55                   	push   ebp
c00111d1:	45                   	inc    ebp
c00111d2:	56                   	push   esi
c00111d3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00111d6:	83 c4 10             	add    esp,0x10
c00111d9:	eb e8                	jmp    c00111c3 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00111db:	43                   	inc    ebx
c00111dc:	eb dd                	jmp    c00111bb <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00111de:	83 c4 1c             	add    esp,0x1c
c00111e1:	5b                   	pop    ebx
c00111e2:	5e                   	pop    esi
c00111e3:	5f                   	pop    edi
c00111e4:	5d                   	pop    ebp
c00111e5:	c3                   	ret    

c00111e6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00111e6:	55                   	push   ebp
c00111e7:	57                   	push   edi
c00111e8:	31 ff                	xor    edi,edi
c00111ea:	56                   	push   esi
c00111eb:	53                   	push   ebx
c00111ec:	83 ec 1c             	sub    esp,0x1c
c00111ef:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00111f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00111f7:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00111fe:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0011203:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011207:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001120b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001120f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0011212:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011216:	01 f9                	add    ecx,edi
c0011218:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001121c:	7d 2f                	jge    c001124d <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001121e:	31 f6                	xor    esi,esi
c0011220:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011224:	01 f2                	add    edx,esi
c0011226:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001122a:	7d 1a                	jge    c0011246 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001122c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001122f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0011232:	46                   	inc    esi
c0011233:	51                   	push   ecx
c0011234:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011238:	52                   	push   edx
c0011239:	55                   	push   ebp
c001123a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001123d:	83 c4 10             	add    esp,0x10
c0011240:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011244:	eb da                	jmp    c0011220 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011246:	47                   	inc    edi
c0011247:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001124b:	eb c5                	jmp    c0011212 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001124d:	83 c4 1c             	add    esp,0x1c
c0011250:	5b                   	pop    ebx
c0011251:	5e                   	pop    esi
c0011252:	5f                   	pop    edi
c0011253:	5d                   	pop    ebp
c0011254:	c3                   	ret    
c0011255:	90                   	nop

c0011256 <Video::blit(unsigned int*, int, int, int, int)>:
c0011256:	55                   	push   ebp
c0011257:	57                   	push   edi
c0011258:	56                   	push   esi
c0011259:	53                   	push   ebx
c001125a:	83 ec 1c             	sub    esp,0x1c
c001125d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011261:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011265:	85 c0                	test   eax,eax
c0011267:	79 02                	jns    c001126b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011269:	31 c0                	xor    eax,eax
c001126b:	c1 e0 02             	shl    eax,0x2
c001126e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0011272:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011276:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001127a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001127e:	39 d8                	cmp    eax,ebx
c0011280:	7e 49                	jle    c00112cb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011282:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011288:	7c 41                	jl     c00112cb <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001128a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001128e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011292:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011296:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001129a:	39 f9                	cmp    ecx,edi
c001129c:	7e 22                	jle    c00112c0 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001129e:	83 c5 04             	add    ebp,0x4
c00112a1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00112a7:	7c 14                	jl     c00112bd <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00112a9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00112ab:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00112ae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00112b2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00112b6:	56                   	push   esi
c00112b7:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00112ba:	83 c4 10             	add    esp,0x10
c00112bd:	47                   	inc    edi
c00112be:	eb d2                	jmp    c0011292 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00112c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112c4:	43                   	inc    ebx
c00112c5:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00112c9:	eb ab                	jmp    c0011276 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00112cb:	83 c4 1c             	add    esp,0x1c
c00112ce:	5b                   	pop    ebx
c00112cf:	5e                   	pop    esi
c00112d0:	5f                   	pop    edi
c00112d1:	5d                   	pop    ebp
c00112d2:	c3                   	ret    
c00112d3:	90                   	nop

c00112d4 <Video::clearScreen(unsigned int)>:
c00112d4:	57                   	push   edi
c00112d5:	56                   	push   esi
c00112d6:	53                   	push   ebx
c00112d7:	31 db                	xor    ebx,ebx
c00112d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112dd:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00112e3:	7e 1f                	jle    c0011304 <Video::clearScreen(unsigned int)+0x30>
c00112e5:	31 ff                	xor    edi,edi
c00112e7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00112ed:	7e 12                	jle    c0011301 <Video::clearScreen(unsigned int)+0x2d>
c00112ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00112f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00112f5:	53                   	push   ebx
c00112f6:	57                   	push   edi
c00112f7:	47                   	inc    edi
c00112f8:	56                   	push   esi
c00112f9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112fc:	83 c4 10             	add    esp,0x10
c00112ff:	eb e6                	jmp    c00112e7 <Video::clearScreen(unsigned int)+0x13>
c0011301:	43                   	inc    ebx
c0011302:	eb d9                	jmp    c00112dd <Video::clearScreen(unsigned int)+0x9>
c0011304:	5b                   	pop    ebx
c0011305:	5e                   	pop    esi
c0011306:	5f                   	pop    edi
c0011307:	c3                   	ret    

c0011308 <Video::putpixel(int, int, unsigned int)>:
c0011308:	c7 44 24 04 c8 52 02 c0 	mov    DWORD PTR [esp+0x4],0xc00252c8
c0011310:	e9 b2 36 00 00       	jmp    c00149c7 <Krnl::panic(char const*)>
c0011315:	90                   	nop

c0011316 <Video::Video(char const*)>:
c0011316:	83 ec 0c             	sub    esp,0xc
c0011319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001131d:	83 ec 08             	sub    esp,0x8
c0011320:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011324:	50                   	push   eax
c0011325:	e8 18 d1 ff ff       	call   c000e442 <Device::Device(char const*)>
c001132a:	83 c4 10             	add    esp,0x10
c001132d:	ba 38 53 02 c0       	mov    edx,0xc0025338
c0011332:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011336:	89 10                	mov    DWORD PTR [eax],edx
c0011338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011346:	90                   	nop
c0011347:	83 c4 0c             	add    esp,0xc
c001134a:	c3                   	ret    
c001134b:	90                   	nop

c001134c <Video::~Video()>:
c001134c:	83 ec 0c             	sub    esp,0xc
c001134f:	ba 38 53 02 c0       	mov    edx,0xc0025338
c0011354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011358:	89 10                	mov    DWORD PTR [eax],edx
c001135a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001135e:	83 ec 0c             	sub    esp,0xc
c0011361:	50                   	push   eax
c0011362:	e8 a5 cd ff ff       	call   c000e10c <Device::~Device()>
c0011367:	83 c4 10             	add    esp,0x10
c001136a:	90                   	nop
c001136b:	83 c4 0c             	add    esp,0xc
c001136e:	c3                   	ret    
c001136f:	90                   	nop

c0011370 <Video::~Video()>:
c0011370:	83 ec 0c             	sub    esp,0xc
c0011373:	83 ec 0c             	sub    esp,0xc
c0011376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001137a:	e8 cd ff ff ff       	call   c001134c <Video::~Video()>
c001137f:	83 c4 10             	add    esp,0x10
c0011382:	83 ec 08             	sub    esp,0x8
c0011385:	68 64 01 00 00       	push   0x164
c001138a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001138e:	e8 8b b8 ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0011393:	83 c4 10             	add    esp,0x10
c0011396:	83 c4 0c             	add    esp,0xc
c0011399:	c3                   	ret    

c001139a <Video::isMonochrome()>:
c001139a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001139e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00113a4:	c3                   	ret    
c00113a5:	90                   	nop

c00113a6 <Video::getWidth()>:
c00113a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00113b0:	c3                   	ret    
c00113b1:	90                   	nop

c00113b2 <Video::getHeight()>:
c00113b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00113bc:	c3                   	ret    
c00113bd:	90                   	nop

c00113be <Video::drawCursor(int, int, unsigned char*, int)>:
c00113be:	55                   	push   ebp
c00113bf:	57                   	push   edi
c00113c0:	56                   	push   esi
c00113c1:	53                   	push   ebx
c00113c2:	83 ec 2c             	sub    esp,0x2c
c00113c5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00113c9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00113cd:	83 f8 01             	cmp    eax,0x1
c00113d0:	19 c9                	sbb    ecx,ecx
c00113d2:	31 db                	xor    ebx,ebx
c00113d4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00113d8:	89 cd                	mov    ebp,ecx
c00113da:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00113e2:	f7 d5                	not    ebp
c00113e4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00113ea:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00113ee:	01 d8                	add    eax,ebx
c00113f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113f4:	56                   	push   esi
c00113f5:	e8 b8 ff ff ff       	call   c00113b2 <Video::getHeight()>
c00113fa:	59                   	pop    ecx
c00113fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00113ff:	7e 70                	jle    c0011471 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011401:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011405:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011409:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001140c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011410:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011414:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001141b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001141f:	89 f8                	mov    eax,edi
c0011421:	83 c0 20             	add    eax,0x20
c0011424:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011428:	56                   	push   esi
c0011429:	e8 78 ff ff ff       	call   c00113a6 <Video::getWidth()>
c001142e:	5a                   	pop    edx
c001142f:	39 c7                	cmp    edi,eax
c0011431:	7d 34                	jge    c0011467 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011433:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011438:	74 05                	je     c001143f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001143a:	8b 06                	mov    eax,DWORD PTR [esi]
c001143c:	55                   	push   ebp
c001143d:	eb 0d                	jmp    c001144c <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001143f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011444:	74 12                	je     c0011458 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011446:	8b 06                	mov    eax,DWORD PTR [esi]
c0011448:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001144c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011450:	57                   	push   edi
c0011451:	56                   	push   esi
c0011452:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011455:	83 c4 10             	add    esp,0x10
c0011458:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001145c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011460:	47                   	inc    edi
c0011461:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011465:	75 c1                	jne    c0011428 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011467:	43                   	inc    ebx
c0011468:	83 fb 20             	cmp    ebx,0x20
c001146b:	0f 85 79 ff ff ff    	jne    c00113ea <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011471:	83 c4 2c             	add    esp,0x2c
c0011474:	5b                   	pop    ebx
c0011475:	5e                   	pop    esi
c0011476:	5f                   	pop    edi
c0011477:	5d                   	pop    ebp
c0011478:	c3                   	ret    
c0011479:	90                   	nop

c001147a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001147a:	55                   	push   ebp
c001147b:	57                   	push   edi
c001147c:	56                   	push   esi
c001147d:	53                   	push   ebx
c001147e:	83 ec 28             	sub    esp,0x28
c0011481:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011485:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011489:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c001148d:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011491:	c1 e6 08             	shl    esi,0x8
c0011494:	01 c6                	add    esi,eax
c0011496:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001149a:	c1 e0 08             	shl    eax,0x8
c001149d:	01 d0                	add    eax,edx
c001149f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00114a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114a7:	0f af c6             	imul   eax,esi
c00114aa:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00114b1:	50                   	push   eax
c00114b2:	e8 58 85 ff ff       	call   c0009a0f <malloc>
c00114b7:	83 c4 10             	add    esp,0x10
c00114ba:	89 c7                	mov    edi,eax
c00114bc:	85 c0                	test   eax,eax
c00114be:	75 10                	jne    c00114d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00114c0:	83 ec 0c             	sub    esp,0xc
c00114c3:	68 e9 52 02 c0       	push   0xc00252e9
c00114c8:	e8 fa 34 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c00114cd:	83 c4 10             	add    esp,0x10
c00114d0:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00114d3:	ba 12 00 00 00       	mov    edx,0x12
c00114d8:	84 c0                	test   al,al
c00114da:	74 11                	je     c00114ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00114dc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00114e0:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00114e4:	c1 fa 03             	sar    edx,0x3
c00114e7:	0f af d1             	imul   edx,ecx
c00114ea:	83 c2 12             	add    edx,0x12
c00114ed:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00114f1:	74 04                	je     c00114f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00114f3:	85 f6                	test   esi,esi
c00114f5:	75 12                	jne    c0011509 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00114f7:	83 ec 0c             	sub    esp,0xc
c00114fa:	68 f9 52 02 c0       	push   0xc00252f9
c00114ff:	e8 fb b7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0011504:	e9 b8 00 00 00       	jmp    c00115c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011509:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001150d:	80 f9 02             	cmp    cl,0x2
c0011510:	0f 85 96 00 00 00    	jne    c00115ac <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0011516:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001151b:	75 0e                	jne    c001152b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c001151d:	84 c0                	test   al,al
c001151f:	75 0a                	jne    c001152b <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011521:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011524:	83 e8 18             	sub    eax,0x18
c0011527:	a8 f7                	test   al,0xf7
c0011529:	74 0a                	je     c0011535 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c001152b:	83 ec 0c             	sub    esp,0xc
c001152e:	68 0e 53 02 c0       	push   0xc002530e
c0011533:	eb 7f                	jmp    c00115b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011535:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001153d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011545:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011549:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011551:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011555:	75 0c                	jne    c0011563 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011557:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c001155c:	c1 e0 18             	shl    eax,0x18
c001155f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011563:	45                   	inc    ebp
c0011564:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011569:	c1 e1 10             	shl    ecx,0x10
c001156c:	89 c8                	mov    eax,ecx
c001156e:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011573:	c1 e1 08             	shl    ecx,0x8
c0011576:	09 c1                	or     ecx,eax
c0011578:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c001157c:	09 c1                	or     ecx,eax
c001157e:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011582:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011586:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001158a:	c1 f8 03             	sar    eax,0x3
c001158d:	01 c2                	add    edx,eax
c001158f:	89 e8                	mov    eax,ebp
c0011591:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011595:	39 c6                	cmp    esi,eax
c0011597:	7f b0                	jg     c0011549 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011599:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001159d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00115a1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00115a4:	7e 22                	jle    c00115c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00115a6:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00115aa:	eb 99                	jmp    c0011545 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00115ac:	50                   	push   eax
c00115ad:	50                   	push   eax
c00115ae:	51                   	push   ecx
c00115af:	68 1c 53 02 c0       	push   0xc002531c
c00115b4:	e8 46 b7 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00115b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00115bc:	e8 5e 84 ff ff       	call   c0009a1f <free>
c00115c1:	83 c4 10             	add    esp,0x10
c00115c4:	31 ff                	xor    edi,edi
c00115c6:	eb 0f                	jmp    c00115d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00115c8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115cc:	89 30                	mov    DWORD PTR [eax],esi
c00115ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00115d5:	89 30                	mov    DWORD PTR [eax],esi
c00115d7:	83 c4 1c             	add    esp,0x1c
c00115da:	89 f8                	mov    eax,edi
c00115dc:	5b                   	pop    ebx
c00115dd:	5e                   	pop    esi
c00115de:	5f                   	pop    edi
c00115df:	5d                   	pop    ebp
c00115e0:	c3                   	ret    
c00115e1:	90                   	nop

c00115e2 <Video::putTGA(int, int, unsigned char*, int)>:
c00115e2:	55                   	push   ebp
c00115e3:	57                   	push   edi
c00115e4:	56                   	push   esi
c00115e5:	53                   	push   ebx
c00115e6:	83 ec 28             	sub    esp,0x28
c00115e9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00115ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115f1:	50                   	push   eax
c00115f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115f6:	50                   	push   eax
c00115f7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00115fb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00115ff:	56                   	push   esi
c0011600:	e8 75 fe ff ff       	call   c001147a <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011605:	83 c4 20             	add    esp,0x20
c0011608:	85 c0                	test   eax,eax
c001160a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001160e:	74 35                	je     c0011645 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011610:	89 c7                	mov    edi,eax
c0011612:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011616:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001161a:	39 d8                	cmp    eax,ebx
c001161c:	7e 27                	jle    c0011645 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001161e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011622:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011626:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001162a:	39 e8                	cmp    eax,ebp
c001162c:	7e 14                	jle    c0011642 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001162e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011630:	83 c7 04             	add    edi,0x4
c0011633:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011636:	53                   	push   ebx
c0011637:	55                   	push   ebp
c0011638:	45                   	inc    ebp
c0011639:	56                   	push   esi
c001163a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001163d:	83 c4 10             	add    esp,0x10
c0011640:	eb e0                	jmp    c0011622 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011642:	43                   	inc    ebx
c0011643:	eb cd                	jmp    c0011612 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011645:	83 c4 1c             	add    esp,0x1c
c0011648:	5b                   	pop    ebx
c0011649:	5e                   	pop    esi
c001164a:	5f                   	pop    edi
c001164b:	5d                   	pop    ebp
c001164c:	c3                   	ret    
c001164d:	66 90                	xchg   ax,ax
c001164f:	90                   	nop

c0011650 <ACPI::close(int, int, void*)>:
c0011650:	83 ec 1c             	sub    esp,0x1c
c0011653:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001165b:	74 0b                	je     c0011668 <ACPI::close(int, int, void*)+0x18>
c001165d:	b8 00 00 00 00       	mov    eax,0x0
c0011662:	e9 99 00 00 00       	jmp    c0011700 <ACPI::close(int, int, void*)+0xb0>
c0011667:	90                   	nop
c0011668:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001166d:	75 29                	jne    c0011698 <ACPI::close(int, int, void*)+0x48>
c001166f:	a1 28 87 02 c0       	mov    eax,ds:0xc0028728
c0011674:	85 c0                	test   eax,eax
c0011676:	74 08                	je     c0011680 <ACPI::close(int, int, void*)+0x30>
c0011678:	a1 28 87 02 c0       	mov    eax,ds:0xc0028728
c001167d:	ff d0                	call   eax
c001167f:	90                   	nop
c0011680:	83 ec 0c             	sub    esp,0xc
c0011683:	68 78 53 02 c0       	push   0xc0025378
c0011688:	e8 3a 33 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c001168d:	83 c4 10             	add    esp,0x10
c0011690:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011695:	eb 69                	jmp    c0011700 <ACPI::close(int, int, void*)+0xb0>
c0011697:	90                   	nop
c0011698:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001169d:	75 59                	jne    c00116f8 <ACPI::close(int, int, void*)+0xa8>
c001169f:	a1 24 87 02 c0       	mov    eax,ds:0xc0028724
c00116a4:	85 c0                	test   eax,eax
c00116a6:	74 08                	je     c00116b0 <ACPI::close(int, int, void*)+0x60>
c00116a8:	a1 24 87 02 c0       	mov    eax,ds:0xc0028724
c00116ad:	ff d0                	call   eax
c00116af:	90                   	nop
c00116b0:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00116b5:	8d 76 00             	lea    esi,[esi+0x0]
c00116b8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00116bd:	83 e0 02             	and    eax,0x2
c00116c0:	74 1e                	je     c00116e0 <ACPI::close(int, int, void*)+0x90>
c00116c2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00116c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116cd:	89 c2                	mov    edx,eax
c00116cf:	ec                   	in     al,dx
c00116d0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00116d4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00116d8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116dc:	eb da                	jmp    c00116b8 <ACPI::close(int, int, void*)+0x68>
c00116de:	66 90                	xchg   ax,ax
c00116e0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00116e7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00116ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00116f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116f4:	ee                   	out    dx,al
c00116f5:	8d 76 00             	lea    esi,[esi+0x0]
c00116f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011700:	83 c4 1c             	add    esp,0x1c
c0011703:	c3                   	ret    

c0011704 <findRSDP()>:
c0011704:	83 ec 1c             	sub    esp,0x1c
c0011707:	83 ec 0c             	sub    esp,0xc
c001170a:	68 9b 54 02 c0       	push   0xc002549b
c001170f:	e8 55 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c001171c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011722:	83 e0 04             	and    eax,0x4
c0011725:	84 c0                	test   al,al
c0011727:	75 0b                	jne    c0011734 <findRSDP()+0x30>
c0011729:	b8 00 00 00 00       	mov    eax,0x0
c001172e:	e9 a1 00 00 00       	jmp    c00117d4 <findRSDP()+0xd0>
c0011733:	90                   	nop
c0011734:	a1 18 81 02 c0       	mov    eax,ds:0xc0028118
c0011739:	3d ff 07 00 00       	cmp    eax,0x7ff
c001173e:	7f 1c                	jg     c001175c <findRSDP()+0x58>
c0011740:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0011745:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001174b:	83 e2 fb             	and    edx,0xfffffffb
c001174e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011754:	b8 00 00 00 00       	mov    eax,0x0
c0011759:	eb 79                	jmp    c00117d4 <findRSDP()+0xd0>
c001175b:	90                   	nop
c001175c:	83 ec 0c             	sub    esp,0xc
c001175f:	68 ab 54 02 c0       	push   0xc00254ab
c0011764:	e8 00 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011774:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001177c:	77 3e                	ja     c00117bc <findRSDP()+0xb8>
c001177e:	83 ec 04             	sub    esp,0x4
c0011781:	6a 08                	push   0x8
c0011783:	68 c4 54 02 c0       	push   0xc00254c4
c0011788:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001178c:	e8 ef ed fe ff       	call   c0000580 <memcmp>
c0011791:	83 c4 10             	add    esp,0x10
c0011794:	85 c0                	test   eax,eax
c0011796:	0f 94 c0             	sete   al
c0011799:	84 c0                	test   al,al
c001179b:	74 17                	je     c00117b4 <findRSDP()+0xb0>
c001179d:	83 ec 0c             	sub    esp,0xc
c00117a0:	68 cd 54 02 c0       	push   0xc00254cd
c00117a5:	e8 bf 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00117aa:	83 c4 10             	add    esp,0x10
c00117ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117b1:	eb 21                	jmp    c00117d4 <findRSDP()+0xd0>
c00117b3:	90                   	nop
c00117b4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00117b9:	eb b9                	jmp    c0011774 <findRSDP()+0x70>
c00117bb:	90                   	nop
c00117bc:	83 ec 0c             	sub    esp,0xc
c00117bf:	68 db 54 02 c0       	push   0xc00254db
c00117c4:	e8 a0 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00117c9:	83 c4 10             	add    esp,0x10
c00117cc:	b8 00 00 00 00       	mov    eax,0x0
c00117d1:	8d 76 00             	lea    esi,[esi+0x0]
c00117d4:	83 c4 1c             	add    esp,0x1c
c00117d7:	c3                   	ret    

c00117d8 <loadACPITables(unsigned char*)>:
c00117d8:	57                   	push   edi
c00117d9:	56                   	push   esi
c00117da:	53                   	push   ebx
c00117db:	83 ec 60             	sub    esp,0x60
c00117de:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c00117e3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00117e9:	83 e0 04             	and    eax,0x4
c00117ec:	84 c0                	test   al,al
c00117ee:	0f 84 3c 02 00 00    	je     c0011a30 <loadACPITables(unsigned char*)+0x258>
c00117f4:	a0 40 89 02 c0       	mov    al,ds:0xc0028940
c00117f9:	84 c0                	test   al,al
c00117fb:	74 77                	je     c0011874 <loadACPITables(unsigned char*)+0x9c>
c00117fd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011801:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011805:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011809:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001180c:	83 e8 24             	sub    eax,0x24
c001180f:	c1 e8 03             	shr    eax,0x3
c0011812:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011816:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001181e:	66 90                	xchg   ax,ax
c0011820:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011824:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011828:	0f 8d b6 00 00 00    	jge    c00118e4 <loadACPITables(unsigned char*)+0x10c>
c001182e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011832:	83 c0 24             	add    eax,0x24
c0011835:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011839:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001183d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011841:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011845:	c1 e0 03             	shl    eax,0x3
c0011848:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001184c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011850:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011853:	8b 00                	mov    eax,DWORD PTR [eax]
c0011855:	89 c1                	mov    ecx,eax
c0011857:	a1 2c 87 02 c0       	mov    eax,ds:0xc002872c
c001185c:	8d 50 01             	lea    edx,[eax+0x1]
c001185f:	89 15 2c 87 02 c0    	mov    DWORD PTR ds:0xc002872c,edx
c0011865:	89 ca                	mov    edx,ecx
c0011867:	89 14 c5 44 87 02 c0 	mov    DWORD PTR [eax*8-0x3ffd78bc],edx
c001186e:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011872:	eb ac                	jmp    c0011820 <loadACPITables(unsigned char*)+0x48>
c0011874:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011878:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001187c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011880:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011883:	83 e8 24             	sub    eax,0x24
c0011886:	c1 e8 02             	shr    eax,0x2
c0011889:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001188d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011895:	8d 76 00             	lea    esi,[esi+0x0]
c0011898:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001189c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00118a0:	7d 42                	jge    c00118e4 <loadACPITables(unsigned char*)+0x10c>
c00118a2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00118a6:	83 c0 24             	add    eax,0x24
c00118a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00118ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00118b1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00118b5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00118b9:	c1 e0 02             	shl    eax,0x2
c00118bc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00118c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118c4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00118c6:	a1 2c 87 02 c0       	mov    eax,ds:0xc002872c
c00118cb:	8d 50 01             	lea    edx,[eax+0x1]
c00118ce:	89 15 2c 87 02 c0    	mov    DWORD PTR ds:0xc002872c,edx
c00118d4:	89 ca                	mov    edx,ecx
c00118d6:	89 14 c5 44 87 02 c0 	mov    DWORD PTR [eax*8-0x3ffd78bc],edx
c00118dd:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00118e1:	eb b5                	jmp    c0011898 <loadACPITables(unsigned char*)+0xc0>
c00118e3:	90                   	nop
c00118e4:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00118ec:	a1 2c 87 02 c0       	mov    eax,ds:0xc002872c
c00118f1:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00118f5:	0f 8d 39 01 00 00    	jge    c0011a34 <loadACPITables(unsigned char*)+0x25c>
c00118fb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00118ff:	8b 04 c5 44 87 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd78bc]
c0011906:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001190a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001190e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011912:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011916:	25 ff 0f 00 00       	and    eax,0xfff
c001191b:	89 c6                	mov    esi,eax
c001191d:	8b 1d 10 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028210
c0011923:	83 ec 0c             	sub    esp,0xc
c0011926:	6a 01                	push   0x1
c0011928:	e8 ac a0 ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c001192d:	83 c4 10             	add    esp,0x10
c0011930:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011934:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001193a:	83 ec 0c             	sub    esp,0xc
c001193d:	6a 01                	push   0x1
c001193f:	6a 01                	push   0x1
c0011941:	50                   	push   eax
c0011942:	52                   	push   edx
c0011943:	53                   	push   ebx
c0011944:	e8 2d aa ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011949:	83 c4 20             	add    esp,0x20
c001194c:	09 f0                	or     eax,esi
c001194e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011952:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011956:	c1 e0 03             	shl    eax,0x3
c0011959:	05 40 87 02 c0       	add    eax,0xc0028740
c001195e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011962:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011966:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001196a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011972:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011976:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001197a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001197e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011982:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011986:	89 c6                	mov    esi,eax
c0011988:	89 d7                	mov    edi,edx
c001198a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001198c:	89 c8                	mov    eax,ecx
c001198e:	89 fa                	mov    edx,edi
c0011990:	89 f3                	mov    ebx,esi
c0011992:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011996:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001199a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001199e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00119a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00119ad:	05 00 10 00 00       	add    eax,0x1000
c00119b2:	c1 e8 0c             	shr    eax,0xc
c00119b5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00119b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00119c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119c5:	25 ff 0f 00 00       	and    eax,0xfff
c00119ca:	89 c6                	mov    esi,eax
c00119cc:	8b 1d 10 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028210
c00119d2:	83 ec 0c             	sub    esp,0xc
c00119d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00119d9:	e8 fb 9f ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c00119de:	83 c4 10             	add    esp,0x10
c00119e1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00119e5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00119eb:	83 ec 0c             	sub    esp,0xc
c00119ee:	6a 01                	push   0x1
c00119f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00119f4:	50                   	push   eax
c00119f5:	52                   	push   edx
c00119f6:	53                   	push   ebx
c00119f7:	e8 7a a9 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119fc:	83 c4 20             	add    esp,0x20
c00119ff:	09 f0                	or     eax,esi
c0011a01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011a09:	83 ec 0c             	sub    esp,0xc
c0011a0c:	50                   	push   eax
c0011a0d:	e8 f7 a2 ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a12:	83 c4 10             	add    esp,0x10
c0011a15:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011a19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011a1d:	89 14 c5 44 87 02 c0 	mov    DWORD PTR [eax*8-0x3ffd78bc],edx
c0011a24:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011a28:	e9 bf fe ff ff       	jmp    c00118ec <loadACPITables(unsigned char*)+0x114>
c0011a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a30:	90                   	nop
c0011a31:	8d 76 00             	lea    esi,[esi+0x0]
c0011a34:	83 c4 60             	add    esp,0x60
c0011a37:	5b                   	pop    ebx
c0011a38:	5e                   	pop    esi
c0011a39:	5f                   	pop    edi
c0011a3a:	c3                   	ret    
c0011a3b:	90                   	nop

c0011a3c <findRSDT(unsigned char*)>:
c0011a3c:	57                   	push   edi
c0011a3d:	56                   	push   esi
c0011a3e:	53                   	push   ebx
c0011a3f:	83 ec 50             	sub    esp,0x50
c0011a42:	83 ec 0c             	sub    esp,0xc
c0011a45:	68 ef 54 02 c0       	push   0xc00254ef
c0011a4a:	e8 1a 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011a4f:	83 c4 10             	add    esp,0x10
c0011a52:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0011a57:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a5d:	83 e0 04             	and    eax,0x4
c0011a60:	84 c0                	test   al,al
c0011a62:	75 0c                	jne    c0011a70 <findRSDT(unsigned char*)+0x34>
c0011a64:	b8 00 00 00 00       	mov    eax,0x0
c0011a69:	e9 86 01 00 00       	jmp    c0011bf4 <findRSDT(unsigned char*)+0x1b8>
c0011a6e:	66 90                	xchg   ax,ax
c0011a70:	83 ec 0c             	sub    esp,0xc
c0011a73:	68 01 55 02 c0       	push   0xc0025501
c0011a78:	e8 ec 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011a7d:	83 c4 10             	add    esp,0x10
c0011a80:	89 e0                	mov    eax,esp
c0011a82:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011a86:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011a8a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011a8e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011a96:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a9a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011aa2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011aa6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011aaa:	89 c6                	mov    esi,eax
c0011aac:	89 d7                	mov    edi,edx
c0011aae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ab0:	89 c8                	mov    eax,ecx
c0011ab2:	89 fa                	mov    edx,edi
c0011ab4:	89 f3                	mov    ebx,esi
c0011ab6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011aba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011abe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ac2:	83 ec 0c             	sub    esp,0xc
c0011ac5:	68 13 55 02 c0       	push   0xc0025513
c0011aca:	e8 9a 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011acf:	83 c4 10             	add    esp,0x10
c0011ad2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011ad6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011ada:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011ae2:	83 ec 0c             	sub    esp,0xc
c0011ae5:	68 25 55 02 c0       	push   0xc0025525
c0011aea:	e8 7a 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011aef:	83 c4 10             	add    esp,0x10
c0011af2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011af6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011afa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b02:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011b06:	83 ec 04             	sub    esp,0x4
c0011b09:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b0d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b11:	68 9c 53 02 c0       	push   0xc002539c
c0011b16:	e8 e4 b1 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011b22:	25 ff 0f 00 00       	and    eax,0xfff
c0011b27:	89 c6                	mov    esi,eax
c0011b29:	8b 1d 10 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028210
c0011b2f:	83 ec 0c             	sub    esp,0xc
c0011b32:	6a 02                	push   0x2
c0011b34:	e8 a0 9e ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011b39:	83 c4 10             	add    esp,0x10
c0011b3c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011b40:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011b46:	83 ec 0c             	sub    esp,0xc
c0011b49:	6a 01                	push   0x1
c0011b4b:	6a 02                	push   0x2
c0011b4d:	50                   	push   eax
c0011b4e:	52                   	push   edx
c0011b4f:	53                   	push   ebx
c0011b50:	e8 21 a8 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b55:	83 c4 20             	add    esp,0x20
c0011b58:	09 f0                	or     eax,esi
c0011b5a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b5e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011b62:	25 ff 0f 00 00       	and    eax,0xfff
c0011b67:	89 c6                	mov    esi,eax
c0011b69:	8b 1d 10 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028210
c0011b6f:	83 ec 0c             	sub    esp,0xc
c0011b72:	6a 02                	push   0x2
c0011b74:	e8 60 9e ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0011b79:	83 c4 10             	add    esp,0x10
c0011b7c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011b80:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011b86:	83 ec 0c             	sub    esp,0xc
c0011b89:	6a 01                	push   0x1
c0011b8b:	6a 02                	push   0x2
c0011b8d:	50                   	push   eax
c0011b8e:	52                   	push   edx
c0011b8f:	53                   	push   ebx
c0011b90:	e8 e1 a7 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b95:	83 c4 20             	add    esp,0x20
c0011b98:	09 f0                	or     eax,esi
c0011b9a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011b9e:	83 ec 04             	sub    esp,0x4
c0011ba1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ba5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ba9:	68 bc 53 02 c0       	push   0xc00253bc
c0011bae:	e8 4c b1 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0011bb3:	83 c4 10             	add    esp,0x10
c0011bb6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011bbb:	75 13                	jne    c0011bd0 <findRSDT(unsigned char*)+0x194>
c0011bbd:	c6 05 40 89 02 c0 00 	mov    BYTE PTR ds:0xc0028940,0x0
c0011bc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011bc8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011bcc:	eb 22                	jmp    c0011bf0 <findRSDT(unsigned char*)+0x1b4>
c0011bce:	66 90                	xchg   ax,ax
c0011bd0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011bd5:	75 11                	jne    c0011be8 <findRSDT(unsigned char*)+0x1ac>
c0011bd7:	c6 05 40 89 02 c0 01 	mov    BYTE PTR ds:0xc0028940,0x1
c0011bde:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011be2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011be6:	eb 08                	jmp    c0011bf0 <findRSDT(unsigned char*)+0x1b4>
c0011be8:	b8 00 00 00 00       	mov    eax,0x0
c0011bed:	eb 05                	jmp    c0011bf4 <findRSDT(unsigned char*)+0x1b8>
c0011bef:	90                   	nop
c0011bf0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011bf4:	83 c4 50             	add    esp,0x50
c0011bf7:	5b                   	pop    ebx
c0011bf8:	5e                   	pop    esi
c0011bf9:	5f                   	pop    edi
c0011bfa:	c3                   	ret    
c0011bfb:	90                   	nop

c0011bfc <findDataTable(unsigned char*, char*)>:
c0011bfc:	83 ec 1c             	sub    esp,0x1c
c0011bff:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0011c04:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c0a:	83 e0 04             	and    eax,0x4
c0011c0d:	84 c0                	test   al,al
c0011c0f:	75 07                	jne    c0011c18 <findDataTable(unsigned char*, char*)+0x1c>
c0011c11:	b8 00 00 00 00       	mov    eax,0x0
c0011c16:	eb 58                	jmp    c0011c70 <findDataTable(unsigned char*, char*)+0x74>
c0011c18:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c20:	a1 2c 87 02 c0       	mov    eax,ds:0xc002872c
c0011c25:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011c29:	7d 3d                	jge    c0011c68 <findDataTable(unsigned char*, char*)+0x6c>
c0011c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c2f:	c1 e0 03             	shl    eax,0x3
c0011c32:	05 40 87 02 c0       	add    eax,0xc0028740
c0011c37:	83 ec 04             	sub    esp,0x4
c0011c3a:	6a 04                	push   0x4
c0011c3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c40:	50                   	push   eax
c0011c41:	e8 3a e9 fe ff       	call   c0000580 <memcmp>
c0011c46:	83 c4 10             	add    esp,0x10
c0011c49:	85 c0                	test   eax,eax
c0011c4b:	0f 94 c0             	sete   al
c0011c4e:	84 c0                	test   al,al
c0011c50:	74 0e                	je     c0011c60 <findDataTable(unsigned char*, char*)+0x64>
c0011c52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c56:	8b 04 c5 44 87 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd78bc]
c0011c5d:	eb 11                	jmp    c0011c70 <findDataTable(unsigned char*, char*)+0x74>
c0011c5f:	90                   	nop
c0011c60:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011c64:	eb ba                	jmp    c0011c20 <findDataTable(unsigned char*, char*)+0x24>
c0011c66:	66 90                	xchg   ax,ax
c0011c68:	b8 00 00 00 00       	mov    eax,0x0
c0011c6d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c70:	83 c4 1c             	add    esp,0x1c
c0011c73:	c3                   	ret    

c0011c74 <scanMADT()>:
c0011c74:	53                   	push   ebx
c0011c75:	83 ec 38             	sub    esp,0x38
c0011c78:	83 ec 0c             	sub    esp,0xc
c0011c7b:	68 37 55 02 c0       	push   0xc0025537
c0011c80:	e8 e4 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011c85:	83 c4 10             	add    esp,0x10
c0011c88:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0011c8d:	25 00 04 00 00       	and    eax,0x400
c0011c92:	74 14                	je     c0011ca8 <scanMADT()+0x34>
c0011c94:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0011c99:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c9f:	83 e2 fb             	and    edx,0xfffffffb
c0011ca2:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011ca8:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0011cad:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011cb3:	83 e0 04             	and    eax,0x4
c0011cb6:	84 c0                	test   al,al
c0011cb8:	0f 84 82 04 00 00    	je     c0012140 <scanMADT()+0x4cc>
c0011cbe:	83 ec 0c             	sub    esp,0xc
c0011cc1:	68 44 55 02 c0       	push   0xc0025544
c0011cc6:	e8 9e 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011ccb:	83 c4 10             	add    esp,0x10
c0011cce:	e8 31 fa ff ff       	call   c0011704 <findRSDP()>
c0011cd3:	a3 4c 89 02 c0       	mov    ds:0xc002894c,eax
c0011cd8:	a1 4c 89 02 c0       	mov    eax,ds:0xc002894c
c0011cdd:	85 c0                	test   eax,eax
c0011cdf:	75 1b                	jne    c0011cfc <scanMADT()+0x88>
c0011ce1:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0011ce6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011cec:	83 e2 fb             	and    edx,0xfffffffb
c0011cef:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011cf5:	e9 4e 04 00 00       	jmp    c0012148 <scanMADT()+0x4d4>
c0011cfa:	66 90                	xchg   ax,ax
c0011cfc:	83 ec 0c             	sub    esp,0xc
c0011cff:	68 56 55 02 c0       	push   0xc0025556
c0011d04:	e8 60 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	a1 4c 89 02 c0       	mov    eax,ds:0xc002894c
c0011d11:	83 ec 0c             	sub    esp,0xc
c0011d14:	50                   	push   eax
c0011d15:	e8 22 fd ff ff       	call   c0011a3c <findRSDT(unsigned char*)>
c0011d1a:	83 c4 10             	add    esp,0x10
c0011d1d:	a3 48 89 02 c0       	mov    ds:0xc0028948,eax
c0011d22:	a1 48 89 02 c0       	mov    eax,ds:0xc0028948
c0011d27:	85 c0                	test   eax,eax
c0011d29:	75 19                	jne    c0011d44 <scanMADT()+0xd0>
c0011d2b:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0011d30:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d36:	83 e2 fb             	and    edx,0xfffffffb
c0011d39:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d3f:	e9 04 04 00 00       	jmp    c0012148 <scanMADT()+0x4d4>
c0011d44:	83 ec 0c             	sub    esp,0xc
c0011d47:	68 66 55 02 c0       	push   0xc0025566
c0011d4c:	e8 18 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011d51:	83 c4 10             	add    esp,0x10
c0011d54:	a1 48 89 02 c0       	mov    eax,ds:0xc0028948
c0011d59:	83 ec 0c             	sub    esp,0xc
c0011d5c:	50                   	push   eax
c0011d5d:	e8 76 fa ff ff       	call   c00117d8 <loadACPITables(unsigned char*)>
c0011d62:	83 c4 10             	add    esp,0x10
c0011d65:	a1 48 89 02 c0       	mov    eax,ds:0xc0028948
c0011d6a:	83 ec 08             	sub    esp,0x8
c0011d6d:	68 7e 55 02 c0       	push   0xc002557e
c0011d72:	50                   	push   eax
c0011d73:	e8 84 fe ff ff       	call   c0011bfc <findDataTable(unsigned char*, char*)>
c0011d78:	83 c4 10             	add    esp,0x10
c0011d7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d7f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011d84:	75 1a                	jne    c0011da0 <scanMADT()+0x12c>
c0011d86:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0011d8b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d91:	83 e2 fe             	and    edx,0xfffffffe
c0011d94:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d9a:	e9 a9 03 00 00       	jmp    c0012148 <scanMADT()+0x4d4>
c0011d9f:	90                   	nop
c0011da0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011da8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011daf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011db3:	0f 87 8f 03 00 00    	ja     c0012148 <scanMADT()+0x4d4>
c0011db9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011dc1:	0f 87 81 03 00 00    	ja     c0012148 <scanMADT()+0x4d4>
c0011dc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dcb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011dcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dd3:	8d 50 01             	lea    edx,[eax+0x1]
c0011dd6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011dda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dde:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011de2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011de6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dea:	8d 50 01             	lea    edx,[eax+0x1]
c0011ded:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011df1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011df5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011df9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011dfd:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011e02:	0f 86 3c 03 00 00    	jbe    c0012144 <scanMADT()+0x4d0>
c0011e08:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011e0d:	75 59                	jne    c0011e68 <scanMADT()+0x1f4>
c0011e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e13:	8d 50 01             	lea    edx,[eax+0x1]
c0011e16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e1a:	8a 15 40 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028b40
c0011e20:	0f b6 d2             	movzx  edx,dl
c0011e23:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e27:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e2b:	88 82 80 8b 02 c0    	mov    BYTE PTR [edx-0x3ffd7480],al
c0011e31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e35:	8d 50 01             	lea    edx,[eax+0x1]
c0011e38:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e3c:	8a 15 40 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028b40
c0011e42:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011e45:	88 0d 40 8b 02 c0    	mov    BYTE PTR ds:0xc0028b40,cl
c0011e4b:	0f b6 d2             	movzx  edx,dl
c0011e4e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e52:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e56:	88 82 60 8b 02 c0    	mov    BYTE PTR [edx-0x3ffd74a0],al
c0011e5c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e61:	e9 c6 02 00 00       	jmp    c001212c <scanMADT()+0x4b8>
c0011e66:	66 90                	xchg   ax,ax
c0011e68:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011e6d:	0f 85 15 01 00 00    	jne    c0011f88 <scanMADT()+0x314>
c0011e73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e77:	8d 50 01             	lea    edx,[eax+0x1]
c0011e7a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e7e:	8a 15 00 8a 02 c0    	mov    dl,BYTE PTR ds:0xc0028a00
c0011e84:	0f b6 d2             	movzx  edx,dl
c0011e87:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e8b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e8f:	88 82 20 8a 02 c0    	mov    BYTE PTR [edx-0x3ffd75e0],al
c0011e95:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011e99:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ea1:	01 d0                	add    eax,edx
c0011ea3:	83 c0 2c             	add    eax,0x2c
c0011ea6:	8a 00                	mov    al,BYTE PTR [eax]
c0011ea8:	0f b6 d0             	movzx  edx,al
c0011eab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eaf:	8d 48 01             	lea    ecx,[eax+0x1]
c0011eb2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011eb6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011eba:	0f b6 c0             	movzx  eax,al
c0011ebd:	c1 e0 08             	shl    eax,0x8
c0011ec0:	89 d1                	mov    ecx,edx
c0011ec2:	09 c1                	or     ecx,eax
c0011ec4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ec8:	8d 50 02             	lea    edx,[eax+0x2]
c0011ecb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ecf:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ed3:	0f b6 c0             	movzx  eax,al
c0011ed6:	c1 e0 10             	shl    eax,0x10
c0011ed9:	09 c1                	or     ecx,eax
c0011edb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011edf:	8d 50 03             	lea    edx,[eax+0x3]
c0011ee2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ee6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011eea:	0f b6 c0             	movzx  eax,al
c0011eed:	c1 e0 18             	shl    eax,0x18
c0011ef0:	09 c1                	or     ecx,eax
c0011ef2:	89 ca                	mov    edx,ecx
c0011ef4:	a0 00 8a 02 c0       	mov    al,ds:0xc0028a00
c0011ef9:	0f b6 c0             	movzx  eax,al
c0011efc:	89 14 85 40 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd75c0],edx
c0011f03:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f08:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f10:	01 d0                	add    eax,edx
c0011f12:	83 c0 2c             	add    eax,0x2c
c0011f15:	8a 00                	mov    al,BYTE PTR [eax]
c0011f17:	0f b6 d0             	movzx  edx,al
c0011f1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f1e:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f25:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f29:	0f b6 c0             	movzx  eax,al
c0011f2c:	c1 e0 08             	shl    eax,0x8
c0011f2f:	89 d1                	mov    ecx,edx
c0011f31:	09 c1                	or     ecx,eax
c0011f33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f37:	8d 50 02             	lea    edx,[eax+0x2]
c0011f3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f3e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f42:	0f b6 c0             	movzx  eax,al
c0011f45:	c1 e0 10             	shl    eax,0x10
c0011f48:	09 c1                	or     ecx,eax
c0011f4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f4e:	8d 50 03             	lea    edx,[eax+0x3]
c0011f51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f55:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f59:	0f b6 c0             	movzx  eax,al
c0011f5c:	c1 e0 18             	shl    eax,0x18
c0011f5f:	09 c1                	or     ecx,eax
c0011f61:	89 ca                	mov    edx,ecx
c0011f63:	a0 00 8a 02 c0       	mov    al,ds:0xc0028a00
c0011f68:	0f b6 c0             	movzx  eax,al
c0011f6b:	89 14 85 c0 8a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7540],edx
c0011f72:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f77:	a0 00 8a 02 c0       	mov    al,ds:0xc0028a00
c0011f7c:	40                   	inc    eax
c0011f7d:	a2 00 8a 02 c0       	mov    ds:0xc0028a00,al
c0011f82:	e9 a5 01 00 00       	jmp    c001212c <scanMADT()+0x4b8>
c0011f87:	90                   	nop
c0011f88:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011f8d:	0f 85 e9 00 00 00    	jne    c001207c <scanMADT()+0x408>
c0011f93:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f97:	8d 50 01             	lea    edx,[eax+0x1]
c0011f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fa2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fa6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011faa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fae:	8d 50 01             	lea    edx,[eax+0x1]
c0011fb1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011fb5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fb9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011fbd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011fc1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fc5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fc9:	01 d0                	add    eax,edx
c0011fcb:	83 c0 2c             	add    eax,0x2c
c0011fce:	8a 00                	mov    al,BYTE PTR [eax]
c0011fd0:	0f b6 d0             	movzx  edx,al
c0011fd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fd7:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fde:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011fe2:	0f b6 c0             	movzx  eax,al
c0011fe5:	c1 e0 08             	shl    eax,0x8
c0011fe8:	89 d1                	mov    ecx,edx
c0011fea:	09 c1                	or     ecx,eax
c0011fec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ff0:	8d 50 02             	lea    edx,[eax+0x2]
c0011ff3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ff7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ffb:	0f b6 c0             	movzx  eax,al
c0011ffe:	c1 e0 10             	shl    eax,0x10
c0012001:	09 c1                	or     ecx,eax
c0012003:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012007:	8d 50 03             	lea    edx,[eax+0x3]
c001200a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001200e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012012:	0f b6 c0             	movzx  eax,al
c0012015:	c1 e0 18             	shl    eax,0x18
c0012018:	09 c8                	or     eax,ecx
c001201a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001201e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012023:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012027:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001202b:	01 d0                	add    eax,edx
c001202d:	83 c0 2c             	add    eax,0x2c
c0012030:	8a 00                	mov    al,BYTE PTR [eax]
c0012032:	0f b6 c0             	movzx  eax,al
c0012035:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012039:	8d 4a 01             	lea    ecx,[edx+0x1]
c001203c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012040:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012044:	0f b6 d2             	movzx  edx,dl
c0012047:	c1 e2 08             	shl    edx,0x8
c001204a:	09 d0                	or     eax,edx
c001204c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0012051:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012056:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001205b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001205f:	88 90 e0 77 02 c0    	mov    BYTE PTR [eax-0x3ffd8820],dl
c0012065:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001206a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001206f:	66 89 84 12 e0 89 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7620],ax
c0012077:	e9 b0 00 00 00       	jmp    c001212c <scanMADT()+0x4b8>
c001207c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0012081:	0f 85 99 00 00 00    	jne    c0012120 <scanMADT()+0x4ac>
c0012087:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001208b:	8d 50 01             	lea    edx,[eax+0x1]
c001208e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012092:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012096:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001209a:	0f b6 c0             	movzx  eax,al
c001209d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120a9:	01 d0                	add    eax,edx
c00120ab:	83 c0 2c             	add    eax,0x2c
c00120ae:	8a 00                	mov    al,BYTE PTR [eax]
c00120b0:	0f b6 d0             	movzx  edx,al
c00120b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00120ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00120be:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00120c2:	0f b6 c0             	movzx  eax,al
c00120c5:	c1 e0 08             	shl    eax,0x8
c00120c8:	09 d0                	or     eax,edx
c00120ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120ce:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00120d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120d7:	8d 50 01             	lea    edx,[eax+0x1]
c00120da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00120de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120e2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00120e6:	0f b6 c0             	movzx  eax,al
c00120e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120f1:	c1 e0 08             	shl    eax,0x8
c00120f4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00120f8:	89 c1                	mov    ecx,eax
c00120fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120fe:	c1 e0 18             	shl    eax,0x18
c0012101:	89 c3                	mov    ebx,eax
c0012103:	a1 50 89 02 c0       	mov    eax,ds:0xc0028950
c0012108:	8d 50 01             	lea    edx,[eax+0x1]
c001210b:	89 15 50 89 02 c0    	mov    DWORD PTR ds:0xc0028950,edx
c0012111:	09 d9                	or     ecx,ebx
c0012113:	89 ca                	mov    edx,ecx
c0012115:	89 14 85 60 89 02 c0 	mov    DWORD PTR [eax*4-0x3ffd76a0],edx
c001211c:	eb 0e                	jmp    c001212c <scanMADT()+0x4b8>
c001211e:	66 90                	xchg   ax,ax
c0012120:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012125:	75 05                	jne    c001212c <scanMADT()+0x4b8>
c0012127:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001212c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0012131:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012135:	01 d0                	add    eax,edx
c0012137:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001213b:	e9 68 fc ff ff       	jmp    c0011da8 <scanMADT()+0x134>
c0012140:	90                   	nop
c0012141:	eb 05                	jmp    c0012148 <scanMADT()+0x4d4>
c0012143:	90                   	nop
c0012144:	90                   	nop
c0012145:	8d 76 00             	lea    esi,[esi+0x0]
c0012148:	83 c4 38             	add    esp,0x38
c001214b:	5b                   	pop    ebx
c001214c:	c3                   	ret    
c001214d:	90                   	nop
c001214e:	66 90                	xchg   ax,ax

c0012150 <ACPI::ACPI()>:
c0012150:	83 ec 0c             	sub    esp,0xc
c0012153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012157:	83 ec 08             	sub    esp,0x8
c001215a:	68 83 55 02 c0       	push   0xc0025583
c001215f:	50                   	push   eax
c0012160:	e8 dd c2 ff ff       	call   c000e442 <Device::Device(char const*)>
c0012165:	83 c4 10             	add    esp,0x10
c0012168:	ba 44 57 02 c0       	mov    edx,0xc0025744
c001216d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012171:	89 10                	mov    DWORD PTR [eax],edx
c0012173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012177:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001217e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012182:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001218c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012190:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001219a:	83 ec 0c             	sub    esp,0xc
c001219d:	68 88 55 02 c0       	push   0xc0025588
c00121a2:	e8 c2 78 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00121a7:	83 c4 10             	add    esp,0x10
c00121aa:	e8 c5 fa ff ff       	call   c0011c74 <scanMADT()>
c00121af:	90                   	nop
c00121b0:	83 c4 0c             	add    esp,0xc
c00121b3:	c3                   	ret    

c00121b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00121b4:	83 ec 2c             	sub    esp,0x2c
c00121b7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00121bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121bf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00121c3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00121c7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00121cc:	88 d0                	mov    al,dl
c00121ce:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00121d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00121d7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121df:	90                   	nop
c00121e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121e4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121ea:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00121ee:	0f 8d 9c 00 00 00    	jge    c0012290 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c00121f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121fc:	83 c2 2a             	add    edx,0x2a
c00121ff:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0012203:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012208:	75 7a                	jne    c0012284 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001220a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001220e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012212:	83 c2 2a             	add    edx,0x2a
c0012215:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0012219:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001221d:	75 65                	jne    c0012284 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c001221f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012224:	74 3a                	je     c0012260 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0012226:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001222a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001222e:	83 c2 2a             	add    edx,0x2a
c0012231:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012235:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012239:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001223c:	39 c2                	cmp    edx,eax
c001223e:	74 10                	je     c0012250 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0012240:	83 ec 0c             	sub    esp,0xc
c0012243:	68 dc 53 02 c0       	push   0xc00253dc
c0012248:	e8 7a 27 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c001224d:	83 c4 10             	add    esp,0x10
c0012250:	83 ec 0c             	sub    esp,0xc
c0012253:	68 96 55 02 c0       	push   0xc0025596
c0012258:	e8 6a 27 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c001225d:	83 c4 10             	add    esp,0x10
c0012260:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012264:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012268:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001226c:	83 c2 2a             	add    edx,0x2a
c001226f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0012273:	8b 02                	mov    eax,DWORD PTR [edx]
c0012275:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012278:	89 01                	mov    DWORD PTR [ecx],eax
c001227a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001227d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012282:	66 90                	xchg   ax,ax
c0012284:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012288:	e9 53 ff ff ff       	jmp    c00121e0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001228d:	8d 76 00             	lea    esi,[esi+0x0]
c0012290:	90                   	nop
c0012291:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012295:	83 c4 2c             	add    esp,0x2c
c0012298:	c2 04 00             	ret    0x4
c001229b:	90                   	nop

c001229c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001229c:	83 ec 1c             	sub    esp,0x1c
c001229f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00122a3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00122a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122ab:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00122b0:	88 c8                	mov    al,cl
c00122b2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00122b6:	88 d0                	mov    al,dl
c00122b8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00122bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122c0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00122c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122ca:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00122cd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00122d1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00122d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122d9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00122df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00122e3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00122e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122ea:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00122ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122f3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00122f9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00122fd:	8d 48 01             	lea    ecx,[eax+0x1]
c0012300:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012304:	83 c2 2a             	add    edx,0x2a
c0012307:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001230b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001230f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012319:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001231c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012320:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012328:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001232e:	8d 50 01             	lea    edx,[eax+0x1]
c0012331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012335:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001233b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001233f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012345:	3d 00 02 00 00       	cmp    eax,0x200
c001234a:	75 10                	jne    c001235c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001234c:	83 ec 0c             	sub    esp,0xc
c001234f:	68 a5 55 02 c0       	push   0xc00255a5
c0012354:	e8 6e 26 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c0012359:	83 c4 10             	add    esp,0x10
c001235c:	90                   	nop
c001235d:	83 c4 1c             	add    esp,0x1c
c0012360:	c3                   	ret    
c0012361:	90                   	nop
c0012362:	66 90                	xchg   ax,ax

c0012364 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012364:	b8 00 00 00 00       	mov    eax,0x0
c0012369:	c3                   	ret    
c001236a:	66 90                	xchg   ax,ax

c001236c <ACPI::detectPCI()>:
c001236c:	53                   	push   ebx
c001236d:	83 ec 68             	sub    esp,0x68
c0012370:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0012375:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c001237a:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c001237f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012385:	83 e0 04             	and    eax,0x4
c0012388:	84 c0                	test   al,al
c001238a:	74 2c                	je     c00123b8 <ACPI::detectPCI()+0x4c>
c001238c:	a1 48 89 02 c0       	mov    eax,ds:0xc0028948
c0012391:	83 ec 08             	sub    esp,0x8
c0012394:	68 c2 55 02 c0       	push   0xc00255c2
c0012399:	50                   	push   eax
c001239a:	e8 5d f8 ff ff       	call   c0011bfc <findDataTable(unsigned char*, char*)>
c001239f:	83 c4 10             	add    esp,0x10
c00123a2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00123a6:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c00123ab:	74 0b                	je     c00123b8 <ACPI::detectPCI()+0x4c>
c00123ad:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123b2:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00123b7:	90                   	nop
c00123b8:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c00123c0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123c4:	8a 00                	mov    al,BYTE PTR [eax]
c00123c6:	3c 01                	cmp    al,0x1
c00123c8:	75 0e                	jne    c00123d8 <ACPI::detectPCI()+0x6c>
c00123ca:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123cf:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00123d4:	eb 2a                	jmp    c0012400 <ACPI::detectPCI()+0x94>
c00123d6:	66 90                	xchg   ax,ax
c00123d8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123dc:	8a 00                	mov    al,BYTE PTR [eax]
c00123de:	3c 02                	cmp    al,0x2
c00123e0:	75 1e                	jne    c0012400 <ACPI::detectPCI()+0x94>
c00123e2:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123e7:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00123ec:	74 12                	je     c0012400 <ACPI::detectPCI()+0x94>
c00123ee:	83 ec 0c             	sub    esp,0xc
c00123f1:	68 0c 54 02 c0       	push   0xc002540c
c00123f6:	e8 cc 25 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c00123fb:	83 c4 10             	add    esp,0x10
c00123fe:	66 90                	xchg   ax,ax
c0012400:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012404:	83 f0 01             	xor    eax,0x1
c0012407:	84 c0                	test   al,al
c0012409:	74 41                	je     c001244c <ACPI::detectPCI()+0xe0>
c001240b:	e8 40 dd fe ff       	call   c0000150 <manualPCIProbe>
c0012410:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0012414:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0012419:	75 0d                	jne    c0012428 <ACPI::detectPCI()+0xbc>
c001241b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012420:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012425:	eb 25                	jmp    c001244c <ACPI::detectPCI()+0xe0>
c0012427:	90                   	nop
c0012428:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c001242d:	75 1d                	jne    c001244c <ACPI::detectPCI()+0xe0>
c001242f:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012434:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012439:	74 11                	je     c001244c <ACPI::detectPCI()+0xe0>
c001243b:	83 ec 0c             	sub    esp,0xc
c001243e:	68 0c 54 02 c0       	push   0xc002540c
c0012443:	e8 7f 25 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c0012448:	83 c4 10             	add    esp,0x10
c001244b:	90                   	nop
c001244c:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c0012451:	0f 84 49 03 00 00    	je     c00127a0 <ACPI::detectPCI()+0x434>
c0012457:	83 ec 0c             	sub    esp,0xc
c001245a:	68 c7 55 02 c0       	push   0xc00255c7
c001245f:	e8 05 76 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012464:	83 c4 10             	add    esp,0x10
c0012467:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c001246c:	0f 84 8e 00 00 00    	je     c0012500 <ACPI::detectPCI()+0x194>
c0012472:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0012477:	25 00 08 00 00       	and    eax,0x800
c001247c:	0f 84 16 01 00 00    	je     c0012598 <ACPI::detectPCI()+0x22c>
c0012482:	83 ec 0c             	sub    esp,0xc
c0012485:	68 34 54 02 c0       	push   0xc0025434
c001248a:	e8 da 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001248f:	83 c4 10             	add    esp,0x10
c0012492:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0012497:	25 80 00 00 00       	and    eax,0x80
c001249c:	0f 85 f6 00 00 00    	jne    c0012598 <ACPI::detectPCI()+0x22c>
c00124a2:	66 90                	xchg   ax,ax
c00124a4:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c00124ab:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c00124b0:	89 c2                	mov    edx,eax
c00124b2:	ec                   	in     al,dx
c00124b3:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c00124b7:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c00124bb:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c00124bf:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00124c4:	74 0a                	je     c00124d0 <ACPI::detectPCI()+0x164>
c00124c6:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00124cb:	74 03                	je     c00124d0 <ACPI::detectPCI()+0x164>
c00124cd:	eb d5                	jmp    c00124a4 <ACPI::detectPCI()+0x138>
c00124cf:	90                   	nop
c00124d0:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00124d7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00124dc:	89 c2                	mov    edx,eax
c00124de:	ec                   	in     al,dx
c00124df:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00124e3:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00124e7:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00124eb:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00124f0:	74 de                	je     c00124d0 <ACPI::detectPCI()+0x164>
c00124f2:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00124f7:	0f 85 93 00 00 00    	jne    c0012590 <ACPI::detectPCI()+0x224>
c00124fd:	eb d1                	jmp    c00124d0 <ACPI::detectPCI()+0x164>
c00124ff:	90                   	nop
c0012500:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012504:	83 f0 01             	xor    eax,0x1
c0012507:	84 c0                	test   al,al
c0012509:	0f 84 89 00 00 00    	je     c0012598 <ACPI::detectPCI()+0x22c>
c001250f:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0012514:	25 00 08 00 00       	and    eax,0x800
c0012519:	74 7d                	je     c0012598 <ACPI::detectPCI()+0x22c>
c001251b:	83 ec 0c             	sub    esp,0xc
c001251e:	68 58 54 02 c0       	push   0xc0025458
c0012523:	e8 41 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012528:	83 c4 10             	add    esp,0x10
c001252b:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0012530:	25 80 00 00 00       	and    eax,0x80
c0012535:	75 61                	jne    c0012598 <ACPI::detectPCI()+0x22c>
c0012537:	90                   	nop
c0012538:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001253f:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012544:	89 c2                	mov    edx,eax
c0012546:	ec                   	in     al,dx
c0012547:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001254b:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001254f:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c0012553:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012558:	74 0a                	je     c0012564 <ACPI::detectPCI()+0x1f8>
c001255a:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c001255f:	74 03                	je     c0012564 <ACPI::detectPCI()+0x1f8>
c0012561:	eb d5                	jmp    c0012538 <ACPI::detectPCI()+0x1cc>
c0012563:	90                   	nop
c0012564:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c001256b:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0012570:	89 c2                	mov    edx,eax
c0012572:	ec                   	in     al,dx
c0012573:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012577:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c001257b:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001257f:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012584:	74 de                	je     c0012564 <ACPI::detectPCI()+0x1f8>
c0012586:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c001258b:	75 07                	jne    c0012594 <ACPI::detectPCI()+0x228>
c001258d:	eb d5                	jmp    c0012564 <ACPI::detectPCI()+0x1f8>
c001258f:	90                   	nop
c0012590:	90                   	nop
c0012591:	eb 05                	jmp    c0012598 <ACPI::detectPCI()+0x22c>
c0012593:	90                   	nop
c0012594:	90                   	nop
c0012595:	8d 76 00             	lea    esi,[esi+0x0]
c0012598:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c00125a0:	83 ec 0c             	sub    esp,0xc
c00125a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00125a7:	e8 63 74 ff ff       	call   c0009a0f <malloc>
c00125ac:	83 c4 10             	add    esp,0x10
c00125af:	89 c3                	mov    ebx,eax
c00125b1:	83 ec 0c             	sub    esp,0xc
c00125b4:	53                   	push   ebx
c00125b5:	e8 30 ad 00 00       	call   c001d2ea <PCI::PCI()>
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c00125c1:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c00125c6:	25 00 08 00 00       	and    eax,0x800
c00125cb:	74 7b                	je     c0012648 <ACPI::detectPCI()+0x2dc>
c00125cd:	83 ec 0c             	sub    esp,0xc
c00125d0:	68 df 55 02 c0       	push   0xc00255df
c00125d5:	e8 8f 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00125da:	83 c4 10             	add    esp,0x10
c00125dd:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c00125e2:	25 80 00 00 00       	and    eax,0x80
c00125e7:	75 5f                	jne    c0012648 <ACPI::detectPCI()+0x2dc>
c00125e9:	8d 76 00             	lea    esi,[esi+0x0]
c00125ec:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c00125f3:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00125f8:	89 c2                	mov    edx,eax
c00125fa:	ec                   	in     al,dx
c00125fb:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c00125ff:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012603:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012607:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c001260c:	74 0a                	je     c0012618 <ACPI::detectPCI()+0x2ac>
c001260e:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012613:	74 03                	je     c0012618 <ACPI::detectPCI()+0x2ac>
c0012615:	eb d5                	jmp    c00125ec <ACPI::detectPCI()+0x280>
c0012617:	90                   	nop
c0012618:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c001261f:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012624:	89 c2                	mov    edx,eax
c0012626:	ec                   	in     al,dx
c0012627:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001262b:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c001262f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012633:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012638:	74 de                	je     c0012618 <ACPI::detectPCI()+0x2ac>
c001263a:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001263f:	75 03                	jne    c0012644 <ACPI::detectPCI()+0x2d8>
c0012641:	eb d5                	jmp    c0012618 <ACPI::detectPCI()+0x2ac>
c0012643:	90                   	nop
c0012644:	90                   	nop
c0012645:	8d 76 00             	lea    esi,[esi+0x0]
c0012648:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001264c:	83 ec 08             	sub    esp,0x8
c001264f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012653:	50                   	push   eax
c0012654:	e8 e5 bb ff ff       	call   c000e23e <Device::addChild(Device*)>
c0012659:	83 c4 10             	add    esp,0x10
c001265c:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0012661:	25 00 08 00 00       	and    eax,0x800
c0012666:	74 78                	je     c00126e0 <ACPI::detectPCI()+0x374>
c0012668:	83 ec 0c             	sub    esp,0xc
c001266b:	68 e5 55 02 c0       	push   0xc00255e5
c0012670:	e8 f4 73 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012675:	83 c4 10             	add    esp,0x10
c0012678:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c001267d:	25 80 00 00 00       	and    eax,0x80
c0012682:	75 5c                	jne    c00126e0 <ACPI::detectPCI()+0x374>
c0012684:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c001268b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012690:	89 c2                	mov    edx,eax
c0012692:	ec                   	in     al,dx
c0012693:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012697:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c001269b:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c001269f:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c00126a4:	74 0a                	je     c00126b0 <ACPI::detectPCI()+0x344>
c00126a6:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c00126ab:	74 03                	je     c00126b0 <ACPI::detectPCI()+0x344>
c00126ad:	eb d5                	jmp    c0012684 <ACPI::detectPCI()+0x318>
c00126af:	90                   	nop
c00126b0:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c00126b7:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00126bc:	89 c2                	mov    edx,eax
c00126be:	ec                   	in     al,dx
c00126bf:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c00126c3:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00126c7:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c00126cb:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c00126d0:	74 de                	je     c00126b0 <ACPI::detectPCI()+0x344>
c00126d2:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c00126d7:	75 03                	jne    c00126dc <ACPI::detectPCI()+0x370>
c00126d9:	eb d5                	jmp    c00126b0 <ACPI::detectPCI()+0x344>
c00126db:	90                   	nop
c00126dc:	90                   	nop
c00126dd:	8d 76 00             	lea    esi,[esi+0x0]
c00126e0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00126e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00126e6:	83 c0 08             	add    eax,0x8
c00126e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00126eb:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00126f0:	74 0a                	je     c00126fc <ACPI::detectPCI()+0x390>
c00126f2:	ba 01 00 00 00       	mov    edx,0x1
c00126f7:	eb 0b                	jmp    c0012704 <ACPI::detectPCI()+0x398>
c00126f9:	8d 76 00             	lea    esi,[esi+0x0]
c00126fc:	ba 02 00 00 00       	mov    edx,0x2
c0012701:	8d 76 00             	lea    esi,[esi+0x0]
c0012704:	6a 00                	push   0x0
c0012706:	6a 00                	push   0x0
c0012708:	52                   	push   edx
c0012709:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001270d:	ff d0                	call   eax
c001270f:	83 c4 10             	add    esp,0x10
c0012712:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0012717:	25 00 08 00 00       	and    eax,0x800
c001271c:	0f 84 26 01 00 00    	je     c0012848 <ACPI::detectPCI()+0x4dc>
c0012722:	83 ec 0c             	sub    esp,0xc
c0012725:	68 eb 55 02 c0       	push   0xc00255eb
c001272a:	e8 3a 73 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001272f:	83 c4 10             	add    esp,0x10
c0012732:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0012737:	25 80 00 00 00       	and    eax,0x80
c001273c:	0f 85 06 01 00 00    	jne    c0012848 <ACPI::detectPCI()+0x4dc>
c0012742:	66 90                	xchg   ax,ax
c0012744:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c001274b:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012750:	89 c2                	mov    edx,eax
c0012752:	ec                   	in     al,dx
c0012753:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012757:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001275b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001275f:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012764:	74 0a                	je     c0012770 <ACPI::detectPCI()+0x404>
c0012766:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c001276b:	74 03                	je     c0012770 <ACPI::detectPCI()+0x404>
c001276d:	eb d5                	jmp    c0012744 <ACPI::detectPCI()+0x3d8>
c001276f:	90                   	nop
c0012770:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012777:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001277c:	89 c2                	mov    edx,eax
c001277e:	ec                   	in     al,dx
c001277f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012783:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012787:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001278b:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012790:	74 de                	je     c0012770 <ACPI::detectPCI()+0x404>
c0012792:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012797:	0f 85 a7 00 00 00    	jne    c0012844 <ACPI::detectPCI()+0x4d8>
c001279d:	eb d1                	jmp    c0012770 <ACPI::detectPCI()+0x404>
c001279f:	90                   	nop
c00127a0:	83 ec 0c             	sub    esp,0xc
c00127a3:	68 f1 55 02 c0       	push   0xc00255f1
c00127a8:	e8 52 a5 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	83 ec 0c             	sub    esp,0xc
c00127b3:	68 fc 55 02 c0       	push   0xc00255fc
c00127b8:	e8 ac 72 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00127bd:	83 c4 10             	add    esp,0x10
c00127c0:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c00127c8:	83 ec 0c             	sub    esp,0xc
c00127cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00127cf:	e8 3b 72 ff ff       	call   c0009a0f <malloc>
c00127d4:	83 c4 10             	add    esp,0x10
c00127d7:	89 c3                	mov    ebx,eax
c00127d9:	83 ec 0c             	sub    esp,0xc
c00127dc:	53                   	push   ebx
c00127dd:	e8 72 bc 00 00       	call   c001e454 <IDE::IDE()>
c00127e2:	83 c4 10             	add    esp,0x10
c00127e5:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00127e9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00127ed:	83 ec 08             	sub    esp,0x8
c00127f0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00127f4:	50                   	push   eax
c00127f5:	e8 44 ba ff ff       	call   c000e23e <Device::addChild(Device*)>
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012801:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001280b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001280f:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012818:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001281c:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012825:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012829:	8b 00                	mov    eax,DWORD PTR [eax]
c001282b:	83 c0 08             	add    eax,0x8
c001282e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012830:	6a 00                	push   0x0
c0012832:	6a 00                	push   0x0
c0012834:	6a 00                	push   0x0
c0012836:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001283a:	ff d0                	call   eax
c001283c:	83 c4 10             	add    esp,0x10
c001283f:	eb 07                	jmp    c0012848 <ACPI::detectPCI()+0x4dc>
c0012841:	8d 76 00             	lea    esi,[esi+0x0]
c0012844:	90                   	nop
c0012845:	8d 76 00             	lea    esi,[esi+0x0]
c0012848:	90                   	nop
c0012849:	83 c4 68             	add    esp,0x68
c001284c:	5b                   	pop    ebx
c001284d:	c3                   	ret    
c001284e:	66 90                	xchg   ax,ax

c0012850 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012850:	83 ec 1c             	sub    esp,0x1c
c0012853:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012857:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001285a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001285e:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0012863:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012868:	83 ec 08             	sub    esp,0x8
c001286b:	52                   	push   edx
c001286c:	50                   	push   eax
c001286d:	e8 6c 67 ff ff       	call   c0008fde <Computer::readCMOS(unsigned char)>
c0012872:	83 c4 10             	add    esp,0x10
c0012875:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012879:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c001287e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012883:	83 ec 04             	sub    esp,0x4
c0012886:	6a 01                	push   0x1
c0012888:	52                   	push   edx
c0012889:	50                   	push   eax
c001288a:	e8 2b 69 ff ff       	call   c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	90                   	nop
c0012893:	83 c4 1c             	add    esp,0x1c
c0012896:	c3                   	ret    
c0012897:	90                   	nop

c0012898 <ACPI::sleep()>:
c0012898:	83 ec 0c             	sub    esp,0xc
c001289b:	83 ec 0c             	sub    esp,0xc
c001289e:	68 11 56 02 c0       	push   0xc0025611
c00128a3:	e8 57 a4 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00128a8:	83 c4 10             	add    esp,0x10
c00128ab:	a1 20 87 02 c0       	mov    eax,ds:0xc0028720
c00128b0:	85 c0                	test   eax,eax
c00128b2:	74 18                	je     c00128cc <ACPI::sleep()+0x34>
c00128b4:	83 ec 0c             	sub    esp,0xc
c00128b7:	68 1e 56 02 c0       	push   0xc002561e
c00128bc:	e8 3e a4 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00128c1:	83 c4 10             	add    esp,0x10
c00128c4:	a1 20 87 02 c0       	mov    eax,ds:0xc0028720
c00128c9:	ff d0                	call   eax
c00128cb:	90                   	nop
c00128cc:	90                   	nop
c00128cd:	83 c4 0c             	add    esp,0xc
c00128d0:	c3                   	ret    
c00128d1:	90                   	nop
c00128d2:	66 90                	xchg   ax,ax

c00128d4 <ACPI::open(int, int, void*)>:
c00128d4:	57                   	push   edi
c00128d5:	56                   	push   esi
c00128d6:	53                   	push   ebx
c00128d7:	81 ec 70 01 00 00    	sub    esp,0x170
c00128dd:	83 ec 0c             	sub    esp,0xc
c00128e0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00128e7:	e8 80 fa ff ff       	call   c001236c <ACPI::detectPCI()>
c00128ec:	83 c4 10             	add    esp,0x10
c00128ef:	83 ec 0c             	sub    esp,0xc
c00128f2:	68 7c 54 02 c0       	push   0xc002547c
c00128f7:	e8 6d 71 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00128fc:	83 c4 10             	add    esp,0x10
c00128ff:	83 ec 0c             	sub    esp,0xc
c0012902:	68 38 56 02 c0       	push   0xc0025638
c0012907:	e8 c3 49 00 00       	call   c00172cf <Thr::loadKernelSymbolTable(char const*)>
c001290c:	83 c4 10             	add    esp,0x10
c001290f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012917:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012922:	83 ec 0c             	sub    esp,0xc
c0012925:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001292c:	e8 de 70 ff ff       	call   c0009a0f <malloc>
c0012931:	83 c4 10             	add    esp,0x10
c0012934:	89 c3                	mov    ebx,eax
c0012936:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c001293b:	83 ec 04             	sub    esp,0x4
c001293e:	50                   	push   eax
c001293f:	68 56 56 02 c0       	push   0xc0025656
c0012944:	53                   	push   ebx
c0012945:	e8 20 a9 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001294a:	83 c4 10             	add    esp,0x10
c001294d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012954:	83 ec 08             	sub    esp,0x8
c0012957:	6a 01                	push   0x1
c0012959:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012960:	e8 c7 a9 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0012965:	83 c4 10             	add    esp,0x10
c0012968:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001296f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012977:	75 17                	jne    c0012990 <ACPI::open(int, int, void*)+0xbc>
c0012979:	83 ec 0c             	sub    esp,0xc
c001297c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012983:	e8 02 aa ff ff       	call   c000d38a <File::close()>
c0012988:	83 c4 10             	add    esp,0x10
c001298b:	eb 0b                	jmp    c0012998 <ACPI::open(int, int, void*)+0xc4>
c001298d:	8d 76 00             	lea    esi,[esi+0x0]
c0012990:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012998:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00129a0:	74 1e                	je     c00129c0 <ACPI::open(int, int, void*)+0xec>
c00129a2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00129a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00129ab:	83 c0 08             	add    eax,0x8
c00129ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00129b0:	83 ec 0c             	sub    esp,0xc
c00129b3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00129ba:	ff d0                	call   eax
c00129bc:	83 c4 10             	add    esp,0x10
c00129bf:	90                   	nop
c00129c0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00129c7:	83 f0 01             	xor    eax,0x1
c00129ca:	84 c0                	test   al,al
c00129cc:	74 42                	je     c0012a10 <ACPI::open(int, int, void*)+0x13c>
c00129ce:	83 ec 0c             	sub    esp,0xc
c00129d1:	68 74 56 02 c0       	push   0xc0025674
c00129d6:	e8 8e 70 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	83 ec 04             	sub    esp,0x4
c00129e1:	6a 0c                	push   0xc
c00129e3:	68 8f 56 02 c0       	push   0xc002568f
c00129e8:	68 a0 56 02 c0       	push   0xc00256a0
c00129ed:	e8 47 2f 00 00       	call   c0015939 <Reg::readIntWithDefault(char*, char*, int)>
c00129f2:	83 c4 10             	add    esp,0x10
c00129f5:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00129fc:	83 ec 0c             	sub    esp,0xc
c00129ff:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012a06:	e8 d8 91 ff ff       	call   c000bbe3 <Virt::setupPageSwapping(int)>
c0012a0b:	83 c4 10             	add    esp,0x10
c0012a0e:	66 90                	xchg   ax,ax
c0012a10:	83 ec 0c             	sub    esp,0xc
c0012a13:	68 e6 3d 02 c0       	push   0xc0023de6
c0012a18:	e8 4c 70 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012a1d:	83 c4 10             	add    esp,0x10
c0012a20:	8b 1d e8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e8
c0012a26:	83 ec 08             	sub    esp,0x8
c0012a29:	6a 01                	push   0x1
c0012a2b:	68 a7 56 02 c0       	push   0xc00256a7
c0012a30:	e8 11 53 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c0012a35:	83 c4 10             	add    esp,0x10
c0012a38:	83 ec 08             	sub    esp,0x8
c0012a3b:	53                   	push   ebx
c0012a3c:	50                   	push   eax
c0012a3d:	e8 35 55 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c0012a42:	83 c4 10             	add    esp,0x10
c0012a45:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012a4c:	83 ec 08             	sub    esp,0x8
c0012a4f:	6a 12                	push   0x12
c0012a51:	50                   	push   eax
c0012a52:	e8 6b bb ff ff       	call   c000e5c2 <getDevicesOfType(DeviceType)>
c0012a57:	83 c4 0c             	add    esp,0xc
c0012a5a:	66 90                	xchg   ax,ax
c0012a5c:	83 ec 0c             	sub    esp,0xc
c0012a5f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a66:	50                   	push   eax
c0012a67:	e8 64 05 01 00       	call   c0022fd0 <LinkedList<Device>::isEmpty()>
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	83 f0 01             	xor    eax,0x1
c0012a72:	84 c0                	test   al,al
c0012a74:	0f 84 46 01 00 00    	je     c0012bc0 <ACPI::open(int, int, void*)+0x2ec>
c0012a7a:	83 ec 0c             	sub    esp,0xc
c0012a7d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a84:	50                   	push   eax
c0012a85:	e8 62 05 01 00       	call   c0022fec <LinkedList<Device>::getFirstElement()>
c0012a8a:	83 c4 10             	add    esp,0x10
c0012a8d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012a94:	83 ec 0c             	sub    esp,0xc
c0012a97:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a9e:	50                   	push   eax
c0012a9f:	e8 50 05 01 00       	call   c0022ff4 <LinkedList<Device>::removeFirst()>
c0012aa4:	83 c4 10             	add    esp,0x10
c0012aa7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012aae:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012ab5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012abc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ac0:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012ac6:	ba 09 00 00 00       	mov    edx,0x9
c0012acb:	fc                   	cld    
c0012acc:	89 c7                	mov    edi,eax
c0012ace:	89 de                	mov    esi,ebx
c0012ad0:	89 d1                	mov    ecx,edx
c0012ad2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012ad4:	83 ec 08             	sub    esp,0x8
c0012ad7:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012adb:	50                   	push   eax
c0012adc:	83 ec 24             	sub    esp,0x24
c0012adf:	89 e0                	mov    eax,esp
c0012ae1:	89 c3                	mov    ebx,eax
c0012ae3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012ae7:	ba 09 00 00 00       	mov    edx,0x9
c0012aec:	89 df                	mov    edi,ebx
c0012aee:	89 c6                	mov    esi,eax
c0012af0:	89 d1                	mov    ecx,edx
c0012af2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012af4:	e8 cf ac 00 00       	call   c001d7c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012af9:	83 c4 30             	add    esp,0x30
c0012afc:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012b03:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012b0b:	0f 84 4b ff ff ff    	je     c0012a5c <ACPI::open(int, int, void*)+0x188>
c0012b11:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012b1c:	83 ec 0c             	sub    esp,0xc
c0012b1f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012b26:	e8 e4 6e ff ff       	call   c0009a0f <malloc>
c0012b2b:	83 c4 10             	add    esp,0x10
c0012b2e:	89 c3                	mov    ebx,eax
c0012b30:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0012b35:	83 ec 04             	sub    esp,0x4
c0012b38:	50                   	push   eax
c0012b39:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b40:	53                   	push   ebx
c0012b41:	e8 24 a7 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0012b46:	83 c4 10             	add    esp,0x10
c0012b49:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012b50:	83 ec 0c             	sub    esp,0xc
c0012b53:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b5a:	e8 3b aa ff ff       	call   c000d59a <File::exists()>
c0012b5f:	83 c4 10             	add    esp,0x10
c0012b62:	84 c0                	test   al,al
c0012b64:	74 2a                	je     c0012b90 <ACPI::open(int, int, void*)+0x2bc>
c0012b66:	83 ec 08             	sub    esp,0x8
c0012b69:	6a 01                	push   0x1
c0012b6b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012b72:	e8 cf 51 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c0012b77:	83 c4 10             	add    esp,0x10
c0012b7a:	83 ec 08             	sub    esp,0x8
c0012b7d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012b84:	50                   	push   eax
c0012b85:	e8 ed 53 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c0012b8a:	83 c4 10             	add    esp,0x10
c0012b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b90:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012b98:	0f 84 be fe ff ff    	je     c0012a5c <ACPI::open(int, int, void*)+0x188>
c0012b9e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ba7:	83 c0 08             	add    eax,0x8
c0012baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0012bac:	83 ec 0c             	sub    esp,0xc
c0012baf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012bb6:	ff d0                	call   eax
c0012bb8:	83 c4 10             	add    esp,0x10
c0012bbb:	e9 9c fe ff ff       	jmp    c0012a5c <ACPI::open(int, int, void*)+0x188>
c0012bc0:	83 ec 0c             	sub    esp,0xc
c0012bc3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012bca:	50                   	push   eax
c0012bcb:	e8 fc 03 01 00       	call   c0022fcc <LinkedList<Device>::~LinkedList()>
c0012bd0:	83 c4 10             	add    esp,0x10
c0012bd3:	8b 1d e8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e8
c0012bd9:	83 ec 08             	sub    esp,0x8
c0012bdc:	6a 01                	push   0x1
c0012bde:	68 c2 56 02 c0       	push   0xc00256c2
c0012be3:	e8 5e 51 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c0012be8:	83 c4 10             	add    esp,0x10
c0012beb:	83 ec 08             	sub    esp,0x8
c0012bee:	53                   	push   ebx
c0012bef:	50                   	push   eax
c0012bf0:	e8 82 53 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c0012bf5:	83 c4 10             	add    esp,0x10
c0012bf8:	8b 1d e8 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e8
c0012bfe:	83 ec 08             	sub    esp,0x8
c0012c01:	6a 01                	push   0x1
c0012c03:	68 df 56 02 c0       	push   0xc00256df
c0012c08:	e8 39 51 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c0012c0d:	83 c4 10             	add    esp,0x10
c0012c10:	83 ec 08             	sub    esp,0x8
c0012c13:	53                   	push   ebx
c0012c14:	50                   	push   eax
c0012c15:	e8 5d 53 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c0012c1a:	83 c4 10             	add    esp,0x10
c0012c1d:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0012c22:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012c28:	83 e0 04             	and    eax,0x4
c0012c2b:	84 c0                	test   al,al
c0012c2d:	0f 84 15 01 00 00    	je     c0012d48 <ACPI::open(int, int, void*)+0x474>
c0012c33:	83 ec 0c             	sub    esp,0xc
c0012c36:	68 fc 56 02 c0       	push   0xc00256fc
c0012c3b:	e8 29 6e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012c40:	83 c4 10             	add    esp,0x10
c0012c43:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012c4e:	83 ec 0c             	sub    esp,0xc
c0012c51:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012c58:	e8 b2 6d ff ff       	call   c0009a0f <malloc>
c0012c5d:	83 c4 10             	add    esp,0x10
c0012c60:	89 c3                	mov    ebx,eax
c0012c62:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0012c67:	83 ec 04             	sub    esp,0x4
c0012c6a:	50                   	push   eax
c0012c6b:	68 19 57 02 c0       	push   0xc0025719
c0012c70:	53                   	push   ebx
c0012c71:	e8 f4 a5 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0012c76:	83 c4 10             	add    esp,0x10
c0012c79:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012c80:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012c88:	74 1a                	je     c0012ca4 <ACPI::open(int, int, void*)+0x3d0>
c0012c8a:	83 ec 0c             	sub    esp,0xc
c0012c8d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012c94:	e8 01 a9 ff ff       	call   c000d59a <File::exists()>
c0012c99:	83 c4 10             	add    esp,0x10
c0012c9c:	84 c0                	test   al,al
c0012c9e:	74 04                	je     c0012ca4 <ACPI::open(int, int, void*)+0x3d0>
c0012ca0:	b0 01                	mov    al,0x1
c0012ca2:	eb 04                	jmp    c0012ca8 <ACPI::open(int, int, void*)+0x3d4>
c0012ca4:	b0 00                	mov    al,0x0
c0012ca6:	66 90                	xchg   ax,ax
c0012ca8:	84 c0                	test   al,al
c0012caa:	74 28                	je     c0012cd4 <ACPI::open(int, int, void*)+0x400>
c0012cac:	83 ec 08             	sub    esp,0x8
c0012caf:	6a 01                	push   0x1
c0012cb1:	68 19 57 02 c0       	push   0xc0025719
c0012cb6:	e8 8b 50 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c0012cbb:	83 c4 10             	add    esp,0x10
c0012cbe:	83 ec 08             	sub    esp,0x8
c0012cc1:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012cc8:	50                   	push   eax
c0012cc9:	e8 a9 52 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c0012cce:	83 c4 10             	add    esp,0x10
c0012cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cd4:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012cdc:	74 2a                	je     c0012d08 <ACPI::open(int, int, void*)+0x434>
c0012cde:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012ce6:	74 20                	je     c0012d08 <ACPI::open(int, int, void*)+0x434>
c0012ce8:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012cef:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cf1:	83 c0 08             	add    eax,0x8
c0012cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cf6:	83 ec 0c             	sub    esp,0xc
c0012cf9:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012d00:	ff d0                	call   eax
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	8d 76 00             	lea    esi,[esi+0x0]
c0012d08:	a1 48 89 02 c0       	mov    eax,ds:0xc0028948
c0012d0d:	83 ec 08             	sub    esp,0x8
c0012d10:	68 36 57 02 c0       	push   0xc0025736
c0012d15:	50                   	push   eax
c0012d16:	e8 e1 ee ff ff       	call   c0011bfc <findDataTable(unsigned char*, char*)>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012d25:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012d2d:	74 19                	je     c0012d48 <ACPI::open(int, int, void*)+0x474>
c0012d2f:	83 ec 08             	sub    esp,0x8
c0012d32:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012d39:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012d40:	e8 0b fb ff ff       	call   c0012850 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012d45:	83 c4 10             	add    esp,0x10
c0012d48:	b8 00 00 00 00       	mov    eax,0x0
c0012d4d:	81 c4 70 01 00 00    	add    esp,0x170
c0012d53:	5b                   	pop    ebx
c0012d54:	5e                   	pop    esi
c0012d55:	5f                   	pop    edi
c0012d56:	c3                   	ret    
c0012d57:	90                   	nop

c0012d58 <CPU::close(int, int, void*)>:
c0012d58:	31 c0                	xor    eax,eax
c0012d5a:	c3                   	ret    
c0012d5b:	90                   	nop

c0012d5c <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012d5c:	55                   	push   ebp
c0012d5d:	57                   	push   edi
c0012d5e:	56                   	push   esi
c0012d5f:	53                   	push   ebx
c0012d60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d64:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012d68:	89 ce                	mov    esi,ecx
c0012d6a:	89 d5                	mov    ebp,edx
c0012d6c:	80 f9 04             	cmp    cl,0x4
c0012d6f:	75 28                	jne    c0012d99 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012d71:	8d 42 f9             	lea    eax,[edx-0x7]
c0012d74:	3c 03                	cmp    al,0x3
c0012d76:	0f 86 63 01 00 00    	jbe    c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012d7c:	80 fa 03             	cmp    dl,0x3
c0012d7f:	0f 84 5a 01 00 00    	je     c0012edf <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012d85:	8d 7a f2             	lea    edi,[edx-0xe]
c0012d88:	b8 b0 79 02 c0       	mov    eax,0xc00279b0
c0012d8d:	89 fb                	mov    ebx,edi
c0012d8f:	80 fb 01             	cmp    bl,0x1
c0012d92:	77 4e                	ja     c0012de2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012d94:	e9 52 01 00 00       	jmp    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d99:	80 f9 05             	cmp    cl,0x5
c0012d9c:	75 4d                	jne    c0012deb <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012d9e:	b8 c0 79 02 c0       	mov    eax,0xc00279c0
c0012da3:	80 fa 03             	cmp    dl,0x3
c0012da6:	0f 86 3f 01 00 00    	jbe    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dac:	8d 7a fa             	lea    edi,[edx-0x6]
c0012daf:	b8 d0 79 02 c0       	mov    eax,0xc00279d0
c0012db4:	89 fb                	mov    ebx,edi
c0012db6:	80 fb 01             	cmp    bl,0x1
c0012db9:	0f 86 2c 01 00 00    	jbe    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dbf:	b8 e0 79 02 c0       	mov    eax,0xc00279e0
c0012dc4:	80 fa 08             	cmp    dl,0x8
c0012dc7:	0f 84 1e 01 00 00    	je     c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dcd:	89 d7                	mov    edi,edx
c0012dcf:	b8 f0 79 02 c0       	mov    eax,0xc00279f0
c0012dd4:	83 e7 fb             	and    edi,0xfffffffb
c0012dd7:	89 fb                	mov    ebx,edi
c0012dd9:	80 fb 09             	cmp    bl,0x9
c0012ddc:	0f 84 09 01 00 00    	je     c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012de2:	31 c0                	xor    eax,eax
c0012de4:	89 eb                	mov    ebx,ebp
c0012de6:	0f b6 fb             	movzx  edi,bl
c0012de9:	eb 30                	jmp    c0012e1b <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012deb:	31 c0                	xor    eax,eax
c0012ded:	80 f9 06             	cmp    cl,0x6
c0012df0:	75 f2                	jne    c0012de4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012df2:	80 fa 0a             	cmp    dl,0xa
c0012df5:	77 ed                	ja     c0012de4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012df7:	bf de 05 00 00       	mov    edi,0x5de
c0012dfc:	0f a3 d7             	bt     edi,edx
c0012dff:	73 e3                	jae    c0012de4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012e01:	b8 00 7a 02 c0       	mov    eax,0xc0027a00
c0012e06:	e9 e0 00 00 00       	jmp    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e0b:	39 c7                	cmp    edi,eax
c0012e0d:	0f 84 d3 00 00 00    	je     c0012ee6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e13:	40                   	inc    eax
c0012e14:	3d d0 00 00 00       	cmp    eax,0xd0
c0012e19:	74 09                	je     c0012e24 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012e1b:	89 f3                	mov    ebx,esi
c0012e1d:	80 fb 0f             	cmp    bl,0xf
c0012e20:	75 f1                	jne    c0012e13 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012e22:	eb e7                	jmp    c0012e0b <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012e24:	80 f9 10             	cmp    cl,0x10
c0012e27:	75 14                	jne    c0012e3d <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012e29:	8d 42 fc             	lea    eax,[edx-0x4]
c0012e2c:	83 e0 fb             	and    eax,0xfffffffb
c0012e2f:	3c 02                	cmp    al,0x2
c0012e31:	76 34                	jbe    c0012e67 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012e33:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0012e38:	80 fa 02             	cmp    dl,0x2
c0012e3b:	eb 24                	jmp    c0012e61 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012e3d:	80 f9 11             	cmp    cl,0x11
c0012e40:	75 13                	jne    c0012e55 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012e42:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0012e47:	80 fa 03             	cmp    dl,0x3
c0012e4a:	0f 85 9b 00 00 00    	jne    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e50:	e9 91 00 00 00       	jmp    c0012ee6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e55:	80 f9 12             	cmp    cl,0x12
c0012e58:	75 14                	jne    c0012e6e <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012e5a:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0012e5f:	fe ca                	dec    dl
c0012e61:	0f 85 84 00 00 00    	jne    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e67:	b8 20 7a 02 c0       	mov    eax,0xc0027a20
c0012e6c:	eb 7d                	jmp    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e6e:	80 f9 14             	cmp    cl,0x14
c0012e71:	75 12                	jne    c0012e85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012e73:	4a                   	dec    edx
c0012e74:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0012e79:	80 fa 01             	cmp    dl,0x1
c0012e7c:	77 6d                	ja     c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e7e:	b8 30 7a 02 c0       	mov    eax,0xc0027a30
c0012e83:	eb 66                	jmp    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e85:	80 f9 15             	cmp    cl,0x15
c0012e88:	75 31                	jne    c0012ebb <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012e8a:	b8 40 7a 02 c0       	mov    eax,0xc0027a40
c0012e8f:	80 fa 01             	cmp    dl,0x1
c0012e92:	74 57                	je     c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e94:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0012e99:	80 fa 13             	cmp    dl,0x13
c0012e9c:	76 0c                	jbe    c0012eaa <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012e9e:	80 fa 30             	cmp    dl,0x30
c0012ea1:	75 48                	jne    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ea3:	b8 60 7a 02 c0       	mov    eax,0xc0027a60
c0012ea8:	eb 41                	jmp    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eaa:	b9 04 00 09 00       	mov    ecx,0x90004
c0012eaf:	0f a3 d1             	bt     ecx,edx
c0012eb2:	73 37                	jae    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eb4:	b8 50 7a 02 c0       	mov    eax,0xc0027a50
c0012eb9:	eb 30                	jmp    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ebb:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0012ec0:	80 f9 16             	cmp    cl,0x16
c0012ec3:	75 26                	jne    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ec5:	b8 70 7a 02 c0       	mov    eax,0xc0027a70
c0012eca:	84 d2                	test   dl,dl
c0012ecc:	74 1d                	je     c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ece:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0012ed3:	80 fa 30             	cmp    dl,0x30
c0012ed6:	75 13                	jne    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ed8:	b8 80 7a 02 c0       	mov    eax,0xc0027a80
c0012edd:	eb 0c                	jmp    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012edf:	b8 a0 79 02 c0       	mov    eax,0xc00279a0
c0012ee4:	eb 05                	jmp    c0012eeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ee6:	b8 10 7a 02 c0       	mov    eax,0xc0027a10
c0012eeb:	5b                   	pop    ebx
c0012eec:	5e                   	pop    esi
c0012eed:	5f                   	pop    edi
c0012eee:	5d                   	pop    ebp
c0012eef:	c3                   	ret    

c0012ef0 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012ef0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ef4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ef8:	80 f9 04             	cmp    cl,0x4
c0012efb:	75 6b                	jne    c0012f68 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012efd:	b8 00 78 02 c0       	mov    eax,0xc0027800
c0012f02:	80 fa 01             	cmp    dl,0x1
c0012f05:	0f 86 92 02 00 00    	jbe    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f0b:	b8 10 78 02 c0       	mov    eax,0xc0027810
c0012f10:	80 fa 02             	cmp    dl,0x2
c0012f13:	0f 84 84 02 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f19:	b8 20 78 02 c0       	mov    eax,0xc0027820
c0012f1e:	80 fa 03             	cmp    dl,0x3
c0012f21:	0f 84 76 02 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f27:	b8 30 78 02 c0       	mov    eax,0xc0027830
c0012f2c:	80 fa 04             	cmp    dl,0x4
c0012f2f:	0f 84 68 02 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f35:	b8 40 78 02 c0       	mov    eax,0xc0027840
c0012f3a:	80 fa 05             	cmp    dl,0x5
c0012f3d:	0f 84 5a 02 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f43:	b8 20 78 02 c0       	mov    eax,0xc0027820
c0012f48:	80 fa 07             	cmp    dl,0x7
c0012f4b:	0f 84 4c 02 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f51:	83 ea 08             	sub    edx,0x8
c0012f54:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0012f59:	80 fa 01             	cmp    dl,0x1
c0012f5c:	0f 87 3b 02 00 00    	ja     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f62:	b8 50 78 02 c0       	mov    eax,0xc0027850
c0012f67:	c3                   	ret    
c0012f68:	80 f9 05             	cmp    cl,0x5
c0012f6b:	75 45                	jne    c0012fb2 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012f6d:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012f70:	b8 60 78 02 c0       	mov    eax,0xc0027860
c0012f75:	80 f9 02             	cmp    cl,0x2
c0012f78:	0f 86 1f 02 00 00    	jbe    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f7e:	80 fa 04             	cmp    dl,0x4
c0012f81:	0f 84 f3 01 00 00    	je     c001317a <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012f87:	80 fa 07             	cmp    dl,0x7
c0012f8a:	0f 84 0d 02 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f90:	b8 70 78 02 c0       	mov    eax,0xc0027870
c0012f95:	80 fa 08             	cmp    dl,0x8
c0012f98:	0f 84 ff 01 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f9e:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0012fa3:	80 fa 09             	cmp    dl,0x9
c0012fa6:	0f 85 f1 01 00 00    	jne    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fac:	b8 80 78 02 c0       	mov    eax,0xc0027880
c0012fb1:	c3                   	ret    
c0012fb2:	80 f9 06             	cmp    cl,0x6
c0012fb5:	0f 85 85 01 00 00    	jne    c0013140 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012fbb:	b8 90 78 02 c0       	mov    eax,0xc0027890
c0012fc0:	80 fa 01             	cmp    dl,0x1
c0012fc3:	0f 84 d4 01 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fc9:	8d 42 fb             	lea    eax,[edx-0x5]
c0012fcc:	3c 01                	cmp    al,0x1
c0012fce:	0f 86 ac 01 00 00    	jbe    c0013180 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012fd4:	80 fa 03             	cmp    dl,0x3
c0012fd7:	0f 84 a3 01 00 00    	je     c0013180 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012fdd:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012fe0:	b8 b0 78 02 c0       	mov    eax,0xc00278b0
c0012fe5:	80 f9 01             	cmp    cl,0x1
c0012fe8:	0f 86 af 01 00 00    	jbe    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fee:	80 fa 09             	cmp    dl,0x9
c0012ff1:	0f 84 8f 01 00 00    	je     c0013186 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012ff7:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012ffa:	80 f9 01             	cmp    cl,0x1
c0012ffd:	0f 86 9a 01 00 00    	jbe    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013003:	b8 c0 78 02 c0       	mov    eax,0xc00278c0
c0013008:	80 fa 0d             	cmp    dl,0xd
c001300b:	0f 84 8c 01 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013011:	b8 d0 78 02 c0       	mov    eax,0xc00278d0
c0013016:	80 fa 0e             	cmp    dl,0xe
c0013019:	0f 84 7e 01 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001301f:	b8 e0 78 02 c0       	mov    eax,0xc00278e0
c0013024:	80 fa 0f             	cmp    dl,0xf
c0013027:	0f 84 70 01 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001302d:	b8 c0 78 02 c0       	mov    eax,0xc00278c0
c0013032:	80 fa 15             	cmp    dl,0x15
c0013035:	0f 84 62 01 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001303b:	8d 4a ea             	lea    ecx,[edx-0x16]
c001303e:	b8 e0 78 02 c0       	mov    eax,0xc00278e0
c0013043:	80 f9 01             	cmp    cl,0x1
c0013046:	0f 86 51 01 00 00    	jbe    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001304c:	80 fa 1a             	cmp    dl,0x1a
c001304f:	0f 84 37 01 00 00    	je     c001318c <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0013055:	80 fa 1c             	cmp    dl,0x1c
c0013058:	0f 84 34 01 00 00    	je     c0013192 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001305e:	80 fa 1d             	cmp    dl,0x1d
c0013061:	0f 84 36 01 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013067:	b8 10 79 02 c0       	mov    eax,0xc0027910
c001306c:	80 fa 25             	cmp    dl,0x25
c001306f:	0f 84 28 01 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013075:	8d 4a da             	lea    ecx,[edx-0x26]
c0013078:	b8 00 79 02 c0       	mov    eax,0xc0027900
c001307d:	80 f9 01             	cmp    cl,0x1
c0013080:	0f 86 17 01 00 00    	jbe    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013086:	b8 20 79 02 c0       	mov    eax,0xc0027920
c001308b:	80 fa 2a             	cmp    dl,0x2a
c001308e:	0f 84 09 01 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013094:	b8 10 79 02 c0       	mov    eax,0xc0027910
c0013099:	80 fa 2c             	cmp    dl,0x2c
c001309c:	0f 84 fb 00 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130a2:	b8 20 79 02 c0       	mov    eax,0xc0027920
c00130a7:	80 fa 2d             	cmp    dl,0x2d
c00130aa:	0f 84 ed 00 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130b0:	b8 f0 78 02 c0       	mov    eax,0xc00278f0
c00130b5:	80 fa 2e             	cmp    dl,0x2e
c00130b8:	0f 84 df 00 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130be:	b8 10 79 02 c0       	mov    eax,0xc0027910
c00130c3:	80 fa 2f             	cmp    dl,0x2f
c00130c6:	0f 84 d1 00 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130cc:	8d 4a cb             	lea    ecx,[edx-0x35]
c00130cf:	b8 00 79 02 c0       	mov    eax,0xc0027900
c00130d4:	80 f9 01             	cmp    cl,0x1
c00130d7:	0f 86 c0 00 00 00    	jbe    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130dd:	b8 30 79 02 c0       	mov    eax,0xc0027930
c00130e2:	80 fa 37             	cmp    dl,0x37
c00130e5:	0f 84 b2 00 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130eb:	b8 40 79 02 c0       	mov    eax,0xc0027940
c00130f0:	80 fa 3a             	cmp    dl,0x3a
c00130f3:	0f 84 a4 00 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130f9:	b8 50 79 02 c0       	mov    eax,0xc0027950
c00130fe:	80 fa 3c             	cmp    dl,0x3c
c0013101:	0f 84 96 00 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013107:	b8 60 79 02 c0       	mov    eax,0xc0027960
c001310c:	80 fa 3d             	cmp    dl,0x3d
c001310f:	0f 84 88 00 00 00    	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013115:	b8 40 79 02 c0       	mov    eax,0xc0027940
c001311a:	80 fa 3e             	cmp    dl,0x3e
c001311d:	74 7e                	je     c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001311f:	8d 42 bb             	lea    eax,[edx-0x45]
c0013122:	3c 01                	cmp    al,0x1
c0013124:	76 72                	jbe    c0013198 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013126:	80 fa 3f             	cmp    dl,0x3f
c0013129:	74 6d                	je     c0013198 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001312b:	80 fa 4a             	cmp    dl,0x4a
c001312e:	74 0a                	je     c001313a <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0013130:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0013135:	80 fa 4d             	cmp    dl,0x4d
c0013138:	75 63                	jne    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001313a:	b8 30 79 02 c0       	mov    eax,0xc0027930
c001313f:	c3                   	ret    
c0013140:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c0013145:	80 f9 0b             	cmp    cl,0xb
c0013148:	75 0a                	jne    c0013154 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001314a:	fe ca                	dec    dl
c001314c:	75 4f                	jne    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001314e:	b8 70 79 02 c0       	mov    eax,0xc0027970
c0013153:	c3                   	ret    
c0013154:	80 f9 0f             	cmp    cl,0xf
c0013157:	75 44                	jne    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013159:	b8 80 79 02 c0       	mov    eax,0xc0027980
c001315e:	80 fa 02             	cmp    dl,0x2
c0013161:	76 3a                	jbe    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013163:	8d 42 fd             	lea    eax,[edx-0x3]
c0013166:	3c 01                	cmp    al,0x1
c0013168:	76 0a                	jbe    c0013174 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001316a:	b8 bd 58 02 c0       	mov    eax,0xc00258bd
c001316f:	80 fa 06             	cmp    dl,0x6
c0013172:	75 29                	jne    c001319d <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013174:	b8 90 79 02 c0       	mov    eax,0xc0027990
c0013179:	c3                   	ret    
c001317a:	b8 70 78 02 c0       	mov    eax,0xc0027870
c001317f:	c3                   	ret    
c0013180:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0013185:	c3                   	ret    
c0013186:	b8 c0 78 02 c0       	mov    eax,0xc00278c0
c001318b:	c3                   	ret    
c001318c:	b8 f0 78 02 c0       	mov    eax,0xc00278f0
c0013191:	c3                   	ret    
c0013192:	b8 00 79 02 c0       	mov    eax,0xc0027900
c0013197:	c3                   	ret    
c0013198:	b8 50 79 02 c0       	mov    eax,0xc0027950
c001319d:	c3                   	ret    

c001319e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001319e:	60                   	pusha  
c001319f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00131a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00131ab:	9c                   	pushf  
c00131ac:	fa                   	cli    
c00131ad:	0f 09                	wbinvd 
c00131af:	0f 30                	wrmsr  
c00131b1:	9d                   	popf   
c00131b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131b6:	89 02                	mov    DWORD PTR [edx],eax
c00131b8:	61                   	popa   
c00131b9:	c3                   	ret    

c00131ba <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00131ba:	60                   	pusha  
c00131bb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131bf:	9c                   	pushf  
c00131c0:	fa                   	cli    
c00131c1:	0f 09                	wbinvd 
c00131c3:	31 c0                	xor    eax,eax
c00131c5:	31 d2                	xor    edx,edx
c00131c7:	0f 32                	rdmsr  
c00131c9:	9d                   	popf   
c00131ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131ce:	89 02                	mov    DWORD PTR [edx],eax
c00131d0:	61                   	popa   
c00131d1:	c3                   	ret    

c00131d2 <CPU::AMD_K6_writeback(int, int, int)>:
c00131d2:	56                   	push   esi
c00131d3:	53                   	push   ebx
c00131d4:	83 ec 10             	sub    esp,0x10
c00131d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131db:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00131e0:	75 5d                	jne    c001323f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131e2:	83 f8 08             	cmp    eax,0x8
c00131e5:	75 09                	jne    c00131f0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00131e7:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00131ec:	7e 13                	jle    c0013201 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00131ee:	eb 30                	jmp    c0013220 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00131f0:	83 f8 06             	cmp    eax,0x6
c00131f3:	7c 4a                	jl     c001323f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131f5:	83 f8 07             	cmp    eax,0x7
c00131f8:	7e 07                	jle    c0013201 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00131fa:	83 f8 09             	cmp    eax,0x9
c00131fd:	74 21                	je     c0013220 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00131ff:	eb 3e                	jmp    c001323f <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013201:	89 e6                	mov    esi,esp
c0013203:	8b 1d 0c 81 02 c0    	mov    ebx,DWORD PTR ds:0xc002810c
c0013209:	56                   	push   esi
c001320a:	c1 eb 15             	shr    ebx,0x15
c001320d:	68 82 00 00 c0       	push   0xc0000082
c0013212:	83 e3 7e             	and    ebx,0x7e
c0013215:	e8 a0 ff ff ff       	call   c00131ba <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001321a:	56                   	push   esi
c001321b:	6a 00                	push   0x0
c001321d:	53                   	push   ebx
c001321e:	eb 12                	jmp    c0013232 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0013220:	89 e3                	mov    ebx,esp
c0013222:	53                   	push   ebx
c0013223:	68 82 00 00 c0       	push   0xc0000082
c0013228:	e8 8d ff ff ff       	call   c00131ba <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001322d:	53                   	push   ebx
c001322e:	6a 00                	push   0x0
c0013230:	6a 00                	push   0x0
c0013232:	68 82 00 00 c0       	push   0xc0000082
c0013237:	e8 62 ff ff ff       	call   c001319e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001323c:	83 c4 18             	add    esp,0x18
c001323f:	83 c4 10             	add    esp,0x10
c0013242:	5b                   	pop    ebx
c0013243:	5e                   	pop    esi
c0013244:	c3                   	ret    
c0013245:	90                   	nop

c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013246:	55                   	push   ebp
c0013247:	57                   	push   edi
c0013248:	56                   	push   esi
c0013249:	53                   	push   ebx
c001324a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001324e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013252:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013256:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001325a:	39 05 a0 7a 02 c0    	cmp    DWORD PTR ds:0xc0027aa0,eax
c0013260:	75 23                	jne    c0013285 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013262:	a1 ac 8b 02 c0       	mov    eax,ds:0xc0028bac
c0013267:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001326b:	89 06                	mov    DWORD PTR [esi],eax
c001326d:	a1 a8 8b 02 c0       	mov    eax,ds:0xc0028ba8
c0013272:	89 07                	mov    DWORD PTR [edi],eax
c0013274:	a1 a4 8b 02 c0       	mov    eax,ds:0xc0028ba4
c0013279:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001327c:	a1 a0 8b 02 c0       	mov    eax,ds:0xc0028ba0
c0013281:	89 02                	mov    DWORD PTR [edx],eax
c0013283:	eb 3f                	jmp    c00132c4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013285:	31 c9                	xor    ecx,ecx
c0013287:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001328b:	0f a2                	cpuid  
c001328d:	89 06                	mov    DWORD PTR [esi],eax
c001328f:	89 1f                	mov    DWORD PTR [edi],ebx
c0013291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013295:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013298:	89 10                	mov    DWORD PTR [eax],edx
c001329a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001329e:	a3 a0 7a 02 c0       	mov    ds:0xc0027aa0,eax
c00132a3:	8b 06                	mov    eax,DWORD PTR [esi]
c00132a5:	a3 ac 8b 02 c0       	mov    ds:0xc0028bac,eax
c00132aa:	8b 07                	mov    eax,DWORD PTR [edi]
c00132ac:	a3 a8 8b 02 c0       	mov    ds:0xc0028ba8,eax
c00132b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00132b4:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c00132b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00132bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00132bf:	a3 a0 8b 02 c0       	mov    ds:0xc0028ba0,eax
c00132c4:	5b                   	pop    ebx
c00132c5:	5e                   	pop    esi
c00132c6:	5f                   	pop    edi
c00132c7:	5d                   	pop    ebp
c00132c8:	c3                   	ret    
c00132c9:	90                   	nop

c00132ca <CPU::cpuidCheckEDX(unsigned int)>:
c00132ca:	83 ec 10             	sub    esp,0x10
c00132cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132d1:	50                   	push   eax
c00132d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132d6:	50                   	push   eax
c00132d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132db:	50                   	push   eax
c00132dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132e0:	50                   	push   eax
c00132e1:	6a 01                	push   0x1
c00132e3:	e8 5e ff ff ff       	call   c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00132e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00132ec:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00132f0:	0f 95 c0             	setne  al
c00132f3:	83 c4 24             	add    esp,0x24
c00132f6:	c3                   	ret    
c00132f7:	90                   	nop

c00132f8 <CPU::cpuidCheckECX(unsigned int)>:
c00132f8:	83 ec 10             	sub    esp,0x10
c00132fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132ff:	50                   	push   eax
c0013300:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013304:	50                   	push   eax
c0013305:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013309:	50                   	push   eax
c001330a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001330e:	50                   	push   eax
c001330f:	6a 01                	push   0x1
c0013311:	e8 30 ff ff ff       	call   c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013316:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001331a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001331e:	0f 95 c0             	setne  al
c0013321:	83 c4 24             	add    esp,0x24
c0013324:	c3                   	ret    
c0013325:	90                   	nop

c0013326 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0013326:	83 ec 10             	sub    esp,0x10
c0013329:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001332d:	50                   	push   eax
c001332e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013332:	50                   	push   eax
c0013333:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013337:	50                   	push   eax
c0013338:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001333c:	50                   	push   eax
c001333d:	6a 07                	push   0x7
c001333f:	e8 02 ff ff ff       	call   c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013344:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013348:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001334c:	0f 95 c0             	setne  al
c001334f:	83 c4 24             	add    esp,0x24
c0013352:	c3                   	ret    
c0013353:	90                   	nop

c0013354 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013354:	83 ec 10             	sub    esp,0x10
c0013357:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001335b:	50                   	push   eax
c001335c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013360:	50                   	push   eax
c0013361:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013365:	50                   	push   eax
c0013366:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001336a:	50                   	push   eax
c001336b:	6a 07                	push   0x7
c001336d:	e8 d4 fe ff ff       	call   c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013372:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013376:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001337a:	0f 95 c0             	setne  al
c001337d:	83 c4 24             	add    esp,0x24
c0013380:	c3                   	ret    
c0013381:	90                   	nop

c0013382 <CPU::CPU()>:
c0013382:	83 ec 0c             	sub    esp,0xc
c0013385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013389:	83 ec 08             	sub    esp,0x8
c001338c:	68 bd 58 02 c0       	push   0xc00258bd
c0013391:	50                   	push   eax
c0013392:	e8 ab b0 ff ff       	call   c000e442 <Device::Device(char const*)>
c0013397:	83 c4 10             	add    esp,0x10
c001339a:	ba 20 5b 02 c0       	mov    edx,0xc0025b20
c001339f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a3:	89 10                	mov    DWORD PTR [eax],edx
c00133a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a9:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00133b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133b7:	05 78 01 00 00       	add    eax,0x178
c00133bc:	83 ec 0c             	sub    esp,0xc
c00133bf:	50                   	push   eax
c00133c0:	e8 df 5e ff ff       	call   c00092a4 <GDT::GDT()>
c00133c5:	83 c4 10             	add    esp,0x10
c00133c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133cc:	05 7c 09 00 00       	add    eax,0x97c
c00133d1:	83 ec 0c             	sub    esp,0xc
c00133d4:	50                   	push   eax
c00133d5:	e8 22 61 ff ff       	call   c00094fc <IDT::IDT()>
c00133da:	83 c4 10             	add    esp,0x10
c00133dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e1:	05 7c 11 00 00       	add    eax,0x117c
c00133e6:	83 ec 0c             	sub    esp,0xc
c00133e9:	50                   	push   eax
c00133ea:	e8 2d 7f ff ff       	call   c000b31c <TSS::TSS()>
c00133ef:	83 c4 10             	add    esp,0x10
c00133f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f6:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00133fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013401:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001340b:	90                   	nop
c001340c:	83 c4 0c             	add    esp,0xc
c001340f:	c3                   	ret    

c0013410 <CPU::displayFeatures()>:
c0013410:	c3                   	ret    
c0013411:	90                   	nop

c0013412 <CPU::detectFeatures()>:
c0013412:	55                   	push   ebp
c0013413:	57                   	push   edi
c0013414:	56                   	push   esi
c0013415:	53                   	push   ebx
c0013416:	83 ec 50             	sub    esp,0x50
c0013419:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001341d:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013427:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001342e:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013434:	6a 0d                	push   0xd
c0013436:	6a 00                	push   0x0
c0013438:	55                   	push   ebp
c0013439:	e8 46 d2 fe ff       	call   c0000684 <memset>
c001343e:	83 c4 10             	add    esp,0x10
c0013441:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0013446:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001344d:	0f 84 22 09 00 00    	je     c0013d75 <CPU::detectFeatures()+0x963>
c0013453:	83 ec 0c             	sub    esp,0xc
c0013456:	89 ef                	mov    edi,ebp
c0013458:	6a 10                	push   0x10
c001345a:	e8 6b fe ff ff       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c001345f:	83 e0 01             	and    eax,0x1
c0013462:	8d 14 00             	lea    edx,[eax+eax*1]
c0013465:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001346b:	83 e0 fd             	and    eax,0xfffffffd
c001346e:	09 d0                	or     eax,edx
c0013470:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013476:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001347d:	e8 48 fe ff ff       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c0013482:	83 e0 01             	and    eax,0x1
c0013485:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001348c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013492:	83 e0 fb             	and    eax,0xfffffffb
c0013495:	09 d0                	or     eax,edx
c0013497:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001349d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00134a4:	e8 21 fe ff ff       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c00134a9:	83 e0 01             	and    eax,0x1
c00134ac:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00134b3:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134b9:	83 e0 f7             	and    eax,0xfffffff7
c00134bc:	09 d0                	or     eax,edx
c00134be:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134c4:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00134cb:	e8 fa fd ff ff       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c00134d0:	83 e0 01             	and    eax,0x1
c00134d3:	c1 e0 04             	shl    eax,0x4
c00134d6:	88 c2                	mov    dl,al
c00134d8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134de:	83 e0 ef             	and    eax,0xffffffef
c00134e1:	09 d0                	or     eax,edx
c00134e3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134e9:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00134f0:	e8 d5 fd ff ff       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c00134f5:	83 e0 01             	and    eax,0x1
c00134f8:	c1 e0 05             	shl    eax,0x5
c00134fb:	88 c2                	mov    dl,al
c00134fd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013503:	83 e0 df             	and    eax,0xffffffdf
c0013506:	09 d0                	or     eax,edx
c0013508:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001350e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013515:	e8 b0 fd ff ff       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c001351a:	83 e0 01             	and    eax,0x1
c001351d:	8d 14 00             	lea    edx,[eax+eax*1]
c0013520:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013526:	83 e0 fd             	and    eax,0xfffffffd
c0013529:	09 d0                	or     eax,edx
c001352b:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013531:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013538:	e8 8d fd ff ff       	call   c00132ca <CPU::cpuidCheckEDX(unsigned int)>
c001353d:	83 e0 01             	and    eax,0x1
c0013540:	c1 e0 06             	shl    eax,0x6
c0013543:	88 c2                	mov    dl,al
c0013545:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001354b:	83 e0 bf             	and    eax,0xffffffbf
c001354e:	09 d0                	or     eax,edx
c0013550:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013556:	58                   	pop    eax
c0013557:	8d 44 24 28          	lea    eax,[esp+0x28]
c001355b:	50                   	push   eax
c001355c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013560:	50                   	push   eax
c0013561:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013565:	56                   	push   esi
c0013566:	8d 44 24 28          	lea    eax,[esp+0x28]
c001356a:	50                   	push   eax
c001356b:	6a 00                	push   0x0
c001356d:	e8 d4 fc ff ff       	call   c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013572:	b8 04 00 00 00       	mov    eax,0x4
c0013577:	89 c1                	mov    ecx,eax
c0013579:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001357b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013581:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013585:	89 c1                	mov    ecx,eax
c0013587:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013589:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001358f:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013593:	89 c1                	mov    ecx,eax
c0013595:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013597:	83 c4 18             	add    esp,0x18
c001359a:	68 68 57 02 c0       	push   0xc0025768
c001359f:	55                   	push   ebp
c00135a0:	e8 27 d2 fe ff       	call   c00007cc <strcmp>
c00135a5:	83 c4 10             	add    esp,0x10
c00135a8:	85 c0                	test   eax,eax
c00135aa:	75 0f                	jne    c00135bb <CPU::detectFeatures()+0x1a9>
c00135ac:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00135b6:	e9 22 02 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c00135bb:	50                   	push   eax
c00135bc:	50                   	push   eax
c00135bd:	68 75 57 02 c0       	push   0xc0025775
c00135c2:	55                   	push   ebp
c00135c3:	e8 04 d2 fe ff       	call   c00007cc <strcmp>
c00135c8:	83 c4 10             	add    esp,0x10
c00135cb:	85 c0                	test   eax,eax
c00135cd:	74 dd                	je     c00135ac <CPU::detectFeatures()+0x19a>
c00135cf:	50                   	push   eax
c00135d0:	50                   	push   eax
c00135d1:	68 82 57 02 c0       	push   0xc0025782
c00135d6:	55                   	push   ebp
c00135d7:	e8 f0 d1 fe ff       	call   c00007cc <strcmp>
c00135dc:	83 c4 10             	add    esp,0x10
c00135df:	85 c0                	test   eax,eax
c00135e1:	74 2a                	je     c001360d <CPU::detectFeatures()+0x1fb>
c00135e3:	50                   	push   eax
c00135e4:	50                   	push   eax
c00135e5:	68 8f 57 02 c0       	push   0xc002578f
c00135ea:	55                   	push   ebp
c00135eb:	e8 dc d1 fe ff       	call   c00007cc <strcmp>
c00135f0:	83 c4 10             	add    esp,0x10
c00135f3:	85 c0                	test   eax,eax
c00135f5:	74 16                	je     c001360d <CPU::detectFeatures()+0x1fb>
c00135f7:	50                   	push   eax
c00135f8:	50                   	push   eax
c00135f9:	68 9c 57 02 c0       	push   0xc002579c
c00135fe:	55                   	push   ebp
c00135ff:	e8 c8 d1 fe ff       	call   c00007cc <strcmp>
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	85 c0                	test   eax,eax
c0013609:	74 48                	je     c0013653 <CPU::detectFeatures()+0x241>
c001360b:	eb 0f                	jmp    c001361c <CPU::detectFeatures()+0x20a>
c001360d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013617:	e9 c1 01 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c001361c:	50                   	push   eax
c001361d:	50                   	push   eax
c001361e:	68 a9 57 02 c0       	push   0xc00257a9
c0013623:	55                   	push   ebp
c0013624:	e8 a3 d1 fe ff       	call   c00007cc <strcmp>
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	85 c0                	test   eax,eax
c001362e:	74 23                	je     c0013653 <CPU::detectFeatures()+0x241>
c0013630:	57                   	push   edi
c0013631:	57                   	push   edi
c0013632:	68 b6 57 02 c0       	push   0xc00257b6
c0013637:	55                   	push   ebp
c0013638:	e8 8f d1 fe ff       	call   c00007cc <strcmp>
c001363d:	83 c4 10             	add    esp,0x10
c0013640:	85 c0                	test   eax,eax
c0013642:	75 1e                	jne    c0013662 <CPU::detectFeatures()+0x250>
c0013644:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001364e:	e9 8a 01 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c0013653:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001365d:	e9 7b 01 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c0013662:	56                   	push   esi
c0013663:	56                   	push   esi
c0013664:	68 c3 57 02 c0       	push   0xc00257c3
c0013669:	55                   	push   ebp
c001366a:	e8 5d d1 fe ff       	call   c00007cc <strcmp>
c001366f:	83 c4 10             	add    esp,0x10
c0013672:	85 c0                	test   eax,eax
c0013674:	75 0f                	jne    c0013685 <CPU::detectFeatures()+0x273>
c0013676:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013680:	e9 58 01 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c0013685:	51                   	push   ecx
c0013686:	51                   	push   ecx
c0013687:	68 82 57 02 c0       	push   0xc0025782
c001368c:	55                   	push   ebp
c001368d:	e8 3a d1 fe ff       	call   c00007cc <strcmp>
c0013692:	83 c4 10             	add    esp,0x10
c0013695:	85 c0                	test   eax,eax
c0013697:	75 0f                	jne    c00136a8 <CPU::detectFeatures()+0x296>
c0013699:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00136a3:	e9 35 01 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c00136a8:	52                   	push   edx
c00136a9:	52                   	push   edx
c00136aa:	68 d0 57 02 c0       	push   0xc00257d0
c00136af:	55                   	push   ebp
c00136b0:	e8 17 d1 fe ff       	call   c00007cc <strcmp>
c00136b5:	83 c4 10             	add    esp,0x10
c00136b8:	85 c0                	test   eax,eax
c00136ba:	75 0f                	jne    c00136cb <CPU::detectFeatures()+0x2b9>
c00136bc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00136c6:	e9 12 01 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c00136cb:	50                   	push   eax
c00136cc:	50                   	push   eax
c00136cd:	68 dd 57 02 c0       	push   0xc00257dd
c00136d2:	55                   	push   ebp
c00136d3:	e8 f4 d0 fe ff       	call   c00007cc <strcmp>
c00136d8:	83 c4 10             	add    esp,0x10
c00136db:	85 c0                	test   eax,eax
c00136dd:	75 0f                	jne    c00136ee <CPU::detectFeatures()+0x2dc>
c00136df:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00136e9:	e9 ef 00 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c00136ee:	50                   	push   eax
c00136ef:	50                   	push   eax
c00136f0:	68 ea 57 02 c0       	push   0xc00257ea
c00136f5:	55                   	push   ebp
c00136f6:	e8 d1 d0 fe ff       	call   c00007cc <strcmp>
c00136fb:	83 c4 10             	add    esp,0x10
c00136fe:	85 c0                	test   eax,eax
c0013700:	75 0f                	jne    c0013711 <CPU::detectFeatures()+0x2ff>
c0013702:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001370c:	e9 cc 00 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c0013711:	50                   	push   eax
c0013712:	50                   	push   eax
c0013713:	68 f7 57 02 c0       	push   0xc00257f7
c0013718:	55                   	push   ebp
c0013719:	e8 ae d0 fe ff       	call   c00007cc <strcmp>
c001371e:	83 c4 10             	add    esp,0x10
c0013721:	85 c0                	test   eax,eax
c0013723:	75 0f                	jne    c0013734 <CPU::detectFeatures()+0x322>
c0013725:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001372f:	e9 a9 00 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c0013734:	50                   	push   eax
c0013735:	50                   	push   eax
c0013736:	68 04 58 02 c0       	push   0xc0025804
c001373b:	55                   	push   ebp
c001373c:	e8 8b d0 fe ff       	call   c00007cc <strcmp>
c0013741:	83 c4 10             	add    esp,0x10
c0013744:	85 c0                	test   eax,eax
c0013746:	75 0f                	jne    c0013757 <CPU::detectFeatures()+0x345>
c0013748:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013752:	e9 86 00 00 00       	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c0013757:	50                   	push   eax
c0013758:	50                   	push   eax
c0013759:	68 11 58 02 c0       	push   0xc0025811
c001375e:	55                   	push   ebp
c001375f:	e8 68 d0 fe ff       	call   c00007cc <strcmp>
c0013764:	83 c4 10             	add    esp,0x10
c0013767:	85 c0                	test   eax,eax
c0013769:	75 0c                	jne    c0013777 <CPU::detectFeatures()+0x365>
c001376b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013775:	eb 66                	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c0013777:	50                   	push   eax
c0013778:	50                   	push   eax
c0013779:	68 1e 58 02 c0       	push   0xc002581e
c001377e:	55                   	push   ebp
c001377f:	e8 48 d0 fe ff       	call   c00007cc <strcmp>
c0013784:	83 c4 10             	add    esp,0x10
c0013787:	85 c0                	test   eax,eax
c0013789:	75 0c                	jne    c0013797 <CPU::detectFeatures()+0x385>
c001378b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013795:	eb 46                	jmp    c00137dd <CPU::detectFeatures()+0x3cb>
c0013797:	57                   	push   edi
c0013798:	57                   	push   edi
c0013799:	68 2b 58 02 c0       	push   0xc002582b
c001379e:	55                   	push   ebp
c001379f:	e8 28 d0 fe ff       	call   c00007cc <strcmp>
c00137a4:	83 c4 10             	add    esp,0x10
c00137a7:	85 c0                	test   eax,eax
c00137a9:	74 e0                	je     c001378b <CPU::detectFeatures()+0x379>
c00137ab:	56                   	push   esi
c00137ac:	56                   	push   esi
c00137ad:	68 38 58 02 c0       	push   0xc0025838
c00137b2:	55                   	push   ebp
c00137b3:	e8 14 d0 fe ff       	call   c00007cc <strcmp>
c00137b8:	83 c4 10             	add    esp,0x10
c00137bb:	85 c0                	test   eax,eax
c00137bd:	74 cc                	je     c001378b <CPU::detectFeatures()+0x379>
c00137bf:	51                   	push   ecx
c00137c0:	51                   	push   ecx
c00137c1:	68 45 58 02 c0       	push   0xc0025845
c00137c6:	55                   	push   ebp
c00137c7:	e8 00 d0 fe ff       	call   c00007cc <strcmp>
c00137cc:	83 c4 10             	add    esp,0x10
c00137cf:	85 c0                	test   eax,eax
c00137d1:	74 b8                	je     c001378b <CPU::detectFeatures()+0x379>
c00137d3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00137dd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00137e2:	0f 86 be 00 00 00    	jbe    c00138a6 <CPU::detectFeatures()+0x494>
c00137e8:	83 ec 0c             	sub    esp,0xc
c00137eb:	68 80 00 00 00       	push   0x80
c00137f0:	e8 31 fb ff ff       	call   c0013326 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00137f5:	83 e0 01             	and    eax,0x1
c00137f8:	c1 e0 06             	shl    eax,0x6
c00137fb:	88 c2                	mov    dl,al
c00137fd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013803:	83 e0 bf             	and    eax,0xffffffbf
c0013806:	09 d0                	or     eax,edx
c0013808:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001380e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013815:	e8 0c fb ff ff       	call   c0013326 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001381a:	83 e0 01             	and    eax,0x1
c001381d:	c1 e0 04             	shl    eax,0x4
c0013820:	88 c2                	mov    dl,al
c0013822:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013828:	83 e0 ef             	and    eax,0xffffffef
c001382b:	09 d0                	or     eax,edx
c001382d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013833:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001383a:	e8 e7 fa ff ff       	call   c0013326 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001383f:	c1 e0 07             	shl    eax,0x7
c0013842:	88 c2                	mov    dl,al
c0013844:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001384a:	83 e0 7f             	and    eax,0x7f
c001384d:	09 d0                	or     eax,edx
c001384f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013855:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001385c:	e8 f3 fa ff ff       	call   c0013354 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013861:	83 e0 01             	and    eax,0x1
c0013864:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001386b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013871:	83 e0 f7             	and    eax,0xfffffff7
c0013874:	09 d0                	or     eax,edx
c0013876:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001387c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013883:	e8 cc fa ff ff       	call   c0013354 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013888:	83 c4 10             	add    esp,0x10
c001388b:	83 e0 01             	and    eax,0x1
c001388e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013895:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001389b:	83 e0 fb             	and    eax,0xfffffffb
c001389e:	09 d0                	or     eax,edx
c00138a0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00138a6:	83 ec 0c             	sub    esp,0xc
c00138a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138ad:	50                   	push   eax
c00138ae:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138b2:	50                   	push   eax
c00138b3:	8d 74 24 28          	lea    esi,[esp+0x28]
c00138b7:	56                   	push   esi
c00138b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00138bc:	50                   	push   eax
c00138bd:	6a 01                	push   0x1
c00138bf:	e8 82 f9 ff ff       	call   c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00138c8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00138ce:	88 ca                	mov    dl,cl
c00138d0:	83 e0 f0             	and    eax,0xfffffff0
c00138d3:	83 e2 0f             	and    edx,0xf
c00138d6:	09 d0                	or     eax,edx
c00138d8:	88 ca                	mov    dl,cl
c00138da:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00138e0:	c0 ea 04             	shr    dl,0x4
c00138e3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00138e7:	0f b6 c2             	movzx  eax,dl
c00138ea:	83 c4 20             	add    esp,0x20
c00138ed:	c1 e0 06             	shl    eax,0x6
c00138f0:	89 c7                	mov    edi,eax
c00138f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138f8:	66 25 3f c0          	and    ax,0xc03f
c00138fc:	09 f8                	or     eax,edi
c00138fe:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0013905:	89 c8                	mov    eax,ecx
c0013907:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c001390e:	c1 e8 08             	shr    eax,0x8
c0013911:	83 e5 3f             	and    ebp,0x3f
c0013914:	83 e0 0f             	and    eax,0xf
c0013917:	89 c7                	mov    edi,eax
c0013919:	c1 e7 06             	shl    edi,0x6
c001391c:	09 ef                	or     edi,ebp
c001391e:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013925:	89 fa                	mov    edx,edi
c0013927:	83 e5 c0             	and    ebp,0xffffffc0
c001392a:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013930:	88 c2                	mov    dl,al
c0013932:	c0 ea 02             	shr    dl,0x2
c0013935:	89 d7                	mov    edi,edx
c0013937:	09 ef                	or     edi,ebp
c0013939:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001393f:	89 fa                	mov    edx,edi
c0013941:	83 e5 cf             	and    ebp,0xffffffcf
c0013944:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001394a:	89 cf                	mov    edi,ecx
c001394c:	c1 ef 0c             	shr    edi,0xc
c001394f:	83 e7 03             	and    edi,0x3
c0013952:	c1 e7 04             	shl    edi,0x4
c0013955:	09 ef                	or     edi,ebp
c0013957:	3c 06                	cmp    al,0x6
c0013959:	89 fa                	mov    edx,edi
c001395b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013961:	74 04                	je     c0013967 <CPU::detectFeatures()+0x555>
c0013963:	3c 0f                	cmp    al,0xf
c0013965:	75 5c                	jne    c00139c3 <CPU::detectFeatures()+0x5b1>
c0013967:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001396b:	89 cf                	mov    edi,ecx
c001396d:	c1 ef 10             	shr    edi,0x10
c0013970:	c1 e7 04             	shl    edi,0x4
c0013973:	09 fa                	or     edx,edi
c0013975:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c001397b:	0f b6 d2             	movzx  edx,dl
c001397e:	66 81 e7 3f c0       	and    di,0xc03f
c0013983:	c1 e2 06             	shl    edx,0x6
c0013986:	09 fa                	or     edx,edi
c0013988:	3c 0f                	cmp    al,0xf
c001398a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0013991:	75 30                	jne    c00139c3 <CPU::detectFeatures()+0x5b1>
c0013993:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013999:	c1 e9 14             	shr    ecx,0x14
c001399c:	83 e0 3f             	and    eax,0x3f
c001399f:	83 c1 0f             	add    ecx,0xf
c00139a2:	88 ca                	mov    dl,cl
c00139a4:	c0 e9 02             	shr    cl,0x2
c00139a7:	c1 e2 06             	shl    edx,0x6
c00139aa:	09 d0                	or     eax,edx
c00139ac:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00139b2:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00139b8:	83 e0 c0             	and    eax,0xffffffc0
c00139bb:	09 c1                	or     ecx,eax
c00139bd:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00139c3:	83 ec 0c             	sub    esp,0xc
c00139c6:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00139cd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00139d1:	50                   	push   eax
c00139d2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00139d6:	55                   	push   ebp
c00139d7:	56                   	push   esi
c00139d8:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00139dc:	57                   	push   edi
c00139dd:	68 00 00 00 80       	push   0x80000000
c00139e2:	e8 5f f8 ff ff       	call   c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00139e7:	83 c4 20             	add    esp,0x20
c00139ea:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00139f2:	76 22                	jbe    c0013a16 <CPU::detectFeatures()+0x604>
c00139f4:	83 ec 0c             	sub    esp,0xc
c00139f7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00139fb:	50                   	push   eax
c00139fc:	55                   	push   ebp
c00139fd:	56                   	push   esi
c00139fe:	57                   	push   edi
c00139ff:	68 01 00 00 80       	push   0x80000001
c0013a04:	e8 3d f8 ff ff       	call   c0013246 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013a09:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0013a13:	83 c4 20             	add    esp,0x20
c0013a16:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013a1c:	83 f8 01             	cmp    eax,0x1
c0013a1f:	75 6f                	jne    c0013a90 <CPU::detectFeatures()+0x67e>
c0013a21:	51                   	push   ecx
c0013a22:	51                   	push   ecx
c0013a23:	68 51 58 02 c0       	push   0xc0025851
c0013a28:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013a2c:	56                   	push   esi
c0013a2d:	e8 0e cd fe ff       	call   c0000740 <strcpy>
c0013a32:	5f                   	pop    edi
c0013a33:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a39:	5d                   	pop    ebp
c0013a3a:	66 c1 e8 06          	shr    ax,0x6
c0013a3e:	0f b6 c0             	movzx  eax,al
c0013a41:	50                   	push   eax
c0013a42:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a48:	c1 e8 0e             	shr    eax,0xe
c0013a4b:	0f b6 c0             	movzx  eax,al
c0013a4e:	50                   	push   eax
c0013a4f:	e8 9c f4 ff ff       	call   c0012ef0 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013a54:	5a                   	pop    edx
c0013a55:	59                   	pop    ecx
c0013a56:	50                   	push   eax
c0013a57:	56                   	push   esi
c0013a58:	e8 23 ce fe ff       	call   c0000880 <strcat>
c0013a5d:	5f                   	pop    edi
c0013a5e:	5d                   	pop    ebp
c0013a5f:	56                   	push   esi
c0013a60:	53                   	push   ebx
c0013a61:	e8 ce a9 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013a66:	58                   	pop    eax
c0013a67:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013a6d:	5a                   	pop    edx
c0013a6e:	68 58 58 02 c0       	push   0xc0025858
c0013a73:	50                   	push   eax
c0013a74:	e8 53 cd fe ff       	call   c00007cc <strcmp>
c0013a79:	83 c4 10             	add    esp,0x10
c0013a7c:	85 c0                	test   eax,eax
c0013a7e:	0f 85 71 03 00 00    	jne    c0013df5 <CPU::detectFeatures()+0x9e3>
c0013a84:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013a8b:	e9 65 03 00 00       	jmp    c0013df5 <CPU::detectFeatures()+0x9e3>
c0013a90:	83 f8 02             	cmp    eax,0x2
c0013a93:	0f 85 b5 00 00 00    	jne    c0013b4e <CPU::detectFeatures()+0x73c>
c0013a99:	57                   	push   edi
c0013a9a:	57                   	push   edi
c0013a9b:	68 6a 58 02 c0       	push   0xc002586a
c0013aa0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013aa4:	56                   	push   esi
c0013aa5:	e8 96 cc fe ff       	call   c0000740 <strcpy>
c0013aaa:	5d                   	pop    ebp
c0013aab:	58                   	pop    eax
c0013aac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013ab2:	66 c1 e8 06          	shr    ax,0x6
c0013ab6:	0f b6 c0             	movzx  eax,al
c0013ab9:	50                   	push   eax
c0013aba:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013ac0:	c1 e8 0e             	shr    eax,0xe
c0013ac3:	0f b6 c0             	movzx  eax,al
c0013ac6:	50                   	push   eax
c0013ac7:	e8 90 f2 ff ff       	call   c0012d5c <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013acc:	5a                   	pop    edx
c0013acd:	59                   	pop    ecx
c0013ace:	50                   	push   eax
c0013acf:	56                   	push   esi
c0013ad0:	e8 ab cd fe ff       	call   c0000880 <strcat>
c0013ad5:	5f                   	pop    edi
c0013ad6:	5d                   	pop    ebp
c0013ad7:	56                   	push   esi
c0013ad8:	53                   	push   ebx
c0013ad9:	e8 56 a9 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013ade:	58                   	pop    eax
c0013adf:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013ae5:	5a                   	pop    edx
c0013ae6:	68 6f 58 02 c0       	push   0xc002586f
c0013aeb:	50                   	push   eax
c0013aec:	e8 db cc fe ff       	call   c00007cc <strcmp>
c0013af1:	83 c4 10             	add    esp,0x10
c0013af4:	85 c0                	test   eax,eax
c0013af6:	75 20                	jne    c0013b18 <CPU::detectFeatures()+0x706>
c0013af8:	8b 15 e8 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280e8
c0013afe:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013b04:	a8 01                	test   al,0x1
c0013b06:	74 10                	je     c0013b18 <CPU::detectFeatures()+0x706>
c0013b08:	83 e0 fe             	and    eax,0xfffffffe
c0013b0b:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013b11:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013b18:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013b1e:	c1 e8 0e             	shr    eax,0xe
c0013b21:	3c 05                	cmp    al,0x5
c0013b23:	0f 85 cc 02 00 00    	jne    c0013df5 <CPU::detectFeatures()+0x9e3>
c0013b29:	56                   	push   esi
c0013b2a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013b30:	83 e0 0f             	and    eax,0xf
c0013b33:	50                   	push   eax
c0013b34:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013b3a:	66 c1 e8 06          	shr    ax,0x6
c0013b3e:	0f b6 c0             	movzx  eax,al
c0013b41:	50                   	push   eax
c0013b42:	6a 05                	push   0x5
c0013b44:	e8 89 f6 ff ff       	call   c00131d2 <CPU::AMD_K6_writeback(int, int, int)>
c0013b49:	e9 1f 02 00 00       	jmp    c0013d6d <CPU::detectFeatures()+0x95b>
c0013b4e:	8d 50 fd             	lea    edx,[eax-0x3]
c0013b51:	83 fa 01             	cmp    edx,0x1
c0013b54:	76 09                	jbe    c0013b5f <CPU::detectFeatures()+0x74d>
c0013b56:	83 f8 06             	cmp    eax,0x6
c0013b59:	0f 85 91 01 00 00    	jne    c0013cf0 <CPU::detectFeatures()+0x8de>
c0013b5f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013b65:	c1 ea 0e             	shr    edx,0xe
c0013b68:	80 fa 05             	cmp    dl,0x5
c0013b6b:	75 7b                	jne    c0013be8 <CPU::detectFeatures()+0x7d6>
c0013b6d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013b73:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013b78:	66 81 fa 00 01       	cmp    dx,0x100
c0013b7d:	75 0c                	jne    c0013b8b <CPU::detectFeatures()+0x779>
c0013b7f:	51                   	push   ecx
c0013b80:	51                   	push   ecx
c0013b81:	68 76 58 02 c0       	push   0xc0025876
c0013b86:	e9 dc 01 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013b8b:	66 81 fa 00 02       	cmp    dx,0x200
c0013b90:	75 0c                	jne    c0013b9e <CPU::detectFeatures()+0x78c>
c0013b92:	52                   	push   edx
c0013b93:	52                   	push   edx
c0013b94:	68 89 58 02 c0       	push   0xc0025889
c0013b99:	e9 c9 01 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013b9e:	66 81 fa 40 02       	cmp    dx,0x240
c0013ba3:	75 0c                	jne    c0013bb1 <CPU::detectFeatures()+0x79f>
c0013ba5:	50                   	push   eax
c0013ba6:	50                   	push   eax
c0013ba7:	68 9b 58 02 c0       	push   0xc002589b
c0013bac:	e9 b6 01 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013bb1:	83 f8 06             	cmp    eax,0x6
c0013bb4:	75 0c                	jne    c0013bc2 <CPU::detectFeatures()+0x7b0>
c0013bb6:	50                   	push   eax
c0013bb7:	50                   	push   eax
c0013bb8:	68 ad 58 02 c0       	push   0xc00258ad
c0013bbd:	e9 a5 01 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013bc2:	83 f8 04             	cmp    eax,0x4
c0013bc5:	75 0c                	jne    c0013bd3 <CPU::detectFeatures()+0x7c1>
c0013bc7:	50                   	push   eax
c0013bc8:	50                   	push   eax
c0013bc9:	68 b9 58 02 c0       	push   0xc00258b9
c0013bce:	e9 94 01 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013bd3:	83 f8 03             	cmp    eax,0x3
c0013bd6:	0f 85 19 02 00 00    	jne    c0013df5 <CPU::detectFeatures()+0x9e3>
c0013bdc:	50                   	push   eax
c0013bdd:	50                   	push   eax
c0013bde:	68 c1 58 02 c0       	push   0xc00258c1
c0013be3:	e9 7f 01 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013be8:	80 fa 06             	cmp    dl,0x6
c0013beb:	0f 85 db 00 00 00    	jne    c0013ccc <CPU::detectFeatures()+0x8ba>
c0013bf1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013bf7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013bfc:	66 81 fa 80 01       	cmp    dx,0x180
c0013c01:	75 0c                	jne    c0013c0f <CPU::detectFeatures()+0x7fd>
c0013c03:	50                   	push   eax
c0013c04:	50                   	push   eax
c0013c05:	68 cc 58 02 c0       	push   0xc00258cc
c0013c0a:	e9 58 01 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013c0f:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013c15:	66 f7 c1 80 ff       	test   cx,0xff80
c0013c1a:	75 0c                	jne    c0013c28 <CPU::detectFeatures()+0x816>
c0013c1c:	50                   	push   eax
c0013c1d:	50                   	push   eax
c0013c1e:	68 dc 58 02 c0       	push   0xc00258dc
c0013c23:	e9 3f 01 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013c28:	66 81 fa 40 02       	cmp    dx,0x240
c0013c2d:	75 0c                	jne    c0013c3b <CPU::detectFeatures()+0x829>
c0013c2f:	55                   	push   ebp
c0013c30:	55                   	push   ebp
c0013c31:	68 e3 58 02 c0       	push   0xc00258e3
c0013c36:	e9 2c 01 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013c3b:	66 81 fa 80 02       	cmp    dx,0x280
c0013c40:	75 0c                	jne    c0013c4e <CPU::detectFeatures()+0x83c>
c0013c42:	57                   	push   edi
c0013c43:	57                   	push   edi
c0013c44:	68 ec 58 02 c0       	push   0xc00258ec
c0013c49:	e9 19 01 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013c4e:	66 81 fa 40 03       	cmp    dx,0x340
c0013c53:	74 ed                	je     c0013c42 <CPU::detectFeatures()+0x830>
c0013c55:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013c5a:	75 0c                	jne    c0013c68 <CPU::detectFeatures()+0x856>
c0013c5c:	56                   	push   esi
c0013c5d:	56                   	push   esi
c0013c5e:	68 f3 58 02 c0       	push   0xc00258f3
c0013c63:	e9 ff 00 00 00       	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013c68:	83 f8 06             	cmp    eax,0x6
c0013c6b:	0f 84 45 ff ff ff    	je     c0013bb6 <CPU::detectFeatures()+0x7a4>
c0013c71:	83 f8 04             	cmp    eax,0x4
c0013c74:	0f 84 4d ff ff ff    	je     c0013bc7 <CPU::detectFeatures()+0x7b5>
c0013c7a:	83 f8 03             	cmp    eax,0x3
c0013c7d:	0f 85 72 01 00 00    	jne    c0013df5 <CPU::detectFeatures()+0x9e3>
c0013c83:	51                   	push   ecx
c0013c84:	51                   	push   ecx
c0013c85:	68 fc 58 02 c0       	push   0xc00258fc
c0013c8a:	53                   	push   ebx
c0013c8b:	e8 a4 a7 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013c90:	b1 c1                	mov    cl,0xc1
c0013c92:	88 c8                	mov    al,cl
c0013c94:	e6 22                	out    0x22,al
c0013c96:	e4 23                	in     al,0x23
c0013c98:	88 c2                	mov    dl,al
c0013c9a:	88 c8                	mov    al,cl
c0013c9c:	e6 22                	out    0x22,al
c0013c9e:	88 d0                	mov    al,dl
c0013ca0:	83 c8 10             	or     eax,0x10
c0013ca3:	e6 23                	out    0x23,al
c0013ca5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013cac:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013caf:	89 d0                	mov    eax,edx
c0013cb1:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013cb7:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013cbb:	40                   	inc    eax
c0013cbc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013cc2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013cc7:	e9 a1 00 00 00       	jmp    c0013d6d <CPU::detectFeatures()+0x95b>
c0013ccc:	83 f8 06             	cmp    eax,0x6
c0013ccf:	0f 84 e1 fe ff ff    	je     c0013bb6 <CPU::detectFeatures()+0x7a4>
c0013cd5:	83 f8 04             	cmp    eax,0x4
c0013cd8:	0f 84 e9 fe ff ff    	je     c0013bc7 <CPU::detectFeatures()+0x7b5>
c0013cde:	83 f8 03             	cmp    eax,0x3
c0013ce1:	0f 85 0e 01 00 00    	jne    c0013df5 <CPU::detectFeatures()+0x9e3>
c0013ce7:	52                   	push   edx
c0013ce8:	52                   	push   edx
c0013ce9:	68 07 59 02 c0       	push   0xc0025907
c0013cee:	eb 77                	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013cf0:	83 f8 07             	cmp    eax,0x7
c0013cf3:	75 09                	jne    c0013cfe <CPU::detectFeatures()+0x8ec>
c0013cf5:	50                   	push   eax
c0013cf6:	50                   	push   eax
c0013cf7:	68 11 59 02 c0       	push   0xc0025911
c0013cfc:	eb 69                	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013cfe:	83 f8 0a             	cmp    eax,0xa
c0013d01:	75 09                	jne    c0013d0c <CPU::detectFeatures()+0x8fa>
c0013d03:	50                   	push   eax
c0013d04:	50                   	push   eax
c0013d05:	68 1c 59 02 c0       	push   0xc002591c
c0013d0a:	eb 5b                	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013d0c:	83 f8 0b             	cmp    eax,0xb
c0013d0f:	75 09                	jne    c0013d1a <CPU::detectFeatures()+0x908>
c0013d11:	50                   	push   eax
c0013d12:	50                   	push   eax
c0013d13:	68 24 59 02 c0       	push   0xc0025924
c0013d18:	eb 4d                	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013d1a:	83 f8 08             	cmp    eax,0x8
c0013d1d:	75 09                	jne    c0013d28 <CPU::detectFeatures()+0x916>
c0013d1f:	50                   	push   eax
c0013d20:	50                   	push   eax
c0013d21:	68 2d 59 02 c0       	push   0xc002592d
c0013d26:	eb 3f                	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013d28:	83 f8 09             	cmp    eax,0x9
c0013d2b:	75 09                	jne    c0013d36 <CPU::detectFeatures()+0x924>
c0013d2d:	50                   	push   eax
c0013d2e:	50                   	push   eax
c0013d2f:	68 35 59 02 c0       	push   0xc0025935
c0013d34:	eb 31                	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013d36:	83 f8 05             	cmp    eax,0x5
c0013d39:	75 09                	jne    c0013d44 <CPU::detectFeatures()+0x932>
c0013d3b:	50                   	push   eax
c0013d3c:	50                   	push   eax
c0013d3d:	68 3d 59 02 c0       	push   0xc002593d
c0013d42:	eb 23                	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013d44:	83 f8 0c             	cmp    eax,0xc
c0013d47:	75 09                	jne    c0013d52 <CPU::detectFeatures()+0x940>
c0013d49:	55                   	push   ebp
c0013d4a:	55                   	push   ebp
c0013d4b:	68 4b 59 02 c0       	push   0xc002594b
c0013d50:	eb 15                	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013d52:	83 f8 0d             	cmp    eax,0xd
c0013d55:	75 09                	jne    c0013d60 <CPU::detectFeatures()+0x94e>
c0013d57:	57                   	push   edi
c0013d58:	57                   	push   edi
c0013d59:	68 56 59 02 c0       	push   0xc0025956
c0013d5e:	eb 07                	jmp    c0013d67 <CPU::detectFeatures()+0x955>
c0013d60:	56                   	push   esi
c0013d61:	56                   	push   esi
c0013d62:	68 6a 59 02 c0       	push   0xc002596a
c0013d67:	53                   	push   ebx
c0013d68:	e8 c7 a6 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013d6d:	83 c4 10             	add    esp,0x10
c0013d70:	e9 80 00 00 00       	jmp    c0013df5 <CPU::detectFeatures()+0x9e3>
c0013d75:	51                   	push   ecx
c0013d76:	51                   	push   ecx
c0013d77:	68 b6 57 02 c0       	push   0xc00257b6
c0013d7c:	55                   	push   ebp
c0013d7d:	e8 be c9 fe ff       	call   c0000740 <strcpy>
c0013d82:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013d8c:	e8 52 c4 fe ff       	call   c00001e3 <is486>
c0013d91:	83 c4 10             	add    esp,0x10
c0013d94:	85 c0                	test   eax,eax
c0013d96:	74 2b                	je     c0013dc3 <CPU::detectFeatures()+0x9b1>
c0013d98:	52                   	push   edx
c0013d99:	52                   	push   edx
c0013d9a:	68 76 59 02 c0       	push   0xc0025976
c0013d9f:	53                   	push   ebx
c0013da0:	e8 8f a6 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013da5:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013dac:	0f 20 c0             	mov    eax,cr0
c0013daf:	83 e0 14             	and    eax,0x14
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	83 f8 04             	cmp    eax,0x4
c0013db8:	75 1f                	jne    c0013dd9 <CPU::detectFeatures()+0x9c7>
c0013dba:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013dc1:	eb 32                	jmp    c0013df5 <CPU::detectFeatures()+0x9e3>
c0013dc3:	50                   	push   eax
c0013dc4:	50                   	push   eax
c0013dc5:	68 81 59 02 c0       	push   0xc0025981
c0013dca:	53                   	push   ebx
c0013dcb:	e8 64 a6 ff ff       	call   c000e434 <Device::setName(char const*)>
c0013dd0:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013dd7:	eb d3                	jmp    c0013dac <CPU::detectFeatures()+0x99a>
c0013dd9:	e8 e0 c3 fe ff       	call   c00001be <hasLegacyFPU>
c0013dde:	83 e0 01             	and    eax,0x1
c0013de1:	8d 14 00             	lea    edx,[eax+eax*1]
c0013de4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013dea:	83 e0 fd             	and    eax,0xfffffffd
c0013ded:	09 d0                	or     eax,edx
c0013def:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013df5:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013dfc:	83 c4 4c             	add    esp,0x4c
c0013dff:	5b                   	pop    ebx
c0013e00:	5e                   	pop    esi
c0013e01:	5f                   	pop    edi
c0013e02:	5d                   	pop    ebp
c0013e03:	c3                   	ret    

c0013e04 <CPU::setupSMEP()>:
c0013e04:	0f 20 e0             	mov    eax,cr4
c0013e07:	0d 00 00 10 00       	or     eax,0x100000
c0013e0c:	0f 22 e0             	mov    cr4,eax
c0013e0f:	c3                   	ret    

c0013e10 <CPU::setupUMIP()>:
c0013e10:	0f 20 e0             	mov    eax,cr4
c0013e13:	80 cc 08             	or     ah,0x8
c0013e16:	0f 22 e0             	mov    cr4,eax
c0013e19:	c3                   	ret    

c0013e1a <CPU::setupTSC()>:
c0013e1a:	0f 20 e0             	mov    eax,cr4
c0013e1d:	83 c8 04             	or     eax,0x4
c0013e20:	0f 22 e0             	mov    cr4,eax
c0013e23:	c3                   	ret    

c0013e24 <CPU::setupLargePages()>:
c0013e24:	0f 20 e0             	mov    eax,cr4
c0013e27:	83 c8 10             	or     eax,0x10
c0013e2a:	0f 22 e0             	mov    cr4,eax
c0013e2d:	c3                   	ret    

c0013e2e <CPU::setupPAT()>:
c0013e2e:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0013e33:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013e3a:	74 2c                	je     c0013e68 <CPU::setupPAT()+0x3a>
c0013e3c:	53                   	push   ebx
c0013e3d:	83 ec 10             	sub    esp,0x10
c0013e40:	68 77 02 00 00       	push   0x277
c0013e45:	50                   	push   eax
c0013e46:	e8 df 50 ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0013e4b:	83 e2 f8             	and    edx,0xfffffff8
c0013e4e:	83 ca 01             	or     edx,0x1
c0013e51:	52                   	push   edx
c0013e52:	50                   	push   eax
c0013e53:	68 77 02 00 00       	push   0x277
c0013e58:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0013e5e:	e8 f3 50 ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013e63:	83 c4 28             	add    esp,0x28
c0013e66:	5b                   	pop    ebx
c0013e67:	c3                   	ret    
c0013e68:	c3                   	ret    
c0013e69:	90                   	nop

c0013e6a <CPU::setupMTRR()>:
c0013e6a:	c3                   	ret    
c0013e6b:	90                   	nop

c0013e6c <CPU::setupGlobalPages()>:
c0013e6c:	0f 20 e0             	mov    eax,cr4
c0013e6f:	0c 80                	or     al,0x80
c0013e71:	0f 22 e0             	mov    cr4,eax
c0013e74:	c3                   	ret    
c0013e75:	90                   	nop

c0013e76 <CPU::allowUsermodeDataAccess()>:
c0013e76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e7a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013e81:	74 03                	je     c0013e86 <CPU::allowUsermodeDataAccess()+0x10>
c0013e83:	0f 01 cb             	stac   
c0013e86:	c3                   	ret    
c0013e87:	90                   	nop

c0013e88 <CPU::prohibitUsermodeDataAccess()>:
c0013e88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e8c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013e93:	74 03                	je     c0013e98 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013e95:	0f 01 ca             	clac   
c0013e98:	c3                   	ret    
c0013e99:	90                   	nop

c0013e9a <CPU::setupSMAP()>:
c0013e9a:	0f 20 e0             	mov    eax,cr4
c0013e9d:	0d 00 00 20 00       	or     eax,0x200000
c0013ea2:	0f 22 e0             	mov    cr4,eax
c0013ea5:	eb e1                	jmp    c0013e88 <CPU::prohibitUsermodeDataAccess()>
c0013ea7:	90                   	nop

c0013ea8 <CPU::setupFeatures()>:
c0013ea8:	53                   	push   ebx
c0013ea9:	83 ec 08             	sub    esp,0x8
c0013eac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013eb0:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013eb7:	74 18                	je     c0013ed1 <CPU::setupFeatures()+0x29>
c0013eb9:	83 ec 0c             	sub    esp,0xc
c0013ebc:	68 8c 59 02 c0       	push   0xc002598c
c0013ec1:	e8 39 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013ec6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ec9:	e8 42 ff ff ff       	call   c0013e10 <CPU::setupUMIP()>
c0013ece:	83 c4 10             	add    esp,0x10
c0013ed1:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013ed8:	74 18                	je     c0013ef2 <CPU::setupFeatures()+0x4a>
c0013eda:	83 ec 0c             	sub    esp,0xc
c0013edd:	68 96 59 02 c0       	push   0xc0025996
c0013ee2:	e8 18 8e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013ee7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013eea:	e8 2b ff ff ff       	call   c0013e1a <CPU::setupTSC()>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013ef9:	74 18                	je     c0013f13 <CPU::setupFeatures()+0x6b>
c0013efb:	83 ec 0c             	sub    esp,0xc
c0013efe:	68 9f 59 02 c0       	push   0xc002599f
c0013f03:	e8 f7 8d ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013f08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f0b:	e8 14 ff ff ff       	call   c0013e24 <CPU::setupLargePages()>
c0013f10:	83 c4 10             	add    esp,0x10
c0013f13:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013f1a:	74 18                	je     c0013f34 <CPU::setupFeatures()+0x8c>
c0013f1c:	83 ec 0c             	sub    esp,0xc
c0013f1f:	68 a8 59 02 c0       	push   0xc00259a8
c0013f24:	e8 d6 8d ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013f29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f2c:	e8 3b ff ff ff       	call   c0013e6c <CPU::setupGlobalPages()>
c0013f31:	83 c4 10             	add    esp,0x10
c0013f34:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013f3b:	74 18                	je     c0013f55 <CPU::setupFeatures()+0xad>
c0013f3d:	83 ec 0c             	sub    esp,0xc
c0013f40:	68 ba 59 02 c0       	push   0xc00259ba
c0013f45:	e8 b5 8d ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0013f4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f4d:	e8 dc fe ff ff       	call   c0013e2e <CPU::setupPAT()>
c0013f52:	83 c4 10             	add    esp,0x10
c0013f55:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013f5c:	74 11                	je     c0013f6f <CPU::setupFeatures()+0xc7>
c0013f5e:	c7 44 24 10 c3 59 02 c0 	mov    DWORD PTR [esp+0x10],0xc00259c3
c0013f66:	83 c4 08             	add    esp,0x8
c0013f69:	5b                   	pop    ebx
c0013f6a:	e9 90 8d ff ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>
c0013f6f:	83 c4 08             	add    esp,0x8
c0013f72:	5b                   	pop    ebx
c0013f73:	c3                   	ret    

c0013f74 <CPU::open(int, int, void*)>:
c0013f74:	57                   	push   edi
c0013f75:	56                   	push   esi
c0013f76:	53                   	push   ebx
c0013f77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f7f:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013f85:	83 ec 0c             	sub    esp,0xc
c0013f88:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013f8e:	68 cd 59 02 c0       	push   0xc00259cd
c0013f93:	e8 d1 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f98:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013f9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fa1:	e8 60 53 ff ff       	call   c0009306 <GDT::setup()>
c0013fa6:	c7 04 24 df 59 02 c0 	mov    DWORD PTR [esp],0xc00259df
c0013fad:	e8 b7 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fb2:	83 c4 0c             	add    esp,0xc
c0013fb5:	6a 00                	push   0x0
c0013fb7:	68 ef be ad de       	push   0xdeadbeef
c0013fbc:	57                   	push   edi
c0013fbd:	e8 9e 73 ff ff       	call   c000b360 <TSS::setup(unsigned long, unsigned long)>
c0013fc2:	c7 04 24 f1 59 02 c0 	mov    DWORD PTR [esp],0xc00259f1
c0013fc9:	e8 9b 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fce:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013fd1:	e8 6a 73 ff ff       	call   c000b340 <TSS::flush()>
c0013fd6:	c7 04 24 05 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a05
c0013fdd:	e8 87 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fe2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013fe8:	89 04 24             	mov    DWORD PTR [esp],eax
c0013feb:	e8 82 55 ff ff       	call   c0009572 <IDT::setup()>
c0013ff0:	c7 04 24 17 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a17
c0013ff7:	e8 6d 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013ffc:	b8 00 04 00 00       	mov    eax,0x400
c0014001:	0f 23 f8             	mov    db7,eax
c0014004:	c7 04 24 35 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a35
c001400b:	e8 59 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014010:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001401a:	e8 a7 60 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c001401f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014025:	89 30                	mov    DWORD PTR [eax],esi
c0014027:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001402d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014030:	c7 04 24 57 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a57
c0014037:	e8 2d 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001403c:	58                   	pop    eax
c001403d:	5a                   	pop    edx
c001403e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014044:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014048:	e8 0d 83 ff ff       	call   c000c35a <VAS::setCPUSpecific(unsigned long)>
c001404d:	c7 04 24 7f 5a 02 c0 	mov    DWORD PTR [esp],0xc0025a7f
c0014054:	e8 10 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014059:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001405c:	e8 b1 f3 ff ff       	call   c0013412 <CPU::detectFeatures()>
c0014061:	c7 04 24 a2 5a 02 c0 	mov    DWORD PTR [esp],0xc0025aa2
c0014068:	e8 fc 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001406d:	e8 d0 b5 ff ff       	call   c000f642 <setupInterruptController()>
c0014072:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014078:	c7 04 24 c6 5a 02 c0 	mov    DWORD PTR [esp],0xc0025ac6
c001407f:	e8 e5 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014084:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0014089:	83 e0 10             	and    eax,0x10
c001408c:	83 f8 01             	cmp    eax,0x1
c001408f:	19 c0                	sbb    eax,eax
c0014091:	83 e0 46             	and    eax,0x46
c0014094:	83 c0 1e             	add    eax,0x1e
c0014097:	89 04 24             	mov    DWORD PTR [esp],eax
c001409a:	e8 d1 cb ff ff       	call   c0010c70 <setupTimer(int)>
c001409f:	83 c4 10             	add    esp,0x10
c00140a2:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00140a8:	f6 05 00 81 02 c0 20 	test   BYTE PTR ds:0xc0028100,0x20
c00140af:	74 18                	je     c00140c9 <CPU::open(int, int, void*)+0x155>
c00140b1:	83 ec 0c             	sub    esp,0xc
c00140b4:	68 e1 5a 02 c0       	push   0xc0025ae1
c00140b9:	e8 ab 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00140be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00140c1:	e8 e2 fd ff ff       	call   c0013ea8 <CPU::setupFeatures()>
c00140c6:	83 c4 10             	add    esp,0x10
c00140c9:	83 ec 0c             	sub    esp,0xc
c00140cc:	68 fc 5a 02 c0       	push   0xc0025afc
c00140d1:	e8 93 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00140d6:	83 c4 10             	add    esp,0x10
c00140d9:	31 c0                	xor    eax,eax
c00140db:	5b                   	pop    ebx
c00140dc:	5e                   	pop    esi
c00140dd:	5f                   	pop    edi
c00140de:	c3                   	ret    
c00140df:	90                   	nop

c00140e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00140e0:	57                   	push   edi
c00140e1:	56                   	push   esi
c00140e2:	53                   	push   ebx
c00140e3:	51                   	push   ecx
c00140e4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00140e8:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00140eb:	0f 02 c0             	lar    eax,ax
c00140ee:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00140f1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00140f5:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00140f8:	88 ca                	mov    dl,cl
c00140fa:	c0 ea 06             	shr    dl,0x6
c00140fd:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0014101:	89 ca                	mov    edx,ecx
c0014103:	66 c1 ea 03          	shr    dx,0x3
c0014107:	83 e2 07             	and    edx,0x7
c001410a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001410f:	88 17                	mov    BYTE PTR [edi],dl
c0014111:	0f 84 a6 01 00 00    	je     c00142bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014117:	83 e1 07             	and    ecx,0x7
c001411a:	80 f9 04             	cmp    cl,0x4
c001411d:	0f 84 98 00 00 00    	je     c00141bb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0014123:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014128:	0f 95 c0             	setne  al
c001412b:	80 f9 05             	cmp    cl,0x5
c001412e:	0f 95 c2             	setne  dl
c0014131:	08 c2                	or     dl,al
c0014133:	74 79                	je     c00141ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014135:	84 c9                	test   cl,cl
c0014137:	75 05                	jne    c001413e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014139:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001413c:	eb 3c                	jmp    c001417a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001413e:	80 f9 01             	cmp    cl,0x1
c0014141:	75 05                	jne    c0014148 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0014143:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014146:	eb 32                	jmp    c001417a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014148:	80 f9 02             	cmp    cl,0x2
c001414b:	75 05                	jne    c0014152 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001414d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014150:	eb 28                	jmp    c001417a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014152:	31 c0                	xor    eax,eax
c0014154:	80 f9 03             	cmp    cl,0x3
c0014157:	75 05                	jne    c001415e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014159:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001415c:	eb 1c                	jmp    c001417a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001415e:	80 f9 05             	cmp    cl,0x5
c0014161:	75 05                	jne    c0014168 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0014163:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014166:	eb 12                	jmp    c001417a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014168:	80 f9 06             	cmp    cl,0x6
c001416b:	75 05                	jne    c0014172 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001416d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014170:	eb 08                	jmp    c001417a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014172:	80 f9 07             	cmp    cl,0x7
c0014175:	75 03                	jne    c001417a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014177:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001417a:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001417f:	75 10                	jne    c0014191 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0014181:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0014185:	b9 03 00 00 00       	mov    ecx,0x3
c001418a:	01 d0                	add    eax,edx
c001418c:	e9 37 01 00 00       	jmp    c00142c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014191:	b9 02 00 00 00       	mov    ecx,0x2
c0014196:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001419b:	0f 85 27 01 00 00    	jne    c00142c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00141a1:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00141a4:	b9 06 00 00 00       	mov    ecx,0x6
c00141a9:	e9 1a 01 00 00       	jmp    c00142c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00141ae:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00141b1:	b9 06 00 00 00       	mov    ecx,0x6
c00141b6:	e9 0f 01 00 00       	jmp    c00142ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00141bb:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00141be:	88 ca                	mov    dl,cl
c00141c0:	c0 ea 06             	shr    dl,0x6
c00141c3:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00141c7:	89 ca                	mov    edx,ecx
c00141c9:	66 c1 ea 03          	shr    dx,0x3
c00141cd:	83 e2 07             	and    edx,0x7
c00141d0:	80 e1 07             	and    cl,0x7
c00141d3:	75 05                	jne    c00141da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00141d5:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00141d8:	eb 4c                	jmp    c0014226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141da:	80 f9 01             	cmp    cl,0x1
c00141dd:	75 05                	jne    c00141e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00141df:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00141e2:	eb 42                	jmp    c0014226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141e4:	80 f9 02             	cmp    cl,0x2
c00141e7:	75 05                	jne    c00141ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00141e9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00141ec:	eb 38                	jmp    c0014226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141ee:	80 f9 03             	cmp    cl,0x3
c00141f1:	75 05                	jne    c00141f8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00141f3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00141f6:	eb 2e                	jmp    c0014226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141f8:	80 f9 04             	cmp    cl,0x4
c00141fb:	75 12                	jne    c001420f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00141fd:	f6 c4 60             	test   ah,0x60
c0014200:	75 08                	jne    c001420a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0014202:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0014205:	8d 78 14             	lea    edi,[eax+0x14]
c0014208:	eb 1c                	jmp    c0014226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001420a:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001420d:	eb 17                	jmp    c0014226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001420f:	80 f9 05             	cmp    cl,0x5
c0014212:	75 05                	jne    c0014219 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0014214:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014217:	eb 0d                	jmp    c0014226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014219:	80 f9 06             	cmp    cl,0x6
c001421c:	75 05                	jne    c0014223 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001421e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0014221:	eb 03                	jmp    c0014226 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014223:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014226:	84 d2                	test   dl,dl
c0014228:	75 05                	jne    c001422f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001422a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001422d:	eb 3c                	jmp    c001426b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001422f:	80 fa 01             	cmp    dl,0x1
c0014232:	75 05                	jne    c0014239 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014234:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014237:	eb 32                	jmp    c001426b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014239:	80 fa 02             	cmp    dl,0x2
c001423c:	75 05                	jne    c0014243 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001423e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0014241:	eb 28                	jmp    c001426b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014243:	80 fa 03             	cmp    dl,0x3
c0014246:	75 05                	jne    c001424d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014248:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001424b:	eb 1e                	jmp    c001426b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001424d:	31 c0                	xor    eax,eax
c001424f:	80 fa 04             	cmp    dl,0x4
c0014252:	74 17                	je     c001426b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014254:	80 fa 05             	cmp    dl,0x5
c0014257:	75 05                	jne    c001425e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014259:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001425c:	eb 0d                	jmp    c001426b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001425e:	80 fa 06             	cmp    dl,0x6
c0014261:	75 05                	jne    c0014268 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0014263:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014266:	eb 03                	jmp    c001426b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014268:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001426b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014270:	0f 94 c2             	sete   dl
c0014273:	80 f9 05             	cmp    cl,0x5
c0014276:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001427a:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001427f:	d3 e0                	shl    eax,cl
c0014281:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014285:	74 0a                	je     c0014291 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014287:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001428a:	b9 07 00 00 00       	mov    ecx,0x7
c001428f:	eb 37                	jmp    c00142c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014291:	01 f8                	add    eax,edi
c0014293:	b9 03 00 00 00       	mov    ecx,0x3
c0014298:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001429d:	74 2b                	je     c00142ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001429f:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00142a4:	75 0d                	jne    c00142b3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00142a6:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00142aa:	01 c8                	add    eax,ecx
c00142ac:	b9 04 00 00 00       	mov    ecx,0x4
c00142b1:	eb 17                	jmp    c00142ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142b3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00142b6:	b9 07 00 00 00       	mov    ecx,0x7
c00142bb:	eb 0d                	jmp    c00142ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142bd:	b9 02 00 00 00       	mov    ecx,0x2
c00142c2:	b2 01                	mov    dl,0x1
c00142c4:	31 c0                	xor    eax,eax
c00142c6:	eb 02                	jmp    c00142ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142c8:	31 d2                	xor    edx,edx
c00142ca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142ce:	89 0b                	mov    DWORD PTR [ebx],ecx
c00142d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00142d4:	88 11                	mov    BYTE PTR [ecx],dl
c00142d6:	5a                   	pop    edx
c00142d7:	5b                   	pop    ebx
c00142d8:	5e                   	pop    esi
c00142d9:	5f                   	pop    edi
c00142da:	c3                   	ret    

c00142db <Krnl::smpEntry()>:
c00142db:	eb fe                	jmp    c00142db <Krnl::smpEntry()>

c00142dd <Krnl::startCPU(int)>:
c00142dd:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c00142e2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00142e9:	0f 84 36 01 00 00    	je     c0014425 <Krnl::startCPU(int)+0x148>
c00142ef:	53                   	push   ebx
c00142f0:	83 ec 10             	sub    esp,0x10
c00142f3:	fa                   	cli    
c00142f4:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c00142fa:	6a 1b                	push   0x1b
c00142fc:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0014302:	e8 23 4c ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0014307:	25 00 f0 ff ff       	and    eax,0xfffff000
c001430c:	89 c3                	mov    ebx,eax
c001430e:	58                   	pop    eax
c001430f:	5a                   	pop    edx
c0014310:	53                   	push   ebx
c0014311:	68 44 5b 02 c0       	push   0xc0025b44
c0014316:	e8 e4 89 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001431b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014329:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014333:	c1 e0 18             	shl    eax,0x18
c0014336:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001433c:	83 c4 10             	add    esp,0x10
c001433f:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014345:	09 c2                	or     edx,eax
c0014347:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001434d:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014353:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014359:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001435f:	80 cd c5             	or     ch,0xc5
c0014362:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014368:	f3 90                	pause  
c001436a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001436c:	0f ba e1 0c          	bt     ecx,0xc
c0014370:	72 f6                	jb     c0014368 <Krnl::startCPU(int)+0x8b>
c0014372:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014378:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001437e:	09 c1                	or     ecx,eax
c0014380:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014386:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001438c:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014392:	80 cd 85             	or     ch,0x85
c0014395:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001439b:	f3 90                	pause  
c001439d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001439f:	0f ba e1 0c          	bt     ecx,0xc
c00143a3:	72 f6                	jb     c001439b <Krnl::startCPU(int)+0xbe>
c00143a5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00143af:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00143b5:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00143bb:	09 c1                	or     ecx,eax
c00143bd:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00143c3:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00143c9:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00143cf:	81 c9 02 06 00 00    	or     ecx,0x602
c00143d5:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00143db:	f3 90                	pause  
c00143dd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00143df:	0f ba e1 0c          	bt     ecx,0xc
c00143e3:	72 f6                	jb     c00143db <Krnl::startCPU(int)+0xfe>
c00143e5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00143ef:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00143f5:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00143fb:	09 c8                	or     eax,ecx
c00143fd:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014403:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014409:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001440e:	0d 02 06 00 00       	or     eax,0x602
c0014413:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014419:	f3 90                	pause  
c001441b:	8b 02                	mov    eax,DWORD PTR [edx]
c001441d:	0f ba e0 0c          	bt     eax,0xc
c0014421:	72 f6                	jb     c0014419 <Krnl::startCPU(int)+0x13c>
c0014423:	eb fe                	jmp    c0014423 <Krnl::startCPU(int)+0x146>
c0014425:	c3                   	ret    

c0014426 <Krnl::startCPUs()>:
c0014426:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c001442b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014431:	88 c2                	mov    dl,al
c0014433:	83 e2 0a             	and    edx,0xa
c0014436:	80 fa 0a             	cmp    dl,0xa
c0014439:	75 09                	jne    c0014444 <Krnl::startCPUs()+0x1e>
c001443b:	a8 01                	test   al,0x1
c001443d:	74 05                	je     c0014444 <Krnl::startCPUs()+0x1e>
c001443f:	e9 57 bd fe ff       	jmp    c000019b <prepareTramp>
c0014444:	c3                   	ret    
c0014445:	90                   	nop

c0014446 <EnvVarContainer::getEnv(char const*)>:
c0014446:	57                   	push   edi
c0014447:	56                   	push   esi
c0014448:	53                   	push   ebx
c0014449:	31 db                	xor    ebx,ebx
c001444b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001444f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014451:	7e 2b                	jle    c001447e <EnvVarContainer::getEnv(char const*)+0x38>
c0014453:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001445a:	50                   	push   eax
c001445b:	50                   	push   eax
c001445c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001445f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014462:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014466:	e8 61 c3 fe ff       	call   c00007cc <strcmp>
c001446b:	83 c4 10             	add    esp,0x10
c001446e:	85 c0                	test   eax,eax
c0014470:	75 09                	jne    c001447b <EnvVarContainer::getEnv(char const*)+0x35>
c0014472:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014475:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014479:	eb 05                	jmp    c0014480 <EnvVarContainer::getEnv(char const*)+0x3a>
c001447b:	43                   	inc    ebx
c001447c:	eb d1                	jmp    c001444f <EnvVarContainer::getEnv(char const*)+0x9>
c001447e:	31 c0                	xor    eax,eax
c0014480:	5b                   	pop    ebx
c0014481:	5e                   	pop    esi
c0014482:	5f                   	pop    edi
c0014483:	c3                   	ret    

c0014484 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014484:	55                   	push   ebp
c0014485:	57                   	push   edi
c0014486:	56                   	push   esi
c0014487:	53                   	push   ebx
c0014488:	83 ec 28             	sub    esp,0x28
c001448b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001448f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014493:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014497:	56                   	push   esi
c0014498:	e8 03 c2 fe ff       	call   c00006a0 <strlen>
c001449d:	40                   	inc    eax
c001449e:	89 04 24             	mov    DWORD PTR [esp],eax
c00144a1:	e8 69 55 ff ff       	call   c0009a0f <malloc>
c00144a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144ad:	e8 ee c1 fe ff       	call   c00006a0 <strlen>
c00144b2:	40                   	inc    eax
c00144b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00144b6:	e8 54 55 ff ff       	call   c0009a0f <malloc>
c00144bb:	89 34 24             	mov    DWORD PTR [esp],esi
c00144be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00144c2:	e8 d9 c1 fe ff       	call   c00006a0 <strlen>
c00144c7:	83 c4 0c             	add    esp,0xc
c00144ca:	40                   	inc    eax
c00144cb:	50                   	push   eax
c00144cc:	6a 00                	push   0x0
c00144ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144d2:	e8 ad c1 fe ff       	call   c0000684 <memset>
c00144d7:	89 34 24             	mov    DWORD PTR [esp],esi
c00144da:	e8 c1 c1 fe ff       	call   c00006a0 <strlen>
c00144df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00144e3:	8d 48 01             	lea    ecx,[eax+0x1]
c00144e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144eb:	89 de                	mov    esi,ebx
c00144ed:	e8 ae c1 fe ff       	call   c00006a0 <strlen>
c00144f2:	83 c4 0c             	add    esp,0xc
c00144f5:	40                   	inc    eax
c00144f6:	50                   	push   eax
c00144f7:	6a 00                	push   0x0
c00144f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144fd:	e8 82 c1 fe ff       	call   c0000684 <memset>
c0014502:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014505:	e8 96 c1 fe ff       	call   c00006a0 <strlen>
c001450a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001450e:	8d 48 01             	lea    ecx,[eax+0x1]
c0014511:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014513:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014516:	40                   	inc    eax
c0014517:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001451a:	c1 e0 03             	shl    eax,0x3
c001451d:	5a                   	pop    edx
c001451e:	59                   	pop    ecx
c001451f:	50                   	push   eax
c0014520:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014523:	e8 d3 54 ff ff       	call   c00099fb <realloc>
c0014528:	8d 74 24 18          	lea    esi,[esp+0x18]
c001452c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001452f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014532:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014536:	b9 08 00 00 00       	mov    ecx,0x8
c001453b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001453d:	83 c4 2c             	add    esp,0x2c
c0014540:	5b                   	pop    ebx
c0014541:	5e                   	pop    esi
c0014542:	5f                   	pop    edi
c0014543:	5d                   	pop    ebp
c0014544:	c3                   	ret    
c0014545:	90                   	nop

c0014546 <EnvVarContainer::deleteEnv(char const*)>:
c0014546:	c3                   	ret    
c0014547:	90                   	nop

c0014548 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014548:	55                   	push   ebp
c0014549:	57                   	push   edi
c001454a:	56                   	push   esi
c001454b:	53                   	push   ebx
c001454c:	81 ec 38 01 00 00    	sub    esp,0x138
c0014552:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014559:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014560:	68 14 01 00 00       	push   0x114
c0014565:	e8 a5 54 ff ff       	call   c0009a0f <malloc>
c001456a:	83 c4 0c             	add    esp,0xc
c001456d:	89 c3                	mov    ebx,eax
c001456f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014572:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014579:	50                   	push   eax
c001457a:	e8 eb 8c ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001457f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014582:	e8 13 90 ff ff       	call   c000d59a <File::exists()>
c0014587:	83 c4 10             	add    esp,0x10
c001458a:	84 c0                	test   al,al
c001458c:	75 31                	jne    c00145bf <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001458e:	50                   	push   eax
c001458f:	50                   	push   eax
c0014590:	6a 12                	push   0x12
c0014592:	53                   	push   ebx
c0014593:	e8 94 8d ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0014598:	8b 03                	mov    eax,DWORD PTR [ebx]
c001459a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001459d:	89 34 24             	mov    DWORD PTR [esp],esi
c00145a0:	e8 fb c0 fe ff       	call   c00006a0 <strlen>
c00145a5:	5a                   	pop    edx
c00145a6:	31 d2                	xor    edx,edx
c00145a8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00145ac:	51                   	push   ecx
c00145ad:	56                   	push   esi
c00145ae:	52                   	push   edx
c00145af:	50                   	push   eax
c00145b0:	53                   	push   ebx
c00145b1:	ff d7                	call   edi
c00145b3:	83 c4 14             	add    esp,0x14
c00145b6:	53                   	push   ebx
c00145b7:	e8 ce 8d ff ff       	call   c000d38a <File::close()>
c00145bc:	83 c4 10             	add    esp,0x10
c00145bf:	56                   	push   esi
c00145c0:	31 f6                	xor    esi,esi
c00145c2:	68 00 01 00 00       	push   0x100
c00145c7:	6a 00                	push   0x0
c00145c9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00145cd:	50                   	push   eax
c00145ce:	e8 b1 c0 fe ff       	call   c0000684 <memset>
c00145d3:	5f                   	pop    edi
c00145d4:	58                   	pop    eax
c00145d5:	6a 01                	push   0x1
c00145d7:	53                   	push   ebx
c00145d8:	e8 4f 8d ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00145dd:	83 c4 10             	add    esp,0x10
c00145e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145e8:	83 ec 0c             	sub    esp,0xc
c00145eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145ed:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00145f1:	51                   	push   ecx
c00145f2:	8d 54 24 23          	lea    edx,[esp+0x23]
c00145f6:	52                   	push   edx
c00145f7:	6a 00                	push   0x0
c00145f9:	6a 01                	push   0x1
c00145fb:	53                   	push   ebx
c00145fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145ff:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014603:	83 c4 20             	add    esp,0x20
c0014606:	3c 0d                	cmp    al,0xd
c0014608:	0f 84 09 01 00 00    	je     c0014717 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001460e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014613:	0f 84 ef 00 00 00    	je     c0014708 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014619:	3c 0a                	cmp    al,0xa
c001461b:	74 13                	je     c0014630 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c001461d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014622:	74 0c                	je     c0014630 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014624:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001462a:	0f 8e d8 00 00 00    	jle    c0014708 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014634:	83 ec 0c             	sub    esp,0xc
c0014637:	8d 78 01             	lea    edi,[eax+0x1]
c001463a:	57                   	push   edi
c001463b:	e8 cf 53 ff ff       	call   c0009a0f <malloc>
c0014640:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014644:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014648:	8d 56 04             	lea    edx,[esi+0x4]
c001464b:	89 14 24             	mov    DWORD PTR [esp],edx
c001464e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014652:	e8 b8 53 ff ff       	call   c0009a0f <malloc>
c0014657:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001465b:	83 c4 0c             	add    esp,0xc
c001465e:	57                   	push   edi
c001465f:	6a 00                	push   0x0
c0014661:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014665:	e8 1a c0 fe ff       	call   c0000684 <memset>
c001466a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001466e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014672:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014676:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014678:	83 c4 0c             	add    esp,0xc
c001467b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001467f:	52                   	push   edx
c0014680:	6a 00                	push   0x0
c0014682:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014686:	e8 f9 bf fe ff       	call   c0000684 <memset>
c001468b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001468f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014693:	89 34 24             	mov    DWORD PTR [esp],esi
c0014696:	e8 05 c0 fe ff       	call   c00006a0 <strlen>
c001469b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001469f:	89 c1                	mov    ecx,eax
c00146a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00146a6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00146a9:	40                   	inc    eax
c00146aa:	83 c4 10             	add    esp,0x10
c00146ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00146b0:	85 d2                	test   edx,edx
c00146b2:	75 0c                	jne    c00146c0 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c00146b4:	83 ec 0c             	sub    esp,0xc
c00146b7:	6a 08                	push   0x8
c00146b9:	e8 51 53 ff ff       	call   c0009a0f <malloc>
c00146be:	eb 0c                	jmp    c00146cc <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c00146c0:	c1 e0 03             	shl    eax,0x3
c00146c3:	51                   	push   ecx
c00146c4:	51                   	push   ecx
c00146c5:	50                   	push   eax
c00146c6:	52                   	push   edx
c00146c7:	e8 2f 53 ff ff       	call   c00099fb <realloc>
c00146cc:	83 c4 10             	add    esp,0x10
c00146cf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00146d2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00146d5:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00146d8:	8d 74 24 18          	lea    esi,[esp+0x18]
c00146dc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00146e0:	b9 08 00 00 00       	mov    ecx,0x8
c00146e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146e7:	31 f6                	xor    esi,esi
c00146e9:	50                   	push   eax
c00146ea:	68 00 01 00 00       	push   0x100
c00146ef:	6a 00                	push   0x0
c00146f1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00146f5:	50                   	push   eax
c00146f6:	e8 89 bf fe ff       	call   c0000684 <memset>
c00146fb:	83 c4 10             	add    esp,0x10
c00146fe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014706:	eb 0f                	jmp    c0014717 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014708:	3c 3d                	cmp    al,0x3d
c001470a:	74 07                	je     c0014713 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c001470c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014710:	46                   	inc    esi
c0014711:	eb 04                	jmp    c0014717 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014713:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014717:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001471c:	0f 85 c6 fe ff ff    	jne    c00145e8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014722:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014728:	5b                   	pop    ebx
c0014729:	5e                   	pop    esi
c001472a:	5f                   	pop    edi
c001472b:	5d                   	pop    ebp
c001472c:	c3                   	ret    
c001472d:	90                   	nop

c001472e <EnvVarContainer::__loadSystem()>:
c001472e:	83 ec 10             	sub    esp,0x10
c0014731:	68 c0 7a 02 c0       	push   0xc0027ac0
c0014736:	68 55 5b 02 c0       	push   0xc0025b55
c001473b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001473f:	e8 04 fe ff ff       	call   c0014548 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014744:	83 c4 1c             	add    esp,0x1c
c0014747:	c3                   	ret    

c0014748 <EnvVarContainer::__loadUser()>:
c0014748:	c3                   	ret    
c0014749:	90                   	nop

c001474a <EnvVarContainer::EnvVarContainer(Process*)>:
c001474a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001474e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014754:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014758:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001475c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001475f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014763:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001476a:	90                   	nop
c001476b:	c3                   	ret    

c001476c <EnvVarContainer::~EnvVarContainer()>:
c001476c:	83 ec 0c             	sub    esp,0xc
c001476f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014773:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014776:	85 c0                	test   eax,eax
c0014778:	74 1d                	je     c0014797 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001477a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001477e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014780:	85 c0                	test   eax,eax
c0014782:	74 13                	je     c0014797 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014788:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001478b:	83 ec 0c             	sub    esp,0xc
c001478e:	50                   	push   eax
c001478f:	e8 8b 52 ff ff       	call   c0009a1f <free>
c0014794:	83 c4 10             	add    esp,0x10
c0014797:	90                   	nop
c0014798:	83 c4 0c             	add    esp,0xc
c001479b:	c3                   	ret    

c001479c <Krnl::getEnv(Process*, char const*)>:
c001479c:	53                   	push   ebx
c001479d:	83 ec 08             	sub    esp,0x8
c00147a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00147a8:	39 05 30 96 02 c0    	cmp    DWORD PTR ds:0xc0029630,eax
c00147ae:	74 04                	je     c00147b4 <Krnl::getEnv(Process*, char const*)+0x18>
c00147b0:	85 c0                	test   eax,eax
c00147b2:	75 0b                	jne    c00147bf <Krnl::getEnv(Process*, char const*)+0x23>
c00147b4:	a1 b4 8b 02 c0       	mov    eax,ds:0xc0028bb4
c00147b9:	85 c0                	test   eax,eax
c00147bb:	75 19                	jne    c00147d6 <Krnl::getEnv(Process*, char const*)+0x3a>
c00147bd:	eb 27                	jmp    c00147e6 <Krnl::getEnv(Process*, char const*)+0x4a>
c00147bf:	52                   	push   edx
c00147c0:	52                   	push   edx
c00147c1:	53                   	push   ebx
c00147c2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00147c8:	e8 79 fc ff ff       	call   c0014446 <EnvVarContainer::getEnv(char const*)>
c00147cd:	83 c4 10             	add    esp,0x10
c00147d0:	85 c0                	test   eax,eax
c00147d2:	75 28                	jne    c00147fc <Krnl::getEnv(Process*, char const*)+0x60>
c00147d4:	eb de                	jmp    c00147b4 <Krnl::getEnv(Process*, char const*)+0x18>
c00147d6:	52                   	push   edx
c00147d7:	52                   	push   edx
c00147d8:	53                   	push   ebx
c00147d9:	50                   	push   eax
c00147da:	e8 67 fc ff ff       	call   c0014446 <EnvVarContainer::getEnv(char const*)>
c00147df:	83 c4 10             	add    esp,0x10
c00147e2:	85 c0                	test   eax,eax
c00147e4:	75 16                	jne    c00147fc <Krnl::getEnv(Process*, char const*)+0x60>
c00147e6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00147ea:	a1 b8 8b 02 c0       	mov    eax,ds:0xc0028bb8
c00147ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147f3:	83 c4 08             	add    esp,0x8
c00147f6:	5b                   	pop    ebx
c00147f7:	e9 4a fc ff ff       	jmp    c0014446 <EnvVarContainer::getEnv(char const*)>
c00147fc:	83 c4 08             	add    esp,0x8
c00147ff:	5b                   	pop    ebx
c0014800:	c3                   	ret    

c0014801 <Krnl::setEnvSystem(char const*, char const*)>:
c0014801:	83 ec 10             	sub    esp,0x10
c0014804:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001480c:	ff 35 b8 8b 02 c0    	push   DWORD PTR ds:0xc0028bb8
c0014812:	e8 6d fc ff ff       	call   c0014484 <EnvVarContainer::setEnv(char const*, char const*)>
c0014817:	83 c4 1c             	add    esp,0x1c
c001481a:	c3                   	ret    

c001481b <Krnl::setEnvUser(char const*, char const*)>:
c001481b:	a1 b4 8b 02 c0       	mov    eax,ds:0xc0028bb4
c0014820:	85 c0                	test   eax,eax
c0014822:	74 15                	je     c0014839 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014824:	83 ec 10             	sub    esp,0x10
c0014827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001482b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001482f:	50                   	push   eax
c0014830:	e8 4f fc ff ff       	call   c0014484 <EnvVarContainer::setEnv(char const*, char const*)>
c0014835:	83 c4 1c             	add    esp,0x1c
c0014838:	c3                   	ret    
c0014839:	c3                   	ret    

c001483a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001483a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001483e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014844:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014848:	e9 37 fc ff ff       	jmp    c0014484 <EnvVarContainer::setEnv(char const*, char const*)>

c001484d <Krnl::deleteEnvSystem(char const*)>:
c001484d:	c3                   	ret    

c001484e <Krnl::deleteEnvUser(char const*)>:
c001484e:	c3                   	ret    

c001484f <Krnl::deleteEnvProcess(Process*, char const*)>:
c001484f:	c3                   	ret    

c0014850 <Krnl::newProcessEnv(Process*)>:
c0014850:	83 ec 28             	sub    esp,0x28
c0014853:	6a 0c                	push   0xc
c0014855:	e8 b5 51 ff ff       	call   c0009a0f <malloc>
c001485a:	5a                   	pop    edx
c001485b:	59                   	pop    ecx
c001485c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014860:	50                   	push   eax
c0014861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014865:	e8 e0 fe ff ff       	call   c001474a <EnvVarContainer::EnvVarContainer(Process*)>
c001486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001486e:	83 c4 2c             	add    esp,0x2c
c0014871:	c3                   	ret    

c0014872 <Krnl::copyProcessEnv(Process*, Process*)>:
c0014872:	57                   	push   edi
c0014873:	56                   	push   esi
c0014874:	53                   	push   ebx
c0014875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014879:	83 ec 0c             	sub    esp,0xc
c001487c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014882:	6a 0c                	push   0xc
c0014884:	e8 86 51 ff ff       	call   c0009a0f <malloc>
c0014889:	89 c3                	mov    ebx,eax
c001488b:	58                   	pop    eax
c001488c:	5a                   	pop    edx
c001488d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014891:	53                   	push   ebx
c0014892:	e8 b3 fe ff ff       	call   c001474a <EnvVarContainer::EnvVarContainer(Process*)>
c0014897:	8b 07                	mov    eax,DWORD PTR [edi]
c0014899:	89 03                	mov    DWORD PTR [ebx],eax
c001489b:	c1 e0 03             	shl    eax,0x3
c001489e:	89 04 24             	mov    DWORD PTR [esp],eax
c00148a1:	e8 69 51 ff ff       	call   c0009a0f <malloc>
c00148a6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00148a9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00148ab:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00148ae:	c1 e1 03             	shl    ecx,0x3
c00148b1:	89 c7                	mov    edi,eax
c00148b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148b5:	83 c4 10             	add    esp,0x10
c00148b8:	89 d8                	mov    eax,ebx
c00148ba:	5b                   	pop    ebx
c00148bb:	5e                   	pop    esi
c00148bc:	5f                   	pop    edi
c00148bd:	c3                   	ret    

c00148be <Krnl::loadSystemEnv()>:
c00148be:	53                   	push   ebx
c00148bf:	83 ec 14             	sub    esp,0x14
c00148c2:	6a 0c                	push   0xc
c00148c4:	e8 46 51 ff ff       	call   c0009a0f <malloc>
c00148c9:	89 c3                	mov    ebx,eax
c00148cb:	58                   	pop    eax
c00148cc:	5a                   	pop    edx
c00148cd:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c00148d3:	53                   	push   ebx
c00148d4:	e8 71 fe ff ff       	call   c001474a <EnvVarContainer::EnvVarContainer(Process*)>
c00148d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148dc:	89 1d b8 8b 02 c0    	mov    DWORD PTR ds:0xc0028bb8,ebx
c00148e2:	e8 47 fe ff ff       	call   c001472e <EnvVarContainer::__loadSystem()>
c00148e7:	83 c4 18             	add    esp,0x18
c00148ea:	5b                   	pop    ebx
c00148eb:	c3                   	ret    

c00148ec <Krnl::loadUserEnv()>:
c00148ec:	53                   	push   ebx
c00148ed:	83 ec 14             	sub    esp,0x14
c00148f0:	6a 0c                	push   0xc
c00148f2:	e8 18 51 ff ff       	call   c0009a0f <malloc>
c00148f7:	89 c3                	mov    ebx,eax
c00148f9:	58                   	pop    eax
c00148fa:	5a                   	pop    edx
c00148fb:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c0014901:	53                   	push   ebx
c0014902:	e8 43 fe ff ff       	call   c001474a <EnvVarContainer::EnvVarContainer(Process*)>
c0014907:	89 1d b4 8b 02 c0    	mov    DWORD PTR ds:0xc0028bb4,ebx
c001490d:	83 c4 18             	add    esp,0x18
c0014910:	5b                   	pop    ebx
c0014911:	c3                   	ret    

c0014912 <Krnl::flushEnv()>:
c0014912:	c3                   	ret    

c0014913 <Krnl::getProcessTotalEnvCount(Process*)>:
c0014913:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014917:	8b 15 b4 8b 02 c0    	mov    edx,DWORD PTR ds:0xc0028bb4
c001491d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014923:	a1 b8 8b 02 c0       	mov    eax,ds:0xc0028bb8
c0014928:	8b 00                	mov    eax,DWORD PTR [eax]
c001492a:	03 01                	add    eax,DWORD PTR [ecx]
c001492c:	85 d2                	test   edx,edx
c001492e:	74 02                	je     c0014932 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0014930:	03 02                	add    eax,DWORD PTR [edx]
c0014932:	c3                   	ret    

c0014933 <Krnl::getProcessEnvPair(Process*, int)>:
c0014933:	57                   	push   edi
c0014934:	56                   	push   esi
c0014935:	8b 35 b4 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028bb4
c001493b:	53                   	push   ebx
c001493c:	85 f6                	test   esi,esi
c001493e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014942:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014946:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001494c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014950:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014952:	75 16                	jne    c001496a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014954:	39 c2                	cmp    edx,eax
c0014956:	7c 16                	jl     c001496e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014958:	8b 0d b8 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028bb8
c001495e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0014960:	01 c6                	add    esi,eax
c0014962:	39 d6                	cmp    esi,edx
c0014964:	7e 3c                	jle    c00149a2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014966:	29 c2                	sub    edx,eax
c0014968:	eb 04                	jmp    c001496e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001496a:	39 c2                	cmp    edx,eax
c001496c:	7d 05                	jge    c0014973 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001496e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0014971:	eb 20                	jmp    c0014993 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0014973:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014975:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014978:	39 d1                	cmp    ecx,edx
c001497a:	7e 04                	jle    c0014980 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001497c:	29 c2                	sub    edx,eax
c001497e:	eb 10                	jmp    c0014990 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0014980:	8b 35 b8 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028bb8
c0014986:	03 0e                	add    ecx,DWORD PTR [esi]
c0014988:	39 d1                	cmp    ecx,edx
c001498a:	7e 16                	jle    c00149a2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001498c:	29 c2                	sub    edx,eax
c001498e:	29 fa                	sub    edx,edi
c0014990:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014993:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014996:	8b 02                	mov    eax,DWORD PTR [edx]
c0014998:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001499b:	89 03                	mov    DWORD PTR [ebx],eax
c001499d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00149a0:	eb 1d                	jmp    c00149bf <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00149a2:	83 ec 0c             	sub    esp,0xc
c00149a5:	68 77 5b 02 c0       	push   0xc0025b77
c00149aa:	e8 18 00 00 00       	call   c00149c7 <Krnl::panic(char const*)>
c00149af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00149b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00149bc:	83 c4 10             	add    esp,0x10
c00149bf:	89 d8                	mov    eax,ebx
c00149c1:	5b                   	pop    ebx
c00149c2:	5e                   	pop    esi
c00149c3:	5f                   	pop    edi
c00149c4:	c2 04 00             	ret    0x4

c00149c7 <Krnl::panic(char const*)>:
c00149c7:	55                   	push   ebp
c00149c8:	89 e5                	mov    ebp,esp
c00149ca:	53                   	push   ebx
c00149cb:	83 ec 10             	sub    esp,0x10
c00149ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00149d1:	fa                   	cli    
c00149d2:	c6 05 c4 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028bc4,0x1
c00149d9:	53                   	push   ebx
c00149da:	e8 8a 50 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00149df:	58                   	pop    eax
c00149e0:	c6 05 c0 74 02 c0 00 	mov    BYTE PTR ds:0xc00274c0,0x0
c00149e7:	5a                   	pop    edx
c00149e8:	53                   	push   ebx
c00149e9:	68 91 5b 02 c0       	push   0xc0025b91
c00149ee:	e8 0c 83 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00149f3:	59                   	pop    ecx
c00149f4:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c00149f9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00149ff:	e8 05 61 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c0014a04:	83 c4 0c             	add    esp,0xc
c0014a07:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014a0c:	6a 01                	push   0x1
c0014a0e:	6a 0f                	push   0xf
c0014a10:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a16:	e8 4d 5f ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014a1b:	58                   	pop    eax
c0014a1c:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014a21:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a27:	e8 5e 64 ff ff       	call   c000ae8a <VgaText::clearScreen()>
c0014a2c:	58                   	pop    eax
c0014a2d:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014a32:	5a                   	pop    edx
c0014a33:	68 aa 5b 02 c0       	push   0xc0025baa
c0014a38:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a3e:	e8 d3 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a43:	59                   	pop    ecx
c0014a44:	58                   	pop    eax
c0014a45:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014a4a:	68 50 5c 02 c0       	push   0xc0025c50
c0014a4f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a55:	e8 bc 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a5a:	58                   	pop    eax
c0014a5b:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014a60:	5a                   	pop    edx
c0014a61:	68 c6 5b 02 c0       	push   0xc0025bc6
c0014a66:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a6c:	e8 a5 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a71:	59                   	pop    ecx
c0014a72:	58                   	pop    eax
c0014a73:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014a78:	53                   	push   ebx
c0014a79:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a7f:	e8 92 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a84:	58                   	pop    eax
c0014a85:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014a8a:	5a                   	pop    edx
c0014a8b:	68 e6 5b 02 c0       	push   0xc0025be6
c0014a90:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014a96:	e8 7b 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a9b:	a1 c0 8b 02 c0       	mov    eax,ds:0xc0028bc0
c0014aa0:	83 c4 10             	add    esp,0x10
c0014aa3:	85 c0                	test   eax,eax
c0014aa5:	74 02                	je     c0014aa9 <Krnl::panic(char const*)+0xe2>
c0014aa7:	ff d0                	call   eax
c0014aa9:	83 ec 0c             	sub    esp,0xc
c0014aac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014aaf:	e8 41 32 00 00       	call   c0017cf5 <Thr::getDriverNameFromAddress(unsigned long)>
c0014ab4:	83 c4 10             	add    esp,0x10
c0014ab7:	89 c3                	mov    ebx,eax
c0014ab9:	85 c0                	test   eax,eax
c0014abb:	0f 84 4e 02 00 00    	je     c0014d0f <Krnl::panic(char const*)+0x348>
c0014ac1:	83 ec 08             	sub    esp,0x8
c0014ac4:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014ac9:	68 8c 5c 02 c0       	push   0xc0025c8c
c0014ace:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ad4:	e8 3d 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ad9:	58                   	pop    eax
c0014ada:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014adf:	5a                   	pop    edx
c0014ae0:	68 c6 5b 02 c0       	push   0xc0025bc6
c0014ae5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014aeb:	e8 26 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014af0:	59                   	pop    ecx
c0014af1:	58                   	pop    eax
c0014af2:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014af7:	53                   	push   ebx
c0014af8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014afe:	e8 13 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b03:	83 c4 10             	add    esp,0x10
c0014b06:	83 ec 08             	sub    esp,0x8
c0014b09:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014b0e:	68 e5 5b 02 c0       	push   0xc0025be5
c0014b13:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b19:	e8 f8 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b1e:	58                   	pop    eax
c0014b1f:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014b24:	5a                   	pop    edx
c0014b25:	68 e4 5c 02 c0       	push   0xc0025ce4
c0014b2a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b30:	e8 e1 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b35:	59                   	pop    ecx
c0014b36:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014b3b:	5b                   	pop    ebx
c0014b3c:	68 24 5d 02 c0       	push   0xc0025d24
c0014b41:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b47:	e8 ca 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b4c:	58                   	pop    eax
c0014b4d:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014b52:	5a                   	pop    edx
c0014b53:	68 d1 5b 02 c0       	push   0xc0025bd1
c0014b58:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014b5e:	e8 b3 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b63:	59                   	pop    ecx
c0014b64:	5b                   	pop    ebx
c0014b65:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014b68:	68 e9 5b 02 c0       	push   0xc0025be9
c0014b6d:	e8 8d 81 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014b72:	58                   	pop    eax
c0014b73:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b76:	5a                   	pop    edx
c0014b77:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b7a:	68 f2 5b 02 c0       	push   0xc0025bf2
c0014b7f:	e8 7b 81 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014b84:	59                   	pop    ecx
c0014b85:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b88:	5b                   	pop    ebx
c0014b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b8b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014b8e:	68 fb 5b 02 c0       	push   0xc0025bfb
c0014b93:	e8 67 81 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014b98:	58                   	pop    eax
c0014b99:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014b9e:	5a                   	pop    edx
c0014b9f:	68 68 5d 02 c0       	push   0xc0025d68
c0014ba4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014baa:	e8 67 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014baf:	59                   	pop    ecx
c0014bb0:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014bb5:	5b                   	pop    ebx
c0014bb6:	68 04 5c 02 c0       	push   0xc0025c04
c0014bbb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bc1:	e8 50 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bc6:	0f 20 c0             	mov    eax,cr0
c0014bc9:	5a                   	pop    edx
c0014bca:	59                   	pop    ecx
c0014bcb:	50                   	push   eax
c0014bcc:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014bd1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bd7:	e8 f4 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014bdc:	5b                   	pop    ebx
c0014bdd:	58                   	pop    eax
c0014bde:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014be3:	68 0e 5c 02 c0       	push   0xc0025c0e
c0014be8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014bee:	e8 23 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bf3:	0f 20 d0             	mov    eax,cr2
c0014bf6:	5a                   	pop    edx
c0014bf7:	59                   	pop    ecx
c0014bf8:	50                   	push   eax
c0014bf9:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014bfe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c04:	e8 c7 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c09:	5b                   	pop    ebx
c0014c0a:	58                   	pop    eax
c0014c0b:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014c10:	68 18 5c 02 c0       	push   0xc0025c18
c0014c15:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c1b:	e8 f6 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c20:	0f 20 d8             	mov    eax,cr3
c0014c23:	5a                   	pop    edx
c0014c24:	59                   	pop    ecx
c0014c25:	50                   	push   eax
c0014c26:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014c2b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c31:	e8 9a 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c36:	5b                   	pop    ebx
c0014c37:	58                   	pop    eax
c0014c38:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014c3d:	68 2b 5c 02 c0       	push   0xc0025c2b
c0014c42:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c48:	e8 c9 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c4d:	0f 20 e0             	mov    eax,cr4
c0014c50:	5a                   	pop    edx
c0014c51:	59                   	pop    ecx
c0014c52:	50                   	push   eax
c0014c53:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014c58:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c5e:	e8 6d 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c63:	5b                   	pop    ebx
c0014c64:	58                   	pop    eax
c0014c65:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014c6a:	68 35 5c 02 c0       	push   0xc0025c35
c0014c6f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014c75:	e8 9c 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014c7a:	5a                   	pop    edx
c0014c7b:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014c80:	59                   	pop    ecx
c0014c81:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c87:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014c8a:	50                   	push   eax
c0014c8b:	e8 40 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014c90:	5b                   	pop    ebx
c0014c91:	58                   	pop    eax
c0014c92:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014c97:	68 4c 5c 02 c0       	push   0xc0025c4c
c0014c9c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014ca2:	e8 6f 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ca7:	5a                   	pop    edx
c0014ca8:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014cad:	59                   	pop    ecx
c0014cae:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cb4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014cb7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014cba:	50                   	push   eax
c0014cbb:	e8 10 63 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014cc0:	5b                   	pop    ebx
c0014cc1:	58                   	pop    eax
c0014cc2:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014cc7:	68 4c 5c 02 c0       	push   0xc0025c4c
c0014ccc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014cd2:	e8 3f 63 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014cd7:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014cdc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014cdf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ce5:	8b 12                	mov    edx,DWORD PTR [edx]
c0014ce7:	59                   	pop    ecx
c0014ce8:	5b                   	pop    ebx
c0014ce9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014cec:	50                   	push   eax
c0014ced:	e8 de 62 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014cf2:	83 c4 10             	add    esp,0x10
c0014cf5:	b2 fe                	mov    dl,0xfe
c0014cf7:	e4 60                	in     al,0x60
c0014cf9:	3c 1c                	cmp    al,0x1c
c0014cfb:	74 04                	je     c0014d01 <Krnl::panic(char const*)+0x33a>
c0014cfd:	3c 5a                	cmp    al,0x5a
c0014cff:	75 f6                	jne    c0014cf7 <Krnl::panic(char const*)+0x330>
c0014d01:	e4 64                	in     al,0x64
c0014d03:	a8 02                	test   al,0x2
c0014d05:	75 fa                	jne    c0014d01 <Krnl::panic(char const*)+0x33a>
c0014d07:	88 d0                	mov    al,dl
c0014d09:	e6 64                	out    0x64,al
c0014d0b:	fa                   	cli    
c0014d0c:	f4                   	hlt    
c0014d0d:	eb e8                	jmp    c0014cf7 <Krnl::panic(char const*)+0x330>
c0014d0f:	50                   	push   eax
c0014d10:	50                   	push   eax
c0014d11:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014d16:	68 b8 5c 02 c0       	push   0xc0025cb8
c0014d1b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014d21:	e8 f0 62 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014d26:	58                   	pop    eax
c0014d27:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014d2c:	5a                   	pop    edx
c0014d2d:	68 c6 5b 02 c0       	push   0xc0025bc6
c0014d32:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014d38:	e8 d9 62 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014d3d:	59                   	pop    ecx
c0014d3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d43:	5b                   	pop    ebx
c0014d44:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d47:	83 c0 0c             	add    eax,0xc
c0014d4a:	50                   	push   eax
c0014d4b:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c0014d50:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014d56:	e8 bb 62 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014d5b:	83 c4 10             	add    esp,0x10
c0014d5e:	e9 a3 fd ff ff       	jmp    c0014b06 <Krnl::panic(char const*)+0x13f>

c0014d63 <Krnl::powerThread(void*)>:
c0014d63:	53                   	push   ebx
c0014d64:	83 ec 08             	sub    esp,0x8
c0014d67:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0014d6c:	48                   	dec    eax
c0014d6d:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0014d72:	75 01                	jne    c0014d75 <Krnl::powerThread(void*)+0x12>
c0014d74:	fb                   	sti    
c0014d75:	52                   	push   edx
c0014d76:	52                   	push   edx
c0014d77:	ff 35 24 8c 02 c0    	push   DWORD PTR ds:0xc0028c24
c0014d7d:	68 8e 5d 02 c0       	push   0xc0025d8e
c0014d82:	e8 78 7f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014d87:	59                   	pop    ecx
c0014d88:	8b 1d 14 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c14
c0014d8e:	58                   	pop    eax
c0014d8f:	c6 05 e0 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028be0,0x0
c0014d96:	53                   	push   ebx
c0014d97:	68 98 5d 02 c0       	push   0xc0025d98
c0014d9c:	e8 5e 7f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014da1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0014da8:	e8 87 3c 00 00       	call   c0018a34 <sleep(unsigned int)>
c0014dad:	a1 24 8c 02 c0       	mov    eax,ds:0xc0028c24
c0014db2:	83 c4 10             	add    esp,0x10
c0014db5:	83 c0 0a             	add    eax,0xa
c0014db8:	85 db                	test   ebx,ebx
c0014dba:	a3 24 8c 02 c0       	mov    ds:0xc0028c24,eax
c0014dbf:	74 b4                	je     c0014d75 <Krnl::powerThread(void*)+0x12>
c0014dc1:	39 d8                	cmp    eax,ebx
c0014dc3:	7e b0                	jle    c0014d75 <Krnl::powerThread(void*)+0x12>
c0014dc5:	83 ec 0c             	sub    esp,0xc
c0014dc8:	68 b0 5d 02 c0       	push   0xc0025db0
c0014dcd:	e8 2d 7f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0014dd2:	58                   	pop    eax
c0014dd3:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0014dd9:	e8 e0 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014dde:	83 c4 10             	add    esp,0x10
c0014de1:	eb 92                	jmp    c0014d75 <Krnl::powerThread(void*)+0x12>

c0014de3 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0014de3:	57                   	push   edi
c0014de4:	b9 09 00 00 00       	mov    ecx,0x9
c0014de9:	56                   	push   esi
c0014dea:	bf 00 8c 02 c0       	mov    edi,0xc0028c00
c0014def:	fc                   	cld    
c0014df0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014df4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014df6:	5e                   	pop    esi
c0014df7:	5f                   	pop    edi
c0014df8:	c3                   	ret    

c0014df9 <Krnl::userIOReceived()>:
c0014df9:	c7 05 24 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c24,0x0
c0014e03:	c3                   	ret    

c0014e04 <Krnl::handlePowerButton()>:
c0014e04:	83 ec 0c             	sub    esp,0xc
c0014e07:	a1 00 8c 02 c0       	mov    eax,ds:0xc0028c00
c0014e0c:	83 f8 02             	cmp    eax,0x2
c0014e0f:	75 10                	jne    c0014e21 <Krnl::handlePowerButton()+0x1d>
c0014e11:	83 ec 0c             	sub    esp,0xc
c0014e14:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0014e1a:	e8 6f 41 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014e1f:	eb 11                	jmp    c0014e32 <Krnl::handlePowerButton()+0x2e>
c0014e21:	48                   	dec    eax
c0014e22:	75 11                	jne    c0014e35 <Krnl::handlePowerButton()+0x31>
c0014e24:	83 ec 0c             	sub    esp,0xc
c0014e27:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0014e2d:	e8 8c 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014e32:	83 c4 10             	add    esp,0x10
c0014e35:	83 c4 0c             	add    esp,0xc
c0014e38:	c3                   	ret    

c0014e39 <Krnl::handleSleepButton()>:
c0014e39:	83 ec 0c             	sub    esp,0xc
c0014e3c:	a1 04 8c 02 c0       	mov    eax,ds:0xc0028c04
c0014e41:	83 f8 02             	cmp    eax,0x2
c0014e44:	75 10                	jne    c0014e56 <Krnl::handleSleepButton()+0x1d>
c0014e46:	83 ec 0c             	sub    esp,0xc
c0014e49:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0014e4f:	e8 3a 41 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014e54:	eb 11                	jmp    c0014e67 <Krnl::handleSleepButton()+0x2e>
c0014e56:	48                   	dec    eax
c0014e57:	75 11                	jne    c0014e6a <Krnl::handleSleepButton()+0x31>
c0014e59:	83 ec 0c             	sub    esp,0xc
c0014e5c:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0014e62:	e8 57 41 ff ff       	call   c0008fbe <Computer::sleep()>
c0014e67:	83 c4 10             	add    esp,0x10
c0014e6a:	83 c4 0c             	add    esp,0xc
c0014e6d:	c3                   	ret    

c0014e6e <Krnl::setupPowerManager()>:
c0014e6e:	83 ec 0c             	sub    esp,0xc
c0014e71:	c7 05 24 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c24,0x0
c0014e7b:	68 f0 00 00 00       	push   0xf0
c0014e80:	c6 05 e0 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028be0,0x0
c0014e87:	6a 00                	push   0x0
c0014e89:	68 63 4d 01 c0       	push   0xc0014d63
c0014e8e:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c0014e94:	e8 77 36 00 00       	call   c0018510 <Process::createThread(void (*)(void*), void*, int)>
c0014e99:	c7 05 00 8c 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028c00,0x2
c0014ea3:	c7 05 04 8c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028c04,0x1
c0014ead:	c7 05 08 8c 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028c08,0x3
c0014eb7:	c7 05 0c 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c0c,0x0
c0014ec1:	c7 05 18 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c18,0x0
c0014ecb:	c7 05 10 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c10,0x0
c0014ed5:	c7 05 1c 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028c1c,0x0
c0014edf:	c7 05 14 8c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028c14,0x3c
c0014ee9:	c7 05 20 8c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028c20,0x3c
c0014ef3:	83 c4 1c             	add    esp,0x1c
c0014ef6:	c3                   	ret    
c0014ef7:	90                   	nop

c0014ef8 <Net::switchEndian16(unsigned short)>:
c0014ef8:	83 ec 04             	sub    esp,0x4
c0014efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014eff:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014f03:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014f07:	c1 f8 08             	sar    eax,0x8
c0014f0a:	89 c2                	mov    edx,eax
c0014f0c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014f10:	c1 e0 08             	shl    eax,0x8
c0014f13:	09 d0                	or     eax,edx
c0014f15:	83 c4 04             	add    esp,0x4
c0014f18:	c3                   	ret    
c0014f19:	8d 76 00             	lea    esi,[esi+0x0]

c0014f1c <Net::switchEndian32(unsigned int)>:
c0014f1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f20:	c1 e8 18             	shr    eax,0x18
c0014f23:	89 c2                	mov    edx,eax
c0014f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f29:	c1 e0 08             	shl    eax,0x8
c0014f2c:	25 00 00 ff 00       	and    eax,0xff0000
c0014f31:	09 c2                	or     edx,eax
c0014f33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f37:	c1 e8 08             	shr    eax,0x8
c0014f3a:	25 00 ff 00 00       	and    eax,0xff00
c0014f3f:	09 c2                	or     edx,eax
c0014f41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014f45:	c1 e0 18             	shl    eax,0x18
c0014f48:	09 d0                	or     eax,edx
c0014f4a:	c3                   	ret    
c0014f4b:	90                   	nop

c0014f4c <Net::crc32Calc(unsigned char*, int)>:
c0014f4c:	83 ec 10             	sub    esp,0x10
c0014f4f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014f54:	75 0a                	jne    c0014f60 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014f56:	b8 00 00 00 00       	mov    eax,0x0
c0014f5b:	e9 8c 00 00 00       	jmp    c0014fec <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014f60:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014f65:	7f 09                	jg     c0014f70 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014f67:	b8 00 00 00 00       	mov    eax,0x0
c0014f6c:	eb 7e                	jmp    c0014fec <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014f6e:	66 90                	xchg   ax,ax
c0014f70:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014f78:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014f80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014f84:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014f88:	7d 5a                	jge    c0014fe4 <Net::crc32Calc(unsigned char*, int)+0x98>
c0014f8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014f8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f92:	01 d0                	add    eax,edx
c0014f94:	8a 00                	mov    al,BYTE PTR [eax]
c0014f96:	0f b6 c0             	movzx  eax,al
c0014f99:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014f9d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0014fa8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014fad:	7f 2d                	jg     c0014fdc <Net::crc32Calc(unsigned char*, int)+0x90>
c0014faf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fb3:	83 e0 01             	and    eax,0x1
c0014fb6:	74 10                	je     c0014fc8 <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fbc:	d1 e8                	shr    eax,1
c0014fbe:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014fc3:	eb 0b                	jmp    c0014fd0 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0014fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fcc:	d1 e8                	shr    eax,1
c0014fce:	66 90                	xchg   ax,ax
c0014fd0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fd4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014fd8:	eb ce                	jmp    c0014fa8 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014fda:	66 90                	xchg   ax,ax
c0014fdc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014fe0:	eb 9e                	jmp    c0014f80 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014fe2:	66 90                	xchg   ax,ax
c0014fe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fe8:	f7 d0                	not    eax
c0014fea:	66 90                	xchg   ax,ax
c0014fec:	83 c4 10             	add    esp,0x10
c0014fef:	c3                   	ret    

c0014ff0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014ff0:	57                   	push   edi
c0014ff1:	56                   	push   esi
c0014ff2:	53                   	push   ebx
c0014ff3:	83 ec 60             	sub    esp,0x60
c0014ff6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ffd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015001:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0015009:	8d 76 00             	lea    esi,[esi+0x0]
c001500c:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0015011:	7f 1d                	jg     c0015030 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0015013:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001501a:	8d 50 01             	lea    edx,[eax+0x1]
c001501d:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015024:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0015027:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001502b:	eb df                	jmp    c001500c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c001502d:	8d 76 00             	lea    esi,[esi+0x0]
c0015030:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015037:	8d 50 01             	lea    edx,[eax+0x1]
c001503a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015041:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0015044:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001504b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001504f:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0015053:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015057:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001505f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015063:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015067:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001506b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001506f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015073:	89 c6                	mov    esi,eax
c0015075:	89 d7                	mov    edi,edx
c0015077:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015079:	89 c8                	mov    eax,ecx
c001507b:	89 fa                	mov    edx,edi
c001507d:	89 f3                	mov    ebx,esi
c001507f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015083:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015087:	89 04 24             	mov    DWORD PTR [esp],eax
c001508a:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015092:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015099:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001509d:	8d 44 24 78          	lea    eax,[esp+0x78]
c00150a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00150a5:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00150ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00150b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00150b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150b9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00150bd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00150c1:	89 c6                	mov    esi,eax
c00150c3:	89 d7                	mov    edi,edx
c00150c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150c7:	89 c8                	mov    eax,ecx
c00150c9:	89 fa                	mov    edx,edi
c00150cb:	89 f3                	mov    ebx,esi
c00150cd:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00150d1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00150d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150d9:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00150e1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150e8:	0f b7 c0             	movzx  eax,ax
c00150eb:	c1 f8 08             	sar    eax,0x8
c00150ee:	89 c1                	mov    ecx,eax
c00150f0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00150f7:	8d 50 01             	lea    edx,[eax+0x1]
c00150fa:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015101:	88 ca                	mov    dl,cl
c0015103:	88 10                	mov    BYTE PTR [eax],dl
c0015105:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001510c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015113:	8d 48 01             	lea    ecx,[eax+0x1]
c0015116:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001511d:	88 10                	mov    BYTE PTR [eax],dl
c001511f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015123:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0015127:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001512e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0015132:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0015136:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001513a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001513e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015142:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015146:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001514a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001514e:	89 c6                	mov    esi,eax
c0015150:	89 d7                	mov    edi,edx
c0015152:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015154:	89 c8                	mov    eax,ecx
c0015156:	89 fa                	mov    edx,edi
c0015158:	89 f3                	mov    ebx,esi
c001515a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001515e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015162:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015166:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001516a:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0015171:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015178:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001517c:	50                   	push   eax
c001517d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015181:	e8 c6 fd ff ff       	call   c0014f4c <Net::crc32Calc(unsigned char*, int)>
c0015186:	83 c4 08             	add    esp,0x8
c0015189:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001518d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015191:	c1 e8 18             	shr    eax,0x18
c0015194:	89 c1                	mov    ecx,eax
c0015196:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001519d:	8d 50 01             	lea    edx,[eax+0x1]
c00151a0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151a7:	88 ca                	mov    dl,cl
c00151a9:	88 10                	mov    BYTE PTR [eax],dl
c00151ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00151af:	c1 e8 10             	shr    eax,0x10
c00151b2:	89 c1                	mov    ecx,eax
c00151b4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00151bb:	8d 50 01             	lea    edx,[eax+0x1]
c00151be:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151c5:	88 ca                	mov    dl,cl
c00151c7:	88 10                	mov    BYTE PTR [eax],dl
c00151c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00151cd:	c1 e8 08             	shr    eax,0x8
c00151d0:	89 c1                	mov    ecx,eax
c00151d2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00151d9:	8d 50 01             	lea    edx,[eax+0x1]
c00151dc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151e3:	88 ca                	mov    dl,cl
c00151e5:	88 10                	mov    BYTE PTR [eax],dl
c00151e7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00151ee:	8d 50 01             	lea    edx,[eax+0x1]
c00151f1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00151f8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00151fc:	88 10                	mov    BYTE PTR [eax],dl
c00151fe:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015202:	83 c4 60             	add    esp,0x60
c0015205:	5b                   	pop    ebx
c0015206:	5e                   	pop    esi
c0015207:	5f                   	pop    edi
c0015208:	c3                   	ret    
c0015209:	8d 76 00             	lea    esi,[esi+0x0]

c001520c <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001520c:	57                   	push   edi
c001520d:	56                   	push   esi
c001520e:	53                   	push   ebx
c001520f:	83 ec 70             	sub    esp,0x70
c0015212:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015219:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001521d:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0015225:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001522c:	83 c0 0e             	add    eax,0xe
c001522f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015233:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001523a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001523e:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015246:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001524a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001524e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015252:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015256:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001525a:	89 c6                	mov    esi,eax
c001525c:	89 d7                	mov    edi,edx
c001525e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015260:	89 c8                	mov    eax,ecx
c0015262:	89 fa                	mov    edx,edi
c0015264:	89 f3                	mov    ebx,esi
c0015266:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001526a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001526e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015272:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001527a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015281:	83 c0 08             	add    eax,0x8
c0015284:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015288:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001528f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015293:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001529b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001529f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00152a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00152a7:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00152ab:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00152af:	89 c6                	mov    esi,eax
c00152b1:	89 d7                	mov    edi,edx
c00152b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152b5:	89 c8                	mov    eax,ecx
c00152b7:	89 fa                	mov    edx,edi
c00152b9:	89 f3                	mov    ebx,esi
c00152bb:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00152bf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00152c3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00152c7:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c00152cf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152d6:	8d 50 01             	lea    edx,[eax+0x1]
c00152d9:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00152e0:	8a 00                	mov    al,BYTE PTR [eax]
c00152e2:	0f b6 c0             	movzx  eax,al
c00152e5:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c00152ea:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152f1:	8d 50 01             	lea    edx,[eax+0x1]
c00152f4:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00152fb:	8a 00                	mov    al,BYTE PTR [eax]
c00152fd:	0f b6 c0             	movzx  eax,al
c0015300:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015305:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001530a:	c1 e0 08             	shl    eax,0x8
c001530d:	89 c2                	mov    edx,eax
c001530f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015313:	09 d0                	or     eax,edx
c0015315:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001531c:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015320:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015328:	75 46                	jne    c0015370 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001532a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015331:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015334:	66 3d dc 05          	cmp    ax,0x5dc
c0015338:	77 16                	ja     c0015350 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001533a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015341:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015344:	0f b7 c0             	movzx  eax,ax
c0015347:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001534e:	eb 20                	jmp    c0015370 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015350:	83 ec 0c             	sub    esp,0xc
c0015353:	68 c0 5d 02 c0       	push   0xc0025dc0
c0015358:	e8 a2 79 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001535d:	83 c4 10             	add    esp,0x10
c0015360:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015367:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001536b:	e9 18 01 00 00       	jmp    c0015488 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015370:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015377:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001537e:	8b 12                	mov    edx,DWORD PTR [edx]
c0015380:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015384:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001538b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001538f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015393:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015397:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001539b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001539f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00153a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00153a7:	89 c6                	mov    esi,eax
c00153a9:	89 d7                	mov    edi,edx
c00153ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00153ad:	89 c8                	mov    eax,ecx
c00153af:	89 fa                	mov    edx,edi
c00153b1:	89 f3                	mov    ebx,esi
c00153b3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00153b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00153bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00153be:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00153c5:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c00153cc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00153d3:	8d 50 01             	lea    edx,[eax+0x1]
c00153d6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00153dd:	8a 00                	mov    al,BYTE PTR [eax]
c00153df:	0f b6 c0             	movzx  eax,al
c00153e2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00153e6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00153ed:	8d 50 01             	lea    edx,[eax+0x1]
c00153f0:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00153f7:	8a 00                	mov    al,BYTE PTR [eax]
c00153f9:	0f b6 c0             	movzx  eax,al
c00153fc:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015400:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015407:	8d 50 01             	lea    edx,[eax+0x1]
c001540a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015411:	8a 00                	mov    al,BYTE PTR [eax]
c0015413:	0f b6 c0             	movzx  eax,al
c0015416:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001541a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015421:	8d 50 01             	lea    edx,[eax+0x1]
c0015424:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001542b:	8a 00                	mov    al,BYTE PTR [eax]
c001542d:	0f b6 c0             	movzx  eax,al
c0015430:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015434:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015438:	c1 e0 18             	shl    eax,0x18
c001543b:	89 c2                	mov    edx,eax
c001543d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015441:	c1 e0 10             	shl    eax,0x10
c0015444:	09 c2                	or     edx,eax
c0015446:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001544a:	c1 e0 08             	shl    eax,0x8
c001544d:	09 d0                	or     eax,edx
c001544f:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015453:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015457:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001545e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015462:	83 e8 04             	sub    eax,0x4
c0015465:	83 ec 08             	sub    esp,0x8
c0015468:	50                   	push   eax
c0015469:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001546d:	e8 da fa ff ff       	call   c0014f4c <Net::crc32Calc(unsigned char*, int)>
c0015472:	83 c4 10             	add    esp,0x10
c0015475:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015479:	0f 94 c2             	sete   dl
c001547c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015483:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015486:	90                   	nop
c0015487:	90                   	nop
c0015488:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001548f:	83 c4 70             	add    esp,0x70
c0015492:	5b                   	pop    ebx
c0015493:	5e                   	pop    esi
c0015494:	5f                   	pop    edi
c0015495:	c2 04 00             	ret    0x4

c0015498 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015498:	55                   	push   ebp
c0015499:	57                   	push   edi
c001549a:	56                   	push   esi
c001549b:	53                   	push   ebx
c001549c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00154a2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00154a9:	8a 1e                	mov    bl,BYTE PTR [esi]
c00154ab:	8d 6e 01             	lea    ebp,[esi+0x1]
c00154ae:	80 fb 40             	cmp    bl,0x40
c00154b1:	75 1b                	jne    c00154ce <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00154b3:	8a 16                	mov    dl,BYTE PTR [esi]
c00154b5:	84 d2                	test   dl,dl
c00154b7:	0f 84 f1 00 00 00    	je     c00155ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154bd:	8d 46 01             	lea    eax,[esi+0x1]
c00154c0:	80 fa 3a             	cmp    dl,0x3a
c00154c3:	74 04                	je     c00154c9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00154c5:	89 c6                	mov    esi,eax
c00154c7:	eb ea                	jmp    c00154b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00154c9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00154cc:	89 c6                	mov    esi,eax
c00154ce:	50                   	push   eax
c00154cf:	6a 40                	push   0x40
c00154d1:	6a 00                	push   0x0
c00154d3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00154d7:	50                   	push   eax
c00154d8:	e8 a7 b1 fe ff       	call   c0000684 <memset>
c00154dd:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00154e4:	31 c0                	xor    eax,eax
c00154e6:	83 c4 10             	add    esp,0x10
c00154e9:	8a 0f                	mov    cl,BYTE PTR [edi]
c00154eb:	84 c9                	test   cl,cl
c00154ed:	0f 84 bb 00 00 00    	je     c00155ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154f3:	3d c7 00 00 00       	cmp    eax,0xc7
c00154f8:	0f 8f b0 00 00 00    	jg     c00155ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00154fe:	80 f9 0a             	cmp    cl,0xa
c0015501:	0f 85 98 00 00 00    	jne    c001559f <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015507:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001550c:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015510:	a8 df                	test   al,0xdf
c0015512:	0f 94 c1             	sete   cl
c0015515:	3c 23                	cmp    al,0x23
c0015517:	0f 94 c2             	sete   dl
c001551a:	08 d1                	or     cl,dl
c001551c:	75 4a                	jne    c0015568 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001551e:	8d 50 f7             	lea    edx,[eax-0x9]
c0015521:	80 fa 01             	cmp    dl,0x1
c0015524:	76 42                	jbe    c0015568 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015526:	3c 5b                	cmp    al,0x5b
c0015528:	75 42                	jne    c001556c <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001552a:	80 fb 40             	cmp    bl,0x40
c001552d:	75 39                	jne    c0015568 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001552f:	83 ec 0c             	sub    esp,0xc
c0015532:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015536:	52                   	push   edx
c0015537:	e8 64 b1 fe ff       	call   c00006a0 <strlen>
c001553c:	83 c4 10             	add    esp,0x10
c001553f:	83 f8 3f             	cmp    eax,0x3f
c0015542:	77 6a                	ja     c00155ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015544:	50                   	push   eax
c0015545:	50                   	push   eax
c0015546:	8d 54 24 61          	lea    edx,[esp+0x61]
c001554a:	52                   	push   edx
c001554b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001554f:	52                   	push   edx
c0015550:	e8 eb b1 fe ff       	call   c0000740 <strcpy>
c0015555:	58                   	pop    eax
c0015556:	8d 54 24 24          	lea    edx,[esp+0x24]
c001555a:	52                   	push   edx
c001555b:	e8 40 b1 fe ff       	call   c00006a0 <strlen>
c0015560:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015565:	83 c4 10             	add    esp,0x10
c0015568:	31 d2                	xor    edx,edx
c001556a:	eb 3a                	jmp    c00155a6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001556c:	80 fb 40             	cmp    bl,0x40
c001556f:	74 06                	je     c0015577 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015571:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015575:	eb 20                	jmp    c0015597 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015577:	50                   	push   eax
c0015578:	50                   	push   eax
c0015579:	55                   	push   ebp
c001557a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001557e:	50                   	push   eax
c001557f:	e8 48 b2 fe ff       	call   c00007cc <strcmp>
c0015584:	83 c4 10             	add    esp,0x10
c0015587:	85 c0                	test   eax,eax
c0015589:	75 dd                	jne    c0015568 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001558b:	eb e4                	jmp    c0015571 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001558d:	8d 50 01             	lea    edx,[eax+0x1]
c0015590:	80 f9 3d             	cmp    cl,0x3d
c0015593:	74 1d                	je     c00155b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015595:	89 d0                	mov    eax,edx
c0015597:	8a 08                	mov    cl,BYTE PTR [eax]
c0015599:	84 c9                	test   cl,cl
c001559b:	75 f0                	jne    c001558d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001559d:	eb 0f                	jmp    c00155ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001559f:	8d 50 01             	lea    edx,[eax+0x1]
c00155a2:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00155a6:	47                   	inc    edi
c00155a7:	89 d0                	mov    eax,edx
c00155a9:	e9 3b ff ff ff       	jmp    c00154e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00155ae:	31 c0                	xor    eax,eax
c00155b0:	eb 33                	jmp    c00155e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00155b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00155b6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00155b9:	50                   	push   eax
c00155ba:	50                   	push   eax
c00155bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00155bf:	50                   	push   eax
c00155c0:	56                   	push   esi
c00155c1:	e8 06 b2 fe ff       	call   c00007cc <strcmp>
c00155c6:	83 c4 10             	add    esp,0x10
c00155c9:	85 c0                	test   eax,eax
c00155cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00155cf:	75 97                	jne    c0015568 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00155d1:	51                   	push   ecx
c00155d2:	51                   	push   ecx
c00155d3:	52                   	push   edx
c00155d4:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00155db:	e8 60 b1 fe ff       	call   c0000740 <strcpy>
c00155e0:	83 c4 10             	add    esp,0x10
c00155e3:	b0 01                	mov    al,0x1
c00155e5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00155eb:	5b                   	pop    ebx
c00155ec:	5e                   	pop    esi
c00155ed:	5f                   	pop    edi
c00155ee:	5d                   	pop    ebp
c00155ef:	c3                   	ret    

c00155f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00155f0:	57                   	push   edi
c00155f1:	56                   	push   esi
c00155f2:	53                   	push   ebx
c00155f3:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00155f9:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015600:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015607:	53                   	push   ebx
c0015608:	e8 93 b0 fe ff       	call   c00006a0 <strlen>
c001560d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015610:	89 c7                	mov    edi,eax
c0015612:	e8 89 b0 fe ff       	call   c00006a0 <strlen>
c0015617:	83 c4 10             	add    esp,0x10
c001561a:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001561e:	3d ff 00 00 00       	cmp    eax,0xff
c0015623:	0f 87 d3 00 00 00    	ja     c00156fc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015629:	57                   	push   edi
c001562a:	57                   	push   edi
c001562b:	56                   	push   esi
c001562c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015630:	56                   	push   esi
c0015631:	e8 0a b1 fe ff       	call   c0000740 <strcpy>
c0015636:	58                   	pop    eax
c0015637:	5a                   	pop    edx
c0015638:	68 62 61 02 c0       	push   0xc0026162
c001563d:	56                   	push   esi
c001563e:	e8 3d b2 fe ff       	call   c0000880 <strcat>
c0015643:	59                   	pop    ecx
c0015644:	5f                   	pop    edi
c0015645:	53                   	push   ebx
c0015646:	56                   	push   esi
c0015647:	e8 34 b2 fe ff       	call   c0000880 <strcat>
c001564c:	58                   	pop    eax
c001564d:	5a                   	pop    edx
c001564e:	68 0c 5e 02 c0       	push   0xc0025e0c
c0015653:	56                   	push   esi
c0015654:	e8 27 b2 fe ff       	call   c0000880 <strcat>
c0015659:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015660:	e8 aa 43 ff ff       	call   c0009a0f <malloc>
c0015665:	83 c4 0c             	add    esp,0xc
c0015668:	89 c3                	mov    ebx,eax
c001566a:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c0015670:	56                   	push   esi
c0015671:	50                   	push   eax
c0015672:	e8 f3 7b ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0015677:	83 c4 10             	add    esp,0x10
c001567a:	85 db                	test   ebx,ebx
c001567c:	74 7e                	je     c00156fc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001567e:	51                   	push   ecx
c001567f:	51                   	push   ecx
c0015680:	6a 01                	push   0x1
c0015682:	53                   	push   ebx
c0015683:	e8 a4 7c ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0015688:	83 c4 10             	add    esp,0x10
c001568b:	85 c0                	test   eax,eax
c001568d:	74 08                	je     c0015697 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001568f:	83 ec 0c             	sub    esp,0xc
c0015692:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015694:	53                   	push   ebx
c0015695:	eb 5f                	jmp    c00156f6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015697:	52                   	push   edx
c0015698:	8d 44 24 17          	lea    eax,[esp+0x17]
c001569c:	50                   	push   eax
c001569d:	8d 44 24 20          	lea    eax,[esp+0x20]
c00156a1:	50                   	push   eax
c00156a2:	53                   	push   ebx
c00156a3:	e8 30 7f ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c00156a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156ac:	83 c4 10             	add    esp,0x10
c00156af:	89 c1                	mov    ecx,eax
c00156b1:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00156b5:	74 31                	je     c00156e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00156b7:	83 ec 0c             	sub    esp,0xc
c00156ba:	50                   	push   eax
c00156bb:	e8 4f 43 ff ff       	call   c0009a0f <malloc>
c00156c0:	89 c6                	mov    esi,eax
c00156c2:	58                   	pop    eax
c00156c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156c5:	8d 54 24 20          	lea    edx,[esp+0x20]
c00156c9:	52                   	push   edx
c00156ca:	56                   	push   esi
c00156cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00156cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00156d3:	53                   	push   ebx
c00156d4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00156d7:	83 c4 20             	add    esp,0x20
c00156da:	85 c0                	test   eax,eax
c00156dc:	75 0a                	jne    c00156e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00156de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00156e2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00156e6:	74 18                	je     c0015700 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00156e8:	83 ec 0c             	sub    esp,0xc
c00156eb:	53                   	push   ebx
c00156ec:	e8 99 7c ff ff       	call   c000d38a <File::close()>
c00156f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00156f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156f9:	83 c4 10             	add    esp,0x10
c00156fc:	31 c0                	xor    eax,eax
c00156fe:	eb 3b                	jmp    c001573b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	53                   	push   ebx
c0015704:	e8 81 7c ff ff       	call   c000d38a <File::close()>
c0015709:	8b 03                	mov    eax,DWORD PTR [ebx]
c001570b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001570e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015711:	83 c4 0c             	add    esp,0xc
c0015714:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001571b:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015722:	56                   	push   esi
c0015723:	e8 70 fd ff ff       	call   c0015498 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015728:	89 34 24             	mov    DWORD PTR [esp],esi
c001572b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001572f:	e8 eb 42 ff ff       	call   c0009a1f <free>
c0015734:	83 c4 10             	add    esp,0x10
c0015737:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001573b:	81 c4 20 01 00 00    	add    esp,0x120
c0015741:	5b                   	pop    ebx
c0015742:	5e                   	pop    esi
c0015743:	5f                   	pop    edi
c0015744:	c3                   	ret    

c0015745 <Reg::getLine(char*, char*, char*)>:
c0015745:	57                   	push   edi
c0015746:	56                   	push   esi
c0015747:	53                   	push   ebx
c0015748:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001574c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015750:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015754:	57                   	push   edi
c0015755:	56                   	push   esi
c0015756:	53                   	push   ebx
c0015757:	68 11 5e 02 c0       	push   0xc0025e11
c001575c:	e8 8f fe ff ff       	call   c00155f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015761:	83 c4 10             	add    esp,0x10
c0015764:	84 c0                	test   al,al
c0015766:	75 10                	jne    c0015778 <Reg::getLine(char*, char*, char*)+0x33>
c0015768:	57                   	push   edi
c0015769:	56                   	push   esi
c001576a:	53                   	push   ebx
c001576b:	68 36 5e 02 c0       	push   0xc0025e36
c0015770:	e8 7b fe ff ff       	call   c00155f0 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015775:	83 c4 10             	add    esp,0x10
c0015778:	5b                   	pop    ebx
c0015779:	5e                   	pop    esi
c001577a:	5f                   	pop    edi
c001577b:	c3                   	ret    

c001577c <Reg::readInt(char*, char*, int*)>:
c001577c:	55                   	push   ebp
c001577d:	57                   	push   edi
c001577e:	56                   	push   esi
c001577f:	53                   	push   ebx
c0015780:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015786:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001578a:	57                   	push   edi
c001578b:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015792:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015799:	e8 a7 ff ff ff       	call   c0015745 <Reg::getLine(char*, char*, char*)>
c001579e:	83 c4 10             	add    esp,0x10
c00157a1:	84 c0                	test   al,al
c00157a3:	0f 84 b3 00 00 00    	je     c001585c <Reg::readInt(char*, char*, int*)+0xe0>
c00157a9:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00157ad:	80 fa 2b             	cmp    dl,0x2b
c00157b0:	74 0c                	je     c00157be <Reg::readInt(char*, char*, int*)+0x42>
c00157b2:	80 fa 2d             	cmp    dl,0x2d
c00157b5:	75 0e                	jne    c00157c5 <Reg::readInt(char*, char*, int*)+0x49>
c00157b7:	ba 01 00 00 00       	mov    edx,0x1
c00157bc:	eb 0b                	jmp    c00157c9 <Reg::readInt(char*, char*, int*)+0x4d>
c00157be:	ba 01 00 00 00       	mov    edx,0x1
c00157c3:	eb 02                	jmp    c00157c7 <Reg::readInt(char*, char*, int*)+0x4b>
c00157c5:	31 d2                	xor    edx,edx
c00157c7:	31 c0                	xor    eax,eax
c00157c9:	be 0a 00 00 00       	mov    esi,0xa
c00157ce:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00157d3:	75 20                	jne    c00157f5 <Reg::readInt(char*, char*, int*)+0x79>
c00157d5:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00157d9:	80 f9 78             	cmp    cl,0x78
c00157dc:	75 0a                	jne    c00157e8 <Reg::readInt(char*, char*, int*)+0x6c>
c00157de:	83 c2 02             	add    edx,0x2
c00157e1:	be 10 00 00 00       	mov    esi,0x10
c00157e6:	eb 0d                	jmp    c00157f5 <Reg::readInt(char*, char*, int*)+0x79>
c00157e8:	80 f9 62             	cmp    cl,0x62
c00157eb:	75 08                	jne    c00157f5 <Reg::readInt(char*, char*, int*)+0x79>
c00157ed:	83 c2 02             	add    edx,0x2
c00157f0:	be 02 00 00 00       	mov    esi,0x2
c00157f5:	01 d7                	add    edi,edx
c00157f7:	31 d2                	xor    edx,edx
c00157f9:	8a 1f                	mov    bl,BYTE PTR [edi]
c00157fb:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00157ff:	80 fb 0d             	cmp    bl,0xd
c0015802:	0f 94 c3             	sete   bl
c0015805:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001580a:	0f 94 c1             	sete   cl
c001580d:	08 cb                	or     bl,cl
c001580f:	75 3a                	jne    c001584b <Reg::readInt(char*, char*, int*)+0xcf>
c0015811:	0f af d6             	imul   edx,esi
c0015814:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015819:	83 fe 10             	cmp    esi,0x10
c001581c:	75 26                	jne    c0015844 <Reg::readInt(char*, char*, int*)+0xc8>
c001581e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015822:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015825:	89 e9                	mov    ecx,ebp
c0015827:	80 f9 05             	cmp    cl,0x5
c001582a:	77 06                	ja     c0015832 <Reg::readInt(char*, char*, int*)+0xb6>
c001582c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015830:	eb 16                	jmp    c0015848 <Reg::readInt(char*, char*, int*)+0xcc>
c0015832:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015836:	83 e9 61             	sub    ecx,0x61
c0015839:	80 f9 05             	cmp    cl,0x5
c001583c:	77 06                	ja     c0015844 <Reg::readInt(char*, char*, int*)+0xc8>
c001583e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015842:	eb 04                	jmp    c0015848 <Reg::readInt(char*, char*, int*)+0xcc>
c0015844:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015848:	47                   	inc    edi
c0015849:	eb ae                	jmp    c00157f9 <Reg::readInt(char*, char*, int*)+0x7d>
c001584b:	84 c0                	test   al,al
c001584d:	74 02                	je     c0015851 <Reg::readInt(char*, char*, int*)+0xd5>
c001584f:	f7 da                	neg    edx
c0015851:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015858:	89 10                	mov    DWORD PTR [eax],edx
c001585a:	88 d8                	mov    al,bl
c001585c:	81 c4 ec 00 00 00    	add    esp,0xec
c0015862:	5b                   	pop    ebx
c0015863:	5e                   	pop    esi
c0015864:	5f                   	pop    edi
c0015865:	5d                   	pop    ebp
c0015866:	c3                   	ret    

c0015867 <Reg::readString(char*, char*, char*, int)>:
c0015867:	57                   	push   edi
c0015868:	56                   	push   esi
c0015869:	53                   	push   ebx
c001586a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015870:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015877:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001587b:	57                   	push   edi
c001587c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015883:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001588a:	e8 b6 fe ff ff       	call   c0015745 <Reg::getLine(char*, char*, char*)>
c001588f:	83 c4 10             	add    esp,0x10
c0015892:	89 c6                	mov    esi,eax
c0015894:	84 c0                	test   al,al
c0015896:	74 44                	je     c00158dc <Reg::readString(char*, char*, char*, int)+0x75>
c0015898:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001589f:	31 c0                	xor    eax,eax
c00158a1:	4a                   	dec    edx
c00158a2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00158a5:	84 c9                	test   cl,cl
c00158a7:	74 0f                	je     c00158b8 <Reg::readString(char*, char*, char*, int)+0x51>
c00158a9:	39 c2                	cmp    edx,eax
c00158ab:	7e 0b                	jle    c00158b8 <Reg::readString(char*, char*, char*, int)+0x51>
c00158ad:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00158b0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00158b5:	40                   	inc    eax
c00158b6:	eb ea                	jmp    c00158a2 <Reg::readString(char*, char*, char*, int)+0x3b>
c00158b8:	83 ec 0c             	sub    esp,0xc
c00158bb:	53                   	push   ebx
c00158bc:	e8 df ad fe ff       	call   c00006a0 <strlen>
c00158c1:	83 c4 10             	add    esp,0x10
c00158c4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00158c9:	75 11                	jne    c00158dc <Reg::readString(char*, char*, char*, int)+0x75>
c00158cb:	83 ec 0c             	sub    esp,0xc
c00158ce:	53                   	push   ebx
c00158cf:	e8 cc ad fe ff       	call   c00006a0 <strlen>
c00158d4:	83 c4 10             	add    esp,0x10
c00158d7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00158dc:	81 c4 d0 00 00 00    	add    esp,0xd0
c00158e2:	89 f0                	mov    eax,esi
c00158e4:	5b                   	pop    ebx
c00158e5:	5e                   	pop    esi
c00158e6:	5f                   	pop    edi
c00158e7:	c3                   	ret    

c00158e8 <Reg::readBool(char*, char*, bool*)>:
c00158e8:	83 ec 20             	sub    esp,0x20
c00158eb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00158ef:	50                   	push   eax
c00158f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158f8:	e8 7f fe ff ff       	call   c001577c <Reg::readInt(char*, char*, int*)>
c00158fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015902:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015906:	0f 95 02             	setne  BYTE PTR [edx]
c0015909:	83 c4 2c             	add    esp,0x2c
c001590c:	c3                   	ret    

c001590d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001590d:	53                   	push   ebx
c001590e:	83 ec 1c             	sub    esp,0x1c
c0015911:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015915:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015919:	50                   	push   eax
c001591a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001591e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015922:	e8 c1 ff ff ff       	call   c00158e8 <Reg::readBool(char*, char*, bool*)>
c0015927:	83 c4 10             	add    esp,0x10
c001592a:	84 c0                	test   al,al
c001592c:	74 04                	je     c0015932 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001592e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015932:	88 d8                	mov    al,bl
c0015934:	83 c4 18             	add    esp,0x18
c0015937:	5b                   	pop    ebx
c0015938:	c3                   	ret    

c0015939 <Reg::readIntWithDefault(char*, char*, int)>:
c0015939:	53                   	push   ebx
c001593a:	83 ec 1c             	sub    esp,0x1c
c001593d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015941:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015945:	50                   	push   eax
c0015946:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001594a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001594e:	e8 29 fe ff ff       	call   c001577c <Reg::readInt(char*, char*, int*)>
c0015953:	83 c4 10             	add    esp,0x10
c0015956:	84 c0                	test   al,al
c0015958:	74 04                	je     c001595e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001595a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001595e:	89 d8                	mov    eax,ebx
c0015960:	83 c4 18             	add    esp,0x18
c0015963:	5b                   	pop    ebx
c0015964:	c3                   	ret    

c0015965 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015965:	57                   	push   edi
c0015966:	56                   	push   esi
c0015967:	56                   	push   esi
c0015968:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001596c:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015970:	56                   	push   esi
c0015971:	57                   	push   edi
c0015972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015976:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001597a:	e8 e8 fe ff ff       	call   c0015867 <Reg::readString(char*, char*, char*, int)>
c001597f:	83 c4 10             	add    esp,0x10
c0015982:	84 c0                	test   al,al
c0015984:	75 1a                	jne    c00159a0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0015986:	51                   	push   ecx
c0015987:	56                   	push   esi
c0015988:	6a 00                	push   0x0
c001598a:	57                   	push   edi
c001598b:	e8 f4 ac fe ff       	call   c0000684 <memset>
c0015990:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015993:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015997:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015999:	83 c4 10             	add    esp,0x10
c001599c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00159a0:	89 f8                	mov    eax,edi
c00159a2:	5a                   	pop    edx
c00159a3:	5e                   	pop    esi
c00159a4:	5f                   	pop    edi
c00159a5:	c3                   	ret    

c00159a6 <Sys::eject(regs*)>:
c00159a6:	83 ec 0c             	sub    esp,0xc
c00159a9:	83 ca ff             	or     edx,0xffffffff
c00159ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159b0:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00159b3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00159b8:	83 e9 41             	sub    ecx,0x41
c00159bb:	83 f9 19             	cmp    ecx,0x19
c00159be:	77 18                	ja     c00159d8 <Sys::eject(regs*)+0x32>
c00159c0:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c00159c7:	85 c9                	test   ecx,ecx
c00159c9:	74 0d                	je     c00159d8 <Sys::eject(regs*)+0x32>
c00159cb:	83 ec 0c             	sub    esp,0xc
c00159ce:	51                   	push   ecx
c00159cf:	e8 1a ab ff ff       	call   c00104ee <LogicalDisk::eject()>
c00159d4:	83 c4 10             	add    esp,0x10
c00159d7:	99                   	cdq    
c00159d8:	83 c4 0c             	add    esp,0xc
c00159db:	c3                   	ret    

c00159dc <Sys::exit(regs*)>:
c00159dc:	83 ec 18             	sub    esp,0x18
c00159df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00159e6:	e8 59 36 00 00       	call   c0019044 <terminateTask(int)>
c00159eb:	83 c8 ff             	or     eax,0xffffffff
c00159ee:	83 c4 1c             	add    esp,0x1c
c00159f1:	89 c2                	mov    edx,eax
c00159f3:	c3                   	ret    

c00159f4 <Sys::getCwd(regs*)>:
c00159f4:	83 ec 10             	sub    esp,0x10
c00159f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159fb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00159fe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015a01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a06:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a09:	e8 5e 76 ff ff       	call   c000d06c <Fs::getcwd(Process*, char*, int)>
c0015a0e:	83 c4 1c             	add    esp,0x1c
c0015a11:	99                   	cdq    
c0015a12:	c3                   	ret    

c0015a13 <Sys::getPID(regs*)>:
c0015a13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a18:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a1d:	99                   	cdq    
c0015a1e:	c3                   	ret    

c0015a1f <Sys::getRAMData(regs*)>:
c0015a1f:	8b 0d 18 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028118
c0015a25:	69 05 14 81 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028114,0xc8
c0015a2f:	99                   	cdq    
c0015a30:	f7 f9                	idiv   ecx
c0015a32:	c1 e0 18             	shl    eax,0x18
c0015a35:	09 c8                	or     eax,ecx
c0015a37:	99                   	cdq    
c0015a38:	c3                   	ret    

c0015a39 <Sys::getVGAPtr(regs*)>:
c0015a39:	55                   	push   ebp
c0015a3a:	57                   	push   edi
c0015a3b:	56                   	push   esi
c0015a3c:	53                   	push   ebx
c0015a3d:	83 ec 18             	sub    esp,0x18
c0015a40:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0015a44:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c0015a47:	e8 fc 30 00 00       	call   c0018b48 <Thr::processFromPID(int)>
c0015a4c:	83 c4 10             	add    esp,0x10
c0015a4f:	89 c1                	mov    ecx,eax
c0015a51:	b8 01 00 00 00       	mov    eax,0x1
c0015a56:	85 c9                	test   ecx,ecx
c0015a58:	74 59                	je     c0015ab3 <Sys::getVGAPtr(regs*)+0x7a>
c0015a5a:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015a60:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0015a64:	74 0c                	je     c0015a72 <Sys::getVGAPtr(regs*)+0x39>
c0015a66:	83 ec 0c             	sub    esp,0xc
c0015a69:	53                   	push   ebx
c0015a6a:	e8 9a 50 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c0015a6f:	83 c4 10             	add    esp,0x10
c0015a72:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0015a75:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c0015a78:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015a7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015a82:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a85:	81 c3 82 00 00 00    	add    ebx,0x82
c0015a8b:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015a91:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015a94:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c0015a97:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015a9d:	50                   	push   eax
c0015a9e:	50                   	push   eax
c0015a9f:	53                   	push   ebx
c0015aa0:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015aa3:	05 a8 0f 00 00       	add    eax,0xfa8
c0015aa8:	50                   	push   eax
c0015aa9:	e8 92 ac fe ff       	call   c0000740 <strcpy>
c0015aae:	83 c4 10             	add    esp,0x10
c0015ab1:	31 c0                	xor    eax,eax
c0015ab3:	83 c4 0c             	add    esp,0xc
c0015ab6:	31 d2                	xor    edx,edx
c0015ab8:	5b                   	pop    ebx
c0015ab9:	5e                   	pop    esi
c0015aba:	5f                   	pop    edi
c0015abb:	5d                   	pop    ebp
c0015abc:	c3                   	ret    

c0015abd <Sys::loadDLL(regs*)>:
c0015abd:	56                   	push   esi
c0015abe:	53                   	push   ebx
c0015abf:	31 d2                	xor    edx,edx
c0015ac1:	51                   	push   ecx
c0015ac2:	b8 01 00 00 00       	mov    eax,0x1
c0015ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015acb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015acf:	0f 84 8c 00 00 00    	je     c0015b61 <Sys::loadDLL(regs*)+0xa4>
c0015ad5:	83 ec 0c             	sub    esp,0xc
c0015ad8:	68 14 01 00 00       	push   0x114
c0015add:	e8 2d 3f ff ff       	call   c0009a0f <malloc>
c0015ae2:	83 c4 0c             	add    esp,0xc
c0015ae5:	89 c3                	mov    ebx,eax
c0015ae7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015aec:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015aef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015af2:	53                   	push   ebx
c0015af3:	e8 72 77 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0015af8:	83 c4 10             	add    esp,0x10
c0015afb:	31 d2                	xor    edx,edx
c0015afd:	b8 02 00 00 00       	mov    eax,0x2
c0015b02:	85 db                	test   ebx,ebx
c0015b04:	74 5b                	je     c0015b61 <Sys::loadDLL(regs*)+0xa4>
c0015b06:	83 ec 0c             	sub    esp,0xc
c0015b09:	53                   	push   ebx
c0015b0a:	e8 8b 7a ff ff       	call   c000d59a <File::exists()>
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	84 c0                	test   al,al
c0015b14:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b16:	75 11                	jne    c0015b29 <Sys::loadDLL(regs*)+0x6c>
c0015b18:	83 ec 0c             	sub    esp,0xc
c0015b1b:	53                   	push   ebx
c0015b1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	b8 03 00 00 00       	mov    eax,0x3
c0015b27:	eb 36                	jmp    c0015b5f <Sys::loadDLL(regs*)+0xa2>
c0015b29:	83 ec 0c             	sub    esp,0xc
c0015b2c:	53                   	push   ebx
c0015b2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b30:	58                   	pop    eax
c0015b31:	5a                   	pop    edx
c0015b32:	6a 00                	push   0x0
c0015b34:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015b37:	e8 0a 22 00 00       	call   c0017d46 <Thr::loadDLL(char const*, bool)>
c0015b3c:	83 c4 10             	add    esp,0x10
c0015b3f:	89 c1                	mov    ecx,eax
c0015b41:	31 d2                	xor    edx,edx
c0015b43:	b8 04 00 00 00       	mov    eax,0x4
c0015b48:	85 c9                	test   ecx,ecx
c0015b4a:	74 15                	je     c0015b61 <Sys::loadDLL(regs*)+0xa4>
c0015b4c:	53                   	push   ebx
c0015b4d:	53                   	push   ebx
c0015b4e:	ff 35 e8 80 02 c0    	push   DWORD PTR ds:0xc00280e8
c0015b54:	51                   	push   ecx
c0015b55:	e8 1d 24 00 00       	call   c0017f77 <Thr::executeDLL(unsigned long, void*)>
c0015b5a:	83 c4 10             	add    esp,0x10
c0015b5d:	31 c0                	xor    eax,eax
c0015b5f:	31 d2                	xor    edx,edx
c0015b61:	59                   	pop    ecx
c0015b62:	5b                   	pop    ebx
c0015b63:	5e                   	pop    esi
c0015b64:	c3                   	ret    

c0015b65 <Sys::read(regs*)>:
c0015b65:	57                   	push   edi
c0015b66:	56                   	push   esi
c0015b67:	53                   	push   ebx
c0015b68:	83 ec 10             	sub    esp,0x10
c0015b6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015b6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015b72:	83 f8 02             	cmp    eax,0x2
c0015b75:	77 10                	ja     c0015b87 <Sys::read(regs*)+0x22>
c0015b77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b7c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015b7f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015b85:	eb 0e                	jmp    c0015b95 <Sys::read(regs*)+0x30>
c0015b87:	83 ec 0c             	sub    esp,0xc
c0015b8a:	50                   	push   eax
c0015b8b:	e8 f3 5c ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015b90:	83 c4 10             	add    esp,0x10
c0015b93:	89 c1                	mov    ecx,eax
c0015b95:	83 c8 ff             	or     eax,0xffffffff
c0015b98:	85 c9                	test   ecx,ecx
c0015b9a:	89 c2                	mov    edx,eax
c0015b9c:	74 28                	je     c0015bc6 <Sys::read(regs*)+0x61>
c0015b9e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015ba6:	31 ff                	xor    edi,edi
c0015ba8:	83 ec 0c             	sub    esp,0xc
c0015bab:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015bad:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015bb1:	52                   	push   edx
c0015bb2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015bb5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015bb8:	57                   	push   edi
c0015bb9:	56                   	push   esi
c0015bba:	51                   	push   ecx
c0015bbb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015bbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015bc2:	83 c4 20             	add    esp,0x20
c0015bc5:	99                   	cdq    
c0015bc6:	83 c4 10             	add    esp,0x10
c0015bc9:	5b                   	pop    ebx
c0015bca:	5e                   	pop    esi
c0015bcb:	5f                   	pop    edi
c0015bcc:	c3                   	ret    

c0015bcd <Sys::sbrk(regs*)>:
c0015bcd:	56                   	push   esi
c0015bce:	53                   	push   ebx
c0015bcf:	50                   	push   eax
c0015bd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bd5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bd9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015bdc:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015bdf:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015be5:	85 db                	test   ebx,ebx
c0015be7:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015bea:	74 02                	je     c0015bee <Sys::sbrk(regs*)+0x21>
c0015bec:	79 06                	jns    c0015bf4 <Sys::sbrk(regs*)+0x27>
c0015bee:	89 f0                	mov    eax,esi
c0015bf0:	31 d2                	xor    edx,edx
c0015bf2:	eb 2a                	jmp    c0015c1e <Sys::sbrk(regs*)+0x51>
c0015bf4:	83 c8 ff             	or     eax,0xffffffff
c0015bf7:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015bfd:	89 c2                	mov    edx,eax
c0015bff:	77 1d                	ja     c0015c1e <Sys::sbrk(regs*)+0x51>
c0015c01:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015c07:	50                   	push   eax
c0015c08:	c1 ea 0c             	shr    edx,0xc
c0015c0b:	68 07 0c 00 00       	push   0xc07
c0015c10:	52                   	push   edx
c0015c11:	51                   	push   ecx
c0015c12:	e8 6b 65 ff ff       	call   c000c182 <VAS::allocatePages(int, int)>
c0015c17:	89 f0                	mov    eax,esi
c0015c19:	31 d2                	xor    edx,edx
c0015c1b:	83 c4 10             	add    esp,0x10
c0015c1e:	59                   	pop    ecx
c0015c1f:	5b                   	pop    ebx
c0015c20:	5e                   	pop    esi
c0015c21:	c3                   	ret    

c0015c22 <Sys::setCwd(regs*)>:
c0015c22:	83 ec 14             	sub    esp,0x14
c0015c25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c29:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c31:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c34:	e8 00 7a ff ff       	call   c000d639 <Fs::setcwd(Process*, char*)>
c0015c39:	83 c4 1c             	add    esp,0x1c
c0015c3c:	99                   	cdq    
c0015c3d:	c3                   	ret    

c0015c3e <Sys::setTime(regs*)>:
c0015c3e:	55                   	push   ebp
c0015c3f:	31 c9                	xor    ecx,ecx
c0015c41:	57                   	push   edi
c0015c42:	bd 0c 00 00 00       	mov    ebp,0xc
c0015c47:	56                   	push   esi
c0015c48:	53                   	push   ebx
c0015c49:	31 db                	xor    ebx,ebx
c0015c4b:	83 ec 10             	sub    esp,0x10
c0015c4e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015c52:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015c55:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015c58:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015c5b:	89 c2                	mov    edx,eax
c0015c5d:	66 81 ef 6c 07       	sub    di,0x76c
c0015c62:	83 e2 1f             	and    edx,0x1f
c0015c65:	c1 e7 10             	shl    edi,0x10
c0015c68:	42                   	inc    edx
c0015c69:	c1 e8 05             	shr    eax,0x5
c0015c6c:	88 d1                	mov    cl,dl
c0015c6e:	31 d2                	xor    edx,edx
c0015c70:	f7 f5                	div    ebp
c0015c72:	89 dd                	mov    ebp,ebx
c0015c74:	88 d5                	mov    ch,dl
c0015c76:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015c7c:	0f b7 c1             	movzx  eax,cx
c0015c7f:	31 d2                	xor    edx,edx
c0015c81:	09 f8                	or     eax,edi
c0015c83:	bf 3c 00 00 00       	mov    edi,0x3c
c0015c88:	89 c1                	mov    ecx,eax
c0015c8a:	89 f0                	mov    eax,esi
c0015c8c:	f7 f7                	div    edi
c0015c8e:	c1 e2 10             	shl    edx,0x10
c0015c91:	09 d5                	or     ebp,edx
c0015c93:	31 d2                	xor    edx,edx
c0015c95:	89 eb                	mov    ebx,ebp
c0015c97:	f7 f7                	div    edi
c0015c99:	bf 10 0e 00 00       	mov    edi,0xe10
c0015c9e:	88 d7                	mov    bh,dl
c0015ca0:	89 f0                	mov    eax,esi
c0015ca2:	31 d2                	xor    edx,edx
c0015ca4:	f7 f7                	div    edi
c0015ca6:	bf 18 00 00 00       	mov    edi,0x18
c0015cab:	31 d2                	xor    edx,edx
c0015cad:	f7 f7                	div    edi
c0015caf:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0015cb4:	88 d3                	mov    bl,dl
c0015cb6:	53                   	push   ebx
c0015cb7:	51                   	push   ecx
c0015cb8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015cbe:	e8 5b 82 ff ff       	call   c000df1e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015cc3:	83 c4 1c             	add    esp,0x1c
c0015cc6:	83 f0 01             	xor    eax,0x1
c0015cc9:	5b                   	pop    ebx
c0015cca:	0f b6 c0             	movzx  eax,al
c0015ccd:	5e                   	pop    esi
c0015cce:	31 d2                	xor    edx,edx
c0015cd0:	5f                   	pop    edi
c0015cd1:	5d                   	pop    ebp
c0015cd2:	c3                   	ret    

c0015cd3 <Sys::timezone(regs*)>:
c0015cd3:	53                   	push   ebx
c0015cd4:	83 ec 08             	sub    esp,0x8
c0015cd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015cdb:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015cdf:	75 17                	jne    c0015cf8 <Sys::timezone(regs*)+0x25>
c0015ce1:	83 ec 0c             	sub    esp,0xc
c0015ce4:	68 51 5e 02 c0       	push   0xc0025e51
c0015ce9:	e8 11 70 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015cee:	83 c8 ff             	or     eax,0xffffffff
c0015cf1:	83 c4 10             	add    esp,0x10
c0015cf4:	89 c2                	mov    edx,eax
c0015cf6:	eb 20                	jmp    c0015d18 <Sys::timezone(regs*)+0x45>
c0015cf8:	83 ec 0c             	sub    esp,0xc
c0015cfb:	68 66 5e 02 c0       	push   0xc0025e66
c0015d00:	e8 fa 6f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0015d05:	58                   	pop    eax
c0015d06:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015d09:	e8 72 7f ff ff       	call   c000dc80 <User::loadClockSettings(int)>
c0015d0e:	83 c4 10             	add    esp,0x10
c0015d11:	b8 01 00 00 00       	mov    eax,0x1
c0015d16:	31 d2                	xor    edx,edx
c0015d18:	83 c4 08             	add    esp,0x8
c0015d1b:	5b                   	pop    ebx
c0015d1c:	c3                   	ret    

c0015d1d <Sys::write(regs*)>:
c0015d1d:	57                   	push   edi
c0015d1e:	56                   	push   esi
c0015d1f:	53                   	push   ebx
c0015d20:	83 ec 10             	sub    esp,0x10
c0015d23:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d2a:	83 f8 02             	cmp    eax,0x2
c0015d2d:	77 10                	ja     c0015d3f <Sys::write(regs*)+0x22>
c0015d2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d37:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015d3d:	eb 0e                	jmp    c0015d4d <Sys::write(regs*)+0x30>
c0015d3f:	83 ec 0c             	sub    esp,0xc
c0015d42:	50                   	push   eax
c0015d43:	e8 3b 5b ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0015d48:	83 c4 10             	add    esp,0x10
c0015d4b:	89 c1                	mov    ecx,eax
c0015d4d:	83 c8 ff             	or     eax,0xffffffff
c0015d50:	85 c9                	test   ecx,ecx
c0015d52:	89 c2                	mov    edx,eax
c0015d54:	74 28                	je     c0015d7e <Sys::write(regs*)+0x61>
c0015d56:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015d5e:	31 ff                	xor    edi,edi
c0015d60:	83 ec 0c             	sub    esp,0xc
c0015d63:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015d65:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015d69:	52                   	push   edx
c0015d6a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d6d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015d70:	57                   	push   edi
c0015d71:	56                   	push   esi
c0015d72:	51                   	push   ecx
c0015d73:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015d76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d7a:	83 c4 20             	add    esp,0x20
c0015d7d:	99                   	cdq    
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	5b                   	pop    ebx
c0015d82:	5e                   	pop    esi
c0015d83:	5f                   	pop    edi
c0015d84:	c3                   	ret    

c0015d85 <Sys::wsbe(regs*)>:
c0015d85:	57                   	push   edi
c0015d86:	b9 0b 00 00 00       	mov    ecx,0xb
c0015d8b:	56                   	push   esi
c0015d8c:	be a5 5e 02 c0       	mov    esi,0xc0025ea5
c0015d91:	53                   	push   ebx
c0015d92:	83 ec 30             	sub    esp,0x30
c0015d95:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015d99:	fc                   	cld    
c0015d9a:	83 ec 0c             	sub    esp,0xc
c0015d9d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015d9f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015da3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015dab:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015db1:	8b 06                	mov    eax,DWORD PTR [esi]
c0015db3:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015db6:	57                   	push   edi
c0015db7:	e8 e4 a8 fe ff       	call   c00006a0 <strlen>
c0015dbc:	5a                   	pop    edx
c0015dbd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015dc1:	52                   	push   edx
c0015dc2:	31 d2                	xor    edx,edx
c0015dc4:	57                   	push   edi
c0015dc5:	52                   	push   edx
c0015dc6:	50                   	push   eax
c0015dc7:	56                   	push   esi
c0015dc8:	ff d3                	call   ebx
c0015dca:	83 c4 14             	add    esp,0x14
c0015dcd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015dd1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015dd4:	e8 6b 32 00 00       	call   c0019044 <terminateTask(int)>
c0015dd9:	83 c4 40             	add    esp,0x40
c0015ddc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015de1:	5b                   	pop    ebx
c0015de2:	31 d2                	xor    edx,edx
c0015de4:	5e                   	pop    esi
c0015de5:	5f                   	pop    edi
c0015de6:	c3                   	ret    

c0015de7 <Sys::yield(regs*)>:
c0015de7:	83 ec 0c             	sub    esp,0xc
c0015dea:	fa                   	cli    
c0015deb:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0015df1:	e8 36 29 00 00       	call   c001872c <schedule()>
c0015df6:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0015dfb:	48                   	dec    eax
c0015dfc:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0015e01:	75 01                	jne    c0015e04 <Sys::yield(regs*)+0x1d>
c0015e03:	fb                   	sti    
c0015e04:	8b 15 0c 87 02 c0    	mov    edx,DWORD PTR ds:0xc002870c
c0015e0a:	83 c4 0c             	add    esp,0xc
c0015e0d:	89 d0                	mov    eax,edx
c0015e0f:	c1 ea 11             	shr    edx,0x11
c0015e12:	c1 e0 07             	shl    eax,0x7
c0015e15:	25 80 30 0f 00       	and    eax,0xf3080
c0015e1a:	31 d0                	xor    eax,edx
c0015e1c:	31 d2                	xor    edx,edx
c0015e1e:	c3                   	ret    

c0015e1f <sysCallSeekDir(regs*)>:
c0015e1f:	31 c0                	xor    eax,eax
c0015e21:	31 d2                	xor    edx,edx
c0015e23:	c3                   	ret    

c0015e24 <sysCallTellDir(regs*)>:
c0015e24:	31 c0                	xor    eax,eax
c0015e26:	31 d2                	xor    edx,edx
c0015e28:	c3                   	ret    

c0015e29 <sysCallVerify(regs*)>:
c0015e29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e2d:	31 d2                	xor    edx,edx
c0015e2f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e32:	c3                   	ret    

c0015e33 <sysCallGetArgc(regs*)>:
c0015e33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015e3b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015e41:	99                   	cdq    
c0015e42:	c3                   	ret    

c0015e43 <sysFormatDisk(regs*)>:
c0015e43:	56                   	push   esi
c0015e44:	53                   	push   ebx
c0015e45:	53                   	push   ebx
c0015e46:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e4a:	8b 1d 14 82 02 c0    	mov    ebx,DWORD PTR ds:0xc0028214
c0015e50:	eb 25                	jmp    c0015e77 <sysFormatDisk(regs*)+0x34>
c0015e52:	83 ec 0c             	sub    esp,0xc
c0015e55:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015e58:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015e5a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015e5d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015e60:	50                   	push   eax
c0015e61:	ff 34 85 a0 86 02 c0 	push   DWORD PTR [eax*4-0x3ffd7960]
c0015e68:	53                   	push   ebx
c0015e69:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015e6c:	83 c4 20             	add    esp,0x20
c0015e6f:	83 f8 08             	cmp    eax,0x8
c0015e72:	75 12                	jne    c0015e86 <sysFormatDisk(regs*)+0x43>
c0015e74:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015e77:	85 db                	test   ebx,ebx
c0015e79:	75 d7                	jne    c0015e52 <sysFormatDisk(regs*)+0xf>
c0015e7b:	59                   	pop    ecx
c0015e7c:	b8 03 00 00 00       	mov    eax,0x3
c0015e81:	31 d2                	xor    edx,edx
c0015e83:	5b                   	pop    ebx
c0015e84:	5e                   	pop    esi
c0015e85:	c3                   	ret    
c0015e86:	85 c0                	test   eax,eax
c0015e88:	74 1b                	je     c0015ea5 <sysFormatDisk(regs*)+0x62>
c0015e8a:	83 f8 09             	cmp    eax,0x9
c0015e8d:	74 0b                	je     c0015e9a <sysFormatDisk(regs*)+0x57>
c0015e8f:	59                   	pop    ecx
c0015e90:	b8 02 00 00 00       	mov    eax,0x2
c0015e95:	31 d2                	xor    edx,edx
c0015e97:	5b                   	pop    ebx
c0015e98:	5e                   	pop    esi
c0015e99:	c3                   	ret    
c0015e9a:	59                   	pop    ecx
c0015e9b:	b8 01 00 00 00       	mov    eax,0x1
c0015ea0:	31 d2                	xor    edx,edx
c0015ea2:	5b                   	pop    ebx
c0015ea3:	5e                   	pop    esi
c0015ea4:	c3                   	ret    
c0015ea5:	59                   	pop    ecx
c0015ea6:	31 c0                	xor    eax,eax
c0015ea8:	31 d2                	xor    edx,edx
c0015eaa:	5b                   	pop    ebx
c0015eab:	5e                   	pop    esi
c0015eac:	c3                   	ret    

c0015ead <sysSetDiskVolumeLabel(regs*)>:
c0015ead:	56                   	push   esi
c0015eae:	53                   	push   ebx
c0015eaf:	53                   	push   ebx
c0015eb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015eb4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015eb7:	83 f8 19             	cmp    eax,0x19
c0015eba:	77 2d                	ja     c0015ee9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ebc:	8b 0c 85 a0 86 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7960]
c0015ec3:	85 c9                	test   ecx,ecx
c0015ec5:	74 22                	je     c0015ee9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ec7:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015eca:	85 db                	test   ebx,ebx
c0015ecc:	74 1b                	je     c0015ee9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ece:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015ed4:	85 d2                	test   edx,edx
c0015ed6:	74 11                	je     c0015ee9 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015ed8:	8b 32                	mov    esi,DWORD PTR [edx]
c0015eda:	53                   	push   ebx
c0015edb:	50                   	push   eax
c0015edc:	51                   	push   ecx
c0015edd:	52                   	push   edx
c0015ede:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015ee1:	83 c4 10             	add    esp,0x10
c0015ee4:	99                   	cdq    
c0015ee5:	59                   	pop    ecx
c0015ee6:	5b                   	pop    ebx
c0015ee7:	5e                   	pop    esi
c0015ee8:	c3                   	ret    
c0015ee9:	59                   	pop    ecx
c0015eea:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015eef:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ef4:	5b                   	pop    ebx
c0015ef5:	5e                   	pop    esi
c0015ef6:	c3                   	ret    

c0015ef7 <sysGetDiskVolumeLabel(regs*)>:
c0015ef7:	57                   	push   edi
c0015ef8:	56                   	push   esi
c0015ef9:	53                   	push   ebx
c0015efa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015efe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015f01:	83 fa 19             	cmp    edx,0x19
c0015f04:	77 38                	ja     c0015f3e <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f06:	8b 0c 95 a0 86 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7960]
c0015f0d:	85 c9                	test   ecx,ecx
c0015f0f:	74 2d                	je     c0015f3e <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f11:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015f14:	85 db                	test   ebx,ebx
c0015f16:	74 26                	je     c0015f3e <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f18:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015f1b:	85 f6                	test   esi,esi
c0015f1d:	74 1f                	je     c0015f3e <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f1f:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015f25:	85 c0                	test   eax,eax
c0015f27:	74 15                	je     c0015f3e <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f29:	83 ec 0c             	sub    esp,0xc
c0015f2c:	8b 38                	mov    edi,DWORD PTR [eax]
c0015f2e:	56                   	push   esi
c0015f2f:	53                   	push   ebx
c0015f30:	52                   	push   edx
c0015f31:	51                   	push   ecx
c0015f32:	50                   	push   eax
c0015f33:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015f36:	83 c4 20             	add    esp,0x20
c0015f39:	99                   	cdq    
c0015f3a:	5b                   	pop    ebx
c0015f3b:	5e                   	pop    esi
c0015f3c:	5f                   	pop    edi
c0015f3d:	c3                   	ret    
c0015f3e:	5b                   	pop    ebx
c0015f3f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015f44:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f49:	5e                   	pop    esi
c0015f4a:	5f                   	pop    edi
c0015f4b:	c3                   	ret    

c0015f4c <sysShutdown(regs*)>:
c0015f4c:	83 ec 0c             	sub    esp,0xc
c0015f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f53:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f56:	85 c0                	test   eax,eax
c0015f58:	74 18                	je     c0015f72 <sysShutdown(regs*)+0x26>
c0015f5a:	83 f8 01             	cmp    eax,0x1
c0015f5d:	74 38                	je     c0015f97 <sysShutdown(regs*)+0x4b>
c0015f5f:	83 f8 02             	cmp    eax,0x2
c0015f62:	74 24                	je     c0015f88 <sysShutdown(regs*)+0x3c>
c0015f64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f69:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f6e:	83 c4 0c             	add    esp,0xc
c0015f71:	c3                   	ret    
c0015f72:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0015f77:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f79:	6a 00                	push   0x0
c0015f7b:	6a 00                	push   0x0
c0015f7d:	6a 00                	push   0x0
c0015f7f:	50                   	push   eax
c0015f80:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f83:	83 c4 10             	add    esp,0x10
c0015f86:	eb dc                	jmp    c0015f64 <sysShutdown(regs*)+0x18>
c0015f88:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0015f8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f8f:	6a 00                	push   0x0
c0015f91:	6a 00                	push   0x0
c0015f93:	6a 01                	push   0x1
c0015f95:	eb e8                	jmp    c0015f7f <sysShutdown(regs*)+0x33>
c0015f97:	a1 20 87 02 c0       	mov    eax,ds:0xc0028720
c0015f9c:	85 c0                	test   eax,eax
c0015f9e:	74 02                	je     c0015fa2 <sysShutdown(regs*)+0x56>
c0015fa0:	ff d0                	call   eax
c0015fa2:	31 c0                	xor    eax,eax
c0015fa4:	31 d2                	xor    edx,edx
c0015fa6:	83 c4 0c             	add    esp,0xc
c0015fa9:	c3                   	ret    

c0015faa <sysCallRealpath(regs*)>:
c0015faa:	83 ec 0c             	sub    esp,0xc
c0015fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015fb4:	85 d2                	test   edx,edx
c0015fb6:	74 07                	je     c0015fbf <sysCallRealpath(regs*)+0x15>
c0015fb8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015fbb:	85 c0                	test   eax,eax
c0015fbd:	75 0b                	jne    c0015fca <sysCallRealpath(regs*)+0x20>
c0015fbf:	b8 01 00 00 00       	mov    eax,0x1
c0015fc4:	31 d2                	xor    edx,edx
c0015fc6:	83 c4 0c             	add    esp,0xc
c0015fc9:	c3                   	ret    
c0015fca:	51                   	push   ecx
c0015fcb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015fd1:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015fd4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015fda:	51                   	push   ecx
c0015fdb:	52                   	push   edx
c0015fdc:	50                   	push   eax
c0015fdd:	e8 de 70 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0015fe2:	83 c4 10             	add    esp,0x10
c0015fe5:	31 c0                	xor    eax,eax
c0015fe7:	31 d2                	xor    edx,edx
c0015fe9:	83 c4 0c             	add    esp,0xc
c0015fec:	c3                   	ret    

c0015fed <sysCallReadDir(regs*)>:
c0015fed:	53                   	push   ebx
c0015fee:	83 ec 18             	sub    esp,0x18
c0015ff1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ff5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015ff8:	83 f8 02             	cmp    eax,0x2
c0015ffb:	76 60                	jbe    c001605d <sysCallReadDir(regs*)+0x70>
c0015ffd:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0016004:	77 48                	ja     c001604e <sysCallReadDir(regs*)+0x61>
c0016006:	83 ec 0c             	sub    esp,0xc
c0016009:	50                   	push   eax
c001600a:	e8 74 58 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c001600f:	83 c4 10             	add    esp,0x10
c0016012:	85 c0                	test   eax,eax
c0016014:	74 38                	je     c001604e <sysCallReadDir(regs*)+0x61>
c0016016:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001601e:	83 ec 0c             	sub    esp,0xc
c0016021:	8b 10                	mov    edx,DWORD PTR [eax]
c0016023:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0016027:	51                   	push   ecx
c0016028:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001602b:	6a 00                	push   0x0
c001602d:	68 10 01 00 00       	push   0x110
c0016032:	50                   	push   eax
c0016033:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016036:	83 c4 20             	add    esp,0x20
c0016039:	85 c0                	test   eax,eax
c001603b:	74 29                	je     c0016066 <sysCallReadDir(regs*)+0x79>
c001603d:	83 f8 07             	cmp    eax,0x7
c0016040:	74 1b                	je     c001605d <sysCallReadDir(regs*)+0x70>
c0016042:	b8 02 00 00 00       	mov    eax,0x2
c0016047:	31 d2                	xor    edx,edx
c0016049:	83 c4 18             	add    esp,0x18
c001604c:	5b                   	pop    ebx
c001604d:	c3                   	ret    
c001604e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016053:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016058:	83 c4 18             	add    esp,0x18
c001605b:	5b                   	pop    ebx
c001605c:	c3                   	ret    
c001605d:	b8 01 00 00 00       	mov    eax,0x1
c0016062:	31 d2                	xor    edx,edx
c0016064:	eb e3                	jmp    c0016049 <sysCallReadDir(regs*)+0x5c>
c0016066:	31 c0                	xor    eax,eax
c0016068:	31 d2                	xor    edx,edx
c001606a:	eb dd                	jmp    c0016049 <sysCallReadDir(regs*)+0x5c>

c001606c <sysCallIsATTY(regs*)>:
c001606c:	83 ec 0c             	sub    esp,0xc
c001606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016073:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016076:	83 f8 02             	cmp    eax,0x2
c0016079:	76 07                	jbe    c0016082 <sysCallIsATTY(regs*)+0x16>
c001607b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016080:	75 26                	jne    c00160a8 <sysCallIsATTY(regs*)+0x3c>
c0016082:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016087:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001608a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016090:	85 c0                	test   eax,eax
c0016092:	74 24                	je     c00160b8 <sysCallIsATTY(regs*)+0x4c>
c0016094:	83 ec 0c             	sub    esp,0xc
c0016097:	8b 10                	mov    edx,DWORD PTR [eax]
c0016099:	50                   	push   eax
c001609a:	ff 12                	call   DWORD PTR [edx]
c001609c:	31 d2                	xor    edx,edx
c001609e:	0f b6 c0             	movzx  eax,al
c00160a1:	83 c4 10             	add    esp,0x10
c00160a4:	83 c4 0c             	add    esp,0xc
c00160a7:	c3                   	ret    
c00160a8:	83 ec 0c             	sub    esp,0xc
c00160ab:	50                   	push   eax
c00160ac:	e8 d2 57 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00160b1:	83 c4 10             	add    esp,0x10
c00160b4:	85 c0                	test   eax,eax
c00160b6:	75 dc                	jne    c0016094 <sysCallIsATTY(regs*)+0x28>
c00160b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00160c2:	83 c4 0c             	add    esp,0xc
c00160c5:	c3                   	ret    

c00160c6 <sysCallSeek(regs*)>:
c00160c6:	53                   	push   ebx
c00160c7:	83 ec 08             	sub    esp,0x8
c00160ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160ce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00160d1:	8d 50 fd             	lea    edx,[eax-0x3]
c00160d4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00160da:	77 32                	ja     c001610e <sysCallSeek(regs*)+0x48>
c00160dc:	83 ec 0c             	sub    esp,0xc
c00160df:	50                   	push   eax
c00160e0:	e8 9e 57 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00160e5:	83 c4 0c             	add    esp,0xc
c00160e8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00160eb:	31 db                	xor    ebx,ebx
c00160ed:	53                   	push   ebx
c00160ee:	51                   	push   ecx
c00160ef:	50                   	push   eax
c00160f0:	e8 f5 72 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00160f5:	83 c4 10             	add    esp,0x10
c00160f8:	85 c0                	test   eax,eax
c00160fa:	0f 95 c0             	setne  al
c00160fd:	31 d2                	xor    edx,edx
c00160ff:	0f b6 c0             	movzx  eax,al
c0016102:	f7 d8                	neg    eax
c0016104:	83 d2 00             	adc    edx,0x0
c0016107:	83 c4 08             	add    esp,0x8
c001610a:	f7 da                	neg    edx
c001610c:	5b                   	pop    ebx
c001610d:	c3                   	ret    
c001610e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016113:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016118:	83 c4 08             	add    esp,0x8
c001611b:	5b                   	pop    ebx
c001611c:	c3                   	ret    

c001611d <sysCallTell(regs*)>:
c001611d:	53                   	push   ebx
c001611e:	83 ec 08             	sub    esp,0x8
c0016121:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016125:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016128:	83 f8 02             	cmp    eax,0x2
c001612b:	76 4d                	jbe    c001617a <sysCallTell(regs*)+0x5d>
c001612d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016132:	76 19                	jbe    c001614d <sysCallTell(regs*)+0x30>
c0016134:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016137:	31 d2                	xor    edx,edx
c0016139:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001613f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016146:	31 c0                	xor    eax,eax
c0016148:	83 c4 08             	add    esp,0x8
c001614b:	5b                   	pop    ebx
c001614c:	c3                   	ret    
c001614d:	83 ec 0c             	sub    esp,0xc
c0016150:	50                   	push   eax
c0016151:	e8 2d 57 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c0016156:	5a                   	pop    edx
c0016157:	59                   	pop    ecx
c0016158:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001615b:	50                   	push   eax
c001615c:	e8 df 72 ff ff       	call   c000d440 <File::tell(unsigned long long*)>
c0016161:	83 c4 10             	add    esp,0x10
c0016164:	85 c0                	test   eax,eax
c0016166:	0f 95 c0             	setne  al
c0016169:	31 d2                	xor    edx,edx
c001616b:	0f b6 c0             	movzx  eax,al
c001616e:	f7 d8                	neg    eax
c0016170:	83 d2 00             	adc    edx,0x0
c0016173:	83 c4 08             	add    esp,0x8
c0016176:	f7 da                	neg    edx
c0016178:	5b                   	pop    ebx
c0016179:	c3                   	ret    
c001617a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001617f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016184:	83 c4 08             	add    esp,0x8
c0016187:	5b                   	pop    ebx
c0016188:	c3                   	ret    

c0016189 <sysCallSize(regs*)>:
c0016189:	53                   	push   ebx
c001618a:	83 ec 18             	sub    esp,0x18
c001618d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016191:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016194:	83 f8 02             	cmp    eax,0x2
c0016197:	76 53                	jbe    c00161ec <sysCallSize(regs*)+0x63>
c0016199:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001619e:	76 19                	jbe    c00161b9 <sysCallSize(regs*)+0x30>
c00161a0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00161a3:	31 d2                	xor    edx,edx
c00161a5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00161ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00161b2:	31 c0                	xor    eax,eax
c00161b4:	83 c4 18             	add    esp,0x18
c00161b7:	5b                   	pop    ebx
c00161b8:	c3                   	ret    
c00161b9:	83 ec 0c             	sub    esp,0xc
c00161bc:	50                   	push   eax
c00161bd:	e8 c1 56 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00161c2:	83 c4 0c             	add    esp,0xc
c00161c5:	8d 54 24 13          	lea    edx,[esp+0x13]
c00161c9:	52                   	push   edx
c00161ca:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00161cd:	50                   	push   eax
c00161ce:	e8 05 74 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c00161d3:	83 c4 10             	add    esp,0x10
c00161d6:	85 c0                	test   eax,eax
c00161d8:	0f 95 c0             	setne  al
c00161db:	31 d2                	xor    edx,edx
c00161dd:	0f b6 c0             	movzx  eax,al
c00161e0:	f7 d8                	neg    eax
c00161e2:	83 d2 00             	adc    edx,0x0
c00161e5:	83 c4 18             	add    esp,0x18
c00161e8:	f7 da                	neg    edx
c00161ea:	5b                   	pop    ebx
c00161eb:	c3                   	ret    
c00161ec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00161f1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00161f6:	83 c4 18             	add    esp,0x18
c00161f9:	5b                   	pop    ebx
c00161fa:	c3                   	ret    

c00161fb <sysCallSizeFromFilename(regs*)>:
c00161fb:	57                   	push   edi
c00161fc:	56                   	push   esi
c00161fd:	53                   	push   ebx
c00161fe:	83 ec 20             	sub    esp,0x20
c0016201:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016205:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016208:	83 fb 02             	cmp    ebx,0x2
c001620b:	0f 86 88 00 00 00    	jbe    c0016299 <sysCallSizeFromFilename(regs*)+0x9e>
c0016211:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016217:	76 1b                	jbe    c0016234 <sysCallSizeFromFilename(regs*)+0x39>
c0016219:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001621c:	31 d2                	xor    edx,edx
c001621e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016224:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001622b:	83 c4 20             	add    esp,0x20
c001622e:	31 c0                	xor    eax,eax
c0016230:	5b                   	pop    ebx
c0016231:	5e                   	pop    esi
c0016232:	5f                   	pop    edi
c0016233:	c3                   	ret    
c0016234:	83 ec 0c             	sub    esp,0xc
c0016237:	68 14 01 00 00       	push   0x114
c001623c:	e8 ce 37 ff ff       	call   c0009a0f <malloc>
c0016241:	83 c4 0c             	add    esp,0xc
c0016244:	89 c7                	mov    edi,eax
c0016246:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001624b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001624e:	53                   	push   ebx
c001624f:	57                   	push   edi
c0016250:	e8 15 70 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016255:	83 c4 0c             	add    esp,0xc
c0016258:	8d 44 24 23          	lea    eax,[esp+0x23]
c001625c:	50                   	push   eax
c001625d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016260:	57                   	push   edi
c0016261:	e8 72 73 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c0016266:	83 c4 10             	add    esp,0x10
c0016269:	85 ff                	test   edi,edi
c001626b:	74 14                	je     c0016281 <sysCallSizeFromFilename(regs*)+0x86>
c001626d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016271:	8b 17                	mov    edx,DWORD PTR [edi]
c0016273:	83 ec 0c             	sub    esp,0xc
c0016276:	57                   	push   edi
c0016277:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001627a:	83 c4 10             	add    esp,0x10
c001627d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016281:	85 c0                	test   eax,eax
c0016283:	0f 95 c0             	setne  al
c0016286:	31 d2                	xor    edx,edx
c0016288:	0f b6 c0             	movzx  eax,al
c001628b:	f7 d8                	neg    eax
c001628d:	83 d2 00             	adc    edx,0x0
c0016290:	83 c4 20             	add    esp,0x20
c0016293:	f7 da                	neg    edx
c0016295:	5b                   	pop    ebx
c0016296:	5e                   	pop    esi
c0016297:	5f                   	pop    edi
c0016298:	c3                   	ret    
c0016299:	83 c4 20             	add    esp,0x20
c001629c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162a1:	5b                   	pop    ebx
c00162a2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162a7:	5e                   	pop    esi
c00162a8:	5f                   	pop    edi
c00162a9:	c3                   	ret    

c00162aa <sysCallClose(regs*)>:
c00162aa:	53                   	push   ebx
c00162ab:	83 ec 08             	sub    esp,0x8
c00162ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00162b5:	83 f8 02             	cmp    eax,0x2
c00162b8:	76 41                	jbe    c00162fb <sysCallClose(regs*)+0x51>
c00162ba:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00162c0:	83 fa 01             	cmp    edx,0x1
c00162c3:	76 2d                	jbe    c00162f2 <sysCallClose(regs*)+0x48>
c00162c5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00162ca:	77 2f                	ja     c00162fb <sysCallClose(regs*)+0x51>
c00162cc:	83 ec 0c             	sub    esp,0xc
c00162cf:	50                   	push   eax
c00162d0:	e8 ae 55 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c00162d5:	89 c3                	mov    ebx,eax
c00162d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00162da:	e8 ab 70 ff ff       	call   c000d38a <File::close()>
c00162df:	83 c4 10             	add    esp,0x10
c00162e2:	85 db                	test   ebx,ebx
c00162e4:	74 0c                	je     c00162f2 <sysCallClose(regs*)+0x48>
c00162e6:	83 ec 0c             	sub    esp,0xc
c00162e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00162eb:	53                   	push   ebx
c00162ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162ef:	83 c4 10             	add    esp,0x10
c00162f2:	31 c0                	xor    eax,eax
c00162f4:	31 d2                	xor    edx,edx
c00162f6:	83 c4 08             	add    esp,0x8
c00162f9:	5b                   	pop    ebx
c00162fa:	c3                   	ret    
c00162fb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016300:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016305:	83 c4 08             	add    esp,0x8
c0016308:	5b                   	pop    ebx
c0016309:	c3                   	ret    

c001630a <sysCallOpenDir(regs*)>:
c001630a:	56                   	push   esi
c001630b:	53                   	push   ebx
c001630c:	53                   	push   ebx
c001630d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016311:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016314:	85 f6                	test   esi,esi
c0016316:	74 59                	je     c0016371 <sysCallOpenDir(regs*)+0x67>
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	68 14 01 00 00       	push   0x114
c0016320:	e8 ea 36 ff ff       	call   c0009a0f <malloc>
c0016325:	83 c4 0c             	add    esp,0xc
c0016328:	89 c6                	mov    esi,eax
c001632a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001632f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016332:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016335:	56                   	push   esi
c0016336:	e8 73 74 ff ff       	call   c000d7ae <Directory::Directory(char const*, Process*)>
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	85 f6                	test   esi,esi
c0016340:	74 2f                	je     c0016371 <sysCallOpenDir(regs*)+0x67>
c0016342:	83 ec 0c             	sub    esp,0xc
c0016345:	56                   	push   esi
c0016346:	e8 25 75 ff ff       	call   c000d870 <Directory::open()>
c001634b:	83 c4 10             	add    esp,0x10
c001634e:	85 c0                	test   eax,eax
c0016350:	75 1f                	jne    c0016371 <sysCallOpenDir(regs*)+0x67>
c0016352:	83 ec 0c             	sub    esp,0xc
c0016355:	56                   	push   esi
c0016356:	e8 33 52 ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c001635b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001635e:	83 c4 10             	add    esp,0x10
c0016361:	89 02                	mov    DWORD PTR [edx],eax
c0016363:	c1 f8 1f             	sar    eax,0x1f
c0016366:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016369:	31 c0                	xor    eax,eax
c001636b:	59                   	pop    ecx
c001636c:	31 d2                	xor    edx,edx
c001636e:	5b                   	pop    ebx
c001636f:	5e                   	pop    esi
c0016370:	c3                   	ret    
c0016371:	59                   	pop    ecx
c0016372:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016377:	ba ff ff ff ff       	mov    edx,0xffffffff
c001637c:	5b                   	pop    ebx
c001637d:	5e                   	pop    esi
c001637e:	c3                   	ret    

c001637f <sysCallCloseDir(regs*)>:
c001637f:	53                   	push   ebx
c0016380:	83 ec 08             	sub    esp,0x8
c0016383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016387:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001638a:	8d 50 fd             	lea    edx,[eax-0x3]
c001638d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016393:	77 2f                	ja     c00163c4 <sysCallCloseDir(regs*)+0x45>
c0016395:	83 ec 0c             	sub    esp,0xc
c0016398:	50                   	push   eax
c0016399:	e8 e5 54 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c001639e:	89 c3                	mov    ebx,eax
c00163a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00163a3:	e8 24 75 ff ff       	call   c000d8cc <Directory::close()>
c00163a8:	83 c4 10             	add    esp,0x10
c00163ab:	85 db                	test   ebx,ebx
c00163ad:	74 0c                	je     c00163bb <sysCallCloseDir(regs*)+0x3c>
c00163af:	83 ec 0c             	sub    esp,0xc
c00163b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163b4:	53                   	push   ebx
c00163b5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163b8:	83 c4 10             	add    esp,0x10
c00163bb:	31 c0                	xor    eax,eax
c00163bd:	31 d2                	xor    edx,edx
c00163bf:	83 c4 08             	add    esp,0x8
c00163c2:	5b                   	pop    ebx
c00163c3:	c3                   	ret    
c00163c4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00163c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00163ce:	83 c4 08             	add    esp,0x8
c00163d1:	5b                   	pop    ebx
c00163d2:	c3                   	ret    

c00163d3 <sysCallMakeDir(regs*)>:
c00163d3:	56                   	push   esi
c00163d4:	53                   	push   ebx
c00163d5:	83 ec 10             	sub    esp,0x10
c00163d8:	68 14 01 00 00       	push   0x114
c00163dd:	e8 2d 36 ff ff       	call   c0009a0f <malloc>
c00163e2:	83 c4 0c             	add    esp,0xc
c00163e5:	89 c3                	mov    ebx,eax
c00163e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163ec:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00163ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163f3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00163f6:	53                   	push   ebx
c00163f7:	e8 b2 73 ff ff       	call   c000d7ae <Directory::Directory(char const*, Process*)>
c00163fc:	83 c4 10             	add    esp,0x10
c00163ff:	85 db                	test   ebx,ebx
c0016401:	74 32                	je     c0016435 <sysCallMakeDir(regs*)+0x62>
c0016403:	83 ec 0c             	sub    esp,0xc
c0016406:	53                   	push   ebx
c0016407:	e8 44 76 ff ff       	call   c000da50 <Directory::create()>
c001640c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001640f:	89 c6                	mov    esi,eax
c0016411:	e8 b6 74 ff ff       	call   c000d8cc <Directory::close()>
c0016416:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016418:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001641b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001641e:	83 c4 10             	add    esp,0x10
c0016421:	31 c0                	xor    eax,eax
c0016423:	59                   	pop    ecx
c0016424:	85 f6                	test   esi,esi
c0016426:	5b                   	pop    ebx
c0016427:	0f 95 c0             	setne  al
c001642a:	5e                   	pop    esi
c001642b:	31 d2                	xor    edx,edx
c001642d:	f7 d8                	neg    eax
c001642f:	83 d2 00             	adc    edx,0x0
c0016432:	f7 da                	neg    edx
c0016434:	c3                   	ret    
c0016435:	59                   	pop    ecx
c0016436:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001643b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016440:	5b                   	pop    ebx
c0016441:	5e                   	pop    esi
c0016442:	c3                   	ret    

c0016443 <sysCallWait(regs*)>:
c0016443:	83 ec 10             	sub    esp,0x10
c0016446:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001644a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001644d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016450:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016453:	e8 fc 24 00 00       	call   c0018954 <waitTask(int, int*, int)>
c0016458:	83 c4 1c             	add    esp,0x1c
c001645b:	99                   	cdq    
c001645c:	c3                   	ret    

c001645d <sysCallNotImpl(regs*)>:
c001645d:	83 ec 18             	sub    esp,0x18
c0016460:	68 d1 5e 02 c0       	push   0xc0025ed1
c0016465:	e8 5d e5 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001646a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001646f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016474:	83 c4 1c             	add    esp,0x1c
c0016477:	c3                   	ret    

c0016478 <sysPanic(regs*)>:
c0016478:	83 ec 18             	sub    esp,0x18
c001647b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001647f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016482:	e8 40 e5 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0016487:	b8 01 00 00 00       	mov    eax,0x1
c001648c:	31 d2                	xor    edx,edx
c001648e:	83 c4 1c             	add    esp,0x1c
c0016491:	c3                   	ret    

c0016492 <sysCallRmdir(regs*)>:
c0016492:	56                   	push   esi
c0016493:	53                   	push   ebx
c0016494:	83 ec 20             	sub    esp,0x20
c0016497:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001649b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001649e:	68 14 01 00 00       	push   0x114
c00164a3:	e8 67 35 ff ff       	call   c0009a0f <malloc>
c00164a8:	83 c4 0c             	add    esp,0xc
c00164ab:	89 c3                	mov    ebx,eax
c00164ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00164b5:	56                   	push   esi
c00164b6:	53                   	push   ebx
c00164b7:	e8 ae 6d ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00164bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164bf:	e8 e0 6f ff ff       	call   c000d4a4 <File::unlink()>
c00164c4:	83 c4 10             	add    esp,0x10
c00164c7:	85 db                	test   ebx,ebx
c00164c9:	74 14                	je     c00164df <sysCallRmdir(regs*)+0x4d>
c00164cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c00164d1:	83 ec 0c             	sub    esp,0xc
c00164d4:	53                   	push   ebx
c00164d5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00164d8:	83 c4 10             	add    esp,0x10
c00164db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164df:	85 c0                	test   eax,eax
c00164e1:	0f 95 c0             	setne  al
c00164e4:	31 d2                	xor    edx,edx
c00164e6:	0f b6 c0             	movzx  eax,al
c00164e9:	f7 d8                	neg    eax
c00164eb:	83 d2 00             	adc    edx,0x0
c00164ee:	83 c4 14             	add    esp,0x14
c00164f1:	f7 da                	neg    edx
c00164f3:	5b                   	pop    ebx
c00164f4:	5e                   	pop    esi
c00164f5:	c3                   	ret    

c00164f6 <sysCallUnlink(regs*)>:
c00164f6:	56                   	push   esi
c00164f7:	53                   	push   ebx
c00164f8:	83 ec 20             	sub    esp,0x20
c00164fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00164ff:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016502:	68 14 01 00 00       	push   0x114
c0016507:	e8 03 35 ff ff       	call   c0009a0f <malloc>
c001650c:	83 c4 0c             	add    esp,0xc
c001650f:	89 c3                	mov    ebx,eax
c0016511:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016516:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016519:	56                   	push   esi
c001651a:	53                   	push   ebx
c001651b:	e8 4a 6d ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016520:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016523:	e8 7c 6f ff ff       	call   c000d4a4 <File::unlink()>
c0016528:	83 c4 10             	add    esp,0x10
c001652b:	85 db                	test   ebx,ebx
c001652d:	74 14                	je     c0016543 <sysCallUnlink(regs*)+0x4d>
c001652f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016533:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016535:	83 ec 0c             	sub    esp,0xc
c0016538:	53                   	push   ebx
c0016539:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001653c:	83 c4 10             	add    esp,0x10
c001653f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016543:	85 c0                	test   eax,eax
c0016545:	0f 95 c0             	setne  al
c0016548:	31 d2                	xor    edx,edx
c001654a:	0f b6 c0             	movzx  eax,al
c001654d:	f7 d8                	neg    eax
c001654f:	83 d2 00             	adc    edx,0x0
c0016552:	83 c4 14             	add    esp,0x14
c0016555:	f7 da                	neg    edx
c0016557:	5b                   	pop    ebx
c0016558:	5e                   	pop    esi
c0016559:	c3                   	ret    

c001655a <sysCallGetArgv(regs*)>:
c001655a:	83 ec 0c             	sub    esp,0xc
c001655d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016561:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016564:	85 c0                	test   eax,eax
c0016566:	78 2b                	js     c0016593 <sysCallGetArgv(regs*)+0x39>
c0016568:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001656e:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016571:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016577:	7d 1a                	jge    c0016593 <sysCallGetArgv(regs*)+0x39>
c0016579:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016580:	85 c0                	test   eax,eax
c0016582:	74 17                	je     c001659b <sysCallGetArgv(regs*)+0x41>
c0016584:	83 ec 08             	sub    esp,0x8
c0016587:	50                   	push   eax
c0016588:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001658b:	e8 b0 a1 fe ff       	call   c0000740 <strcpy>
c0016590:	83 c4 10             	add    esp,0x10
c0016593:	31 c0                	xor    eax,eax
c0016595:	31 d2                	xor    edx,edx
c0016597:	83 c4 0c             	add    esp,0xc
c001659a:	c3                   	ret    
c001659b:	b8 01 00 00 00       	mov    eax,0x1
c00165a0:	31 d2                	xor    edx,edx
c00165a2:	83 c4 0c             	add    esp,0xc
c00165a5:	c3                   	ret    

c00165a6 <sysCallTTYName(regs*)>:
c00165a6:	56                   	push   esi
c00165a7:	53                   	push   ebx
c00165a8:	53                   	push   ebx
c00165a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165ad:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00165b0:	85 c0                	test   eax,eax
c00165b2:	74 5f                	je     c0016613 <sysCallTTYName(regs*)+0x6d>
c00165b4:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00165b7:	83 f8 02             	cmp    eax,0x2
c00165ba:	77 3e                	ja     c00165fa <sysCallTTYName(regs*)+0x54>
c00165bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165c1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00165c4:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c00165ca:	85 db                	test   ebx,ebx
c00165cc:	74 45                	je     c0016613 <sysCallTTYName(regs*)+0x6d>
c00165ce:	83 ec 0c             	sub    esp,0xc
c00165d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165d3:	53                   	push   ebx
c00165d4:	ff 10                	call   DWORD PTR [eax]
c00165d6:	83 c4 10             	add    esp,0x10
c00165d9:	84 c0                	test   al,al
c00165db:	74 41                	je     c001661e <sysCallTTYName(regs*)+0x78>
c00165dd:	83 ec 08             	sub    esp,0x8
c00165e0:	81 c3 82 00 00 00    	add    ebx,0x82
c00165e6:	53                   	push   ebx
c00165e7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00165ea:	e8 51 a1 fe ff       	call   c0000740 <strcpy>
c00165ef:	83 c4 10             	add    esp,0x10
c00165f2:	31 c0                	xor    eax,eax
c00165f4:	59                   	pop    ecx
c00165f5:	31 d2                	xor    edx,edx
c00165f7:	5b                   	pop    ebx
c00165f8:	5e                   	pop    esi
c00165f9:	c3                   	ret    
c00165fa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00165ff:	74 bb                	je     c00165bc <sysCallTTYName(regs*)+0x16>
c0016601:	83 ec 0c             	sub    esp,0xc
c0016604:	50                   	push   eax
c0016605:	e8 79 52 ff ff       	call   c000b883 <getFromFileDescriptor(int)>
c001660a:	83 c4 10             	add    esp,0x10
c001660d:	89 c3                	mov    ebx,eax
c001660f:	85 db                	test   ebx,ebx
c0016611:	75 bb                	jne    c00165ce <sysCallTTYName(regs*)+0x28>
c0016613:	59                   	pop    ecx
c0016614:	b8 01 00 00 00       	mov    eax,0x1
c0016619:	31 d2                	xor    edx,edx
c001661b:	5b                   	pop    ebx
c001661c:	5e                   	pop    esi
c001661d:	c3                   	ret    
c001661e:	59                   	pop    ecx
c001661f:	b8 02 00 00 00       	mov    eax,0x2
c0016624:	31 d2                	xor    edx,edx
c0016626:	5b                   	pop    ebx
c0016627:	5e                   	pop    esi
c0016628:	c3                   	ret    

c0016629 <sysCallUSleep(regs*)>:
c0016629:	83 ec 1c             	sub    esp,0x1c
c001662c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016630:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016633:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016636:	6a 00                	push   0x0
c0016638:	6a 64                	push   0x64
c001663a:	52                   	push   edx
c001663b:	50                   	push   eax
c001663c:	e8 b3 c1 00 00       	call   c00227f4 <__udivdi3>
c0016641:	83 c4 14             	add    esp,0x14
c0016644:	50                   	push   eax
c0016645:	e8 da 23 00 00       	call   c0018a24 <milliTenthSleep(unsigned int)>
c001664a:	31 c0                	xor    eax,eax
c001664c:	31 d2                	xor    edx,edx
c001664e:	83 c4 1c             	add    esp,0x1c
c0016651:	c3                   	ret    

c0016652 <sysCallSpawn(regs*)>:
c0016652:	56                   	push   esi
c0016653:	53                   	push   ebx
c0016654:	50                   	push   eax
c0016655:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016659:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001665c:	85 c0                	test   eax,eax
c001665e:	75 08                	jne    c0016668 <sysCallSpawn(regs*)+0x16>
c0016660:	59                   	pop    ecx
c0016661:	31 c0                	xor    eax,eax
c0016663:	31 d2                	xor    edx,edx
c0016665:	5b                   	pop    ebx
c0016666:	5e                   	pop    esi
c0016667:	c3                   	ret    
c0016668:	83 ec 0c             	sub    esp,0xc
c001666b:	68 1f 07 00 00       	push   0x71f
c0016670:	e8 9a 33 ff ff       	call   c0009a0f <malloc>
c0016675:	83 c4 10             	add    esp,0x10
c0016678:	89 c6                	mov    esi,eax
c001667a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001667d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016680:	85 c0                	test   eax,eax
c0016682:	75 32                	jne    c00166b6 <sysCallSpawn(regs*)+0x64>
c0016684:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016689:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001668c:	52                   	push   edx
c001668d:	50                   	push   eax
c001668e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016691:	56                   	push   esi
c0016692:	e8 85 1a 00 00       	call   c001811c <Process::Process(char const*, Process*, char**)>
c0016697:	83 c4 10             	add    esp,0x10
c001669a:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00166a1:	75 bd                	jne    c0016660 <sysCallSpawn(regs*)+0xe>
c00166a3:	83 ec 0c             	sub    esp,0xc
c00166a6:	56                   	push   esi
c00166a7:	e8 5c 1f 00 00       	call   c0018608 <Process::createUserThread()>
c00166ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00166ae:	83 c4 10             	add    esp,0x10
c00166b1:	99                   	cdq    
c00166b2:	59                   	pop    ecx
c00166b3:	5b                   	pop    ebx
c00166b4:	5e                   	pop    esi
c00166b5:	c3                   	ret    
c00166b6:	31 c0                	xor    eax,eax
c00166b8:	eb d2                	jmp    c001668c <sysCallSpawn(regs*)+0x3a>

c00166ba <sysCallGetEnv(regs*)>:
c00166ba:	57                   	push   edi
c00166bb:	56                   	push   esi
c00166bc:	53                   	push   ebx
c00166bd:	83 ec 1c             	sub    esp,0x1c
c00166c0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00166c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00166cc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00166cf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00166d2:	e8 3c e2 ff ff       	call   c0014913 <Krnl::getProcessTotalEnvCount(Process*)>
c00166d7:	83 c4 10             	add    esp,0x10
c00166da:	39 c7                	cmp    edi,eax
c00166dc:	7c 14                	jl     c00166f2 <sysCallGetEnv(regs*)+0x38>
c00166de:	85 f6                	test   esi,esi
c00166e0:	75 0b                	jne    c00166ed <sysCallGetEnv(regs*)+0x33>
c00166e2:	83 c4 10             	add    esp,0x10
c00166e5:	31 c0                	xor    eax,eax
c00166e7:	5b                   	pop    ebx
c00166e8:	31 d2                	xor    edx,edx
c00166ea:	5e                   	pop    esi
c00166eb:	5f                   	pop    edi
c00166ec:	c3                   	ret    
c00166ed:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00166f0:	eb f0                	jmp    c00166e2 <sysCallGetEnv(regs*)+0x28>
c00166f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00166f6:	52                   	push   edx
c00166f7:	57                   	push   edi
c00166f8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166fe:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016701:	50                   	push   eax
c0016702:	e8 2c e2 ff ff       	call   c0014933 <Krnl::getProcessEnvPair(Process*, int)>
c0016707:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001670a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001670e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016712:	83 c4 0c             	add    esp,0xc
c0016715:	85 c9                	test   ecx,ecx
c0016717:	75 23                	jne    c001673c <sysCallGetEnv(regs*)+0x82>
c0016719:	83 ec 0c             	sub    esp,0xc
c001671c:	50                   	push   eax
c001671d:	e8 7e 9f fe ff       	call   c00006a0 <strlen>
c0016722:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016725:	89 c3                	mov    ebx,eax
c0016727:	e8 74 9f fe ff       	call   c00006a0 <strlen>
c001672c:	83 c4 10             	add    esp,0x10
c001672f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016733:	83 c4 10             	add    esp,0x10
c0016736:	31 d2                	xor    edx,edx
c0016738:	5b                   	pop    ebx
c0016739:	5e                   	pop    esi
c001673a:	5f                   	pop    edi
c001673b:	c3                   	ret    
c001673c:	83 ec 08             	sub    esp,0x8
c001673f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016742:	50                   	push   eax
c0016743:	56                   	push   esi
c0016744:	e8 f7 9f fe ff       	call   c0000740 <strcpy>
c0016749:	58                   	pop    eax
c001674a:	5a                   	pop    edx
c001674b:	68 eb 5e 02 c0       	push   0xc0025eeb
c0016750:	56                   	push   esi
c0016751:	e8 2a a1 fe ff       	call   c0000880 <strcat>
c0016756:	59                   	pop    ecx
c0016757:	5b                   	pop    ebx
c0016758:	57                   	push   edi
c0016759:	56                   	push   esi
c001675a:	e8 21 a1 fe ff       	call   c0000880 <strcat>
c001675f:	83 c4 10             	add    esp,0x10
c0016762:	e9 7b ff ff ff       	jmp    c00166e2 <sysCallGetEnv(regs*)+0x28>

c0016767 <sysAppSettings(regs*)>:
c0016767:	57                   	push   edi
c0016768:	56                   	push   esi
c0016769:	56                   	push   esi
c001676a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001676e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016771:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016777:	25 e0 1f 00 00       	and    eax,0x1fe0
c001677c:	66 3d c0 09          	cmp    ax,0x9c0
c0016780:	75 2e                	jne    c00167b0 <sysAppSettings(regs*)+0x49>
c0016782:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016788:	83 e0 1f             	and    eax,0x1f
c001678b:	3c 01                	cmp    al,0x1
c001678d:	74 2c                	je     c00167bb <sysAppSettings(regs*)+0x54>
c001678f:	3c 07                	cmp    al,0x7
c0016791:	0f 84 b3 00 00 00    	je     c001684a <sysAppSettings(regs*)+0xe3>
c0016797:	84 c0                	test   al,al
c0016799:	0f 84 d2 00 00 00    	je     c0016871 <sysAppSettings(regs*)+0x10a>
c001679f:	3c 08                	cmp    al,0x8
c00167a1:	74 63                	je     c0016806 <sysAppSettings(regs*)+0x9f>
c00167a3:	59                   	pop    ecx
c00167a4:	0f b6 c0             	movzx  eax,al
c00167a7:	5e                   	pop    esi
c00167a8:	05 e8 03 00 00       	add    eax,0x3e8
c00167ad:	5f                   	pop    edi
c00167ae:	99                   	cdq    
c00167af:	c3                   	ret    
c00167b0:	b8 01 00 00 00       	mov    eax,0x1
c00167b5:	59                   	pop    ecx
c00167b6:	31 d2                	xor    edx,edx
c00167b8:	5e                   	pop    esi
c00167b9:	5f                   	pop    edi
c00167ba:	c3                   	ret    
c00167bb:	50                   	push   eax
c00167bc:	68 00 01 00 00       	push   0x100
c00167c1:	6a 00                	push   0x0
c00167c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167cb:	83 c0 0c             	add    eax,0xc
c00167ce:	50                   	push   eax
c00167cf:	e8 b0 9e fe ff       	call   c0000684 <memset>
c00167d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167d9:	b9 ff 00 00 00       	mov    ecx,0xff
c00167de:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00167e1:	83 c7 0c             	add    edi,0xc
c00167e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00167e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167eb:	5a                   	pop    edx
c00167ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167ef:	59                   	pop    ecx
c00167f0:	8d 50 0c             	lea    edx,[eax+0xc]
c00167f3:	52                   	push   edx
c00167f4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00167fa:	e8 a9 41 ff ff       	call   c000a9a8 <VgaText::setTitle(char*)>
c00167ff:	83 c4 10             	add    esp,0x10
c0016802:	31 c0                	xor    eax,eax
c0016804:	eb af                	jmp    c00167b5 <sysAppSettings(regs*)+0x4e>
c0016806:	83 ec 08             	sub    esp,0x8
c0016809:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001680f:	83 e0 0f             	and    eax,0xf
c0016812:	50                   	push   eax
c0016813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016818:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001681b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016821:	e8 72 41 ff ff       	call   c000a998 <VgaText::setTitleColour(VgaColour)>
c0016826:	5f                   	pop    edi
c0016827:	58                   	pop    eax
c0016828:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001682e:	c1 e8 04             	shr    eax,0x4
c0016831:	83 e0 0f             	and    eax,0xf
c0016834:	50                   	push   eax
c0016835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001683a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001683d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016843:	e8 40 41 ff ff       	call   c000a988 <VgaText::setTitleTextColour(VgaColour)>
c0016848:	eb b5                	jmp    c00167ff <sysAppSettings(regs*)+0x98>
c001684a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001684f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016852:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016858:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001685e:	c0 e8 06             	shr    al,0x6
c0016861:	83 e0 01             	and    eax,0x1
c0016864:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001686a:	31 c0                	xor    eax,eax
c001686c:	e9 44 ff ff ff       	jmp    c00167b5 <sysAppSettings(regs*)+0x4e>
c0016871:	b8 02 00 00 00       	mov    eax,0x2
c0016876:	e9 3a ff ff ff       	jmp    c00167b5 <sysAppSettings(regs*)+0x4e>

c001687b <sysSetFatAttrib(regs*)>:
c001687b:	57                   	push   edi
c001687c:	56                   	push   esi
c001687d:	53                   	push   ebx
c001687e:	83 ec 1c             	sub    esp,0x1c
c0016881:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016885:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016888:	68 14 01 00 00       	push   0x114
c001688d:	e8 7d 31 ff ff       	call   c0009a0f <malloc>
c0016892:	83 c4 0c             	add    esp,0xc
c0016895:	89 c3                	mov    ebx,eax
c0016897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001689c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001689f:	57                   	push   edi
c00168a0:	53                   	push   ebx
c00168a1:	e8 c4 69 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00168a6:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00168a9:	83 c4 0c             	add    esp,0xc
c00168ac:	0f b6 d4             	movzx  edx,ah
c00168af:	0f b6 c0             	movzx  eax,al
c00168b2:	52                   	push   edx
c00168b3:	50                   	push   eax
c00168b4:	53                   	push   ebx
c00168b5:	e8 84 6c ff ff       	call   c000d53e <File::chfatattr(unsigned char, unsigned char)>
c00168ba:	83 c4 10             	add    esp,0x10
c00168bd:	85 db                	test   ebx,ebx
c00168bf:	74 14                	je     c00168d5 <sysSetFatAttrib(regs*)+0x5a>
c00168c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00168c5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00168c7:	83 ec 0c             	sub    esp,0xc
c00168ca:	53                   	push   ebx
c00168cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00168ce:	83 c4 10             	add    esp,0x10
c00168d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00168d5:	85 c0                	test   eax,eax
c00168d7:	0f 95 c0             	setne  al
c00168da:	31 d2                	xor    edx,edx
c00168dc:	0f b6 c0             	movzx  eax,al
c00168df:	f7 d8                	neg    eax
c00168e1:	83 d2 00             	adc    edx,0x0
c00168e4:	83 c4 10             	add    esp,0x10
c00168e7:	f7 da                	neg    edx
c00168e9:	5b                   	pop    ebx
c00168ea:	5e                   	pop    esi
c00168eb:	5f                   	pop    edi
c00168ec:	c3                   	ret    

c00168ed <sysPipe(regs*)>:
c00168ed:	57                   	push   edi
c00168ee:	56                   	push   esi
c00168ef:	53                   	push   ebx
c00168f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f4:	83 ec 0c             	sub    esp,0xc
c00168f7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00168fa:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00168fd:	6a 20                	push   0x20
c00168ff:	e8 0b 31 ff ff       	call   c0009a0f <malloc>
c0016904:	89 c3                	mov    ebx,eax
c0016906:	58                   	pop    eax
c0016907:	5a                   	pop    edx
c0016908:	68 00 50 00 00       	push   0x5000
c001690d:	53                   	push   ebx
c001690e:	e8 0d 3e ff ff       	call   c000a720 <Pipe::Pipe(int)>
c0016913:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016916:	e8 73 4c ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c001691b:	89 07                	mov    DWORD PTR [edi],eax
c001691d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016920:	e8 69 4c ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	89 06                	mov    DWORD PTR [esi],eax
c001692a:	31 d2                	xor    edx,edx
c001692c:	5b                   	pop    ebx
c001692d:	31 c0                	xor    eax,eax
c001692f:	5e                   	pop    esi
c0016930:	5f                   	pop    edi
c0016931:	c3                   	ret    

c0016932 <sysGetUnixTime(regs*)>:
c0016932:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0016937:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001693d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016941:	e9 10 74 ff ff       	jmp    c000dd56 <Clock::timeInSecondsLocal()>

c0016946 <string_ends_with(char const*, char const*)>:
c0016946:	57                   	push   edi
c0016947:	56                   	push   esi
c0016948:	53                   	push   ebx
c0016949:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001694d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016951:	83 ec 0c             	sub    esp,0xc
c0016954:	53                   	push   ebx
c0016955:	e8 46 9d fe ff       	call   c00006a0 <strlen>
c001695a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001695d:	89 c6                	mov    esi,eax
c001695f:	e8 3c 9d fe ff       	call   c00006a0 <strlen>
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	39 c6                	cmp    esi,eax
c0016969:	7d 06                	jge    c0016971 <string_ends_with(char const*, char const*)+0x2b>
c001696b:	5b                   	pop    ebx
c001696c:	31 c0                	xor    eax,eax
c001696e:	5e                   	pop    esi
c001696f:	5f                   	pop    edi
c0016970:	c3                   	ret    
c0016971:	83 ec 08             	sub    esp,0x8
c0016974:	29 c6                	sub    esi,eax
c0016976:	57                   	push   edi
c0016977:	01 f3                	add    ebx,esi
c0016979:	53                   	push   ebx
c001697a:	e8 4d 9e fe ff       	call   c00007cc <strcmp>
c001697f:	83 c4 10             	add    esp,0x10
c0016982:	85 c0                	test   eax,eax
c0016984:	5b                   	pop    ebx
c0016985:	0f 94 c0             	sete   al
c0016988:	5e                   	pop    esi
c0016989:	0f b6 c0             	movzx  eax,al
c001698c:	5f                   	pop    edi
c001698d:	c3                   	ret    

c001698e <sysCallOpen(regs*)>:
c001698e:	56                   	push   esi
c001698f:	53                   	push   ebx
c0016990:	81 ec 04 01 00 00    	sub    esp,0x104
c0016996:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001699d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00169a0:	85 c9                	test   ecx,ecx
c00169a2:	0f 84 ad 01 00 00    	je     c0016b55 <sysCallOpen(regs*)+0x1c7>
c00169a8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00169ab:	85 c0                	test   eax,eax
c00169ad:	0f 84 a2 01 00 00    	je     c0016b55 <sysCallOpen(regs*)+0x1c7>
c00169b3:	52                   	push   edx
c00169b4:	68 ed 5e 02 c0       	push   0xc0025eed
c00169b9:	50                   	push   eax
c00169ba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00169be:	56                   	push   esi
c00169bf:	e8 fc 66 ff ff       	call   c000d0c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00169c4:	89 34 24             	mov    DWORD PTR [esp],esi
c00169c7:	e8 d4 9c fe ff       	call   c00006a0 <strlen>
c00169cc:	83 c4 10             	add    esp,0x10
c00169cf:	48                   	dec    eax
c00169d0:	74 1d                	je     c00169ef <sysCallOpen(regs*)+0x61>
c00169d2:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00169d5:	eb 0f                	jmp    c00169e6 <sysCallOpen(regs*)+0x58>
c00169d7:	80 fa 3a             	cmp    dl,0x3a
c00169da:	74 0f                	je     c00169eb <sysCallOpen(regs*)+0x5d>
c00169dc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00169e0:	48                   	dec    eax
c00169e1:	74 0c                	je     c00169ef <sysCallOpen(regs*)+0x61>
c00169e3:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00169e6:	80 fa 2e             	cmp    dl,0x2e
c00169e9:	75 ec                	jne    c00169d7 <sysCallOpen(regs*)+0x49>
c00169eb:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00169ef:	83 ec 08             	sub    esp,0x8
c00169f2:	68 f1 5e 02 c0       	push   0xc0025ef1
c00169f7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169fa:	e8 47 ff ff ff       	call   c0016946 <string_ends_with(char const*, char const*)>
c00169ff:	83 c4 10             	add    esp,0x10
c0016a02:	85 c0                	test   eax,eax
c0016a04:	74 1d                	je     c0016a23 <sysCallOpen(regs*)+0x95>
c0016a06:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a09:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016a0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016a16:	81 c4 04 01 00 00    	add    esp,0x104
c0016a1c:	31 c0                	xor    eax,eax
c0016a1e:	31 d2                	xor    edx,edx
c0016a20:	5b                   	pop    ebx
c0016a21:	5e                   	pop    esi
c0016a22:	c3                   	ret    
c0016a23:	83 ec 08             	sub    esp,0x8
c0016a26:	68 f6 5e 02 c0       	push   0xc0025ef6
c0016a2b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a2e:	e8 13 ff ff ff       	call   c0016946 <string_ends_with(char const*, char const*)>
c0016a33:	83 c4 10             	add    esp,0x10
c0016a36:	85 c0                	test   eax,eax
c0016a38:	75 cc                	jne    c0016a06 <sysCallOpen(regs*)+0x78>
c0016a3a:	83 ec 08             	sub    esp,0x8
c0016a3d:	68 f2 5e 02 c0       	push   0xc0025ef2
c0016a42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a45:	e8 82 9d fe ff       	call   c00007cc <strcmp>
c0016a4a:	83 c4 10             	add    esp,0x10
c0016a4d:	85 c0                	test   eax,eax
c0016a4f:	74 b5                	je     c0016a06 <sysCallOpen(regs*)+0x78>
c0016a51:	83 ec 08             	sub    esp,0x8
c0016a54:	68 f1 5e 02 c0       	push   0xc0025ef1
c0016a59:	56                   	push   esi
c0016a5a:	e8 e7 fe ff ff       	call   c0016946 <string_ends_with(char const*, char const*)>
c0016a5f:	83 c4 10             	add    esp,0x10
c0016a62:	85 c0                	test   eax,eax
c0016a64:	75 a0                	jne    c0016a06 <sysCallOpen(regs*)+0x78>
c0016a66:	83 ec 08             	sub    esp,0x8
c0016a69:	68 fb 5e 02 c0       	push   0xc0025efb
c0016a6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a71:	e8 d0 fe ff ff       	call   c0016946 <string_ends_with(char const*, char const*)>
c0016a76:	83 c4 10             	add    esp,0x10
c0016a79:	85 c0                	test   eax,eax
c0016a7b:	0f 85 e7 00 00 00    	jne    c0016b68 <sysCallOpen(regs*)+0x1da>
c0016a81:	83 ec 08             	sub    esp,0x8
c0016a84:	68 00 5f 02 c0       	push   0xc0025f00
c0016a89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016a8c:	e8 b5 fe ff ff       	call   c0016946 <string_ends_with(char const*, char const*)>
c0016a91:	83 c4 10             	add    esp,0x10
c0016a94:	85 c0                	test   eax,eax
c0016a96:	0f 85 cc 00 00 00    	jne    c0016b68 <sysCallOpen(regs*)+0x1da>
c0016a9c:	83 ec 08             	sub    esp,0x8
c0016a9f:	68 fc 5e 02 c0       	push   0xc0025efc
c0016aa4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016aa7:	e8 20 9d fe ff       	call   c00007cc <strcmp>
c0016aac:	83 c4 10             	add    esp,0x10
c0016aaf:	85 c0                	test   eax,eax
c0016ab1:	0f 84 b1 00 00 00    	je     c0016b68 <sysCallOpen(regs*)+0x1da>
c0016ab7:	83 ec 08             	sub    esp,0x8
c0016aba:	68 fb 5e 02 c0       	push   0xc0025efb
c0016abf:	56                   	push   esi
c0016ac0:	e8 81 fe ff ff       	call   c0016946 <string_ends_with(char const*, char const*)>
c0016ac5:	83 c4 10             	add    esp,0x10
c0016ac8:	85 c0                	test   eax,eax
c0016aca:	0f 85 98 00 00 00    	jne    c0016b68 <sysCallOpen(regs*)+0x1da>
c0016ad0:	83 ec 0c             	sub    esp,0xc
c0016ad3:	68 14 01 00 00       	push   0x114
c0016ad8:	e8 32 2f ff ff       	call   c0009a0f <malloc>
c0016add:	83 c4 0c             	add    esp,0xc
c0016ae0:	89 c6                	mov    esi,eax
c0016ae2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ae7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016aea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016aed:	56                   	push   esi
c0016aee:	e8 77 67 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0016af3:	83 c4 10             	add    esp,0x10
c0016af6:	85 f6                	test   esi,esi
c0016af8:	74 5b                	je     c0016b55 <sysCallOpen(regs*)+0x1c7>
c0016afa:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016afd:	0f b6 c2             	movzx  eax,dl
c0016b00:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016b03:	89 d0                	mov    eax,edx
c0016b05:	83 e0 01             	and    eax,0x1
c0016b08:	f6 c2 02             	test   dl,0x2
c0016b0b:	74 03                	je     c0016b10 <sysCallOpen(regs*)+0x182>
c0016b0d:	83 c8 02             	or     eax,0x2
c0016b10:	f6 c2 04             	test   dl,0x4
c0016b13:	74 03                	je     c0016b18 <sysCallOpen(regs*)+0x18a>
c0016b15:	83 c8 04             	or     eax,0x4
c0016b18:	f6 c2 08             	test   dl,0x8
c0016b1b:	74 03                	je     c0016b20 <sysCallOpen(regs*)+0x192>
c0016b1d:	83 c8 0a             	or     eax,0xa
c0016b20:	83 e2 10             	and    edx,0x10
c0016b23:	74 03                	je     c0016b28 <sysCallOpen(regs*)+0x19a>
c0016b25:	83 c8 12             	or     eax,0x12
c0016b28:	83 ec 08             	sub    esp,0x8
c0016b2b:	50                   	push   eax
c0016b2c:	56                   	push   esi
c0016b2d:	e8 fa 67 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0016b32:	83 c4 10             	add    esp,0x10
c0016b35:	85 c0                	test   eax,eax
c0016b37:	75 1c                	jne    c0016b55 <sysCallOpen(regs*)+0x1c7>
c0016b39:	83 ec 0c             	sub    esp,0xc
c0016b3c:	56                   	push   esi
c0016b3d:	e8 4c 4a ff ff       	call   c000b58e <UnixFile::getFileDescriptor()>
c0016b42:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016b45:	83 c4 10             	add    esp,0x10
c0016b48:	89 02                	mov    DWORD PTR [edx],eax
c0016b4a:	c1 f8 1f             	sar    eax,0x1f
c0016b4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b50:	e9 c1 fe ff ff       	jmp    c0016a16 <sysCallOpen(regs*)+0x88>
c0016b55:	81 c4 04 01 00 00    	add    esp,0x104
c0016b5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b60:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b65:	5b                   	pop    ebx
c0016b66:	5e                   	pop    esi
c0016b67:	c3                   	ret    
c0016b68:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016b6b:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016b71:	e9 99 fe ff ff       	jmp    c0016a0f <sysCallOpen(regs*)+0x81>

c0016b76 <Sys::loadSyscalls()>:
c0016b76:	c7 05 40 8c 02 c0 e7 5d 01 c0 	mov    DWORD PTR ds:0xc0028c40,0xc0015de7
c0016b80:	c7 05 44 8c 02 c0 dc 59 01 c0 	mov    DWORD PTR ds:0xc0028c44,0xc00159dc
c0016b8a:	c7 05 48 8c 02 c0 cd 5b 01 c0 	mov    DWORD PTR ds:0xc0028c48,0xc0015bcd
c0016b94:	c7 05 4c 8c 02 c0 1d 5d 01 c0 	mov    DWORD PTR ds:0xc0028c4c,0xc0015d1d
c0016b9e:	c7 05 50 8c 02 c0 65 5b 01 c0 	mov    DWORD PTR ds:0xc0028c50,0xc0015b65
c0016ba8:	c7 05 54 8c 02 c0 13 5a 01 c0 	mov    DWORD PTR ds:0xc0028c54,0xc0015a13
c0016bb2:	c7 05 58 8c 02 c0 f4 59 01 c0 	mov    DWORD PTR ds:0xc0028c58,0xc00159f4
c0016bbc:	c7 05 5c 8c 02 c0 22 5c 01 c0 	mov    DWORD PTR ds:0xc0028c5c,0xc0015c22
c0016bc6:	c7 05 64 8c 02 c0 aa 62 01 c0 	mov    DWORD PTR ds:0xc0028c64,0xc00162aa
c0016bd0:	c7 05 60 8c 02 c0 8e 69 01 c0 	mov    DWORD PTR ds:0xc0028c60,0xc001698e
c0016bda:	c7 05 68 8c 02 c0 0a 63 01 c0 	mov    DWORD PTR ds:0xc0028c68,0xc001630a
c0016be4:	c7 05 6c 8c 02 c0 ed 5f 01 c0 	mov    DWORD PTR ds:0xc0028c6c,0xc0015fed
c0016bee:	c7 05 70 8c 02 c0 1f 5e 01 c0 	mov    DWORD PTR ds:0xc0028c70,0xc0015e1f
c0016bf8:	c7 05 74 8c 02 c0 24 5e 01 c0 	mov    DWORD PTR ds:0xc0028c74,0xc0015e24
c0016c02:	c7 05 78 8c 02 c0 d3 63 01 c0 	mov    DWORD PTR ds:0xc0028c78,0xc00163d3
c0016c0c:	c7 05 7c 8c 02 c0 7f 63 01 c0 	mov    DWORD PTR ds:0xc0028c7c,0xc001637f
c0016c16:	c7 05 80 8c 02 c0 c6 60 01 c0 	mov    DWORD PTR ds:0xc0028c80,0xc00160c6
c0016c20:	c7 05 84 8c 02 c0 1d 61 01 c0 	mov    DWORD PTR ds:0xc0028c84,0xc001611d
c0016c2a:	c7 05 88 8c 02 c0 89 61 01 c0 	mov    DWORD PTR ds:0xc0028c88,0xc0016189
c0016c34:	c7 05 8c 8c 02 c0 29 5e 01 c0 	mov    DWORD PTR ds:0xc0028c8c,0xc0015e29
c0016c3e:	c7 05 90 8c 02 c0 43 64 01 c0 	mov    DWORD PTR ds:0xc0028c90,0xc0016443
c0016c48:	c7 05 94 8c 02 c0 5d 64 01 c0 	mov    DWORD PTR ds:0xc0028c94,0xc001645d
c0016c52:	c7 05 98 8c 02 c0 5d 64 01 c0 	mov    DWORD PTR ds:0xc0028c98,0xc001645d
c0016c5c:	c7 05 9c 8c 02 c0 92 64 01 c0 	mov    DWORD PTR ds:0xc0028c9c,0xc0016492
c0016c66:	c7 05 a0 8c 02 c0 f6 64 01 c0 	mov    DWORD PTR ds:0xc0028ca0,0xc00164f6
c0016c70:	c7 05 a4 8c 02 c0 33 5e 01 c0 	mov    DWORD PTR ds:0xc0028ca4,0xc0015e33
c0016c7a:	c7 05 a8 8c 02 c0 5a 65 01 c0 	mov    DWORD PTR ds:0xc0028ca8,0xc001655a
c0016c84:	c7 05 ac 8c 02 c0 aa 5f 01 c0 	mov    DWORD PTR ds:0xc0028cac,0xc0015faa
c0016c8e:	c7 05 b0 8c 02 c0 a6 65 01 c0 	mov    DWORD PTR ds:0xc0028cb0,0xc00165a6
c0016c98:	c7 05 b4 8c 02 c0 6c 60 01 c0 	mov    DWORD PTR ds:0xc0028cb4,0xc001606c
c0016ca2:	c7 05 b8 8c 02 c0 29 66 01 c0 	mov    DWORD PTR ds:0xc0028cb8,0xc0016629
c0016cac:	c7 05 bc 8c 02 c0 fb 61 01 c0 	mov    DWORD PTR ds:0xc0028cbc,0xc00161fb
c0016cb6:	c7 05 c0 8c 02 c0 52 66 01 c0 	mov    DWORD PTR ds:0xc0028cc0,0xc0016652
c0016cc0:	c7 05 c4 8c 02 c0 ba 66 01 c0 	mov    DWORD PTR ds:0xc0028cc4,0xc00166ba
c0016cca:	c7 05 c8 8c 02 c0 67 67 01 c0 	mov    DWORD PTR ds:0xc0028cc8,0xc0016767
c0016cd4:	c7 05 cc 8c 02 c0 43 5e 01 c0 	mov    DWORD PTR ds:0xc0028ccc,0xc0015e43
c0016cde:	c7 05 d0 8c 02 c0 ad 5e 01 c0 	mov    DWORD PTR ds:0xc0028cd0,0xc0015ead
c0016ce8:	c7 05 d4 8c 02 c0 f7 5e 01 c0 	mov    DWORD PTR ds:0xc0028cd4,0xc0015ef7
c0016cf2:	c7 05 d8 8c 02 c0 7b 68 01 c0 	mov    DWORD PTR ds:0xc0028cd8,0xc001687b
c0016cfc:	c7 05 dc 8c 02 c0 78 64 01 c0 	mov    DWORD PTR ds:0xc0028cdc,0xc0016478
c0016d06:	c7 05 e0 8c 02 c0 4c 5f 01 c0 	mov    DWORD PTR ds:0xc0028ce0,0xc0015f4c
c0016d10:	c7 05 e4 8c 02 c0 ed 68 01 c0 	mov    DWORD PTR ds:0xc0028ce4,0xc00168ed
c0016d1a:	c7 05 e8 8c 02 c0 32 69 01 c0 	mov    DWORD PTR ds:0xc0028ce8,0xc0016932
c0016d24:	c7 05 ec 8c 02 c0 bd 5a 01 c0 	mov    DWORD PTR ds:0xc0028cec,0xc0015abd
c0016d2e:	c7 05 f0 8c 02 c0 3e 5c 01 c0 	mov    DWORD PTR ds:0xc0028cf0,0xc0015c3e
c0016d38:	c7 05 f4 8c 02 c0 d3 5c 01 c0 	mov    DWORD PTR ds:0xc0028cf4,0xc0015cd3
c0016d42:	c7 05 f8 8c 02 c0 a6 59 01 c0 	mov    DWORD PTR ds:0xc0028cf8,0xc00159a6
c0016d4c:	c7 05 fc 8c 02 c0 85 5d 01 c0 	mov    DWORD PTR ds:0xc0028cfc,0xc0015d85
c0016d56:	c7 05 00 8d 02 c0 1f 5a 01 c0 	mov    DWORD PTR ds:0xc0028d00,0xc0015a1f
c0016d60:	c7 05 04 8d 02 c0 39 5a 01 c0 	mov    DWORD PTR ds:0xc0028d04,0xc0015a39
c0016d6a:	c3                   	ret    

c0016d6b <Sys::systemCall(regs*, void*)>:
c0016d6b:	53                   	push   ebx
c0016d6c:	83 ec 08             	sub    esp,0x8
c0016d6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d73:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016d76:	83 f8 7f             	cmp    eax,0x7f
c0016d79:	77 16                	ja     c0016d91 <Sys::systemCall(regs*, void*)+0x26>
c0016d7b:	8b 14 85 40 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73c0]
c0016d82:	85 d2                	test   edx,edx
c0016d84:	74 0b                	je     c0016d91 <Sys::systemCall(regs*, void*)+0x26>
c0016d86:	83 ec 0c             	sub    esp,0xc
c0016d89:	53                   	push   ebx
c0016d8a:	ff d2                	call   edx
c0016d8c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016d8f:	eb 0d                	jmp    c0016d9e <Sys::systemCall(regs*, void*)+0x33>
c0016d91:	52                   	push   edx
c0016d92:	52                   	push   edx
c0016d93:	50                   	push   eax
c0016d94:	68 05 5f 02 c0       	push   0xc0025f05
c0016d99:	e8 61 5f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016d9e:	83 c4 10             	add    esp,0x10
c0016da1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016da6:	31 d2                	xor    edx,edx
c0016da8:	83 c4 08             	add    esp,0x8
c0016dab:	5b                   	pop    ebx
c0016dac:	c3                   	ret    

c0016dad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016dad:	55                   	push   ebp
c0016dae:	57                   	push   edi
c0016daf:	56                   	push   esi
c0016db0:	53                   	push   ebx
c0016db1:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016db7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016dbe:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016dc5:	85 c0                	test   eax,eax
c0016dc7:	0f 95 c1             	setne  cl
c0016dca:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016dd2:	0f 94 c2             	sete   dl
c0016dd5:	84 d1                	test   cl,dl
c0016dd7:	74 23                	je     c0016dfc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016dd9:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016ddf:	74 1b                	je     c0016dfc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016de1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016de7:	89 da                	mov    edx,ebx
c0016de9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016def:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016df5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016dfc:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016e03:	05 ff 0f 00 00       	add    eax,0xfff
c0016e08:	83 ec 0c             	sub    esp,0xc
c0016e0b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016e0f:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016e15:	c1 e8 0c             	shr    eax,0xc
c0016e18:	89 fe                	mov    esi,edi
c0016e1a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e1e:	c1 ee 0c             	shr    esi,0xc
c0016e21:	6a 01                	push   0x1
c0016e23:	e8 b1 4b ff ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0016e28:	89 c5                	mov    ebp,eax
c0016e2a:	58                   	pop    eax
c0016e2b:	5a                   	pop    edx
c0016e2c:	56                   	push   esi
c0016e2d:	68 19 5f 02 c0       	push   0xc0025f19
c0016e32:	e8 c8 5e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016e37:	59                   	pop    ecx
c0016e38:	58                   	pop    eax
c0016e39:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e3d:	68 2b 5f 02 c0       	push   0xc0025f2b
c0016e42:	e8 b8 5e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016e47:	83 c4 10             	add    esp,0x10
c0016e4a:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016e50:	0f 86 31 01 00 00    	jbe    c0016f87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016e56:	c1 e6 0c             	shl    esi,0xc
c0016e59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e5c:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016e5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e63:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016e6a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016e6d:	01 df                	add    edi,ebx
c0016e6f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016e72:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e76:	0f 84 08 01 00 00    	je     c0016f84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016e7c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016e82:	76 05                	jbe    c0016e89 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016e84:	bf 00 10 00 00       	mov    edi,0x1000
c0016e89:	83 ec 0c             	sub    esp,0xc
c0016e8c:	31 d2                	xor    edx,edx
c0016e8e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016e95:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016e97:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016e9b:	50                   	push   eax
c0016e9c:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016ea0:	56                   	push   esi
c0016ea1:	52                   	push   edx
c0016ea2:	57                   	push   edi
c0016ea3:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016eaa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ead:	83 c4 20             	add    esp,0x20
c0016eb0:	85 c0                	test   eax,eax
c0016eb2:	74 0a                	je     c0016ebe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016eb4:	53                   	push   ebx
c0016eb5:	53                   	push   ebx
c0016eb6:	50                   	push   eax
c0016eb7:	68 3d 5f 02 c0       	push   0xc0025f3d
c0016ebc:	eb 0f                	jmp    c0016ecd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016ebe:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016ec2:	74 20                	je     c0016ee4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016ec4:	51                   	push   ecx
c0016ec5:	51                   	push   ecx
c0016ec6:	6a 00                	push   0x0
c0016ec8:	68 68 5f 02 c0       	push   0xc0025f68
c0016ecd:	e8 2d 5e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0016ed2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ed5:	e8 2f 4e ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c0016eda:	83 c4 10             	add    esp,0x10
c0016edd:	31 c0                	xor    eax,eax
c0016edf:	e9 68 01 00 00       	jmp    c001704c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016ee4:	fa                   	cli    
c0016ee5:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0016eeb:	e8 d6 31 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016ef0:	6a 07                	push   0x7
c0016ef2:	89 c7                	mov    edi,eax
c0016ef4:	55                   	push   ebp
c0016ef5:	50                   	push   eax
c0016ef6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016efb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016efe:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f04:	e8 77 51 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016f09:	83 c4 0c             	add    esp,0xc
c0016f0c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016f13:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f19:	6a 00                	push   0x0
c0016f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f23:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f29:	e8 ac 4f ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c0016f2e:	58                   	pop    eax
c0016f2f:	5a                   	pop    edx
c0016f30:	68 07 0c 00 00       	push   0xc07
c0016f35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016f39:	57                   	push   edi
c0016f3a:	89 ef                	mov    edi,ebp
c0016f3c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016f43:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f49:	6a 00                	push   0x0
c0016f4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f50:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f53:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016f59:	e8 de 54 ff ff       	call   c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016f5e:	b9 00 10 00 00       	mov    ecx,0x1000
c0016f63:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016f65:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0016f6a:	83 c4 20             	add    esp,0x20
c0016f6d:	48                   	dec    eax
c0016f6e:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0016f73:	85 c0                	test   eax,eax
c0016f75:	75 01                	jne    c0016f78 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016f77:	fb                   	sti    
c0016f78:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016f7f:	e9 df fe ff ff       	jmp    c0016e63 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016f84:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016f87:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016f8f:	0f 86 a9 00 00 00    	jbe    c001703e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016f95:	fa                   	cli    
c0016f96:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0016f9c:	51                   	push   ecx
c0016f9d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016fa4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016faa:	6a 00                	push   0x0
c0016fac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fb4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016fba:	e8 1b 4f ff ff       	call   c000beda <VAS::mapOtherVASIn(bool, VAS*)>
c0016fbf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016fc3:	c1 e6 0c             	shl    esi,0xc
c0016fc6:	01 de                	add    esi,ebx
c0016fc8:	83 c4 10             	add    esp,0x10
c0016fcb:	39 de                	cmp    esi,ebx
c0016fcd:	74 61                	je     c0017030 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016fcf:	e8 f2 30 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016fd4:	6a 07                	push   0x7
c0016fd6:	89 c7                	mov    edi,eax
c0016fd8:	55                   	push   ebp
c0016fd9:	50                   	push   eax
c0016fda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fdf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016fe2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016fe8:	e8 93 50 ff ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016fed:	58                   	pop    eax
c0016fee:	5a                   	pop    edx
c0016fef:	68 07 0c 00 00       	push   0xc07
c0016ff4:	53                   	push   ebx
c0016ff5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016ffb:	57                   	push   edi
c0016ffc:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0017003:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017009:	6a 00                	push   0x0
c001700b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017010:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017013:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017019:	e8 1e 54 ff ff       	call   c000c43c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001701e:	83 c4 1c             	add    esp,0x1c
c0017021:	68 00 10 00 00       	push   0x1000
c0017026:	6a 00                	push   0x0
c0017028:	55                   	push   ebp
c0017029:	e8 56 96 fe ff       	call   c0000684 <memset>
c001702e:	eb 98                	jmp    c0016fc8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0017030:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0017035:	48                   	dec    eax
c0017036:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c001703b:	75 01                	jne    c001703e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001703d:	fb                   	sti    
c001703e:	83 ec 0c             	sub    esp,0xc
c0017041:	55                   	push   ebp
c0017042:	e8 c2 4c ff ff       	call   c000bd09 <Virt::freeKernelVirtualPages(unsigned long)>
c0017047:	83 c4 10             	add    esp,0x10
c001704a:	b0 01                	mov    al,0x1
c001704c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0017052:	5b                   	pop    ebx
c0017053:	5e                   	pop    esi
c0017054:	5f                   	pop    edi
c0017055:	5d                   	pop    ebp
c0017056:	c3                   	ret    

c0017057 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017057:	55                   	push   ebp
c0017058:	57                   	push   edi
c0017059:	56                   	push   esi
c001705a:	53                   	push   ebx
c001705b:	83 ec 48             	sub    esp,0x48
c001705e:	68 14 01 00 00       	push   0x114
c0017063:	e8 a7 29 ff ff       	call   c0009a0f <malloc>
c0017068:	83 c4 0c             	add    esp,0xc
c001706b:	89 c6                	mov    esi,eax
c001706d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017071:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017075:	50                   	push   eax
c0017076:	e8 ef 61 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001707b:	58                   	pop    eax
c001707c:	5a                   	pop    edx
c001707d:	6a 01                	push   0x1
c001707f:	56                   	push   esi
c0017080:	e8 a7 62 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0017085:	83 c4 10             	add    esp,0x10
c0017088:	85 c0                	test   eax,eax
c001708a:	0f 85 47 01 00 00    	jne    c00171d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017090:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017098:	83 ec 0c             	sub    esp,0xc
c001709b:	6a 34                	push   0x34
c001709d:	e8 6d 29 ff ff       	call   c0009a0f <malloc>
c00170a2:	89 c3                	mov    ebx,eax
c00170a4:	58                   	pop    eax
c00170a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00170a7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00170ab:	57                   	push   edi
c00170ac:	53                   	push   ebx
c00170ad:	6a 00                	push   0x0
c00170af:	6a 34                	push   0x34
c00170b1:	56                   	push   esi
c00170b2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00170b5:	83 c4 20             	add    esp,0x20
c00170b8:	85 c0                	test   eax,eax
c00170ba:	0f 85 17 01 00 00    	jne    c00171d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170c0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00170c6:	0f 85 0b 01 00 00    	jne    c00171d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00170cf:	85 c0                	test   eax,eax
c00170d1:	0f 84 00 01 00 00    	je     c00171d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170d7:	31 d2                	xor    edx,edx
c00170d9:	55                   	push   ebp
c00170da:	52                   	push   edx
c00170db:	50                   	push   eax
c00170dc:	56                   	push   esi
c00170dd:	e8 08 63 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00170e2:	83 c4 10             	add    esp,0x10
c00170e5:	85 c0                	test   eax,eax
c00170e7:	0f 85 ea 00 00 00    	jne    c00171d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170ed:	83 ec 0c             	sub    esp,0xc
c00170f0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00170f3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00170f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170fb:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00170ff:	0f af c2             	imul   eax,edx
c0017102:	50                   	push   eax
c0017103:	e8 07 29 ff ff       	call   c0009a0f <malloc>
c0017108:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001710a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001710e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017111:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017115:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017119:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001711d:	0f af c2             	imul   eax,edx
c0017120:	99                   	cdq    
c0017121:	52                   	push   edx
c0017122:	50                   	push   eax
c0017123:	56                   	push   esi
c0017124:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017127:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001712a:	83 c4 20             	add    esp,0x20
c001712d:	85 c0                	test   eax,eax
c001712f:	0f 84 a2 00 00 00    	je     c00171d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017135:	31 d2                	xor    edx,edx
c0017137:	51                   	push   ecx
c0017138:	52                   	push   edx
c0017139:	50                   	push   eax
c001713a:	56                   	push   esi
c001713b:	e8 aa 62 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017140:	83 c4 10             	add    esp,0x10
c0017143:	85 c0                	test   eax,eax
c0017145:	0f 85 8c 00 00 00    	jne    c00171d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001714b:	83 ec 0c             	sub    esp,0xc
c001714e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017152:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017156:	31 ed                	xor    ebp,ebp
c0017158:	0f af c2             	imul   eax,edx
c001715b:	50                   	push   eax
c001715c:	e8 ae 28 ff ff       	call   c0009a0f <malloc>
c0017161:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017163:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017167:	89 3c 24             	mov    DWORD PTR [esp],edi
c001716a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001716e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017172:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017176:	0f af c2             	imul   eax,edx
c0017179:	99                   	cdq    
c001717a:	52                   	push   edx
c001717b:	50                   	push   eax
c001717c:	56                   	push   esi
c001717d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017180:	83 c4 20             	add    esp,0x20
c0017183:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001718b:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001718f:	0f 86 80 00 00 00    	jbe    c0017215 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017195:	0f b7 fd             	movzx  edi,bp
c0017198:	c1 e7 05             	shl    edi,0x5
c001719b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001719f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00171a2:	75 6b                	jne    c001720f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00171a4:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00171a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171ab:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00171ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171b2:	52                   	push   edx
c00171b3:	31 d2                	xor    edx,edx
c00171b5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00171b8:	52                   	push   edx
c00171b9:	50                   	push   eax
c00171ba:	56                   	push   esi
c00171bb:	e8 2a 62 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00171c0:	83 c4 10             	add    esp,0x10
c00171c3:	85 c0                	test   eax,eax
c00171c5:	74 17                	je     c00171de <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00171c7:	83 ec 0c             	sub    esp,0xc
c00171ca:	68 94 5f 02 c0       	push   0xc0025f94
c00171cf:	e8 2b 5b ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00171d4:	83 c4 10             	add    esp,0x10
c00171d7:	31 c0                	xor    eax,eax
c00171d9:	e9 87 00 00 00       	jmp    c0017265 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00171e4:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00171e7:	50                   	push   eax
c00171e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00171ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171f0:	56                   	push   esi
c00171f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00171f5:	e8 b3 fb ff ff       	call   c0016dad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00171fa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171fe:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0017202:	83 c4 20             	add    esp,0x20
c0017205:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017209:	73 04                	jae    c001720f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001720b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001720f:	45                   	inc    ebp
c0017210:	e9 76 ff ff ff       	jmp    c001718b <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017215:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017219:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001721d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017221:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0017227:	83 ec 0c             	sub    esp,0xc
c001722a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017230:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017235:	05 00 10 00 00       	add    eax,0x1000
c001723a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001723d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017241:	e8 d9 27 ff ff       	call   c0009a1f <free>
c0017246:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017249:	e8 d1 27 ff ff       	call   c0009a1f <free>
c001724e:	58                   	pop    eax
c001724f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017253:	e8 c7 27 ff ff       	call   c0009a1f <free>
c0017258:	89 34 24             	mov    DWORD PTR [esp],esi
c001725b:	e8 2a 61 ff ff       	call   c000d38a <File::close()>
c0017260:	83 c4 10             	add    esp,0x10
c0017263:	b0 01                	mov    al,0x1
c0017265:	83 c4 3c             	add    esp,0x3c
c0017268:	5b                   	pop    ebx
c0017269:	5e                   	pop    esi
c001726a:	5f                   	pop    edi
c001726b:	5d                   	pop    ebp
c001726c:	c3                   	ret    

c001726d <Thr::runtimeReferenceHelper()>:
c001726d:	83 ec 18             	sub    esp,0x18
c0017270:	68 9c 5f 02 c0       	push   0xc0025f9c
c0017275:	e8 85 5a ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001727a:	fa                   	cli    
c001727b:	83 c4 10             	add    esp,0x10
c001727e:	eb fe                	jmp    c001727e <Thr::runtimeReferenceHelper()+0x11>

c0017280 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017280:	57                   	push   edi
c0017281:	56                   	push   esi
c0017282:	53                   	push   ebx
c0017283:	31 db                	xor    ebx,ebx
c0017285:	39 1d e0 95 02 c0    	cmp    DWORD PTR ds:0xc00295e0,ebx
c001728b:	7e 3c                	jle    c00172c9 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001728d:	8b 34 9d 60 95 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6aa0]
c0017294:	31 ff                	xor    edi,edi
c0017296:	39 3c 9d 60 94 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ba0],edi
c001729d:	7e 27                	jle    c00172c6 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001729f:	50                   	push   eax
c00172a0:	50                   	push   eax
c00172a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00172a7:	03 04 9d e0 94 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6b20]
c00172ae:	50                   	push   eax
c00172af:	e8 18 95 fe ff       	call   c00007cc <strcmp>
c00172b4:	83 c4 10             	add    esp,0x10
c00172b7:	85 c0                	test   eax,eax
c00172b9:	75 05                	jne    c00172c0 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00172bb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00172be:	eb 0b                	jmp    c00172cb <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00172c0:	83 c6 10             	add    esi,0x10
c00172c3:	47                   	inc    edi
c00172c4:	eb d0                	jmp    c0017296 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00172c6:	43                   	inc    ebx
c00172c7:	eb bc                	jmp    c0017285 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00172c9:	31 c0                	xor    eax,eax
c00172cb:	5b                   	pop    ebx
c00172cc:	5e                   	pop    esi
c00172cd:	5f                   	pop    edi
c00172ce:	c3                   	ret    

c00172cf <Thr::loadKernelSymbolTable(char const*)>:
c00172cf:	55                   	push   ebp
c00172d0:	57                   	push   edi
c00172d1:	56                   	push   esi
c00172d2:	53                   	push   ebx
c00172d3:	83 ec 68             	sub    esp,0x68
c00172d6:	8b 35 30 96 02 c0    	mov    esi,DWORD PTR ds:0xc0029630
c00172dc:	68 14 01 00 00       	push   0x114
c00172e1:	e8 29 27 ff ff       	call   c0009a0f <malloc>
c00172e6:	83 c4 0c             	add    esp,0xc
c00172e9:	89 c3                	mov    ebx,eax
c00172eb:	56                   	push   esi
c00172ec:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00172f0:	50                   	push   eax
c00172f1:	e8 74 5f ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00172f6:	5e                   	pop    esi
c00172f7:	5f                   	pop    edi
c00172f8:	6a 01                	push   0x1
c00172fa:	53                   	push   ebx
c00172fb:	e8 2c 60 ff ff       	call   c000d32c <File::open(FileOpenMode)>
c0017300:	83 c4 10             	add    esp,0x10
c0017303:	85 c0                	test   eax,eax
c0017305:	74 0a                	je     c0017311 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0017307:	83 ec 0c             	sub    esp,0xc
c001730a:	68 be 5f 02 c0       	push   0xc0025fbe
c001730f:	eb 34                	jmp    c0017345 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017311:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017319:	83 ec 0c             	sub    esp,0xc
c001731c:	6a 34                	push   0x34
c001731e:	e8 ec 26 ff ff       	call   c0009a0f <malloc>
c0017323:	59                   	pop    ecx
c0017324:	89 c7                	mov    edi,eax
c0017326:	8d 74 24 34          	lea    esi,[esp+0x34]
c001732a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001732c:	56                   	push   esi
c001732d:	57                   	push   edi
c001732e:	6a 00                	push   0x0
c0017330:	6a 34                	push   0x34
c0017332:	53                   	push   ebx
c0017333:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017336:	83 c4 20             	add    esp,0x20
c0017339:	85 c0                	test   eax,eax
c001733b:	74 17                	je     c0017354 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001733d:	83 ec 0c             	sub    esp,0xc
c0017340:	68 d5 5f 02 c0       	push   0xc0025fd5
c0017345:	e8 7d d6 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001734a:	83 c4 10             	add    esp,0x10
c001734d:	31 c0                	xor    eax,eax
c001734f:	e9 31 02 00 00       	jmp    c0017585 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017354:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001735a:	75 e1                	jne    c001733d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001735c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001735f:	85 c0                	test   eax,eax
c0017361:	74 da                	je     c001733d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017363:	52                   	push   edx
c0017364:	31 d2                	xor    edx,edx
c0017366:	52                   	push   edx
c0017367:	50                   	push   eax
c0017368:	53                   	push   ebx
c0017369:	e8 7c 60 ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001736e:	83 c4 10             	add    esp,0x10
c0017371:	85 c0                	test   eax,eax
c0017373:	75 c8                	jne    c001733d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017375:	83 ec 0c             	sub    esp,0xc
c0017378:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001737c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017380:	31 ed                	xor    ebp,ebp
c0017382:	0f af c2             	imul   eax,edx
c0017385:	50                   	push   eax
c0017386:	e8 84 26 ff ff       	call   c0009a0f <malloc>
c001738b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001738d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017391:	89 34 24             	mov    DWORD PTR [esp],esi
c0017394:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017398:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001739c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00173a0:	0f af c2             	imul   eax,edx
c00173a3:	99                   	cdq    
c00173a4:	52                   	push   edx
c00173a5:	50                   	push   eax
c00173a6:	53                   	push   ebx
c00173a7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00173aa:	83 c4 20             	add    esp,0x20
c00173ad:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00173b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00173bd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00173c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00173cd:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00173d1:	0f 86 aa 00 00 00    	jbe    c0017481 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00173d7:	0f b7 f5             	movzx  esi,bp
c00173da:	6b f6 28             	imul   esi,esi,0x28
c00173dd:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00173e1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00173e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00173e8:	50                   	push   eax
c00173e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00173ed:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00173f1:	8b 16                	mov    edx,DWORD PTR [esi]
c00173f3:	6b c0 28             	imul   eax,eax,0x28
c00173f6:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00173fa:	89 d0                	mov    eax,edx
c00173fc:	31 d2                	xor    edx,edx
c00173fe:	52                   	push   edx
c00173ff:	50                   	push   eax
c0017400:	53                   	push   ebx
c0017401:	e8 e4 5f ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017406:	83 c4 0c             	add    esp,0xc
c0017409:	6a 20                	push   0x20
c001740b:	6a 00                	push   0x0
c001740d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017411:	52                   	push   edx
c0017412:	e8 6d 92 fe ff       	call   c0000684 <memset>
c0017417:	58                   	pop    eax
c0017418:	8b 03                	mov    eax,DWORD PTR [ebx]
c001741a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001741e:	51                   	push   ecx
c001741f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017423:	52                   	push   edx
c0017424:	6a 00                	push   0x0
c0017426:	6a 1f                	push   0x1f
c0017428:	53                   	push   ebx
c0017429:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001742c:	83 c4 18             	add    esp,0x18
c001742f:	68 ec 5f 02 c0       	push   0xc0025fec
c0017434:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017438:	52                   	push   edx
c0017439:	e8 8e 93 fe ff       	call   c00007cc <strcmp>
c001743e:	83 c4 10             	add    esp,0x10
c0017441:	85 c0                	test   eax,eax
c0017443:	75 0f                	jne    c0017454 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017445:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017448:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001744c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017450:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017454:	50                   	push   eax
c0017455:	50                   	push   eax
c0017456:	68 f4 5f 02 c0       	push   0xc0025ff4
c001745b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001745f:	50                   	push   eax
c0017460:	e8 67 93 fe ff       	call   c00007cc <strcmp>
c0017465:	83 c4 10             	add    esp,0x10
c0017468:	85 c0                	test   eax,eax
c001746a:	75 0f                	jne    c001747b <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001746c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001746f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017473:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017477:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001747b:	45                   	inc    ebp
c001747c:	e9 4c ff ff ff       	jmp    c00173cd <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017481:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017486:	75 10                	jne    c0017498 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017488:	83 ec 0c             	sub    esp,0xc
c001748b:	68 fc 5f 02 c0       	push   0xc0025ffc
c0017490:	e8 32 d5 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0017495:	83 c4 10             	add    esp,0x10
c0017498:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001749d:	75 10                	jne    c00174af <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001749f:	83 ec 0c             	sub    esp,0xc
c00174a2:	68 fc 5f 02 c0       	push   0xc0025ffc
c00174a7:	e8 1b d5 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c00174ac:	83 c4 10             	add    esp,0x10
c00174af:	31 d2                	xor    edx,edx
c00174b1:	50                   	push   eax
c00174b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b6:	52                   	push   edx
c00174b7:	50                   	push   eax
c00174b8:	53                   	push   ebx
c00174b9:	e8 2c 5f ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00174be:	5a                   	pop    edx
c00174bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00174c3:	e8 47 25 ff ff       	call   c0009a0f <malloc>
c00174c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00174cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174d0:	31 c9                	xor    ecx,ecx
c00174d2:	5e                   	pop    esi
c00174d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174d5:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00174d9:	55                   	push   ebp
c00174da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174de:	51                   	push   ecx
c00174df:	52                   	push   edx
c00174e0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00174e4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00174e8:	53                   	push   ebx
c00174e9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00174ec:	83 c4 14             	add    esp,0x14
c00174ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00174f3:	e8 17 25 ff ff       	call   c0009a0f <malloc>
c00174f8:	89 c6                	mov    esi,eax
c00174fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00174fc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174ff:	56                   	push   esi
c0017500:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017504:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017508:	51                   	push   ecx
c0017509:	52                   	push   edx
c001750a:	53                   	push   ebx
c001750b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001750e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017512:	8b 15 e0 95 02 c0    	mov    edx,DWORD PTR ds:0xc00295e0
c0017518:	83 c4 1c             	add    esp,0x1c
c001751b:	c1 e8 04             	shr    eax,0x4
c001751e:	89 04 95 60 94 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ba0],eax
c0017525:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017529:	31 d2                	xor    edx,edx
c001752b:	52                   	push   edx
c001752c:	50                   	push   eax
c001752d:	53                   	push   ebx
c001752e:	e8 b7 5e ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017533:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017535:	31 d2                	xor    edx,edx
c0017537:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001753a:	56                   	push   esi
c001753b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001753f:	52                   	push   edx
c0017540:	50                   	push   eax
c0017541:	53                   	push   ebx
c0017542:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017545:	83 c4 14             	add    esp,0x14
c0017548:	53                   	push   ebx
c0017549:	e8 3c 5e ff ff       	call   c000d38a <File::close()>
c001754e:	5d                   	pop    ebp
c001754f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017553:	e8 c7 24 ff ff       	call   c0009a1f <free>
c0017558:	89 3c 24             	mov    DWORD PTR [esp],edi
c001755b:	e8 bf 24 ff ff       	call   c0009a1f <free>
c0017560:	a1 e0 95 02 c0       	mov    eax,ds:0xc00295e0
c0017565:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017569:	8d 50 01             	lea    edx,[eax+0x1]
c001756c:	89 0c 85 60 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6aa0],ecx
c0017573:	89 34 85 e0 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b20],esi
c001757a:	89 15 e0 95 02 c0    	mov    DWORD PTR ds:0xc00295e0,edx
c0017580:	83 c4 10             	add    esp,0x10
c0017583:	b0 01                	mov    al,0x1
c0017585:	83 c4 5c             	add    esp,0x5c
c0017588:	5b                   	pop    ebx
c0017589:	5e                   	pop    esi
c001758a:	5f                   	pop    edi
c001758b:	5d                   	pop    ebp
c001758c:	c3                   	ret    

c001758d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001758d:	55                   	push   ebp
c001758e:	57                   	push   edi
c001758f:	56                   	push   esi
c0017590:	53                   	push   ebx
c0017591:	81 ec 68 03 00 00    	sub    esp,0x368
c0017597:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001759e:	8b 1d 30 96 02 c0    	mov    ebx,DWORD PTR ds:0xc0029630
c00175a4:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00175a8:	68 14 01 00 00       	push   0x114
c00175ad:	e8 5d 24 ff ff       	call   c0009a0f <malloc>
c00175b2:	83 c4 0c             	add    esp,0xc
c00175b5:	89 c5                	mov    ebp,eax
c00175b7:	53                   	push   ebx
c00175b8:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00175bf:	50                   	push   eax
c00175c0:	e8 a5 5c ff ff       	call   c000d26a <File::File(char const*, Process*)>
c00175c5:	5e                   	pop    esi
c00175c6:	5f                   	pop    edi
c00175c7:	6a 01                	push   0x1
c00175c9:	55                   	push   ebp
c00175ca:	e8 5d 5d ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00175cf:	83 c4 10             	add    esp,0x10
c00175d2:	85 c0                	test   eax,eax
c00175d4:	0f 85 a7 06 00 00    	jne    c0017c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00175da:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00175e2:	83 ec 0c             	sub    esp,0xc
c00175e5:	6a 34                	push   0x34
c00175e7:	e8 23 24 ff ff       	call   c0009a0f <malloc>
c00175ec:	5b                   	pop    ebx
c00175ed:	89 c7                	mov    edi,eax
c00175ef:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00175f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00175f6:	53                   	push   ebx
c00175f7:	57                   	push   edi
c00175f8:	6a 00                	push   0x0
c00175fa:	6a 34                	push   0x34
c00175fc:	55                   	push   ebp
c00175fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017600:	83 c4 20             	add    esp,0x20
c0017603:	85 c0                	test   eax,eax
c0017605:	0f 85 76 06 00 00    	jne    c0017c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001760b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017611:	0f 85 6a 06 00 00    	jne    c0017c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017617:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001761a:	85 c0                	test   eax,eax
c001761c:	0f 84 5f 06 00 00    	je     c0017c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017622:	31 d2                	xor    edx,edx
c0017624:	51                   	push   ecx
c0017625:	52                   	push   edx
c0017626:	50                   	push   eax
c0017627:	55                   	push   ebp
c0017628:	e8 bd 5d ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	85 c0                	test   eax,eax
c0017632:	0f 85 49 06 00 00    	jne    c0017c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017638:	83 ec 0c             	sub    esp,0xc
c001763b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001763e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017642:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017646:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001764a:	0f af c2             	imul   eax,edx
c001764d:	50                   	push   eax
c001764e:	e8 bc 23 ff ff       	call   c0009a0f <malloc>
c0017653:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017656:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001765a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001765d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017661:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017665:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017669:	0f af c2             	imul   eax,edx
c001766c:	99                   	cdq    
c001766d:	52                   	push   edx
c001766e:	50                   	push   eax
c001766f:	55                   	push   ebp
c0017670:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017673:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017676:	83 c4 20             	add    esp,0x20
c0017679:	85 c0                	test   eax,eax
c001767b:	0f 84 00 06 00 00    	je     c0017c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017681:	52                   	push   edx
c0017682:	31 d2                	xor    edx,edx
c0017684:	52                   	push   edx
c0017685:	50                   	push   eax
c0017686:	55                   	push   ebp
c0017687:	e8 5e 5d ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001768c:	83 c4 10             	add    esp,0x10
c001768f:	85 c0                	test   eax,eax
c0017691:	0f 85 ea 05 00 00    	jne    c0017c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017697:	83 ec 0c             	sub    esp,0xc
c001769a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001769e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00176a2:	31 f6                	xor    esi,esi
c00176a4:	0f af c2             	imul   eax,edx
c00176a7:	50                   	push   eax
c00176a8:	e8 62 23 ff ff       	call   c0009a0f <malloc>
c00176ad:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00176b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00176b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00176bb:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00176bf:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00176c3:	0f af c2             	imul   eax,edx
c00176c6:	99                   	cdq    
c00176c7:	52                   	push   edx
c00176c8:	50                   	push   eax
c00176c9:	55                   	push   ebp
c00176ca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176cd:	83 c4 20             	add    esp,0x20
c00176d0:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00176d4:	0f 86 8a 00 00 00    	jbe    c0017764 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00176da:	0f b7 de             	movzx  ebx,si
c00176dd:	c1 e3 05             	shl    ebx,0x5
c00176e0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00176e4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00176e7:	75 75                	jne    c001775e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00176e9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00176ec:	31 d2                	xor    edx,edx
c00176ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00176f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00176f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176f9:	50                   	push   eax
c00176fa:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00176fd:	52                   	push   edx
c00176fe:	50                   	push   eax
c00176ff:	55                   	push   ebp
c0017700:	e8 e5 5c ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017705:	83 c4 10             	add    esp,0x10
c0017708:	85 c0                	test   eax,eax
c001770a:	0f 85 71 05 00 00    	jne    c0017c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017710:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017717:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001771a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001771e:	31 d2                	xor    edx,edx
c0017720:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017724:	83 ec 0c             	sub    esp,0xc
c0017727:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001772b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017732:	50                   	push   eax
c0017733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017737:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001773b:	52                   	push   edx
c001773c:	50                   	push   eax
c001773d:	55                   	push   ebp
c001773e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017741:	83 c4 1c             	add    esp,0x1c
c0017744:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017747:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001774a:	50                   	push   eax
c001774b:	6a 00                	push   0x0
c001774d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017751:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017755:	50                   	push   eax
c0017756:	e8 29 8f fe ff       	call   c0000684 <memset>
c001775b:	83 c4 10             	add    esp,0x10
c001775e:	46                   	inc    esi
c001775f:	e9 6c ff ff ff       	jmp    c00176d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017764:	53                   	push   ebx
c0017765:	31 db                	xor    ebx,ebx
c0017767:	68 00 01 00 00       	push   0x100
c001776c:	6a 00                	push   0x0
c001776e:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017772:	50                   	push   eax
c0017773:	e8 0c 8f fe ff       	call   c0000684 <memset>
c0017778:	83 c4 0c             	add    esp,0xc
c001777b:	68 00 01 00 00       	push   0x100
c0017780:	6a 00                	push   0x0
c0017782:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017789:	50                   	push   eax
c001778a:	e8 f5 8e fe ff       	call   c0000684 <memset>
c001778f:	83 c4 10             	add    esp,0x10
c0017792:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001779a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00177a2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00177aa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00177b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177ba:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00177be:	0f 86 30 01 00 00    	jbe    c00178f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00177c4:	0f b7 f3             	movzx  esi,bx
c00177c7:	6b f6 28             	imul   esi,esi,0x28
c00177ca:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00177ce:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00177d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177d5:	52                   	push   edx
c00177d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00177da:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00177de:	8b 06                	mov    eax,DWORD PTR [esi]
c00177e0:	6b d2 28             	imul   edx,edx,0x28
c00177e3:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00177e7:	31 d2                	xor    edx,edx
c00177e9:	52                   	push   edx
c00177ea:	50                   	push   eax
c00177eb:	55                   	push   ebp
c00177ec:	e8 f9 5b ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c00177f1:	83 c4 0c             	add    esp,0xc
c00177f4:	6a 20                	push   0x20
c00177f6:	6a 00                	push   0x0
c00177f8:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00177ff:	51                   	push   ecx
c0017800:	e8 7f 8e fe ff       	call   c0000684 <memset>
c0017805:	59                   	pop    ecx
c0017806:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017809:	8d 54 24 58          	lea    edx,[esp+0x58]
c001780d:	52                   	push   edx
c001780e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017815:	51                   	push   ecx
c0017816:	6a 00                	push   0x0
c0017818:	6a 1f                	push   0x1f
c001781a:	55                   	push   ebp
c001781b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001781e:	83 c4 1c             	add    esp,0x1c
c0017821:	6a 09                	push   0x9
c0017823:	68 16 60 02 c0       	push   0xc0026016
c0017828:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001782f:	51                   	push   ecx
c0017830:	e8 4b 8d fe ff       	call   c0000580 <memcmp>
c0017835:	83 c4 10             	add    esp,0x10
c0017838:	85 c0                	test   eax,eax
c001783a:	75 21                	jne    c001785d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001783c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017840:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017844:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017848:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001784c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001784f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017856:	89 d0                	mov    eax,edx
c0017858:	40                   	inc    eax
c0017859:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001785d:	50                   	push   eax
c001785e:	6a 09                	push   0x9
c0017860:	68 20 60 02 c0       	push   0xc0026020
c0017865:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001786c:	50                   	push   eax
c001786d:	e8 0e 8d fe ff       	call   c0000580 <memcmp>
c0017872:	83 c4 10             	add    esp,0x10
c0017875:	85 c0                	test   eax,eax
c0017877:	75 21                	jne    c001789a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0017879:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001787d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017881:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017885:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017889:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001788c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017893:	89 d0                	mov    eax,edx
c0017895:	40                   	inc    eax
c0017896:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001789a:	50                   	push   eax
c001789b:	50                   	push   eax
c001789c:	68 ec 5f 02 c0       	push   0xc0025fec
c00178a1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00178a8:	50                   	push   eax
c00178a9:	e8 1e 8f fe ff       	call   c00007cc <strcmp>
c00178ae:	83 c4 10             	add    esp,0x10
c00178b1:	85 c0                	test   eax,eax
c00178b3:	75 0f                	jne    c00178c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00178b5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00178b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00178c4:	50                   	push   eax
c00178c5:	50                   	push   eax
c00178c6:	68 f4 5f 02 c0       	push   0xc0025ff4
c00178cb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00178d2:	50                   	push   eax
c00178d3:	e8 f4 8e fe ff       	call   c00007cc <strcmp>
c00178d8:	83 c4 10             	add    esp,0x10
c00178db:	85 c0                	test   eax,eax
c00178dd:	75 0f                	jne    c00178ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00178df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00178e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00178e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00178ee:	43                   	inc    ebx
c00178ef:	e9 c6 fe ff ff       	jmp    c00177ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00178f4:	31 d2                	xor    edx,edx
c00178f6:	50                   	push   eax
c00178f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178fb:	52                   	push   edx
c00178fc:	50                   	push   eax
c00178fd:	55                   	push   ebp
c00178fe:	e8 e7 5a ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c0017903:	58                   	pop    eax
c0017904:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017908:	e8 02 21 ff ff       	call   c0009a0f <malloc>
c001790d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017910:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017914:	31 d2                	xor    edx,edx
c0017916:	58                   	pop    eax
c0017917:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001791b:	53                   	push   ebx
c001791c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017920:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017924:	52                   	push   edx
c0017925:	50                   	push   eax
c0017926:	55                   	push   ebp
c0017927:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001792a:	83 c4 14             	add    esp,0x14
c001792d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017931:	e8 d9 20 ff ff       	call   c0009a0f <malloc>
c0017936:	31 d2                	xor    edx,edx
c0017938:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001793c:	83 c4 0c             	add    esp,0xc
c001793f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017943:	52                   	push   edx
c0017944:	50                   	push   eax
c0017945:	55                   	push   ebp
c0017946:	e8 9f 5a ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001794b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001794e:	31 d2                	xor    edx,edx
c0017950:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017953:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017957:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001795b:	52                   	push   edx
c001795c:	50                   	push   eax
c001795d:	55                   	push   ebp
c001795e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017961:	83 c4 20             	add    esp,0x20
c0017964:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001796c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017970:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0017974:	0f 84 0b 03 00 00    	je     c0017c85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001797a:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017981:	31 d2                	xor    edx,edx
c0017983:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017987:	c1 e8 03             	shr    eax,0x3
c001798a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001798e:	51                   	push   ecx
c001798f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017993:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017997:	52                   	push   edx
c0017998:	50                   	push   eax
c0017999:	55                   	push   ebp
c001799a:	e8 4b 5a ff ff       	call   c000d3ea <File::seek(unsigned long long)>
c001799f:	5b                   	pop    ebx
c00179a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a4:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00179ab:	e8 5f 20 ff ff       	call   c0009a0f <malloc>
c00179b0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00179b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179b7:	31 d2                	xor    edx,edx
c00179b9:	5e                   	pop    esi
c00179ba:	8d 44 24 58          	lea    eax,[esp+0x58]
c00179be:	50                   	push   eax
c00179bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179c7:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00179ce:	52                   	push   edx
c00179cf:	50                   	push   eax
c00179d0:	55                   	push   ebp
c00179d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00179d4:	83 c4 20             	add    esp,0x20
c00179d7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00179df:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00179e3:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00179e7:	0f 8d 7c 02 00 00    	jge    c0017c69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c00179ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00179f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00179f5:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c00179fa:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00179fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a05:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017a09:	89 d8                	mov    eax,ebx
c0017a0b:	c1 e8 08             	shr    eax,0x8
c0017a0e:	89 c6                	mov    esi,eax
c0017a10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a14:	c1 e6 04             	shl    esi,0x4
c0017a17:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017a1b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017a1e:	85 d2                	test   edx,edx
c0017a20:	0f 85 bf 00 00 00    	jne    c0017ae5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017a26:	83 ec 0c             	sub    esp,0xc
c0017a29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a2d:	03 06                	add    eax,DWORD PTR [esi]
c0017a2f:	50                   	push   eax
c0017a30:	e8 4b f8 ff ff       	call   c0017280 <Thr::getAddressOfKernelSymbol(char const*)>
c0017a35:	83 c4 10             	add    esp,0x10
c0017a38:	89 c2                	mov    edx,eax
c0017a3a:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017a3f:	85 c0                	test   eax,eax
c0017a41:	0f 85 9e 00 00 00    	jne    c0017ae5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017a47:	83 ec 0c             	sub    esp,0xc
c0017a4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a4e:	03 06                	add    eax,DWORD PTR [esi]
c0017a50:	50                   	push   eax
c0017a51:	e8 ba 0e ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c0017a56:	83 c4 10             	add    esp,0x10
c0017a59:	89 c2                	mov    edx,eax
c0017a5b:	85 c0                	test   eax,eax
c0017a5d:	0f 85 82 00 00 00    	jne    c0017ae5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0017a63:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017a67:	50                   	push   eax
c0017a68:	50                   	push   eax
c0017a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6d:	03 06                	add    eax,DWORD PTR [esi]
c0017a6f:	50                   	push   eax
c0017a70:	68 2a 60 02 c0       	push   0xc002602a
c0017a75:	e8 85 52 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017a7a:	58                   	pop    eax
c0017a7b:	5a                   	pop    edx
c0017a7c:	68 44 60 02 c0       	push   0xc0026044
c0017a81:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a88:	50                   	push   eax
c0017a89:	e8 b2 8c fe ff       	call   c0000740 <strcpy>
c0017a8e:	59                   	pop    ecx
c0017a8f:	58                   	pop    eax
c0017a90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a94:	03 06                	add    eax,DWORD PTR [esi]
c0017a96:	50                   	push   eax
c0017a97:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017a9e:	50                   	push   eax
c0017a9f:	e8 dc 8d fe ff       	call   c0000880 <strcat>
c0017aa4:	58                   	pop    eax
c0017aa5:	5a                   	pop    edx
c0017aa6:	68 da 60 02 c0       	push   0xc00260da
c0017aab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017ab2:	50                   	push   eax
c0017ab3:	e8 c8 8d fe ff       	call   c0000880 <strcat>
c0017ab8:	83 c4 10             	add    esp,0x10
c0017abb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ac0:	0f 84 5d 01 00 00    	je     c0017c23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017ac6:	83 ec 0c             	sub    esp,0xc
c0017ac9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017ad0:	50                   	push   eax
c0017ad1:	e8 f1 ce ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017add:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017ae1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017ae5:	80 fb 01             	cmp    bl,0x1
c0017ae8:	0f 85 88 00 00 00    	jne    c0017b76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017aee:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017af5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017af9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017afd:	01 ce                	add    esi,ecx
c0017aff:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017b05:	0f 94 c0             	sete   al
c0017b08:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017b0e:	0f 94 c3             	sete   bl
c0017b11:	09 c3                	or     ebx,eax
c0017b13:	8b 06                	mov    eax,DWORD PTR [esi]
c0017b15:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017b1a:	74 41                	je     c0017b5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017b1c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017b1f:	84 db                	test   bl,bl
c0017b21:	75 15                	jne    c0017b38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0017b23:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b27:	66 83 f8 0c          	cmp    ax,0xc
c0017b2b:	76 05                	jbe    c0017b32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017b2d:	b8 0c 00 00 00       	mov    eax,0xc
c0017b32:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017b36:	76 37                	jbe    c0017b6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b38:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017b3c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b41:	0f 84 dc 00 00 00    	je     c0017c23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017b47:	83 ec 0c             	sub    esp,0xc
c0017b4a:	68 5b 60 02 c0       	push   0xc002605b
c0017b4f:	e8 73 ce ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0017b54:	83 c4 10             	add    esp,0x10
c0017b57:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017b5b:	eb 12                	jmp    c0017b6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b5d:	01 c1                	add    ecx,eax
c0017b5f:	84 db                	test   bl,bl
c0017b61:	75 0c                	jne    c0017b6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b63:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b67:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017b6b:	77 02                	ja     c0017b6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017b6d:	01 d1                	add    ecx,edx
c0017b6f:	89 0e                	mov    DWORD PTR [esi],ecx
c0017b71:	e9 ea 00 00 00       	jmp    c0017c60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017b76:	80 fb 02             	cmp    bl,0x2
c0017b79:	75 7c                	jne    c0017bf7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0017b7b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017b82:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017b86:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017b8a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017b90:	74 20                	je     c0017bb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017b92:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017b98:	74 18                	je     c0017bb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017b9a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017b9e:	b9 0a 00 00 00       	mov    ecx,0xa
c0017ba3:	66 83 f8 0e          	cmp    ax,0xe
c0017ba7:	77 03                	ja     c0017bac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017ba9:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017bac:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017bb0:	76 1f                	jbe    c0017bd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017bb2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017bb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017bbb:	74 66                	je     c0017c23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017bbd:	83 ec 0c             	sub    esp,0xc
c0017bc0:	68 77 60 02 c0       	push   0xc0026077
c0017bc5:	e8 fd cd ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0017bca:	83 c4 10             	add    esp,0x10
c0017bcd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bd1:	8b 06                	mov    eax,DWORD PTR [esi]
c0017bd3:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017bd8:	74 13                	je     c0017bed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017bda:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017bde:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017be5:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017be9:	01 c8                	add    eax,ecx
c0017beb:	eb 04                	jmp    c0017bf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017bed:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017bf1:	01 c2                	add    edx,eax
c0017bf3:	89 16                	mov    DWORD PTR [esi],edx
c0017bf5:	eb 69                	jmp    c0017c60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017bf7:	0f b6 db             	movzx  ebx,bl
c0017bfa:	50                   	push   eax
c0017bfb:	50                   	push   eax
c0017bfc:	53                   	push   ebx
c0017bfd:	68 93 60 02 c0       	push   0xc0026093
c0017c02:	e8 f8 50 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017c07:	83 c4 10             	add    esp,0x10
c0017c0a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017c0f:	74 12                	je     c0017c23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017c11:	83 ec 0c             	sub    esp,0xc
c0017c14:	68 9e 60 02 c0       	push   0xc002609e
c0017c19:	e8 a9 cd ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0017c1e:	83 c4 10             	add    esp,0x10
c0017c21:	eb 3d                	jmp    c0017c60 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017c23:	83 ec 0c             	sub    esp,0xc
c0017c26:	55                   	push   ebp
c0017c27:	e8 5e 57 ff ff       	call   c000d38a <File::close()>
c0017c2c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c2f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c35:	59                   	pop    ecx
c0017c36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c3a:	e8 e0 1d ff ff       	call   c0009a1f <free>
c0017c3f:	5b                   	pop    ebx
c0017c40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c44:	e8 d6 1d ff ff       	call   c0009a1f <free>
c0017c49:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c4c:	e8 ce 1d ff ff       	call   c0009a1f <free>
c0017c51:	5e                   	pop    esi
c0017c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c56:	e8 c4 1d ff ff       	call   c0009a1f <free>
c0017c5b:	83 c4 10             	add    esp,0x10
c0017c5e:	eb 21                	jmp    c0017c81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017c60:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017c64:	e9 76 fd ff ff       	jmp    c00179df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017c69:	83 ec 0c             	sub    esp,0xc
c0017c6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c70:	e8 aa 1d ff ff       	call   c0009a1f <free>
c0017c75:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017c79:	83 c4 10             	add    esp,0x10
c0017c7c:	e9 eb fc ff ff       	jmp    c001796c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017c81:	31 c0                	xor    eax,eax
c0017c83:	eb 33                	jmp    c0017cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017c85:	83 ec 0c             	sub    esp,0xc
c0017c88:	55                   	push   ebp
c0017c89:	e8 fc 56 ff ff       	call   c000d38a <File::close()>
c0017c8e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017c91:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c97:	58                   	pop    eax
c0017c98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c9c:	e8 7e 1d ff ff       	call   c0009a1f <free>
c0017ca1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017ca4:	e8 76 1d ff ff       	call   c0009a1f <free>
c0017ca9:	5a                   	pop    edx
c0017caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cae:	e8 6c 1d ff ff       	call   c0009a1f <free>
c0017cb3:	83 c4 10             	add    esp,0x10
c0017cb6:	b0 01                	mov    al,0x1
c0017cb8:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017cbe:	5b                   	pop    ebx
c0017cbf:	5e                   	pop    esi
c0017cc0:	5f                   	pop    edi
c0017cc1:	5d                   	pop    ebp
c0017cc2:	c3                   	ret    

c0017cc3 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017cc3:	56                   	push   esi
c0017cc4:	31 d2                	xor    edx,edx
c0017cc6:	53                   	push   ebx
c0017cc7:	8b 1d 40 8e 02 c0    	mov    ebx,DWORD PTR ds:0xc0028e40
c0017ccd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017cd1:	39 d3                	cmp    ebx,edx
c0017cd3:	7e 1b                	jle    c0017cf0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017cd5:	8b 04 95 60 90 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6fa0]
c0017cdc:	39 c8                	cmp    eax,ecx
c0017cde:	77 0d                	ja     c0017ced <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017ce0:	8b 34 95 60 8e 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd71a0]
c0017ce7:	01 c6                	add    esi,eax
c0017ce9:	39 ce                	cmp    esi,ecx
c0017ceb:	77 05                	ja     c0017cf2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017ced:	42                   	inc    edx
c0017cee:	eb e1                	jmp    c0017cd1 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017cf0:	31 c0                	xor    eax,eax
c0017cf2:	5b                   	pop    ebx
c0017cf3:	5e                   	pop    esi
c0017cf4:	c3                   	ret    

c0017cf5 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017cf5:	53                   	push   ebx
c0017cf6:	31 c0                	xor    eax,eax
c0017cf8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017cfc:	8b 1d 40 8e 02 c0    	mov    ebx,DWORD PTR ds:0xc0028e40
c0017d02:	39 c3                	cmp    ebx,eax
c0017d04:	7e 22                	jle    c0017d28 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017d06:	8b 14 85 60 90 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6fa0]
c0017d0d:	39 ca                	cmp    edx,ecx
c0017d0f:	77 14                	ja     c0017d25 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017d11:	03 14 85 60 8e 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd71a0]
c0017d18:	39 ca                	cmp    edx,ecx
c0017d1a:	76 09                	jbe    c0017d25 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017d1c:	8b 04 85 60 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6da0]
c0017d23:	eb 05                	jmp    c0017d2a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017d25:	40                   	inc    eax
c0017d26:	eb da                	jmp    c0017d02 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017d28:	31 c0                	xor    eax,eax
c0017d2a:	5b                   	pop    ebx
c0017d2b:	c3                   	ret    

c0017d2c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017d2c:	53                   	push   ebx
c0017d2d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d31:	53                   	push   ebx
c0017d32:	e8 8c ff ff ff       	call   c0017cc3 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017d37:	5a                   	pop    edx
c0017d38:	31 d2                	xor    edx,edx
c0017d3a:	85 c0                	test   eax,eax
c0017d3c:	74 04                	je     c0017d42 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017d3e:	89 da                	mov    edx,ebx
c0017d40:	29 c2                	sub    edx,eax
c0017d42:	89 d0                	mov    eax,edx
c0017d44:	5b                   	pop    ebx
c0017d45:	c3                   	ret    

c0017d46 <Thr::loadDLL(char const*, bool)>:
c0017d46:	55                   	push   ebp
c0017d47:	57                   	push   edi
c0017d48:	56                   	push   esi
c0017d49:	53                   	push   ebx
c0017d4a:	81 ec 34 01 00 00    	sub    esp,0x134
c0017d50:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017d57:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017d5e:	56                   	push   esi
c0017d5f:	68 b6 60 02 c0       	push   0xc00260b6
c0017d64:	e8 96 4f ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017d69:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d70:	e8 9a 1c ff ff       	call   c0009a0f <malloc>
c0017d75:	83 c4 0c             	add    esp,0xc
c0017d78:	89 c3                	mov    ebx,eax
c0017d7a:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c0017d80:	56                   	push   esi
c0017d81:	50                   	push   eax
c0017d82:	e8 e3 54 ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0017d87:	83 c4 10             	add    esp,0x10
c0017d8a:	85 db                	test   ebx,ebx
c0017d8c:	75 3c                	jne    c0017dca <Thr::loadDLL(char const*, bool)+0x84>
c0017d8e:	89 f8                	mov    eax,edi
c0017d90:	84 c0                	test   al,al
c0017d92:	0f 84 d2 01 00 00    	je     c0017f6a <Thr::loadDLL(char const*, bool)+0x224>
c0017d98:	55                   	push   ebp
c0017d99:	55                   	push   ebp
c0017d9a:	68 c7 60 02 c0       	push   0xc00260c7
c0017d9f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017da3:	55                   	push   ebp
c0017da4:	e8 97 89 fe ff       	call   c0000740 <strcpy>
c0017da9:	58                   	pop    eax
c0017daa:	5a                   	pop    edx
c0017dab:	56                   	push   esi
c0017dac:	55                   	push   ebp
c0017dad:	e8 ce 8a fe ff       	call   c0000880 <strcat>
c0017db2:	59                   	pop    ecx
c0017db3:	58                   	pop    eax
c0017db4:	68 da 60 02 c0       	push   0xc00260da
c0017db9:	55                   	push   ebp
c0017dba:	e8 c1 8a fe ff       	call   c0000880 <strcat>
c0017dbf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017dc2:	e8 00 cc ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0017dc7:	83 c4 10             	add    esp,0x10
c0017dca:	51                   	push   ecx
c0017dcb:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017dcf:	50                   	push   eax
c0017dd0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017dd4:	50                   	push   eax
c0017dd5:	53                   	push   ebx
c0017dd6:	e8 fd 57 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c0017ddb:	83 c4 10             	add    esp,0x10
c0017dde:	85 db                	test   ebx,ebx
c0017de0:	74 0c                	je     c0017dee <Thr::loadDLL(char const*, bool)+0xa8>
c0017de2:	83 ec 0c             	sub    esp,0xc
c0017de5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017de7:	53                   	push   ebx
c0017de8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017deb:	83 c4 10             	add    esp,0x10
c0017dee:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017df3:	75 0a                	jne    c0017dff <Thr::loadDLL(char const*, bool)+0xb9>
c0017df5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017df9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017dfd:	75 3c                	jne    c0017e3b <Thr::loadDLL(char const*, bool)+0xf5>
c0017dff:	89 f8                	mov    eax,edi
c0017e01:	84 c0                	test   al,al
c0017e03:	0f 84 49 01 00 00    	je     c0017f52 <Thr::loadDLL(char const*, bool)+0x20c>
c0017e09:	51                   	push   ecx
c0017e0a:	51                   	push   ecx
c0017e0b:	68 c7 60 02 c0       	push   0xc00260c7
c0017e10:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017e14:	53                   	push   ebx
c0017e15:	e8 26 89 fe ff       	call   c0000740 <strcpy>
c0017e1a:	5d                   	pop    ebp
c0017e1b:	58                   	pop    eax
c0017e1c:	56                   	push   esi
c0017e1d:	53                   	push   ebx
c0017e1e:	e8 5d 8a fe ff       	call   c0000880 <strcat>
c0017e23:	58                   	pop    eax
c0017e24:	5a                   	pop    edx
c0017e25:	68 da 60 02 c0       	push   0xc00260da
c0017e2a:	53                   	push   ebx
c0017e2b:	e8 50 8a fe ff       	call   c0000880 <strcat>
c0017e30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e33:	e8 8f cb ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0017e38:	83 c4 10             	add    esp,0x10
c0017e3b:	52                   	push   edx
c0017e3c:	6a 03                	push   0x3
c0017e3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e42:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017e46:	05 ff 0f 00 00       	add    eax,0xfff
c0017e4b:	83 d2 00             	adc    edx,0x0
c0017e4e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017e52:	50                   	push   eax
c0017e53:	ff 35 10 82 02 c0    	push   DWORD PTR ds:0xc0028210
c0017e59:	e8 24 43 ff ff       	call   c000c182 <VAS::allocatePages(int, int)>
c0017e5e:	59                   	pop    ecx
c0017e5f:	89 c3                	mov    ebx,eax
c0017e61:	5d                   	pop    ebp
c0017e62:	50                   	push   eax
c0017e63:	68 3e 42 02 c0       	push   0xc002423e
c0017e68:	e8 92 4e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017e6d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017e70:	e8 2b 88 fe ff       	call   c00006a0 <strlen>
c0017e75:	8b 2d 40 8e 02 c0    	mov    ebp,DWORD PTR ds:0xc0028e40
c0017e7b:	40                   	inc    eax
c0017e7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e7f:	e8 8b 1b ff ff       	call   c0009a0f <malloc>
c0017e84:	89 04 ad 60 92 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6da0],eax
c0017e8b:	58                   	pop    eax
c0017e8c:	a1 40 8e 02 c0       	mov    eax,ds:0xc0028e40
c0017e91:	5a                   	pop    edx
c0017e92:	56                   	push   esi
c0017e93:	ff 34 85 60 92 02 c0 	push   DWORD PTR [eax*4-0x3ffd6da0]
c0017e9a:	e8 a1 88 fe ff       	call   c0000740 <strcpy>
c0017e9f:	a1 40 8e 02 c0       	mov    eax,ds:0xc0028e40
c0017ea4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ea7:	89 1c 85 60 90 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6fa0],ebx
c0017eae:	89 15 40 8e 02 c0    	mov    DWORD PTR ds:0xc0028e40,edx
c0017eb4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017eb8:	83 c4 0c             	add    esp,0xc
c0017ebb:	89 14 85 60 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71a0],edx
c0017ec2:	6a 01                	push   0x1
c0017ec4:	53                   	push   ebx
c0017ec5:	56                   	push   esi
c0017ec6:	e8 c2 f6 ff ff       	call   c001758d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017ecb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017ecf:	83 c4 10             	add    esp,0x10
c0017ed2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017ed7:	0f 85 89 00 00 00    	jne    c0017f66 <Thr::loadDLL(char const*, bool)+0x220>
c0017edd:	89 f8                	mov    eax,edi
c0017edf:	84 c0                	test   al,al
c0017ee1:	74 73                	je     c0017f56 <Thr::loadDLL(char const*, bool)+0x210>
c0017ee3:	83 ec 0c             	sub    esp,0xc
c0017ee6:	68 dc 60 02 c0       	push   0xc00260dc
c0017eeb:	e8 d7 ca ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0017ef0:	83 c4 10             	add    esp,0x10
c0017ef3:	eb 61                	jmp    c0017f56 <Thr::loadDLL(char const*, bool)+0x210>
c0017ef5:	50                   	push   eax
c0017ef6:	50                   	push   eax
c0017ef7:	89 e8                	mov    eax,ebp
c0017ef9:	c1 e0 0c             	shl    eax,0xc
c0017efc:	01 d8                	add    eax,ebx
c0017efe:	50                   	push   eax
c0017eff:	ff 35 10 82 02 c0    	push   DWORD PTR ds:0xc0028210
c0017f05:	e8 e0 3d ff ff       	call   c000bcea <VAS::getPageTableEntry(unsigned long)>
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f0f:	a8 60                	test   al,0x60
c0017f11:	75 11                	jne    c0017f24 <Thr::loadDLL(char const*, bool)+0x1de>
c0017f13:	83 ec 0c             	sub    esp,0xc
c0017f16:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017f1b:	50                   	push   eax
c0017f1c:	e8 22 21 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c0017f21:	83 c4 10             	add    esp,0x10
c0017f24:	45                   	inc    ebp
c0017f25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f2d:	05 ff 0f 00 00       	add    eax,0xfff
c0017f32:	bf 00 00 00 00       	mov    edi,0x0
c0017f37:	83 d2 00             	adc    edx,0x0
c0017f3a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017f3e:	c1 ea 0c             	shr    edx,0xc
c0017f41:	39 c5                	cmp    ebp,eax
c0017f43:	89 d1                	mov    ecx,edx
c0017f45:	89 f8                	mov    eax,edi
c0017f47:	19 c8                	sbb    eax,ecx
c0017f49:	72 aa                	jb     c0017ef5 <Thr::loadDLL(char const*, bool)+0x1af>
c0017f4b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017f50:	75 18                	jne    c0017f6a <Thr::loadDLL(char const*, bool)+0x224>
c0017f52:	31 db                	xor    ebx,ebx
c0017f54:	eb 14                	jmp    c0017f6a <Thr::loadDLL(char const*, bool)+0x224>
c0017f56:	83 ec 0c             	sub    esp,0xc
c0017f59:	68 fb 60 02 c0       	push   0xc00260fb
c0017f5e:	e8 64 ca ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0017f63:	83 c4 10             	add    esp,0x10
c0017f66:	31 ed                	xor    ebp,ebp
c0017f68:	eb bb                	jmp    c0017f25 <Thr::loadDLL(char const*, bool)+0x1df>
c0017f6a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017f70:	89 d8                	mov    eax,ebx
c0017f72:	5b                   	pop    ebx
c0017f73:	5e                   	pop    esi
c0017f74:	5f                   	pop    edi
c0017f75:	5d                   	pop    ebp
c0017f76:	c3                   	ret    

c0017f77 <Thr::executeDLL(unsigned long, void*)>:
c0017f77:	56                   	push   esi
c0017f78:	53                   	push   ebx
c0017f79:	52                   	push   edx
c0017f7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017f7e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017f82:	85 db                	test   ebx,ebx
c0017f84:	75 10                	jne    c0017f96 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017f86:	83 ec 0c             	sub    esp,0xc
c0017f89:	68 17 61 02 c0       	push   0xc0026117
c0017f8e:	e8 34 ca ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0017f93:	83 c4 10             	add    esp,0x10
c0017f96:	50                   	push   eax
c0017f97:	50                   	push   eax
c0017f98:	53                   	push   ebx
c0017f99:	68 41 61 02 c0       	push   0xc0026141
c0017f9e:	e8 5c 4d ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0017fa3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017fa7:	89 d8                	mov    eax,ebx
c0017fa9:	83 c4 14             	add    esp,0x14
c0017fac:	5b                   	pop    ebx
c0017fad:	5e                   	pop    esi
c0017fae:	ff e0                	jmp    eax

c0017fb0 <userModeEntryPoint(void*)>:
c0017fb0:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0017fb5:	48                   	dec    eax
c0017fb6:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0017fbb:	75 03                	jne    c0017fc0 <userModeEntryPoint(void*)+0x10>
c0017fbd:	fb                   	sti    
c0017fbe:	66 90                	xchg   ax,ax
c0017fc0:	fb                   	sti    
c0017fc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fc6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017fc9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017fcf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017fd3:	e9 87 82 fe ff       	jmp    c000025f <goToUsermode>

c0017fd8 <changeTSS>:
c0017fd8:	83 ec 14             	sub    esp,0x14
c0017fdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017fe0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017fe3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017fe8:	c1 e2 15             	shl    edx,0x15
c0017feb:	29 d0                	sub    eax,edx
c0017fed:	50                   	push   eax
c0017fee:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0017ff3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017ff9:	05 7c 11 00 00       	add    eax,0x117c
c0017ffe:	50                   	push   eax
c0017fff:	e8 28 33 ff ff       	call   c000b32c <TSS::setESP(unsigned long)>
c0018004:	83 c4 1c             	add    esp,0x1c
c0018007:	c3                   	ret    

c0018008 <switchToThread(ThreadControlBlock*)>:
c0018008:	57                   	push   edi
c0018009:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c001800e:	56                   	push   esi
c001800f:	85 c0                	test   eax,eax
c0018011:	53                   	push   ebx
c0018012:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018016:	0f 85 90 00 00 00    	jne    c00180ac <switchToThread(ThreadControlBlock*)+0xa4>
c001801c:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c001801f:	3c ff                	cmp    al,0xff
c0018021:	0f 84 81 00 00 00    	je     c00180a8 <switchToThread(ThreadControlBlock*)+0xa0>
c0018027:	0f b6 d0             	movzx  edx,al
c001802a:	b8 00 04 00 00       	mov    eax,0x400
c001802f:	29 d0                	sub    eax,edx
c0018031:	d1 f8                	sar    eax,1
c0018033:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0018036:	66 90                	xchg   ax,ax
c0018038:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c001803b:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c0018040:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018046:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001804d:	74 4d                	je     c001809c <switchToThread(ThreadControlBlock*)+0x94>
c001804f:	0f 31                	rdtsc  
c0018051:	a3 48 96 02 c0       	mov    ds:0xc0029648,eax
c0018056:	89 c6                	mov    esi,eax
c0018058:	89 d7                	mov    edi,edx
c001805a:	2b 35 38 96 02 c0    	sub    esi,DWORD PTR ds:0xc0029638
c0018060:	89 15 4c 96 02 c0    	mov    DWORD PTR ds:0xc002964c,edx
c0018066:	1b 3d 3c 96 02 c0    	sbb    edi,DWORD PTR ds:0xc002963c
c001806c:	89 35 40 96 02 c0    	mov    DWORD PTR ds:0xc0029640,esi
c0018072:	a3 38 96 02 c0       	mov    ds:0xc0029638,eax
c0018077:	89 3d 44 96 02 c0    	mov    DWORD PTR ds:0xc0029644,edi
c001807d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018083:	89 15 3c 96 02 c0    	mov    DWORD PTR ds:0xc002963c,edx
c0018089:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001808c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001808f:	01 c6                	add    esi,eax
c0018091:	11 d7                	adc    edi,edx
c0018093:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0018096:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0018099:	8d 76 00             	lea    esi,[esi+0x0]
c001809c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00180a0:	5b                   	pop    ebx
c00180a1:	5e                   	pop    esi
c00180a2:	5f                   	pop    edi
c00180a3:	e9 ef 81 fe ff       	jmp    c0000297 <switchToThreadASM>
c00180a8:	31 c0                	xor    eax,eax
c00180aa:	eb 8c                	jmp    c0018038 <switchToThread(ThreadControlBlock*)+0x30>
c00180ac:	5b                   	pop    ebx
c00180ad:	c7 05 00 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x1
c00180b7:	5e                   	pop    esi
c00180b8:	5f                   	pop    edi
c00180b9:	c3                   	ret    
c00180ba:	66 90                	xchg   ax,ax

c00180bc <Process::addArgs(char**)>:
c00180bc:	57                   	push   edi
c00180bd:	56                   	push   esi
c00180be:	53                   	push   ebx
c00180bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00180c3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00180c7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00180d1:	85 ff                	test   edi,edi
c00180d3:	74 43                	je     c0018118 <Process::addArgs(char**)+0x5c>
c00180d5:	8b 07                	mov    eax,DWORD PTR [edi]
c00180d7:	85 c0                	test   eax,eax
c00180d9:	74 3d                	je     c0018118 <Process::addArgs(char**)+0x5c>
c00180db:	31 db                	xor    ebx,ebx
c00180dd:	8d 76 00             	lea    esi,[esi+0x0]
c00180e0:	83 ec 0c             	sub    esp,0xc
c00180e3:	50                   	push   eax
c00180e4:	e8 b7 85 fe ff       	call   c00006a0 <strlen>
c00180e9:	40                   	inc    eax
c00180ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00180ed:	e8 1d 19 ff ff       	call   c0009a0f <malloc>
c00180f2:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00180f9:	5a                   	pop    edx
c00180fa:	59                   	pop    ecx
c00180fb:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c00180fe:	43                   	inc    ebx
c00180ff:	50                   	push   eax
c0018100:	e8 3b 86 fe ff       	call   c0000740 <strcpy>
c0018105:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001810b:	83 c4 10             	add    esp,0x10
c001810e:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018111:	85 c0                	test   eax,eax
c0018113:	75 cb                	jne    c00180e0 <Process::addArgs(char**)+0x24>
c0018115:	8d 76 00             	lea    esi,[esi+0x0]
c0018118:	5b                   	pop    ebx
c0018119:	5e                   	pop    esi
c001811a:	5f                   	pop    edi
c001811b:	c3                   	ret    

c001811c <Process::Process(char const*, Process*, char**)>:
c001811c:	56                   	push   esi
c001811d:	53                   	push   ebx
c001811e:	83 ec 14             	sub    esp,0x14
c0018121:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018125:	05 0c 02 00 00       	add    eax,0x20c
c001812a:	bb 07 00 00 00       	mov    ebx,0x7
c001812f:	89 c6                	mov    esi,eax
c0018131:	8d 76 00             	lea    esi,[esi+0x0]
c0018134:	85 db                	test   ebx,ebx
c0018136:	78 14                	js     c001814c <Process::Process(char const*, Process*, char**)+0x30>
c0018138:	83 ec 0c             	sub    esp,0xc
c001813b:	56                   	push   esi
c001813c:	e8 bf af 00 00       	call   c0023100 <ThreadControlBlock::ThreadControlBlock()>
c0018141:	83 c4 10             	add    esp,0x10
c0018144:	83 c6 5f             	add    esi,0x5f
c0018147:	4b                   	dec    ebx
c0018148:	eb ea                	jmp    c0018134 <Process::Process(char const*, Process*, char**)+0x18>
c001814a:	66 90                	xchg   ax,ax
c001814c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018150:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018157:	83 ec 0c             	sub    esp,0xc
c001815a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001815e:	e8 ed c6 ff ff       	call   c0014850 <Krnl::newProcessEnv(Process*)>
c0018163:	83 c4 10             	add    esp,0x10
c0018166:	89 c2                	mov    edx,eax
c0018168:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001816c:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018176:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001817f:	a1 10 7b 02 c0       	mov    eax,ds:0xc0027b10
c0018184:	8d 50 01             	lea    edx,[eax+0x1]
c0018187:	89 15 10 7b 02 c0    	mov    DWORD PTR ds:0xc0027b10,edx
c001818d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018191:	89 02                	mov    DWORD PTR [edx],eax
c0018193:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001819b:	83 ec 0c             	sub    esp,0xc
c001819e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00181a2:	e8 68 18 ff ff       	call   c0009a0f <malloc>
c00181a7:	83 c4 10             	add    esp,0x10
c00181aa:	89 c3                	mov    ebx,eax
c00181ac:	83 ec 08             	sub    esp,0x8
c00181af:	6a 00                	push   0x0
c00181b1:	53                   	push   ebx
c00181b2:	e8 73 43 ff ff       	call   c000c52a <VAS::VAS(bool)>
c00181b7:	83 c4 10             	add    esp,0x10
c00181ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181be:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00181c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181c8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00181d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181da:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00181e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181e4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00181ea:	85 c0                	test   eax,eax
c00181ec:	74 42                	je     c0018230 <Process::Process(char const*, Process*, char**)+0x114>
c00181ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181f2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00181f8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00181fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018202:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001820c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018212:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018218:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001821c:	05 0c 01 00 00       	add    eax,0x10c
c0018221:	83 ec 08             	sub    esp,0x8
c0018224:	52                   	push   edx
c0018225:	50                   	push   eax
c0018226:	e8 15 85 fe ff       	call   c0000740 <strcpy>
c001822b:	83 c4 10             	add    esp,0x10
c001822e:	eb 64                	jmp    c0018294 <Process::Process(char const*, Process*, char**)+0x178>
c0018230:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0018238:	83 ec 0c             	sub    esp,0xc
c001823b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001823f:	e8 cb 17 ff ff       	call   c0009a0f <malloc>
c0018244:	83 c4 10             	add    esp,0x10
c0018247:	89 c3                	mov    ebx,eax
c0018249:	83 ec 08             	sub    esp,0x8
c001824c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018250:	53                   	push   ebx
c0018251:	e8 e6 2d ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c0018256:	83 c4 10             	add    esp,0x10
c0018259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001825d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018263:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018267:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001826d:	83 ec 0c             	sub    esp,0xc
c0018270:	50                   	push   eax
c0018271:	e8 85 25 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c0018276:	83 c4 10             	add    esp,0x10
c0018279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001827d:	05 0c 01 00 00       	add    eax,0x10c
c0018282:	83 ec 08             	sub    esp,0x8
c0018285:	68 60 61 02 c0       	push   0xc0026160
c001828a:	50                   	push   eax
c001828b:	e8 b0 84 fe ff       	call   c0000740 <strcpy>
c0018290:	83 c4 10             	add    esp,0x10
c0018293:	90                   	nop
c0018294:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018298:	83 c0 0c             	add    eax,0xc
c001829b:	83 ec 08             	sub    esp,0x8
c001829e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182a2:	50                   	push   eax
c00182a3:	e8 98 84 fe ff       	call   c0000740 <strcpy>
c00182a8:	83 c4 10             	add    esp,0x10
c00182ab:	83 ec 08             	sub    esp,0x8
c00182ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00182b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182b6:	e8 01 fe ff ff       	call   c00180bc <Process::addArgs(char**)>
c00182bb:	83 c4 10             	add    esp,0x10
c00182be:	83 ec 08             	sub    esp,0x8
c00182c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182c9:	e8 89 ed ff ff       	call   c0017057 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00182ce:	83 c4 10             	add    esp,0x10
c00182d1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00182d5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00182d9:	83 f0 01             	xor    eax,0x1
c00182dc:	88 c2                	mov    dl,al
c00182de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182e2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00182e8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00182ed:	83 ec 08             	sub    esp,0x8
c00182f0:	50                   	push   eax
c00182f1:	68 b8 61 02 c0       	push   0xc00261b8
c00182f6:	e8 04 4a ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00182fb:	83 c4 10             	add    esp,0x10
c00182fe:	90                   	nop
c00182ff:	83 c4 14             	add    esp,0x14
c0018302:	5b                   	pop    ebx
c0018303:	5e                   	pop    esi
c0018304:	c3                   	ret    
c0018305:	90                   	nop
c0018306:	66 90                	xchg   ax,ax

c0018308 <Process::Process(bool, char const*, Process*, char**)>:
c0018308:	56                   	push   esi
c0018309:	53                   	push   ebx
c001830a:	83 ec 24             	sub    esp,0x24
c001830d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018311:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018315:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018319:	05 0c 02 00 00       	add    eax,0x20c
c001831e:	bb 07 00 00 00       	mov    ebx,0x7
c0018323:	89 c6                	mov    esi,eax
c0018325:	8d 76 00             	lea    esi,[esi+0x0]
c0018328:	85 db                	test   ebx,ebx
c001832a:	78 14                	js     c0018340 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001832c:	83 ec 0c             	sub    esp,0xc
c001832f:	56                   	push   esi
c0018330:	e8 cb ad 00 00       	call   c0023100 <ThreadControlBlock::ThreadControlBlock()>
c0018335:	83 c4 10             	add    esp,0x10
c0018338:	83 c6 5f             	add    esi,0x5f
c001833b:	4b                   	dec    ebx
c001833c:	eb ea                	jmp    c0018328 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001833e:	66 90                	xchg   ax,ax
c0018340:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018344:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001834b:	83 ec 0c             	sub    esp,0xc
c001834e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018352:	e8 f9 c4 ff ff       	call   c0014850 <Krnl::newProcessEnv(Process*)>
c0018357:	83 c4 10             	add    esp,0x10
c001835a:	89 c2                	mov    edx,eax
c001835c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018360:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018366:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001836a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018373:	a1 10 7b 02 c0       	mov    eax,ds:0xc0027b10
c0018378:	8d 50 01             	lea    edx,[eax+0x1]
c001837b:	89 15 10 7b 02 c0    	mov    DWORD PTR ds:0xc0027b10,edx
c0018381:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018385:	89 02                	mov    DWORD PTR [edx],eax
c0018387:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001838f:	83 ec 0c             	sub    esp,0xc
c0018392:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018396:	e8 74 16 ff ff       	call   c0009a0f <malloc>
c001839b:	83 c4 10             	add    esp,0x10
c001839e:	89 c3                	mov    ebx,eax
c00183a0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00183a5:	83 ec 08             	sub    esp,0x8
c00183a8:	50                   	push   eax
c00183a9:	53                   	push   ebx
c00183aa:	e8 7b 41 ff ff       	call   c000c52a <VAS::VAS(bool)>
c00183af:	83 c4 10             	add    esp,0x10
c00183b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183b6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00183bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183c0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00183ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00183d2:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00183d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00183e2:	85 c0                	test   eax,eax
c00183e4:	74 42                	je     c0018428 <Process::Process(bool, char const*, Process*, char**)+0x120>
c00183e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ea:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00183f0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00183f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183fa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018400:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018404:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001840a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018410:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018414:	05 0c 01 00 00       	add    eax,0x10c
c0018419:	83 ec 08             	sub    esp,0x8
c001841c:	52                   	push   edx
c001841d:	50                   	push   eax
c001841e:	e8 1d 83 fe ff       	call   c0000740 <strcpy>
c0018423:	83 c4 10             	add    esp,0x10
c0018426:	eb 64                	jmp    c001848c <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018428:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0018430:	83 ec 0c             	sub    esp,0xc
c0018433:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018437:	e8 d3 15 ff ff       	call   c0009a0f <malloc>
c001843c:	83 c4 10             	add    esp,0x10
c001843f:	89 c3                	mov    ebx,eax
c0018441:	83 ec 08             	sub    esp,0x8
c0018444:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018448:	53                   	push   ebx
c0018449:	e8 ee 2b ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c001844e:	83 c4 10             	add    esp,0x10
c0018451:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018455:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001845b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001845f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018465:	83 ec 0c             	sub    esp,0xc
c0018468:	50                   	push   eax
c0018469:	e8 8d 23 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c001846e:	83 c4 10             	add    esp,0x10
c0018471:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018475:	05 0c 01 00 00       	add    eax,0x10c
c001847a:	83 ec 08             	sub    esp,0x8
c001847d:	68 60 61 02 c0       	push   0xc0026160
c0018482:	50                   	push   eax
c0018483:	e8 b8 82 fe ff       	call   c0000740 <strcpy>
c0018488:	83 c4 10             	add    esp,0x10
c001848b:	90                   	nop
c001848c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018490:	83 c0 0c             	add    eax,0xc
c0018493:	83 ec 08             	sub    esp,0x8
c0018496:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001849a:	50                   	push   eax
c001849b:	e8 a0 82 fe ff       	call   c0000740 <strcpy>
c00184a0:	83 c4 10             	add    esp,0x10
c00184a3:	83 ec 08             	sub    esp,0x8
c00184a6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00184aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00184ae:	e8 09 fc ff ff       	call   c00180bc <Process::addArgs(char**)>
c00184b3:	83 c4 10             	add    esp,0x10
c00184b6:	90                   	nop
c00184b7:	83 c4 24             	add    esp,0x24
c00184ba:	5b                   	pop    ebx
c00184bb:	5e                   	pop    esi
c00184bc:	c3                   	ret    
c00184bd:	8d 76 00             	lea    esi,[esi+0x0]

c00184c0 <taskStartupFunction>:
c00184c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184c5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00184c8:	c3                   	ret    
c00184c9:	90                   	nop
c00184ca:	66 90                	xchg   ax,ax

c00184cc <Semaphore::Semaphore(int)>:
c00184cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184d4:	89 10                	mov    DWORD PTR [eax],edx
c00184d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184da:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00184e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00184ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184f0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00184f7:	90                   	nop
c00184f8:	c3                   	ret    
c00184f9:	90                   	nop
c00184fa:	66 90                	xchg   ax,ax

c00184fc <Mutex::Mutex()>:
c00184fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018500:	6a 01                	push   0x1
c0018502:	50                   	push   eax
c0018503:	e8 c4 ff ff ff       	call   c00184cc <Semaphore::Semaphore(int)>
c0018508:	83 c4 08             	add    esp,0x8
c001850b:	90                   	nop
c001850c:	c3                   	ret    
c001850d:	90                   	nop
c001850e:	66 90                	xchg   ax,ax

c0018510 <Process::createThread(void (*)(void*), void*, int)>:
c0018510:	57                   	push   edi
c0018511:	31 c9                	xor    ecx,ecx
c0018513:	56                   	push   esi
c0018514:	53                   	push   ebx
c0018515:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018519:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018520:	89 f2                	mov    edx,esi
c0018522:	66 90                	xchg   ax,ax
c0018524:	0f b7 c2             	movzx  eax,dx
c0018527:	83 e2 01             	and    edx,0x1
c001852a:	74 14                	je     c0018540 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001852c:	d1 f8                	sar    eax,1
c001852e:	41                   	inc    ecx
c001852f:	89 c2                	mov    edx,eax
c0018531:	83 f9 10             	cmp    ecx,0x10
c0018534:	75 ee                	jne    c0018524 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018536:	31 db                	xor    ebx,ebx
c0018538:	89 d8                	mov    eax,ebx
c001853a:	5b                   	pop    ebx
c001853b:	5e                   	pop    esi
c001853c:	5f                   	pop    edi
c001853d:	c3                   	ret    
c001853e:	66 90                	xchg   ax,ax
c0018540:	b8 01 00 00 00       	mov    eax,0x1
c0018545:	d3 e0                	shl    eax,cl
c0018547:	09 c6                	or     esi,eax
c0018549:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001854c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018553:	01 c0                	add    eax,eax
c0018555:	01 c8                	add    eax,ecx
c0018557:	8d 04 80             	lea    eax,[eax+eax*4]
c001855a:	01 d8                	add    eax,ebx
c001855c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018563:	75 0b                	jne    c0018570 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018565:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001856f:	90                   	nop
c0018570:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018576:	83 ec 08             	sub    esp,0x8
c0018579:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001857c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001857f:	01 c0                	add    eax,eax
c0018581:	01 c8                	add    eax,ecx
c0018583:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018586:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018589:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001858f:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018595:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018599:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001859f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00185a5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00185ac:	89 ca                	mov    edx,ecx
c00185ae:	f7 da                	neg    edx
c00185b0:	c1 e2 15             	shl    edx,0x15
c00185b3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00185b9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00185bf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00185c3:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00185cd:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00185d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185d7:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00185dd:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00185e7:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00185f1:	53                   	push   ebx
c00185f2:	68 24 96 02 c0       	push   0xc0029624
c00185f7:	e8 a4 a8 00 00       	call   c0022ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00185fc:	83 c4 10             	add    esp,0x10
c00185ff:	89 d8                	mov    eax,ebx
c0018601:	5b                   	pop    ebx
c0018602:	5e                   	pop    esi
c0018603:	5f                   	pop    edi
c0018604:	c3                   	ret    
c0018605:	90                   	nop
c0018606:	66 90                	xchg   ax,ax

c0018608 <Process::createUserThread()>:
c0018608:	83 ec 0c             	sub    esp,0xc
c001860b:	68 80 00 00 00       	push   0x80
c0018610:	6a 00                	push   0x0
c0018612:	68 b0 7f 01 c0       	push   0xc0017fb0
c0018617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001861b:	e8 f0 fe ff ff       	call   c0018510 <Process::createThread(void (*)(void*), void*, int)>
c0018620:	83 c4 1c             	add    esp,0x1c
c0018623:	c3                   	ret    

c0018624 <setupMultitasking(void (*)())>:
c0018624:	56                   	push   esi
c0018625:	53                   	push   ebx
c0018626:	51                   	push   ecx
c0018627:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001862b:	eb 13                	jmp    c0018640 <setupMultitasking(void (*)())+0x1c>
c001862d:	8d 76 00             	lea    esi,[esi+0x0]
c0018630:	83 ec 0c             	sub    esp,0xc
c0018633:	68 24 96 02 c0       	push   0xc0029624
c0018638:	e8 ab a7 00 00       	call   c0022de8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001863d:	83 c4 10             	add    esp,0x10
c0018640:	83 ec 0c             	sub    esp,0xc
c0018643:	68 24 96 02 c0       	push   0xc0029624
c0018648:	e8 77 a7 00 00       	call   c0022dc4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001864d:	83 c4 10             	add    esp,0x10
c0018650:	84 c0                	test   al,al
c0018652:	74 dc                	je     c0018630 <setupMultitasking(void (*)())+0xc>
c0018654:	83 ec 0c             	sub    esp,0xc
c0018657:	68 1f 07 00 00       	push   0x71f
c001865c:	e8 ae 13 ff ff       	call   c0009a0f <malloc>
c0018661:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018668:	89 c3                	mov    ebx,eax
c001866a:	6a 00                	push   0x0
c001866c:	68 64 61 02 c0       	push   0xc0026164
c0018671:	6a 01                	push   0x1
c0018673:	50                   	push   eax
c0018674:	e8 8f fc ff ff       	call   c0018308 <Process::Process(bool, char const*, Process*, char**)>
c0018679:	83 c4 14             	add    esp,0x14
c001867c:	89 1d 30 96 02 c0    	mov    DWORD PTR ds:0xc0029630,ebx
c0018682:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018688:	e8 7c 24 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c001868d:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018695:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001869f:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00186a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00186a8:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00186b2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00186b8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00186be:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00186c8:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c00186d2:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00186dc:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00186e2:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00186ec:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00186f2:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00186fc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018702:	58                   	pop    eax
c0018703:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018709:	5a                   	pop    edx
c001870a:	68 60 61 02 c0       	push   0xc0026160
c001870f:	50                   	push   eax
c0018710:	e8 2b 80 fe ff       	call   c0000740 <strcpy>
c0018715:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001871c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018720:	83 c4 14             	add    esp,0x14
c0018723:	5b                   	pop    ebx
c0018724:	5e                   	pop    esi
c0018725:	e9 5f 7b fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001872a:	66 90                	xchg   ax,ax

c001872c <schedule()>:
c001872c:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c0018731:	85 c0                	test   eax,eax
c0018733:	74 0b                	je     c0018740 <schedule()+0x14>
c0018735:	c7 05 00 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x1
c001873f:	c3                   	ret    
c0018740:	53                   	push   ebx
c0018741:	83 ec 14             	sub    esp,0x14
c0018744:	68 24 96 02 c0       	push   0xc0029624
c0018749:	e8 76 a6 00 00       	call   c0022dc4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001874e:	83 c4 10             	add    esp,0x10
c0018751:	84 c0                	test   al,al
c0018753:	75 3b                	jne    c0018790 <schedule()+0x64>
c0018755:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001875a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001875d:	4a                   	dec    edx
c001875e:	74 38                	je     c0018798 <schedule()+0x6c>
c0018760:	83 ec 0c             	sub    esp,0xc
c0018763:	68 24 96 02 c0       	push   0xc0029624
c0018768:	e8 73 a6 00 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001876d:	c7 04 24 24 96 02 c0 	mov    DWORD PTR [esp],0xc0029624
c0018774:	89 c3                	mov    ebx,eax
c0018776:	e8 6d a6 00 00       	call   c0022de8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001877b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018785:	e8 7e f8 ff ff       	call   c0018008 <switchToThread(ThreadControlBlock*)>
c001878a:	83 c4 10             	add    esp,0x10
c001878d:	8d 76 00             	lea    esi,[esi+0x0]
c0018790:	83 c4 08             	add    esp,0x8
c0018793:	5b                   	pop    ebx
c0018794:	c3                   	ret    
c0018795:	8d 76 00             	lea    esi,[esi+0x0]
c0018798:	83 ec 08             	sub    esp,0x8
c001879b:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00187a2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00187a8:	68 24 96 02 c0       	push   0xc0029624
c00187ad:	e8 ee a6 00 00       	call   c0022ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00187b2:	83 c4 10             	add    esp,0x10
c00187b5:	eb a9                	jmp    c0018760 <schedule()+0x34>
c00187b7:	90                   	nop

c00187b8 <Semaphore::tryAcquire()>:
c00187b8:	53                   	push   ebx
c00187b9:	83 ec 08             	sub    esp,0x8
c00187bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00187c0:	fa                   	cli    
c00187c1:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00187c6:	8d 50 01             	lea    edx,[eax+0x1]
c00187c9:	89 15 08 96 02 c0    	mov    DWORD PTR ds:0xc0029608,edx
c00187cf:	8b 15 04 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029604
c00187d5:	8d 5a 01             	lea    ebx,[edx+0x1]
c00187d8:	89 1d 04 96 02 c0    	mov    DWORD PTR ds:0xc0029604,ebx
c00187de:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00187e1:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00187e3:	7c 33                	jl     c0018818 <Semaphore::tryAcquire()+0x60>
c00187e5:	89 15 04 96 02 c0    	mov    DWORD PTR ds:0xc0029604,edx
c00187eb:	85 d2                	test   edx,edx
c00187ed:	75 0d                	jne    c00187fc <Semaphore::tryAcquire()+0x44>
c00187ef:	8b 15 00 96 02 c0    	mov    edx,DWORD PTR ds:0xc0029600
c00187f5:	85 d2                	test   edx,edx
c00187f7:	75 6b                	jne    c0018864 <Semaphore::tryAcquire()+0xac>
c00187f9:	8d 76 00             	lea    esi,[esi+0x0]
c00187fc:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018801:	85 c0                	test   eax,eax
c0018803:	74 0b                	je     c0018810 <Semaphore::tryAcquire()+0x58>
c0018805:	8d 76 00             	lea    esi,[esi+0x0]
c0018808:	31 c0                	xor    eax,eax
c001880a:	83 c4 08             	add    esp,0x8
c001880d:	5b                   	pop    ebx
c001880e:	c3                   	ret    
c001880f:	90                   	nop
c0018810:	fb                   	sti    
c0018811:	83 c4 08             	add    esp,0x8
c0018814:	5b                   	pop    ebx
c0018815:	c3                   	ret    
c0018816:	66 90                	xchg   ax,ax
c0018818:	43                   	inc    ebx
c0018819:	89 15 04 96 02 c0    	mov    DWORD PTR ds:0xc0029604,edx
c001881f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0018822:	85 d2                	test   edx,edx
c0018824:	75 22                	jne    c0018848 <Semaphore::tryAcquire()+0x90>
c0018826:	8b 0d 00 96 02 c0    	mov    ecx,DWORD PTR ds:0xc0029600
c001882c:	85 c9                	test   ecx,ecx
c001882e:	74 18                	je     c0018848 <Semaphore::tryAcquire()+0x90>
c0018830:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c001883a:	e8 ed fe ff ff       	call   c001872c <schedule()>
c001883f:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018844:	48                   	dec    eax
c0018845:	8d 76 00             	lea    esi,[esi+0x0]
c0018848:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c001884d:	85 c0                	test   eax,eax
c001884f:	75 0b                	jne    c001885c <Semaphore::tryAcquire()+0xa4>
c0018851:	fb                   	sti    
c0018852:	b0 01                	mov    al,0x1
c0018854:	83 c4 08             	add    esp,0x8
c0018857:	5b                   	pop    ebx
c0018858:	c3                   	ret    
c0018859:	8d 76 00             	lea    esi,[esi+0x0]
c001885c:	b0 01                	mov    al,0x1
c001885e:	83 c4 08             	add    esp,0x8
c0018861:	5b                   	pop    ebx
c0018862:	c3                   	ret    
c0018863:	90                   	nop
c0018864:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c001886e:	e8 b9 fe ff ff       	call   c001872c <schedule()>
c0018873:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018878:	48                   	dec    eax
c0018879:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c001887e:	85 c0                	test   eax,eax
c0018880:	75 86                	jne    c0018808 <Semaphore::tryAcquire()+0x50>
c0018882:	eb 8c                	jmp    c0018810 <Semaphore::tryAcquire()+0x58>

c0018884 <Semaphore::assertLocked(char const*)>:
c0018884:	83 ec 0c             	sub    esp,0xc
c0018887:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001888b:	fa                   	cli    
c001888c:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0018892:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c0018897:	8d 48 01             	lea    ecx,[eax+0x1]
c001889a:	89 0d 04 96 02 c0    	mov    DWORD PTR ds:0xc0029604,ecx
c00188a0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00188a2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00188a5:	7c 29                	jl     c00188d0 <Semaphore::assertLocked(char const*)+0x4c>
c00188a7:	90                   	nop
c00188a8:	a3 04 96 02 c0       	mov    ds:0xc0029604,eax
c00188ad:	85 c0                	test   eax,eax
c00188af:	75 0b                	jne    c00188bc <Semaphore::assertLocked(char const*)+0x38>
c00188b1:	a1 00 96 02 c0       	mov    eax,ds:0xc0029600
c00188b6:	85 c0                	test   eax,eax
c00188b8:	75 2e                	jne    c00188e8 <Semaphore::assertLocked(char const*)+0x64>
c00188ba:	66 90                	xchg   ax,ax
c00188bc:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00188c1:	48                   	dec    eax
c00188c2:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c00188c7:	75 03                	jne    c00188cc <Semaphore::assertLocked(char const*)+0x48>
c00188c9:	fb                   	sti    
c00188ca:	66 90                	xchg   ax,ax
c00188cc:	83 c4 0c             	add    esp,0xc
c00188cf:	c3                   	ret    
c00188d0:	83 ec 0c             	sub    esp,0xc
c00188d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00188d7:	e8 eb c0 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c00188dc:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c00188e1:	83 c4 10             	add    esp,0x10
c00188e4:	48                   	dec    eax
c00188e5:	eb c1                	jmp    c00188a8 <Semaphore::assertLocked(char const*)+0x24>
c00188e7:	90                   	nop
c00188e8:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c00188f2:	e8 35 fe ff ff       	call   c001872c <schedule()>
c00188f7:	eb c3                	jmp    c00188bc <Semaphore::assertLocked(char const*)+0x38>
c00188f9:	8d 76 00             	lea    esi,[esi+0x0]

c00188fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00188fc:	83 ec 0c             	sub    esp,0xc
c00188ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018904:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018908:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001890b:	e8 1c fe ff ff       	call   c001872c <schedule()>
c0018910:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018915:	48                   	dec    eax
c0018916:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c001891b:	75 03                	jne    c0018920 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001891d:	fb                   	sti    
c001891e:	66 90                	xchg   ax,ax
c0018920:	83 c4 0c             	add    esp,0xc
c0018923:	c3                   	ret    

c0018924 <blockTask(TaskState)>:
c0018924:	83 ec 0c             	sub    esp,0xc
c0018927:	fa                   	cli    
c0018928:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c001892e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018932:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018937:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001893a:	e8 ed fd ff ff       	call   c001872c <schedule()>
c001893f:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018944:	48                   	dec    eax
c0018945:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c001894a:	75 04                	jne    c0018950 <blockTask(TaskState)+0x2c>
c001894c:	fb                   	sti    
c001894d:	8d 76 00             	lea    esi,[esi+0x0]
c0018950:	83 c4 0c             	add    esp,0xc
c0018953:	c3                   	ret    

c0018954 <waitTask(int, int*, int)>:
c0018954:	83 ec 18             	sub    esp,0x18
c0018957:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001895c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018960:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0018963:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001896c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001896f:	6a 07                	push   0x7
c0018971:	e8 ae ff ff ff       	call   c0018924 <blockTask(TaskState)>
c0018976:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001897b:	83 c4 10             	add    esp,0x10
c001897e:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018981:	85 d2                	test   edx,edx
c0018983:	74 0b                	je     c0018990 <waitTask(int, int*, int)+0x3c>
c0018985:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0018988:	89 02                	mov    DWORD PTR [edx],eax
c001898a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001898f:	90                   	nop
c0018990:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018993:	83 c4 0c             	add    esp,0xc
c0018996:	c3                   	ret    
c0018997:	90                   	nop

c0018998 <milliTenthSleepUntil(unsigned int)>:
c0018998:	83 ec 0c             	sub    esp,0xc
c001899b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001899f:	39 05 0c 87 02 c0    	cmp    DWORD PTR ds:0xc002870c,eax
c00189a5:	76 05                	jbe    c00189ac <milliTenthSleepUntil(unsigned int)+0x14>
c00189a7:	90                   	nop
c00189a8:	83 c4 0c             	add    esp,0xc
c00189ab:	c3                   	ret    
c00189ac:	fa                   	cli    
c00189ad:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c00189b3:	83 ec 08             	sub    esp,0x8
c00189b6:	ff 05 04 96 02 c0    	inc    DWORD PTR ds:0xc0029604
c00189bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00189c2:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00189c5:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00189cb:	68 18 96 02 c0       	push   0xc0029618
c00189d0:	e8 cb a4 00 00       	call   c0022ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00189d5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00189dc:	e8 43 ff ff ff       	call   c0018924 <blockTask(TaskState)>
c00189e1:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c00189e6:	83 c4 10             	add    esp,0x10
c00189e9:	48                   	dec    eax
c00189ea:	a3 04 96 02 c0       	mov    ds:0xc0029604,eax
c00189ef:	85 c0                	test   eax,eax
c00189f1:	75 09                	jne    c00189fc <milliTenthSleepUntil(unsigned int)+0x64>
c00189f3:	a1 00 96 02 c0       	mov    eax,ds:0xc0029600
c00189f8:	85 c0                	test   eax,eax
c00189fa:	75 14                	jne    c0018a10 <milliTenthSleepUntil(unsigned int)+0x78>
c00189fc:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018a01:	48                   	dec    eax
c0018a02:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018a07:	75 9f                	jne    c00189a8 <milliTenthSleepUntil(unsigned int)+0x10>
c0018a09:	fb                   	sti    
c0018a0a:	83 c4 0c             	add    esp,0xc
c0018a0d:	c3                   	ret    
c0018a0e:	66 90                	xchg   ax,ax
c0018a10:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c0018a1a:	e8 0d fd ff ff       	call   c001872c <schedule()>
c0018a1f:	eb db                	jmp    c00189fc <milliTenthSleepUntil(unsigned int)+0x64>
c0018a21:	8d 76 00             	lea    esi,[esi+0x0]

c0018a24 <milliTenthSleep(unsigned int)>:
c0018a24:	a1 0c 87 02 c0       	mov    eax,ds:0xc002870c
c0018a29:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018a2d:	e9 66 ff ff ff       	jmp    c0018998 <milliTenthSleepUntil(unsigned int)>
c0018a32:	66 90                	xchg   ax,ax

c0018a34 <sleep(unsigned int)>:
c0018a34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018a38:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a3b:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a3e:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a41:	8d 04 80             	lea    eax,[eax+eax*4]
c0018a44:	c1 e0 04             	shl    eax,0x4
c0018a47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018a4b:	eb d7                	jmp    c0018a24 <milliTenthSleep(unsigned int)>
c0018a4d:	90                   	nop
c0018a4e:	66 90                	xchg   ax,ax

c0018a50 <Semaphore::acquire()>:
c0018a50:	83 ec 0c             	sub    esp,0xc
c0018a53:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018a57:	fa                   	cli    
c0018a58:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c0018a5d:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0018a63:	8d 48 01             	lea    ecx,[eax+0x1]
c0018a66:	89 0d 04 96 02 c0    	mov    DWORD PTR ds:0xc0029604,ecx
c0018a6c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018a6f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018a71:	7d 2d                	jge    c0018aa0 <Semaphore::acquire()+0x50>
c0018a73:	41                   	inc    ecx
c0018a74:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0018a77:	90                   	nop
c0018a78:	a3 04 96 02 c0       	mov    ds:0xc0029604,eax
c0018a7d:	85 c0                	test   eax,eax
c0018a7f:	75 0b                	jne    c0018a8c <Semaphore::acquire()+0x3c>
c0018a81:	a1 00 96 02 c0       	mov    eax,ds:0xc0029600
c0018a86:	85 c0                	test   eax,eax
c0018a88:	75 62                	jne    c0018aec <Semaphore::acquire()+0x9c>
c0018a8a:	66 90                	xchg   ax,ax
c0018a8c:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018a91:	48                   	dec    eax
c0018a92:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018a97:	75 03                	jne    c0018a9c <Semaphore::acquire()+0x4c>
c0018a99:	fb                   	sti    
c0018a9a:	66 90                	xchg   ax,ax
c0018a9c:	83 c4 0c             	add    esp,0xc
c0018a9f:	c3                   	ret    
c0018aa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018aa5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018aac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018aaf:	85 c9                	test   ecx,ecx
c0018ab1:	74 4d                	je     c0018b00 <Semaphore::acquire()+0xb0>
c0018ab3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0018ab6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018abc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018abf:	90                   	nop
c0018ac0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ac5:	83 ec 0c             	sub    esp,0xc
c0018ac8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0018acb:	68 e0 61 02 c0       	push   0xc00261e0
c0018ad0:	e8 2a 42 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018ad5:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018adc:	e8 43 fe ff ff       	call   c0018924 <blockTask(TaskState)>
c0018ae1:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c0018ae6:	83 c4 10             	add    esp,0x10
c0018ae9:	48                   	dec    eax
c0018aea:	eb 8c                	jmp    c0018a78 <Semaphore::acquire()+0x28>
c0018aec:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c0018af6:	e8 31 fc ff ff       	call   c001872c <schedule()>
c0018afb:	eb 8f                	jmp    c0018a8c <Semaphore::acquire()+0x3c>
c0018afd:	8d 76 00             	lea    esi,[esi+0x0]
c0018b00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b05:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018b08:	eb b6                	jmp    c0018ac0 <Semaphore::acquire()+0x70>
c0018b0a:	66 90                	xchg   ax,ax

c0018b0c <taskReturned>:
c0018b0c:	83 ec 18             	sub    esp,0x18
c0018b0f:	68 00 62 02 c0       	push   0xc0026200
c0018b14:	e8 ae be ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0018b19:	83 c4 10             	add    esp,0x10
c0018b1c:	83 ec 0c             	sub    esp,0xc
c0018b1f:	6a 02                	push   0x2
c0018b21:	e8 fe fd ff ff       	call   c0018924 <blockTask(TaskState)>
c0018b26:	fa                   	cli    
c0018b27:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0018b2d:	e8 fa fb ff ff       	call   c001872c <schedule()>
c0018b32:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018b37:	83 c4 10             	add    esp,0x10
c0018b3a:	48                   	dec    eax
c0018b3b:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018b40:	85 c0                	test   eax,eax
c0018b42:	75 d8                	jne    c0018b1c <taskReturned+0x10>
c0018b44:	fb                   	sti    
c0018b45:	eb d5                	jmp    c0018b1c <taskReturned+0x10>
c0018b47:	90                   	nop

c0018b48 <Thr::processFromPID(int)>:
c0018b48:	57                   	push   edi
c0018b49:	56                   	push   esi
c0018b4a:	53                   	push   ebx
c0018b4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b4f:	fa                   	cli    
c0018b50:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0018b56:	83 ec 0c             	sub    esp,0xc
c0018b59:	68 24 96 02 c0       	push   0xc0029624
c0018b5e:	e8 7d a2 00 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b63:	83 c4 10             	add    esp,0x10
c0018b66:	89 c7                	mov    edi,eax
c0018b68:	eb 16                	jmp    c0018b80 <Thr::processFromPID(int)+0x38>
c0018b6a:	66 90                	xchg   ax,ax
c0018b6c:	83 ec 0c             	sub    esp,0xc
c0018b6f:	68 24 96 02 c0       	push   0xc0029624
c0018b74:	e8 67 a2 00 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b79:	83 c4 10             	add    esp,0x10
c0018b7c:	39 f8                	cmp    eax,edi
c0018b7e:	74 4c                	je     c0018bcc <Thr::processFromPID(int)+0x84>
c0018b80:	83 ec 0c             	sub    esp,0xc
c0018b83:	68 24 96 02 c0       	push   0xc0029624
c0018b88:	e8 53 a2 00 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018b8d:	c7 04 24 24 96 02 c0 	mov    DWORD PTR [esp],0xc0029624
c0018b94:	89 c3                	mov    ebx,eax
c0018b96:	e8 4d a2 00 00       	call   c0022de8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018b9b:	58                   	pop    eax
c0018b9c:	5a                   	pop    edx
c0018b9d:	53                   	push   ebx
c0018b9e:	68 24 96 02 c0       	push   0xc0029624
c0018ba3:	e8 f8 a2 00 00       	call   c0022ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ba8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018bab:	83 c4 10             	add    esp,0x10
c0018bae:	39 30                	cmp    DWORD PTR [eax],esi
c0018bb0:	75 ba                	jne    c0018b6c <Thr::processFromPID(int)+0x24>
c0018bb2:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018bb7:	48                   	dec    eax
c0018bb8:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018bbd:	74 09                	je     c0018bc8 <Thr::processFromPID(int)+0x80>
c0018bbf:	90                   	nop
c0018bc0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018bc3:	5b                   	pop    ebx
c0018bc4:	5e                   	pop    esi
c0018bc5:	5f                   	pop    edi
c0018bc6:	c3                   	ret    
c0018bc7:	90                   	nop
c0018bc8:	fb                   	sti    
c0018bc9:	eb f5                	jmp    c0018bc0 <Thr::processFromPID(int)+0x78>
c0018bcb:	90                   	nop
c0018bcc:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018bd1:	48                   	dec    eax
c0018bd2:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018bd7:	75 07                	jne    c0018be0 <Thr::processFromPID(int)+0x98>
c0018bd9:	fb                   	sti    
c0018bda:	5b                   	pop    ebx
c0018bdb:	5e                   	pop    esi
c0018bdc:	5f                   	pop    edi
c0018bdd:	c3                   	ret    
c0018bde:	66 90                	xchg   ax,ax
c0018be0:	5b                   	pop    ebx
c0018be1:	31 c0                	xor    eax,eax
c0018be3:	5e                   	pop    esi
c0018be4:	5f                   	pop    edi
c0018be5:	c3                   	ret    
c0018be6:	66 90                	xchg   ax,ax

c0018be8 <unblockTask(ThreadControlBlock*)>:
c0018be8:	53                   	push   ebx
c0018be9:	83 ec 08             	sub    esp,0x8
c0018bec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018bf0:	fa                   	cli    
c0018bf1:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0018bf7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018bfa:	85 c0                	test   eax,eax
c0018bfc:	74 66                	je     c0018c64 <unblockTask(ThreadControlBlock*)+0x7c>
c0018bfe:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018c01:	48                   	dec    eax
c0018c02:	74 38                	je     c0018c3c <unblockTask(ThreadControlBlock*)+0x54>
c0018c04:	83 ec 0c             	sub    esp,0xc
c0018c07:	68 24 96 02 c0       	push   0xc0029624
c0018c0c:	e8 cf a1 00 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c11:	83 c4 10             	add    esp,0x10
c0018c14:	85 c0                	test   eax,eax
c0018c16:	75 1c                	jne    c0018c34 <unblockTask(ThreadControlBlock*)+0x4c>
c0018c18:	eb 5e                	jmp    c0018c78 <unblockTask(ThreadControlBlock*)+0x90>
c0018c1a:	66 90                	xchg   ax,ax
c0018c1c:	83 ec 08             	sub    esp,0x8
c0018c1f:	50                   	push   eax
c0018c20:	68 24 96 02 c0       	push   0xc0029624
c0018c25:	e8 66 a5 00 00       	call   c0023190 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018c2a:	83 c4 10             	add    esp,0x10
c0018c2d:	85 c0                	test   eax,eax
c0018c2f:	74 47                	je     c0018c78 <unblockTask(ThreadControlBlock*)+0x90>
c0018c31:	8d 76 00             	lea    esi,[esi+0x0]
c0018c34:	39 c3                	cmp    ebx,eax
c0018c36:	75 e4                	jne    c0018c1c <unblockTask(ThreadControlBlock*)+0x34>
c0018c38:	eb 12                	jmp    c0018c4c <unblockTask(ThreadControlBlock*)+0x64>
c0018c3a:	66 90                	xchg   ax,ax
c0018c3c:	83 ec 0c             	sub    esp,0xc
c0018c3f:	68 82 61 02 c0       	push   0xc0026182
c0018c44:	e8 b6 40 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018c49:	83 c4 10             	add    esp,0x10
c0018c4c:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018c51:	48                   	dec    eax
c0018c52:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018c57:	75 03                	jne    c0018c5c <unblockTask(ThreadControlBlock*)+0x74>
c0018c59:	fb                   	sti    
c0018c5a:	66 90                	xchg   ax,ax
c0018c5c:	83 c4 08             	add    esp,0x8
c0018c5f:	5b                   	pop    ebx
c0018c60:	c3                   	ret    
c0018c61:	8d 76 00             	lea    esi,[esi+0x0]
c0018c64:	83 ec 0c             	sub    esp,0xc
c0018c67:	68 6b 61 02 c0       	push   0xc002616b
c0018c6c:	e8 8e 40 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018c71:	83 c4 10             	add    esp,0x10
c0018c74:	eb d6                	jmp    c0018c4c <unblockTask(ThreadControlBlock*)+0x64>
c0018c76:	66 90                	xchg   ax,ax
c0018c78:	83 ec 08             	sub    esp,0x8
c0018c7b:	53                   	push   ebx
c0018c7c:	68 24 96 02 c0       	push   0xc0029624
c0018c81:	e8 1a a2 00 00       	call   c0022ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c86:	83 c4 10             	add    esp,0x10
c0018c89:	eb c1                	jmp    c0018c4c <unblockTask(ThreadControlBlock*)+0x64>
c0018c8b:	90                   	nop

c0018c8c <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018c8c:	55                   	push   ebp
c0018c8d:	57                   	push   edi
c0018c8e:	56                   	push   esi
c0018c8f:	53                   	push   ebx
c0018c90:	83 ec 1c             	sub    esp,0x1c
c0018c93:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018c97:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c9a:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018ca0:	85 ff                	test   edi,edi
c0018ca2:	7e 24                	jle    c0018cc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018ca4:	31 f6                	xor    esi,esi
c0018ca6:	66 90                	xchg   ax,ax
c0018ca8:	83 ec 0c             	sub    esp,0xc
c0018cab:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018cb2:	46                   	inc    esi
c0018cb3:	e8 67 0d ff ff       	call   c0009a1f <free>
c0018cb8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018cbb:	83 c4 10             	add    esp,0x10
c0018cbe:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018cc4:	7f e2                	jg     c0018ca8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018cc6:	66 90                	xchg   ax,ax
c0018cc8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018cd2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018cd7:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018cda:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018cdd:	d3 c0                	rol    eax,cl
c0018cdf:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018ce6:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018ce9:	89 f7                	mov    edi,esi
c0018ceb:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018cf3:	0f 85 73 01 00 00    	jne    c0018e6c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018cf9:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018cff:	85 ed                	test   ebp,ebp
c0018d01:	74 1d                	je     c0018d20 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018d03:	83 ec 0c             	sub    esp,0xc
c0018d06:	55                   	push   ebp
c0018d07:	e8 60 ba ff ff       	call   c001476c <EnvVarContainer::~EnvVarContainer()>
c0018d0c:	59                   	pop    ecx
c0018d0d:	5e                   	pop    esi
c0018d0e:	6a 0c                	push   0xc
c0018d10:	55                   	push   ebp
c0018d11:	e8 08 3f ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0018d16:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018d19:	83 c4 10             	add    esp,0x10
c0018d1c:	89 f7                	mov    edi,esi
c0018d1e:	66 90                	xchg   ax,ax
c0018d20:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d26:	85 c0                	test   eax,eax
c0018d28:	0f 84 b2 00 00 00    	je     c0018de0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018d2e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018d31:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018d35:	31 c9                	xor    ecx,ecx
c0018d37:	eb 17                	jmp    c0018d50 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018d39:	8d 76 00             	lea    esi,[esi+0x0]
c0018d3c:	41                   	inc    ecx
c0018d3d:	83 f9 10             	cmp    ecx,0x10
c0018d40:	0f 84 9a 00 00 00    	je     c0018de0 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018d46:	66 90                	xchg   ax,ax
c0018d48:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d4e:	66 90                	xchg   ax,ax
c0018d50:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018d57:	d3 fa                	sar    edx,cl
c0018d59:	83 e2 01             	and    edx,0x1
c0018d5c:	74 de                	je     c0018d3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d5e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018d61:	01 d2                	add    edx,edx
c0018d63:	01 ca                	add    edx,ecx
c0018d65:	8d 14 92             	lea    edx,[edx+edx*4]
c0018d68:	01 d0                	add    eax,edx
c0018d6a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018d70:	83 fd 07             	cmp    ebp,0x7
c0018d73:	75 c7                	jne    c0018d3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d75:	05 40 02 00 00       	add    eax,0x240
c0018d7a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018d7d:	83 fd ff             	cmp    ebp,0xffffffff
c0018d80:	0f 8c ee 00 00 00    	jl     c0018e74 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018d86:	0f 84 ac 01 00 00    	je     c0018f38 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018d8c:	85 ed                	test   ebp,ebp
c0018d8e:	0f 84 90 01 00 00    	je     c0018f24 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018d94:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018d96:	75 a4                	jne    c0018d3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d98:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018d9e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018da2:	01 d0                	add    eax,edx
c0018da4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018da8:	83 ec 0c             	sub    esp,0xc
c0018dab:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018db1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018db4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018dba:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018dc1:	50                   	push   eax
c0018dc2:	e8 21 fe ff ff       	call   c0018be8 <unblockTask(ThreadControlBlock*)>
c0018dc7:	83 c4 10             	add    esp,0x10
c0018dca:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018dcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018dd1:	89 f7                	mov    edi,esi
c0018dd3:	41                   	inc    ecx
c0018dd4:	83 f9 10             	cmp    ecx,0x10
c0018dd7:	0f 85 6b ff ff ff    	jne    c0018d48 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0018de0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018de6:	85 c0                	test   eax,eax
c0018de8:	74 62                	je     c0018e4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018dea:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018df0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018df6:	74 54                	je     c0018e4c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018df8:	83 ec 0c             	sub    esp,0xc
c0018dfb:	68 24 96 02 c0       	push   0xc0029624
c0018e00:	e8 db 9f 00 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e05:	c7 04 24 24 96 02 c0 	mov    DWORD PTR [esp],0xc0029624
c0018e0c:	89 c7                	mov    edi,eax
c0018e0e:	e8 b1 9f 00 00       	call   c0022dc4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018e13:	83 c4 10             	add    esp,0x10
c0018e16:	84 c0                	test   al,al
c0018e18:	0f 84 ce 00 00 00    	je     c0018eec <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018e1e:	66 90                	xchg   ax,ax
c0018e20:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e23:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018e29:	85 d2                	test   edx,edx
c0018e2b:	74 0f                	je     c0018e3c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018e2d:	83 ec 0c             	sub    esp,0xc
c0018e30:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e32:	52                   	push   edx
c0018e33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018e36:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e39:	83 c4 10             	add    esp,0x10
c0018e3c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018e46:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018e49:	8d 76 00             	lea    esi,[esi+0x0]
c0018e4c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018e52:	85 db                	test   ebx,ebx
c0018e54:	74 16                	je     c0018e6c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018e56:	83 ec 0c             	sub    esp,0xc
c0018e59:	53                   	push   ebx
c0018e5a:	e8 a5 30 ff ff       	call   c000bf04 <VAS::~VAS()>
c0018e5f:	58                   	pop    eax
c0018e60:	5a                   	pop    edx
c0018e61:	6a 14                	push   0x14
c0018e63:	53                   	push   ebx
c0018e64:	e8 b5 3d ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0018e69:	83 c4 10             	add    esp,0x10
c0018e6c:	83 c4 1c             	add    esp,0x1c
c0018e6f:	5b                   	pop    ebx
c0018e70:	5e                   	pop    esi
c0018e71:	5f                   	pop    edi
c0018e72:	5d                   	pop    ebp
c0018e73:	c3                   	ret    
c0018e74:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018e78:	83 ec 0c             	sub    esp,0xc
c0018e7b:	68 34 62 02 c0       	push   0xc0026234
c0018e80:	e8 42 bb ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0018e85:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018e88:	83 c4 10             	add    esp,0x10
c0018e8b:	89 f7                	mov    edi,esi
c0018e8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e91:	e9 a6 fe ff ff       	jmp    c0018d3c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018e96:	66 90                	xchg   ax,ax
c0018e98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e9e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018ea4:	75 1e                	jne    c0018ec4 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018ea6:	83 ec 0c             	sub    esp,0xc
c0018ea9:	68 9c 62 02 c0       	push   0xc002629c
c0018eae:	e8 4c 3e ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0018eb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018eba:	e8 65 fa ff ff       	call   c0018924 <blockTask(TaskState)>
c0018ebf:	83 c4 10             	add    esp,0x10
c0018ec2:	66 90                	xchg   ax,ax
c0018ec4:	83 ec 08             	sub    esp,0x8
c0018ec7:	56                   	push   esi
c0018ec8:	68 24 96 02 c0       	push   0xc0029624
c0018ecd:	e8 ce 9f 00 00       	call   c0022ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018ed2:	c7 04 24 24 96 02 c0 	mov    DWORD PTR [esp],0xc0029624
c0018ed9:	e8 02 9f 00 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ede:	83 c4 10             	add    esp,0x10
c0018ee1:	39 f8                	cmp    eax,edi
c0018ee3:	0f 84 37 ff ff ff    	je     c0018e20 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0018eec:	83 ec 0c             	sub    esp,0xc
c0018eef:	68 24 96 02 c0       	push   0xc0029624
c0018ef4:	e8 e7 9e 00 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018ef9:	c7 04 24 24 96 02 c0 	mov    DWORD PTR [esp],0xc0029624
c0018f00:	89 c6                	mov    esi,eax
c0018f02:	e8 e1 9e 00 00       	call   c0022de8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018f07:	83 c4 10             	add    esp,0x10
c0018f0a:	39 f3                	cmp    ebx,esi
c0018f0c:	74 b6                	je     c0018ec4 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018f0e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018f11:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018f14:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018f1a:	75 a8                	jne    c0018ec4 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018f1c:	e9 77 ff ff ff       	jmp    c0018e98 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018f21:	8d 76 00             	lea    esi,[esi+0x0]
c0018f24:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018f28:	83 ec 0c             	sub    esp,0xc
c0018f2b:	68 68 62 02 c0       	push   0xc0026268
c0018f30:	e9 4b ff ff ff       	jmp    c0018e80 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018f35:	8d 76 00             	lea    esi,[esi+0x0]
c0018f38:	8b 36                	mov    esi,DWORD PTR [esi]
c0018f3a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018f3e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018f41:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018f44:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018f4a:	01 d7                	add    edi,edx
c0018f4c:	89 f8                	mov    eax,edi
c0018f4e:	e9 51 fe ff ff       	jmp    c0018da4 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018f53:	90                   	nop

c0018f54 <cleanerTaskFunction(void*)>:
c0018f54:	53                   	push   ebx
c0018f55:	83 ec 08             	sub    esp,0x8
c0018f58:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018f5d:	48                   	dec    eax
c0018f5e:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018f63:	75 03                	jne    c0018f68 <cleanerTaskFunction(void*)+0x14>
c0018f65:	fb                   	sti    
c0018f66:	66 90                	xchg   ax,ax
c0018f68:	fa                   	cli    
c0018f69:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018f6e:	80 3d ec 95 02 c0 00 	cmp    BYTE PTR ds:0xc00295ec,0x0
c0018f75:	8d 50 01             	lea    edx,[eax+0x1]
c0018f78:	89 15 08 96 02 c0    	mov    DWORD PTR ds:0xc0029608,edx
c0018f7e:	0f 84 ac 00 00 00    	je     c0019030 <cleanerTaskFunction(void*)+0xdc>
c0018f84:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018f89:	85 c0                	test   eax,eax
c0018f8b:	75 03                	jne    c0018f90 <cleanerTaskFunction(void*)+0x3c>
c0018f8d:	fb                   	sti    
c0018f8e:	66 90                	xchg   ax,ax
c0018f90:	c6 05 ec 95 02 c0 00 	mov    BYTE PTR ds:0xc00295ec,0x0
c0018f97:	fa                   	cli    
c0018f98:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0018f9e:	ff 05 04 96 02 c0    	inc    DWORD PTR ds:0xc0029604
c0018fa4:	fa                   	cli    
c0018fa5:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0018fab:	eb 2b                	jmp    c0018fd8 <cleanerTaskFunction(void*)+0x84>
c0018fad:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb0:	83 ec 0c             	sub    esp,0xc
c0018fb3:	68 0c 96 02 c0       	push   0xc002960c
c0018fb8:	e8 23 9e 00 00       	call   c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018fbd:	c7 04 24 0c 96 02 c0 	mov    DWORD PTR [esp],0xc002960c
c0018fc4:	89 c3                	mov    ebx,eax
c0018fc6:	e8 1d 9e 00 00       	call   c0022de8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018fcb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fce:	e8 b9 fc ff ff       	call   c0018c8c <cleanupTerminatedTask(ThreadControlBlock*)>
c0018fd3:	83 c4 10             	add    esp,0x10
c0018fd6:	66 90                	xchg   ax,ax
c0018fd8:	83 ec 0c             	sub    esp,0xc
c0018fdb:	68 0c 96 02 c0       	push   0xc002960c
c0018fe0:	e8 df 9d 00 00       	call   c0022dc4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018fe5:	83 c4 10             	add    esp,0x10
c0018fe8:	84 c0                	test   al,al
c0018fea:	74 c4                	je     c0018fb0 <cleanerTaskFunction(void*)+0x5c>
c0018fec:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0018ff1:	48                   	dec    eax
c0018ff2:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0018ff7:	75 03                	jne    c0018ffc <cleanerTaskFunction(void*)+0xa8>
c0018ff9:	fb                   	sti    
c0018ffa:	66 90                	xchg   ax,ax
c0018ffc:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c0019001:	48                   	dec    eax
c0019002:	a3 04 96 02 c0       	mov    ds:0xc0029604,eax
c0019007:	0f 85 4b ff ff ff    	jne    c0018f58 <cleanerTaskFunction(void*)+0x4>
c001900d:	a1 00 96 02 c0       	mov    eax,ds:0xc0029600
c0019012:	85 c0                	test   eax,eax
c0019014:	0f 84 3e ff ff ff    	je     c0018f58 <cleanerTaskFunction(void*)+0x4>
c001901a:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c0019024:	e8 03 f7 ff ff       	call   c001872c <schedule()>
c0019029:	e9 2a ff ff ff       	jmp    c0018f58 <cleanerTaskFunction(void*)+0x4>
c001902e:	66 90                	xchg   ax,ax
c0019030:	83 ec 0c             	sub    esp,0xc
c0019033:	6a 02                	push   0x2
c0019035:	e8 c2 f8 ff ff       	call   c00188fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001903a:	83 c4 10             	add    esp,0x10
c001903d:	e9 4e ff ff ff       	jmp    c0018f90 <cleanerTaskFunction(void*)+0x3c>
c0019042:	66 90                	xchg   ax,ax

c0019044 <terminateTask(int)>:
c0019044:	83 ec 14             	sub    esp,0x14
c0019047:	fa                   	cli    
c0019048:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c001904e:	ff 05 04 96 02 c0    	inc    DWORD PTR ds:0xc0029604
c0019054:	fa                   	cli    
c0019055:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c001905b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001905f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019064:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0019067:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001906c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001906f:	50                   	push   eax
c0019070:	68 0c 96 02 c0       	push   0xc002960c
c0019075:	e8 26 9e 00 00       	call   c0022ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001907a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001907f:	83 c4 10             	add    esp,0x10
c0019082:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0019089:	a1 e8 95 02 c0       	mov    eax,ds:0xc00295e8
c001908e:	85 c0                	test   eax,eax
c0019090:	74 5e                	je     c00190f0 <terminateTask(int)+0xac>
c0019092:	83 ec 0c             	sub    esp,0xc
c0019095:	c6 05 ec 95 02 c0 01 	mov    BYTE PTR ds:0xc00295ec,0x1
c001909c:	50                   	push   eax
c001909d:	e8 46 fb ff ff       	call   c0018be8 <unblockTask(ThreadControlBlock*)>
c00190a2:	83 c4 10             	add    esp,0x10
c00190a5:	8d 76 00             	lea    esi,[esi+0x0]
c00190a8:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00190ad:	48                   	dec    eax
c00190ae:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c00190b3:	75 03                	jne    c00190b8 <terminateTask(int)+0x74>
c00190b5:	fb                   	sti    
c00190b6:	66 90                	xchg   ax,ax
c00190b8:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c00190bd:	48                   	dec    eax
c00190be:	a3 04 96 02 c0       	mov    ds:0xc0029604,eax
c00190c3:	75 0b                	jne    c00190d0 <terminateTask(int)+0x8c>
c00190c5:	83 3d 00 96 02 c0 00 	cmp    DWORD PTR ds:0xc0029600,0x0
c00190cc:	75 36                	jne    c0019104 <terminateTask(int)+0xc0>
c00190ce:	66 90                	xchg   ax,ax
c00190d0:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00190d5:	48                   	dec    eax
c00190d6:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c00190db:	75 03                	jne    c00190e0 <terminateTask(int)+0x9c>
c00190dd:	fb                   	sti    
c00190de:	66 90                	xchg   ax,ax
c00190e0:	fa                   	cli    
c00190e1:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c00190e7:	90                   	nop
c00190e8:	e8 3f f6 ff ff       	call   c001872c <schedule()>
c00190ed:	eb e1                	jmp    c00190d0 <terminateTask(int)+0x8c>
c00190ef:	90                   	nop
c00190f0:	83 ec 0c             	sub    esp,0xc
c00190f3:	68 99 61 02 c0       	push   0xc0026199
c00190f8:	e8 02 3c ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00190fd:	83 c4 10             	add    esp,0x10
c0019100:	eb a6                	jmp    c00190a8 <terminateTask(int)+0x64>
c0019102:	66 90                	xchg   ax,ax
c0019104:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c001910e:	eb d8                	jmp    c00190e8 <terminateTask(int)+0xa4>

c0019110 <Thr::terminateFromIRQ(int)>:
c0019110:	83 ec 18             	sub    esp,0x18
c0019113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019117:	e8 28 ff ff ff       	call   c0019044 <terminateTask(int)>

c001911c <Semaphore::release()>:
c001911c:	83 ec 0c             	sub    esp,0xc
c001911f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019123:	fa                   	cli    
c0019124:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c0019129:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c001912f:	8d 48 01             	lea    ecx,[eax+0x1]
c0019132:	89 0d 04 96 02 c0    	mov    DWORD PTR ds:0xc0029604,ecx
c0019138:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001913b:	85 c9                	test   ecx,ecx
c001913d:	74 41                	je     c0019180 <Semaphore::release()+0x64>
c001913f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0019142:	83 ec 0c             	sub    esp,0xc
c0019145:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019148:	51                   	push   ecx
c0019149:	e8 9a fa ff ff       	call   c0018be8 <unblockTask(ThreadControlBlock*)>
c001914e:	a1 04 96 02 c0       	mov    eax,ds:0xc0029604
c0019153:	83 c4 10             	add    esp,0x10
c0019156:	48                   	dec    eax
c0019157:	90                   	nop
c0019158:	a3 04 96 02 c0       	mov    ds:0xc0029604,eax
c001915d:	85 c0                	test   eax,eax
c001915f:	75 0b                	jne    c001916c <Semaphore::release()+0x50>
c0019161:	a1 00 96 02 c0       	mov    eax,ds:0xc0029600
c0019166:	85 c0                	test   eax,eax
c0019168:	75 1e                	jne    c0019188 <Semaphore::release()+0x6c>
c001916a:	66 90                	xchg   ax,ax
c001916c:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0019171:	48                   	dec    eax
c0019172:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0019177:	75 03                	jne    c001917c <Semaphore::release()+0x60>
c0019179:	fb                   	sti    
c001917a:	66 90                	xchg   ax,ax
c001917c:	83 c4 0c             	add    esp,0xc
c001917f:	c3                   	ret    
c0019180:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0019183:	eb d3                	jmp    c0019158 <Semaphore::release()+0x3c>
c0019185:	8d 76 00             	lea    esi,[esi+0x0]
c0019188:	c7 05 00 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029600,0x0
c0019192:	e8 95 f5 ff ff       	call   c001872c <schedule()>
c0019197:	eb d3                	jmp    c001916c <Semaphore::release()+0x50>
c0019199:	8d 76 00             	lea    esi,[esi+0x0]

c001919c <__static_initialization_and_destruction_0(int, int)>:
c001919c:	83 ec 0c             	sub    esp,0xc
c001919f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00191a4:	0f 85 8e 00 00 00    	jne    c0019238 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00191aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00191b2:	0f 85 80 00 00 00    	jne    c0019238 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00191b8:	83 ec 0c             	sub    esp,0xc
c00191bb:	68 24 96 02 c0       	push   0xc0029624
c00191c0:	e8 87 9f 00 00       	call   c002314c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00191c5:	83 c4 10             	add    esp,0x10
c00191c8:	83 ec 04             	sub    esp,0x4
c00191cb:	68 4c 73 02 c0       	push   0xc002734c
c00191d0:	68 24 96 02 c0       	push   0xc0029624
c00191d5:	68 fc 30 02 c0       	push   0xc00230fc
c00191da:	e8 b9 39 ff ff       	call   c000cb98 <__cxa_atexit>
c00191df:	83 c4 10             	add    esp,0x10
c00191e2:	83 ec 0c             	sub    esp,0xc
c00191e5:	68 18 96 02 c0       	push   0xc0029618
c00191ea:	e8 5d 9f 00 00       	call   c002314c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	83 ec 04             	sub    esp,0x4
c00191f5:	68 4c 73 02 c0       	push   0xc002734c
c00191fa:	68 18 96 02 c0       	push   0xc0029618
c00191ff:	68 fc 30 02 c0       	push   0xc00230fc
c0019204:	e8 8f 39 ff ff       	call   c000cb98 <__cxa_atexit>
c0019209:	83 c4 10             	add    esp,0x10
c001920c:	83 ec 0c             	sub    esp,0xc
c001920f:	68 0c 96 02 c0       	push   0xc002960c
c0019214:	e8 33 9f 00 00       	call   c002314c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019219:	83 c4 10             	add    esp,0x10
c001921c:	83 ec 04             	sub    esp,0x4
c001921f:	68 4c 73 02 c0       	push   0xc002734c
c0019224:	68 0c 96 02 c0       	push   0xc002960c
c0019229:	68 fc 30 02 c0       	push   0xc00230fc
c001922e:	e8 65 39 ff ff       	call   c000cb98 <__cxa_atexit>
c0019233:	83 c4 10             	add    esp,0x10
c0019236:	66 90                	xchg   ax,ax
c0019238:	90                   	nop
c0019239:	83 c4 0c             	add    esp,0xc
c001923c:	c3                   	ret    
c001923d:	8d 76 00             	lea    esi,[esi+0x0]

c0019240 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019240:	83 ec 0c             	sub    esp,0xc
c0019243:	83 ec 08             	sub    esp,0x8
c0019246:	68 ff ff 00 00       	push   0xffff
c001924b:	6a 01                	push   0x1
c001924d:	e8 4a ff ff ff       	call   c001919c <__static_initialization_and_destruction_0(int, int)>
c0019252:	83 c4 10             	add    esp,0x10
c0019255:	83 c4 0c             	add    esp,0xc
c0019258:	c3                   	ret    

c0019259 <Vm::inbv(unsigned short)>:
c0019259:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001925d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019262:	75 06                	jne    c001926a <Vm::inbv(unsigned short)+0x11>
c0019264:	a0 6c 96 02 c0       	mov    al,ds:0xc002966c
c0019269:	c3                   	ret    
c001926a:	ec                   	in     al,dx
c001926b:	c3                   	ret    

c001926c <Vm::outbv(unsigned short, unsigned char)>:
c001926c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019270:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019274:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019279:	75 25                	jne    c00192a0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001927b:	8b 0d 6c 96 02 c0    	mov    ecx,DWORD PTR ds:0xc002966c
c0019281:	8d 51 01             	lea    edx,[ecx+0x1]
c0019284:	88 81 80 96 02 c0    	mov    BYTE PTR [ecx-0x3ffd6980],al
c001928a:	89 15 6c 96 02 c0    	mov    DWORD PTR ds:0xc002966c,edx
c0019290:	83 fa 20             	cmp    edx,0x20
c0019293:	75 0c                	jne    c00192a1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019295:	c7 05 6c 96 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002966c,0x1f
c001929f:	c3                   	ret    
c00192a0:	ee                   	out    dx,al
c00192a1:	c3                   	ret    

c00192a2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00192a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00192a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00192ac:	c1 e0 04             	shl    eax,0x4
c00192af:	01 d0                	add    eax,edx
c00192b1:	c3                   	ret    

c00192b2 <Vm::getSegment(unsigned int)>:
c00192b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192b6:	c1 e8 10             	shr    eax,0x10
c00192b9:	c3                   	ret    

c00192ba <Vm::getOffset(unsigned int)>:
c00192ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192be:	c3                   	ret    

c00192bf <Vm::mainloop2()>:
c00192bf:	83 ec 18             	sub    esp,0x18
c00192c2:	fa                   	cli    
c00192c3:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c00192c9:	6a 02                	push   0x2
c00192cb:	c6 05 65 96 02 c0 01 	mov    BYTE PTR ds:0xc0029665,0x1
c00192d2:	e8 25 f6 ff ff       	call   c00188fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00192d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192dc:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00192e0:	52                   	push   edx
c00192e1:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00192e5:	52                   	push   edx
c00192e6:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00192ea:	52                   	push   edx
c00192eb:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00192ef:	50                   	push   eax
c00192f0:	e8 3a 6f fe ff       	call   c000022f <goToVM86>
c00192f5:	83 c4 2c             	add    esp,0x2c
c00192f8:	c3                   	ret    

c00192f9 <Vm::mainVm8086Loop(void*)>:
c00192f9:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00192fe:	48                   	dec    eax
c00192ff:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0019304:	75 01                	jne    c0019307 <Vm::mainVm8086Loop(void*)+0xe>
c0019306:	fb                   	sti    
c0019307:	eb b6                	jmp    c00192bf <Vm::mainloop2()>

c0019309 <Vm::mainloop3(unsigned long)>:
c0019309:	83 ec 18             	sub    esp,0x18
c001930c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019310:	fa                   	cli    
c0019311:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0019317:	6a 02                	push   0x2
c0019319:	c6 05 64 96 02 c0 01 	mov    BYTE PTR ds:0xc0029664,0x1
c0019320:	a3 60 96 02 c0       	mov    ds:0xc0029660,eax
c0019325:	e8 d2 f5 ff ff       	call   c00188fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001932a:	83 c4 1c             	add    esp,0x1c
c001932d:	eb 90                	jmp    c00192bf <Vm::mainloop2()>

c001932f <Vm::initialise8086()>:
c001932f:	83 ec 0c             	sub    esp,0xc
c0019332:	68 80 00 00 00       	push   0x80
c0019337:	6a 00                	push   0x0
c0019339:	68 f9 92 01 c0       	push   0xc00192f9
c001933e:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c0019344:	e8 c7 f1 ff ff       	call   c0018510 <Process::createThread(void (*)(void*), void*, int)>
c0019349:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019350:	a3 68 96 02 c0       	mov    ds:0xc0029668,eax
c0019355:	68 00 01 00 00       	push   0x100
c001935a:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c001935f:	6a 00                	push   0x0
c0019361:	6a 00                	push   0x0
c0019363:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019369:	e8 08 30 ff ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001936e:	83 c4 2c             	add    esp,0x2c
c0019371:	c3                   	ret    

c0019372 <Vm::finish8086()>:
c0019372:	53                   	push   ebx
c0019373:	83 ec 08             	sub    esp,0x8
c0019376:	fa                   	cli    
c0019377:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c001937d:	80 3d 64 96 02 c0 00 	cmp    BYTE PTR ds:0xc0029664,0x0
c0019384:	75 15                	jne    c001939b <Vm::finish8086()+0x29>
c0019386:	e8 a1 f3 ff ff       	call   c001872c <schedule()>
c001938b:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0019390:	48                   	dec    eax
c0019391:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0019396:	75 de                	jne    c0019376 <Vm::finish8086()+0x4>
c0019398:	fb                   	sti    
c0019399:	eb db                	jmp    c0019376 <Vm::finish8086()+0x4>
c001939b:	83 ec 0c             	sub    esp,0xc
c001939e:	8b 1d 60 96 02 c0    	mov    ebx,DWORD PTR ds:0xc0029660
c00193a4:	ff 35 68 96 02 c0    	push   DWORD PTR ds:0xc0029668
c00193aa:	c6 05 64 96 02 c0 00 	mov    BYTE PTR ds:0xc0029664,0x0
c00193b1:	e8 32 f8 ff ff       	call   c0018be8 <unblockTask(ThreadControlBlock*)>
c00193b6:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00193bb:	83 c4 10             	add    esp,0x10
c00193be:	8d 50 ff             	lea    edx,[eax-0x1]
c00193c1:	89 15 08 96 02 c0    	mov    DWORD PTR ds:0xc0029608,edx
c00193c7:	85 d2                	test   edx,edx
c00193c9:	75 01                	jne    c00193cc <Vm::finish8086()+0x5a>
c00193cb:	fb                   	sti    
c00193cc:	89 d8                	mov    eax,ebx
c00193ce:	83 c4 08             	add    esp,0x8
c00193d1:	5b                   	pop    ebx
c00193d2:	c3                   	ret    

c00193d3 <Vm::getOutput8086(unsigned char*)>:
c00193d3:	57                   	push   edi
c00193d4:	8b 0d 6c 96 02 c0    	mov    ecx,DWORD PTR ds:0xc002966c
c00193da:	56                   	push   esi
c00193db:	be 80 96 02 c0       	mov    esi,0xc0029680
c00193e0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00193e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00193e6:	a1 6c 96 02 c0       	mov    eax,ds:0xc002966c
c00193eb:	5e                   	pop    esi
c00193ec:	c7 05 6c 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002966c,0x0
c00193f6:	5f                   	pop    edi
c00193f7:	c3                   	ret    

c00193f8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00193f8:	55                   	push   ebp
c00193f9:	57                   	push   edi
c00193fa:	56                   	push   esi
c00193fb:	53                   	push   ebx
c00193fc:	83 ec 2c             	sub    esp,0x2c
c00193ff:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019403:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019407:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001940b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001940f:	fa                   	cli    
c0019410:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0019416:	0f b6 35 65 96 02 c0 	movzx  esi,BYTE PTR ds:0xc0029665
c001941d:	89 f0                	mov    eax,esi
c001941f:	84 c0                	test   al,al
c0019421:	75 1d                	jne    c0019440 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019423:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019427:	e8 00 f3 ff ff       	call   c001872c <schedule()>
c001942c:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0019431:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019435:	48                   	dec    eax
c0019436:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c001943b:	75 d2                	jne    c001940f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001943d:	fb                   	sti    
c001943e:	eb cf                	jmp    c001940f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019440:	a1 68 96 02 c0       	mov    eax,ds:0xc0029668
c0019445:	c7 05 6c 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002966c,0x0
c001944f:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019453:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019457:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001945b:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001945f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019463:	50                   	push   eax
c0019464:	6a 20                	push   0x20
c0019466:	6a 00                	push   0x0
c0019468:	68 80 96 02 c0       	push   0xc0029680
c001946d:	e8 12 72 fe ff       	call   c0000684 <memset>
c0019472:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019479:	e8 91 05 ff ff       	call   c0009a0f <malloc>
c001947e:	83 c4 0c             	add    esp,0xc
c0019481:	89 c3                	mov    ebx,eax
c0019483:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c0019489:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001948d:	50                   	push   eax
c001948e:	e8 d7 3d ff ff       	call   c000d26a <File::File(char const*, Process*)>
c0019493:	83 c4 10             	add    esp,0x10
c0019496:	85 db                	test   ebx,ebx
c0019498:	75 0a                	jne    c00194a4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001949a:	83 ec 0c             	sub    esp,0xc
c001949d:	68 c4 62 02 c0       	push   0xc00262c4
c00194a2:	eb 3e                	jmp    c00194e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00194a4:	50                   	push   eax
c00194a5:	8d 44 24 17          	lea    eax,[esp+0x17]
c00194a9:	50                   	push   eax
c00194aa:	8d 44 24 20          	lea    eax,[esp+0x20]
c00194ae:	50                   	push   eax
c00194af:	53                   	push   ebx
c00194b0:	e8 23 41 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c00194b5:	83 c4 10             	add    esp,0x10
c00194b8:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00194bd:	74 0a                	je     c00194c9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00194bf:	83 ec 0c             	sub    esp,0xc
c00194c2:	68 d8 62 02 c0       	push   0xc00262d8
c00194c7:	eb 19                	jmp    c00194e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00194c9:	51                   	push   ecx
c00194ca:	51                   	push   ecx
c00194cb:	6a 01                	push   0x1
c00194cd:	53                   	push   ebx
c00194ce:	e8 59 3e ff ff       	call   c000d32c <File::open(FileOpenMode)>
c00194d3:	83 c4 10             	add    esp,0x10
c00194d6:	85 c0                	test   eax,eax
c00194d8:	74 24                	je     c00194fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00194da:	83 ec 0c             	sub    esp,0xc
c00194dd:	68 f1 62 02 c0       	push   0xc00262f1
c00194e2:	e8 e0 b4 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c00194e7:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c00194ec:	83 c4 10             	add    esp,0x10
c00194ef:	48                   	dec    eax
c00194f0:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c00194f5:	85 c0                	test   eax,eax
c00194f7:	75 01                	jne    c00194fa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00194f9:	fb                   	sti    
c00194fa:	31 f6                	xor    esi,esi
c00194fc:	eb 58                	jmp    c0019556 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00194fe:	0f b7 ed             	movzx  ebp,bp
c0019501:	50                   	push   eax
c0019502:	0f b7 ff             	movzx  edi,di
c0019505:	50                   	push   eax
c0019506:	55                   	push   ebp
c0019507:	57                   	push   edi
c0019508:	e8 95 fd ff ff       	call   c00192a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001950d:	5a                   	pop    edx
c001950e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019510:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019514:	51                   	push   ecx
c0019515:	50                   	push   eax
c0019516:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001951a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001951e:	53                   	push   ebx
c001951f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019522:	83 c4 14             	add    esp,0x14
c0019525:	53                   	push   ebx
c0019526:	e8 5f 3e ff ff       	call   c000d38a <File::close()>
c001952b:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	48                   	dec    eax
c0019534:	c6 05 65 96 02 c0 00 	mov    BYTE PTR ds:0xc0029665,0x0
c001953b:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0019540:	85 c0                	test   eax,eax
c0019542:	75 01                	jne    c0019545 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019544:	fb                   	sti    
c0019545:	83 ec 0c             	sub    esp,0xc
c0019548:	ff 35 68 96 02 c0    	push   DWORD PTR ds:0xc0029668
c001954e:	e8 95 f6 ff ff       	call   c0018be8 <unblockTask(ThreadControlBlock*)>
c0019553:	83 c4 10             	add    esp,0x10
c0019556:	83 c4 2c             	add    esp,0x2c
c0019559:	89 f0                	mov    eax,esi
c001955b:	5b                   	pop    ebx
c001955c:	5e                   	pop    esi
c001955d:	5f                   	pop    edi
c001955e:	5d                   	pop    ebp
c001955f:	c3                   	ret    

c0019560 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019560:	57                   	push   edi
c0019561:	56                   	push   esi
c0019562:	53                   	push   ebx
c0019563:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001956b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001956f:	83 e8 06             	sub    eax,0x6
c0019572:	0f b7 c0             	movzx  eax,ax
c0019575:	50                   	push   eax
c0019576:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001957b:	50                   	push   eax
c001957c:	e8 21 fd ff ff       	call   c00192a2 <Vm::realToLinear(unsigned short, unsigned short)>
c0019581:	5a                   	pop    edx
c0019582:	5e                   	pop    esi
c0019583:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019586:	8d 56 fa             	lea    edx,[esi-0x6]
c0019589:	81 e2 ff ff 00 00    	and    edx,0xffff
c001958f:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019592:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019595:	83 c2 02             	add    edx,0x2
c0019598:	66 89 10             	mov    WORD PTR [eax],dx
c001959b:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001959e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00195a2:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00195a5:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00195a9:	89 d6                	mov    esi,edx
c00195ab:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00195b1:	66 81 e6 ff fd       	and    si,0xfdff
c00195b6:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00195ba:	74 07                	je     c00195c3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00195bc:	89 d6                	mov    esi,edx
c00195be:	66 81 ce 00 02       	or     si,0x200
c00195c3:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00195c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195cc:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00195d0:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00195d8:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00195db:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00195e3:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00195e6:	5b                   	pop    ebx
c00195e7:	5e                   	pop    esi
c00195e8:	5f                   	pop    edi
c00195e9:	c3                   	ret    

c00195ea <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00195ea:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195ef:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00195f4:	c1 e0 04             	shl    eax,0x4
c00195f7:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00195fa:	c3                   	ret    

c00195fb <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00195fb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019600:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019605:	c1 e0 04             	shl    eax,0x4
c0019608:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001960c:	c3                   	ret    

c001960d <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001960d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019612:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019617:	c1 e0 04             	shl    eax,0x4
c001961a:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001961d:	c3                   	ret    

c001961e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001961e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019623:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019628:	c1 e0 04             	shl    eax,0x4
c001962b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001962f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019632:	c3                   	ret    

c0019633 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019633:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019638:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001963d:	c1 e0 04             	shl    eax,0x4
c0019640:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019644:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019648:	c3                   	ret    

c0019649 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019649:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001964e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019653:	c1 e0 04             	shl    eax,0x4
c0019656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001965a:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001965d:	c3                   	ret    

c001965e <Vm::faultHandler(regs*)>:
c001965e:	55                   	push   ebp
c001965f:	57                   	push   edi
c0019660:	56                   	push   esi
c0019661:	53                   	push   ebx
c0019662:	83 ec 1c             	sub    esp,0x1c
c0019665:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019669:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001966c:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019670:	0f b7 f8             	movzx  edi,ax
c0019673:	52                   	push   edx
c0019674:	0f b7 c0             	movzx  eax,ax
c0019677:	50                   	push   eax
c0019678:	e8 25 fc ff ff       	call   c00192a2 <Vm::realToLinear(unsigned short, unsigned short)>
c001967d:	5a                   	pop    edx
c001967e:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019681:	59                   	pop    ecx
c0019682:	89 c1                	mov    ecx,eax
c0019684:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019687:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001968b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019690:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019694:	0f b7 c5             	movzx  eax,bp
c0019697:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001969b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001969f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00196a3:	e8 fa fb ff ff       	call   c00192a2 <Vm::realToLinear(unsigned short, unsigned short)>
c00196a8:	5e                   	pop    esi
c00196a9:	be 06 00 00 00       	mov    esi,0x6
c00196ae:	5a                   	pop    edx
c00196af:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00196b4:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00196b9:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00196bc:	80 fa 9d             	cmp    dl,0x9d
c00196bf:	0f 84 2c 02 00 00    	je     c00198f1 <Vm::faultHandler(regs*)+0x293>
c00196c5:	0f 87 91 00 00 00    	ja     c001975c <Vm::faultHandler(regs*)+0xfe>
c00196cb:	80 fa 66             	cmp    dl,0x66
c00196ce:	0f 84 98 01 00 00    	je     c001986c <Vm::faultHandler(regs*)+0x20e>
c00196d4:	77 47                	ja     c001971d <Vm::faultHandler(regs*)+0xbf>
c00196d6:	80 fa 36             	cmp    dl,0x36
c00196d9:	0f 84 80 01 00 00    	je     c001985f <Vm::faultHandler(regs*)+0x201>
c00196df:	77 1a                	ja     c00196fb <Vm::faultHandler(regs*)+0x9d>
c00196e1:	80 fa 26             	cmp    dl,0x26
c00196e4:	0f 84 4e 01 00 00    	je     c0019838 <Vm::faultHandler(regs*)+0x1da>
c00196ea:	80 fa 2e             	cmp    dl,0x2e
c00196ed:	0f 85 e2 05 00 00    	jne    c0019cd5 <Vm::faultHandler(regs*)+0x677>
c00196f3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00196f6:	31 f6                	xor    esi,esi
c00196f8:	41                   	inc    ecx
c00196f9:	eb be                	jmp    c00196b9 <Vm::faultHandler(regs*)+0x5b>
c00196fb:	80 fa 64             	cmp    dl,0x64
c00196fe:	0f 84 41 01 00 00    	je     c0019845 <Vm::faultHandler(regs*)+0x1e7>
c0019704:	0f 87 48 01 00 00    	ja     c0019852 <Vm::faultHandler(regs*)+0x1f4>
c001970a:	80 fa 3e             	cmp    dl,0x3e
c001970d:	0f 85 c2 05 00 00    	jne    c0019cd5 <Vm::faultHandler(regs*)+0x677>
c0019713:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019716:	be 01 00 00 00       	mov    esi,0x1
c001971b:	eb db                	jmp    c00196f8 <Vm::faultHandler(regs*)+0x9a>
c001971d:	80 fa 6d             	cmp    dl,0x6d
c0019720:	0f 84 ec 02 00 00    	je     c0019a12 <Vm::faultHandler(regs*)+0x3b4>
c0019726:	77 17                	ja     c001973f <Vm::faultHandler(regs*)+0xe1>
c0019728:	80 fa 67             	cmp    dl,0x67
c001972b:	0f 84 48 01 00 00    	je     c0019879 <Vm::faultHandler(regs*)+0x21b>
c0019731:	80 fa 6c             	cmp    dl,0x6c
c0019734:	0f 84 69 02 00 00    	je     c00199a3 <Vm::faultHandler(regs*)+0x345>
c001973a:	e9 96 05 00 00       	jmp    c0019cd5 <Vm::faultHandler(regs*)+0x677>
c001973f:	80 fa 6f             	cmp    dl,0x6f
c0019742:	0f 84 f4 03 00 00    	je     c0019b3c <Vm::faultHandler(regs*)+0x4de>
c0019748:	0f 82 59 03 00 00    	jb     c0019aa7 <Vm::faultHandler(regs*)+0x449>
c001974e:	80 fa 9c             	cmp    dl,0x9c
c0019751:	0f 84 2f 01 00 00    	je     c0019886 <Vm::faultHandler(regs*)+0x228>
c0019757:	e9 79 05 00 00       	jmp    c0019cd5 <Vm::faultHandler(regs*)+0x677>
c001975c:	80 fa ec             	cmp    dl,0xec
c001975f:	0f 84 14 05 00 00    	je     c0019c79 <Vm::faultHandler(regs*)+0x61b>
c0019765:	77 7b                	ja     c00197e2 <Vm::faultHandler(regs*)+0x184>
c0019767:	80 fa e4             	cmp    dl,0xe4
c001976a:	0f 84 93 04 00 00    	je     c0019c03 <Vm::faultHandler(regs*)+0x5a5>
c0019770:	77 53                	ja     c00197c5 <Vm::faultHandler(regs*)+0x167>
c0019772:	80 fa cd             	cmp    dl,0xcd
c0019775:	0f 84 d9 01 00 00    	je     c0019954 <Vm::faultHandler(regs*)+0x2f6>
c001977b:	80 fa cf             	cmp    dl,0xcf
c001977e:	0f 85 51 05 00 00    	jne    c0019cd5 <Vm::faultHandler(regs*)+0x677>
c0019784:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019787:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001978a:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001978e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019791:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019795:	81 ca 00 02 02 00    	or     edx,0x20200
c001979b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001979e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00197a2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00197a8:	66 c1 e8 09          	shr    ax,0x9
c00197ac:	83 e0 01             	and    eax,0x1
c00197af:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00197b2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00197b5:	83 c0 06             	add    eax,0x6
c00197b8:	25 ff ff 00 00       	and    eax,0xffff
c00197bd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00197c0:	e9 0c 05 00 00       	jmp    c0019cd1 <Vm::faultHandler(regs*)+0x673>
c00197c5:	80 fa e6             	cmp    dl,0xe6
c00197c8:	0f 84 7f 04 00 00    	je     c0019c4d <Vm::faultHandler(regs*)+0x5ef>
c00197ce:	0f 82 4b 04 00 00    	jb     c0019c1f <Vm::faultHandler(regs*)+0x5c1>
c00197d4:	80 fa e7             	cmp    dl,0xe7
c00197d7:	0f 84 87 04 00 00    	je     c0019c64 <Vm::faultHandler(regs*)+0x606>
c00197dd:	e9 f3 04 00 00       	jmp    c0019cd5 <Vm::faultHandler(regs*)+0x677>
c00197e2:	80 fa ef             	cmp    dl,0xef
c00197e5:	0f 84 d1 04 00 00    	je     c0019cbc <Vm::faultHandler(regs*)+0x65e>
c00197eb:	77 28                	ja     c0019815 <Vm::faultHandler(regs*)+0x1b7>
c00197ed:	80 fa ed             	cmp    dl,0xed
c00197f0:	0f 84 9f 04 00 00    	je     c0019c95 <Vm::faultHandler(regs*)+0x637>
c00197f6:	80 fa ee             	cmp    dl,0xee
c00197f9:	0f 85 d6 04 00 00    	jne    c0019cd5 <Vm::faultHandler(regs*)+0x677>
c00197ff:	50                   	push   eax
c0019800:	50                   	push   eax
c0019801:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019805:	50                   	push   eax
c0019806:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001980a:	50                   	push   eax
c001980b:	e8 5c fa ff ff       	call   c001926c <Vm::outbv(unsigned short, unsigned char)>
c0019810:	e9 9f 04 00 00       	jmp    c0019cb4 <Vm::faultHandler(regs*)+0x656>
c0019815:	80 fa fa             	cmp    dl,0xfa
c0019818:	0f 84 69 01 00 00    	je     c0019987 <Vm::faultHandler(regs*)+0x329>
c001981e:	80 fa fb             	cmp    dl,0xfb
c0019821:	0f 84 6e 01 00 00    	je     c0019995 <Vm::faultHandler(regs*)+0x337>
c0019827:	80 fa f3             	cmp    dl,0xf3
c001982a:	0f 85 a5 04 00 00    	jne    c0019cd5 <Vm::faultHandler(regs*)+0x677>
c0019830:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019833:	e9 c0 fe ff ff       	jmp    c00196f8 <Vm::faultHandler(regs*)+0x9a>
c0019838:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001983b:	be 02 00 00 00       	mov    esi,0x2
c0019840:	e9 b3 fe ff ff       	jmp    c00196f8 <Vm::faultHandler(regs*)+0x9a>
c0019845:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019848:	be 03 00 00 00       	mov    esi,0x3
c001984d:	e9 a6 fe ff ff       	jmp    c00196f8 <Vm::faultHandler(regs*)+0x9a>
c0019852:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019855:	be 04 00 00 00       	mov    esi,0x4
c001985a:	e9 99 fe ff ff       	jmp    c00196f8 <Vm::faultHandler(regs*)+0x9a>
c001985f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019862:	be 05 00 00 00       	mov    esi,0x5
c0019867:	e9 8c fe ff ff       	jmp    c00196f8 <Vm::faultHandler(regs*)+0x9a>
c001986c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001986f:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019874:	e9 7f fe ff ff       	jmp    c00196f8 <Vm::faultHandler(regs*)+0x9a>
c0019879:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001987c:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019881:	e9 72 fe ff ff       	jmp    c00196f8 <Vm::faultHandler(regs*)+0x9a>
c0019886:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019889:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001988d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019892:	74 30                	je     c00198c4 <Vm::faultHandler(regs*)+0x266>
c0019894:	83 e9 04             	sub    ecx,0x4
c0019897:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001989d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00198a3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00198a6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00198a9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00198af:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00198b3:	0f 84 15 04 00 00    	je     c0019cce <Vm::faultHandler(regs*)+0x670>
c00198b9:	80 ce 02             	or     dh,0x2
c00198bc:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00198bf:	e9 0a 04 00 00       	jmp    c0019cce <Vm::faultHandler(regs*)+0x670>
c00198c4:	83 e9 02             	sub    ecx,0x2
c00198c7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00198cd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00198d0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00198d4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00198da:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00198de:	74 05                	je     c00198e5 <Vm::faultHandler(regs*)+0x287>
c00198e0:	80 ce 02             	or     dh,0x2
c00198e3:	eb 03                	jmp    c00198e8 <Vm::faultHandler(regs*)+0x28a>
c00198e5:	80 e6 fd             	and    dh,0xfd
c00198e8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00198ec:	e9 dd 03 00 00       	jmp    c0019cce <Vm::faultHandler(regs*)+0x670>
c00198f1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00198f6:	74 2a                	je     c0019922 <Vm::faultHandler(regs*)+0x2c4>
c00198f8:	8b 10                	mov    edx,DWORD PTR [eax]
c00198fa:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019900:	81 ca 00 02 02 00    	or     edx,0x20200
c0019906:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019909:	8b 00                	mov    eax,DWORD PTR [eax]
c001990b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019911:	c1 e8 09             	shr    eax,0x9
c0019914:	83 e0 01             	and    eax,0x1
c0019917:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001991a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001991d:	83 c0 04             	add    eax,0x4
c0019920:	eb 25                	jmp    c0019947 <Vm::faultHandler(regs*)+0x2e9>
c0019922:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019925:	81 ca 00 02 02 00    	or     edx,0x20200
c001992b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001992e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019931:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019937:	66 c1 e8 09          	shr    ax,0x9
c001993b:	83 e0 01             	and    eax,0x1
c001993e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019941:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019944:	83 c0 02             	add    eax,0x2
c0019947:	25 ff ff 00 00       	and    eax,0xffff
c001994c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001994f:	e9 7a 03 00 00       	jmp    c0019cce <Vm::faultHandler(regs*)+0x670>
c0019954:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019958:	3c ee                	cmp    al,0xee
c001995a:	75 10                	jne    c001996c <Vm::faultHandler(regs*)+0x30e>
c001995c:	83 ec 0c             	sub    esp,0xc
c001995f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019962:	e8 a2 f9 ff ff       	call   c0019309 <Vm::mainloop3(unsigned long)>
c0019967:	e9 4b 03 00 00       	jmp    c0019cb7 <Vm::faultHandler(regs*)+0x659>
c001996c:	83 ec 0c             	sub    esp,0xc
c001996f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019977:	51                   	push   ecx
c0019978:	50                   	push   eax
c0019979:	53                   	push   ebx
c001997a:	e8 e1 fb ff ff       	call   c0019560 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001997f:	83 c4 20             	add    esp,0x20
c0019982:	e9 4a 03 00 00       	jmp    c0019cd1 <Vm::faultHandler(regs*)+0x673>
c0019987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001998c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019990:	e9 39 03 00 00       	jmp    c0019cce <Vm::faultHandler(regs*)+0x670>
c0019995:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001999a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001999e:	e9 2b 03 00 00       	jmp    c0019cce <Vm::faultHandler(regs*)+0x670>
c00199a3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00199a6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00199ab:	74 2b                	je     c00199d8 <Vm::faultHandler(regs*)+0x37a>
c00199ad:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00199b4:	76 22                	jbe    c00199d8 <Vm::faultHandler(regs*)+0x37a>
c00199b6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00199ba:	50                   	push   eax
c00199bb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00199bf:	50                   	push   eax
c00199c0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00199c4:	50                   	push   eax
c00199c5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00199c9:	50                   	push   eax
c00199ca:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00199ce:	50                   	push   eax
c00199cf:	6a 6c                	push   0x6c
c00199d1:	6a 6c                	push   0x6c
c00199d3:	e9 b9 01 00 00       	jmp    c0019b91 <Vm::faultHandler(regs*)+0x533>
c00199d8:	83 ec 0c             	sub    esp,0xc
c00199db:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00199df:	0f b7 f6             	movzx  esi,si
c00199e2:	50                   	push   eax
c00199e3:	e8 71 f8 ff ff       	call   c0019259 <Vm::inbv(unsigned short)>
c00199e8:	83 c4 0c             	add    esp,0xc
c00199eb:	0f b6 c0             	movzx  eax,al
c00199ee:	50                   	push   eax
c00199ef:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00199f3:	50                   	push   eax
c00199f4:	56                   	push   esi
c00199f5:	e8 24 fc ff ff       	call   c001961e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00199fa:	83 c4 10             	add    esp,0x10
c00199fd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a00:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a04:	74 03                	je     c0019a09 <Vm::faultHandler(regs*)+0x3ab>
c0019a06:	48                   	dec    eax
c0019a07:	eb 01                	jmp    c0019a0a <Vm::faultHandler(regs*)+0x3ac>
c0019a09:	40                   	inc    eax
c0019a0a:	0f b7 c0             	movzx  eax,ax
c0019a0d:	e9 8d 00 00 00       	jmp    c0019a9f <Vm::faultHandler(regs*)+0x441>
c0019a12:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019a15:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a18:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a1d:	74 29                	je     c0019a48 <Vm::faultHandler(regs*)+0x3ea>
c0019a1f:	3d ff ff 00 00       	cmp    eax,0xffff
c0019a24:	76 22                	jbe    c0019a48 <Vm::faultHandler(regs*)+0x3ea>
c0019a26:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a2a:	50                   	push   eax
c0019a2b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a2f:	50                   	push   eax
c0019a30:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a34:	50                   	push   eax
c0019a35:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a39:	50                   	push   eax
c0019a3a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a3e:	50                   	push   eax
c0019a3f:	6a 6d                	push   0x6d
c0019a41:	6a 6d                	push   0x6d
c0019a43:	e9 49 01 00 00       	jmp    c0019b91 <Vm::faultHandler(regs*)+0x533>
c0019a48:	0f b7 c8             	movzx  ecx,ax
c0019a4b:	0f b7 f6             	movzx  esi,si
c0019a4e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019a51:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019a56:	74 20                	je     c0019a78 <Vm::faultHandler(regs*)+0x41a>
c0019a58:	ed                   	in     eax,dx
c0019a59:	55                   	push   ebp
c0019a5a:	50                   	push   eax
c0019a5b:	51                   	push   ecx
c0019a5c:	56                   	push   esi
c0019a5d:	e8 e7 fb ff ff       	call   c0019649 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019a62:	83 c4 10             	add    esp,0x10
c0019a65:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a68:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a6c:	74 05                	je     c0019a73 <Vm::faultHandler(regs*)+0x415>
c0019a6e:	83 e8 04             	sub    eax,0x4
c0019a71:	eb 27                	jmp    c0019a9a <Vm::faultHandler(regs*)+0x43c>
c0019a73:	83 c0 04             	add    eax,0x4
c0019a76:	eb 22                	jmp    c0019a9a <Vm::faultHandler(regs*)+0x43c>
c0019a78:	66 ed                	in     ax,dx
c0019a7a:	0f b7 c0             	movzx  eax,ax
c0019a7d:	57                   	push   edi
c0019a7e:	50                   	push   eax
c0019a7f:	51                   	push   ecx
c0019a80:	56                   	push   esi
c0019a81:	e8 ad fb ff ff       	call   c0019633 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019a86:	83 c4 10             	add    esp,0x10
c0019a89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019a8c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a90:	74 05                	je     c0019a97 <Vm::faultHandler(regs*)+0x439>
c0019a92:	83 e8 02             	sub    eax,0x2
c0019a95:	eb 03                	jmp    c0019a9a <Vm::faultHandler(regs*)+0x43c>
c0019a97:	83 c0 02             	add    eax,0x2
c0019a9a:	25 ff ff 00 00       	and    eax,0xffff
c0019a9f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019aa2:	e9 27 02 00 00       	jmp    c0019cce <Vm::faultHandler(regs*)+0x670>
c0019aa7:	8d 46 ff             	lea    eax,[esi-0x1]
c0019aaa:	3c 05                	cmp    al,0x5
c0019aac:	77 24                	ja     c0019ad2 <Vm::faultHandler(regs*)+0x474>
c0019aae:	0f b6 c0             	movzx  eax,al
c0019ab1:	ff 24 85 64 63 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9c9c]
c0019ab8:	0f b7 fd             	movzx  edi,bp
c0019abb:	eb 15                	jmp    c0019ad2 <Vm::faultHandler(regs*)+0x474>
c0019abd:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0019ac1:	eb 0f                	jmp    c0019ad2 <Vm::faultHandler(regs*)+0x474>
c0019ac3:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019ac7:	eb 09                	jmp    c0019ad2 <Vm::faultHandler(regs*)+0x474>
c0019ac9:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019acd:	eb 03                	jmp    c0019ad2 <Vm::faultHandler(regs*)+0x474>
c0019acf:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019ad2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019ad5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019ada:	74 29                	je     c0019b05 <Vm::faultHandler(regs*)+0x4a7>
c0019adc:	3d ff ff 00 00       	cmp    eax,0xffff
c0019ae1:	76 22                	jbe    c0019b05 <Vm::faultHandler(regs*)+0x4a7>
c0019ae3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019ae7:	50                   	push   eax
c0019ae8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019aec:	50                   	push   eax
c0019aed:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019af1:	50                   	push   eax
c0019af2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019af6:	50                   	push   eax
c0019af7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019afb:	50                   	push   eax
c0019afc:	6a 6e                	push   0x6e
c0019afe:	6a 6e                	push   0x6e
c0019b00:	e9 8c 00 00 00       	jmp    c0019b91 <Vm::faultHandler(regs*)+0x533>
c0019b05:	0f b7 c0             	movzx  eax,ax
c0019b08:	52                   	push   edx
c0019b09:	52                   	push   edx
c0019b0a:	50                   	push   eax
c0019b0b:	57                   	push   edi
c0019b0c:	e8 d9 fa ff ff       	call   c00195ea <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019b11:	59                   	pop    ecx
c0019b12:	0f b6 c0             	movzx  eax,al
c0019b15:	5e                   	pop    esi
c0019b16:	50                   	push   eax
c0019b17:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019b1b:	50                   	push   eax
c0019b1c:	e8 4b f7 ff ff       	call   c001926c <Vm::outbv(unsigned short, unsigned char)>
c0019b21:	83 c4 10             	add    esp,0x10
c0019b24:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019b27:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019b2b:	74 03                	je     c0019b30 <Vm::faultHandler(regs*)+0x4d2>
c0019b2d:	48                   	dec    eax
c0019b2e:	eb 01                	jmp    c0019b31 <Vm::faultHandler(regs*)+0x4d3>
c0019b30:	40                   	inc    eax
c0019b31:	0f b7 c0             	movzx  eax,ax
c0019b34:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019b37:	e9 92 01 00 00       	jmp    c0019cce <Vm::faultHandler(regs*)+0x670>
c0019b3c:	8d 46 ff             	lea    eax,[esi-0x1]
c0019b3f:	3c 05                	cmp    al,0x5
c0019b41:	77 1f                	ja     c0019b62 <Vm::faultHandler(regs*)+0x504>
c0019b43:	0f b6 c0             	movzx  eax,al
c0019b46:	ff 24 85 7c 63 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9c84]
c0019b4d:	89 ef                	mov    edi,ebp
c0019b4f:	eb 11                	jmp    c0019b62 <Vm::faultHandler(regs*)+0x504>
c0019b51:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019b54:	eb 0c                	jmp    c0019b62 <Vm::faultHandler(regs*)+0x504>
c0019b56:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019b59:	eb 07                	jmp    c0019b62 <Vm::faultHandler(regs*)+0x504>
c0019b5b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019b5e:	eb 02                	jmp    c0019b62 <Vm::faultHandler(regs*)+0x504>
c0019b60:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019b62:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019b65:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019b6a:	74 37                	je     c0019ba3 <Vm::faultHandler(regs*)+0x545>
c0019b6c:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019b72:	76 2f                	jbe    c0019ba3 <Vm::faultHandler(regs*)+0x545>
c0019b74:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019b78:	50                   	push   eax
c0019b79:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019b7d:	50                   	push   eax
c0019b7e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019b82:	50                   	push   eax
c0019b83:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019b87:	50                   	push   eax
c0019b88:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019b8c:	50                   	push   eax
c0019b8d:	6a 6f                	push   0x6f
c0019b8f:	6a 6f                	push   0x6f
c0019b91:	68 0a 63 02 c0       	push   0xc002630a
c0019b96:	e8 64 31 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0019b9b:	83 c4 20             	add    esp,0x20
c0019b9e:	e9 86 01 00 00       	jmp    c0019d29 <Vm::faultHandler(regs*)+0x6cb>
c0019ba3:	0f b7 d7             	movzx  edx,di
c0019ba6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019ba9:	0f b7 c6             	movzx  eax,si
c0019bac:	81 e1 00 04 00 00    	and    ecx,0x400
c0019bb2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019bb5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019bba:	74 1d                	je     c0019bd9 <Vm::faultHandler(regs*)+0x57b>
c0019bbc:	55                   	push   ebp
c0019bbd:	55                   	push   ebp
c0019bbe:	50                   	push   eax
c0019bbf:	52                   	push   edx
c0019bc0:	e8 48 fa ff ff       	call   c001960d <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019bc5:	83 c4 10             	add    esp,0x10
c0019bc8:	89 fa                	mov    edx,edi
c0019bca:	ef                   	out    dx,eax
c0019bcb:	85 c9                	test   ecx,ecx
c0019bcd:	74 05                	je     c0019bd4 <Vm::faultHandler(regs*)+0x576>
c0019bcf:	83 ee 04             	sub    esi,0x4
c0019bd2:	eb 21                	jmp    c0019bf5 <Vm::faultHandler(regs*)+0x597>
c0019bd4:	83 c6 04             	add    esi,0x4
c0019bd7:	eb 1c                	jmp    c0019bf5 <Vm::faultHandler(regs*)+0x597>
c0019bd9:	55                   	push   ebp
c0019bda:	55                   	push   ebp
c0019bdb:	50                   	push   eax
c0019bdc:	52                   	push   edx
c0019bdd:	e8 19 fa ff ff       	call   c00195fb <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019be2:	83 c4 10             	add    esp,0x10
c0019be5:	89 fa                	mov    edx,edi
c0019be7:	66 ef                	out    dx,ax
c0019be9:	85 c9                	test   ecx,ecx
c0019beb:	74 05                	je     c0019bf2 <Vm::faultHandler(regs*)+0x594>
c0019bed:	83 ee 02             	sub    esi,0x2
c0019bf0:	eb 03                	jmp    c0019bf5 <Vm::faultHandler(regs*)+0x597>
c0019bf2:	83 c6 02             	add    esi,0x2
c0019bf5:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019bfb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019bfe:	e9 cb 00 00 00       	jmp    c0019cce <Vm::faultHandler(regs*)+0x670>
c0019c03:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c0a:	83 ec 0c             	sub    esp,0xc
c0019c0d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019c11:	50                   	push   eax
c0019c12:	e8 42 f6 ff ff       	call   c0019259 <Vm::inbv(unsigned short)>
c0019c17:	0f b6 c0             	movzx  eax,al
c0019c1a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c1d:	eb 3f                	jmp    c0019c5e <Vm::faultHandler(regs*)+0x600>
c0019c1f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c24:	74 07                	je     c0019c2d <Vm::faultHandler(regs*)+0x5cf>
c0019c26:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c2a:	ed                   	in     eax,dx
c0019c2b:	eb 14                	jmp    c0019c41 <Vm::faultHandler(regs*)+0x5e3>
c0019c2d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019c30:	66 31 f6             	xor    si,si
c0019c33:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019c36:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c3a:	66 ed                	in     ax,dx
c0019c3c:	0f b7 c0             	movzx  eax,ax
c0019c3f:	09 f0                	or     eax,esi
c0019c41:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019c44:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c48:	e9 84 00 00 00       	jmp    c0019cd1 <Vm::faultHandler(regs*)+0x673>
c0019c4d:	52                   	push   edx
c0019c4e:	52                   	push   edx
c0019c4f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019c53:	50                   	push   eax
c0019c54:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019c58:	50                   	push   eax
c0019c59:	e8 0e f6 ff ff       	call   c001926c <Vm::outbv(unsigned short, unsigned char)>
c0019c5e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019c62:	eb 53                	jmp    c0019cb7 <Vm::faultHandler(regs*)+0x659>
c0019c64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019c67:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019c6b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c70:	74 03                	je     c0019c75 <Vm::faultHandler(regs*)+0x617>
c0019c72:	ef                   	out    dx,eax
c0019c73:	eb cf                	jmp    c0019c44 <Vm::faultHandler(regs*)+0x5e6>
c0019c75:	66 ef                	out    dx,ax
c0019c77:	eb cb                	jmp    c0019c44 <Vm::faultHandler(regs*)+0x5e6>
c0019c79:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019c80:	83 ec 0c             	sub    esp,0xc
c0019c83:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c87:	50                   	push   eax
c0019c88:	e8 cc f5 ff ff       	call   c0019259 <Vm::inbv(unsigned short)>
c0019c8d:	0f b6 c0             	movzx  eax,al
c0019c90:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019c93:	eb 1f                	jmp    c0019cb4 <Vm::faultHandler(regs*)+0x656>
c0019c95:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c98:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c9d:	74 03                	je     c0019ca2 <Vm::faultHandler(regs*)+0x644>
c0019c9f:	ed                   	in     eax,dx
c0019ca0:	eb 0d                	jmp    c0019caf <Vm::faultHandler(regs*)+0x651>
c0019ca2:	66 ed                	in     ax,dx
c0019ca4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019ca7:	0f b7 c0             	movzx  eax,ax
c0019caa:	66 31 d2             	xor    dx,dx
c0019cad:	09 d0                	or     eax,edx
c0019caf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019cb2:	eb 1a                	jmp    c0019cce <Vm::faultHandler(regs*)+0x670>
c0019cb4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019cb7:	83 c4 10             	add    esp,0x10
c0019cba:	eb 15                	jmp    c0019cd1 <Vm::faultHandler(regs*)+0x673>
c0019cbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019cbf:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019cc2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019cc7:	74 03                	je     c0019ccc <Vm::faultHandler(regs*)+0x66e>
c0019cc9:	ef                   	out    dx,eax
c0019cca:	eb 02                	jmp    c0019cce <Vm::faultHandler(regs*)+0x670>
c0019ccc:	66 ef                	out    dx,ax
c0019cce:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019cd1:	b0 01                	mov    al,0x1
c0019cd3:	eb 56                	jmp    c0019d2b <Vm::faultHandler(regs*)+0x6cd>
c0019cd5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019cd9:	50                   	push   eax
c0019cda:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019cde:	50                   	push   eax
c0019cdf:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019ce3:	50                   	push   eax
c0019ce4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019ce8:	50                   	push   eax
c0019ce9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019ced:	50                   	push   eax
c0019cee:	52                   	push   edx
c0019cef:	52                   	push   edx
c0019cf0:	68 37 63 02 c0       	push   0xc0026337
c0019cf5:	e8 05 30 ff ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0019cfa:	83 c4 20             	add    esp,0x20
c0019cfd:	83 ec 0c             	sub    esp,0xc
c0019d00:	6a 60                	push   0x60
c0019d02:	e8 52 f5 ff ff       	call   c0019259 <Vm::inbv(unsigned short)>
c0019d07:	83 c4 10             	add    esp,0x10
c0019d0a:	3c 1c                	cmp    al,0x1c
c0019d0c:	74 04                	je     c0019d12 <Vm::faultHandler(regs*)+0x6b4>
c0019d0e:	3c 5a                	cmp    al,0x5a
c0019d10:	75 eb                	jne    c0019cfd <Vm::faultHandler(regs*)+0x69f>
c0019d12:	3c 5a                	cmp    al,0x5a
c0019d14:	74 04                	je     c0019d1a <Vm::faultHandler(regs*)+0x6bc>
c0019d16:	3c 1c                	cmp    al,0x1c
c0019d18:	75 0f                	jne    c0019d29 <Vm::faultHandler(regs*)+0x6cb>
c0019d1a:	83 ec 0c             	sub    esp,0xc
c0019d1d:	6a 60                	push   0x60
c0019d1f:	e8 35 f5 ff ff       	call   c0019259 <Vm::inbv(unsigned short)>
c0019d24:	83 c4 10             	add    esp,0x10
c0019d27:	eb e9                	jmp    c0019d12 <Vm::faultHandler(regs*)+0x6b4>
c0019d29:	31 c0                	xor    eax,eax
c0019d2b:	83 c4 1c             	add    esp,0x1c
c0019d2e:	5b                   	pop    ebx
c0019d2f:	5e                   	pop    esi
c0019d30:	5f                   	pop    edi
c0019d31:	5d                   	pop    ebp
c0019d32:	c3                   	ret    
c0019d33:	90                   	nop

c0019d34 <Vm::fpuInternalTo32(unsigned long long)>:
c0019d34:	57                   	push   edi
c0019d35:	56                   	push   esi
c0019d36:	53                   	push   ebx
c0019d37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d3f:	89 d6                	mov    esi,edx
c0019d41:	89 d7                	mov    edi,edx
c0019d43:	89 c1                	mov    ecx,eax
c0019d45:	c1 ef 14             	shr    edi,0x14
c0019d48:	89 d3                	mov    ebx,edx
c0019d4a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019d50:	31 d2                	xor    edx,edx
c0019d52:	89 f8                	mov    eax,edi
c0019d54:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019d5a:	bf ff 00 00 00       	mov    edi,0xff
c0019d5f:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019d64:	83 d2 ff             	adc    edx,0xffffffff
c0019d67:	39 c7                	cmp    edi,eax
c0019d69:	bf 00 00 00 00       	mov    edi,0x0
c0019d6e:	19 d7                	sbb    edi,edx
c0019d70:	72 16                	jb     c0019d88 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019d72:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019d76:	c1 e0 17             	shl    eax,0x17
c0019d79:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019d7f:	09 f1                	or     ecx,esi
c0019d81:	09 c1                	or     ecx,eax
c0019d83:	89 cf                	mov    edi,ecx
c0019d85:	eb 05                	jmp    c0019d8c <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019d87:	90                   	nop
c0019d88:	31 ff                	xor    edi,edi
c0019d8a:	66 90                	xchg   ax,ax
c0019d8c:	89 f8                	mov    eax,edi
c0019d8e:	5b                   	pop    ebx
c0019d8f:	5e                   	pop    esi
c0019d90:	5f                   	pop    edi
c0019d91:	c3                   	ret    

c0019d92 <Vm::fpuInternalTo64(unsigned long long)>:
c0019d92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d9a:	c3                   	ret    

c0019d9b <Vm::fpu32ToInternal(unsigned int)>:
c0019d9b:	57                   	push   edi
c0019d9c:	31 ff                	xor    edi,edi
c0019d9e:	56                   	push   esi
c0019d9f:	53                   	push   ebx
c0019da0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019da4:	89 cb                	mov    ebx,ecx
c0019da6:	89 ce                	mov    esi,ecx
c0019da8:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019dae:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019db4:	c1 e9 17             	shr    ecx,0x17
c0019db7:	89 f0                	mov    eax,esi
c0019db9:	0f b6 d1             	movzx  edx,cl
c0019dbc:	81 c2 80 03 00 00    	add    edx,0x380
c0019dc2:	89 d1                	mov    ecx,edx
c0019dc4:	89 fa                	mov    edx,edi
c0019dc6:	c1 e1 14             	shl    ecx,0x14
c0019dc9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019dcd:	c1 e0 1d             	shl    eax,0x1d
c0019dd0:	89 d7                	mov    edi,edx
c0019dd2:	89 c6                	mov    esi,eax
c0019dd4:	89 ca                	mov    edx,ecx
c0019dd6:	89 f0                	mov    eax,esi
c0019dd8:	09 fa                	or     edx,edi
c0019dda:	09 da                	or     edx,ebx
c0019ddc:	5b                   	pop    ebx
c0019ddd:	5e                   	pop    esi
c0019dde:	5f                   	pop    edi
c0019ddf:	c3                   	ret    

c0019de0 <Vm::fpu64ToInternal(unsigned long long)>:
c0019de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019de8:	c3                   	ret    

c0019de9 <Vm::fpuFloatToLong(unsigned long long)>:
c0019de9:	57                   	push   edi
c0019dea:	31 c0                	xor    eax,eax
c0019dec:	56                   	push   esi
c0019ded:	31 d2                	xor    edx,edx
c0019def:	53                   	push   ebx
c0019df0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019df4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019df8:	89 d9                	mov    ecx,ebx
c0019dfa:	c1 e9 14             	shr    ecx,0x14
c0019dfd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019e03:	89 cf                	mov    edi,ecx
c0019e05:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019e0b:	78 37                	js     c0019e44 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019e0d:	89 d9                	mov    ecx,ebx
c0019e0f:	89 f0                	mov    eax,esi
c0019e11:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019e17:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019e1d:	89 ca                	mov    edx,ecx
c0019e1f:	b9 34 00 00 00       	mov    ecx,0x34
c0019e24:	29 f9                	sub    ecx,edi
c0019e26:	0f ad d0             	shrd   eax,edx,cl
c0019e29:	d3 fa                	sar    edx,cl
c0019e2b:	f6 c1 20             	test   cl,0x20
c0019e2e:	74 08                	je     c0019e38 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019e30:	89 d0                	mov    eax,edx
c0019e32:	c1 fa 1f             	sar    edx,0x1f
c0019e35:	8d 76 00             	lea    esi,[esi+0x0]
c0019e38:	85 db                	test   ebx,ebx
c0019e3a:	79 08                	jns    c0019e44 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019e3c:	f7 d8                	neg    eax
c0019e3e:	83 d2 00             	adc    edx,0x0
c0019e41:	f7 da                	neg    edx
c0019e43:	90                   	nop
c0019e44:	5b                   	pop    ebx
c0019e45:	5e                   	pop    esi
c0019e46:	5f                   	pop    edi
c0019e47:	c3                   	ret    

c0019e48 <Vm::fpuULongToFloat(unsigned long long)>:
c0019e48:	57                   	push   edi
c0019e49:	31 c9                	xor    ecx,ecx
c0019e4b:	56                   	push   esi
c0019e4c:	53                   	push   ebx
c0019e4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e51:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019e55:	8d 76 00             	lea    esi,[esi+0x0]
c0019e58:	0f ba e7 14          	bt     edi,0x14
c0019e5c:	72 0a                	jb     c0019e68 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019e5e:	01 f6                	add    esi,esi
c0019e60:	11 ff                	adc    edi,edi
c0019e62:	41                   	inc    ecx
c0019e63:	eb f3                	jmp    c0019e58 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019e65:	8d 76 00             	lea    esi,[esi+0x0]
c0019e68:	89 fa                	mov    edx,edi
c0019e6a:	89 f0                	mov    eax,esi
c0019e6c:	bb 33 04 00 00       	mov    ebx,0x433
c0019e71:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019e77:	29 cb                	sub    ebx,ecx
c0019e79:	89 d9                	mov    ecx,ebx
c0019e7b:	5b                   	pop    ebx
c0019e7c:	c1 e1 14             	shl    ecx,0x14
c0019e7f:	5e                   	pop    esi
c0019e80:	09 ca                	or     edx,ecx
c0019e82:	5f                   	pop    edi
c0019e83:	c3                   	ret    

c0019e84 <Vm::fpuLongToFloat(long long)>:
c0019e84:	56                   	push   esi
c0019e85:	31 c0                	xor    eax,eax
c0019e87:	53                   	push   ebx
c0019e88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e90:	39 c8                	cmp    eax,ecx
c0019e92:	19 d8                	sbb    eax,ebx
c0019e94:	7d 06                	jge    c0019e9c <Vm::fpuLongToFloat(long long)+0x18>
c0019e96:	31 f6                	xor    esi,esi
c0019e98:	eb 0e                	jmp    c0019ea8 <Vm::fpuLongToFloat(long long)+0x24>
c0019e9a:	66 90                	xchg   ax,ax
c0019e9c:	f7 d9                	neg    ecx
c0019e9e:	be 01 00 00 00       	mov    esi,0x1
c0019ea3:	83 d3 00             	adc    ebx,0x0
c0019ea6:	f7 db                	neg    ebx
c0019ea8:	31 c0                	xor    eax,eax
c0019eaa:	66 90                	xchg   ax,ax
c0019eac:	0f ba e3 14          	bt     ebx,0x14
c0019eb0:	72 0a                	jb     c0019ebc <Vm::fpuLongToFloat(long long)+0x38>
c0019eb2:	01 c9                	add    ecx,ecx
c0019eb4:	11 db                	adc    ebx,ebx
c0019eb6:	40                   	inc    eax
c0019eb7:	eb f3                	jmp    c0019eac <Vm::fpuLongToFloat(long long)+0x28>
c0019eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ebc:	ba 33 04 00 00       	mov    edx,0x433
c0019ec1:	29 c2                	sub    edx,eax
c0019ec3:	89 c8                	mov    eax,ecx
c0019ec5:	c1 e2 14             	shl    edx,0x14
c0019ec8:	89 d9                	mov    ecx,ebx
c0019eca:	89 f3                	mov    ebx,esi
c0019ecc:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019ed2:	09 ca                	or     edx,ecx
c0019ed4:	84 db                	test   bl,bl
c0019ed6:	74 08                	je     c0019ee0 <Vm::fpuLongToFloat(long long)+0x5c>
c0019ed8:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019ede:	66 90                	xchg   ax,ax
c0019ee0:	5b                   	pop    ebx
c0019ee1:	5e                   	pop    esi
c0019ee2:	c3                   	ret    

c0019ee3 <Vm::fpuGet0()>:
c0019ee3:	31 c0                	xor    eax,eax
c0019ee5:	31 d2                	xor    edx,edx
c0019ee7:	c3                   	ret    

c0019ee8 <Vm::fpuGet1()>:
c0019ee8:	b8 01 00 00 00       	mov    eax,0x1
c0019eed:	31 d2                	xor    edx,edx
c0019eef:	c3                   	ret    

c0019ef0 <Vm::fpuGetPi()>:
c0019ef0:	b8 03 00 00 00       	mov    eax,0x3
c0019ef5:	31 d2                	xor    edx,edx
c0019ef7:	c3                   	ret    

c0019ef8 <Vm::fpuGetLog2E()>:
c0019ef8:	83 ec 18             	sub    esp,0x18
c0019efb:	68 94 63 02 c0       	push   0xc0026394
c0019f00:	e8 c2 aa ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0019f05:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f0a:	31 d2                	xor    edx,edx
c0019f0c:	83 c4 1c             	add    esp,0x1c
c0019f0f:	c3                   	ret    

c0019f10 <Vm::fpuGetLogE2()>:
c0019f10:	83 ec 18             	sub    esp,0x18
c0019f13:	68 a0 63 02 c0       	push   0xc00263a0
c0019f18:	e8 aa aa ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0019f1d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f22:	31 d2                	xor    edx,edx
c0019f24:	83 c4 1c             	add    esp,0x1c
c0019f27:	c3                   	ret    

c0019f28 <Vm::fpuGetLog210()>:
c0019f28:	83 ec 18             	sub    esp,0x18
c0019f2b:	68 ac 63 02 c0       	push   0xc00263ac
c0019f30:	e8 92 aa ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0019f35:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f3a:	31 d2                	xor    edx,edx
c0019f3c:	83 c4 1c             	add    esp,0x1c
c0019f3f:	c3                   	ret    

c0019f40 <Vm::fpuGetLog102()>:
c0019f40:	83 ec 18             	sub    esp,0x18
c0019f43:	68 b9 63 02 c0       	push   0xc00263b9
c0019f48:	e8 7a aa ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0019f4d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019f52:	31 d2                	xor    edx,edx
c0019f54:	83 c4 1c             	add    esp,0x1c
c0019f57:	c3                   	ret    

c0019f58 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019f58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f5c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019f60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f64:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019f68:	0f 92 c0             	setb   al
c0019f6b:	c3                   	ret    

c0019f6c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019f6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f74:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019f78:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019f7c:	09 c2                	or     edx,eax
c0019f7e:	0f 94 c0             	sete   al
c0019f81:	c3                   	ret    

c0019f82 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019f82:	57                   	push   edi
c0019f83:	56                   	push   esi
c0019f84:	53                   	push   ebx
c0019f85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019f89:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f8d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f91:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f95:	57                   	push   edi
c0019f96:	56                   	push   esi
c0019f97:	53                   	push   ebx
c0019f98:	51                   	push   ecx
c0019f99:	e8 ce ff ff ff       	call   c0019f6c <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019f9e:	83 c4 10             	add    esp,0x10
c0019fa1:	88 c2                	mov    dl,al
c0019fa3:	31 c0                	xor    eax,eax
c0019fa5:	84 d2                	test   dl,dl
c0019fa7:	75 0f                	jne    c0019fb8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019fa9:	57                   	push   edi
c0019faa:	56                   	push   esi
c0019fab:	53                   	push   ebx
c0019fac:	51                   	push   ecx
c0019fad:	e8 a6 ff ff ff       	call   c0019f58 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019fb2:	83 c4 10             	add    esp,0x10
c0019fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fb8:	83 e0 01             	and    eax,0x1
c0019fbb:	5b                   	pop    ebx
c0019fbc:	88 c1                	mov    cl,al
c0019fbe:	83 e2 01             	and    edx,0x1
c0019fc1:	a0 a1 96 02 c0       	mov    al,ds:0xc00296a1
c0019fc6:	c1 e2 06             	shl    edx,0x6
c0019fc9:	83 e0 ba             	and    eax,0xffffffba
c0019fcc:	5e                   	pop    esi
c0019fcd:	09 c8                	or     eax,ecx
c0019fcf:	5f                   	pop    edi
c0019fd0:	09 d0                	or     eax,edx
c0019fd2:	a2 a1 96 02 c0       	mov    ds:0xc00296a1,al
c0019fd7:	c3                   	ret    

c0019fd8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019fd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019fdc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019fe0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019fe4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019fe8:	c3                   	ret    

c0019fe9 <Vm::fpuAbs(unsigned long long)>:
c0019fe9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ff1:	c3                   	ret    

c0019ff2 <Vm::fpuChs(unsigned long long)>:
c0019ff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ff6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ffa:	f7 d8                	neg    eax
c0019ffc:	83 d2 00             	adc    edx,0x0
c0019fff:	f7 da                	neg    edx
c001a001:	c3                   	ret    

c001a002 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a002:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a006:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a00b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a00f:	eb c7                	jmp    c0019fd8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a011 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a011:	53                   	push   ebx
c001a012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a016:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a01a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a01e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a022:	0f af ca             	imul   ecx,edx
c001a025:	0f af d8             	imul   ebx,eax
c001a028:	f7 e2                	mul    edx
c001a02a:	01 d9                	add    ecx,ebx
c001a02c:	5b                   	pop    ebx
c001a02d:	01 ca                	add    edx,ecx
c001a02f:	c3                   	ret    

c001a030 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a030:	83 ec 0c             	sub    esp,0xc
c001a033:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a037:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a03b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a03f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a043:	e8 ac 87 00 00       	call   c00227f4 <__udivdi3>
c001a048:	83 c4 1c             	add    esp,0x1c
c001a04b:	c3                   	ret    

c001a04c <Vm::fpuSquare(unsigned long long)>:
c001a04c:	50                   	push   eax
c001a04d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a051:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a055:	52                   	push   edx
c001a056:	50                   	push   eax
c001a057:	52                   	push   edx
c001a058:	50                   	push   eax
c001a059:	e8 b3 ff ff ff       	call   c001a011 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a05e:	83 c4 14             	add    esp,0x14
c001a061:	c3                   	ret    

c001a062 <Vm::fpuGetReg(int)>:
c001a062:	83 ec 0c             	sub    esp,0xc
c001a065:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a06a:	76 10                	jbe    c001a07c <Vm::fpuGetReg(int)+0x1a>
c001a06c:	83 ec 0c             	sub    esp,0xc
c001a06f:	68 c6 63 02 c0       	push   0xc00263c6
c001a074:	e8 4e a9 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001a079:	83 c4 10             	add    esp,0x10
c001a07c:	a0 a1 96 02 c0       	mov    al,ds:0xc00296a1
c001a081:	b9 08 00 00 00       	mov    ecx,0x8
c001a086:	c0 e8 03             	shr    al,0x3
c001a089:	83 e0 07             	and    eax,0x7
c001a08c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a090:	99                   	cdq    
c001a091:	f7 f9                	idiv   ecx
c001a093:	8b 04 d5 a4 96 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd695c]
c001a09a:	8b 14 d5 a8 96 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6958]
c001a0a1:	83 c4 0c             	add    esp,0xc
c001a0a4:	c3                   	ret    

c001a0a5 <Vm::fpuSetReg(int, unsigned long long)>:
c001a0a5:	57                   	push   edi
c001a0a6:	56                   	push   esi
c001a0a7:	52                   	push   edx
c001a0a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a0ac:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a0b0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a0b5:	76 11                	jbe    c001a0c8 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a0b7:	83 ec 0c             	sub    esp,0xc
c001a0ba:	68 d9 63 02 c0       	push   0xc00263d9
c001a0bf:	e8 03 a9 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001a0c4:	83 c4 10             	add    esp,0x10
c001a0c7:	90                   	nop
c001a0c8:	a0 a1 96 02 c0       	mov    al,ds:0xc00296a1
c001a0cd:	b9 08 00 00 00       	mov    ecx,0x8
c001a0d2:	c0 e8 03             	shr    al,0x3
c001a0d5:	83 e0 07             	and    eax,0x7
c001a0d8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a0dc:	99                   	cdq    
c001a0dd:	f7 f9                	idiv   ecx
c001a0df:	89 34 d5 a4 96 02 c0 	mov    DWORD PTR [edx*8-0x3ffd695c],esi
c001a0e6:	89 3c d5 a8 96 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6958],edi
c001a0ed:	58                   	pop    eax
c001a0ee:	5e                   	pop    esi
c001a0ef:	5f                   	pop    edi
c001a0f0:	c3                   	ret    

c001a0f1 <Vm::fpuPush(unsigned long long)>:
c001a0f1:	a0 a1 96 02 c0       	mov    al,ds:0xc00296a1
c001a0f6:	c0 e8 03             	shr    al,0x3
c001a0f9:	83 e0 07             	and    eax,0x7
c001a0fc:	83 c0 07             	add    eax,0x7
c001a0ff:	88 c2                	mov    dl,al
c001a101:	83 e0 07             	and    eax,0x7
c001a104:	83 e2 07             	and    edx,0x7
c001a107:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a10e:	8a 15 a1 96 02 c0    	mov    dl,BYTE PTR ds:0xc00296a1
c001a114:	83 e2 c7             	and    edx,0xffffffc7
c001a117:	09 ca                	or     edx,ecx
c001a119:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a11d:	88 15 a1 96 02 c0    	mov    BYTE PTR ds:0xc00296a1,dl
c001a123:	89 0c c5 a8 96 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6958],ecx
c001a12a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a12e:	89 14 c5 a4 96 02 c0 	mov    DWORD PTR [eax*8-0x3ffd695c],edx
c001a135:	a1 e4 96 02 c0       	mov    eax,ds:0xc00296e4
c001a13a:	83 f8 08             	cmp    eax,0x8
c001a13d:	75 09                	jne    c001a148 <Vm::fpuPush(unsigned long long)+0x57>
c001a13f:	80 0d a0 96 02 c0 40 	or     BYTE PTR ds:0xc00296a0,0x40
c001a146:	c3                   	ret    
c001a147:	90                   	nop
c001a148:	40                   	inc    eax
c001a149:	a3 e4 96 02 c0       	mov    ds:0xc00296e4,eax
c001a14e:	c3                   	ret    

c001a14f <Vm::fpuPop()>:
c001a14f:	8a 0d a1 96 02 c0    	mov    cl,BYTE PTR ds:0xc00296a1
c001a155:	53                   	push   ebx
c001a156:	c0 e9 03             	shr    cl,0x3
c001a159:	8a 1d a1 96 02 c0    	mov    bl,BYTE PTR ds:0xc00296a1
c001a15f:	83 e1 07             	and    ecx,0x7
c001a162:	83 e3 c7             	and    ebx,0xffffffc7
c001a165:	8b 04 cd a4 96 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd695c]
c001a16c:	8b 14 cd a8 96 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6958]
c001a173:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a17a:	83 e1 38             	and    ecx,0x38
c001a17d:	09 d9                	or     ecx,ebx
c001a17f:	88 0d a1 96 02 c0    	mov    BYTE PTR ds:0xc00296a1,cl
c001a185:	8b 0d e4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296e4
c001a18b:	85 c9                	test   ecx,ecx
c001a18d:	74 09                	je     c001a198 <Vm::fpuPop()+0x49>
c001a18f:	49                   	dec    ecx
c001a190:	89 0d e4 96 02 c0    	mov    DWORD PTR ds:0xc00296e4,ecx
c001a196:	eb 08                	jmp    c001a1a0 <Vm::fpuPop()+0x51>
c001a198:	80 0d a0 96 02 c0 40 	or     BYTE PTR ds:0xc00296a0,0x40
c001a19f:	90                   	nop
c001a1a0:	5b                   	pop    ebx
c001a1a1:	c3                   	ret    

c001a1a2 <Vm::x87Handler(regs*)>:
c001a1a2:	55                   	push   ebp
c001a1a3:	57                   	push   edi
c001a1a4:	56                   	push   esi
c001a1a5:	53                   	push   ebx
c001a1a6:	83 ec 1c             	sub    esp,0x1c
c001a1a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a1ad:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a1b2:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a1b5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a1bd:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a1c1:	50                   	push   eax
c001a1c2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a1c6:	50                   	push   eax
c001a1c7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a1cb:	50                   	push   eax
c001a1cc:	53                   	push   ebx
c001a1cd:	e8 0e 9f ff ff       	call   c00140e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a1d2:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a1d5:	83 c4 10             	add    esp,0x10
c001a1d8:	89 c6                	mov    esi,eax
c001a1da:	80 fa d9             	cmp    dl,0xd9
c001a1dd:	0f 85 79 01 00 00    	jne    c001a35c <Vm::x87Handler(regs*)+0x1ba>
c001a1e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a1e7:	8d 50 20             	lea    edx,[eax+0x20]
c001a1ea:	80 fa 0e             	cmp    dl,0xe
c001a1ed:	0f 87 a5 00 00 00    	ja     c001a298 <Vm::x87Handler(regs*)+0xf6>
c001a1f3:	0f b6 d2             	movzx  edx,dl
c001a1f6:	ff 24 95 ec 63 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9c14]
c001a1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a200:	e8 de fc ff ff       	call   c0019ee3 <Vm::fpuGet0()>
c001a205:	eb 09                	jmp    c001a210 <Vm::x87Handler(regs*)+0x6e>
c001a207:	90                   	nop
c001a208:	e8 db fc ff ff       	call   c0019ee8 <Vm::fpuGet1()>
c001a20d:	8d 76 00             	lea    esi,[esi+0x0]
c001a210:	57                   	push   edi
c001a211:	57                   	push   edi
c001a212:	66 90                	xchg   ax,ax
c001a214:	52                   	push   edx
c001a215:	50                   	push   eax
c001a216:	e8 d6 fe ff ff       	call   c001a0f1 <Vm::fpuPush(unsigned long long)>
c001a21b:	90                   	nop
c001a21c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a220:	83 c4 10             	add    esp,0x10
c001a223:	90                   	nop
c001a224:	b0 01                	mov    al,0x1
c001a226:	e9 89 0a 00 00       	jmp    c001acb4 <Vm::x87Handler(regs*)+0xb12>
c001a22b:	90                   	nop
c001a22c:	83 ec 0c             	sub    esp,0xc
c001a22f:	6a 00                	push   0x0
c001a231:	e8 2c fe ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a236:	59                   	pop    ecx
c001a237:	5e                   	pop    esi
c001a238:	52                   	push   edx
c001a239:	50                   	push   eax
c001a23a:	e8 b3 fd ff ff       	call   c0019ff2 <Vm::fpuChs(unsigned long long)>
c001a23f:	eb 17                	jmp    c001a258 <Vm::x87Handler(regs*)+0xb6>
c001a241:	8d 76 00             	lea    esi,[esi+0x0]
c001a244:	83 ec 0c             	sub    esp,0xc
c001a247:	6a 00                	push   0x0
c001a249:	e8 14 fe ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a24e:	5f                   	pop    edi
c001a24f:	5d                   	pop    ebp
c001a250:	52                   	push   edx
c001a251:	50                   	push   eax
c001a252:	e8 92 fd ff ff       	call   c0019fe9 <Vm::fpuAbs(unsigned long long)>
c001a257:	90                   	nop
c001a258:	83 c4 0c             	add    esp,0xc
c001a25b:	90                   	nop
c001a25c:	52                   	push   edx
c001a25d:	50                   	push   eax
c001a25e:	66 90                	xchg   ax,ax
c001a260:	6a 00                	push   0x0
c001a262:	66 90                	xchg   ax,ax
c001a264:	e8 3c fe ff ff       	call   c001a0a5 <Vm::fpuSetReg(int, unsigned long long)>
c001a269:	eb b1                	jmp    c001a21c <Vm::x87Handler(regs*)+0x7a>
c001a26b:	90                   	nop
c001a26c:	e8 b7 fc ff ff       	call   c0019f28 <Vm::fpuGetLog210()>
c001a271:	eb 9d                	jmp    c001a210 <Vm::x87Handler(regs*)+0x6e>
c001a273:	90                   	nop
c001a274:	e8 7f fc ff ff       	call   c0019ef8 <Vm::fpuGetLog2E()>
c001a279:	eb 95                	jmp    c001a210 <Vm::x87Handler(regs*)+0x6e>
c001a27b:	90                   	nop
c001a27c:	e8 6f fc ff ff       	call   c0019ef0 <Vm::fpuGetPi()>
c001a281:	eb 8d                	jmp    c001a210 <Vm::x87Handler(regs*)+0x6e>
c001a283:	90                   	nop
c001a284:	e8 b7 fc ff ff       	call   c0019f40 <Vm::fpuGetLog102()>
c001a289:	eb 85                	jmp    c001a210 <Vm::x87Handler(regs*)+0x6e>
c001a28b:	90                   	nop
c001a28c:	e8 7f fc ff ff       	call   c0019f10 <Vm::fpuGetLogE2()>
c001a291:	e9 7a ff ff ff       	jmp    c001a210 <Vm::x87Handler(regs*)+0x6e>
c001a296:	66 90                	xchg   ax,ax
c001a298:	8d 50 40             	lea    edx,[eax+0x40]
c001a29b:	80 fa 07             	cmp    dl,0x7
c001a29e:	77 18                	ja     c001a2b8 <Vm::x87Handler(regs*)+0x116>
c001a2a0:	83 ec 0c             	sub    esp,0xc
c001a2a3:	2d c0 00 00 00       	sub    eax,0xc0
c001a2a8:	50                   	push   eax
c001a2a9:	e8 b4 fd ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a2ae:	59                   	pop    ecx
c001a2af:	5e                   	pop    esi
c001a2b0:	e9 5f ff ff ff       	jmp    c001a214 <Vm::x87Handler(regs*)+0x72>
c001a2b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2b8:	8d 50 38             	lea    edx,[eax+0x38]
c001a2bb:	80 fa 07             	cmp    dl,0x7
c001a2be:	77 3c                	ja     c001a2fc <Vm::x87Handler(regs*)+0x15a>
c001a2c0:	83 ec 0c             	sub    esp,0xc
c001a2c3:	2d c8 00 00 00       	sub    eax,0xc8
c001a2c8:	50                   	push   eax
c001a2c9:	e8 94 fd ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a2ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2d5:	89 c6                	mov    esi,eax
c001a2d7:	89 d7                	mov    edi,edx
c001a2d9:	e8 84 fd ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a2de:	83 c4 0c             	add    esp,0xc
c001a2e1:	52                   	push   edx
c001a2e2:	50                   	push   eax
c001a2e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a2e7:	2d c8 00 00 00       	sub    eax,0xc8
c001a2ec:	50                   	push   eax
c001a2ed:	e8 b3 fd ff ff       	call   c001a0a5 <Vm::fpuSetReg(int, unsigned long long)>
c001a2f2:	83 c4 0c             	add    esp,0xc
c001a2f5:	57                   	push   edi
c001a2f6:	56                   	push   esi
c001a2f7:	e9 64 ff ff ff       	jmp    c001a260 <Vm::x87Handler(regs*)+0xbe>
c001a2fc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a300:	84 d2                	test   dl,dl
c001a302:	75 10                	jne    c001a314 <Vm::x87Handler(regs*)+0x172>
c001a304:	83 ec 0c             	sub    esp,0xc
c001a307:	ff 36                	push   DWORD PTR [esi]
c001a309:	e8 8d fa ff ff       	call   c0019d9b <Vm::fpu32ToInternal(unsigned int)>
c001a30e:	e9 c9 00 00 00       	jmp    c001a3dc <Vm::x87Handler(regs*)+0x23a>
c001a313:	90                   	nop
c001a314:	80 fa 03             	cmp    dl,0x3
c001a317:	75 13                	jne    c001a32c <Vm::x87Handler(regs*)+0x18a>
c001a319:	e8 31 fe ff ff       	call   c001a14f <Vm::fpuPop()>
c001a31e:	55                   	push   ebp
c001a31f:	55                   	push   ebp
c001a320:	52                   	push   edx
c001a321:	50                   	push   eax
c001a322:	e8 0d fa ff ff       	call   c0019d34 <Vm::fpuInternalTo32(unsigned long long)>
c001a327:	e9 90 00 00 00       	jmp    c001a3bc <Vm::x87Handler(regs*)+0x21a>
c001a32c:	80 fa 05             	cmp    dl,0x5
c001a32f:	75 0f                	jne    c001a340 <Vm::x87Handler(regs*)+0x19e>
c001a331:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a334:	66 a3 a2 96 02 c0    	mov    ds:0xc00296a2,ax
c001a33a:	e9 ed 00 00 00       	jmp    c001a42c <Vm::x87Handler(regs*)+0x28a>
c001a33f:	90                   	nop
c001a340:	31 c0                	xor    eax,eax
c001a342:	80 fa 07             	cmp    dl,0x7
c001a345:	0f 85 69 09 00 00    	jne    c001acb4 <Vm::x87Handler(regs*)+0xb12>
c001a34b:	66 a1 a2 96 02 c0    	mov    ax,ds:0xc00296a2
c001a351:	66 89 06             	mov    WORD PTR [esi],ax
c001a354:	e9 d3 00 00 00       	jmp    c001a42c <Vm::x87Handler(regs*)+0x28a>
c001a359:	8d 76 00             	lea    esi,[esi+0x0]
c001a35c:	80 fa d8             	cmp    dl,0xd8
c001a35f:	0f 84 d3 00 00 00    	je     c001a438 <Vm::x87Handler(regs*)+0x296>
c001a365:	80 fa dc             	cmp    dl,0xdc
c001a368:	0f 84 2a 02 00 00    	je     c001a598 <Vm::x87Handler(regs*)+0x3f6>
c001a36e:	80 fa de             	cmp    dl,0xde
c001a371:	0f 84 f1 02 00 00    	je     c001a668 <Vm::x87Handler(regs*)+0x4c6>
c001a377:	80 fa dd             	cmp    dl,0xdd
c001a37a:	0f 84 94 04 00 00    	je     c001a814 <Vm::x87Handler(regs*)+0x672>
c001a380:	80 fa da             	cmp    dl,0xda
c001a383:	0f 84 5f 05 00 00    	je     c001a8e8 <Vm::x87Handler(regs*)+0x746>
c001a389:	80 fa df             	cmp    dl,0xdf
c001a38c:	0f 84 aa 05 00 00    	je     c001a93c <Vm::x87Handler(regs*)+0x79a>
c001a392:	31 c0                	xor    eax,eax
c001a394:	80 fa db             	cmp    dl,0xdb
c001a397:	0f 85 17 09 00 00    	jne    c001acb4 <Vm::x87Handler(regs*)+0xb12>
c001a39d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a3a1:	80 fa 03             	cmp    dl,0x3
c001a3a4:	0f 85 c2 06 00 00    	jne    c001aa6c <Vm::x87Handler(regs*)+0x8ca>
c001a3aa:	e8 a0 fd ff ff       	call   c001a14f <Vm::fpuPop()>
c001a3af:	55                   	push   ebp
c001a3b0:	55                   	push   ebp
c001a3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001a3b4:	52                   	push   edx
c001a3b5:	50                   	push   eax
c001a3b6:	e8 2e fa ff ff       	call   c0019de9 <Vm::fpuFloatToLong(unsigned long long)>
c001a3bb:	90                   	nop
c001a3bc:	83 c4 10             	add    esp,0x10
c001a3bf:	89 06                	mov    DWORD PTR [esi],eax
c001a3c1:	eb 69                	jmp    c001a42c <Vm::x87Handler(regs*)+0x28a>
c001a3c3:	90                   	nop
c001a3c4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a3c8:	84 d2                	test   dl,dl
c001a3ca:	0f 85 2c 06 00 00    	jne    c001a9fc <Vm::x87Handler(regs*)+0x85a>
c001a3d0:	57                   	push   edi
c001a3d1:	57                   	push   edi
c001a3d2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3d5:	ff 36                	push   DWORD PTR [esi]
c001a3d7:	e8 04 fa ff ff       	call   c0019de0 <Vm::fpu64ToInternal(unsigned long long)>
c001a3dc:	5e                   	pop    esi
c001a3dd:	5f                   	pop    edi
c001a3de:	52                   	push   edx
c001a3df:	50                   	push   eax
c001a3e0:	e8 0c fd ff ff       	call   c001a0f1 <Vm::fpuPush(unsigned long long)>
c001a3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a3ec:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a3ef:	e9 2c fe ff ff       	jmp    c001a220 <Vm::x87Handler(regs*)+0x7e>
c001a3f4:	80 fa 03             	cmp    dl,0x3
c001a3f7:	0f 85 2b 07 00 00    	jne    c001ab28 <Vm::x87Handler(regs*)+0x986>
c001a3fd:	57                   	push   edi
c001a3fe:	57                   	push   edi
c001a3ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a402:	ff 36                	push   DWORD PTR [esi]
c001a404:	e8 d7 f9 ff ff       	call   c0019de0 <Vm::fpu64ToInternal(unsigned long long)>
c001a409:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a410:	89 c6                	mov    esi,eax
c001a412:	89 d7                	mov    edi,edx
c001a414:	e8 49 fc ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a419:	57                   	push   edi
c001a41a:	56                   	push   esi
c001a41b:	52                   	push   edx
c001a41c:	50                   	push   eax
c001a41d:	e8 60 fb ff ff       	call   c0019f82 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a422:	83 c4 20             	add    esp,0x20
c001a425:	e8 25 fd ff ff       	call   c001a14f <Vm::fpuPop()>
c001a42a:	66 90                	xchg   ax,ax
c001a42c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a430:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a433:	e9 ec fd ff ff       	jmp    c001a224 <Vm::x87Handler(regs*)+0x82>
c001a438:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a43c:	8d 50 40             	lea    edx,[eax+0x40]
c001a43f:	80 fa 07             	cmp    dl,0x7
c001a442:	77 2c                	ja     c001a470 <Vm::x87Handler(regs*)+0x2ce>
c001a444:	83 ec 0c             	sub    esp,0xc
c001a447:	2d c0 00 00 00       	sub    eax,0xc0
c001a44c:	50                   	push   eax
c001a44d:	e8 10 fc ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a452:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a459:	89 c6                	mov    esi,eax
c001a45b:	89 d7                	mov    edi,edx
c001a45d:	e8 00 fc ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a462:	57                   	push   edi
c001a463:	56                   	push   esi
c001a464:	52                   	push   edx
c001a465:	50                   	push   eax
c001a466:	e8 6d fb ff ff       	call   c0019fd8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a46b:	eb 33                	jmp    c001a4a0 <Vm::x87Handler(regs*)+0x2fe>
c001a46d:	8d 76 00             	lea    esi,[esi+0x0]
c001a470:	8d 50 38             	lea    edx,[eax+0x38]
c001a473:	80 fa 07             	cmp    dl,0x7
c001a476:	77 30                	ja     c001a4a8 <Vm::x87Handler(regs*)+0x306>
c001a478:	83 ec 0c             	sub    esp,0xc
c001a47b:	2d c8 00 00 00       	sub    eax,0xc8
c001a480:	50                   	push   eax
c001a481:	e8 dc fb ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a486:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a48d:	89 c6                	mov    esi,eax
c001a48f:	89 d7                	mov    edi,edx
c001a491:	e8 cc fb ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a496:	57                   	push   edi
c001a497:	56                   	push   esi
c001a498:	52                   	push   edx
c001a499:	50                   	push   eax
c001a49a:	e8 72 fb ff ff       	call   c001a011 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a49f:	90                   	nop
c001a4a0:	83 c4 1c             	add    esp,0x1c
c001a4a3:	e9 b4 fd ff ff       	jmp    c001a25c <Vm::x87Handler(regs*)+0xba>
c001a4a8:	8d 50 30             	lea    edx,[eax+0x30]
c001a4ab:	80 fa 07             	cmp    dl,0x7
c001a4ae:	77 10                	ja     c001a4c0 <Vm::x87Handler(regs*)+0x31e>
c001a4b0:	83 ec 0c             	sub    esp,0xc
c001a4b3:	2d d0 00 00 00       	sub    eax,0xd0
c001a4b8:	e9 c3 03 00 00       	jmp    c001a880 <Vm::x87Handler(regs*)+0x6de>
c001a4bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a4c0:	8d 50 28             	lea    edx,[eax+0x28]
c001a4c3:	80 fa 07             	cmp    dl,0x7
c001a4c6:	77 10                	ja     c001a4d8 <Vm::x87Handler(regs*)+0x336>
c001a4c8:	83 ec 0c             	sub    esp,0xc
c001a4cb:	2d d8 00 00 00       	sub    eax,0xd8
c001a4d0:	e9 e7 03 00 00       	jmp    c001a8bc <Vm::x87Handler(regs*)+0x71a>
c001a4d5:	8d 76 00             	lea    esi,[esi+0x0]
c001a4d8:	8d 50 20             	lea    edx,[eax+0x20]
c001a4db:	80 fa 07             	cmp    dl,0x7
c001a4de:	77 1c                	ja     c001a4fc <Vm::x87Handler(regs*)+0x35a>
c001a4e0:	83 ec 0c             	sub    esp,0xc
c001a4e3:	2d e0 00 00 00       	sub    eax,0xe0
c001a4e8:	50                   	push   eax
c001a4e9:	e8 74 fb ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a4ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4f5:	89 c6                	mov    esi,eax
c001a4f7:	89 d7                	mov    edi,edx
c001a4f9:	eb 25                	jmp    c001a520 <Vm::x87Handler(regs*)+0x37e>
c001a4fb:	90                   	nop
c001a4fc:	8d 50 18             	lea    edx,[eax+0x18]
c001a4ff:	80 fa 07             	cmp    dl,0x7
c001a502:	77 30                	ja     c001a534 <Vm::x87Handler(regs*)+0x392>
c001a504:	83 ec 0c             	sub    esp,0xc
c001a507:	6a 00                	push   0x0
c001a509:	e8 54 fb ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a50e:	89 c6                	mov    esi,eax
c001a510:	89 d7                	mov    edi,edx
c001a512:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a516:	2d e8 00 00 00       	sub    eax,0xe8
c001a51b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a51e:	66 90                	xchg   ax,ax
c001a520:	e8 3d fb ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a525:	57                   	push   edi
c001a526:	56                   	push   esi
c001a527:	52                   	push   edx
c001a528:	50                   	push   eax
c001a529:	e8 d4 fa ff ff       	call   c001a002 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a52e:	e9 6d ff ff ff       	jmp    c001a4a0 <Vm::x87Handler(regs*)+0x2fe>
c001a533:	90                   	nop
c001a534:	8d 50 10             	lea    edx,[eax+0x10]
c001a537:	80 fa 07             	cmp    dl,0x7
c001a53a:	77 1c                	ja     c001a558 <Vm::x87Handler(regs*)+0x3b6>
c001a53c:	83 ec 0c             	sub    esp,0xc
c001a53f:	2d f0 00 00 00       	sub    eax,0xf0
c001a544:	50                   	push   eax
c001a545:	e8 18 fb ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a54a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a551:	89 c6                	mov    esi,eax
c001a553:	89 d7                	mov    edi,edx
c001a555:	eb 25                	jmp    c001a57c <Vm::x87Handler(regs*)+0x3da>
c001a557:	90                   	nop
c001a558:	3c f7                	cmp    al,0xf7
c001a55a:	0f 86 00 04 00 00    	jbe    c001a960 <Vm::x87Handler(regs*)+0x7be>
c001a560:	83 ec 0c             	sub    esp,0xc
c001a563:	6a 00                	push   0x0
c001a565:	e8 f8 fa ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a56a:	89 c6                	mov    esi,eax
c001a56c:	89 d7                	mov    edi,edx
c001a56e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a572:	2d f8 00 00 00       	sub    eax,0xf8
c001a577:	89 04 24             	mov    DWORD PTR [esp],eax
c001a57a:	66 90                	xchg   ax,ax
c001a57c:	e8 e1 fa ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a581:	57                   	push   edi
c001a582:	56                   	push   esi
c001a583:	52                   	push   edx
c001a584:	50                   	push   eax
c001a585:	e8 a6 fa ff ff       	call   c001a030 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a58a:	83 c4 1c             	add    esp,0x1c
c001a58d:	52                   	push   edx
c001a58e:	50                   	push   eax
c001a58f:	6a 00                	push   0x0
c001a591:	e9 6a 02 00 00       	jmp    c001a800 <Vm::x87Handler(regs*)+0x65e>
c001a596:	66 90                	xchg   ax,ax
c001a598:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a59c:	8d 50 40             	lea    edx,[eax+0x40]
c001a59f:	80 fa 07             	cmp    dl,0x7
c001a5a2:	77 38                	ja     c001a5dc <Vm::x87Handler(regs*)+0x43a>
c001a5a4:	83 ec 0c             	sub    esp,0xc
c001a5a7:	2d c0 00 00 00       	sub    eax,0xc0
c001a5ac:	50                   	push   eax
c001a5ad:	e8 b0 fa ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a5b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5b9:	89 c6                	mov    esi,eax
c001a5bb:	89 d7                	mov    edi,edx
c001a5bd:	e8 a0 fa ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a5c2:	57                   	push   edi
c001a5c3:	56                   	push   esi
c001a5c4:	52                   	push   edx
c001a5c5:	50                   	push   eax
c001a5c6:	e8 0d fa ff ff       	call   c0019fd8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a5cb:	83 c4 1c             	add    esp,0x1c
c001a5ce:	52                   	push   edx
c001a5cf:	50                   	push   eax
c001a5d0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5d4:	2d c0 00 00 00       	sub    eax,0xc0
c001a5d9:	eb 41                	jmp    c001a61c <Vm::x87Handler(regs*)+0x47a>
c001a5db:	90                   	nop
c001a5dc:	8d 50 38             	lea    edx,[eax+0x38]
c001a5df:	80 fa 07             	cmp    dl,0x7
c001a5e2:	77 40                	ja     c001a624 <Vm::x87Handler(regs*)+0x482>
c001a5e4:	83 ec 0c             	sub    esp,0xc
c001a5e7:	2d c8 00 00 00       	sub    eax,0xc8
c001a5ec:	50                   	push   eax
c001a5ed:	e8 70 fa ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a5f2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5f9:	89 c6                	mov    esi,eax
c001a5fb:	89 d7                	mov    edi,edx
c001a5fd:	e8 60 fa ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a602:	57                   	push   edi
c001a603:	56                   	push   esi
c001a604:	52                   	push   edx
c001a605:	50                   	push   eax
c001a606:	e8 06 fa ff ff       	call   c001a011 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a60b:	83 c4 1c             	add    esp,0x1c
c001a60e:	52                   	push   edx
c001a60f:	50                   	push   eax
c001a610:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a614:	2d c8 00 00 00       	sub    eax,0xc8
c001a619:	8d 76 00             	lea    esi,[esi+0x0]
c001a61c:	50                   	push   eax
c001a61d:	e9 42 fc ff ff       	jmp    c001a264 <Vm::x87Handler(regs*)+0xc2>
c001a622:	66 90                	xchg   ax,ax
c001a624:	83 c0 18             	add    eax,0x18
c001a627:	3c 07                	cmp    al,0x7
c001a629:	0f 87 6d 04 00 00    	ja     c001aa9c <Vm::x87Handler(regs*)+0x8fa>
c001a62f:	83 ec 0c             	sub    esp,0xc
c001a632:	6a 00                	push   0x0
c001a634:	e8 29 fa ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a639:	89 c6                	mov    esi,eax
c001a63b:	89 d7                	mov    edi,edx
c001a63d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a641:	2d e8 00 00 00       	sub    eax,0xe8
c001a646:	89 04 24             	mov    DWORD PTR [esp],eax
c001a649:	e8 14 fa ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a64e:	57                   	push   edi
c001a64f:	56                   	push   esi
c001a650:	52                   	push   edx
c001a651:	50                   	push   eax
c001a652:	e8 ab f9 ff ff       	call   c001a002 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a657:	83 c4 1c             	add    esp,0x1c
c001a65a:	52                   	push   edx
c001a65b:	50                   	push   eax
c001a65c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a660:	2d e8 00 00 00       	sub    eax,0xe8
c001a665:	eb b5                	jmp    c001a61c <Vm::x87Handler(regs*)+0x47a>
c001a667:	90                   	nop
c001a668:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a66c:	8d 50 40             	lea    edx,[eax+0x40]
c001a66f:	80 fa 07             	cmp    dl,0x7
c001a672:	77 3c                	ja     c001a6b0 <Vm::x87Handler(regs*)+0x50e>
c001a674:	83 ec 0c             	sub    esp,0xc
c001a677:	2d c0 00 00 00       	sub    eax,0xc0
c001a67c:	50                   	push   eax
c001a67d:	e8 e0 f9 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a682:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a689:	89 c6                	mov    esi,eax
c001a68b:	89 d7                	mov    edi,edx
c001a68d:	e8 d0 f9 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a692:	57                   	push   edi
c001a693:	56                   	push   esi
c001a694:	52                   	push   edx
c001a695:	50                   	push   eax
c001a696:	e8 3d f9 ff ff       	call   c0019fd8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a69b:	83 c4 1c             	add    esp,0x1c
c001a69e:	52                   	push   edx
c001a69f:	50                   	push   eax
c001a6a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6a4:	2d c0 00 00 00       	sub    eax,0xc0
c001a6a9:	e9 b2 01 00 00       	jmp    c001a860 <Vm::x87Handler(regs*)+0x6be>
c001a6ae:	66 90                	xchg   ax,ax
c001a6b0:	8d 50 20             	lea    edx,[eax+0x20]
c001a6b3:	80 fa 07             	cmp    dl,0x7
c001a6b6:	77 3c                	ja     c001a6f4 <Vm::x87Handler(regs*)+0x552>
c001a6b8:	83 ec 0c             	sub    esp,0xc
c001a6bb:	2d e0 00 00 00       	sub    eax,0xe0
c001a6c0:	50                   	push   eax
c001a6c1:	e8 9c f9 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a6c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a6cd:	89 c6                	mov    esi,eax
c001a6cf:	89 d7                	mov    edi,edx
c001a6d1:	e8 8c f9 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a6d6:	57                   	push   edi
c001a6d7:	56                   	push   esi
c001a6d8:	52                   	push   edx
c001a6d9:	50                   	push   eax
c001a6da:	e8 23 f9 ff ff       	call   c001a002 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a6df:	83 c4 1c             	add    esp,0x1c
c001a6e2:	52                   	push   edx
c001a6e3:	50                   	push   eax
c001a6e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6e8:	2d e0 00 00 00       	sub    eax,0xe0
c001a6ed:	e9 6e 01 00 00       	jmp    c001a860 <Vm::x87Handler(regs*)+0x6be>
c001a6f2:	66 90                	xchg   ax,ax
c001a6f4:	8d 50 18             	lea    edx,[eax+0x18]
c001a6f7:	80 fa 07             	cmp    dl,0x7
c001a6fa:	77 3c                	ja     c001a738 <Vm::x87Handler(regs*)+0x596>
c001a6fc:	83 ec 0c             	sub    esp,0xc
c001a6ff:	6a 00                	push   0x0
c001a701:	e8 5c f9 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a706:	89 c6                	mov    esi,eax
c001a708:	89 d7                	mov    edi,edx
c001a70a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a70e:	2d e8 00 00 00       	sub    eax,0xe8
c001a713:	89 04 24             	mov    DWORD PTR [esp],eax
c001a716:	e8 47 f9 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a71b:	57                   	push   edi
c001a71c:	56                   	push   esi
c001a71d:	52                   	push   edx
c001a71e:	50                   	push   eax
c001a71f:	e8 de f8 ff ff       	call   c001a002 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a724:	83 c4 1c             	add    esp,0x1c
c001a727:	52                   	push   edx
c001a728:	50                   	push   eax
c001a729:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a72d:	2d e8 00 00 00       	sub    eax,0xe8
c001a732:	e9 29 01 00 00       	jmp    c001a860 <Vm::x87Handler(regs*)+0x6be>
c001a737:	90                   	nop
c001a738:	8d 50 38             	lea    edx,[eax+0x38]
c001a73b:	80 fa 07             	cmp    dl,0x7
c001a73e:	77 3c                	ja     c001a77c <Vm::x87Handler(regs*)+0x5da>
c001a740:	83 ec 0c             	sub    esp,0xc
c001a743:	2d c8 00 00 00       	sub    eax,0xc8
c001a748:	50                   	push   eax
c001a749:	e8 14 f9 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a74e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a755:	89 c6                	mov    esi,eax
c001a757:	89 d7                	mov    edi,edx
c001a759:	e8 04 f9 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a75e:	57                   	push   edi
c001a75f:	56                   	push   esi
c001a760:	52                   	push   edx
c001a761:	50                   	push   eax
c001a762:	e8 aa f8 ff ff       	call   c001a011 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a767:	83 c4 1c             	add    esp,0x1c
c001a76a:	52                   	push   edx
c001a76b:	50                   	push   eax
c001a76c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a770:	2d c8 00 00 00       	sub    eax,0xc8
c001a775:	e9 82 00 00 00       	jmp    c001a7fc <Vm::x87Handler(regs*)+0x65a>
c001a77a:	66 90                	xchg   ax,ax
c001a77c:	3c f7                	cmp    al,0xf7
c001a77e:	76 38                	jbe    c001a7b8 <Vm::x87Handler(regs*)+0x616>
c001a780:	83 ec 0c             	sub    esp,0xc
c001a783:	6a 00                	push   0x0
c001a785:	e8 d8 f8 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a78a:	89 c6                	mov    esi,eax
c001a78c:	89 d7                	mov    edi,edx
c001a78e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a792:	2d f8 00 00 00       	sub    eax,0xf8
c001a797:	89 04 24             	mov    DWORD PTR [esp],eax
c001a79a:	e8 c3 f8 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a79f:	57                   	push   edi
c001a7a0:	56                   	push   esi
c001a7a1:	52                   	push   edx
c001a7a2:	50                   	push   eax
c001a7a3:	e8 88 f8 ff ff       	call   c001a030 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a7a8:	83 c4 1c             	add    esp,0x1c
c001a7ab:	52                   	push   edx
c001a7ac:	50                   	push   eax
c001a7ad:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7b1:	2d f8 00 00 00       	sub    eax,0xf8
c001a7b6:	eb 44                	jmp    c001a7fc <Vm::x87Handler(regs*)+0x65a>
c001a7b8:	8d 50 10             	lea    edx,[eax+0x10]
c001a7bb:	80 fa 07             	cmp    dl,0x7
c001a7be:	0f 87 6c 01 00 00    	ja     c001a930 <Vm::x87Handler(regs*)+0x78e>
c001a7c4:	83 ec 0c             	sub    esp,0xc
c001a7c7:	2d f0 00 00 00       	sub    eax,0xf0
c001a7cc:	50                   	push   eax
c001a7cd:	e8 90 f8 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a7d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7d9:	89 c6                	mov    esi,eax
c001a7db:	89 d7                	mov    edi,edx
c001a7dd:	e8 80 f8 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a7e2:	57                   	push   edi
c001a7e3:	56                   	push   esi
c001a7e4:	52                   	push   edx
c001a7e5:	50                   	push   eax
c001a7e6:	e8 45 f8 ff ff       	call   c001a030 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a7eb:	83 c4 1c             	add    esp,0x1c
c001a7ee:	52                   	push   edx
c001a7ef:	50                   	push   eax
c001a7f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a7f4:	2d f0 00 00 00       	sub    eax,0xf0
c001a7f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7fc:	50                   	push   eax
c001a7fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a800:	e8 a0 f8 ff ff       	call   c001a0a5 <Vm::fpuSetReg(int, unsigned long long)>
c001a805:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a809:	e8 41 f9 ff ff       	call   c001a14f <Vm::fpuPop()>
c001a80e:	e9 0d fa ff ff       	jmp    c001a220 <Vm::x87Handler(regs*)+0x7e>
c001a813:	90                   	nop
c001a814:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a818:	8d 50 30             	lea    edx,[eax+0x30]
c001a81b:	80 fa 07             	cmp    dl,0x7
c001a81e:	77 20                	ja     c001a840 <Vm::x87Handler(regs*)+0x69e>
c001a820:	83 ec 0c             	sub    esp,0xc
c001a823:	6a 00                	push   0x0
c001a825:	e8 38 f8 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a82a:	83 c4 0c             	add    esp,0xc
c001a82d:	52                   	push   edx
c001a82e:	50                   	push   eax
c001a82f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a833:	2d d0 00 00 00       	sub    eax,0xd0
c001a838:	e9 df fd ff ff       	jmp    c001a61c <Vm::x87Handler(regs*)+0x47a>
c001a83d:	8d 76 00             	lea    esi,[esi+0x0]
c001a840:	8d 50 28             	lea    edx,[eax+0x28]
c001a843:	80 fa 07             	cmp    dl,0x7
c001a846:	77 28                	ja     c001a870 <Vm::x87Handler(regs*)+0x6ce>
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	6a 00                	push   0x0
c001a84d:	e8 10 f8 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a852:	83 c4 0c             	add    esp,0xc
c001a855:	52                   	push   edx
c001a856:	50                   	push   eax
c001a857:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a85b:	2d d8 00 00 00       	sub    eax,0xd8
c001a860:	50                   	push   eax
c001a861:	e8 3f f8 ff ff       	call   c001a0a5 <Vm::fpuSetReg(int, unsigned long long)>
c001a866:	e8 e4 f8 ff ff       	call   c001a14f <Vm::fpuPop()>
c001a86b:	e9 ac f9 ff ff       	jmp    c001a21c <Vm::x87Handler(regs*)+0x7a>
c001a870:	8d 50 20             	lea    edx,[eax+0x20]
c001a873:	80 fa 07             	cmp    dl,0x7
c001a876:	77 30                	ja     c001a8a8 <Vm::x87Handler(regs*)+0x706>
c001a878:	83 ec 0c             	sub    esp,0xc
c001a87b:	2d e0 00 00 00       	sub    eax,0xe0
c001a880:	50                   	push   eax
c001a881:	e8 dc f7 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a886:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a88d:	89 c6                	mov    esi,eax
c001a88f:	89 d7                	mov    edi,edx
c001a891:	e8 cc f7 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a896:	57                   	push   edi
c001a897:	56                   	push   esi
c001a898:	52                   	push   edx
c001a899:	50                   	push   eax
c001a89a:	e8 e3 f6 ff ff       	call   c0019f82 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a89f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a8a3:	e9 78 02 00 00       	jmp    c001ab20 <Vm::x87Handler(regs*)+0x97e>
c001a8a8:	8d 50 18             	lea    edx,[eax+0x18]
c001a8ab:	80 fa 07             	cmp    dl,0x7
c001a8ae:	0f 87 10 fb ff ff    	ja     c001a3c4 <Vm::x87Handler(regs*)+0x222>
c001a8b4:	83 ec 0c             	sub    esp,0xc
c001a8b7:	2d e8 00 00 00       	sub    eax,0xe8
c001a8bc:	50                   	push   eax
c001a8bd:	e8 a0 f7 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a8c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a8c9:	89 c6                	mov    esi,eax
c001a8cb:	89 d7                	mov    edi,edx
c001a8cd:	e8 90 f7 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a8d2:	57                   	push   edi
c001a8d3:	56                   	push   esi
c001a8d4:	52                   	push   edx
c001a8d5:	50                   	push   eax
c001a8d6:	e8 a7 f6 ff ff       	call   c0019f82 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a8db:	83 c4 20             	add    esp,0x20
c001a8de:	e8 6c f8 ff ff       	call   c001a14f <Vm::fpuPop()>
c001a8e3:	eb 6f                	jmp    c001a954 <Vm::x87Handler(regs*)+0x7b2>
c001a8e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a8e8:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a8ec:	0f 85 22 01 00 00    	jne    c001aa14 <Vm::x87Handler(regs*)+0x872>
c001a8f2:	66 90                	xchg   ax,ax
c001a8f4:	83 ec 0c             	sub    esp,0xc
c001a8f7:	6a 01                	push   0x1
c001a8f9:	e8 64 f7 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a8fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a905:	89 c6                	mov    esi,eax
c001a907:	89 d7                	mov    edi,edx
c001a909:	e8 54 f7 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a90e:	57                   	push   edi
c001a90f:	56                   	push   esi
c001a910:	52                   	push   edx
c001a911:	50                   	push   eax
c001a912:	e8 6b f6 ff ff       	call   c0019f82 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a917:	83 c4 20             	add    esp,0x20
c001a91a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a91e:	e8 2c f8 ff ff       	call   c001a14f <Vm::fpuPop()>
c001a923:	e8 27 f8 ff ff       	call   c001a14f <Vm::fpuPop()>
c001a928:	e9 f7 f8 ff ff       	jmp    c001a224 <Vm::x87Handler(regs*)+0x82>
c001a92d:	8d 76 00             	lea    esi,[esi+0x0]
c001a930:	3c d9                	cmp    al,0xd9
c001a932:	0f 85 e8 02 00 00    	jne    c001ac20 <Vm::x87Handler(regs*)+0xa7e>
c001a938:	eb ba                	jmp    c001a8f4 <Vm::x87Handler(regs*)+0x752>
c001a93a:	66 90                	xchg   ax,ax
c001a93c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a940:	0f 85 2a 03 00 00    	jne    c001ac70 <Vm::x87Handler(regs*)+0xace>
c001a946:	0f b7 05 a0 96 02 c0 	movzx  eax,WORD PTR ds:0xc00296a0
c001a94d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a951:	8d 76 00             	lea    esi,[esi+0x0]
c001a954:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a958:	e9 c7 f8 ff ff       	jmp    c001a224 <Vm::x87Handler(regs*)+0x82>
c001a95d:	8d 76 00             	lea    esi,[esi+0x0]
c001a960:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a964:	84 d2                	test   dl,dl
c001a966:	75 10                	jne    c001a978 <Vm::x87Handler(regs*)+0x7d6>
c001a968:	83 ec 0c             	sub    esp,0xc
c001a96b:	ff 36                	push   DWORD PTR [esi]
c001a96d:	e8 29 f4 ff ff       	call   c0019d9b <Vm::fpu32ToInternal(unsigned int)>
c001a972:	e9 39 01 00 00       	jmp    c001aab0 <Vm::x87Handler(regs*)+0x90e>
c001a977:	90                   	nop
c001a978:	80 fa 01             	cmp    dl,0x1
c001a97b:	75 0f                	jne    c001a98c <Vm::x87Handler(regs*)+0x7ea>
c001a97d:	83 ec 0c             	sub    esp,0xc
c001a980:	ff 36                	push   DWORD PTR [esi]
c001a982:	e8 14 f4 ff ff       	call   c0019d9b <Vm::fpu32ToInternal(unsigned int)>
c001a987:	e9 b4 02 00 00       	jmp    c001ac40 <Vm::x87Handler(regs*)+0xa9e>
c001a98c:	80 fa 04             	cmp    dl,0x4
c001a98f:	75 0f                	jne    c001a9a0 <Vm::x87Handler(regs*)+0x7fe>
c001a991:	83 ec 0c             	sub    esp,0xc
c001a994:	ff 36                	push   DWORD PTR [esi]
c001a996:	e8 00 f4 ff ff       	call   c0019d9b <Vm::fpu32ToInternal(unsigned int)>
c001a99b:	e9 9c 01 00 00       	jmp    c001ab3c <Vm::x87Handler(regs*)+0x99a>
c001a9a0:	80 fa 05             	cmp    dl,0x5
c001a9a3:	75 1b                	jne    c001a9c0 <Vm::x87Handler(regs*)+0x81e>
c001a9a5:	83 ec 0c             	sub    esp,0xc
c001a9a8:	6a 00                	push   0x0
c001a9aa:	e8 b3 f6 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a9af:	89 c7                	mov    edi,eax
c001a9b1:	89 d5                	mov    ebp,edx
c001a9b3:	58                   	pop    eax
c001a9b4:	ff 36                	push   DWORD PTR [esi]
c001a9b6:	e8 e0 f3 ff ff       	call   c0019d9b <Vm::fpu32ToInternal(unsigned int)>
c001a9bb:	e9 bc 01 00 00       	jmp    c001ab7c <Vm::x87Handler(regs*)+0x9da>
c001a9c0:	80 fa 06             	cmp    dl,0x6
c001a9c3:	75 0f                	jne    c001a9d4 <Vm::x87Handler(regs*)+0x832>
c001a9c5:	83 ec 0c             	sub    esp,0xc
c001a9c8:	ff 36                	push   DWORD PTR [esi]
c001a9ca:	e8 cc f3 ff ff       	call   c0019d9b <Vm::fpu32ToInternal(unsigned int)>
c001a9cf:	e9 cc 01 00 00       	jmp    c001aba0 <Vm::x87Handler(regs*)+0x9fe>
c001a9d4:	31 c0                	xor    eax,eax
c001a9d6:	80 fa 07             	cmp    dl,0x7
c001a9d9:	0f 85 d5 02 00 00    	jne    c001acb4 <Vm::x87Handler(regs*)+0xb12>
c001a9df:	83 ec 0c             	sub    esp,0xc
c001a9e2:	6a 00                	push   0x0
c001a9e4:	e8 79 f6 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001a9e9:	89 c7                	mov    edi,eax
c001a9eb:	89 d5                	mov    ebp,edx
c001a9ed:	58                   	pop    eax
c001a9ee:	ff 36                	push   DWORD PTR [esi]
c001a9f0:	e8 a6 f3 ff ff       	call   c0019d9b <Vm::fpu32ToInternal(unsigned int)>
c001a9f5:	e9 ee 01 00 00       	jmp    c001abe8 <Vm::x87Handler(regs*)+0xa46>
c001a9fa:	66 90                	xchg   ax,ax
c001a9fc:	80 fa 03             	cmp    dl,0x3
c001a9ff:	0f 85 f7 01 00 00    	jne    c001abfc <Vm::x87Handler(regs*)+0xa5a>
c001aa05:	e8 45 f7 ff ff       	call   c001a14f <Vm::fpuPop()>
c001aa0a:	51                   	push   ecx
c001aa0b:	51                   	push   ecx
c001aa0c:	e9 03 02 00 00       	jmp    c001ac14 <Vm::x87Handler(regs*)+0xa72>
c001aa11:	8d 76 00             	lea    esi,[esi+0x0]
c001aa14:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aa18:	80 fa 01             	cmp    dl,0x1
c001aa1b:	75 0b                	jne    c001aa28 <Vm::x87Handler(regs*)+0x886>
c001aa1d:	57                   	push   edi
c001aa1e:	57                   	push   edi
c001aa1f:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa21:	e9 0e 02 00 00       	jmp    c001ac34 <Vm::x87Handler(regs*)+0xa92>
c001aa26:	66 90                	xchg   ax,ax
c001aa28:	80 fa 04             	cmp    dl,0x4
c001aa2b:	75 13                	jne    c001aa40 <Vm::x87Handler(regs*)+0x89e>
c001aa2d:	31 d2                	xor    edx,edx
c001aa2f:	51                   	push   ecx
c001aa30:	51                   	push   ecx
c001aa31:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa33:	52                   	push   edx
c001aa34:	50                   	push   eax
c001aa35:	e8 4a f4 ff ff       	call   c0019e84 <Vm::fpuLongToFloat(long long)>
c001aa3a:	e9 fd 00 00 00       	jmp    c001ab3c <Vm::x87Handler(regs*)+0x99a>
c001aa3f:	90                   	nop
c001aa40:	31 c0                	xor    eax,eax
c001aa42:	80 fa 07             	cmp    dl,0x7
c001aa45:	0f 85 69 02 00 00    	jne    c001acb4 <Vm::x87Handler(regs*)+0xb12>
c001aa4b:	83 ec 0c             	sub    esp,0xc
c001aa4e:	6a 00                	push   0x0
c001aa50:	e8 0d f6 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001aa55:	89 c7                	mov    edi,eax
c001aa57:	89 d5                	mov    ebp,edx
c001aa59:	58                   	pop    eax
c001aa5a:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa5c:	5a                   	pop    edx
c001aa5d:	31 d2                	xor    edx,edx
c001aa5f:	52                   	push   edx
c001aa60:	50                   	push   eax
c001aa61:	e8 1e f4 ff ff       	call   c0019e84 <Vm::fpuLongToFloat(long long)>
c001aa66:	e9 7d 01 00 00       	jmp    c001abe8 <Vm::x87Handler(regs*)+0xa46>
c001aa6b:	90                   	nop
c001aa6c:	84 d2                	test   dl,dl
c001aa6e:	75 10                	jne    c001aa80 <Vm::x87Handler(regs*)+0x8de>
c001aa70:	31 d2                	xor    edx,edx
c001aa72:	55                   	push   ebp
c001aa73:	55                   	push   ebp
c001aa74:	8b 06                	mov    eax,DWORD PTR [esi]
c001aa76:	52                   	push   edx
c001aa77:	50                   	push   eax
c001aa78:	e9 03 02 00 00       	jmp    c001ac80 <Vm::x87Handler(regs*)+0xade>
c001aa7d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa80:	31 c0                	xor    eax,eax
c001aa82:	80 fa 02             	cmp    dl,0x2
c001aa85:	0f 85 29 02 00 00    	jne    c001acb4 <Vm::x87Handler(regs*)+0xb12>
c001aa8b:	83 ec 0c             	sub    esp,0xc
c001aa8e:	6a 00                	push   0x0
c001aa90:	e8 cd f5 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001aa95:	59                   	pop    ecx
c001aa96:	5f                   	pop    edi
c001aa97:	e9 18 f9 ff ff       	jmp    c001a3b4 <Vm::x87Handler(regs*)+0x212>
c001aa9c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001aaa0:	84 d2                	test   dl,dl
c001aaa2:	75 2c                	jne    c001aad0 <Vm::x87Handler(regs*)+0x92e>
c001aaa4:	50                   	push   eax
c001aaa5:	50                   	push   eax
c001aaa6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aaa9:	ff 36                	push   DWORD PTR [esi]
c001aaab:	e8 30 f3 ff ff       	call   c0019de0 <Vm::fpu64ToInternal(unsigned long long)>
c001aab0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aab7:	89 c6                	mov    esi,eax
c001aab9:	89 d7                	mov    edi,edx
c001aabb:	e8 a2 f5 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001aac0:	57                   	push   edi
c001aac1:	56                   	push   esi
c001aac2:	52                   	push   edx
c001aac3:	50                   	push   eax
c001aac4:	e8 0f f5 ff ff       	call   c0019fd8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001aac9:	e9 8e 01 00 00       	jmp    c001ac5c <Vm::x87Handler(regs*)+0xaba>
c001aace:	66 90                	xchg   ax,ax
c001aad0:	80 fa 01             	cmp    dl,0x1
c001aad3:	75 13                	jne    c001aae8 <Vm::x87Handler(regs*)+0x946>
c001aad5:	50                   	push   eax
c001aad6:	50                   	push   eax
c001aad7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aada:	ff 36                	push   DWORD PTR [esi]
c001aadc:	e8 ff f2 ff ff       	call   c0019de0 <Vm::fpu64ToInternal(unsigned long long)>
c001aae1:	e9 5a 01 00 00       	jmp    c001ac40 <Vm::x87Handler(regs*)+0xa9e>
c001aae6:	66 90                	xchg   ax,ax
c001aae8:	80 fa 02             	cmp    dl,0x2
c001aaeb:	0f 85 03 f9 ff ff    	jne    c001a3f4 <Vm::x87Handler(regs*)+0x252>
c001aaf1:	55                   	push   ebp
c001aaf2:	55                   	push   ebp
c001aaf3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aaf6:	ff 36                	push   DWORD PTR [esi]
c001aaf8:	e8 e3 f2 ff ff       	call   c0019de0 <Vm::fpu64ToInternal(unsigned long long)>
c001aafd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab04:	89 c6                	mov    esi,eax
c001ab06:	89 d7                	mov    edi,edx
c001ab08:	e8 55 f5 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001ab0d:	57                   	push   edi
c001ab0e:	56                   	push   esi
c001ab0f:	52                   	push   edx
c001ab10:	50                   	push   eax
c001ab11:	e8 6c f4 ff ff       	call   c0019f82 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ab16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ab1a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ab1d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab20:	83 c4 20             	add    esp,0x20
c001ab23:	e9 fc f6 ff ff       	jmp    c001a224 <Vm::x87Handler(regs*)+0x82>
c001ab28:	80 fa 04             	cmp    dl,0x4
c001ab2b:	75 2f                	jne    c001ab5c <Vm::x87Handler(regs*)+0x9ba>
c001ab2d:	51                   	push   ecx
c001ab2e:	51                   	push   ecx
c001ab2f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab32:	ff 36                	push   DWORD PTR [esi]
c001ab34:	e8 a7 f2 ff ff       	call   c0019de0 <Vm::fpu64ToInternal(unsigned long long)>
c001ab39:	8d 76 00             	lea    esi,[esi+0x0]
c001ab3c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab43:	89 c6                	mov    esi,eax
c001ab45:	89 d7                	mov    edi,edx
c001ab47:	e8 16 f5 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001ab4c:	57                   	push   edi
c001ab4d:	56                   	push   esi
c001ab4e:	52                   	push   edx
c001ab4f:	50                   	push   eax
c001ab50:	e8 ad f4 ff ff       	call   c001a002 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ab55:	e9 02 01 00 00       	jmp    c001ac5c <Vm::x87Handler(regs*)+0xaba>
c001ab5a:	66 90                	xchg   ax,ax
c001ab5c:	80 fa 05             	cmp    dl,0x5
c001ab5f:	75 2b                	jne    c001ab8c <Vm::x87Handler(regs*)+0x9ea>
c001ab61:	83 ec 0c             	sub    esp,0xc
c001ab64:	6a 00                	push   0x0
c001ab66:	e8 f7 f4 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001ab6b:	89 c7                	mov    edi,eax
c001ab6d:	89 d5                	mov    ebp,edx
c001ab6f:	58                   	pop    eax
c001ab70:	5a                   	pop    edx
c001ab71:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab74:	ff 36                	push   DWORD PTR [esi]
c001ab76:	e8 65 f2 ff ff       	call   c0019de0 <Vm::fpu64ToInternal(unsigned long long)>
c001ab7b:	90                   	nop
c001ab7c:	83 c4 10             	add    esp,0x10
c001ab7f:	55                   	push   ebp
c001ab80:	57                   	push   edi
c001ab81:	52                   	push   edx
c001ab82:	50                   	push   eax
c001ab83:	e8 7a f4 ff ff       	call   c001a002 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ab88:	eb 6a                	jmp    c001abf4 <Vm::x87Handler(regs*)+0xa52>
c001ab8a:	66 90                	xchg   ax,ax
c001ab8c:	80 fa 06             	cmp    dl,0x6
c001ab8f:	75 2f                	jne    c001abc0 <Vm::x87Handler(regs*)+0xa1e>
c001ab91:	51                   	push   ecx
c001ab92:	51                   	push   ecx
c001ab93:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab96:	ff 36                	push   DWORD PTR [esi]
c001ab98:	e8 43 f2 ff ff       	call   c0019de0 <Vm::fpu64ToInternal(unsigned long long)>
c001ab9d:	8d 76 00             	lea    esi,[esi+0x0]
c001aba0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aba7:	89 c6                	mov    esi,eax
c001aba9:	89 d7                	mov    edi,edx
c001abab:	e8 b2 f4 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001abb0:	57                   	push   edi
c001abb1:	56                   	push   esi
c001abb2:	52                   	push   edx
c001abb3:	50                   	push   eax
c001abb4:	e8 77 f4 ff ff       	call   c001a030 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001abb9:	e9 9e 00 00 00       	jmp    c001ac5c <Vm::x87Handler(regs*)+0xaba>
c001abbe:	66 90                	xchg   ax,ax
c001abc0:	31 c0                	xor    eax,eax
c001abc2:	80 fa 07             	cmp    dl,0x7
c001abc5:	0f 85 e9 00 00 00    	jne    c001acb4 <Vm::x87Handler(regs*)+0xb12>
c001abcb:	83 ec 0c             	sub    esp,0xc
c001abce:	6a 00                	push   0x0
c001abd0:	e8 8d f4 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001abd5:	89 c7                	mov    edi,eax
c001abd7:	89 d5                	mov    ebp,edx
c001abd9:	58                   	pop    eax
c001abda:	5a                   	pop    edx
c001abdb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001abde:	ff 36                	push   DWORD PTR [esi]
c001abe0:	e8 fb f1 ff ff       	call   c0019de0 <Vm::fpu64ToInternal(unsigned long long)>
c001abe5:	8d 76 00             	lea    esi,[esi+0x0]
c001abe8:	83 c4 10             	add    esp,0x10
c001abeb:	55                   	push   ebp
c001abec:	57                   	push   edi
c001abed:	52                   	push   edx
c001abee:	50                   	push   eax
c001abef:	e8 3c f4 ff ff       	call   c001a030 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001abf4:	83 c4 0c             	add    esp,0xc
c001abf7:	eb 67                	jmp    c001ac60 <Vm::x87Handler(regs*)+0xabe>
c001abf9:	8d 76 00             	lea    esi,[esi+0x0]
c001abfc:	31 c0                	xor    eax,eax
c001abfe:	80 fa 02             	cmp    dl,0x2
c001ac01:	0f 85 ad 00 00 00    	jne    c001acb4 <Vm::x87Handler(regs*)+0xb12>
c001ac07:	83 ec 0c             	sub    esp,0xc
c001ac0a:	6a 00                	push   0x0
c001ac0c:	e8 51 f4 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001ac11:	59                   	pop    ecx
c001ac12:	5f                   	pop    edi
c001ac13:	90                   	nop
c001ac14:	52                   	push   edx
c001ac15:	50                   	push   eax
c001ac16:	e8 77 f1 ff ff       	call   c0019d92 <Vm::fpuInternalTo64(unsigned long long)>
c001ac1b:	e9 84 00 00 00       	jmp    c001aca4 <Vm::x87Handler(regs*)+0xb02>
c001ac20:	31 c0                	xor    eax,eax
c001ac22:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ac27:	0f 85 87 00 00 00    	jne    c001acb4 <Vm::x87Handler(regs*)+0xb12>
c001ac2d:	50                   	push   eax
c001ac2e:	50                   	push   eax
c001ac2f:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ac32:	66 90                	xchg   ax,ax
c001ac34:	31 d2                	xor    edx,edx
c001ac36:	52                   	push   edx
c001ac37:	50                   	push   eax
c001ac38:	e8 47 f2 ff ff       	call   c0019e84 <Vm::fpuLongToFloat(long long)>
c001ac3d:	8d 76 00             	lea    esi,[esi+0x0]
c001ac40:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac47:	89 c6                	mov    esi,eax
c001ac49:	89 d7                	mov    edi,edx
c001ac4b:	e8 12 f4 ff ff       	call   c001a062 <Vm::fpuGetReg(int)>
c001ac50:	57                   	push   edi
c001ac51:	56                   	push   esi
c001ac52:	52                   	push   edx
c001ac53:	50                   	push   eax
c001ac54:	e8 b8 f3 ff ff       	call   c001a011 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ac59:	8d 76 00             	lea    esi,[esi+0x0]
c001ac5c:	83 c4 1c             	add    esp,0x1c
c001ac5f:	90                   	nop
c001ac60:	52                   	push   edx
c001ac61:	50                   	push   eax
c001ac62:	6a 00                	push   0x0
c001ac64:	e8 3c f4 ff ff       	call   c001a0a5 <Vm::fpuSetReg(int, unsigned long long)>
c001ac69:	e9 7a f7 ff ff       	jmp    c001a3e8 <Vm::x87Handler(regs*)+0x246>
c001ac6e:	66 90                	xchg   ax,ax
c001ac70:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac74:	80 fa 05             	cmp    dl,0x5
c001ac77:	75 13                	jne    c001ac8c <Vm::x87Handler(regs*)+0xaea>
c001ac79:	55                   	push   ebp
c001ac7a:	55                   	push   ebp
c001ac7b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ac7e:	ff 36                	push   DWORD PTR [esi]
c001ac80:	e8 c3 f1 ff ff       	call   c0019e48 <Vm::fpuULongToFloat(unsigned long long)>
c001ac85:	e9 52 f7 ff ff       	jmp    c001a3dc <Vm::x87Handler(regs*)+0x23a>
c001ac8a:	66 90                	xchg   ax,ax
c001ac8c:	31 c0                	xor    eax,eax
c001ac8e:	80 fa 07             	cmp    dl,0x7
c001ac91:	75 21                	jne    c001acb4 <Vm::x87Handler(regs*)+0xb12>
c001ac93:	e8 b7 f4 ff ff       	call   c001a14f <Vm::fpuPop()>
c001ac98:	51                   	push   ecx
c001ac99:	51                   	push   ecx
c001ac9a:	52                   	push   edx
c001ac9b:	50                   	push   eax
c001ac9c:	e8 48 f1 ff ff       	call   c0019de9 <Vm::fpuFloatToLong(unsigned long long)>
c001aca1:	8d 76 00             	lea    esi,[esi+0x0]
c001aca4:	83 c4 10             	add    esp,0x10
c001aca7:	89 06                	mov    DWORD PTR [esi],eax
c001aca9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001acac:	e9 7b f7 ff ff       	jmp    c001a42c <Vm::x87Handler(regs*)+0x28a>
c001acb1:	8d 76 00             	lea    esi,[esi+0x0]
c001acb4:	83 c4 1c             	add    esp,0x1c
c001acb7:	5b                   	pop    ebx
c001acb8:	5e                   	pop    esi
c001acb9:	5f                   	pop    edi
c001acba:	5d                   	pop    ebp
c001acbb:	c3                   	ret    

c001acbc <__static_initialization_and_destruction_0(int, int)>:
c001acbc:	83 ec 0c             	sub    esp,0xc
c001acbf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001acc4:	75 1a                	jne    c001ace0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001acc6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001acce:	75 10                	jne    c001ace0 <__static_initialization_and_destruction_0(int, int)+0x24>
c001acd0:	83 ec 0c             	sub    esp,0xc
c001acd3:	68 a0 96 02 c0       	push   0xc00296a0
c001acd8:	e8 bb 84 00 00       	call   c0023198 <Vm::_FPUState::_FPUState()>
c001acdd:	83 c4 10             	add    esp,0x10
c001ace0:	90                   	nop
c001ace1:	83 c4 0c             	add    esp,0xc
c001ace4:	c3                   	ret    
c001ace5:	8d 76 00             	lea    esi,[esi+0x0]

c001ace8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ace8:	83 ec 0c             	sub    esp,0xc
c001aceb:	83 ec 08             	sub    esp,0x8
c001acee:	68 ff ff 00 00       	push   0xffff
c001acf3:	6a 01                	push   0x1
c001acf5:	e8 c2 ff ff ff       	call   c001acbc <__static_initialization_and_destruction_0(int, int)>
c001acfa:	83 c4 10             	add    esp,0x10
c001acfd:	83 c4 0c             	add    esp,0xc
c001ad00:	c3                   	ret    
c001ad01:	66 90                	xchg   ax,ax
c001ad03:	90                   	nop

c001ad04 <FAT::getName()>:
c001ad04:	b8 28 64 02 c0       	mov    eax,0xc0026428
c001ad09:	c3                   	ret    
c001ad0a:	66 90                	xchg   ax,ax

c001ad0c <FAT::tell(void*, unsigned long long*)>:
c001ad0c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ad11:	75 09                	jne    c001ad1c <FAT::tell(void*, unsigned long long*)+0x10>
c001ad13:	b8 04 00 00 00       	mov    eax,0x4
c001ad18:	c3                   	ret    
c001ad19:	8d 76 00             	lea    esi,[esi+0x0]
c001ad1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad21:	75 09                	jne    c001ad2c <FAT::tell(void*, unsigned long long*)+0x20>
c001ad23:	b8 04 00 00 00       	mov    eax,0x4
c001ad28:	c3                   	ret    
c001ad29:	8d 76 00             	lea    esi,[esi+0x0]
c001ad2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad30:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ad33:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ad36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad3a:	89 01                	mov    DWORD PTR [ecx],eax
c001ad3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ad3f:	b8 00 00 00 00       	mov    eax,0x0
c001ad44:	c3                   	ret    
c001ad45:	90                   	nop
c001ad46:	66 90                	xchg   ax,ax

c001ad48 <FAT::stat(void*, unsigned long long*)>:
c001ad48:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ad4d:	75 09                	jne    c001ad58 <FAT::stat(void*, unsigned long long*)+0x10>
c001ad4f:	b8 04 00 00 00       	mov    eax,0x4
c001ad54:	c3                   	ret    
c001ad55:	8d 76 00             	lea    esi,[esi+0x0]
c001ad58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad5d:	75 09                	jne    c001ad68 <FAT::stat(void*, unsigned long long*)+0x20>
c001ad5f:	b8 04 00 00 00       	mov    eax,0x4
c001ad64:	c3                   	ret    
c001ad65:	8d 76 00             	lea    esi,[esi+0x0]
c001ad68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad6c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ad6f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ad72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad76:	89 01                	mov    DWORD PTR [ecx],eax
c001ad78:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ad7b:	b8 00 00 00 00       	mov    eax,0x0
c001ad80:	c3                   	ret    
c001ad81:	90                   	nop
c001ad82:	66 90                	xchg   ax,ax

c001ad84 <FAT::~FAT()>:
c001ad84:	83 ec 0c             	sub    esp,0xc
c001ad87:	ba 74 64 02 c0       	mov    edx,0xc0026474
c001ad8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad90:	89 10                	mov    DWORD PTR [eax],edx
c001ad92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad96:	83 ec 0c             	sub    esp,0xc
c001ad99:	50                   	push   eax
c001ad9a:	e8 9b 22 ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c001ad9f:	83 c4 10             	add    esp,0x10
c001ada2:	90                   	nop
c001ada3:	83 c4 0c             	add    esp,0xc
c001ada6:	c3                   	ret    
c001ada7:	90                   	nop

c001ada8 <FAT::~FAT()>:
c001ada8:	83 ec 0c             	sub    esp,0xc
c001adab:	83 ec 0c             	sub    esp,0xc
c001adae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adb2:	e8 cd ff ff ff       	call   c001ad84 <FAT::~FAT()>
c001adb7:	83 c4 10             	add    esp,0x10
c001adba:	83 ec 08             	sub    esp,0x8
c001adbd:	6a 08                	push   0x8
c001adbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adc3:	e8 56 1e ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001adc8:	83 c4 10             	add    esp,0x10
c001adcb:	83 c4 0c             	add    esp,0xc
c001adce:	c3                   	ret    
c001adcf:	90                   	nop

c001add0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001add0:	83 ec 1c             	sub    esp,0x1c
c001add3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001adda:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001addf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ade3:	8b 04 85 20 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68e0]
c001adea:	83 f8 ff             	cmp    eax,0xffffffff
c001aded:	75 35                	jne    c001ae24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001adef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001adf3:	88 c2                	mov    dl,al
c001adf5:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c001adfa:	01 d0                	add    eax,edx
c001adfc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ae00:	8b 15 00 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029700
c001ae06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae0a:	89 14 85 20 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68e0],edx
c001ae11:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c001ae16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ae1a:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c001ae21:	eb 19                	jmp    c001ae3c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ae23:	90                   	nop
c001ae24:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ae28:	88 c2                	mov    dl,al
c001ae2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae2e:	8b 04 85 20 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68e0]
c001ae35:	01 d0                	add    eax,edx
c001ae37:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ae3b:	90                   	nop
c001ae3c:	83 ec 04             	sub    esp,0x4
c001ae3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae47:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ae4b:	50                   	push   eax
c001ae4c:	e8 e1 bd fe ff       	call   c0006c32 <f_getlabel>
c001ae51:	83 c4 10             	add    esp,0x10
c001ae54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae5d:	75 09                	jne    c001ae68 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001ae5f:	b8 00 00 00 00       	mov    eax,0x0
c001ae64:	eb 0a                	jmp    c001ae70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ae66:	66 90                	xchg   ax,ax
c001ae68:	b8 01 00 00 00       	mov    eax,0x1
c001ae6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae70:	83 c4 1c             	add    esp,0x1c
c001ae73:	c3                   	ret    

c001ae74 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ae74:	57                   	push   edi
c001ae75:	83 ec 58             	sub    esp,0x58
c001ae78:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ae80:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ae84:	b9 0f 00 00 00       	mov    ecx,0xf
c001ae89:	b8 00 00 00 00       	mov    eax,0x0
c001ae8e:	fc                   	cld    
c001ae8f:	89 d7                	mov    edi,edx
c001ae91:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae93:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae97:	8b 04 85 20 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68e0]
c001ae9e:	83 f8 ff             	cmp    eax,0xffffffff
c001aea1:	75 35                	jne    c001aed8 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001aea3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aea7:	88 c2                	mov    dl,al
c001aea9:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c001aeae:	01 d0                	add    eax,edx
c001aeb0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aeb4:	8b 15 00 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029700
c001aeba:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aebe:	89 14 85 20 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68e0],edx
c001aec5:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c001aeca:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001aece:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c001aed5:	eb 19                	jmp    c001aef0 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001aed7:	90                   	nop
c001aed8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001aedc:	88 c2                	mov    dl,al
c001aede:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aee2:	8b 04 85 20 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68e0]
c001aee9:	01 d0                	add    eax,edx
c001aeeb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aeef:	90                   	nop
c001aef0:	83 ec 08             	sub    esp,0x8
c001aef3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001aef7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aefb:	50                   	push   eax
c001aefc:	e8 7f 59 fe ff       	call   c0000880 <strcat>
c001af01:	83 c4 10             	add    esp,0x10
c001af04:	83 ec 0c             	sub    esp,0xc
c001af07:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af0b:	50                   	push   eax
c001af0c:	e8 0f bf fe ff       	call   c0006e20 <f_setlabel>
c001af11:	83 c4 10             	add    esp,0x10
c001af14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001af18:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001af1d:	75 09                	jne    c001af28 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001af1f:	b8 00 00 00 00       	mov    eax,0x0
c001af24:	eb 0a                	jmp    c001af30 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001af26:	66 90                	xchg   ax,ax
c001af28:	b8 01 00 00 00       	mov    eax,0x1
c001af2d:	8d 76 00             	lea    esi,[esi+0x0]
c001af30:	83 c4 58             	add    esp,0x58
c001af33:	5f                   	pop    edi
c001af34:	c3                   	ret    
c001af35:	90                   	nop
c001af36:	66 90                	xchg   ax,ax

c001af38 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001af38:	83 ec 2c             	sub    esp,0x2c
c001af3b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001af43:	83 ec 08             	sub    esp,0x8
c001af46:	68 4c 64 02 c0       	push   0xc002644c
c001af4b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af4f:	e8 78 58 fe ff       	call   c00007cc <strcmp>
c001af54:	83 c4 10             	add    esp,0x10
c001af57:	85 c0                	test   eax,eax
c001af59:	0f 94 c0             	sete   al
c001af5c:	84 c0                	test   al,al
c001af5e:	74 10                	je     c001af70 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001af60:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af68:	e9 b3 00 00 00       	jmp    c001b020 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af6d:	8d 76 00             	lea    esi,[esi+0x0]
c001af70:	83 ec 08             	sub    esp,0x8
c001af73:	68 3e 64 02 c0       	push   0xc002643e
c001af78:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af7c:	e8 4b 58 fe ff       	call   c00007cc <strcmp>
c001af81:	83 c4 10             	add    esp,0x10
c001af84:	85 c0                	test   eax,eax
c001af86:	0f 94 c0             	sete   al
c001af89:	84 c0                	test   al,al
c001af8b:	74 0f                	je     c001af9c <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001af8d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001af95:	e9 86 00 00 00       	jmp    c001b020 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af9a:	66 90                	xchg   ax,ax
c001af9c:	83 ec 08             	sub    esp,0x8
c001af9f:	68 44 64 02 c0       	push   0xc0026444
c001afa4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afa8:	e8 1f 58 fe ff       	call   c00007cc <strcmp>
c001afad:	83 c4 10             	add    esp,0x10
c001afb0:	85 c0                	test   eax,eax
c001afb2:	0f 94 c0             	sete   al
c001afb5:	84 c0                	test   al,al
c001afb7:	74 0b                	je     c001afc4 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001afb9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001afc1:	eb 5d                	jmp    c001b020 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001afc3:	90                   	nop
c001afc4:	83 ec 08             	sub    esp,0x8
c001afc7:	68 0c 39 02 c0       	push   0xc002390c
c001afcc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001afd0:	e8 f7 57 fe ff       	call   c00007cc <strcmp>
c001afd5:	83 c4 10             	add    esp,0x10
c001afd8:	85 c0                	test   eax,eax
c001afda:	0f 94 c0             	sete   al
c001afdd:	84 c0                	test   al,al
c001afdf:	74 0b                	je     c001afec <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001afe1:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001afe9:	eb 35                	jmp    c001b020 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001afeb:	90                   	nop
c001afec:	83 ec 08             	sub    esp,0x8
c001afef:	68 4a 64 02 c0       	push   0xc002644a
c001aff4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aff8:	e8 cf 57 fe ff       	call   c00007cc <strcmp>
c001affd:	83 c4 10             	add    esp,0x10
c001b000:	85 c0                	test   eax,eax
c001b002:	0f 94 c0             	sete   al
c001b005:	84 c0                	test   al,al
c001b007:	74 0b                	je     c001b014 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b009:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b011:	eb 0d                	jmp    c001b020 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b013:	90                   	nop
c001b014:	b8 08 00 00 00       	mov    eax,0x8
c001b019:	e9 ea 00 00 00       	jmp    c001b108 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b01e:	66 90                	xchg   ax,ax
c001b020:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b027:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b02c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b030:	8b 04 85 20 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68e0]
c001b037:	83 f8 ff             	cmp    eax,0xffffffff
c001b03a:	75 34                	jne    c001b070 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b03c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b040:	88 c2                	mov    dl,al
c001b042:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c001b047:	01 d0                	add    eax,edx
c001b049:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b04d:	8b 15 00 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029700
c001b053:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b057:	89 14 85 20 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68e0],edx
c001b05e:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c001b063:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b067:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c001b06e:	eb 18                	jmp    c001b088 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b070:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b074:	88 c2                	mov    dl,al
c001b076:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b07a:	8b 04 85 20 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68e0]
c001b081:	01 d0                	add    eax,edx
c001b083:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b087:	90                   	nop
c001b088:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b08c:	88 04 24             	mov    BYTE PTR [esp],al
c001b08f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b097:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b09f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b0a4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b0ac:	83 ec 0c             	sub    esp,0xc
c001b0af:	68 00 20 00 00       	push   0x2000
c001b0b4:	e8 56 e9 fe ff       	call   c0009a0f <malloc>
c001b0b9:	83 c4 10             	add    esp,0x10
c001b0bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b0c0:	68 00 20 00 00       	push   0x2000
c001b0c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b0cd:	50                   	push   eax
c001b0ce:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b0d2:	50                   	push   eax
c001b0d3:	e8 c9 c3 fe ff       	call   c00074a1 <f_mkfs>
c001b0d8:	83 c4 10             	add    esp,0x10
c001b0db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0df:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b0e4:	75 0a                	jne    c001b0f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b0e6:	b8 00 00 00 00       	mov    eax,0x0
c001b0eb:	eb 1b                	jmp    c001b108 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b0ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b0f0:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b0f5:	75 09                	jne    c001b100 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b0f7:	b8 09 00 00 00       	mov    eax,0x9
c001b0fc:	eb 0a                	jmp    c001b108 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b0fe:	66 90                	xchg   ax,ax
c001b100:	b8 01 00 00 00       	mov    eax,0x1
c001b105:	8d 76 00             	lea    esi,[esi+0x0]
c001b108:	83 c4 2c             	add    esp,0x2c
c001b10b:	c3                   	ret    

c001b10c <FAT::tryMount(LogicalDisk*, int)>:
c001b10c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b112:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c001b117:	83 f8 14             	cmp    eax,0x14
c001b11a:	75 18                	jne    c001b134 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b11c:	83 ec 0c             	sub    esp,0xc
c001b11f:	68 50 64 02 c0       	push   0xc0026450
c001b124:	e8 9e 98 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001b129:	83 c4 10             	add    esp,0x10
c001b12c:	b0 00                	mov    al,0x0
c001b12e:	e9 e9 01 00 00       	jmp    c001b31c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b133:	90                   	nop
c001b134:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b13b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b141:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b147:	3d 00 02 00 00       	cmp    eax,0x200
c001b14c:	74 0a                	je     c001b158 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b14e:	b0 00                	mov    al,0x0
c001b150:	e9 c7 01 00 00       	jmp    c001b31c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b155:	8d 76 00             	lea    esi,[esi+0x0]
c001b158:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b160:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b167:	8b 04 85 20 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68e0]
c001b16e:	83 f8 ff             	cmp    eax,0xffffffff
c001b171:	74 09                	je     c001b17c <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b173:	b0 01                	mov    al,0x1
c001b175:	e9 a2 01 00 00       	jmp    c001b31c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b17a:	66 90                	xchg   ax,ax
c001b17c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b186:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b18e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b195:	88 c2                	mov    dl,al
c001b197:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c001b19c:	01 d0                	add    eax,edx
c001b19e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b1a5:	8b 15 00 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029700
c001b1ab:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b1b2:	89 14 85 20 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd68e0],edx
c001b1b9:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c001b1be:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b1c5:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c001b1cc:	83 ec 0c             	sub    esp,0xc
c001b1cf:	68 54 02 00 00       	push   0x254
c001b1d4:	e8 36 e8 fe ff       	call   c0009a0f <malloc>
c001b1d9:	83 c4 10             	add    esp,0x10
c001b1dc:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b1e3:	83 ec 04             	sub    esp,0x4
c001b1e6:	6a 00                	push   0x0
c001b1e8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b1ef:	50                   	push   eax
c001b1f0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b1f7:	e8 2d 9c fe ff       	call   c0004e29 <f_mount>
c001b1fc:	83 c4 10             	add    esp,0x10
c001b1ff:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b206:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b20e:	74 1c                	je     c001b22c <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b210:	83 ec 0c             	sub    esp,0xc
c001b213:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b21a:	e8 10 e8 fe ff       	call   c0009a2f <rfree>
c001b21f:	83 c4 10             	add    esp,0x10
c001b222:	b0 00                	mov    al,0x0
c001b224:	e9 f3 00 00 00       	jmp    c001b31c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b229:	8d 76 00             	lea    esi,[esi+0x0]
c001b22c:	83 ec 04             	sub    esp,0x4
c001b22f:	68 00 01 00 00       	push   0x100
c001b234:	6a 00                	push   0x0
c001b236:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b23d:	50                   	push   eax
c001b23e:	e8 41 54 fe ff       	call   c0000684 <memset>
c001b243:	83 c4 10             	add    esp,0x10
c001b246:	83 ec 08             	sub    esp,0x8
c001b249:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b250:	50                   	push   eax
c001b251:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b258:	50                   	push   eax
c001b259:	e8 22 56 fe ff       	call   c0000880 <strcat>
c001b25e:	83 c4 10             	add    esp,0x10
c001b261:	83 ec 08             	sub    esp,0x8
c001b264:	68 5e 64 02 c0       	push   0xc002645e
c001b269:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b270:	50                   	push   eax
c001b271:	e8 0a 56 fe ff       	call   c0000880 <strcat>
c001b276:	83 c4 10             	add    esp,0x10
c001b279:	83 ec 04             	sub    esp,0x4
c001b27c:	6a 01                	push   0x1
c001b27e:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b285:	50                   	push   eax
c001b286:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b28a:	50                   	push   eax
c001b28b:	e8 fb 9b fe ff       	call   c0004e8b <f_open>
c001b290:	83 c4 10             	add    esp,0x10
c001b293:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b29a:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b2a1:	85 c0                	test   eax,eax
c001b2a3:	74 0b                	je     c001b2b0 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b2a5:	78 31                	js     c001b2d8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b2a7:	83 e8 04             	sub    eax,0x4
c001b2aa:	83 f8 01             	cmp    eax,0x1
c001b2ad:	77 29                	ja     c001b2d8 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b2af:	90                   	nop
c001b2b0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b2b8:	83 ec 0c             	sub    esp,0xc
c001b2bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b2bf:	50                   	push   eax
c001b2c0:	e8 18 a7 fe ff       	call   c00059dd <f_close>
c001b2c5:	83 c4 10             	add    esp,0x10
c001b2c8:	90                   	nop
c001b2c9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b2d1:	74 41                	je     c001b314 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b2d3:	eb 33                	jmp    c001b308 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b2d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b2d8:	83 ec 0c             	sub    esp,0xc
c001b2db:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b2e2:	e8 48 e7 fe ff       	call   c0009a2f <rfree>
c001b2e7:	83 c4 10             	add    esp,0x10
c001b2ea:	83 ec 04             	sub    esp,0x4
c001b2ed:	6a 00                	push   0x0
c001b2ef:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b2f6:	50                   	push   eax
c001b2f7:	6a 00                	push   0x0
c001b2f9:	e8 2b 9b fe ff       	call   c0004e29 <f_mount>
c001b2fe:	83 c4 10             	add    esp,0x10
c001b301:	b0 00                	mov    al,0x0
c001b303:	eb 17                	jmp    c001b31c <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b305:	8d 76 00             	lea    esi,[esi+0x0]
c001b308:	a1 00 97 02 c0       	mov    eax,ds:0xc0029700
c001b30d:	40                   	inc    eax
c001b30e:	a3 00 97 02 c0       	mov    ds:0xc0029700,eax
c001b313:	90                   	nop
c001b314:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b31b:	90                   	nop
c001b31c:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b322:	c3                   	ret    
c001b323:	90                   	nop

c001b324 <FAT::allocateSwapfile(char const*, int)>:
c001b324:	55                   	push   ebp
c001b325:	57                   	push   edi
c001b326:	56                   	push   esi
c001b327:	53                   	push   ebx
c001b328:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b32e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b339:	83 ec 0c             	sub    esp,0xc
c001b33c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b343:	e8 c7 e6 fe ff       	call   c0009a0f <malloc>
c001b348:	83 c4 10             	add    esp,0x10
c001b34b:	89 c7                	mov    edi,eax
c001b34d:	a1 30 96 02 c0       	mov    eax,ds:0xc0029630
c001b352:	83 ec 04             	sub    esp,0x4
c001b355:	50                   	push   eax
c001b356:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b35d:	57                   	push   edi
c001b35e:	e8 07 1f ff ff       	call   c000d26a <File::File(char const*, Process*)>
c001b363:	83 c4 10             	add    esp,0x10
c001b366:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b36d:	83 ec 04             	sub    esp,0x4
c001b370:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b374:	50                   	push   eax
c001b375:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b379:	50                   	push   eax
c001b37a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b381:	e8 52 22 ff ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c001b386:	83 c4 10             	add    esp,0x10
c001b389:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b390:	c1 e0 14             	shl    eax,0x14
c001b393:	89 c7                	mov    edi,eax
c001b395:	89 c5                	mov    ebp,eax
c001b397:	c1 fd 1f             	sar    ebp,0x1f
c001b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b39e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b3a2:	89 f9                	mov    ecx,edi
c001b3a4:	31 c1                	xor    ecx,eax
c001b3a6:	89 cb                	mov    ebx,ecx
c001b3a8:	89 e9                	mov    ecx,ebp
c001b3aa:	31 d1                	xor    ecx,edx
c001b3ac:	89 ce                	mov    esi,ecx
c001b3ae:	89 f0                	mov    eax,esi
c001b3b0:	09 d8                	or     eax,ebx
c001b3b2:	0f 84 98 00 00 00    	je     c001b450 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b3b8:	83 ec 0c             	sub    esp,0xc
c001b3bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3c2:	e8 dd 20 ff ff       	call   c000d4a4 <File::unlink()>
c001b3c7:	83 c4 10             	add    esp,0x10
c001b3ca:	83 ec 08             	sub    esp,0x8
c001b3cd:	6a 12                	push   0x12
c001b3cf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3d6:	e8 51 1f ff ff       	call   c000d32c <File::open(FileOpenMode)>
c001b3db:	83 c4 10             	add    esp,0x10
c001b3de:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b3e5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b3eb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b3f2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b3f9:	c1 e0 14             	shl    eax,0x14
c001b3fc:	99                   	cdq    
c001b3fd:	6a 01                	push   0x1
c001b3ff:	52                   	push   edx
c001b400:	50                   	push   eax
c001b401:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b408:	e8 80 bc fe ff       	call   c000708d <f_expand>
c001b40d:	83 c4 10             	add    esp,0x10
c001b410:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b417:	8b 00                	mov    eax,DWORD PTR [eax]
c001b419:	83 c0 10             	add    eax,0x10
c001b41c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b41e:	83 ec 0c             	sub    esp,0xc
c001b421:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b425:	52                   	push   edx
c001b426:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b42a:	52                   	push   edx
c001b42b:	6a 00                	push   0x0
c001b42d:	68 00 04 00 00       	push   0x400
c001b432:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b439:	ff d0                	call   eax
c001b43b:	83 c4 20             	add    esp,0x20
c001b43e:	83 ec 0c             	sub    esp,0xc
c001b441:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b448:	e8 3d 1f ff ff       	call   c000d38a <File::close()>
c001b44d:	83 c4 10             	add    esp,0x10
c001b450:	83 ec 08             	sub    esp,0x8
c001b453:	6a 01                	push   0x1
c001b455:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b45c:	e8 cb 1e ff ff       	call   c000d32c <File::open(FileOpenMode)>
c001b461:	83 c4 10             	add    esp,0x10
c001b464:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b46b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b46d:	83 c0 0c             	add    eax,0xc
c001b470:	8b 00                	mov    eax,DWORD PTR [eax]
c001b472:	83 ec 0c             	sub    esp,0xc
c001b475:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b479:	52                   	push   edx
c001b47a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b47e:	52                   	push   edx
c001b47f:	6a 00                	push   0x0
c001b481:	6a 04                	push   0x4
c001b483:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b48a:	ff d0                	call   eax
c001b48c:	83 c4 20             	add    esp,0x20
c001b48f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b496:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b49c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b4a3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b4aa:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b4ad:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b4b0:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b4b7:	83 ec 0c             	sub    esp,0xc
c001b4ba:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b4c1:	e8 c4 1e ff ff       	call   c000d38a <File::close()>
c001b4c6:	83 c4 10             	add    esp,0x10
c001b4c9:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b4d0:	ba 00 00 00 00       	mov    edx,0x0
c001b4d5:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b4db:	5b                   	pop    ebx
c001b4dc:	5e                   	pop    esi
c001b4dd:	5f                   	pop    edi
c001b4de:	5d                   	pop    ebp
c001b4df:	c3                   	ret    

c001b4e0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b4e0:	57                   	push   edi
c001b4e1:	56                   	push   esi
c001b4e2:	53                   	push   ebx
c001b4e3:	81 ec 50 02 00 00    	sub    esp,0x250
c001b4e9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b4f1:	74 0d                	je     c001b500 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b4f3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b4fb:	75 0f                	jne    c001b50c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b4fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b500:	b8 04 00 00 00       	mov    eax,0x4
c001b505:	e9 36 01 00 00       	jmp    c001b640 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b50a:	66 90                	xchg   ax,ax
c001b50c:	83 ec 08             	sub    esp,0x8
c001b50f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b516:	50                   	push   eax
c001b517:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b51e:	e8 c4 aa fe ff       	call   c0005fe7 <f_readdir>
c001b523:	83 c4 10             	add    esp,0x10
c001b526:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b52d:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b534:	83 ec 0c             	sub    esp,0xc
c001b537:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b53e:	83 c0 1a             	add    eax,0x1a
c001b541:	50                   	push   eax
c001b542:	e8 59 51 fe ff       	call   c00006a0 <strlen>
c001b547:	83 c4 10             	add    esp,0x10
c001b54a:	ba 00 00 00 00       	mov    edx,0x0
c001b54f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b553:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b557:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b55e:	0f b6 c0             	movzx  eax,al
c001b561:	83 e0 10             	and    eax,0x10
c001b564:	74 0a                	je     c001b570 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b566:	b8 02 00 00 00       	mov    eax,0x2
c001b56b:	eb 0b                	jmp    c001b578 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b56d:	8d 76 00             	lea    esi,[esi+0x0]
c001b570:	b8 01 00 00 00       	mov    eax,0x1
c001b575:	8d 76 00             	lea    esi,[esi+0x0]
c001b578:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b57c:	83 ec 08             	sub    esp,0x8
c001b57f:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b586:	83 c0 1a             	add    eax,0x1a
c001b589:	50                   	push   eax
c001b58a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b58e:	83 c0 10             	add    eax,0x10
c001b591:	50                   	push   eax
c001b592:	e8 a9 51 fe ff       	call   c0000740 <strcpy>
c001b597:	83 c4 10             	add    esp,0x10
c001b59a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b5a1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b5a8:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b5ac:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b5b3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b5ba:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b5c1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b5c8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b5cf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b5d6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b5dd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b5e4:	89 c6                	mov    esi,eax
c001b5e6:	89 d7                	mov    edi,edx
c001b5e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5ea:	89 c8                	mov    eax,ecx
c001b5ec:	89 fa                	mov    edx,edi
c001b5ee:	89 f3                	mov    ebx,esi
c001b5f0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b5f7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b5fe:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b605:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b60c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b612:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b619:	84 c0                	test   al,al
c001b61b:	75 07                	jne    c001b624 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b61d:	b8 07 00 00 00       	mov    eax,0x7
c001b622:	eb 1c                	jmp    c001b640 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b624:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b62b:	85 c0                	test   eax,eax
c001b62d:	75 09                	jne    c001b638 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b62f:	b8 00 00 00 00       	mov    eax,0x0
c001b634:	eb 0a                	jmp    c001b640 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b636:	66 90                	xchg   ax,ax
c001b638:	b8 01 00 00 00       	mov    eax,0x1
c001b63d:	8d 76 00             	lea    esi,[esi+0x0]
c001b640:	81 c4 50 02 00 00    	add    esp,0x250
c001b646:	5b                   	pop    ebx
c001b647:	5e                   	pop    esi
c001b648:	5f                   	pop    edi
c001b649:	c3                   	ret    
c001b64a:	66 90                	xchg   ax,ax

c001b64c <FAT::read(void*, unsigned long, void*, int*)>:
c001b64c:	83 ec 1c             	sub    esp,0x1c
c001b64f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b654:	74 0a                	je     c001b660 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b656:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b65b:	75 0b                	jne    c001b668 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b65d:	8d 76 00             	lea    esi,[esi+0x0]
c001b660:	b8 04 00 00 00       	mov    eax,0x4
c001b665:	eb 41                	jmp    c001b6a8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b667:	90                   	nop
c001b668:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b66c:	50                   	push   eax
c001b66d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b671:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b675:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b679:	e8 49 9c fe ff       	call   c00052c7 <f_read>
c001b67e:	83 c4 10             	add    esp,0x10
c001b681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b685:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b689:	89 c2                	mov    edx,eax
c001b68b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b68f:	89 10                	mov    DWORD PTR [eax],edx
c001b691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b695:	85 c0                	test   eax,eax
c001b697:	75 07                	jne    c001b6a0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b699:	b8 00 00 00 00       	mov    eax,0x0
c001b69e:	eb 08                	jmp    c001b6a8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b6a0:	b8 01 00 00 00       	mov    eax,0x1
c001b6a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6a8:	83 c4 1c             	add    esp,0x1c
c001b6ab:	c3                   	ret    

c001b6ac <FAT::write(void*, unsigned long, void*, int*)>:
c001b6ac:	83 ec 1c             	sub    esp,0x1c
c001b6af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b6b4:	74 0a                	je     c001b6c0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b6b6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b6bb:	75 0b                	jne    c001b6c8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b6bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b6c0:	b8 04 00 00 00       	mov    eax,0x4
c001b6c5:	eb 41                	jmp    c001b708 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b6c7:	90                   	nop
c001b6c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b6cc:	50                   	push   eax
c001b6cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b6d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6d9:	e8 69 9e fe ff       	call   c0005547 <f_write>
c001b6de:	83 c4 10             	add    esp,0x10
c001b6e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b6e9:	89 c2                	mov    edx,eax
c001b6eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b6ef:	89 10                	mov    DWORD PTR [eax],edx
c001b6f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6f5:	85 c0                	test   eax,eax
c001b6f7:	75 07                	jne    c001b700 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b6f9:	b8 00 00 00 00       	mov    eax,0x0
c001b6fe:	eb 08                	jmp    c001b708 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b700:	b8 01 00 00 00       	mov    eax,0x1
c001b705:	8d 76 00             	lea    esi,[esi+0x0]
c001b708:	83 c4 1c             	add    esp,0x1c
c001b70b:	c3                   	ret    

c001b70c <FAT::close(void*)>:
c001b70c:	83 ec 1c             	sub    esp,0x1c
c001b70f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b714:	75 0a                	jne    c001b720 <FAT::close(void*)+0x14>
c001b716:	b8 04 00 00 00       	mov    eax,0x4
c001b71b:	eb 3f                	jmp    c001b75c <FAT::close(void*)+0x50>
c001b71d:	8d 76 00             	lea    esi,[esi+0x0]
c001b720:	83 ec 0c             	sub    esp,0xc
c001b723:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b727:	e8 b1 a2 fe ff       	call   c00059dd <f_close>
c001b72c:	83 c4 10             	add    esp,0x10
c001b72f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b733:	83 ec 0c             	sub    esp,0xc
c001b736:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b73a:	e8 e0 e2 fe ff       	call   c0009a1f <free>
c001b73f:	83 c4 10             	add    esp,0x10
c001b742:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b746:	85 c0                	test   eax,eax
c001b748:	75 0a                	jne    c001b754 <FAT::close(void*)+0x48>
c001b74a:	b8 00 00 00 00       	mov    eax,0x0
c001b74f:	eb 0b                	jmp    c001b75c <FAT::close(void*)+0x50>
c001b751:	8d 76 00             	lea    esi,[esi+0x0]
c001b754:	b8 01 00 00 00       	mov    eax,0x1
c001b759:	8d 76 00             	lea    esi,[esi+0x0]
c001b75c:	83 c4 1c             	add    esp,0x1c
c001b75f:	c3                   	ret    

c001b760 <FAT::closeDir(void*)>:
c001b760:	83 ec 1c             	sub    esp,0x1c
c001b763:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b768:	75 0a                	jne    c001b774 <FAT::closeDir(void*)+0x14>
c001b76a:	b8 04 00 00 00       	mov    eax,0x4
c001b76f:	eb 3f                	jmp    c001b7b0 <FAT::closeDir(void*)+0x50>
c001b771:	8d 76 00             	lea    esi,[esi+0x0]
c001b774:	83 ec 0c             	sub    esp,0xc
c001b777:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b77b:	e8 45 a8 fe ff       	call   c0005fc5 <f_closedir>
c001b780:	83 c4 10             	add    esp,0x10
c001b783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b787:	83 ec 0c             	sub    esp,0xc
c001b78a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b78e:	e8 8c e2 fe ff       	call   c0009a1f <free>
c001b793:	83 c4 10             	add    esp,0x10
c001b796:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b79a:	85 c0                	test   eax,eax
c001b79c:	75 0a                	jne    c001b7a8 <FAT::closeDir(void*)+0x48>
c001b79e:	b8 00 00 00 00       	mov    eax,0x0
c001b7a3:	eb 0b                	jmp    c001b7b0 <FAT::closeDir(void*)+0x50>
c001b7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7a8:	b8 01 00 00 00       	mov    eax,0x1
c001b7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b0:	83 c4 1c             	add    esp,0x1c
c001b7b3:	c3                   	ret    

c001b7b4 <FAT::seek(void*, unsigned long long)>:
c001b7b4:	83 ec 2c             	sub    esp,0x2c
c001b7b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b7bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b7bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b7c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7c7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b7cc:	75 0a                	jne    c001b7d8 <FAT::seek(void*, unsigned long long)+0x24>
c001b7ce:	b8 04 00 00 00       	mov    eax,0x4
c001b7d3:	eb 37                	jmp    c001b80c <FAT::seek(void*, unsigned long long)+0x58>
c001b7d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7d8:	83 ec 04             	sub    esp,0x4
c001b7db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b7df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b7e3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b7e7:	e8 20 a2 fe ff       	call   c0005a0c <f_lseek>
c001b7ec:	83 c4 10             	add    esp,0x10
c001b7ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b7f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7f7:	85 c0                	test   eax,eax
c001b7f9:	75 09                	jne    c001b804 <FAT::seek(void*, unsigned long long)+0x50>
c001b7fb:	b8 00 00 00 00       	mov    eax,0x0
c001b800:	eb 0a                	jmp    c001b80c <FAT::seek(void*, unsigned long long)+0x58>
c001b802:	66 90                	xchg   ax,ax
c001b804:	b8 01 00 00 00       	mov    eax,0x1
c001b809:	8d 76 00             	lea    esi,[esi+0x0]
c001b80c:	83 c4 2c             	add    esp,0x2c
c001b80f:	c3                   	ret    

c001b810 <fatWrapperReadDisk>:
c001b810:	83 ec 1c             	sub    esp,0x1c
c001b813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b817:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b81b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b81f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b822:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b826:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b82a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b82f:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c001b836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b83a:	83 ec 0c             	sub    esp,0xc
c001b83d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b841:	52                   	push   edx
c001b842:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b846:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b84a:	50                   	push   eax
c001b84b:	e8 08 4d ff ff       	call   c0010558 <LogicalDisk::read(unsigned long long, int, void*)>
c001b850:	83 c4 20             	add    esp,0x20
c001b853:	83 c4 1c             	add    esp,0x1c
c001b856:	c3                   	ret    
c001b857:	90                   	nop

c001b858 <fatWrapperWriteDisk>:
c001b858:	83 ec 1c             	sub    esp,0x1c
c001b85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b85f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b863:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b867:	89 04 24             	mov    DWORD PTR [esp],eax
c001b86a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b86e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b872:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b877:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c001b87e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b882:	83 ec 0c             	sub    esp,0xc
c001b885:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b889:	52                   	push   edx
c001b88a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b892:	50                   	push   eax
c001b893:	e8 2c 4d ff ff       	call   c00105c4 <LogicalDisk::write(unsigned long long, int, void*)>
c001b898:	83 c4 20             	add    esp,0x20
c001b89b:	83 c4 1c             	add    esp,0x1c
c001b89e:	c3                   	ret    
c001b89f:	90                   	nop

c001b8a0 <fatWrapperIoctl>:
c001b8a0:	53                   	push   ebx
c001b8a1:	83 ec 28             	sub    esp,0x28
c001b8a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b8a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b8ac:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b8b0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b8b4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b8b9:	75 31                	jne    c001b8ec <fatWrapperIoctl+0x4c>
c001b8bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b8c3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b8c8:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c001b8cf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b8d5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b8db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8df:	66 89 02             	mov    WORD PTR [edx],ax
c001b8e2:	b8 00 00 00 00       	mov    eax,0x0
c001b8e7:	e9 bc 00 00 00       	jmp    c001b9a8 <fatWrapperIoctl+0x108>
c001b8ec:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b8f1:	75 6d                	jne    c001b960 <fatWrapperIoctl+0xc0>
c001b8f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b8fb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b900:	8b 04 85 a0 86 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7960]
c001b907:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b90d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b913:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b919:	89 c8                	mov    eax,ecx
c001b91b:	89 da                	mov    edx,ebx
c001b91d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b921:	c1 e0 0a             	shl    eax,0xa
c001b924:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b929:	8b 0c 8d a0 86 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7960]
c001b930:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b936:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b93c:	89 cb                	mov    ebx,ecx
c001b93e:	c1 fb 1f             	sar    ebx,0x1f
c001b941:	53                   	push   ebx
c001b942:	51                   	push   ecx
c001b943:	52                   	push   edx
c001b944:	50                   	push   eax
c001b945:	e8 aa 6e 00 00       	call   c00227f4 <__udivdi3>
c001b94a:	83 c4 10             	add    esp,0x10
c001b94d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b951:	89 01                	mov    DWORD PTR [ecx],eax
c001b953:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b956:	b8 00 00 00 00       	mov    eax,0x0
c001b95b:	eb 4b                	jmp    c001b9a8 <fatWrapperIoctl+0x108>
c001b95d:	8d 76 00             	lea    esi,[esi+0x0]
c001b960:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b965:	75 09                	jne    c001b970 <fatWrapperIoctl+0xd0>
c001b967:	b8 00 00 00 00       	mov    eax,0x0
c001b96c:	eb 3a                	jmp    c001b9a8 <fatWrapperIoctl+0x108>
c001b96e:	66 90                	xchg   ax,ax
c001b970:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b975:	75 19                	jne    c001b990 <fatWrapperIoctl+0xf0>
c001b977:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b97b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b97f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b983:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b989:	b8 00 00 00 00       	mov    eax,0x0
c001b98e:	eb 18                	jmp    c001b9a8 <fatWrapperIoctl+0x108>
c001b990:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b995:	75 09                	jne    c001b9a0 <fatWrapperIoctl+0x100>
c001b997:	b8 00 00 00 00       	mov    eax,0x0
c001b99c:	eb 0a                	jmp    c001b9a8 <fatWrapperIoctl+0x108>
c001b99e:	66 90                	xchg   ax,ax
c001b9a0:	b8 04 00 00 00       	mov    eax,0x4
c001b9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a8:	83 c4 28             	add    esp,0x28
c001b9ab:	5b                   	pop    ebx
c001b9ac:	c3                   	ret    
c001b9ad:	90                   	nop
c001b9ae:	66 90                	xchg   ax,ax

c001b9b0 <FAT::FAT()>:
c001b9b0:	83 ec 1c             	sub    esp,0x1c
c001b9b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9b7:	83 ec 0c             	sub    esp,0xc
c001b9ba:	50                   	push   eax
c001b9bb:	e8 56 16 ff ff       	call   c000d016 <Filesystem::Filesystem()>
c001b9c0:	83 c4 10             	add    esp,0x10
c001b9c3:	ba 74 64 02 c0       	mov    edx,0xc0026474
c001b9c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b9cc:	89 10                	mov    DWORD PTR [eax],edx
c001b9ce:	c7 05 00 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029700,0x0
c001b9d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b9e0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b9e5:	7f 15                	jg     c001b9fc <FAT::FAT()+0x4c>
c001b9e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9eb:	c7 04 85 20 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd68e0],0xffffffff
c001b9f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b9fa:	eb e4                	jmp    c001b9e0 <FAT::FAT()+0x30>
c001b9fc:	90                   	nop
c001b9fd:	83 c4 1c             	add    esp,0x1c
c001ba00:	c3                   	ret    
c001ba01:	90                   	nop
c001ba02:	66 90                	xchg   ax,ax

c001ba04 <FAT::fixFilepath(char*)>:
c001ba04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba08:	8a 00                	mov    al,BYTE PTR [eax]
c001ba0a:	3c 40                	cmp    al,0x40
c001ba0c:	7e 2e                	jle    c001ba3c <FAT::fixFilepath(char*)+0x38>
c001ba0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba12:	8a 00                	mov    al,BYTE PTR [eax]
c001ba14:	83 e8 41             	sub    eax,0x41
c001ba17:	88 c2                	mov    dl,al
c001ba19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba1d:	88 10                	mov    BYTE PTR [eax],dl
c001ba1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba23:	8a 00                	mov    al,BYTE PTR [eax]
c001ba25:	0f be c0             	movsx  eax,al
c001ba28:	8b 04 85 20 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd68e0]
c001ba2f:	83 c0 30             	add    eax,0x30
c001ba32:	88 c2                	mov    dl,al
c001ba34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba38:	88 10                	mov    BYTE PTR [eax],dl
c001ba3a:	66 90                	xchg   ax,ax
c001ba3c:	90                   	nop
c001ba3d:	c3                   	ret    
c001ba3e:	66 90                	xchg   ax,ax

c001ba40 <FAT::open(char const*, void**, FileOpenMode)>:
c001ba40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ba46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ba4e:	74 0c                	je     c001ba5c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001ba50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ba58:	75 0e                	jne    c001ba68 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001ba5a:	66 90                	xchg   ax,ax
c001ba5c:	b8 04 00 00 00       	mov    eax,0x4
c001ba61:	e9 06 01 00 00       	jmp    c001bb6c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001ba66:	66 90                	xchg   ax,ax
c001ba68:	83 ec 08             	sub    esp,0x8
c001ba6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba72:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ba76:	50                   	push   eax
c001ba77:	e8 c4 4c fe ff       	call   c0000740 <strcpy>
c001ba7c:	83 c4 10             	add    esp,0x10
c001ba7f:	83 ec 08             	sub    esp,0x8
c001ba82:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ba86:	50                   	push   eax
c001ba87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ba8e:	e8 71 ff ff ff       	call   c001ba04 <FAT::fixFilepath(char*)>
c001ba93:	83 c4 10             	add    esp,0x10
c001ba96:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ba9e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001baa5:	83 e0 01             	and    eax,0x1
c001baa8:	74 0a                	je     c001bab4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001baaa:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001bab2:	66 90                	xchg   ax,ax
c001bab4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001babb:	83 e0 04             	and    eax,0x4
c001babe:	74 10                	je     c001bad0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001bac0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001bac8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bad0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bad7:	83 e0 02             	and    eax,0x2
c001bada:	74 08                	je     c001bae4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001badc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bae4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001baeb:	83 e0 08             	and    eax,0x8
c001baee:	74 08                	je     c001baf8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001baf0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001baf8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001baff:	83 e0 10             	and    eax,0x10
c001bb02:	74 08                	je     c001bb0c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bb04:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001bb0c:	83 ec 0c             	sub    esp,0xc
c001bb0f:	68 50 02 00 00       	push   0x250
c001bb14:	e8 f6 de fe ff       	call   c0009a0f <malloc>
c001bb19:	83 c4 10             	add    esp,0x10
c001bb1c:	89 c2                	mov    edx,eax
c001bb1e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb25:	89 10                	mov    DWORD PTR [eax],edx
c001bb27:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bb2f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb36:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb38:	83 ec 04             	sub    esp,0x4
c001bb3b:	52                   	push   edx
c001bb3c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bb40:	52                   	push   edx
c001bb41:	50                   	push   eax
c001bb42:	e8 44 93 fe ff       	call   c0004e8b <f_open>
c001bb47:	83 c4 10             	add    esp,0x10
c001bb4a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bb51:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bb59:	74 09                	je     c001bb64 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001bb5b:	b8 01 00 00 00       	mov    eax,0x1
c001bb60:	eb 0a                	jmp    c001bb6c <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bb62:	66 90                	xchg   ax,ax
c001bb64:	b8 00 00 00 00       	mov    eax,0x0
c001bb69:	8d 76 00             	lea    esi,[esi+0x0]
c001bb6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bb72:	c3                   	ret    
c001bb73:	90                   	nop

c001bb74 <FAT::openDir(char const*, void**)>:
c001bb74:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bb7a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bb82:	74 0c                	je     c001bb90 <FAT::openDir(char const*, void**)+0x1c>
c001bb84:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bb8c:	75 0e                	jne    c001bb9c <FAT::openDir(char const*, void**)+0x28>
c001bb8e:	66 90                	xchg   ax,ax
c001bb90:	b8 04 00 00 00       	mov    eax,0x4
c001bb95:	e9 82 00 00 00       	jmp    c001bc1c <FAT::openDir(char const*, void**)+0xa8>
c001bb9a:	66 90                	xchg   ax,ax
c001bb9c:	83 ec 08             	sub    esp,0x8
c001bb9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bba6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bbaa:	50                   	push   eax
c001bbab:	e8 90 4b fe ff       	call   c0000740 <strcpy>
c001bbb0:	83 c4 10             	add    esp,0x10
c001bbb3:	83 ec 08             	sub    esp,0x8
c001bbb6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bbba:	50                   	push   eax
c001bbbb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bbc2:	e8 3d fe ff ff       	call   c001ba04 <FAT::fixFilepath(char*)>
c001bbc7:	83 c4 10             	add    esp,0x10
c001bbca:	83 ec 0c             	sub    esp,0xc
c001bbcd:	6a 4c                	push   0x4c
c001bbcf:	e8 3b de fe ff       	call   c0009a0f <malloc>
c001bbd4:	83 c4 10             	add    esp,0x10
c001bbd7:	89 c2                	mov    edx,eax
c001bbd9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bbe0:	89 10                	mov    DWORD PTR [eax],edx
c001bbe2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bbe9:	8b 00                	mov    eax,DWORD PTR [eax]
c001bbeb:	83 ec 08             	sub    esp,0x8
c001bbee:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bbf2:	52                   	push   edx
c001bbf3:	50                   	push   eax
c001bbf4:	e8 ca a2 fe ff       	call   c0005ec3 <f_opendir>
c001bbf9:	83 c4 10             	add    esp,0x10
c001bbfc:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bc03:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bc0b:	74 07                	je     c001bc14 <FAT::openDir(char const*, void**)+0xa0>
c001bc0d:	b8 01 00 00 00       	mov    eax,0x1
c001bc12:	eb 08                	jmp    c001bc1c <FAT::openDir(char const*, void**)+0xa8>
c001bc14:	b8 00 00 00 00       	mov    eax,0x0
c001bc19:	8d 76 00             	lea    esi,[esi+0x0]
c001bc1c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bc22:	c3                   	ret    
c001bc23:	90                   	nop

c001bc24 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bc24:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bc2a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bc32:	75 0c                	jne    c001bc40 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bc34:	b8 04 00 00 00       	mov    eax,0x4
c001bc39:	e9 d2 00 00 00       	jmp    c001bd10 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc3e:	66 90                	xchg   ax,ax
c001bc40:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bc48:	75 0a                	jne    c001bc54 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bc4a:	b8 04 00 00 00       	mov    eax,0x4
c001bc4f:	e9 bc 00 00 00       	jmp    c001bd10 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc54:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bc5c:	75 0a                	jne    c001bc68 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bc5e:	b8 04 00 00 00       	mov    eax,0x4
c001bc63:	e9 a8 00 00 00       	jmp    c001bd10 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc68:	83 ec 08             	sub    esp,0x8
c001bc6b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bc72:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bc79:	50                   	push   eax
c001bc7a:	e8 c1 4a fe ff       	call   c0000740 <strcpy>
c001bc7f:	83 c4 10             	add    esp,0x10
c001bc82:	83 ec 08             	sub    esp,0x8
c001bc85:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bc8c:	50                   	push   eax
c001bc8d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bc94:	e8 6b fd ff ff       	call   c001ba04 <FAT::fixFilepath(char*)>
c001bc99:	83 c4 10             	add    esp,0x10
c001bc9c:	83 ec 08             	sub    esp,0x8
c001bc9f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bca3:	50                   	push   eax
c001bca4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bcab:	50                   	push   eax
c001bcac:	e8 d1 a3 fe ff       	call   c0006082 <f_stat>
c001bcb1:	83 c4 10             	add    esp,0x10
c001bcb4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bcbb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bcc2:	85 c0                	test   eax,eax
c001bcc4:	74 0a                	je     c001bcd0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bcc6:	83 f8 04             	cmp    eax,0x4
c001bcc9:	74 35                	je     c001bd00 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bccb:	eb 3b                	jmp    c001bd08 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bccd:	8d 76 00             	lea    esi,[esi+0x0]
c001bcd0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bcd4:	0f b6 c0             	movzx  eax,al
c001bcd7:	83 e0 10             	and    eax,0x10
c001bcda:	0f 95 c2             	setne  dl
c001bcdd:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bce4:	88 10                	mov    BYTE PTR [eax],dl
c001bce6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bce9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bced:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bcf4:	89 01                	mov    DWORD PTR [ecx],eax
c001bcf6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bcf9:	b8 00 00 00 00       	mov    eax,0x0
c001bcfe:	eb 10                	jmp    c001bd10 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd00:	b8 02 00 00 00       	mov    eax,0x2
c001bd05:	eb 09                	jmp    c001bd10 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd07:	90                   	nop
c001bd08:	b8 01 00 00 00       	mov    eax,0x1
c001bd0d:	8d 76 00             	lea    esi,[esi+0x0]
c001bd10:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bd16:	c3                   	ret    
c001bd17:	90                   	nop

c001bd18 <FAT::unlink(char const*)>:
c001bd18:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bd1e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bd26:	75 08                	jne    c001bd30 <FAT::unlink(char const*)+0x18>
c001bd28:	b8 04 00 00 00       	mov    eax,0x4
c001bd2d:	eb 61                	jmp    c001bd90 <FAT::unlink(char const*)+0x78>
c001bd2f:	90                   	nop
c001bd30:	83 ec 08             	sub    esp,0x8
c001bd33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd3a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd3e:	50                   	push   eax
c001bd3f:	e8 fc 49 fe ff       	call   c0000740 <strcpy>
c001bd44:	83 c4 10             	add    esp,0x10
c001bd47:	83 ec 08             	sub    esp,0x8
c001bd4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bd4e:	50                   	push   eax
c001bd4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bd56:	e8 a9 fc ff ff       	call   c001ba04 <FAT::fixFilepath(char*)>
c001bd5b:	83 c4 10             	add    esp,0x10
c001bd5e:	83 ec 0c             	sub    esp,0xc
c001bd61:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bd65:	50                   	push   eax
c001bd66:	e8 69 a6 fe ff       	call   c00063d4 <f_unlink>
c001bd6b:	83 c4 10             	add    esp,0x10
c001bd6e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bd75:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bd7c:	85 c0                	test   eax,eax
c001bd7e:	75 08                	jne    c001bd88 <FAT::unlink(char const*)+0x70>
c001bd80:	b8 00 00 00 00       	mov    eax,0x0
c001bd85:	eb 09                	jmp    c001bd90 <FAT::unlink(char const*)+0x78>
c001bd87:	90                   	nop
c001bd88:	b8 01 00 00 00       	mov    eax,0x1
c001bd8d:	8d 76 00             	lea    esi,[esi+0x0]
c001bd90:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bd96:	c3                   	ret    
c001bd97:	90                   	nop

c001bd98 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bd98:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bd9e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bda5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bdac:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bdb0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bdb4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bdbc:	75 0a                	jne    c001bdc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bdbe:	b8 04 00 00 00       	mov    eax,0x4
c001bdc3:	e9 30 01 00 00       	jmp    c001bef8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bdc8:	83 ec 08             	sub    esp,0x8
c001bdcb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bdd2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bdd6:	50                   	push   eax
c001bdd7:	e8 64 49 fe ff       	call   c0000740 <strcpy>
c001bddc:	83 c4 10             	add    esp,0x10
c001bddf:	83 ec 08             	sub    esp,0x8
c001bde2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bde6:	50                   	push   eax
c001bde7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bdee:	e8 11 fc ff ff       	call   c001ba04 <FAT::fixFilepath(char*)>
c001bdf3:	83 c4 10             	add    esp,0x10
c001bdf6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bdfe:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001be06:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be0b:	83 e0 01             	and    eax,0x1
c001be0e:	74 08                	je     c001be18 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001be10:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001be18:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be1d:	83 e0 02             	and    eax,0x2
c001be20:	74 0a                	je     c001be2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001be22:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001be2a:	66 90                	xchg   ax,ax
c001be2c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be31:	83 e0 04             	and    eax,0x4
c001be34:	74 0a                	je     c001be40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001be36:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001be3e:	66 90                	xchg   ax,ax
c001be40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001be45:	83 e0 08             	and    eax,0x8
c001be48:	74 0a                	je     c001be54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001be4a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001be52:	66 90                	xchg   ax,ax
c001be54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be59:	83 e0 01             	and    eax,0x1
c001be5c:	74 0a                	je     c001be68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001be5e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001be66:	66 90                	xchg   ax,ax
c001be68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be6d:	83 e0 02             	and    eax,0x2
c001be70:	74 0a                	je     c001be7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001be72:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001be7a:	66 90                	xchg   ax,ax
c001be7c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be81:	83 e0 04             	and    eax,0x4
c001be84:	74 0a                	je     c001be90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001be86:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001be8e:	66 90                	xchg   ax,ax
c001be90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be95:	83 e0 08             	and    eax,0x8
c001be98:	74 0a                	je     c001bea4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001be9a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001bea2:	66 90                	xchg   ax,ax
c001bea4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001beab:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001beb2:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001beba:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bec2:	83 ec 04             	sub    esp,0x4
c001bec5:	52                   	push   edx
c001bec6:	50                   	push   eax
c001bec7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001becb:	50                   	push   eax
c001becc:	e8 a5 ab fe ff       	call   c0006a76 <f_chmod>
c001bed1:	83 c4 10             	add    esp,0x10
c001bed4:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bedb:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bee2:	85 c0                	test   eax,eax
c001bee4:	75 0a                	jne    c001bef0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001bee6:	b8 00 00 00 00       	mov    eax,0x0
c001beeb:	eb 0b                	jmp    c001bef8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001beed:	8d 76 00             	lea    esi,[esi+0x0]
c001bef0:	b8 01 00 00 00       	mov    eax,0x1
c001bef5:	8d 76 00             	lea    esi,[esi+0x0]
c001bef8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001befe:	c3                   	ret    
c001beff:	90                   	nop

c001bf00 <FAT::rename(char const*, char const*)>:
c001bf00:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf06:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001bf0e:	74 0c                	je     c001bf1c <FAT::rename(char const*, char const*)+0x1c>
c001bf10:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001bf18:	75 0e                	jne    c001bf28 <FAT::rename(char const*, char const*)+0x28>
c001bf1a:	66 90                	xchg   ax,ax
c001bf1c:	b8 04 00 00 00       	mov    eax,0x4
c001bf21:	e9 9e 00 00 00       	jmp    c001bfc4 <FAT::rename(char const*, char const*)+0xc4>
c001bf26:	66 90                	xchg   ax,ax
c001bf28:	83 ec 08             	sub    esp,0x8
c001bf2b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf32:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bf39:	50                   	push   eax
c001bf3a:	e8 01 48 fe ff       	call   c0000740 <strcpy>
c001bf3f:	83 c4 10             	add    esp,0x10
c001bf42:	83 ec 08             	sub    esp,0x8
c001bf45:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001bf4c:	50                   	push   eax
c001bf4d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf54:	e8 ab fa ff ff       	call   c001ba04 <FAT::fixFilepath(char*)>
c001bf59:	83 c4 10             	add    esp,0x10
c001bf5c:	83 ec 08             	sub    esp,0x8
c001bf5f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001bf66:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf6a:	50                   	push   eax
c001bf6b:	e8 d0 47 fe ff       	call   c0000740 <strcpy>
c001bf70:	83 c4 10             	add    esp,0x10
c001bf73:	83 ec 08             	sub    esp,0x8
c001bf76:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf7a:	50                   	push   eax
c001bf7b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bf82:	e8 7d fa ff ff       	call   c001ba04 <FAT::fixFilepath(char*)>
c001bf87:	83 c4 10             	add    esp,0x10
c001bf8a:	83 ec 08             	sub    esp,0x8
c001bf8d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf91:	50                   	push   eax
c001bf92:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bf99:	50                   	push   eax
c001bf9a:	e8 e4 a7 fe ff       	call   c0006783 <f_rename>
c001bf9f:	83 c4 10             	add    esp,0x10
c001bfa2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bfa9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001bfb0:	85 c0                	test   eax,eax
c001bfb2:	75 08                	jne    c001bfbc <FAT::rename(char const*, char const*)+0xbc>
c001bfb4:	b8 00 00 00 00       	mov    eax,0x0
c001bfb9:	eb 09                	jmp    c001bfc4 <FAT::rename(char const*, char const*)+0xc4>
c001bfbb:	90                   	nop
c001bfbc:	b8 01 00 00 00       	mov    eax,0x1
c001bfc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfc4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bfca:	c3                   	ret    
c001bfcb:	90                   	nop

c001bfcc <FAT::mkdir(char const*)>:
c001bfcc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bfd2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bfda:	75 08                	jne    c001bfe4 <FAT::mkdir(char const*)+0x18>
c001bfdc:	b8 04 00 00 00       	mov    eax,0x4
c001bfe1:	eb 61                	jmp    c001c044 <FAT::mkdir(char const*)+0x78>
c001bfe3:	90                   	nop
c001bfe4:	83 ec 08             	sub    esp,0x8
c001bfe7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bfee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bff2:	50                   	push   eax
c001bff3:	e8 48 47 fe ff       	call   c0000740 <strcpy>
c001bff8:	83 c4 10             	add    esp,0x10
c001bffb:	83 ec 08             	sub    esp,0x8
c001bffe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c002:	50                   	push   eax
c001c003:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c00a:	e8 f5 f9 ff ff       	call   c001ba04 <FAT::fixFilepath(char*)>
c001c00f:	83 c4 10             	add    esp,0x10
c001c012:	83 ec 0c             	sub    esp,0xc
c001c015:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c019:	50                   	push   eax
c001c01a:	e8 38 a5 fe ff       	call   c0006557 <f_mkdir>
c001c01f:	83 c4 10             	add    esp,0x10
c001c022:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c029:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c030:	85 c0                	test   eax,eax
c001c032:	75 08                	jne    c001c03c <FAT::mkdir(char const*)+0x70>
c001c034:	b8 00 00 00 00       	mov    eax,0x0
c001c039:	eb 09                	jmp    c001c044 <FAT::mkdir(char const*)+0x78>
c001c03b:	90                   	nop
c001c03c:	b8 01 00 00 00       	mov    eax,0x1
c001c041:	8d 76 00             	lea    esi,[esi+0x0]
c001c044:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c04a:	c3                   	ret    
c001c04b:	90                   	nop

c001c04c <FAT::exists(char const*)>:
c001c04c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c052:	83 ec 08             	sub    esp,0x8
c001c055:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c05c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c060:	50                   	push   eax
c001c061:	e8 da 46 fe ff       	call   c0000740 <strcpy>
c001c066:	83 c4 10             	add    esp,0x10
c001c069:	83 ec 08             	sub    esp,0x8
c001c06c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c070:	50                   	push   eax
c001c071:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c078:	e8 87 f9 ff ff       	call   c001ba04 <FAT::fixFilepath(char*)>
c001c07d:	83 c4 10             	add    esp,0x10
c001c080:	83 ec 08             	sub    esp,0x8
c001c083:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c08a:	50                   	push   eax
c001c08b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c08f:	50                   	push   eax
c001c090:	e8 ed 9f fe ff       	call   c0006082 <f_stat>
c001c095:	83 c4 10             	add    esp,0x10
c001c098:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c09f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c0a6:	85 c0                	test   eax,eax
c001c0a8:	75 06                	jne    c001c0b0 <FAT::exists(char const*)+0x64>
c001c0aa:	b0 01                	mov    al,0x1
c001c0ac:	eb 06                	jmp    c001c0b4 <FAT::exists(char const*)+0x68>
c001c0ae:	66 90                	xchg   ax,ax
c001c0b0:	b0 00                	mov    al,0x0
c001c0b2:	66 90                	xchg   ax,ax
c001c0b4:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c0ba:	c3                   	ret    
c001c0bb:	90                   	nop

c001c0bc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c0bc:	b8 08 00 00 00       	mov    eax,0x8
c001c0c1:	c3                   	ret    

c001c0c2 <ISO9660::seek(void*, unsigned long long)>:
c001c0c2:	53                   	push   ebx
c001c0c3:	b8 04 00 00 00       	mov    eax,0x4
c001c0c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c0cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c0d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c0d4:	85 d2                	test   edx,edx
c001c0d6:	74 17                	je     c001c0ef <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c0d8:	89 c8                	mov    eax,ecx
c001c0da:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c0dd:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c0e0:	b8 01 00 00 00       	mov    eax,0x1
c001c0e5:	73 08                	jae    c001c0ef <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c0e7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c0ea:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c0ed:	31 c0                	xor    eax,eax
c001c0ef:	5b                   	pop    ebx
c001c0f0:	c3                   	ret    
c001c0f1:	90                   	nop

c001c0f2 <ISO9660::tell(void*, unsigned long long*)>:
c001c0f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c0f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0fa:	85 d2                	test   edx,edx
c001c0fc:	74 12                	je     c001c110 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c0fe:	85 c0                	test   eax,eax
c001c100:	74 0e                	je     c001c110 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c102:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c105:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c108:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c10b:	89 10                	mov    DWORD PTR [eax],edx
c001c10d:	31 c0                	xor    eax,eax
c001c10f:	c3                   	ret    
c001c110:	b8 04 00 00 00       	mov    eax,0x4
c001c115:	c3                   	ret    

c001c116 <ISO9660::getName()>:
c001c116:	b8 d4 64 02 c0       	mov    eax,0xc00264d4
c001c11b:	c3                   	ret    

c001c11c <ISO9660::stat(void*, unsigned long long*)>:
c001c11c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c120:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c124:	85 d2                	test   edx,edx
c001c126:	74 12                	je     c001c13a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c128:	85 c0                	test   eax,eax
c001c12a:	74 0e                	je     c001c13a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c12c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c12f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c132:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c135:	89 10                	mov    DWORD PTR [eax],edx
c001c137:	31 c0                	xor    eax,eax
c001c139:	c3                   	ret    
c001c13a:	b8 04 00 00 00       	mov    eax,0x4
c001c13f:	c3                   	ret    

c001c140 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c140:	b8 01 00 00 00       	mov    eax,0x1
c001c145:	c3                   	ret    

c001c146 <ISO9660::unlink(char const*)>:
c001c146:	b8 01 00 00 00       	mov    eax,0x1
c001c14b:	c3                   	ret    

c001c14c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c14c:	b8 01 00 00 00       	mov    eax,0x1
c001c151:	c3                   	ret    

c001c152 <ISO9660::rename(char const*, char const*)>:
c001c152:	b8 01 00 00 00       	mov    eax,0x1
c001c157:	c3                   	ret    

c001c158 <ISO9660::mkdir(char const*)>:
c001c158:	b8 01 00 00 00       	mov    eax,0x1
c001c15d:	c3                   	ret    

c001c15e <ISO9660::close(void*)>:
c001c15e:	83 ec 0c             	sub    esp,0xc
c001c161:	b8 04 00 00 00       	mov    eax,0x4
c001c166:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c16a:	85 d2                	test   edx,edx
c001c16c:	74 0e                	je     c001c17c <ISO9660::close(void*)+0x1e>
c001c16e:	83 ec 0c             	sub    esp,0xc
c001c171:	52                   	push   edx
c001c172:	e8 a8 d8 fe ff       	call   c0009a1f <free>
c001c177:	83 c4 10             	add    esp,0x10
c001c17a:	31 c0                	xor    eax,eax
c001c17c:	83 c4 0c             	add    esp,0xc
c001c17f:	c3                   	ret    

c001c180 <ISO9660::closeDir(void*)>:
c001c180:	83 ec 0c             	sub    esp,0xc
c001c183:	b8 04 00 00 00       	mov    eax,0x4
c001c188:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c18c:	85 d2                	test   edx,edx
c001c18e:	74 0e                	je     c001c19e <ISO9660::closeDir(void*)+0x1e>
c001c190:	83 ec 0c             	sub    esp,0xc
c001c193:	52                   	push   edx
c001c194:	e8 86 d8 fe ff       	call   c0009a1f <free>
c001c199:	83 c4 10             	add    esp,0x10
c001c19c:	31 c0                	xor    eax,eax
c001c19e:	83 c4 0c             	add    esp,0xc
c001c1a1:	c3                   	ret    

c001c1a2 <ISO9660::~ISO9660()>:
c001c1a2:	83 ec 0c             	sub    esp,0xc
c001c1a5:	ba f8 64 02 c0       	mov    edx,0xc00264f8
c001c1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ae:	89 10                	mov    DWORD PTR [eax],edx
c001c1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b4:	83 ec 0c             	sub    esp,0xc
c001c1b7:	50                   	push   eax
c001c1b8:	e8 7d 0e ff ff       	call   c000d03a <Filesystem::~Filesystem()>
c001c1bd:	83 c4 10             	add    esp,0x10
c001c1c0:	90                   	nop
c001c1c1:	83 c4 0c             	add    esp,0xc
c001c1c4:	c3                   	ret    
c001c1c5:	90                   	nop

c001c1c6 <ISO9660::~ISO9660()>:
c001c1c6:	83 ec 0c             	sub    esp,0xc
c001c1c9:	83 ec 0c             	sub    esp,0xc
c001c1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1d0:	e8 cd ff ff ff       	call   c001c1a2 <ISO9660::~ISO9660()>
c001c1d5:	83 c4 10             	add    esp,0x10
c001c1d8:	83 ec 08             	sub    esp,0x8
c001c1db:	6a 08                	push   0x8
c001c1dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c1e1:	e8 38 0a ff ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001c1e6:	83 c4 10             	add    esp,0x10
c001c1e9:	83 c4 0c             	add    esp,0xc
c001c1ec:	c3                   	ret    

c001c1ed <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c1ed:	55                   	push   ebp
c001c1ee:	31 c9                	xor    ecx,ecx
c001c1f0:	57                   	push   edi
c001c1f1:	56                   	push   esi
c001c1f2:	53                   	push   ebx
c001c1f3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c1f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c1fb:	89 eb                	mov    ebx,ebp
c001c1fd:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c201:	39 ce                	cmp    esi,ecx
c001c203:	7e 17                	jle    c001c21c <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c205:	31 d2                	xor    edx,edx
c001c207:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c20b:	7d 13                	jge    c001c220 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c20d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c211:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c214:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c217:	75 0d                	jne    c001c226 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c219:	42                   	inc    edx
c001c21a:	eb eb                	jmp    c001c207 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c21c:	31 c0                	xor    eax,eax
c001c21e:	eb 0a                	jmp    c001c22a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c220:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c224:	eb 04                	jmp    c001c22a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c226:	41                   	inc    ecx
c001c227:	43                   	inc    ebx
c001c228:	eb d7                	jmp    c001c201 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c22a:	5b                   	pop    ebx
c001c22b:	5e                   	pop    esi
c001c22c:	5f                   	pop    edi
c001c22d:	5d                   	pop    ebp
c001c22e:	c3                   	ret    

c001c22f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c22f:	57                   	push   edi
c001c230:	56                   	push   esi
c001c231:	53                   	push   ebx
c001c232:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c236:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c23a:	39 0d 00 98 02 c0    	cmp    DWORD PTR ds:0xc0029800,ecx
c001c240:	75 08                	jne    c001c24a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001c242:	38 05 14 7b 02 c0    	cmp    BYTE PTR ds:0xc0027b14,al
c001c248:	74 2b                	je     c001c275 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001c24a:	83 ec 0c             	sub    esp,0xc
c001c24d:	a2 14 7b 02 c0       	mov    ds:0xc0027b14,al
c001c252:	68 20 98 02 c0       	push   0xc0029820
c001c257:	0f be c0             	movsx  eax,al
c001c25a:	6a 01                	push   0x1
c001c25c:	89 0d 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,ecx
c001c262:	31 db                	xor    ebx,ebx
c001c264:	53                   	push   ebx
c001c265:	51                   	push   ecx
c001c266:	ff 34 85 9c 85 02 c0 	push   DWORD PTR [eax*4-0x3ffd7a64]
c001c26d:	e8 e6 42 ff ff       	call   c0010558 <LogicalDisk::read(unsigned long long, int, void*)>
c001c272:	83 c4 20             	add    esp,0x20
c001c275:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c279:	be 20 98 02 c0       	mov    esi,0xc0029820
c001c27e:	b9 00 08 00 00       	mov    ecx,0x800
c001c283:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c285:	5b                   	pop    ebx
c001c286:	5e                   	pop    esi
c001c287:	5f                   	pop    edi
c001c288:	c3                   	ret    
c001c289:	90                   	nop

c001c28a <ISO9660::tryMount(LogicalDisk*, int)>:
c001c28a:	81 ec 10 08 00 00    	sub    esp,0x810
c001c290:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c297:	83 c0 41             	add    eax,0x41
c001c29a:	0f be c0             	movsx  eax,al
c001c29d:	50                   	push   eax
c001c29e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c2a2:	50                   	push   eax
c001c2a3:	6a 10                	push   0x10
c001c2a5:	e8 85 ff ff ff       	call   c001c22f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c2aa:	83 c4 10             	add    esp,0x10
c001c2ad:	31 c0                	xor    eax,eax
c001c2af:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c2b4:	75 1d                	jne    c001c2d3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c2b6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c2bb:	75 16                	jne    c001c2d3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c2bd:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c2c2:	75 0f                	jne    c001c2d3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c2c4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c2c9:	75 08                	jne    c001c2d3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001c2cb:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c2d0:	0f 94 c0             	sete   al
c001c2d3:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c2d9:	c3                   	ret    

c001c2da <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c2da:	55                   	push   ebp
c001c2db:	57                   	push   edi
c001c2dc:	56                   	push   esi
c001c2dd:	53                   	push   ebx
c001c2de:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c2e4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c2eb:	85 ed                	test   ebp,ebp
c001c2ed:	0f 84 da 01 00 00    	je     c001c4cd <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c2f3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c2fb:	0f 84 cc 01 00 00    	je     c001c4cd <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c301:	b8 01 00 00 00       	mov    eax,0x1
c001c306:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c30a:	0f 85 c2 01 00 00    	jne    c001c4d2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c310:	31 d2                	xor    edx,edx
c001c312:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c319:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c31c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c31f:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c322:	89 04 24             	mov    DWORD PTR [esp],eax
c001c325:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c329:	01 c8                	add    eax,ecx
c001c32b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c32e:	11 da                	adc    edx,ebx
c001c330:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c334:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c338:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c33c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c340:	19 d7                	sbb    edi,edx
c001c342:	72 11                	jb     c001c355 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c344:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c347:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c34b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c34f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c353:	eb 0c                	jmp    c001c361 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c355:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c359:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c35d:	29 ce                	sub    esi,ecx
c001c35f:	19 df                	sbb    edi,ebx
c001c361:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c364:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c367:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c36b:	c1 e0 0b             	shl    eax,0xb
c001c36e:	01 c8                	add    eax,ecx
c001c370:	11 da                	adc    edx,ebx
c001c372:	89 04 24             	mov    DWORD PTR [esp],eax
c001c375:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c379:	51                   	push   ecx
c001c37a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c37e:	50                   	push   eax
c001c37f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c383:	53                   	push   ebx
c001c384:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c38c:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c390:	50                   	push   eax
c001c391:	e8 99 fe ff ff       	call   c001c22f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c396:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c399:	b8 00 08 00 00       	mov    eax,0x800
c001c39e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c3a4:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c3a8:	29 d0                	sub    eax,edx
c001c3aa:	83 c4 10             	add    esp,0x10
c001c3ad:	89 f9                	mov    ecx,edi
c001c3af:	39 c6                	cmp    esi,eax
c001c3b1:	83 d9 00             	sbb    ecx,0x0
c001c3b4:	7d 1b                	jge    c001c3d1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c3b6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c3bb:	75 12                	jne    c001c3cf <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c3bd:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c3c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3ca:	e9 fa 00 00 00       	jmp    c001c4c9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c3cf:	89 f0                	mov    eax,esi
c001c3d1:	01 d3                	add    ebx,edx
c001c3d3:	31 d2                	xor    edx,edx
c001c3d5:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c3d9:	39 c2                	cmp    edx,eax
c001c3db:	7d 14                	jge    c001c3f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c3dd:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c3e4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3e8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c3eb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c3ee:	42                   	inc    edx
c001c3ef:	eb e8                	jmp    c001c3d9 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c3f1:	89 c2                	mov    edx,eax
c001c3f3:	85 c0                	test   eax,eax
c001c3f5:	79 02                	jns    c001c3f9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c3f7:	31 d2                	xor    edx,edx
c001c3f9:	01 c2                	add    edx,eax
c001c3fb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c3fe:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c405:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c409:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c40d:	99                   	cdq    
c001c40e:	01 c1                	add    ecx,eax
c001c410:	11 d3                	adc    ebx,edx
c001c412:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c416:	29 c6                	sub    esi,eax
c001c418:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c41c:	19 d7                	sbb    edi,edx
c001c41e:	89 34 24             	mov    DWORD PTR [esp],esi
c001c421:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c425:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c42a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c42d:	b8 00 00 00 00       	mov    eax,0x0
c001c432:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c436:	7d 43                	jge    c001c47b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c438:	52                   	push   edx
c001c439:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c43d:	50                   	push   eax
c001c43e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c442:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c446:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c44a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c44e:	50                   	push   eax
c001c44f:	e8 db fd ff ff       	call   c001c22f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c454:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c45c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c461:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c469:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c471:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c476:	83 c4 10             	add    esp,0x10
c001c479:	eb aa                	jmp    c001c425 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c47b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c47f:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c482:	74 2a                	je     c001c4ae <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c484:	50                   	push   eax
c001c485:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c489:	50                   	push   eax
c001c48a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c48e:	56                   	push   esi
c001c48f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c493:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c497:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c49b:	51                   	push   ecx
c001c49c:	e8 8e fd ff ff       	call   c001c22f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c4a1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c4a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c4a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4ab:	83 c4 10             	add    esp,0x10
c001c4ae:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c4b5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c4b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4bd:	89 18                	mov    DWORD PTR [eax],ebx
c001c4bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4c3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c4c6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c4c9:	31 c0                	xor    eax,eax
c001c4cb:	eb 05                	jmp    c001c4d2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c4cd:	b8 04 00 00 00       	mov    eax,0x4
c001c4d2:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c4d8:	5b                   	pop    ebx
c001c4d9:	5e                   	pop    esi
c001c4da:	5f                   	pop    edi
c001c4db:	5d                   	pop    ebp
c001c4dc:	c3                   	ret    
c001c4dd:	90                   	nop

c001c4de <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c4de:	55                   	push   ebp
c001c4df:	57                   	push   edi
c001c4e0:	56                   	push   esi
c001c4e1:	53                   	push   ebx
c001c4e2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c4e8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c4ef:	85 ed                	test   ebp,ebp
c001c4f1:	0f 84 51 02 00 00    	je     c001c748 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c4f7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c4ff:	0f 84 43 02 00 00    	je     c001c748 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c505:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c508:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c50b:	75 0a                	jne    c001c517 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c50d:	b8 07 00 00 00       	mov    eax,0x7
c001c512:	e9 36 02 00 00       	jmp    c001c74d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c517:	50                   	push   eax
c001c518:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c51c:	50                   	push   eax
c001c51d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c524:	53                   	push   ebx
c001c525:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c528:	c1 e0 0b             	shl    eax,0xb
c001c52b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c52e:	c1 e8 0b             	shr    eax,0xb
c001c531:	50                   	push   eax
c001c532:	e8 f8 fc ff ff       	call   c001c22f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c537:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c53a:	83 c4 10             	add    esp,0x10
c001c53d:	89 c1                	mov    ecx,eax
c001c53f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c542:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c548:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c54b:	84 db                	test   bl,bl
c001c54d:	0f 85 8b 00 00 00    	jne    c001c5de <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c553:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c559:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c55c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c562:	29 c6                	sub    esi,eax
c001c564:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c568:	89 f3                	mov    ebx,esi
c001c56a:	89 f1                	mov    ecx,esi
c001c56c:	c1 fb 1f             	sar    ebx,0x1f
c001c56f:	01 f0                	add    eax,esi
c001c571:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c574:	11 da                	adc    edx,ebx
c001c576:	89 04 24             	mov    DWORD PTR [esp],eax
c001c579:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c57d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c580:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c583:	89 d8                	mov    eax,ebx
c001c585:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c589:	ba 00 00 00 00       	mov    edx,0x0
c001c58e:	19 f8                	sbb    eax,edi
c001c590:	b8 00 00 00 00       	mov    eax,0x0
c001c595:	73 08                	jae    c001c59f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c597:	89 f0                	mov    eax,esi
c001c599:	89 fa                	mov    edx,edi
c001c59b:	29 c8                	sub    eax,ecx
c001c59d:	19 da                	sbb    edx,ebx
c001c59f:	89 d7                	mov    edi,edx
c001c5a1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c5a4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c5a7:	09 c7                	or     edi,eax
c001c5a9:	0f 84 5e ff ff ff    	je     c001c50d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c5af:	57                   	push   edi
c001c5b0:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c5b4:	50                   	push   eax
c001c5b5:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c5bc:	53                   	push   ebx
c001c5bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5c0:	c1 e0 0b             	shl    eax,0xb
c001c5c3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c5c7:	c1 e8 0b             	shr    eax,0xb
c001c5ca:	50                   	push   eax
c001c5cb:	e8 5f fc ff ff       	call   c001c22f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c5d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c5d3:	83 c4 10             	add    esp,0x10
c001c5d6:	25 ff 07 00 00       	and    eax,0x7ff
c001c5db:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c5de:	31 ff                	xor    edi,edi
c001c5e0:	56                   	push   esi
c001c5e1:	6a 28                	push   0x28
c001c5e3:	6a 00                	push   0x0
c001c5e5:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c5e9:	50                   	push   eax
c001c5ea:	e8 95 40 fe ff       	call   c0000684 <memset>
c001c5ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c5f2:	25 ff 07 00 00       	and    eax,0x7ff
c001c5f7:	89 c6                	mov    esi,eax
c001c5f9:	83 c6 21             	add    esi,0x21
c001c5fc:	83 d7 00             	adc    edi,0x0
c001c5ff:	83 c4 10             	add    esp,0x10
c001c602:	31 c9                	xor    ecx,ecx
c001c604:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c60b:	83 f9 28             	cmp    ecx,0x28
c001c60e:	88 04 24             	mov    BYTE PTR [esp],al
c001c611:	0f 94 c2             	sete   dl
c001c614:	88 d0                	mov    al,dl
c001c616:	ba ff 07 00 00       	mov    edx,0x7ff
c001c61b:	39 f2                	cmp    edx,esi
c001c61d:	ba 00 00 00 00       	mov    edx,0x0
c001c622:	19 fa                	sbb    edx,edi
c001c624:	0f 92 c2             	setb   dl
c001c627:	09 c2                	or     edx,eax
c001c629:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c62d:	0f 94 c0             	sete   al
c001c630:	08 d0                	or     al,dl
c001c632:	75 16                	jne    c001c64a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c634:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c638:	74 10                	je     c001c64a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c63a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c63d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c641:	41                   	inc    ecx
c001c642:	83 c6 01             	add    esi,0x1
c001c645:	83 d7 00             	adc    edi,0x0
c001c648:	eb ba                	jmp    c001c604 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c64a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c651:	83 ec 0c             	sub    esp,0xc
c001c654:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c658:	56                   	push   esi
c001c659:	e8 42 40 fe ff       	call   c00006a0 <strlen>
c001c65e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c665:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c669:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c671:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c674:	5a                   	pop    edx
c001c675:	25 ff 07 00 00       	and    eax,0x7ff
c001c67a:	59                   	pop    ecx
c001c67b:	01 f8                	add    eax,edi
c001c67d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c683:	83 e0 02             	and    eax,0x2
c001c686:	3c 01                	cmp    al,0x1
c001c688:	19 c0                	sbb    eax,eax
c001c68a:	83 c0 02             	add    eax,0x2
c001c68d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c691:	56                   	push   esi
c001c692:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c696:	50                   	push   eax
c001c697:	e8 a4 40 fe ff       	call   c0000740 <strcpy>
c001c69c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c6a0:	83 c4 10             	add    esp,0x10
c001c6a3:	84 c0                	test   al,al
c001c6a5:	75 21                	jne    c001c6c8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c6a7:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c6af:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6b7:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c6bf:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c6c6:	eb 28                	jmp    c001c6f0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c6c8:	fe c8                	dec    al
c001c6ca:	75 24                	jne    c001c6f0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c6cc:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c6d4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6dc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c6e4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c6eb:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c6f0:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c6f4:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c6fb:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c702:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c704:	0f b6 f3             	movzx  esi,bl
c001c707:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c70e:	31 db                	xor    ebx,ebx
c001c710:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c716:	89 df                	mov    edi,ebx
c001c718:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c71b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c71e:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c721:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c724:	39 c6                	cmp    esi,eax
c001c726:	19 d7                	sbb    edi,edx
c001c728:	72 10                	jb     c001c73a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c72a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c731:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c738:	eb 0a                	jmp    c001c744 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c73a:	29 f0                	sub    eax,esi
c001c73c:	19 da                	sbb    edx,ebx
c001c73e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c741:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c744:	31 c0                	xor    eax,eax
c001c746:	eb 05                	jmp    c001c74d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c748:	b8 04 00 00 00       	mov    eax,0x4
c001c74d:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c753:	5b                   	pop    ebx
c001c754:	5e                   	pop    esi
c001c755:	5f                   	pop    edi
c001c756:	5d                   	pop    ebp
c001c757:	c3                   	ret    

c001c758 <readRoot(unsigned int*, unsigned int*, char)>:
c001c758:	57                   	push   edi
c001c759:	56                   	push   esi
c001c75a:	81 ec 38 08 00 00    	sub    esp,0x838
c001c760:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c768:	50                   	push   eax
c001c769:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c76d:	50                   	push   eax
c001c76e:	6a 10                	push   0x10
c001c770:	e8 ba fa ff ff       	call   c001c22f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c775:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c77c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c780:	b9 22 00 00 00       	mov    ecx,0x22
c001c785:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c787:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c78e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c792:	89 10                	mov    DWORD PTR [eax],edx
c001c794:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c79b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c79f:	89 10                	mov    DWORD PTR [eax],edx
c001c7a1:	81 c4 44 08 00 00    	add    esp,0x844
c001c7a7:	b0 01                	mov    al,0x1
c001c7a9:	5e                   	pop    esi
c001c7aa:	5f                   	pop    edi
c001c7ab:	c3                   	ret    

c001c7ac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c7ac:	55                   	push   ebp
c001c7ad:	57                   	push   edi
c001c7ae:	56                   	push   esi
c001c7af:	53                   	push   ebx
c001c7b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c7b6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c7bd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c7c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7c8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c7cc:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c7d0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c7d4:	75 03                	jne    c001c7d9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c7d6:	83 c3 02             	add    ebx,0x2
c001c7d9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c7dc:	75 03                	jne    c001c7e1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c7de:	43                   	inc    ebx
c001c7df:	eb f8                	jmp    c001c7d9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c7e1:	51                   	push   ecx
c001c7e2:	68 00 01 00 00       	push   0x100
c001c7e7:	6a 00                	push   0x0
c001c7e9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c7ed:	50                   	push   eax
c001c7ee:	e8 91 3e fe ff       	call   c0000684 <memset>
c001c7f3:	83 c4 10             	add    esp,0x10
c001c7f6:	31 d2                	xor    edx,edx
c001c7f8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c7fb:	84 c0                	test   al,al
c001c7fd:	74 21                	je     c001c820 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c7ff:	3c 2f                	cmp    al,0x2f
c001c801:	75 0b                	jne    c001c80e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c803:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c807:	bd 01 00 00 00       	mov    ebp,0x1
c001c80c:	eb 14                	jmp    c001c822 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c80e:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c811:	80 f9 19             	cmp    cl,0x19
c001c814:	77 03                	ja     c001c819 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c816:	83 e8 20             	sub    eax,0x20
c001c819:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c81d:	42                   	inc    edx
c001c81e:	eb d8                	jmp    c001c7f8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c820:	31 ed                	xor    ebp,ebp
c001c822:	83 ec 0c             	sub    esp,0xc
c001c825:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c82c:	e8 de d1 fe ff       	call   c0009a0f <malloc>
c001c831:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c838:	89 c6                	mov    esi,eax
c001c83a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c840:	c1 ef 0b             	shr    edi,0xb
c001c843:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c84a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c84e:	83 c4 10             	add    esp,0x10
c001c851:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c856:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c85a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c861:	74 28                	je     c001c88b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c863:	52                   	push   edx
c001c864:	57                   	push   edi
c001c865:	50                   	push   eax
c001c866:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c86a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c871:	e8 b9 f9 ff ff       	call   c001c22f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c876:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c87a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c881:	05 00 08 00 00       	add    eax,0x800
c001c886:	83 c4 10             	add    esp,0x10
c001c889:	eb cb                	jmp    c001c856 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c88b:	83 ec 0c             	sub    esp,0xc
c001c88e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c892:	57                   	push   edi
c001c893:	e8 08 3e fe ff       	call   c00006a0 <strlen>
c001c898:	50                   	push   eax
c001c899:	57                   	push   edi
c001c89a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c8a1:	56                   	push   esi
c001c8a2:	e8 46 f9 ff ff       	call   c001c1ed <__memmem(unsigned char*, int, unsigned char*, int)>
c001c8a7:	83 c4 20             	add    esp,0x20
c001c8aa:	85 c0                	test   eax,eax
c001c8ac:	75 13                	jne    c001c8c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c8ae:	83 ec 0c             	sub    esp,0xc
c001c8b1:	56                   	push   esi
c001c8b2:	e8 68 d1 fe ff       	call   c0009a1f <free>
c001c8b7:	83 c4 10             	add    esp,0x10
c001c8ba:	31 c0                	xor    eax,eax
c001c8bc:	e9 b3 00 00 00       	jmp    c001c974 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c8c1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c8c5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c8c9:	c1 e7 08             	shl    edi,0x8
c001c8cc:	c1 e2 10             	shl    edx,0x10
c001c8cf:	09 d7                	or     edi,edx
c001c8d1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c8d5:	09 d7                	or     edi,edx
c001c8d7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c8db:	c1 e2 18             	shl    edx,0x18
c001c8de:	09 d7                	or     edi,edx
c001c8e0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c8e4:	89 d1                	mov    ecx,edx
c001c8e6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c8ea:	c1 e1 08             	shl    ecx,0x8
c001c8ed:	c1 e2 10             	shl    edx,0x10
c001c8f0:	09 ca                	or     edx,ecx
c001c8f2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c8f6:	09 ca                	or     edx,ecx
c001c8f8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c8fc:	c1 e1 18             	shl    ecx,0x18
c001c8ff:	09 ca                	or     edx,ecx
c001c901:	89 e9                	mov    ecx,ebp
c001c903:	84 c9                	test   cl,cl
c001c905:	74 3c                	je     c001c943 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c907:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c90b:	83 ec 0c             	sub    esp,0xc
c001c90e:	56                   	push   esi
c001c90f:	e8 0b d1 fe ff       	call   c0009a1f <free>
c001c914:	83 c4 0c             	add    esp,0xc
c001c917:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c91e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c923:	50                   	push   eax
c001c924:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c92b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c932:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c936:	52                   	push   edx
c001c937:	57                   	push   edi
c001c938:	53                   	push   ebx
c001c939:	e8 6e fe ff ff       	call   c001c7ac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c93e:	83 c4 20             	add    esp,0x20
c001c941:	eb 31                	jmp    c001c974 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c943:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c946:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c94d:	d0 e8                	shr    al,1
c001c94f:	89 3b                	mov    DWORD PTR [ebx],edi
c001c951:	83 e0 01             	and    eax,0x1
c001c954:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c95b:	83 ec 0c             	sub    esp,0xc
c001c95e:	89 13                	mov    DWORD PTR [ebx],edx
c001c960:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c967:	89 03                	mov    DWORD PTR [ebx],eax
c001c969:	56                   	push   esi
c001c96a:	e8 b0 d0 fe ff       	call   c0009a1f <free>
c001c96f:	83 c4 10             	add    esp,0x10
c001c972:	b0 01                	mov    al,0x1
c001c974:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c97a:	5b                   	pop    ebx
c001c97b:	5e                   	pop    esi
c001c97c:	5f                   	pop    edi
c001c97d:	5d                   	pop    ebp
c001c97e:	c3                   	ret    

c001c97f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c97f:	55                   	push   ebp
c001c980:	57                   	push   edi
c001c981:	56                   	push   esi
c001c982:	53                   	push   ebx
c001c983:	83 ec 20             	sub    esp,0x20
c001c986:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c98a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c98e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c992:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c99a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c9a2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c9a7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c9ad:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c9b3:	57                   	push   edi
c001c9b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9b8:	50                   	push   eax
c001c9b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c9bd:	50                   	push   eax
c001c9be:	e8 95 fd ff ff       	call   c001c758 <readRoot(unsigned int*, unsigned int*, char)>
c001c9c3:	5a                   	pop    edx
c001c9c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c9c8:	e8 d3 3c fe ff       	call   c00006a0 <strlen>
c001c9cd:	83 c4 10             	add    esp,0x10
c001c9d0:	83 f8 03             	cmp    eax,0x3
c001c9d3:	77 17                	ja     c001c9ec <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c9d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9d9:	89 03                	mov    DWORD PTR [ebx],eax
c001c9db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9df:	89 06                	mov    DWORD PTR [esi],eax
c001c9e1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c9e8:	b0 01                	mov    al,0x1
c001c9ea:	eb 19                	jmp    c001ca05 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c9ec:	50                   	push   eax
c001c9ed:	55                   	push   ebp
c001c9ee:	57                   	push   edi
c001c9ef:	56                   	push   esi
c001c9f0:	53                   	push   ebx
c001c9f1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9f5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c9f9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c9fd:	e8 aa fd ff ff       	call   c001c7ac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ca02:	83 c4 20             	add    esp,0x20
c001ca05:	83 c4 1c             	add    esp,0x1c
c001ca08:	5b                   	pop    ebx
c001ca09:	5e                   	pop    esi
c001ca0a:	5f                   	pop    edi
c001ca0b:	5d                   	pop    ebp
c001ca0c:	c3                   	ret    
c001ca0d:	90                   	nop

c001ca0e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ca0e:	57                   	push   edi
c001ca0f:	56                   	push   esi
c001ca10:	53                   	push   ebx
c001ca11:	83 ec 10             	sub    esp,0x10
c001ca14:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ca18:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ca1c:	85 ff                	test   edi,edi
c001ca1e:	0f 84 8b 00 00 00    	je     c001caaf <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ca24:	85 f6                	test   esi,esi
c001ca26:	0f 84 83 00 00 00    	je     c001caaf <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001ca2c:	b8 03 00 00 00       	mov    eax,0x3
c001ca31:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001ca36:	75 7c                	jne    c001cab4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ca38:	83 ec 0c             	sub    esp,0xc
c001ca3b:	6a 1c                	push   0x1c
c001ca3d:	e8 cd cf fe ff       	call   c0009a0f <malloc>
c001ca42:	89 07                	mov    DWORD PTR [edi],eax
c001ca44:	89 c3                	mov    ebx,eax
c001ca46:	58                   	pop    eax
c001ca47:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca4b:	50                   	push   eax
c001ca4c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ca4f:	50                   	push   eax
c001ca50:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca54:	50                   	push   eax
c001ca55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca59:	50                   	push   eax
c001ca5a:	56                   	push   esi
c001ca5b:	e8 1f ff ff ff       	call   c001c97f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ca60:	83 c4 20             	add    esp,0x20
c001ca63:	84 c0                	test   al,al
c001ca65:	74 07                	je     c001ca6e <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001ca67:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ca6c:	74 0b                	je     c001ca79 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001ca6e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ca72:	b8 01 00 00 00       	mov    eax,0x1
c001ca77:	eb 3b                	jmp    c001cab4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ca79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca7d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ca81:	89 03                	mov    DWORD PTR [ebx],eax
c001ca83:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ca8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca8e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ca95:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca9c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca9f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001caa6:	8a 06                	mov    al,BYTE PTR [esi]
c001caa8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001caab:	31 c0                	xor    eax,eax
c001caad:	eb 05                	jmp    c001cab4 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001caaf:	b8 04 00 00 00       	mov    eax,0x4
c001cab4:	83 c4 10             	add    esp,0x10
c001cab7:	5b                   	pop    ebx
c001cab8:	5e                   	pop    esi
c001cab9:	5f                   	pop    edi
c001caba:	c3                   	ret    
c001cabb:	90                   	nop

c001cabc <ISO9660::exists(char const*)>:
c001cabc:	83 ec 28             	sub    esp,0x28
c001cabf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cac3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001cac7:	52                   	push   edx
c001cac8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001cacb:	52                   	push   edx
c001cacc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cad0:	52                   	push   edx
c001cad1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cad5:	52                   	push   edx
c001cad6:	50                   	push   eax
c001cad7:	e8 a3 fe ff ff       	call   c001c97f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cadc:	83 c4 3c             	add    esp,0x3c
c001cadf:	c3                   	ret    

c001cae0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cae0:	56                   	push   esi
c001cae1:	53                   	push   ebx
c001cae2:	83 ec 14             	sub    esp,0x14
c001cae5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cae9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001caed:	85 db                	test   ebx,ebx
c001caef:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001caf3:	0f 94 c2             	sete   dl
c001caf6:	85 f6                	test   esi,esi
c001caf8:	0f 94 c0             	sete   al
c001cafb:	08 c2                	or     dl,al
c001cafd:	75 68                	jne    c001cb67 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001caff:	85 c9                	test   ecx,ecx
c001cb01:	74 64                	je     c001cb67 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cb03:	83 ec 0c             	sub    esp,0xc
c001cb06:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cb09:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb0d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cb13:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb1a:	50                   	push   eax
c001cb1b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001cb1e:	50                   	push   eax
c001cb1f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb23:	50                   	push   eax
c001cb24:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb28:	50                   	push   eax
c001cb29:	51                   	push   ecx
c001cb2a:	e8 50 fe ff ff       	call   c001c97f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cb2f:	83 c4 20             	add    esp,0x20
c001cb32:	ba 01 00 00 00       	mov    edx,0x1
c001cb37:	84 c0                	test   al,al
c001cb39:	74 31                	je     c001cb6c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb3f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb46:	89 03                	mov    DWORD PTR [ebx],eax
c001cb48:	ba 00 00 00 00       	mov    edx,0x0
c001cb4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb51:	85 c0                	test   eax,eax
c001cb53:	0f 95 06             	setne  BYTE PTR [esi]
c001cb56:	74 14                	je     c001cb6c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb58:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cb5e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb65:	eb 05                	jmp    c001cb6c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cb67:	ba 04 00 00 00       	mov    edx,0x4
c001cb6c:	83 c4 14             	add    esp,0x14
c001cb6f:	89 d0                	mov    eax,edx
c001cb71:	5b                   	pop    ebx
c001cb72:	5e                   	pop    esi
c001cb73:	c3                   	ret    

c001cb74 <ISO9660::openDir(char const*, void**)>:
c001cb74:	57                   	push   edi
c001cb75:	56                   	push   esi
c001cb76:	53                   	push   ebx
c001cb77:	83 ec 10             	sub    esp,0x10
c001cb7a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb7e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cb82:	85 ff                	test   edi,edi
c001cb84:	74 7b                	je     c001cc01 <ISO9660::openDir(char const*, void**)+0x8d>
c001cb86:	85 f6                	test   esi,esi
c001cb88:	74 77                	je     c001cc01 <ISO9660::openDir(char const*, void**)+0x8d>
c001cb8a:	83 ec 0c             	sub    esp,0xc
c001cb8d:	6a 1c                	push   0x1c
c001cb8f:	e8 7b ce fe ff       	call   c0009a0f <malloc>
c001cb94:	89 07                	mov    DWORD PTR [edi],eax
c001cb96:	89 c3                	mov    ebx,eax
c001cb98:	58                   	pop    eax
c001cb99:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb9d:	50                   	push   eax
c001cb9e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cba1:	50                   	push   eax
c001cba2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cba6:	50                   	push   eax
c001cba7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cbab:	50                   	push   eax
c001cbac:	56                   	push   esi
c001cbad:	e8 cd fd ff ff       	call   c001c97f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cbb2:	83 c4 20             	add    esp,0x20
c001cbb5:	84 c0                	test   al,al
c001cbb7:	74 07                	je     c001cbc0 <ISO9660::openDir(char const*, void**)+0x4c>
c001cbb9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cbbe:	75 0b                	jne    c001cbcb <ISO9660::openDir(char const*, void**)+0x57>
c001cbc0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cbc4:	b8 01 00 00 00       	mov    eax,0x1
c001cbc9:	eb 3b                	jmp    c001cc06 <ISO9660::openDir(char const*, void**)+0x92>
c001cbcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbcf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cbd3:	89 03                	mov    DWORD PTR [ebx],eax
c001cbd5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cbdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbe0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cbe7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cbee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cbf1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cbf8:	8a 06                	mov    al,BYTE PTR [esi]
c001cbfa:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cbfd:	31 c0                	xor    eax,eax
c001cbff:	eb 05                	jmp    c001cc06 <ISO9660::openDir(char const*, void**)+0x92>
c001cc01:	b8 04 00 00 00       	mov    eax,0x4
c001cc06:	83 c4 10             	add    esp,0x10
c001cc09:	5b                   	pop    ebx
c001cc0a:	5e                   	pop    esi
c001cc0b:	5f                   	pop    edi
c001cc0c:	c3                   	ret    
c001cc0d:	90                   	nop

c001cc0e <ISO9660::ISO9660()>:
c001cc0e:	83 ec 0c             	sub    esp,0xc
c001cc11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc15:	83 ec 0c             	sub    esp,0xc
c001cc18:	50                   	push   eax
c001cc19:	e8 f8 03 ff ff       	call   c000d016 <Filesystem::Filesystem()>
c001cc1e:	83 c4 10             	add    esp,0x10
c001cc21:	ba f8 64 02 c0       	mov    edx,0xc00264f8
c001cc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc2a:	89 10                	mov    DWORD PTR [eax],edx
c001cc2c:	90                   	nop
c001cc2d:	83 c4 0c             	add    esp,0xc
c001cc30:	c3                   	ret    
c001cc31:	90                   	nop

c001cc32 <SoundCard::beginPlayback()>:
c001cc32:	c7 44 24 04 58 65 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026558
c001cc3a:	e9 88 7d ff ff       	jmp    c00149c7 <Krnl::panic(char const*)>
c001cc3f:	90                   	nop

c001cc40 <SoundCard::stopPlayback()>:
c001cc40:	c7 44 24 04 8c 65 02 c0 	mov    DWORD PTR [esp+0x4],0xc002658c
c001cc48:	e9 7a 7d ff ff       	jmp    c00149c7 <Krnl::panic(char const*)>
c001cc4d:	90                   	nop

c001cc4e <SoundCard::SoundCard(char const*)>:
c001cc4e:	83 ec 1c             	sub    esp,0x1c
c001cc51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc55:	83 ec 08             	sub    esp,0x8
c001cc58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc5c:	50                   	push   eax
c001cc5d:	e8 e0 17 ff ff       	call   c000e442 <Device::Device(char const*)>
c001cc62:	83 c4 10             	add    esp,0x10
c001cc65:	ba 24 66 02 c0       	mov    edx,0xc0026624
c001cc6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc6e:	89 10                	mov    DWORD PTR [eax],edx
c001cc70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc74:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cc7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc7f:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cc89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc8d:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cc97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc9b:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cca9:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ccb3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ccbb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ccc0:	7f 19                	jg     c001ccdb <SoundCard::SoundCard(char const*)+0x8d>
c001ccc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccc6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ccca:	83 c2 54             	add    edx,0x54
c001cccd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ccd5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ccd9:	eb e0                	jmp    c001ccbb <SoundCard::SoundCard(char const*)+0x6d>
c001ccdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ccdf:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cce6:	90                   	nop
c001cce7:	83 c4 1c             	add    esp,0x1c
c001ccea:	c3                   	ret    
c001cceb:	90                   	nop

c001ccec <SoundCard::~SoundCard()>:
c001ccec:	83 ec 0c             	sub    esp,0xc
c001ccef:	ba 24 66 02 c0       	mov    edx,0xc0026624
c001ccf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf8:	89 10                	mov    DWORD PTR [eax],edx
c001ccfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccfe:	83 ec 0c             	sub    esp,0xc
c001cd01:	50                   	push   eax
c001cd02:	e8 05 14 ff ff       	call   c000e10c <Device::~Device()>
c001cd07:	83 c4 10             	add    esp,0x10
c001cd0a:	90                   	nop
c001cd0b:	83 c4 0c             	add    esp,0xc
c001cd0e:	c3                   	ret    
c001cd0f:	90                   	nop

c001cd10 <SoundCard::~SoundCard()>:
c001cd10:	83 ec 0c             	sub    esp,0xc
c001cd13:	83 ec 0c             	sub    esp,0xc
c001cd16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd1a:	e8 cd ff ff ff       	call   c001ccec <SoundCard::~SoundCard()>
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	83 ec 08             	sub    esp,0x8
c001cd25:	68 e8 01 00 00       	push   0x1e8
c001cd2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd2e:	e8 eb fe fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c001cd33:	83 c4 10             	add    esp,0x10
c001cd36:	83 c4 0c             	add    esp,0xc
c001cd39:	c3                   	ret    

c001cd3a <SoundCard::configureRates(int, int, int)>:
c001cd3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cd3e:	31 c0                	xor    eax,eax
c001cd40:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cd47:	75 20                	jne    c001cd69 <SoundCard::configureRates(int, int, int)+0x2f>
c001cd49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd4d:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cd53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cd57:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cd5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd61:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cd67:	b0 01                	mov    al,0x1
c001cd69:	c3                   	ret    

c001cd6a <SoundCard::getSamples16(int, short*)>:
c001cd6a:	55                   	push   ebp
c001cd6b:	57                   	push   edi
c001cd6c:	31 ff                	xor    edi,edi
c001cd6e:	56                   	push   esi
c001cd6f:	53                   	push   ebx
c001cd70:	31 db                	xor    ebx,ebx
c001cd72:	83 ec 18             	sub    esp,0x18
c001cd75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cd79:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cd7d:	68 bf 65 02 c0       	push   0xc00265bf
c001cd82:	e8 78 ff fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cd87:	83 c4 0c             	add    esp,0xc
c001cd8a:	8d 04 36             	lea    eax,[esi+esi*1]
c001cd8d:	50                   	push   eax
c001cd8e:	6a 00                	push   0x0
c001cd90:	55                   	push   ebp
c001cd91:	e8 ee 38 fe ff       	call   c0000684 <memset>
c001cd96:	83 c4 10             	add    esp,0x10
c001cd99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd9d:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cda4:	85 c0                	test   eax,eax
c001cda6:	74 1b                	je     c001cdc3 <SoundCard::getSamples16(int, short*)+0x59>
c001cda8:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cdac:	75 15                	jne    c001cdc3 <SoundCard::getSamples16(int, short*)+0x59>
c001cdae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cdb2:	55                   	push   ebp
c001cdb3:	56                   	push   esi
c001cdb4:	50                   	push   eax
c001cdb5:	e8 5a 03 00 00       	call   c001d114 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cdba:	83 c4 10             	add    esp,0x10
c001cdbd:	39 c7                	cmp    edi,eax
c001cdbf:	7d 02                	jge    c001cdc3 <SoundCard::getSamples16(int, short*)+0x59>
c001cdc1:	89 c7                	mov    edi,eax
c001cdc3:	43                   	inc    ebx
c001cdc4:	83 fb 20             	cmp    ebx,0x20
c001cdc7:	75 d0                	jne    c001cd99 <SoundCard::getSamples16(int, short*)+0x2f>
c001cdc9:	83 c4 0c             	add    esp,0xc
c001cdcc:	89 f8                	mov    eax,edi
c001cdce:	5b                   	pop    ebx
c001cdcf:	5e                   	pop    esi
c001cdd0:	5f                   	pop    edi
c001cdd1:	5d                   	pop    ebp
c001cdd2:	c3                   	ret    
c001cdd3:	90                   	nop

c001cdd4 <SoundCard::getSamples32(int, int*)>:
c001cdd4:	55                   	push   ebp
c001cdd5:	57                   	push   edi
c001cdd6:	31 ff                	xor    edi,edi
c001cdd8:	56                   	push   esi
c001cdd9:	31 f6                	xor    esi,esi
c001cddb:	53                   	push   ebx
c001cddc:	83 ec 10             	sub    esp,0x10
c001cddf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cde3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cde7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cdeb:	c1 e0 02             	shl    eax,0x2
c001cdee:	50                   	push   eax
c001cdef:	6a 00                	push   0x0
c001cdf1:	55                   	push   ebp
c001cdf2:	e8 8d 38 fe ff       	call   c0000684 <memset>
c001cdf7:	83 c4 10             	add    esp,0x10
c001cdfa:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ce01:	85 c0                	test   eax,eax
c001ce03:	74 1b                	je     c001ce20 <SoundCard::getSamples32(int, int*)+0x4c>
c001ce05:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ce09:	75 15                	jne    c001ce20 <SoundCard::getSamples32(int, int*)+0x4c>
c001ce0b:	53                   	push   ebx
c001ce0c:	55                   	push   ebp
c001ce0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce11:	50                   	push   eax
c001ce12:	e8 f9 03 00 00       	call   c001d210 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ce17:	83 c4 10             	add    esp,0x10
c001ce1a:	39 c6                	cmp    esi,eax
c001ce1c:	7d 02                	jge    c001ce20 <SoundCard::getSamples32(int, int*)+0x4c>
c001ce1e:	89 c6                	mov    esi,eax
c001ce20:	47                   	inc    edi
c001ce21:	83 ff 20             	cmp    edi,0x20
c001ce24:	75 d4                	jne    c001cdfa <SoundCard::getSamples32(int, int*)+0x26>
c001ce26:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001ce2c:	85 f6                	test   esi,esi
c001ce2e:	75 0f                	jne    c001ce3f <SoundCard::getSamples32(int, int*)+0x6b>
c001ce30:	84 c0                	test   al,al
c001ce32:	74 1b                	je     c001ce4f <SoundCard::getSamples32(int, int*)+0x7b>
c001ce34:	83 ec 0c             	sub    esp,0xc
c001ce37:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce39:	53                   	push   ebx
c001ce3a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ce3d:	eb 0d                	jmp    c001ce4c <SoundCard::getSamples32(int, int*)+0x78>
c001ce3f:	84 c0                	test   al,al
c001ce41:	75 0c                	jne    c001ce4f <SoundCard::getSamples32(int, int*)+0x7b>
c001ce43:	83 ec 0c             	sub    esp,0xc
c001ce46:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce48:	53                   	push   ebx
c001ce49:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ce4c:	83 c4 10             	add    esp,0x10
c001ce4f:	83 c4 0c             	add    esp,0xc
c001ce52:	89 f0                	mov    eax,esi
c001ce54:	5b                   	pop    ebx
c001ce55:	5e                   	pop    esi
c001ce56:	5f                   	pop    edi
c001ce57:	5d                   	pop    ebp
c001ce58:	c3                   	ret    
c001ce59:	90                   	nop

c001ce5a <SoundCard::addChannel(SoundPort*)>:
c001ce5a:	56                   	push   esi
c001ce5b:	53                   	push   ebx
c001ce5c:	53                   	push   ebx
c001ce5d:	31 db                	xor    ebx,ebx
c001ce5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce63:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001ce6b:	74 27                	je     c001ce94 <SoundCard::addChannel(SoundPort*)+0x3a>
c001ce6d:	43                   	inc    ebx
c001ce6e:	83 fb 20             	cmp    ebx,0x20
c001ce71:	75 f0                	jne    c001ce63 <SoundCard::addChannel(SoundPort*)+0x9>
c001ce73:	83 ec 0c             	sub    esp,0xc
c001ce76:	83 cb ff             	or     ebx,0xffffffff
c001ce79:	68 e5 65 02 c0       	push   0xc00265e5
c001ce7e:	e8 7c fe fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001ce83:	c7 04 24 de 65 02 c0 	mov    DWORD PTR [esp],0xc00265de
c001ce8a:	e8 38 7b ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001ce8f:	83 c4 10             	add    esp,0x10
c001ce92:	eb 1b                	jmp    c001ceaf <SoundCard::addChannel(SoundPort*)+0x55>
c001ce94:	51                   	push   ecx
c001ce95:	51                   	push   ecx
c001ce96:	53                   	push   ebx
c001ce97:	68 fd 65 02 c0       	push   0xc00265fd
c001ce9c:	e8 5e fe fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001cea1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cea5:	83 c4 10             	add    esp,0x10
c001cea8:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001ceaf:	89 d8                	mov    eax,ebx
c001ceb1:	5a                   	pop    edx
c001ceb2:	5b                   	pop    ebx
c001ceb3:	5e                   	pop    esi
c001ceb4:	c3                   	ret    
c001ceb5:	90                   	nop

c001ceb6 <SoundCard::removeChannel(int)>:
c001ceb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ceba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cebe:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cec9:	c3                   	ret    
c001ceca:	66 90                	xchg   ax,ax

c001cecc <SoundPort::SoundPort(int, int, int, int)>:
c001cecc:	83 ec 0c             	sub    esp,0xc
c001cecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ced3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ceda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cede:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ceea:	89 10                	mov    DWORD PTR [eax],edx
c001ceec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cef0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cef4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cefb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ceff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf02:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cf07:	75 13                	jne    c001cf1c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cf09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf0d:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf0f:	05 a0 0f 00 00       	add    eax,0xfa0
c001cf14:	01 c0                	add    eax,eax
c001cf16:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf1a:	66 90                	xchg   ax,ax
c001cf1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cf24:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cf27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cf32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf36:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cf39:	c1 e0 02             	shl    eax,0x2
c001cf3c:	83 ec 0c             	sub    esp,0xc
c001cf3f:	50                   	push   eax
c001cf40:	e8 ca ca fe ff       	call   c0009a0f <malloc>
c001cf45:	83 c4 10             	add    esp,0x10
c001cf48:	89 c2                	mov    edx,eax
c001cf4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cf51:	90                   	nop
c001cf52:	83 c4 0c             	add    esp,0xc
c001cf55:	c3                   	ret    
c001cf56:	66 90                	xchg   ax,ax

c001cf58 <SoundPort::~SoundPort()>:
c001cf58:	83 ec 0c             	sub    esp,0xc
c001cf5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cf62:	85 c0                	test   eax,eax
c001cf64:	74 1e                	je     c001cf84 <SoundPort::~SoundPort()+0x2c>
c001cf66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cf6d:	83 ec 0c             	sub    esp,0xc
c001cf70:	50                   	push   eax
c001cf71:	e8 a9 ca fe ff       	call   c0009a1f <free>
c001cf76:	83 c4 10             	add    esp,0x10
c001cf79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf7d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cf84:	90                   	nop
c001cf85:	83 c4 0c             	add    esp,0xc
c001cf88:	c3                   	ret    
c001cf89:	90                   	nop
c001cf8a:	66 90                	xchg   ax,ax

c001cf8c <SoundPort::unpause()>:
c001cf8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf90:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cf94:	c3                   	ret    
c001cf95:	90                   	nop
c001cf96:	66 90                	xchg   ax,ax

c001cf98 <SoundPort::pause()>:
c001cf98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf9c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cfa0:	c3                   	ret    
c001cfa1:	90                   	nop
c001cfa2:	66 90                	xchg   ax,ax

c001cfa4 <SoundPort::getBufferUsed()>:
c001cfa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfa8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001cfab:	c3                   	ret    

c001cfac <SoundPort::getBufferSize()>:
c001cfac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cfb0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cfb3:	c3                   	ret    

c001cfb4 <SoundPort::buffer16(short*, int)>:
c001cfb4:	55                   	push   ebp
c001cfb5:	57                   	push   edi
c001cfb6:	56                   	push   esi
c001cfb7:	53                   	push   ebx
c001cfb8:	83 ec 1c             	sub    esp,0x1c
c001cfbb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cfbf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cfc3:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cfc6:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cfc9:	0f 84 85 00 00 00    	je     c001d054 <SoundPort::buffer16(short*, int)+0xa0>
c001cfcf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001cfd3:	85 c9                	test   ecx,ecx
c001cfd5:	7e 7d                	jle    c001d054 <SoundPort::buffer16(short*, int)+0xa0>
c001cfd7:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001cfdb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cfde:	c1 e1 0f             	shl    ecx,0xf
c001cfe1:	8d 70 01             	lea    esi,[eax+0x1]
c001cfe4:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cfe7:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001cfea:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cfed:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cff0:	74 6e                	je     c001d060 <SoundPort::buffer16(short*, int)+0xac>
c001cff2:	31 f6                	xor    esi,esi
c001cff4:	eb 22                	jmp    c001d018 <SoundPort::buffer16(short*, int)+0x64>
c001cff6:	66 90                	xchg   ax,ax
c001cff8:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001cffd:	8d 79 01             	lea    edi,[ecx+0x1]
c001d000:	c1 e3 0f             	shl    ebx,0xf
c001d003:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d006:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d009:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d00c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d00f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d012:	74 1c                	je     c001d030 <SoundPort::buffer16(short*, int)+0x7c>
c001d014:	89 c6                	mov    esi,eax
c001d016:	66 90                	xchg   ax,ax
c001d018:	8d 46 01             	lea    eax,[esi+0x1]
c001d01b:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d01f:	75 d7                	jne    c001cff8 <SoundPort::buffer16(short*, int)+0x44>
c001d021:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d025:	83 c4 1c             	add    esp,0x1c
c001d028:	5b                   	pop    ebx
c001d029:	5e                   	pop    esi
c001d02a:	5f                   	pop    edi
c001d02b:	5d                   	pop    ebp
c001d02c:	c3                   	ret    
c001d02d:	8d 76 00             	lea    esi,[esi+0x0]
c001d030:	8d 46 02             	lea    eax,[esi+0x2]
c001d033:	90                   	nop
c001d034:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d038:	83 ec 0c             	sub    esp,0xc
c001d03b:	68 50 66 02 c0       	push   0xc0026650
c001d040:	e8 ba fc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d045:	83 c4 10             	add    esp,0x10
c001d048:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d04c:	83 c4 1c             	add    esp,0x1c
c001d04f:	5b                   	pop    ebx
c001d050:	5e                   	pop    esi
c001d051:	5f                   	pop    edi
c001d052:	5d                   	pop    ebp
c001d053:	c3                   	ret    
c001d054:	83 c4 1c             	add    esp,0x1c
c001d057:	31 c0                	xor    eax,eax
c001d059:	5b                   	pop    ebx
c001d05a:	5e                   	pop    esi
c001d05b:	5f                   	pop    edi
c001d05c:	5d                   	pop    ebp
c001d05d:	c3                   	ret    
c001d05e:	66 90                	xchg   ax,ax
c001d060:	b8 01 00 00 00       	mov    eax,0x1
c001d065:	eb cd                	jmp    c001d034 <SoundPort::buffer16(short*, int)+0x80>
c001d067:	90                   	nop

c001d068 <SoundPort::buffer32(int*, int)>:
c001d068:	55                   	push   ebp
c001d069:	57                   	push   edi
c001d06a:	56                   	push   esi
c001d06b:	53                   	push   ebx
c001d06c:	83 ec 1c             	sub    esp,0x1c
c001d06f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d073:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d077:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d07a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d07e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d082:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d085:	74 79                	je     c001d100 <SoundPort::buffer32(int*, int)+0x98>
c001d087:	85 c0                	test   eax,eax
c001d089:	7e 75                	jle    c001d100 <SoundPort::buffer32(int*, int)+0x98>
c001d08b:	8d 71 01             	lea    esi,[ecx+0x1]
c001d08e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d091:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d094:	8b 37                	mov    esi,DWORD PTR [edi]
c001d096:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d099:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d09c:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d09f:	74 6b                	je     c001d10c <SoundPort::buffer32(int*, int)+0xa4>
c001d0a1:	31 f6                	xor    esi,esi
c001d0a3:	eb 1f                	jmp    c001d0c4 <SoundPort::buffer32(int*, int)+0x5c>
c001d0a5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0a8:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d0ab:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d0ae:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d0b1:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d0b4:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d0b8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d0bb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d0be:	74 1c                	je     c001d0dc <SoundPort::buffer32(int*, int)+0x74>
c001d0c0:	89 de                	mov    esi,ebx
c001d0c2:	66 90                	xchg   ax,ax
c001d0c4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d0c7:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d0cb:	75 db                	jne    c001d0a8 <SoundPort::buffer32(int*, int)+0x40>
c001d0cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0d1:	83 c4 1c             	add    esp,0x1c
c001d0d4:	5b                   	pop    ebx
c001d0d5:	5e                   	pop    esi
c001d0d6:	5f                   	pop    edi
c001d0d7:	5d                   	pop    ebp
c001d0d8:	c3                   	ret    
c001d0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001d0dc:	8d 46 02             	lea    eax,[esi+0x2]
c001d0df:	90                   	nop
c001d0e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d0e4:	83 ec 0c             	sub    esp,0xc
c001d0e7:	68 6b 66 02 c0       	push   0xc002666b
c001d0ec:	e8 0e fc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d0f1:	83 c4 10             	add    esp,0x10
c001d0f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d0f8:	83 c4 1c             	add    esp,0x1c
c001d0fb:	5b                   	pop    ebx
c001d0fc:	5e                   	pop    esi
c001d0fd:	5f                   	pop    edi
c001d0fe:	5d                   	pop    ebp
c001d0ff:	c3                   	ret    
c001d100:	83 c4 1c             	add    esp,0x1c
c001d103:	31 c0                	xor    eax,eax
c001d105:	5b                   	pop    ebx
c001d106:	5e                   	pop    esi
c001d107:	5f                   	pop    edi
c001d108:	5d                   	pop    ebp
c001d109:	c3                   	ret    
c001d10a:	66 90                	xchg   ax,ax
c001d10c:	b8 01 00 00 00       	mov    eax,0x1
c001d111:	eb cd                	jmp    c001d0e0 <SoundPort::buffer32(int*, int)+0x78>
c001d113:	90                   	nop

c001d114 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d114:	57                   	push   edi
c001d115:	56                   	push   esi
c001d116:	53                   	push   ebx
c001d117:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d11b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d11f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d125:	39 03                	cmp    DWORD PTR [ebx],eax
c001d127:	74 13                	je     c001d13c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d129:	83 ec 0c             	sub    esp,0xc
c001d12c:	68 c0 66 02 c0       	push   0xc00266c0
c001d131:	e8 91 78 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001d136:	83 c4 10             	add    esp,0x10
c001d139:	8d 76 00             	lea    esi,[esi+0x0]
c001d13c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d142:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d145:	74 11                	je     c001d158 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d147:	83 ec 0c             	sub    esp,0xc
c001d14a:	68 86 66 02 c0       	push   0xc0026686
c001d14f:	e8 73 78 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001d154:	83 c4 10             	add    esp,0x10
c001d157:	90                   	nop
c001d158:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d15e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d161:	74 11                	je     c001d174 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d163:	83 ec 0c             	sub    esp,0xc
c001d166:	68 86 66 02 c0       	push   0xc0026686
c001d16b:	e8 57 78 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001d170:	83 c4 10             	add    esp,0x10
c001d173:	90                   	nop
c001d174:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d177:	89 c6                	mov    esi,eax
c001d179:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d17d:	7e 05                	jle    c001d184 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d17f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d183:	90                   	nop
c001d184:	85 f6                	test   esi,esi
c001d186:	7e 30                	jle    c001d1b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d188:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d18c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d18f:	31 c9                	xor    ecx,ecx
c001d191:	01 d7                	add    edi,edx
c001d193:	90                   	nop
c001d194:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d197:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d19a:	85 c0                	test   eax,eax
c001d19c:	79 06                	jns    c001d1a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d19e:	05 ff 7f 00 00       	add    eax,0x7fff
c001d1a3:	90                   	nop
c001d1a4:	c1 f8 0f             	sar    eax,0xf
c001d1a7:	83 c1 04             	add    ecx,0x4
c001d1aa:	66 01 02             	add    WORD PTR [edx],ax
c001d1ad:	83 c2 02             	add    edx,0x2
c001d1b0:	39 d7                	cmp    edi,edx
c001d1b2:	75 e0                	jne    c001d194 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d1b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1b7:	90                   	nop
c001d1b8:	56                   	push   esi
c001d1b9:	89 c2                	mov    edx,eax
c001d1bb:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d1c2:	29 f2                	sub    edx,esi
c001d1c4:	52                   	push   edx
c001d1c5:	50                   	push   eax
c001d1c6:	68 e0 66 02 c0       	push   0xc00266e0
c001d1cb:	e8 2f fb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d1d0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d1d3:	50                   	push   eax
c001d1d4:	01 f8                	add    eax,edi
c001d1d6:	50                   	push   eax
c001d1d7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1da:	29 f0                	sub    eax,esi
c001d1dc:	c1 e0 02             	shl    eax,0x2
c001d1df:	50                   	push   eax
c001d1e0:	68 10 67 02 c0       	push   0xc0026710
c001d1e5:	e8 15 fb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001d1ea:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d1ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d1f0:	83 c4 1c             	add    esp,0x1c
c001d1f3:	01 d7                	add    edi,edx
c001d1f5:	29 f0                	sub    eax,esi
c001d1f7:	c1 e0 02             	shl    eax,0x2
c001d1fa:	50                   	push   eax
c001d1fb:	57                   	push   edi
c001d1fc:	52                   	push   edx
c001d1fd:	e8 ba 33 fe ff       	call   c00005bc <memmove>
c001d202:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d205:	83 c4 10             	add    esp,0x10
c001d208:	89 f0                	mov    eax,esi
c001d20a:	5b                   	pop    ebx
c001d20b:	5e                   	pop    esi
c001d20c:	5f                   	pop    edi
c001d20d:	c3                   	ret    
c001d20e:	66 90                	xchg   ax,ax

c001d210 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d210:	57                   	push   edi
c001d211:	56                   	push   esi
c001d212:	53                   	push   ebx
c001d213:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d217:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d21b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d21f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d225:	39 06                	cmp    DWORD PTR [esi],eax
c001d227:	74 13                	je     c001d23c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d229:	83 ec 0c             	sub    esp,0xc
c001d22c:	68 34 67 02 c0       	push   0xc0026734
c001d231:	e8 91 77 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001d236:	83 c4 10             	add    esp,0x10
c001d239:	8d 76 00             	lea    esi,[esi+0x0]
c001d23c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d242:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d245:	74 11                	je     c001d258 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d247:	83 ec 0c             	sub    esp,0xc
c001d24a:	68 a2 66 02 c0       	push   0xc00266a2
c001d24f:	e8 73 77 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001d254:	83 c4 10             	add    esp,0x10
c001d257:	90                   	nop
c001d258:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d25e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d261:	74 11                	je     c001d274 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d263:	83 ec 0c             	sub    esp,0xc
c001d266:	68 a2 66 02 c0       	push   0xc00266a2
c001d26b:	e8 57 77 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001d270:	83 c4 10             	add    esp,0x10
c001d273:	90                   	nop
c001d274:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d277:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d27b:	7e 07                	jle    c001d284 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d27d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d281:	8d 76 00             	lea    esi,[esi+0x0]
c001d284:	85 ff                	test   edi,edi
c001d286:	7e 1c                	jle    c001d2a4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d288:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d28f:	31 c0                	xor    eax,eax
c001d291:	8d 76 00             	lea    esi,[esi+0x0]
c001d294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d297:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d29a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d29d:	83 c0 04             	add    eax,0x4
c001d2a0:	39 c1                	cmp    ecx,eax
c001d2a2:	75 f0                	jne    c001d294 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d2a4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d2a7:	50                   	push   eax
c001d2a8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d2ab:	29 f8                	sub    eax,edi
c001d2ad:	c1 e0 02             	shl    eax,0x2
c001d2b0:	50                   	push   eax
c001d2b1:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d2b4:	50                   	push   eax
c001d2b5:	52                   	push   edx
c001d2b6:	e8 01 33 fe ff       	call   c00005bc <memmove>
c001d2bb:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d2be:	83 c4 10             	add    esp,0x10
c001d2c1:	89 f8                	mov    eax,edi
c001d2c3:	5b                   	pop    ebx
c001d2c4:	5e                   	pop    esi
c001d2c5:	5f                   	pop    edi
c001d2c6:	c3                   	ret    
c001d2c7:	90                   	nop

c001d2c8 <PCI::open(int, int, void*)>:
c001d2c8:	83 ec 18             	sub    esp,0x18
c001d2cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d2d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d2d9:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2db:	50                   	push   eax
c001d2dc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d2df:	31 c0                	xor    eax,eax
c001d2e1:	83 c4 1c             	add    esp,0x1c
c001d2e4:	c3                   	ret    
c001d2e5:	90                   	nop

c001d2e6 <PCI::close(int, int, void*)>:
c001d2e6:	31 c0                	xor    eax,eax
c001d2e8:	c3                   	ret    
c001d2e9:	90                   	nop

c001d2ea <PCI::PCI()>:
c001d2ea:	83 ec 0c             	sub    esp,0xc
c001d2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2f1:	83 ec 08             	sub    esp,0x8
c001d2f4:	68 53 67 02 c0       	push   0xc0026753
c001d2f9:	50                   	push   eax
c001d2fa:	e8 a5 07 ff ff       	call   c000daa4 <Bus::Bus(char const*)>
c001d2ff:	83 c4 10             	add    esp,0x10
c001d302:	ba 28 69 02 c0       	mov    edx,0xc0026928
c001d307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d30b:	89 10                	mov    DWORD PTR [eax],edx
c001d30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d311:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d31f:	a3 20 a0 02 c0       	mov    ds:0xc002a020,eax
c001d324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d328:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d32e:	0f b6 d0             	movzx  edx,al
c001d331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d335:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d346:	0f b6 d0             	movzx  edx,al
c001d349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d34d:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d356:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d35c:	8d 50 01             	lea    edx,[eax+0x1]
c001d35f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d363:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d369:	0f b6 d0             	movzx  edx,al
c001d36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d370:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d374:	83 c9 c0             	or     ecx,0xffffffc0
c001d377:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d37b:	90                   	nop
c001d37c:	83 c4 0c             	add    esp,0xc
c001d37f:	c3                   	ret    

c001d380 <PCI::readBAR8(unsigned int, int)>:
c001d380:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d388:	f6 c2 01             	test   dl,0x1
c001d38b:	74 07                	je     c001d394 <PCI::readBAR8(unsigned int, int)+0x14>
c001d38d:	83 e2 fc             	and    edx,0xfffffffc
c001d390:	01 c2                	add    edx,eax
c001d392:	ec                   	in     al,dx
c001d393:	c3                   	ret    
c001d394:	83 e2 f0             	and    edx,0xfffffff0
c001d397:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d39a:	c3                   	ret    
c001d39b:	90                   	nop

c001d39c <PCI::readBAR16(unsigned int, int)>:
c001d39c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3a4:	f6 c2 01             	test   dl,0x1
c001d3a7:	74 08                	je     c001d3b1 <PCI::readBAR16(unsigned int, int)+0x15>
c001d3a9:	83 e2 fc             	and    edx,0xfffffffc
c001d3ac:	01 c2                	add    edx,eax
c001d3ae:	66 ed                	in     ax,dx
c001d3b0:	c3                   	ret    
c001d3b1:	83 e2 f0             	and    edx,0xfffffff0
c001d3b4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d3b8:	c3                   	ret    
c001d3b9:	90                   	nop

c001d3ba <PCI::readBAR32(unsigned int, int)>:
c001d3ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3c2:	f6 c2 01             	test   dl,0x1
c001d3c5:	74 07                	je     c001d3ce <PCI::readBAR32(unsigned int, int)+0x14>
c001d3c7:	83 e2 fc             	and    edx,0xfffffffc
c001d3ca:	01 c2                	add    edx,eax
c001d3cc:	ed                   	in     eax,dx
c001d3cd:	c3                   	ret    
c001d3ce:	83 e2 f0             	and    edx,0xfffffff0
c001d3d1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d3d4:	c3                   	ret    
c001d3d5:	90                   	nop

c001d3d6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d3d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d3e2:	f6 c2 01             	test   dl,0x1
c001d3e5:	74 07                	je     c001d3ee <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d3e7:	83 e2 fc             	and    edx,0xfffffffc
c001d3ea:	01 ca                	add    edx,ecx
c001d3ec:	ee                   	out    dx,al
c001d3ed:	c3                   	ret    
c001d3ee:	83 e2 f0             	and    edx,0xfffffff0
c001d3f1:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d3f4:	c3                   	ret    
c001d3f5:	90                   	nop

c001d3f6 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d3f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d3fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d402:	f6 c2 01             	test   dl,0x1
c001d405:	74 08                	je     c001d40f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d407:	83 e2 fc             	and    edx,0xfffffffc
c001d40a:	01 ca                	add    edx,ecx
c001d40c:	66 ef                	out    dx,ax
c001d40e:	c3                   	ret    
c001d40f:	83 e2 f0             	and    edx,0xfffffff0
c001d412:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d416:	c3                   	ret    
c001d417:	90                   	nop

c001d418 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d418:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d41c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d420:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d424:	f6 c2 01             	test   dl,0x1
c001d427:	74 07                	je     c001d430 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d429:	83 e2 fc             	and    edx,0xfffffffc
c001d42c:	01 ca                	add    edx,ecx
c001d42e:	ef                   	out    dx,eax
c001d42f:	c3                   	ret    
c001d430:	83 e2 f0             	and    edx,0xfffffff0
c001d433:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d436:	c3                   	ret    
c001d437:	90                   	nop

c001d438 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d438:	55                   	push   ebp
c001d439:	57                   	push   edi
c001d43a:	56                   	push   esi
c001d43b:	53                   	push   ebx
c001d43c:	83 ec 0c             	sub    esp,0xc
c001d43f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d443:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d447:	89 f0                	mov    eax,esi
c001d449:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d44d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d451:	3c 07                	cmp    al,0x7
c001d453:	76 10                	jbe    c001d465 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d455:	83 ec 0c             	sub    esp,0xc
c001d458:	68 5b 67 02 c0       	push   0xc002675b
c001d45d:	e8 65 75 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001d462:	83 c4 10             	add    esp,0x10
c001d465:	80 fb 0f             	cmp    bl,0xf
c001d468:	76 10                	jbe    c001d47a <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d46a:	83 ec 0c             	sub    esp,0xc
c001d46d:	68 8b 67 02 c0       	push   0xc002678b
c001d472:	e8 50 75 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001d477:	83 c4 10             	add    esp,0x10
c001d47a:	8d 04 36             	lea    eax,[esi+esi*1]
c001d47d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d482:	83 c8 f0             	or     eax,0xfffffff0
c001d485:	ee                   	out    dx,al
c001d486:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d48b:	89 e8                	mov    eax,ebp
c001d48d:	ee                   	out    dx,al
c001d48e:	83 c4 0c             	add    esp,0xc
c001d491:	89 d8                	mov    eax,ebx
c001d493:	66 81 e7 fc 00       	and    di,0xfc
c001d498:	5b                   	pop    ebx
c001d499:	c1 e0 08             	shl    eax,0x8
c001d49c:	5e                   	pop    esi
c001d49d:	09 f8                	or     eax,edi
c001d49f:	5f                   	pop    edi
c001d4a0:	66 0d 00 c0          	or     ax,0xc000
c001d4a4:	5d                   	pop    ebp
c001d4a5:	c3                   	ret    

c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d4a6:	57                   	push   edi
c001d4a7:	56                   	push   esi
c001d4a8:	53                   	push   ebx
c001d4a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4b1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d4b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d4bb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d4bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d4c3:	83 ff 01             	cmp    edi,0x1
c001d4c6:	75 3e                	jne    c001d506 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d4c8:	89 de                	mov    esi,ebx
c001d4ca:	0f b6 c0             	movzx  eax,al
c001d4cd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d4d3:	c1 e0 10             	shl    eax,0x10
c001d4d6:	0f b6 c9             	movzx  ecx,cl
c001d4d9:	09 f0                	or     eax,esi
c001d4db:	c1 e1 08             	shl    ecx,0x8
c001d4de:	0f b6 d2             	movzx  edx,dl
c001d4e1:	09 c8                	or     eax,ecx
c001d4e3:	c1 e2 0b             	shl    edx,0xb
c001d4e6:	09 d0                	or     eax,edx
c001d4e8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d4ed:	0d 00 00 00 80       	or     eax,0x80000000
c001d4f2:	ef                   	out    dx,eax
c001d4f3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d4f8:	ed                   	in     eax,dx
c001d4f9:	83 e3 02             	and    ebx,0x2
c001d4fc:	0f b6 cb             	movzx  ecx,bl
c001d4ff:	c1 e1 03             	shl    ecx,0x3
c001d502:	d3 e8                	shr    eax,cl
c001d504:	eb 43                	jmp    c001d549 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d506:	83 ff 02             	cmp    edi,0x2
c001d509:	75 2c                	jne    c001d537 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d50b:	83 ec 0c             	sub    esp,0xc
c001d50e:	0f b6 c9             	movzx  ecx,cl
c001d511:	0f b6 d2             	movzx  edx,dl
c001d514:	0f b6 fb             	movzx  edi,bl
c001d517:	0f b6 c0             	movzx  eax,al
c001d51a:	57                   	push   edi
c001d51b:	51                   	push   ecx
c001d51c:	52                   	push   edx
c001d51d:	50                   	push   eax
c001d51e:	56                   	push   esi
c001d51f:	e8 14 ff ff ff       	call   c001d438 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d524:	89 c2                	mov    edx,eax
c001d526:	ed                   	in     eax,dx
c001d527:	83 e3 02             	and    ebx,0x2
c001d52a:	83 c4 20             	add    esp,0x20
c001d52d:	0f b6 cb             	movzx  ecx,bl
c001d530:	c1 e1 03             	shl    ecx,0x3
c001d533:	d3 e8                	shr    eax,cl
c001d535:	eb 12                	jmp    c001d549 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d537:	83 ec 0c             	sub    esp,0xc
c001d53a:	68 bb 67 02 c0       	push   0xc00267bb
c001d53f:	e8 83 74 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001d544:	83 c4 10             	add    esp,0x10
c001d547:	31 c0                	xor    eax,eax
c001d549:	5b                   	pop    ebx
c001d54a:	5e                   	pop    esi
c001d54b:	5f                   	pop    edi
c001d54c:	c3                   	ret    
c001d54d:	90                   	nop

c001d54e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d54e:	83 ec 18             	sub    esp,0x18
c001d551:	6a 00                	push   0x0
c001d553:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d558:	50                   	push   eax
c001d559:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d55e:	50                   	push   eax
c001d55f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d564:	50                   	push   eax
c001d565:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d569:	e8 38 ff ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d56e:	83 c4 2c             	add    esp,0x2c
c001d571:	c3                   	ret    

c001d572 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d572:	83 ec 18             	sub    esp,0x18
c001d575:	6a 0e                	push   0xe
c001d577:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d57c:	50                   	push   eax
c001d57d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d582:	50                   	push   eax
c001d583:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d588:	50                   	push   eax
c001d589:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d58d:	e8 14 ff ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d592:	83 c4 2c             	add    esp,0x2c
c001d595:	0f b6 c0             	movzx  eax,al
c001d598:	c3                   	ret    
c001d599:	90                   	nop

c001d59a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d59a:	55                   	push   ebp
c001d59b:	57                   	push   edi
c001d59c:	56                   	push   esi
c001d59d:	53                   	push   ebx
c001d59e:	83 ec 18             	sub    esp,0x18
c001d5a1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d5a6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d5ab:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d5b0:	6a 0a                	push   0xa
c001d5b2:	56                   	push   esi
c001d5b3:	55                   	push   ebp
c001d5b4:	57                   	push   edi
c001d5b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5b9:	e8 e8 fe ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5be:	83 c4 14             	add    esp,0x14
c001d5c1:	89 c3                	mov    ebx,eax
c001d5c3:	6a 0a                	push   0xa
c001d5c5:	0f b6 db             	movzx  ebx,bl
c001d5c8:	56                   	push   esi
c001d5c9:	55                   	push   ebp
c001d5ca:	57                   	push   edi
c001d5cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5cf:	e8 d2 fe ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5d4:	83 c4 2c             	add    esp,0x2c
c001d5d7:	25 00 ff 00 00       	and    eax,0xff00
c001d5dc:	09 d8                	or     eax,ebx
c001d5de:	5b                   	pop    ebx
c001d5df:	5e                   	pop    esi
c001d5e0:	5f                   	pop    edi
c001d5e1:	5d                   	pop    ebp
c001d5e2:	c3                   	ret    
c001d5e3:	90                   	nop

c001d5e4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d5e4:	83 ec 18             	sub    esp,0x18
c001d5e7:	6a 08                	push   0x8
c001d5e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5ee:	50                   	push   eax
c001d5ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5f4:	50                   	push   eax
c001d5f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5fa:	50                   	push   eax
c001d5fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5ff:	e8 a2 fe ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d604:	83 c4 2c             	add    esp,0x2c
c001d607:	0f b6 c4             	movzx  eax,ah
c001d60a:	c3                   	ret    
c001d60b:	90                   	nop

c001d60c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d60c:	83 ec 18             	sub    esp,0x18
c001d60f:	6a 08                	push   0x8
c001d611:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d616:	50                   	push   eax
c001d617:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d61c:	50                   	push   eax
c001d61d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d622:	50                   	push   eax
c001d623:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d627:	e8 7a fe ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d62c:	83 c4 2c             	add    esp,0x2c
c001d62f:	c3                   	ret    

c001d630 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d630:	83 ec 18             	sub    esp,0x18
c001d633:	6a 3c                	push   0x3c
c001d635:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d63a:	50                   	push   eax
c001d63b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d640:	50                   	push   eax
c001d641:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d646:	50                   	push   eax
c001d647:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d64b:	e8 56 fe ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d650:	83 c4 2c             	add    esp,0x2c
c001d653:	c3                   	ret    

c001d654 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d654:	83 ec 18             	sub    esp,0x18
c001d657:	6a 18                	push   0x18
c001d659:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d65e:	50                   	push   eax
c001d65f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d664:	50                   	push   eax
c001d665:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d66a:	50                   	push   eax
c001d66b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d66f:	e8 32 fe ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d674:	83 c4 2c             	add    esp,0x2c
c001d677:	0f b6 c4             	movzx  eax,ah
c001d67a:	c3                   	ret    
c001d67b:	90                   	nop

c001d67c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d67c:	55                   	push   ebp
c001d67d:	57                   	push   edi
c001d67e:	56                   	push   esi
c001d67f:	53                   	push   ebx
c001d680:	83 ec 28             	sub    esp,0x28
c001d683:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d687:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d68c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d691:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d696:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d69d:	8d 43 12             	lea    eax,[ebx+0x12]
c001d6a0:	83 c3 10             	add    ebx,0x10
c001d6a3:	0f b6 c0             	movzx  eax,al
c001d6a6:	0f b6 db             	movzx  ebx,bl
c001d6a9:	50                   	push   eax
c001d6aa:	51                   	push   ecx
c001d6ab:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d6af:	57                   	push   edi
c001d6b0:	55                   	push   ebp
c001d6b1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6b5:	e8 ec fd ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6ba:	83 c4 14             	add    esp,0x14
c001d6bd:	89 c6                	mov    esi,eax
c001d6bf:	53                   	push   ebx
c001d6c0:	c1 e6 10             	shl    esi,0x10
c001d6c3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d6c7:	51                   	push   ecx
c001d6c8:	57                   	push   edi
c001d6c9:	55                   	push   ebp
c001d6ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d6ce:	e8 d3 fd ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6d3:	83 c4 3c             	add    esp,0x3c
c001d6d6:	0f b7 c0             	movzx  eax,ax
c001d6d9:	5b                   	pop    ebx
c001d6da:	09 f0                	or     eax,esi
c001d6dc:	5e                   	pop    esi
c001d6dd:	5f                   	pop    edi
c001d6de:	5d                   	pop    ebp
c001d6df:	c3                   	ret    

c001d6e0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d6e0:	55                   	push   ebp
c001d6e1:	57                   	push   edi
c001d6e2:	56                   	push   esi
c001d6e3:	53                   	push   ebx
c001d6e4:	83 ec 0c             	sub    esp,0xc
c001d6e7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d6eb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d6ef:	89 f5                	mov    ebp,esi
c001d6f1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d6f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d6fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d6ff:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d703:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d707:	83 f9 01             	cmp    ecx,0x1
c001d70a:	75 5d                	jne    c001d769 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d70c:	0f b6 c8             	movzx  ecx,al
c001d70f:	0f b6 d2             	movzx  edx,dl
c001d712:	c1 e1 10             	shl    ecx,0x10
c001d715:	c1 e2 0b             	shl    edx,0xb
c001d718:	89 f0                	mov    eax,esi
c001d71a:	25 fc 00 00 00       	and    eax,0xfc
c001d71f:	09 c1                	or     ecx,eax
c001d721:	89 e8                	mov    eax,ebp
c001d723:	0f b6 c0             	movzx  eax,al
c001d726:	c1 e0 08             	shl    eax,0x8
c001d729:	09 c1                	or     ecx,eax
c001d72b:	09 d1                	or     ecx,edx
c001d72d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d732:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d738:	89 c8                	mov    eax,ecx
c001d73a:	ef                   	out    dx,eax
c001d73b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d740:	ed                   	in     eax,dx
c001d741:	0f b7 db             	movzx  ebx,bx
c001d744:	83 e6 02             	and    esi,0x2
c001d747:	74 0a                	je     c001d753 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d749:	0f b7 d0             	movzx  edx,ax
c001d74c:	c1 e3 10             	shl    ebx,0x10
c001d74f:	09 d3                	or     ebx,edx
c001d751:	eb 05                	jmp    c001d758 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d753:	66 31 c0             	xor    ax,ax
c001d756:	09 c3                	or     ebx,eax
c001d758:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d75d:	89 c8                	mov    eax,ecx
c001d75f:	ef                   	out    dx,eax
c001d760:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d765:	89 d8                	mov    eax,ebx
c001d767:	eb 41                	jmp    c001d7aa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d769:	83 f9 02             	cmp    ecx,0x2
c001d76c:	75 45                	jne    c001d7b3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d76e:	83 ec 0c             	sub    esp,0xc
c001d771:	0f b6 d2             	movzx  edx,dl
c001d774:	89 f1                	mov    ecx,esi
c001d776:	0f b6 c0             	movzx  eax,al
c001d779:	0f b6 f1             	movzx  esi,cl
c001d77c:	89 e9                	mov    ecx,ebp
c001d77e:	56                   	push   esi
c001d77f:	0f b6 c9             	movzx  ecx,cl
c001d782:	51                   	push   ecx
c001d783:	52                   	push   edx
c001d784:	50                   	push   eax
c001d785:	57                   	push   edi
c001d786:	e8 ad fc ff ff       	call   c001d438 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d78b:	89 c2                	mov    edx,eax
c001d78d:	ed                   	in     eax,dx
c001d78e:	83 c4 20             	add    esp,0x20
c001d791:	0f b7 db             	movzx  ebx,bx
c001d794:	f6 c2 02             	test   dl,0x2
c001d797:	74 0c                	je     c001d7a5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d799:	0f b7 c8             	movzx  ecx,ax
c001d79c:	89 d8                	mov    eax,ebx
c001d79e:	c1 e0 10             	shl    eax,0x10
c001d7a1:	09 c8                	or     eax,ecx
c001d7a3:	eb 05                	jmp    c001d7aa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d7a5:	66 31 c0             	xor    ax,ax
c001d7a8:	09 d8                	or     eax,ebx
c001d7aa:	ef                   	out    dx,eax
c001d7ab:	83 c4 0c             	add    esp,0xc
c001d7ae:	5b                   	pop    ebx
c001d7af:	5e                   	pop    esi
c001d7b0:	5f                   	pop    edi
c001d7b1:	5d                   	pop    ebp
c001d7b2:	c3                   	ret    
c001d7b3:	c7 44 24 20 bb 67 02 c0 	mov    DWORD PTR [esp+0x20],0xc00267bb
c001d7bb:	83 c4 0c             	add    esp,0xc
c001d7be:	5b                   	pop    ebx
c001d7bf:	5e                   	pop    esi
c001d7c0:	5f                   	pop    edi
c001d7c1:	5d                   	pop    ebp
c001d7c2:	e9 00 72 ff ff       	jmp    c00149c7 <Krnl::panic(char const*)>
c001d7c7:	90                   	nop

c001d7c8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d7c8:	55                   	push   ebp
c001d7c9:	57                   	push   edi
c001d7ca:	56                   	push   esi
c001d7cb:	53                   	push   ebx
c001d7cc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d7d2:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001d7d9:	75 0f                	jne    c001d7ea <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d7db:	80 3d 2c a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a02c,0x0
c001d7e2:	0f 85 fa 00 00 00    	jne    c001d8e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d7e8:	eb 2f                	jmp    c001d819 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d7ea:	83 ec 0c             	sub    esp,0xc
c001d7ed:	68 c1 67 02 c0       	push   0xc00267c1
c001d7f2:	e8 72 c2 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d7f7:	83 c4 10             	add    esp,0x10
c001d7fa:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001d801:	75 d8                	jne    c001d7db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d803:	e4 60                	in     al,0x60
c001d805:	3c 1c                	cmp    al,0x1c
c001d807:	74 04                	je     c001d80d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d809:	3c 5a                	cmp    al,0x5a
c001d80b:	75 f6                	jne    c001d803 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d80d:	e4 60                	in     al,0x60
c001d80f:	3c 5a                	cmp    al,0x5a
c001d811:	74 fa                	je     c001d80d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d813:	3c 1c                	cmp    al,0x1c
c001d815:	74 f6                	je     c001d80d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d817:	eb c2                	jmp    c001d7db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d819:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001d820:	0f 85 86 00 00 00    	jne    c001d8ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d826:	83 ec 0c             	sub    esp,0xc
c001d829:	68 14 01 00 00       	push   0x114
c001d82e:	e8 dc c1 fe ff       	call   c0009a0f <malloc>
c001d833:	83 c4 0c             	add    esp,0xc
c001d836:	89 c3                	mov    ebx,eax
c001d838:	ff 35 30 96 02 c0    	push   DWORD PTR ds:0xc0029630
c001d83e:	68 db 67 02 c0       	push   0xc00267db
c001d843:	50                   	push   eax
c001d844:	e8 21 fa fe ff       	call   c000d26a <File::File(char const*, Process*)>
c001d849:	5a                   	pop    edx
c001d84a:	59                   	pop    ecx
c001d84b:	6a 01                	push   0x1
c001d84d:	53                   	push   ebx
c001d84e:	e8 d9 fa fe ff       	call   c000d32c <File::open(FileOpenMode)>
c001d853:	83 c4 0c             	add    esp,0xc
c001d856:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d85a:	50                   	push   eax
c001d85b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d85f:	50                   	push   eax
c001d860:	53                   	push   ebx
c001d861:	e8 72 fd fe ff       	call   c000d5d8 <File::stat(unsigned long long*, bool*)>
c001d866:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d86a:	40                   	inc    eax
c001d86b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d86e:	e8 9c c1 fe ff       	call   c0009a0f <malloc>
c001d873:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d877:	a3 28 a0 02 c0       	mov    ds:0xc002a028,eax
c001d87c:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d880:	5e                   	pop    esi
c001d881:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d883:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d887:	51                   	push   ecx
c001d888:	50                   	push   eax
c001d889:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d88d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d891:	53                   	push   ebx
c001d892:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d895:	83 c4 14             	add    esp,0x14
c001d898:	53                   	push   ebx
c001d899:	e8 ec fa fe ff       	call   c000d38a <File::close()>
c001d89e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8a2:	83 c4 10             	add    esp,0x10
c001d8a5:	a3 24 a0 02 c0       	mov    ds:0xc002a024,eax
c001d8aa:	eb 36                	jmp    c001d8e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d8ac:	83 ec 0c             	sub    esp,0xc
c001d8af:	68 f4 67 02 c0       	push   0xc00267f4
c001d8b4:	e8 b0 c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d8b9:	83 c4 10             	add    esp,0x10
c001d8bc:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001d8c3:	0f 85 5d ff ff ff    	jne    c001d826 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d8c9:	e4 60                	in     al,0x60
c001d8cb:	3c 1c                	cmp    al,0x1c
c001d8cd:	74 04                	je     c001d8d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d8cf:	3c 5a                	cmp    al,0x5a
c001d8d1:	75 f6                	jne    c001d8c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d8d3:	e4 60                	in     al,0x60
c001d8d5:	3c 5a                	cmp    al,0x5a
c001d8d7:	74 fa                	je     c001d8d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d8d9:	3c 1c                	cmp    al,0x1c
c001d8db:	74 f6                	je     c001d8d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d8dd:	e9 44 ff ff ff       	jmp    c001d826 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d8e2:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001d8e9:	75 0b                	jne    c001d8f6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d8eb:	31 f6                	xor    esi,esi
c001d8ed:	31 db                	xor    ebx,ebx
c001d8ef:	31 ed                	xor    ebp,ebp
c001d8f1:	e9 a3 01 00 00       	jmp    c001da99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d8f6:	83 ec 0c             	sub    esp,0xc
c001d8f9:	68 06 68 02 c0       	push   0xc0026806
c001d8fe:	e8 66 c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d903:	8b 15 00 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028100
c001d909:	83 c4 10             	add    esp,0x10
c001d90c:	f6 c2 80             	test   dl,0x80
c001d90f:	74 0c                	je     c001d91d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d911:	0f ba e2 0b          	bt     edx,0xb
c001d915:	72 1a                	jb     c001d931 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d917:	eb d2                	jmp    c001d8eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d919:	3c 5a                	cmp    al,0x5a
c001d91b:	74 0c                	je     c001d929 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d91d:	e4 60                	in     al,0x60
c001d91f:	3c 1c                	cmp    al,0x1c
c001d921:	75 f6                	jne    c001d919 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d923:	eb 04                	jmp    c001d929 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d925:	3c 1c                	cmp    al,0x1c
c001d927:	75 e8                	jne    c001d911 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d929:	e4 60                	in     al,0x60
c001d92b:	3c 5a                	cmp    al,0x5a
c001d92d:	74 fa                	je     c001d929 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d92f:	eb f4                	jmp    c001d925 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d931:	83 ec 0c             	sub    esp,0xc
c001d934:	68 0b 68 02 c0       	push   0xc002680b
c001d939:	e8 2b c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d93e:	83 c4 10             	add    esp,0x10
c001d941:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001d948:	75 a1                	jne    c001d8eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d94a:	e4 60                	in     al,0x60
c001d94c:	3c 5a                	cmp    al,0x5a
c001d94e:	74 04                	je     c001d954 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d950:	3c 1c                	cmp    al,0x1c
c001d952:	75 f6                	jne    c001d94a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d954:	e4 60                	in     al,0x60
c001d956:	3c 5a                	cmp    al,0x5a
c001d958:	74 fa                	je     c001d954 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d95a:	3c 1c                	cmp    al,0x1c
c001d95c:	74 f6                	je     c001d954 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d95e:	eb 8b                	jmp    c001d8eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d960:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001d967:	0f 85 3d 01 00 00    	jne    c001daaa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d96d:	a1 28 a0 02 c0       	mov    eax,ds:0xc002a028
c001d972:	8d 7e 01             	lea    edi,[esi+0x1]
c001d975:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d978:	d4 40                	aam    0x40
c001d97a:	d5 39                	aad    0x39
c001d97c:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001d983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d987:	0f 85 53 01 00 00    	jne    c001dae0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d98d:	8b 15 28 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a028
c001d993:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d996:	d4 40                	aam    0x40
c001d998:	d5 39                	aad    0x39
c001d99a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d99e:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d9a2:	d4 40                	aam    0x40
c001d9a4:	d5 39                	aad    0x39
c001d9a6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d9aa:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d9ae:	d4 40                	aam    0x40
c001d9b0:	d5 39                	aad    0x39
c001d9b2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d9b6:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d9ba:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d9be:	3c 56                	cmp    al,0x56
c001d9c0:	74 49                	je     c001da0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d9c2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d9c6:	d4 40                	aam    0x40
c001d9c8:	d5 39                	aad    0x39
c001d9ca:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d9cd:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d9d1:	0f b6 c9             	movzx  ecx,cl
c001d9d4:	c1 e1 04             	shl    ecx,0x4
c001d9d7:	d4 40                	aam    0x40
c001d9d9:	d5 39                	aad    0x39
c001d9db:	83 e8 30             	sub    eax,0x30
c001d9de:	0f b6 c0             	movzx  eax,al
c001d9e1:	09 c1                	or     ecx,eax
c001d9e3:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d9e7:	c1 e1 04             	shl    ecx,0x4
c001d9ea:	d4 40                	aam    0x40
c001d9ec:	d5 39                	aad    0x39
c001d9ee:	83 e8 30             	sub    eax,0x30
c001d9f1:	0f b6 c0             	movzx  eax,al
c001d9f4:	09 c1                	or     ecx,eax
c001d9f6:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d9fa:	c1 e1 04             	shl    ecx,0x4
c001d9fd:	d4 40                	aam    0x40
c001d9ff:	d5 39                	aad    0x39
c001da01:	83 e8 30             	sub    eax,0x30
c001da04:	0f b6 c0             	movzx  eax,al
c001da07:	09 c8                	or     eax,ecx
c001da09:	89 c5                	mov    ebp,eax
c001da0b:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001da0f:	80 f9 44             	cmp    cl,0x44
c001da12:	74 47                	je     c001da5b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001da14:	88 c8                	mov    al,cl
c001da16:	d4 40                	aam    0x40
c001da18:	d5 39                	aad    0x39
c001da1a:	83 e8 30             	sub    eax,0x30
c001da1d:	0f b6 f8             	movzx  edi,al
c001da20:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001da24:	c1 e7 04             	shl    edi,0x4
c001da27:	d4 40                	aam    0x40
c001da29:	d5 39                	aad    0x39
c001da2b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001da2e:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001da32:	0f b6 db             	movzx  ebx,bl
c001da35:	09 fb                	or     ebx,edi
c001da37:	c1 e3 04             	shl    ebx,0x4
c001da3a:	d4 40                	aam    0x40
c001da3c:	d5 39                	aad    0x39
c001da3e:	83 e8 30             	sub    eax,0x30
c001da41:	0f b6 f8             	movzx  edi,al
c001da44:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001da48:	09 fb                	or     ebx,edi
c001da4a:	89 df                	mov    edi,ebx
c001da4c:	c1 e7 04             	shl    edi,0x4
c001da4f:	d4 40                	aam    0x40
c001da51:	d5 39                	aad    0x39
c001da53:	8d 58 d0             	lea    ebx,[eax-0x30]
c001da56:	0f b6 db             	movzx  ebx,bl
c001da59:	09 fb                	or     ebx,edi
c001da5b:	a1 24 a0 02 c0       	mov    eax,ds:0xc002a024
c001da60:	83 c6 10             	add    esi,0x10
c001da63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da67:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001da6b:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001da6e:	3c 0a                	cmp    al,0xa
c001da70:	0f 85 a0 00 00 00    	jne    c001db16 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001da76:	3c 0a                	cmp    al,0xa
c001da78:	0f 94 c0             	sete   al
c001da7b:	0f b6 c0             	movzx  eax,al
c001da7e:	01 c6                	add    esi,eax
c001da80:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001da85:	0f 84 a2 00 00 00    	je     c001db2d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001da8b:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001da93:	0f 84 94 00 00 00    	je     c001db2d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001da99:	39 35 24 a0 02 c0    	cmp    DWORD PTR ds:0xc002a024,esi
c001da9f:	0f 8f bb fe ff ff    	jg     c001d960 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001daa5:	e9 e8 00 00 00       	jmp    c001db92 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001daaa:	83 ec 0c             	sub    esp,0xc
c001daad:	68 12 68 02 c0       	push   0xc0026812
c001dab2:	e8 b2 bf fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dab7:	83 c4 10             	add    esp,0x10
c001daba:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001dac1:	0f 85 a6 fe ff ff    	jne    c001d96d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dac7:	e4 60                	in     al,0x60
c001dac9:	3c 5a                	cmp    al,0x5a
c001dacb:	74 04                	je     c001dad1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dacd:	3c 1c                	cmp    al,0x1c
c001dacf:	75 f6                	jne    c001dac7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001dad1:	e4 60                	in     al,0x60
c001dad3:	3c 5a                	cmp    al,0x5a
c001dad5:	74 fa                	je     c001dad1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dad7:	3c 1c                	cmp    al,0x1c
c001dad9:	74 f6                	je     c001dad1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dadb:	e9 8d fe ff ff       	jmp    c001d96d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dae0:	83 ec 0c             	sub    esp,0xc
c001dae3:	68 1a 68 02 c0       	push   0xc002681a
c001dae8:	e8 7c bf fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001daed:	83 c4 10             	add    esp,0x10
c001daf0:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001daf7:	0f 85 90 fe ff ff    	jne    c001d98d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001dafd:	e4 60                	in     al,0x60
c001daff:	3c 5a                	cmp    al,0x5a
c001db01:	74 04                	je     c001db07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db03:	3c 1c                	cmp    al,0x1c
c001db05:	75 f6                	jne    c001dafd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001db07:	e4 60                	in     al,0x60
c001db09:	3c 5a                	cmp    al,0x5a
c001db0b:	74 fa                	je     c001db07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db0d:	3c 1c                	cmp    al,0x1c
c001db0f:	74 f6                	je     c001db07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001db11:	e9 77 fe ff ff       	jmp    c001d98d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001db16:	47                   	inc    edi
c001db17:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001db1b:	0f 84 55 ff ff ff    	je     c001da76 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001db21:	46                   	inc    esi
c001db22:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001db25:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001db28:	e9 3e ff ff ff       	jmp    c001da6b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001db2d:	80 f9 44             	cmp    cl,0x44
c001db30:	74 0e                	je     c001db40 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001db32:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001db3a:	0f 85 59 ff ff ff    	jne    c001da99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db40:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001db44:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001db48:	c1 e0 04             	shl    eax,0x4
c001db4b:	83 ea 30             	sub    edx,0x30
c001db4e:	09 d0                	or     eax,edx
c001db50:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001db57:	0f 85 3c ff ff ff    	jne    c001da99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db5d:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001db61:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001db65:	c1 e2 04             	shl    edx,0x4
c001db68:	83 e8 30             	sub    eax,0x30
c001db6b:	09 d0                	or     eax,edx
c001db6d:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001db74:	0f 85 1f ff ff ff    	jne    c001da99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001db7a:	50                   	push   eax
c001db7b:	50                   	push   eax
c001db7c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001db80:	50                   	push   eax
c001db81:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001db88:	e8 b3 2b fe ff       	call   c0000740 <strcpy>
c001db8d:	83 c4 10             	add    esp,0x10
c001db90:	eb 15                	jmp    c001dba7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001db92:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001db99:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001dba4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001dba7:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dbae:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dbb4:	5b                   	pop    ebx
c001dbb5:	5e                   	pop    esi
c001dbb6:	5f                   	pop    edi
c001dbb7:	5d                   	pop    ebp
c001dbb8:	c3                   	ret    
c001dbb9:	90                   	nop

c001dbba <PCI::checkBus(unsigned char)>:
c001dbba:	56                   	push   esi
c001dbbb:	53                   	push   ebx
c001dbbc:	31 db                	xor    ebx,ebx
c001dbbe:	51                   	push   ecx
c001dbbf:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dbc4:	52                   	push   edx
c001dbc5:	53                   	push   ebx
c001dbc6:	43                   	inc    ebx
c001dbc7:	56                   	push   esi
c001dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbcc:	e8 bf 07 00 00       	call   c001e390 <PCI::checkDevice(unsigned char, unsigned char)>
c001dbd1:	83 c4 10             	add    esp,0x10
c001dbd4:	83 fb 20             	cmp    ebx,0x20
c001dbd7:	75 eb                	jne    c001dbc4 <PCI::checkBus(unsigned char)+0xa>
c001dbd9:	58                   	pop    eax
c001dbda:	5b                   	pop    ebx
c001dbdb:	5e                   	pop    esi
c001dbdc:	c3                   	ret    
c001dbdd:	90                   	nop

c001dbde <PCI::foundDevice(PCIDeviceInfo)>:
c001dbde:	55                   	push   ebp
c001dbdf:	57                   	push   edi
c001dbe0:	56                   	push   esi
c001dbe1:	53                   	push   ebx
c001dbe2:	83 ec 1c             	sub    esp,0x1c
c001dbe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbe9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001dbef:	0f 84 20 04 00 00    	je     c001e015 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dbf5:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001dbfc:	75 37                	jne    c001dc35 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001dbfe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dc02:	66 81 f9 06 04       	cmp    cx,0x406
c001dc07:	75 5b                	jne    c001dc64 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001dc09:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001dc0e:	50                   	push   eax
c001dc0f:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001dc14:	50                   	push   eax
c001dc15:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001dc1a:	50                   	push   eax
c001dc1b:	53                   	push   ebx
c001dc1c:	e8 33 fa ff ff       	call   c001d654 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dc21:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001dc25:	0f b6 c0             	movzx  eax,al
c001dc28:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dc2c:	83 c4 2c             	add    esp,0x2c
c001dc2f:	5b                   	pop    ebx
c001dc30:	5e                   	pop    esi
c001dc31:	5f                   	pop    edi
c001dc32:	5d                   	pop    ebp
c001dc33:	eb 85                	jmp    c001dbba <PCI::checkBus(unsigned char)>
c001dc35:	83 ec 0c             	sub    esp,0xc
c001dc38:	68 23 68 02 c0       	push   0xc0026823
c001dc3d:	e8 27 be fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dc42:	83 c4 10             	add    esp,0x10
c001dc45:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001dc4c:	75 b0                	jne    c001dbfe <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dc4e:	e4 60                	in     al,0x60
c001dc50:	3c 5a                	cmp    al,0x5a
c001dc52:	74 04                	je     c001dc58 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc54:	3c 1c                	cmp    al,0x1c
c001dc56:	75 f6                	jne    c001dc4e <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001dc58:	e4 60                	in     al,0x60
c001dc5a:	3c 5a                	cmp    al,0x5a
c001dc5c:	74 fa                	je     c001dc58 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc5e:	3c 1c                	cmp    al,0x1c
c001dc60:	74 f6                	je     c001dc58 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dc62:	eb 9a                	jmp    c001dbfe <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dc64:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dc6a:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dc6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc72:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dc76:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001dc7a:	88 d0                	mov    al,dl
c001dc7c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dc81:	74 3b                	je     c001dcbe <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001dc83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dc87:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001dc8a:	85 d2                	test   edx,edx
c001dc8c:	74 24                	je     c001dcb2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dc8e:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dc94:	31 ef                	xor    edi,ebp
c001dc96:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dc9c:	75 14                	jne    c001dcb2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dc9e:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dca4:	75 0c                	jne    c001dcb2 <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dca6:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001dcac:	0f 84 63 03 00 00    	je     c001e015 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dcb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dcb6:	8b 12                	mov    edx,DWORD PTR [edx]
c001dcb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dcbc:	eb be                	jmp    c001dc7c <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001dcbe:	66 81 f9 01 06       	cmp    cx,0x601
c001dcc3:	0f 85 81 01 00 00    	jne    c001de4a <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001dcc9:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001dcd0:	75 25                	jne    c001dcf7 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001dcd2:	83 ec 0c             	sub    esp,0xc
c001dcd5:	68 64 01 00 00       	push   0x164
c001dcda:	e8 30 bd fe ff       	call   c0009a0f <malloc>
c001dcdf:	89 04 24             	mov    DWORD PTR [esp],eax
c001dce2:	89 c5                	mov    ebp,eax
c001dce4:	e8 b7 12 00 00       	call   c001efa0 <SATABus::SATABus()>
c001dce9:	83 c4 10             	add    esp,0x10
c001dcec:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001dcf3:	74 4a                	je     c001dd3f <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dcf5:	eb 2f                	jmp    c001dd26 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001dcf7:	83 ec 0c             	sub    esp,0xc
c001dcfa:	68 33 68 02 c0       	push   0xc0026833
c001dcff:	e8 65 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd04:	83 c4 10             	add    esp,0x10
c001dd07:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001dd0e:	75 c2                	jne    c001dcd2 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dd10:	e4 60                	in     al,0x60
c001dd12:	3c 1c                	cmp    al,0x1c
c001dd14:	74 04                	je     c001dd1a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd16:	3c 5a                	cmp    al,0x5a
c001dd18:	75 f6                	jne    c001dd10 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001dd1a:	e4 60                	in     al,0x60
c001dd1c:	3c 5a                	cmp    al,0x5a
c001dd1e:	74 fa                	je     c001dd1a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd20:	3c 1c                	cmp    al,0x1c
c001dd22:	74 f6                	je     c001dd1a <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dd24:	eb ac                	jmp    c001dcd2 <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dd26:	83 ec 0c             	sub    esp,0xc
c001dd29:	68 39 68 02 c0       	push   0xc0026839
c001dd2e:	e8 36 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd33:	83 c4 10             	add    esp,0x10
c001dd36:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001dd3d:	74 1b                	je     c001dd5a <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001dd3f:	50                   	push   eax
c001dd40:	50                   	push   eax
c001dd41:	55                   	push   ebp
c001dd42:	53                   	push   ebx
c001dd43:	e8 f6 04 ff ff       	call   c000e23e <Device::addChild(Device*)>
c001dd48:	83 c4 10             	add    esp,0x10
c001dd4b:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001dd52:	74 33                	je     c001dd87 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dd54:	eb 18                	jmp    c001dd6e <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001dd56:	3c 1c                	cmp    al,0x1c
c001dd58:	74 0c                	je     c001dd66 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd5a:	e4 60                	in     al,0x60
c001dd5c:	3c 5a                	cmp    al,0x5a
c001dd5e:	75 f6                	jne    c001dd56 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001dd60:	eb 04                	jmp    c001dd66 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd62:	3c 1c                	cmp    al,0x1c
c001dd64:	75 d9                	jne    c001dd3f <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dd66:	e4 60                	in     al,0x60
c001dd68:	3c 5a                	cmp    al,0x5a
c001dd6a:	74 fa                	je     c001dd66 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dd6c:	eb f4                	jmp    c001dd62 <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dd6e:	83 ec 0c             	sub    esp,0xc
c001dd71:	68 41 68 02 c0       	push   0xc0026841
c001dd76:	e8 ee bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd7b:	83 c4 10             	add    esp,0x10
c001dd7e:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001dd85:	74 29                	je     c001ddb0 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001dd87:	83 ec 2c             	sub    esp,0x2c
c001dd8a:	b9 09 00 00 00       	mov    ecx,0x9
c001dd8f:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dd93:	fc                   	cld    
c001dd94:	89 e7                	mov    edi,esp
c001dd96:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd98:	55                   	push   ebp
c001dd99:	e8 b2 03 ff ff       	call   c000e150 <Device::preOpenPCI(PCIDeviceInfo)>
c001dd9e:	83 c4 30             	add    esp,0x30
c001dda1:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001dda8:	74 33                	je     c001dddd <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001ddaa:	eb 18                	jmp    c001ddc4 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001ddac:	3c 1c                	cmp    al,0x1c
c001ddae:	74 0c                	je     c001ddbc <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001ddb0:	e4 60                	in     al,0x60
c001ddb2:	3c 5a                	cmp    al,0x5a
c001ddb4:	75 f6                	jne    c001ddac <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001ddb6:	eb 04                	jmp    c001ddbc <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001ddb8:	3c 1c                	cmp    al,0x1c
c001ddba:	75 cb                	jne    c001dd87 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001ddbc:	e4 60                	in     al,0x60
c001ddbe:	3c 5a                	cmp    al,0x5a
c001ddc0:	74 fa                	je     c001ddbc <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001ddc2:	eb f4                	jmp    c001ddb8 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001ddc4:	83 ec 0c             	sub    esp,0xc
c001ddc7:	68 49 68 02 c0       	push   0xc0026849
c001ddcc:	e8 98 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ddd1:	83 c4 10             	add    esp,0x10
c001ddd4:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001dddb:	74 23                	je     c001de00 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001dddd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dde0:	6a 00                	push   0x0
c001dde2:	6a 00                	push   0x0
c001dde4:	6a 00                	push   0x0
c001dde6:	55                   	push   ebp
c001dde7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ddea:	83 c4 10             	add    esp,0x10
c001dded:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001ddf4:	0f 84 1b 02 00 00    	je     c001e015 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001ddfa:	eb 18                	jmp    c001de14 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001ddfc:	3c 1c                	cmp    al,0x1c
c001ddfe:	74 0c                	je     c001de0c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de00:	e4 60                	in     al,0x60
c001de02:	3c 5a                	cmp    al,0x5a
c001de04:	75 f6                	jne    c001ddfc <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001de06:	eb 04                	jmp    c001de0c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de08:	3c 1c                	cmp    al,0x1c
c001de0a:	75 d1                	jne    c001dddd <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001de0c:	e4 60                	in     al,0x60
c001de0e:	3c 5a                	cmp    al,0x5a
c001de10:	74 fa                	je     c001de0c <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001de12:	eb f4                	jmp    c001de08 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001de14:	83 ec 0c             	sub    esp,0xc
c001de17:	68 51 68 02 c0       	push   0xc0026851
c001de1c:	e8 48 bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de21:	83 c4 10             	add    esp,0x10
c001de24:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001de2b:	0f 85 e4 01 00 00    	jne    c001e015 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de31:	e4 60                	in     al,0x60
c001de33:	3c 5a                	cmp    al,0x5a
c001de35:	74 04                	je     c001de3b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de37:	3c 1c                	cmp    al,0x1c
c001de39:	75 f6                	jne    c001de31 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001de3b:	e4 60                	in     al,0x60
c001de3d:	3c 5a                	cmp    al,0x5a
c001de3f:	74 fa                	je     c001de3b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de41:	3c 1c                	cmp    al,0x1c
c001de43:	74 f6                	je     c001de3b <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001de45:	e9 cb 01 00 00       	jmp    c001e015 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001de4a:	66 81 f9 01 01       	cmp    cx,0x101
c001de4f:	0f 85 7a 01 00 00    	jne    c001dfcf <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001de55:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001de5c:	75 25                	jne    c001de83 <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001de5e:	83 ec 0c             	sub    esp,0xc
c001de61:	68 70 02 00 00       	push   0x270
c001de66:	e8 a4 bb fe ff       	call   c0009a0f <malloc>
c001de6b:	89 04 24             	mov    DWORD PTR [esp],eax
c001de6e:	89 c5                	mov    ebp,eax
c001de70:	e8 df 05 00 00       	call   c001e454 <IDE::IDE()>
c001de75:	83 c4 10             	add    esp,0x10
c001de78:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001de7f:	74 4a                	je     c001decb <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001de81:	eb 2f                	jmp    c001deb2 <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001de83:	83 ec 0c             	sub    esp,0xc
c001de86:	68 59 68 02 c0       	push   0xc0026859
c001de8b:	e8 d9 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de90:	83 c4 10             	add    esp,0x10
c001de93:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001de9a:	75 c2                	jne    c001de5e <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001de9c:	e4 60                	in     al,0x60
c001de9e:	3c 5a                	cmp    al,0x5a
c001dea0:	74 04                	je     c001dea6 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dea2:	3c 1c                	cmp    al,0x1c
c001dea4:	75 f6                	jne    c001de9c <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001dea6:	e4 60                	in     al,0x60
c001dea8:	3c 5a                	cmp    al,0x5a
c001deaa:	74 fa                	je     c001dea6 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001deac:	3c 1c                	cmp    al,0x1c
c001deae:	74 f6                	je     c001dea6 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001deb0:	eb ac                	jmp    c001de5e <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001deb2:	83 ec 0c             	sub    esp,0xc
c001deb5:	68 60 68 02 c0       	push   0xc0026860
c001deba:	e8 aa bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001debf:	83 c4 10             	add    esp,0x10
c001dec2:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001dec9:	74 1b                	je     c001dee6 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001decb:	57                   	push   edi
c001decc:	57                   	push   edi
c001decd:	55                   	push   ebp
c001dece:	53                   	push   ebx
c001decf:	e8 6a 03 ff ff       	call   c000e23e <Device::addChild(Device*)>
c001ded4:	83 c4 10             	add    esp,0x10
c001ded7:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001dede:	74 33                	je     c001df13 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001dee0:	eb 18                	jmp    c001defa <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001dee2:	3c 1c                	cmp    al,0x1c
c001dee4:	74 0c                	je     c001def2 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001dee6:	e4 60                	in     al,0x60
c001dee8:	3c 5a                	cmp    al,0x5a
c001deea:	75 f6                	jne    c001dee2 <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001deec:	eb 04                	jmp    c001def2 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001deee:	3c 1c                	cmp    al,0x1c
c001def0:	75 d9                	jne    c001decb <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001def2:	e4 60                	in     al,0x60
c001def4:	3c 5a                	cmp    al,0x5a
c001def6:	74 fa                	je     c001def2 <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001def8:	eb f4                	jmp    c001deee <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001defa:	83 ec 0c             	sub    esp,0xc
c001defd:	68 67 68 02 c0       	push   0xc0026867
c001df02:	e8 62 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001df07:	83 c4 10             	add    esp,0x10
c001df0a:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001df11:	74 29                	je     c001df3c <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001df13:	83 ec 2c             	sub    esp,0x2c
c001df16:	b9 09 00 00 00       	mov    ecx,0x9
c001df1b:	8d 74 24 60          	lea    esi,[esp+0x60]
c001df1f:	fc                   	cld    
c001df20:	89 e7                	mov    edi,esp
c001df22:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df24:	55                   	push   ebp
c001df25:	e8 26 02 ff ff       	call   c000e150 <Device::preOpenPCI(PCIDeviceInfo)>
c001df2a:	83 c4 30             	add    esp,0x30
c001df2d:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001df34:	74 33                	je     c001df69 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001df36:	eb 18                	jmp    c001df50 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001df38:	3c 1c                	cmp    al,0x1c
c001df3a:	74 0c                	je     c001df48 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df3c:	e4 60                	in     al,0x60
c001df3e:	3c 5a                	cmp    al,0x5a
c001df40:	75 f6                	jne    c001df38 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001df42:	eb 04                	jmp    c001df48 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df44:	3c 1c                	cmp    al,0x1c
c001df46:	75 cb                	jne    c001df13 <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001df48:	e4 60                	in     al,0x60
c001df4a:	3c 5a                	cmp    al,0x5a
c001df4c:	74 fa                	je     c001df48 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001df4e:	eb f4                	jmp    c001df44 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001df50:	83 ec 0c             	sub    esp,0xc
c001df53:	68 6e 68 02 c0       	push   0xc002686e
c001df58:	e8 0c bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001df5d:	83 c4 10             	add    esp,0x10
c001df60:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001df67:	74 23                	je     c001df8c <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001df69:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001df6c:	6a 00                	push   0x0
c001df6e:	6a 00                	push   0x0
c001df70:	6a 00                	push   0x0
c001df72:	55                   	push   ebp
c001df73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df76:	83 c4 10             	add    esp,0x10
c001df79:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001df80:	0f 84 8f 00 00 00    	je     c001e015 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df86:	eb 18                	jmp    c001dfa0 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001df88:	3c 1c                	cmp    al,0x1c
c001df8a:	74 0c                	je     c001df98 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001df8c:	e4 60                	in     al,0x60
c001df8e:	3c 5a                	cmp    al,0x5a
c001df90:	75 f6                	jne    c001df88 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001df92:	eb 04                	jmp    c001df98 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001df94:	3c 1c                	cmp    al,0x1c
c001df96:	75 d1                	jne    c001df69 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001df98:	e4 60                	in     al,0x60
c001df9a:	3c 5a                	cmp    al,0x5a
c001df9c:	74 fa                	je     c001df98 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001df9e:	eb f4                	jmp    c001df94 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001dfa0:	83 ec 0c             	sub    esp,0xc
c001dfa3:	68 75 68 02 c0       	push   0xc0026875
c001dfa8:	e8 bc ba fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dfad:	83 c4 10             	add    esp,0x10
c001dfb0:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001dfb7:	75 5c                	jne    c001e015 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dfb9:	e4 60                	in     al,0x60
c001dfbb:	3c 5a                	cmp    al,0x5a
c001dfbd:	74 04                	je     c001dfc3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dfbf:	3c 1c                	cmp    al,0x1c
c001dfc1:	75 f6                	jne    c001dfb9 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001dfc3:	e4 60                	in     al,0x60
c001dfc5:	3c 5a                	cmp    al,0x5a
c001dfc7:	74 fa                	je     c001dfc3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dfc9:	3c 1c                	cmp    al,0x1c
c001dfcb:	74 f6                	je     c001dfc3 <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001dfcd:	eb 46                	jmp    c001e015 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dfcf:	83 ec 0c             	sub    esp,0xc
c001dfd2:	68 58 01 00 00       	push   0x158
c001dfd7:	e8 33 ba fe ff       	call   c0009a0f <malloc>
c001dfdc:	89 c5                	mov    ebp,eax
c001dfde:	58                   	pop    eax
c001dfdf:	5a                   	pop    edx
c001dfe0:	68 7c 68 02 c0       	push   0xc002687c
c001dfe5:	55                   	push   ebp
c001dfe6:	e8 5d 05 ff ff       	call   c000e548 <DriverlessDevice::DriverlessDevice(char const*)>
c001dfeb:	59                   	pop    ecx
c001dfec:	5e                   	pop    esi
c001dfed:	55                   	push   ebp
c001dfee:	53                   	push   ebx
c001dfef:	e8 4a 02 ff ff       	call   c000e23e <Device::addChild(Device*)>
c001dff4:	83 c4 10             	add    esp,0x10
c001dff7:	b9 09 00 00 00       	mov    ecx,0x9
c001dffc:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e000:	fc                   	cld    
c001e001:	89 fe                	mov    esi,edi
c001e003:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e005:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e009:	83 c4 1c             	add    esp,0x1c
c001e00c:	5b                   	pop    ebx
c001e00d:	5e                   	pop    esi
c001e00e:	5f                   	pop    edi
c001e00f:	5d                   	pop    ebp
c001e010:	e9 3b 01 ff ff       	jmp    c000e150 <Device::preOpenPCI(PCIDeviceInfo)>
c001e015:	83 c4 1c             	add    esp,0x1c
c001e018:	5b                   	pop    ebx
c001e019:	5e                   	pop    esi
c001e01a:	5f                   	pop    edi
c001e01b:	5d                   	pop    ebp
c001e01c:	c3                   	ret    
c001e01d:	90                   	nop

c001e01e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e01e:	55                   	push   ebp
c001e01f:	57                   	push   edi
c001e020:	56                   	push   esi
c001e021:	53                   	push   ebx
c001e022:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e028:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e02f:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e036:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e03a:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e041:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e045:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e04c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e050:	68 96 68 02 c0       	push   0xc0026896
c001e055:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e059:	53                   	push   ebx
c001e05a:	e8 e1 26 fe ff       	call   c0000740 <strcpy>
c001e05f:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e064:	b2 64                	mov    dl,0x64
c001e066:	89 c8                	mov    eax,ecx
c001e068:	f6 f2                	div    dl
c001e06a:	b2 0a                	mov    dl,0xa
c001e06c:	83 c0 30             	add    eax,0x30
c001e06f:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e073:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e077:	83 c4 10             	add    esp,0x10
c001e07a:	89 c8                	mov    eax,ecx
c001e07c:	f6 f2                	div    dl
c001e07e:	89 c1                	mov    ecx,eax
c001e080:	0f b6 c0             	movzx  eax,al
c001e083:	88 e9                	mov    cl,ch
c001e085:	f6 f2                	div    dl
c001e087:	88 e0                	mov    al,ah
c001e089:	83 c0 30             	add    eax,0x30
c001e08c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e090:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e094:	8d 41 30             	lea    eax,[ecx+0x30]
c001e097:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e09b:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e09f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e0a4:	f6 f2                	div    dl
c001e0a6:	89 c1                	mov    ecx,eax
c001e0a8:	0f b6 c0             	movzx  eax,al
c001e0ab:	88 e9                	mov    cl,ch
c001e0ad:	f6 f2                	div    dl
c001e0af:	88 e0                	mov    al,ah
c001e0b1:	83 c0 30             	add    eax,0x30
c001e0b4:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e0b8:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e0bc:	8d 41 30             	lea    eax,[ecx+0x30]
c001e0bf:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e0c3:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e0c7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e0cc:	f6 f2                	div    dl
c001e0ce:	89 c1                	mov    ecx,eax
c001e0d0:	0f b6 c0             	movzx  eax,al
c001e0d3:	88 e9                	mov    cl,ch
c001e0d5:	f6 f2                	div    dl
c001e0d7:	88 e0                	mov    al,ah
c001e0d9:	83 c0 30             	add    eax,0x30
c001e0dc:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001e0e3:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e0e7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e0eb:	8d 41 30             	lea    eax,[ecx+0x30]
c001e0ee:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e0f2:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e0f6:	74 29                	je     c001e121 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e0f8:	83 ec 0c             	sub    esp,0xc
c001e0fb:	53                   	push   ebx
c001e0fc:	e8 68 b9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e101:	83 c4 10             	add    esp,0x10
c001e104:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001e10b:	75 14                	jne    c001e121 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e10d:	e4 60                	in     al,0x60
c001e10f:	3c 1c                	cmp    al,0x1c
c001e111:	74 04                	je     c001e117 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e113:	3c 5a                	cmp    al,0x5a
c001e115:	75 f6                	jne    c001e10d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e117:	e4 60                	in     al,0x60
c001e119:	3c 5a                	cmp    al,0x5a
c001e11b:	74 fa                	je     c001e117 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e11d:	3c 1c                	cmp    al,0x1c
c001e11f:	74 f6                	je     c001e117 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e121:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e126:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e12b:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e130:	83 ec 0c             	sub    esp,0xc
c001e133:	6a 0c                	push   0xc
c001e135:	56                   	push   esi
c001e136:	53                   	push   ebx
c001e137:	57                   	push   edi
c001e138:	55                   	push   ebp
c001e139:	e8 68 f3 ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e13e:	83 c4 20             	add    esp,0x20
c001e141:	56                   	push   esi
c001e142:	53                   	push   ebx
c001e143:	57                   	push   edi
c001e144:	55                   	push   ebp
c001e145:	e8 50 f4 ff ff       	call   c001d59a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e14a:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e14f:	56                   	push   esi
c001e150:	53                   	push   ebx
c001e151:	57                   	push   edi
c001e152:	55                   	push   ebp
c001e153:	e8 d8 f4 ff ff       	call   c001d630 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e158:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e15c:	83 c4 14             	add    esp,0x14
c001e15f:	6a 3c                	push   0x3c
c001e161:	56                   	push   esi
c001e162:	53                   	push   ebx
c001e163:	57                   	push   edi
c001e164:	55                   	push   ebp
c001e165:	e8 3c f3 ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e16a:	0f b6 c4             	movzx  eax,ah
c001e16d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e171:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e175:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e17c:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c001e181:	83 c4 20             	add    esp,0x20
c001e184:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e18a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e191:	0f 84 38 01 00 00    	je     c001e2cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e197:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e19f:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c001e1a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e1a8:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e1ae:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e1b4:	0f 8e 15 01 00 00    	jle    c001e2cf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e1ba:	50                   	push   eax
c001e1bb:	50                   	push   eax
c001e1bc:	68 b1 68 02 c0       	push   0xc00268b1
c001e1c1:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e1c5:	50                   	push   eax
c001e1c6:	e8 75 25 fe ff       	call   c0000740 <strcpy>
c001e1cb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e1cf:	b9 0a 00 00 00       	mov    ecx,0xa
c001e1d4:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e1d8:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e1dc:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e1e0:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e1e4:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e1e8:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e1ec:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e1f0:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e1f4:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e1f8:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e1fc:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e200:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e204:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e20f:	99                   	cdq    
c001e210:	f7 f9                	idiv   ecx
c001e212:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e216:	99                   	cdq    
c001e217:	f7 f9                	idiv   ecx
c001e219:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e21d:	83 c2 30             	add    edx,0x30
c001e220:	83 c0 30             	add    eax,0x30
c001e223:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e227:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e22b:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001e232:	74 2d                	je     c001e261 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e234:	83 ec 0c             	sub    esp,0xc
c001e237:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e23b:	50                   	push   eax
c001e23c:	e8 28 b8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e241:	83 c4 10             	add    esp,0x10
c001e244:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001e24b:	75 14                	jne    c001e261 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e24d:	e4 60                	in     al,0x60
c001e24f:	3c 5a                	cmp    al,0x5a
c001e251:	74 04                	je     c001e257 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e253:	3c 1c                	cmp    al,0x1c
c001e255:	75 f6                	jne    c001e24d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e257:	e4 60                	in     al,0x60
c001e259:	3c 5a                	cmp    al,0x5a
c001e25b:	74 fa                	je     c001e257 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e25d:	3c 1c                	cmp    al,0x1c
c001e25f:	74 f6                	je     c001e257 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e261:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e265:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c001e26a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e270:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e273:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e27a:	39 d3                	cmp    ebx,edx
c001e27c:	75 48                	jne    c001e2c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e27e:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e285:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e289:	75 3b                	jne    c001e2c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e28b:	83 ec 0c             	sub    esp,0xc
c001e28e:	68 e0 68 02 c0       	push   0xc00268e0
c001e293:	e8 67 ea fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001e298:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e29c:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c001e2a1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e2a7:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e2af:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e2b3:	50                   	push   eax
c001e2b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e2b8:	53                   	push   ebx
c001e2b9:	68 05 69 02 c0       	push   0xc0026905
c001e2be:	e8 3c ea fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001e2c3:	83 c4 20             	add    esp,0x20
c001e2c6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e2ca:	e9 d0 fe ff ff       	jmp    c001e19f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e2cf:	31 d2                	xor    edx,edx
c001e2d1:	83 ec 0c             	sub    esp,0xc
c001e2d4:	56                   	push   esi
c001e2d5:	53                   	push   ebx
c001e2d6:	57                   	push   edi
c001e2d7:	52                   	push   edx
c001e2d8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e2dc:	55                   	push   ebp
c001e2dd:	e8 9a f3 ff ff       	call   c001d67c <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2e2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e2e6:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e2ed:	42                   	inc    edx
c001e2ee:	83 c4 20             	add    esp,0x20
c001e2f1:	83 fa 06             	cmp    edx,0x6
c001e2f4:	75 db                	jne    c001e2d1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e2f6:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e2fb:	83 ec 0c             	sub    esp,0xc
c001e2fe:	86 e0                	xchg   al,ah
c001e300:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e308:	6a 02                	push   0x2
c001e30a:	56                   	push   esi
c001e30b:	53                   	push   ebx
c001e30c:	57                   	push   edi
c001e30d:	55                   	push   ebp
c001e30e:	e8 93 f1 ff ff       	call   c001d4a6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e313:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e31b:	83 c4 20             	add    esp,0x20
c001e31e:	56                   	push   esi
c001e31f:	53                   	push   ebx
c001e320:	57                   	push   edi
c001e321:	55                   	push   ebp
c001e322:	e8 bd f2 ff ff       	call   c001d5e4 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e327:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e32e:	56                   	push   esi
c001e32f:	53                   	push   ebx
c001e330:	57                   	push   edi
c001e331:	55                   	push   ebp
c001e332:	e8 17 f2 ff ff       	call   c001d54e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e337:	b9 09 00 00 00       	mov    ecx,0x9
c001e33c:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e344:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e348:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e34f:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e353:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e35a:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e35e:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e365:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e369:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e370:	83 ec 0c             	sub    esp,0xc
c001e373:	fc                   	cld    
c001e374:	89 e7                	mov    edi,esp
c001e376:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e37d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e37f:	55                   	push   ebp
c001e380:	e8 59 f8 ff ff       	call   c001dbde <PCI::foundDevice(PCIDeviceInfo)>
c001e385:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e38b:	5b                   	pop    ebx
c001e38c:	5e                   	pop    esi
c001e38d:	5f                   	pop    edi
c001e38e:	5d                   	pop    ebp
c001e38f:	c3                   	ret    

c001e390 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e390:	55                   	push   ebp
c001e391:	57                   	push   edi
c001e392:	56                   	push   esi
c001e393:	53                   	push   ebx
c001e394:	83 ec 0c             	sub    esp,0xc
c001e397:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e39b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e3a0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e3a5:	6a 00                	push   0x0
c001e3a7:	56                   	push   esi
c001e3a8:	57                   	push   edi
c001e3a9:	55                   	push   ebp
c001e3aa:	e8 9f f1 ff ff       	call   c001d54e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3af:	6a 00                	push   0x0
c001e3b1:	56                   	push   esi
c001e3b2:	57                   	push   edi
c001e3b3:	55                   	push   ebp
c001e3b4:	e8 65 fc ff ff       	call   c001e01e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e3b9:	83 c4 20             	add    esp,0x20
c001e3bc:	6a 00                	push   0x0
c001e3be:	56                   	push   esi
c001e3bf:	57                   	push   edi
c001e3c0:	55                   	push   ebp
c001e3c1:	e8 ac f1 ff ff       	call   c001d572 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e3c6:	83 c4 10             	add    esp,0x10
c001e3c9:	84 c0                	test   al,al
c001e3cb:	79 27                	jns    c001e3f4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e3cd:	bb 01 00 00 00       	mov    ebx,0x1
c001e3d2:	53                   	push   ebx
c001e3d3:	56                   	push   esi
c001e3d4:	57                   	push   edi
c001e3d5:	55                   	push   ebp
c001e3d6:	e8 73 f1 ff ff       	call   c001d54e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3db:	83 c4 10             	add    esp,0x10
c001e3de:	66 40                	inc    ax
c001e3e0:	74 0c                	je     c001e3ee <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e3e2:	53                   	push   ebx
c001e3e3:	56                   	push   esi
c001e3e4:	57                   	push   edi
c001e3e5:	55                   	push   ebp
c001e3e6:	e8 33 fc ff ff       	call   c001e01e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e3eb:	83 c4 10             	add    esp,0x10
c001e3ee:	43                   	inc    ebx
c001e3ef:	83 fb 08             	cmp    ebx,0x8
c001e3f2:	75 de                	jne    c001e3d2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e3f4:	83 c4 0c             	add    esp,0xc
c001e3f7:	5b                   	pop    ebx
c001e3f8:	5e                   	pop    esi
c001e3f9:	5f                   	pop    edi
c001e3fa:	5d                   	pop    ebp
c001e3fb:	c3                   	ret    

c001e3fc <PCI::detect()>:
c001e3fc:	56                   	push   esi
c001e3fd:	53                   	push   ebx
c001e3fe:	53                   	push   ebx
c001e3ff:	31 db                	xor    ebx,ebx
c001e401:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e405:	6a 00                	push   0x0
c001e407:	6a 00                	push   0x0
c001e409:	6a 00                	push   0x0
c001e40b:	56                   	push   esi
c001e40c:	e8 61 f1 ff ff       	call   c001d572 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e411:	83 c4 10             	add    esp,0x10
c001e414:	a8 80                	test   al,0x80
c001e416:	75 21                	jne    c001e439 <PCI::detect()+0x3d>
c001e418:	51                   	push   ecx
c001e419:	51                   	push   ecx
c001e41a:	6a 00                	push   0x0
c001e41c:	56                   	push   esi
c001e41d:	e8 98 f7 ff ff       	call   c001dbba <PCI::checkBus(unsigned char)>
c001e422:	83 c4 10             	add    esp,0x10
c001e425:	eb 24                	jmp    c001e44b <PCI::detect()+0x4f>
c001e427:	52                   	push   edx
c001e428:	52                   	push   edx
c001e429:	53                   	push   ebx
c001e42a:	43                   	inc    ebx
c001e42b:	56                   	push   esi
c001e42c:	e8 89 f7 ff ff       	call   c001dbba <PCI::checkBus(unsigned char)>
c001e431:	83 c4 10             	add    esp,0x10
c001e434:	83 fb 08             	cmp    ebx,0x8
c001e437:	74 12                	je     c001e44b <PCI::detect()+0x4f>
c001e439:	53                   	push   ebx
c001e43a:	6a 00                	push   0x0
c001e43c:	6a 00                	push   0x0
c001e43e:	56                   	push   esi
c001e43f:	e8 0a f1 ff ff       	call   c001d54e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e444:	83 c4 10             	add    esp,0x10
c001e447:	66 40                	inc    ax
c001e449:	74 dc                	je     c001e427 <PCI::detect()+0x2b>
c001e44b:	58                   	pop    eax
c001e44c:	5b                   	pop    ebx
c001e44d:	5e                   	pop    esi
c001e44e:	c3                   	ret    
c001e44f:	90                   	nop

c001e450 <IDE::close(int, int, void*)>:
c001e450:	83 c8 ff             	or     eax,0xffffffff
c001e453:	c3                   	ret    

c001e454 <IDE::IDE()>:
c001e454:	83 ec 0c             	sub    esp,0xc
c001e457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45b:	83 ec 08             	sub    esp,0x8
c001e45e:	68 4c 69 02 c0       	push   0xc002694c
c001e463:	50                   	push   eax
c001e464:	e8 83 01 ff ff       	call   c000e5ec <HardDiskController::HardDiskController(char const*)>
c001e469:	83 c4 10             	add    esp,0x10
c001e46c:	ba dc 69 02 c0       	mov    edx,0xc00269dc
c001e471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e475:	89 10                	mov    DWORD PTR [eax],edx
c001e477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e482:	90                   	nop
c001e483:	83 c4 0c             	add    esp,0xc
c001e486:	c3                   	ret    
c001e487:	90                   	nop

c001e488 <IDE::prepareInterrupt(unsigned char)>:
c001e488:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e48d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e491:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e499:	c3                   	ret    

c001e49a <selectDrive(unsigned char, unsigned char)>:
c001e49a:	c3                   	ret    
c001e49b:	90                   	nop

c001e49c <IDE::getBase(unsigned char)>:
c001e49c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e4a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4a5:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e4ad:	c3                   	ret    

c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e4ae:	55                   	push   ebp
c001e4af:	57                   	push   edi
c001e4b0:	56                   	push   esi
c001e4b1:	53                   	push   ebx
c001e4b2:	83 ec 1c             	sub    esp,0x1c
c001e4b5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e4b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4bd:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e4c0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e4c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e4c8:	80 f9 03             	cmp    cl,0x3
c001e4cb:	77 51                	ja     c001e51e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e4cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4d1:	0f b6 f2             	movzx  esi,dl
c001e4d4:	0f b6 db             	movzx  ebx,bl
c001e4d7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e4da:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e4de:	83 ca 80             	or     edx,0xffffff80
c001e4e1:	0f b6 d2             	movzx  edx,dl
c001e4e4:	52                   	push   edx
c001e4e5:	6a 0c                	push   0xc
c001e4e7:	56                   	push   esi
c001e4e8:	57                   	push   edi
c001e4e9:	e8 c0 ff ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e4ee:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e4f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4f7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e4fb:	ee                   	out    dx,al
c001e4fc:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e501:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e505:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e509:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e50d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e515:	83 c4 2c             	add    esp,0x2c
c001e518:	5b                   	pop    ebx
c001e519:	5e                   	pop    esi
c001e51a:	5f                   	pop    edi
c001e51b:	5d                   	pop    ebp
c001e51c:	eb 90                	jmp    c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e51e:	80 fb 07             	cmp    bl,0x7
c001e521:	77 12                	ja     c001e535 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e523:	0f b6 d2             	movzx  edx,dl
c001e526:	0f b6 db             	movzx  ebx,bl
c001e529:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e531:	89 da                	mov    edx,ebx
c001e533:	eb 2f                	jmp    c001e564 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e535:	80 fb 0d             	cmp    bl,0xd
c001e538:	77 13                	ja     c001e54d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e53a:	0f b6 d2             	movzx  edx,dl
c001e53d:	0f b6 db             	movzx  ebx,bl
c001e540:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e547:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e54b:	eb 17                	jmp    c001e564 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e54d:	80 fb 15             	cmp    bl,0x15
c001e550:	77 13                	ja     c001e565 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e552:	0f b6 d2             	movzx  edx,dl
c001e555:	0f b6 db             	movzx  ebx,bl
c001e558:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e560:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e564:	ee                   	out    dx,al
c001e565:	83 c4 1c             	add    esp,0x1c
c001e568:	5b                   	pop    ebx
c001e569:	5e                   	pop    esi
c001e56a:	5f                   	pop    edi
c001e56b:	5d                   	pop    ebp
c001e56c:	c3                   	ret    
c001e56d:	90                   	nop

c001e56e <IDE::read(unsigned char, unsigned char)>:
c001e56e:	55                   	push   ebp
c001e56f:	57                   	push   edi
c001e570:	56                   	push   esi
c001e571:	53                   	push   ebx
c001e572:	83 ec 1c             	sub    esp,0x1c
c001e575:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e579:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e57d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e580:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e584:	3c 03                	cmp    al,0x3
c001e586:	77 43                	ja     c001e5cb <IDE::read(unsigned char, unsigned char)+0x5d>
c001e588:	0f b6 f2             	movzx  esi,dl
c001e58b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e58e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e592:	83 c8 80             	or     eax,0xffffff80
c001e595:	0f b6 c0             	movzx  eax,al
c001e598:	50                   	push   eax
c001e599:	6a 0c                	push   0xc
c001e59b:	56                   	push   esi
c001e59c:	57                   	push   edi
c001e59d:	e8 0c ff ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5a2:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e5a7:	0f b6 c3             	movzx  eax,bl
c001e5aa:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e5ae:	ec                   	in     al,dx
c001e5af:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e5b3:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e5b8:	52                   	push   edx
c001e5b9:	6a 0c                	push   0xc
c001e5bb:	56                   	push   esi
c001e5bc:	57                   	push   edi
c001e5bd:	e8 ec fe ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5c2:	83 c4 20             	add    esp,0x20
c001e5c5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e5c9:	eb 49                	jmp    c001e614 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e5cb:	80 fb 07             	cmp    bl,0x7
c001e5ce:	77 12                	ja     c001e5e2 <IDE::read(unsigned char, unsigned char)+0x74>
c001e5d0:	0f b6 d2             	movzx  edx,dl
c001e5d3:	0f b6 c3             	movzx  eax,bl
c001e5d6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e5de:	89 c2                	mov    edx,eax
c001e5e0:	eb 31                	jmp    c001e613 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e5e2:	80 fb 0d             	cmp    bl,0xd
c001e5e5:	77 13                	ja     c001e5fa <IDE::read(unsigned char, unsigned char)+0x8c>
c001e5e7:	0f b6 d2             	movzx  edx,dl
c001e5ea:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e5f1:	0f b6 d3             	movzx  edx,bl
c001e5f4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e5f8:	eb 19                	jmp    c001e613 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e5fa:	31 c0                	xor    eax,eax
c001e5fc:	80 fb 15             	cmp    bl,0x15
c001e5ff:	77 13                	ja     c001e614 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e601:	0f b6 d2             	movzx  edx,dl
c001e604:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e60c:	0f b6 d3             	movzx  edx,bl
c001e60f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e613:	ec                   	in     al,dx
c001e614:	83 c4 1c             	add    esp,0x1c
c001e617:	5b                   	pop    ebx
c001e618:	5e                   	pop    esi
c001e619:	5f                   	pop    edi
c001e61a:	5d                   	pop    ebp
c001e61b:	c3                   	ret    

c001e61c <IDE::waitInterrupt(unsigned char)>:
c001e61c:	55                   	push   ebp
c001e61d:	57                   	push   edi
c001e61e:	56                   	push   esi
c001e61f:	53                   	push   ebx
c001e620:	31 db                	xor    ebx,ebx
c001e622:	83 ec 0c             	sub    esp,0xc
c001e625:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e629:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e62e:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e636:	89 e8                	mov    eax,ebp
c001e638:	84 c0                	test   al,al
c001e63a:	75 30                	jne    c001e66c <IDE::waitInterrupt(unsigned char)+0x50>
c001e63c:	50                   	push   eax
c001e63d:	6a 0c                	push   0xc
c001e63f:	56                   	push   esi
c001e640:	57                   	push   edi
c001e641:	e8 28 ff ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001e646:	83 c4 10             	add    esp,0x10
c001e649:	a8 01                	test   al,0x1
c001e64b:	75 27                	jne    c001e674 <IDE::waitInterrupt(unsigned char)+0x58>
c001e64d:	f6 c3 04             	test   bl,0x4
c001e650:	75 12                	jne    c001e664 <IDE::waitInterrupt(unsigned char)+0x48>
c001e652:	83 fb 32             	cmp    ebx,0x32
c001e655:	7e 0d                	jle    c001e664 <IDE::waitInterrupt(unsigned char)+0x48>
c001e657:	83 ec 0c             	sub    esp,0xc
c001e65a:	6a 64                	push   0x64
c001e65c:	e8 c3 a3 ff ff       	call   c0018a24 <milliTenthSleep(unsigned int)>
c001e661:	83 c4 10             	add    esp,0x10
c001e664:	83 fb 3c             	cmp    ebx,0x3c
c001e667:	74 0b                	je     c001e674 <IDE::waitInterrupt(unsigned char)+0x58>
c001e669:	43                   	inc    ebx
c001e66a:	eb c2                	jmp    c001e62e <IDE::waitInterrupt(unsigned char)+0x12>
c001e66c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e674:	83 c4 0c             	add    esp,0xc
c001e677:	89 e8                	mov    eax,ebp
c001e679:	5b                   	pop    ebx
c001e67a:	5e                   	pop    esi
c001e67b:	5f                   	pop    edi
c001e67c:	5d                   	pop    ebp
c001e67d:	c3                   	ret    

c001e67e <ideChannel0IRQHandler(regs*, void*)>:
c001e67e:	83 ec 10             	sub    esp,0x10
c001e681:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e685:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e68c:	6a 07                	push   0x7
c001e68e:	6a 00                	push   0x0
c001e690:	50                   	push   eax
c001e691:	e8 d8 fe ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001e696:	83 c4 1c             	add    esp,0x1c
c001e699:	c3                   	ret    

c001e69a <ideChannel1IRQHandler(regs*, void*)>:
c001e69a:	83 ec 10             	sub    esp,0x10
c001e69d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e6a1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e6a8:	6a 07                	push   0x7
c001e6aa:	6a 01                	push   0x1
c001e6ac:	50                   	push   eax
c001e6ad:	e8 bc fe ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001e6b2:	83 c4 1c             	add    esp,0x1c
c001e6b5:	c3                   	ret    

c001e6b6 <IDE::enableIRQs(unsigned char, bool)>:
c001e6b6:	57                   	push   edi
c001e6b7:	56                   	push   esi
c001e6b8:	be 04 00 00 00       	mov    esi,0x4
c001e6bd:	53                   	push   ebx
c001e6be:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e6c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6c7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e6cc:	0f 94 c0             	sete   al
c001e6cf:	d1 e0                	shl    eax,1
c001e6d1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e6d8:	0f b6 c0             	movzx  eax,al
c001e6db:	50                   	push   eax
c001e6dc:	6a 0c                	push   0xc
c001e6de:	57                   	push   edi
c001e6df:	53                   	push   ebx
c001e6e0:	e8 c9 fd ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6e5:	83 c4 10             	add    esp,0x10
c001e6e8:	50                   	push   eax
c001e6e9:	6a 0c                	push   0xc
c001e6eb:	57                   	push   edi
c001e6ec:	53                   	push   ebx
c001e6ed:	e8 7c fe ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001e6f2:	83 c4 10             	add    esp,0x10
c001e6f5:	4e                   	dec    esi
c001e6f6:	75 f0                	jne    c001e6e8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e6f8:	5b                   	pop    ebx
c001e6f9:	5e                   	pop    esi
c001e6fa:	5f                   	pop    edi
c001e6fb:	c3                   	ret    

c001e6fc <IDE::open(int, int, void*)>:
c001e6fc:	55                   	push   ebp
c001e6fd:	57                   	push   edi
c001e6fe:	56                   	push   esi
c001e6ff:	53                   	push   ebx
c001e700:	83 ec 1c             	sub    esp,0x1c
c001e703:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e707:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e710:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e719:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e720:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e727:	0f 85 b0 02 00 00    	jne    c001e9dd <IDE::open(int, int, void*)+0x2e1>
c001e72d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e733:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e737:	83 e0 7f             	and    eax,0x7f
c001e73a:	3c 05                	cmp    al,0x5
c001e73c:	74 04                	je     c001e742 <IDE::open(int, int, void*)+0x46>
c001e73e:	3c 0f                	cmp    al,0xf
c001e740:	75 32                	jne    c001e774 <IDE::open(int, int, void*)+0x78>
c001e742:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e748:	83 e0 fc             	and    eax,0xfffffffc
c001e74b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e752:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e758:	83 e0 fc             	and    eax,0xfffffffc
c001e75b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e762:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e768:	83 e0 fc             	and    eax,0xfffffffc
c001e76b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e772:	eb 14                	jmp    c001e788 <IDE::open(int, int, void*)+0x8c>
c001e774:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e77e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e788:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e78f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e796:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e79a:	89 c6                	mov    esi,eax
c001e79c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e7a1:	c1 e6 10             	shl    esi,0x10
c001e7a4:	89 e8                	mov    eax,ebp
c001e7a6:	89 fa                	mov    edx,edi
c001e7a8:	c1 e0 0b             	shl    eax,0xb
c001e7ab:	09 f0                	or     eax,esi
c001e7ad:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e7b4:	c1 e6 08             	shl    esi,0x8
c001e7b7:	09 c6                	or     esi,eax
c001e7b9:	89 f0                	mov    eax,esi
c001e7bb:	0d 08 00 00 80       	or     eax,0x80000008
c001e7c0:	ef                   	out    dx,eax
c001e7c1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e7c6:	89 ca                	mov    edx,ecx
c001e7c8:	ed                   	in     eax,dx
c001e7c9:	c1 e8 10             	shr    eax,0x10
c001e7cc:	3d ff ff 00 00       	cmp    eax,0xffff
c001e7d1:	0f 84 f5 00 00 00    	je     c001e8cc <IDE::open(int, int, void*)+0x1d0>
c001e7d7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e7dd:	89 fa                	mov    edx,edi
c001e7df:	89 f0                	mov    eax,esi
c001e7e1:	ef                   	out    dx,eax
c001e7e2:	b0 fe                	mov    al,0xfe
c001e7e4:	89 ca                	mov    edx,ecx
c001e7e6:	ee                   	out    dx,al
c001e7e7:	89 f0                	mov    eax,esi
c001e7e9:	89 fa                	mov    edx,edi
c001e7eb:	ef                   	out    dx,eax
c001e7ec:	89 ca                	mov    edx,ecx
c001e7ee:	ed                   	in     eax,dx
c001e7ef:	3c fe                	cmp    al,0xfe
c001e7f1:	0f 85 a9 00 00 00    	jne    c001e8a0 <IDE::open(int, int, void*)+0x1a4>
c001e7f7:	8b 15 e8 80 02 c0    	mov    edx,DWORD PTR ds:0xc00280e8
c001e7fd:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e804:	74 33                	je     c001e839 <IDE::open(int, int, void*)+0x13d>
c001e806:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e80c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e810:	40                   	inc    eax
c001e811:	83 ec 0c             	sub    esp,0xc
c001e814:	0f b6 c0             	movzx  eax,al
c001e817:	50                   	push   eax
c001e818:	55                   	push   ebp
c001e819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e81d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e823:	51                   	push   ecx
c001e824:	e8 8b 39 ff ff       	call   c00121b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e829:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e82e:	83 c4 1c             	add    esp,0x1c
c001e831:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e837:	eb 0a                	jmp    c001e843 <IDE::open(int, int, void*)+0x147>
c001e839:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e843:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e84a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e851:	c1 e1 10             	shl    ecx,0x10
c001e854:	c1 e0 08             	shl    eax,0x8
c001e857:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e85c:	09 c1                	or     ecx,eax
c001e85e:	89 fa                	mov    edx,edi
c001e860:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e867:	c1 e0 0b             	shl    eax,0xb
c001e86a:	09 c1                	or     ecx,eax
c001e86c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e872:	89 c8                	mov    eax,ecx
c001e874:	ef                   	out    dx,eax
c001e875:	be fc 0c 00 00       	mov    esi,0xcfc
c001e87a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e880:	89 f2                	mov    edx,esi
c001e882:	ee                   	out    dx,al
c001e883:	89 c8                	mov    eax,ecx
c001e885:	89 fa                	mov    edx,edi
c001e887:	ef                   	out    dx,eax
c001e888:	89 f2                	mov    edx,esi
c001e88a:	ed                   	in     eax,dx
c001e88b:	0f b6 c0             	movzx  eax,al
c001e88e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e894:	74 46                	je     c001e8dc <IDE::open(int, int, void*)+0x1e0>
c001e896:	83 ec 0c             	sub    esp,0xc
c001e899:	68 64 69 02 c0       	push   0xc0026964
c001e89e:	eb 34                	jmp    c001e8d4 <IDE::open(int, int, void*)+0x1d8>
c001e8a0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e8a9:	75 17                	jne    c001e8c2 <IDE::open(int, int, void*)+0x1c6>
c001e8ab:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e8b0:	74 07                	je     c001e8b9 <IDE::open(int, int, void*)+0x1bd>
c001e8b2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e8b7:	75 09                	jne    c001e8c2 <IDE::open(int, int, void*)+0x1c6>
c001e8b9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e8c0:	eb 1a                	jmp    c001e8dc <IDE::open(int, int, void*)+0x1e0>
c001e8c2:	83 ec 0c             	sub    esp,0xc
c001e8c5:	68 6c 69 02 c0       	push   0xc002696c
c001e8ca:	eb 08                	jmp    c001e8d4 <IDE::open(int, int, void*)+0x1d8>
c001e8cc:	83 ec 0c             	sub    esp,0xc
c001e8cf:	68 9d 69 02 c0       	push   0xc002699d
c001e8d4:	e8 ee 60 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001e8d9:	83 c4 10             	add    esp,0x10
c001e8dc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e8e3:	79 1a                	jns    c001e8ff <IDE::open(int, int, void*)+0x203>
c001e8e5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e8eb:	83 e0 fc             	and    eax,0xfffffffc
c001e8ee:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e8f5:	83 c0 08             	add    eax,0x8
c001e8f8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e8ff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e905:	89 c2                	mov    edx,eax
c001e907:	83 e2 0f             	and    edx,0xf
c001e90a:	66 83 fa 08          	cmp    dx,0x8
c001e90e:	75 0a                	jne    c001e91a <IDE::open(int, int, void*)+0x21e>
c001e910:	83 e8 02             	sub    eax,0x2
c001e913:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e91a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e920:	89 c2                	mov    edx,eax
c001e922:	83 e2 0f             	and    edx,0xf
c001e925:	66 83 fa 08          	cmp    dx,0x8
c001e929:	75 0a                	jne    c001e935 <IDE::open(int, int, void*)+0x239>
c001e92b:	83 e8 02             	sub    eax,0x2
c001e92e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e935:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e93c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e943:	89 d0                	mov    eax,edx
c001e945:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e948:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e94c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e950:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e953:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e958:	0f b6 c9             	movzx  ecx,cl
c001e95b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e962:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e965:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e969:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e96d:	8d 50 02             	lea    edx,[eax+0x2]
c001e970:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e975:	0f b6 d2             	movzx  edx,dl
c001e978:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e97e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e981:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e985:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e989:	8d 48 03             	lea    ecx,[eax+0x3]
c001e98c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e991:	0f b6 c9             	movzx  ecx,cl
c001e994:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e99a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e99d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e9a1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e9a5:	8d 50 04             	lea    edx,[eax+0x4]
c001e9a8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e9ae:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e9b3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e9ba:	66 85 f6             	test   si,si
c001e9bd:	74 5b                	je     c001ea1a <IDE::open(int, int, void*)+0x31e>
c001e9bf:	0f b6 d2             	movzx  edx,dl
c001e9c2:	83 c0 05             	add    eax,0x5
c001e9c5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e9c8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e9cc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e9d0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e9d6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e9db:	eb 3d                	jmp    c001ea1a <IDE::open(int, int, void*)+0x31e>
c001e9dd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e9e3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e9ea:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e9f1:	66 05 06 02          	add    ax,0x206
c001e9f5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e9fc:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ea03:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ea0a:	66 05 06 02          	add    ax,0x206
c001ea0e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ea15:	e9 e5 fe ff ff       	jmp    c001e8ff <IDE::open(int, int, void*)+0x203>
c001ea1a:	50                   	push   eax
c001ea1b:	50                   	push   eax
c001ea1c:	6a 00                	push   0x0
c001ea1e:	53                   	push   ebx
c001ea1f:	e8 64 fa ff ff       	call   c001e488 <IDE::prepareInterrupt(unsigned char)>
c001ea24:	5a                   	pop    edx
c001ea25:	59                   	pop    ecx
c001ea26:	6a 01                	push   0x1
c001ea28:	53                   	push   ebx
c001ea29:	e8 5a fa ff ff       	call   c001e488 <IDE::prepareInterrupt(unsigned char)>
c001ea2e:	83 c4 0c             	add    esp,0xc
c001ea31:	6a 00                	push   0x0
c001ea33:	6a 00                	push   0x0
c001ea35:	53                   	push   ebx
c001ea36:	e8 7b fc ff ff       	call   c001e6b6 <IDE::enableIRQs(unsigned char, bool)>
c001ea3b:	83 c4 0c             	add    esp,0xc
c001ea3e:	6a 00                	push   0x0
c001ea40:	6a 01                	push   0x1
c001ea42:	53                   	push   ebx
c001ea43:	e8 6e fc ff ff       	call   c001e6b6 <IDE::enableIRQs(unsigned char, bool)>
c001ea48:	83 c4 10             	add    esp,0x10
c001ea4b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ea52:	74 34                	je     c001ea88 <IDE::open(int, int, void*)+0x38c>
c001ea54:	83 ec 0c             	sub    esp,0xc
c001ea57:	53                   	push   ebx
c001ea58:	6a 01                	push   0x1
c001ea5a:	68 7e e6 01 c0       	push   0xc001e67e
c001ea5f:	6a 0e                	push   0xe
c001ea61:	53                   	push   ebx
c001ea62:	e8 4f f7 fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea67:	83 c4 14             	add    esp,0x14
c001ea6a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ea70:	53                   	push   ebx
c001ea71:	6a 01                	push   0x1
c001ea73:	68 9a e6 01 c0       	push   0xc001e69a
c001ea78:	6a 0f                	push   0xf
c001ea7a:	53                   	push   ebx
c001ea7b:	e8 36 f7 fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea80:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ea86:	eb 38                	jmp    c001eac0 <IDE::open(int, int, void*)+0x3c4>
c001ea88:	83 ec 0c             	sub    esp,0xc
c001ea8b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ea95:	53                   	push   ebx
c001ea96:	6a 00                	push   0x0
c001ea98:	68 7e e6 01 c0       	push   0xc001e67e
c001ea9d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001eaa3:	53                   	push   ebx
c001eaa4:	e8 0d f7 fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eaa9:	83 c4 14             	add    esp,0x14
c001eaac:	53                   	push   ebx
c001eaad:	6a 00                	push   0x0
c001eaaf:	68 9a e6 01 c0       	push   0xc001e69a
c001eab4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001eaba:	53                   	push   ebx
c001eabb:	e8 f6 f6 fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001eac0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eac2:	83 c4 20             	add    esp,0x20
c001eac5:	83 ec 0c             	sub    esp,0xc
c001eac8:	53                   	push   ebx
c001eac9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001eacc:	83 c4 0c             	add    esp,0xc
c001eacf:	6a 07                	push   0x7
c001ead1:	6a 00                	push   0x0
c001ead3:	53                   	push   ebx
c001ead4:	e8 95 fa ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ead9:	83 c4 0c             	add    esp,0xc
c001eadc:	6a 07                	push   0x7
c001eade:	6a 01                	push   0x1
c001eae0:	53                   	push   ebx
c001eae1:	e8 88 fa ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001eae6:	83 c4 0c             	add    esp,0xc
c001eae9:	6a 01                	push   0x1
c001eaeb:	6a 00                	push   0x0
c001eaed:	53                   	push   ebx
c001eaee:	e8 c3 fb ff ff       	call   c001e6b6 <IDE::enableIRQs(unsigned char, bool)>
c001eaf3:	83 c4 0c             	add    esp,0xc
c001eaf6:	6a 01                	push   0x1
c001eaf8:	6a 01                	push   0x1
c001eafa:	53                   	push   ebx
c001eafb:	e8 b6 fb ff ff       	call   c001e6b6 <IDE::enableIRQs(unsigned char, bool)>
c001eb00:	83 c4 2c             	add    esp,0x2c
c001eb03:	31 c0                	xor    eax,eax
c001eb05:	5b                   	pop    ebx
c001eb06:	5e                   	pop    esi
c001eb07:	5f                   	pop    edi
c001eb08:	5d                   	pop    ebp
c001eb09:	c3                   	ret    

c001eb0a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001eb0a:	55                   	push   ebp
c001eb0b:	57                   	push   edi
c001eb0c:	56                   	push   esi
c001eb0d:	53                   	push   ebx
c001eb0e:	83 ec 1c             	sub    esp,0x1c
c001eb11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eb15:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001eb19:	8d 50 f8             	lea    edx,[eax-0x8]
c001eb1c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eb20:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001eb24:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001eb28:	80 fa 03             	cmp    dl,0x3
c001eb2b:	77 5d                	ja     c001eb8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001eb2d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eb35:	0f b6 db             	movzx  ebx,bl
c001eb38:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001eb3b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001eb3f:	83 ca 80             	or     edx,0xffffff80
c001eb42:	0f b6 d2             	movzx  edx,dl
c001eb45:	52                   	push   edx
c001eb46:	6a 0c                	push   0xc
c001eb48:	53                   	push   ebx
c001eb49:	56                   	push   esi
c001eb4a:	e8 5f f9 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb4f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001eb54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb58:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eb5c:	0f b6 c0             	movzx  eax,al
c001eb5f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001eb63:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001eb65:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001eb6a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001eb6e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001eb72:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eb76:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eb7e:	83 c4 2c             	add    esp,0x2c
c001eb81:	5b                   	pop    ebx
c001eb82:	5e                   	pop    esi
c001eb83:	5f                   	pop    edi
c001eb84:	5d                   	pop    ebp
c001eb85:	e9 24 f9 ff ff       	jmp    c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb8a:	3c 07                	cmp    al,0x7
c001eb8c:	77 10                	ja     c001eb9e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001eb8e:	0f b6 db             	movzx  ebx,bl
c001eb91:	0f b6 d0             	movzx  edx,al
c001eb94:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001eb9c:	eb 2d                	jmp    c001ebcb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001eb9e:	3c 0d                	cmp    al,0xd
c001eba0:	77 13                	ja     c001ebb5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001eba2:	0f b6 db             	movzx  ebx,bl
c001eba5:	0f b6 c0             	movzx  eax,al
c001eba8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ebaf:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ebb3:	eb 16                	jmp    c001ebcb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ebb5:	3c 15                	cmp    al,0x15
c001ebb7:	77 14                	ja     c001ebcd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ebb9:	0f b6 db             	movzx  ebx,bl
c001ebbc:	0f b6 c0             	movzx  eax,al
c001ebbf:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ebc7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ebcb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ebcd:	83 c4 1c             	add    esp,0x1c
c001ebd0:	5b                   	pop    ebx
c001ebd1:	5e                   	pop    esi
c001ebd2:	5f                   	pop    edi
c001ebd3:	5d                   	pop    ebp
c001ebd4:	c3                   	ret    
c001ebd5:	90                   	nop

c001ebd6 <IDE::detect()>:
c001ebd6:	55                   	push   ebp
c001ebd7:	57                   	push   edi
c001ebd8:	56                   	push   esi
c001ebd9:	53                   	push   ebx
c001ebda:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ebe0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ebe7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ebee:	0f 85 97 02 00 00    	jne    c001ee8b <IDE::detect()+0x2b5>
c001ebf4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ebfb:	31 f6                	xor    esi,esi
c001ebfd:	31 ed                	xor    ebp,ebp
c001ebff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ec07:	89 e8                	mov    eax,ebp
c001ec09:	c1 e0 06             	shl    eax,0x6
c001ec0c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ec14:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ec18:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ec1c:	c1 e0 04             	shl    eax,0x4
c001ec1f:	83 c8 a0             	or     eax,0xffffffa0
c001ec22:	0f b6 c0             	movzx  eax,al
c001ec25:	50                   	push   eax
c001ec26:	6a 06                	push   0x6
c001ec28:	56                   	push   esi
c001ec29:	53                   	push   ebx
c001ec2a:	e8 7f f8 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec2f:	83 c4 0c             	add    esp,0xc
c001ec32:	6a 0c                	push   0xc
c001ec34:	56                   	push   esi
c001ec35:	53                   	push   ebx
c001ec36:	e8 33 f9 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ec3b:	83 c4 0c             	add    esp,0xc
c001ec3e:	6a 0c                	push   0xc
c001ec40:	56                   	push   esi
c001ec41:	53                   	push   ebx
c001ec42:	e8 27 f9 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ec47:	83 c4 0c             	add    esp,0xc
c001ec4a:	6a 0c                	push   0xc
c001ec4c:	56                   	push   esi
c001ec4d:	53                   	push   ebx
c001ec4e:	e8 1b f9 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ec53:	83 c4 0c             	add    esp,0xc
c001ec56:	6a 0c                	push   0xc
c001ec58:	56                   	push   esi
c001ec59:	53                   	push   ebx
c001ec5a:	e8 0f f9 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ec5f:	68 ec 00 00 00       	push   0xec
c001ec64:	6a 07                	push   0x7
c001ec66:	56                   	push   esi
c001ec67:	53                   	push   ebx
c001ec68:	e8 41 f8 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec6d:	83 c4 1c             	add    esp,0x1c
c001ec70:	6a 0c                	push   0xc
c001ec72:	56                   	push   esi
c001ec73:	53                   	push   ebx
c001ec74:	e8 f5 f8 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ec79:	83 c4 0c             	add    esp,0xc
c001ec7c:	6a 0c                	push   0xc
c001ec7e:	56                   	push   esi
c001ec7f:	53                   	push   ebx
c001ec80:	e8 e9 f8 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ec85:	83 c4 0c             	add    esp,0xc
c001ec88:	6a 0c                	push   0xc
c001ec8a:	56                   	push   esi
c001ec8b:	53                   	push   ebx
c001ec8c:	e8 dd f8 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ec91:	83 c4 0c             	add    esp,0xc
c001ec94:	6a 0c                	push   0xc
c001ec96:	56                   	push   esi
c001ec97:	53                   	push   ebx
c001ec98:	e8 d1 f8 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ec9d:	83 c4 0c             	add    esp,0xc
c001eca0:	6a 0c                	push   0xc
c001eca2:	56                   	push   esi
c001eca3:	53                   	push   ebx
c001eca4:	e8 c5 f8 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001eca9:	83 c4 10             	add    esp,0x10
c001ecac:	84 c0                	test   al,al
c001ecae:	0f 84 5f 01 00 00    	je     c001ee13 <IDE::detect()+0x23d>
c001ecb4:	31 ff                	xor    edi,edi
c001ecb6:	50                   	push   eax
c001ecb7:	6a 0c                	push   0xc
c001ecb9:	56                   	push   esi
c001ecba:	53                   	push   ebx
c001ecbb:	e8 ae f8 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ecc0:	83 c4 10             	add    esp,0x10
c001ecc3:	a8 01                	test   al,0x1
c001ecc5:	0f 85 69 01 00 00    	jne    c001ee34 <IDE::detect()+0x25e>
c001eccb:	84 c0                	test   al,al
c001eccd:	78 04                	js     c001ecd3 <IDE::detect()+0xfd>
c001eccf:	a8 08                	test   al,0x8
c001ecd1:	75 23                	jne    c001ecf6 <IDE::detect()+0x120>
c001ecd3:	47                   	inc    edi
c001ecd4:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ecda:	7e da                	jle    c001ecb6 <IDE::detect()+0xe0>
c001ecdc:	83 ec 0c             	sub    esp,0xc
c001ecdf:	6a 32                	push   0x32
c001ece1:	e8 3e 9d ff ff       	call   c0018a24 <milliTenthSleep(unsigned int)>
c001ece6:	83 c4 10             	add    esp,0x10
c001ece9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ecef:	75 c5                	jne    c001ecb6 <IDE::detect()+0xe0>
c001ecf1:	e9 3e 01 00 00       	jmp    c001ee34 <IDE::detect()+0x25e>
c001ecf6:	31 c9                	xor    ecx,ecx
c001ecf8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ecfc:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ed00:	83 ec 0c             	sub    esp,0xc
c001ed03:	68 80 00 00 00       	push   0x80
c001ed08:	57                   	push   edi
c001ed09:	6a 00                	push   0x0
c001ed0b:	56                   	push   esi
c001ed0c:	53                   	push   ebx
c001ed0d:	e8 f8 fd ff ff       	call   c001eb0a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ed12:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ed17:	89 e8                	mov    eax,ebp
c001ed19:	89 d1                	mov    ecx,edx
c001ed1b:	c1 e0 06             	shl    eax,0x6
c001ed1e:	01 d8                	add    eax,ebx
c001ed20:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ed27:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ed2e:	89 f2                	mov    edx,esi
c001ed30:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ed36:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ed3a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ed40:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ed44:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ed4b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ed53:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ed5a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ed62:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ed68:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ed6f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ed75:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ed79:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ed7d:	83 c4 20             	add    esp,0x20
c001ed80:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ed83:	83 c0 02             	add    eax,0x2
c001ed86:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ed8c:	83 c7 02             	add    edi,0x2
c001ed8f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ed92:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ed98:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001ed9c:	75 e2                	jne    c001ed80 <IDE::detect()+0x1aa>
c001ed9e:	89 e8                	mov    eax,ebp
c001eda0:	c1 e0 06             	shl    eax,0x6
c001eda3:	01 d8                	add    eax,ebx
c001eda5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001edab:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001edb2:	66 c1 ea 09          	shr    dx,0x9
c001edb6:	83 e2 01             	and    edx,0x1
c001edb9:	84 c9                	test   cl,cl
c001edbb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001edc1:	75 22                	jne    c001ede5 <IDE::detect()+0x20f>
c001edc3:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001edca:	74 46                	je     c001ee12 <IDE::detect()+0x23c>
c001edcc:	83 ec 0c             	sub    esp,0xc
c001edcf:	68 7c 01 00 00       	push   0x17c
c001edd4:	e8 36 ac fe ff       	call   c0009a0f <malloc>
c001edd9:	89 c7                	mov    edi,eax
c001eddb:	89 04 24             	mov    DWORD PTR [esp],eax
c001edde:	e8 97 07 00 00       	call   c001f57a <ATA::ATA()>
c001ede3:	eb 17                	jmp    c001edfc <IDE::detect()+0x226>
c001ede5:	83 ec 0c             	sub    esp,0xc
c001ede8:	68 84 01 00 00       	push   0x184
c001eded:	e8 1d ac fe ff       	call   c0009a0f <malloc>
c001edf2:	89 c7                	mov    edi,eax
c001edf4:	89 04 24             	mov    DWORD PTR [esp],eax
c001edf7:	e8 06 0e 00 00       	call   c001fc02 <ATAPI::ATAPI()>
c001edfc:	5a                   	pop    edx
c001edfd:	59                   	pop    ecx
c001edfe:	57                   	push   edi
c001edff:	53                   	push   ebx
c001ee00:	e8 39 f4 fe ff       	call   c000e23e <Device::addChild(Device*)>
c001ee05:	8b 07                	mov    eax,DWORD PTR [edi]
c001ee07:	53                   	push   ebx
c001ee08:	55                   	push   ebp
c001ee09:	6a 00                	push   0x0
c001ee0b:	57                   	push   edi
c001ee0c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee0f:	83 c4 20             	add    esp,0x20
c001ee12:	45                   	inc    ebp
c001ee13:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ee18:	74 0d                	je     c001ee27 <IDE::detect()+0x251>
c001ee1a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ee22:	e9 e0 fd ff ff       	jmp    c001ec07 <IDE::detect()+0x31>
c001ee27:	4e                   	dec    esi
c001ee28:	74 61                	je     c001ee8b <IDE::detect()+0x2b5>
c001ee2a:	be 01 00 00 00       	mov    esi,0x1
c001ee2f:	e9 cb fd ff ff       	jmp    c001ebff <IDE::detect()+0x29>
c001ee34:	50                   	push   eax
c001ee35:	6a 04                	push   0x4
c001ee37:	56                   	push   esi
c001ee38:	53                   	push   ebx
c001ee39:	e8 30 f7 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ee3e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ee42:	83 c4 0c             	add    esp,0xc
c001ee45:	6a 05                	push   0x5
c001ee47:	56                   	push   esi
c001ee48:	53                   	push   ebx
c001ee49:	e8 20 f7 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ee4e:	83 c4 10             	add    esp,0x10
c001ee51:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ee55:	80 fa 14             	cmp    dl,0x14
c001ee58:	75 04                	jne    c001ee5e <IDE::detect()+0x288>
c001ee5a:	3c eb                	cmp    al,0xeb
c001ee5c:	eb 07                	jmp    c001ee65 <IDE::detect()+0x28f>
c001ee5e:	3c 96                	cmp    al,0x96
c001ee60:	75 b1                	jne    c001ee13 <IDE::detect()+0x23d>
c001ee62:	80 fa 69             	cmp    dl,0x69
c001ee65:	75 ac                	jne    c001ee13 <IDE::detect()+0x23d>
c001ee67:	68 a1 00 00 00       	push   0xa1
c001ee6c:	6a 07                	push   0x7
c001ee6e:	56                   	push   esi
c001ee6f:	53                   	push   ebx
c001ee70:	e8 39 f6 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee75:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ee7c:	e8 a3 9b ff ff       	call   c0018a24 <milliTenthSleep(unsigned int)>
c001ee81:	83 c4 10             	add    esp,0x10
c001ee84:	b1 01                	mov    cl,0x1
c001ee86:	e9 6d fe ff ff       	jmp    c001ecf8 <IDE::detect()+0x122>
c001ee8b:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ee91:	5b                   	pop    ebx
c001ee92:	5e                   	pop    esi
c001ee93:	5f                   	pop    edi
c001ee94:	5d                   	pop    ebp
c001ee95:	c3                   	ret    

c001ee96 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ee96:	55                   	push   ebp
c001ee97:	57                   	push   edi
c001ee98:	56                   	push   esi
c001ee99:	53                   	push   ebx
c001ee9a:	83 ec 1c             	sub    esp,0x1c
c001ee9d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eea1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eea5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001eea9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001eead:	88 c3                	mov    bl,al
c001eeaf:	84 c0                	test   al,al
c001eeb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eeb5:	0f 84 81 00 00 00    	je     c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001eebb:	83 ec 0c             	sub    esp,0xc
c001eebe:	68 c7 69 02 c0       	push   0xc00269c7
c001eec3:	e8 37 de fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001eec8:	83 c4 10             	add    esp,0x10
c001eecb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eecf:	3c 01                	cmp    al,0x1
c001eed1:	74 63                	je     c001ef36 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001eed3:	3c 02                	cmp    al,0x2
c001eed5:	75 53                	jne    c001ef2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001eed7:	d1 e6                	shl    esi,1
c001eed9:	09 ee                	or     esi,ebp
c001eedb:	50                   	push   eax
c001eedc:	89 f0                	mov    eax,esi
c001eede:	6a 01                	push   0x1
c001eee0:	0f b6 f0             	movzx  esi,al
c001eee3:	c1 e6 06             	shl    esi,0x6
c001eee6:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001eeee:	50                   	push   eax
c001eeef:	57                   	push   edi
c001eef0:	e8 79 f6 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001eef5:	83 c4 10             	add    esp,0x10
c001eef8:	a8 01                	test   al,0x1
c001eefa:	74 02                	je     c001eefe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001eefc:	b3 07                	mov    bl,0x7
c001eefe:	a8 02                	test   al,0x2
c001ef00:	74 02                	je     c001ef04 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001ef02:	b3 03                	mov    bl,0x3
c001ef04:	a8 04                	test   al,0x4
c001ef06:	74 02                	je     c001ef0a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001ef08:	b3 14                	mov    bl,0x14
c001ef0a:	a8 08                	test   al,0x8
c001ef0c:	74 02                	je     c001ef10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001ef0e:	b3 03                	mov    bl,0x3
c001ef10:	a8 10                	test   al,0x10
c001ef12:	74 02                	je     c001ef16 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001ef14:	b3 15                	mov    bl,0x15
c001ef16:	a8 20                	test   al,0x20
c001ef18:	74 02                	je     c001ef1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ef1a:	b3 03                	mov    bl,0x3
c001ef1c:	a8 40                	test   al,0x40
c001ef1e:	74 02                	je     c001ef22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ef20:	b3 16                	mov    bl,0x16
c001ef22:	84 c0                	test   al,al
c001ef24:	79 16                	jns    c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef26:	b3 0d                	mov    bl,0xd
c001ef28:	eb 12                	jmp    c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef2a:	3c 03                	cmp    al,0x3
c001ef2c:	74 0c                	je     c001ef3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ef2e:	3c 04                	cmp    al,0x4
c001ef30:	75 0a                	jne    c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef32:	b3 08                	mov    bl,0x8
c001ef34:	eb 06                	jmp    c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef36:	b3 13                	mov    bl,0x13
c001ef38:	eb 02                	jmp    c001ef3c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ef3a:	b3 17                	mov    bl,0x17
c001ef3c:	83 c4 1c             	add    esp,0x1c
c001ef3f:	88 d8                	mov    al,bl
c001ef41:	5b                   	pop    ebx
c001ef42:	5e                   	pop    esi
c001ef43:	5f                   	pop    edi
c001ef44:	5d                   	pop    ebp
c001ef45:	c3                   	ret    

c001ef46 <IDE::polling(unsigned char, unsigned int)>:
c001ef46:	57                   	push   edi
c001ef47:	56                   	push   esi
c001ef48:	53                   	push   ebx
c001ef49:	bb 04 00 00 00       	mov    ebx,0x4
c001ef4e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ef52:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ef57:	52                   	push   edx
c001ef58:	6a 0c                	push   0xc
c001ef5a:	56                   	push   esi
c001ef5b:	57                   	push   edi
c001ef5c:	e8 0d f6 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ef61:	83 c4 10             	add    esp,0x10
c001ef64:	4b                   	dec    ebx
c001ef65:	75 f0                	jne    c001ef57 <IDE::polling(unsigned char, unsigned int)+0x11>
c001ef67:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ef6c:	50                   	push   eax
c001ef6d:	6a 0c                	push   0xc
c001ef6f:	56                   	push   esi
c001ef70:	57                   	push   edi
c001ef71:	e8 f8 f5 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001ef76:	83 c4 10             	add    esp,0x10
c001ef79:	a8 01                	test   al,0x1
c001ef7b:	75 17                	jne    c001ef94 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ef7d:	a8 20                	test   al,0x20
c001ef7f:	75 0f                	jne    c001ef90 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ef81:	4b                   	dec    ebx
c001ef82:	74 10                	je     c001ef94 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ef84:	84 c0                	test   al,al
c001ef86:	78 e4                	js     c001ef6c <IDE::polling(unsigned char, unsigned int)+0x26>
c001ef88:	a8 08                	test   al,0x8
c001ef8a:	74 e0                	je     c001ef6c <IDE::polling(unsigned char, unsigned int)+0x26>
c001ef8c:	31 c0                	xor    eax,eax
c001ef8e:	eb 06                	jmp    c001ef96 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ef90:	b0 01                	mov    al,0x1
c001ef92:	eb 02                	jmp    c001ef96 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ef94:	b0 02                	mov    al,0x2
c001ef96:	5b                   	pop    ebx
c001ef97:	5e                   	pop    esi
c001ef98:	5f                   	pop    edi
c001ef99:	c3                   	ret    

c001ef9a <SATABus::close(int, int, void*)>:
c001ef9a:	31 c0                	xor    eax,eax
c001ef9c:	c3                   	ret    
c001ef9d:	90                   	nop

c001ef9e <SATABus::detect()>:
c001ef9e:	c3                   	ret    
c001ef9f:	90                   	nop

c001efa0 <SATABus::SATABus()>:
c001efa0:	83 ec 0c             	sub    esp,0xc
c001efa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa7:	83 ec 08             	sub    esp,0x8
c001efaa:	68 00 6a 02 c0       	push   0xc0026a00
c001efaf:	50                   	push   eax
c001efb0:	e8 37 f6 fe ff       	call   c000e5ec <HardDiskController::HardDiskController(char const*)>
c001efb5:	83 c4 10             	add    esp,0x10
c001efb8:	ba 30 6b 02 c0       	mov    edx,0xc0026b30
c001efbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc1:	89 10                	mov    DWORD PTR [eax],edx
c001efc3:	83 ec 0c             	sub    esp,0xc
c001efc6:	6a 50                	push   0x50
c001efc8:	e8 e4 b1 fe ff       	call   c000a1b1 <Phys::allocateContiguousPages(int)>
c001efcd:	83 c4 10             	add    esp,0x10
c001efd0:	89 c2                	mov    edx,eax
c001efd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001efdc:	83 ec 0c             	sub    esp,0xc
c001efdf:	6a 50                	push   0x50
c001efe1:	e8 f3 c9 fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c001efe6:	83 c4 10             	add    esp,0x10
c001efe9:	89 c2                	mov    edx,eax
c001efeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efef:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eff5:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c001effa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001effe:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f004:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f008:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f00e:	83 ec 0c             	sub    esp,0xc
c001f011:	6a 03                	push   0x3
c001f013:	6a 50                	push   0x50
c001f015:	51                   	push   ecx
c001f016:	52                   	push   edx
c001f017:	50                   	push   eax
c001f018:	e8 59 d3 fe ff       	call   c000c376 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f01d:	83 c4 20             	add    esp,0x20
c001f020:	90                   	nop
c001f021:	83 c4 0c             	add    esp,0xc
c001f024:	c3                   	ret    
c001f025:	90                   	nop

c001f026 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f026:	55                   	push   ebp
c001f027:	57                   	push   edi
c001f028:	56                   	push   esi
c001f029:	53                   	push   ebx
c001f02a:	83 ec 3c             	sub    esp,0x3c
c001f02d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f031:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001f038:	74 2d                	je     c001f067 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001f03a:	83 ec 0c             	sub    esp,0xc
c001f03d:	68 24 6a 02 c0       	push   0xc0026a24
c001f042:	e8 22 aa fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f047:	83 c4 10             	add    esp,0x10
c001f04a:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001f051:	75 14                	jne    c001f067 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x41>
c001f053:	e4 60                	in     al,0x60
c001f055:	3c 1c                	cmp    al,0x1c
c001f057:	74 04                	je     c001f05d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001f059:	3c 5a                	cmp    al,0x5a
c001f05b:	75 f6                	jne    c001f053 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2d>
c001f05d:	e4 60                	in     al,0x60
c001f05f:	3c 5a                	cmp    al,0x5a
c001f061:	74 fa                	je     c001f05d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001f063:	3c 1c                	cmp    al,0x1c
c001f065:	74 f6                	je     c001f05d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x37>
c001f067:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c001f06a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c001f06d:	09 c6                	or     esi,eax
c001f06f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f073:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f079:	8b 38                	mov    edi,DWORD PTR [eax]
c001f07b:	c1 ef 08             	shr    edi,0x8
c001f07e:	83 e7 0f             	and    edi,0xf
c001f081:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001f088:	75 04                	jne    c001f08e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x68>
c001f08a:	31 db                	xor    ebx,ebx
c001f08c:	eb 6f                	jmp    c001f0fd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xd7>
c001f08e:	83 ec 0c             	sub    esp,0xc
c001f091:	68 3b 6a 02 c0       	push   0xc0026a3b
c001f096:	e8 ce a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f09b:	83 c4 10             	add    esp,0x10
c001f09e:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001f0a5:	75 e3                	jne    c001f08a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001f0a7:	e4 60                	in     al,0x60
c001f0a9:	3c 1c                	cmp    al,0x1c
c001f0ab:	74 04                	je     c001f0b1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001f0ad:	3c 5a                	cmp    al,0x5a
c001f0af:	75 f6                	jne    c001f0a7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x81>
c001f0b1:	e4 60                	in     al,0x60
c001f0b3:	3c 5a                	cmp    al,0x5a
c001f0b5:	74 fa                	je     c001f0b1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001f0b7:	3c 1c                	cmp    al,0x1c
c001f0b9:	74 f6                	je     c001f0b1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x8b>
c001f0bb:	eb cd                	jmp    c001f08a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x64>
c001f0bd:	50                   	push   eax
c001f0be:	50                   	push   eax
c001f0bf:	68 52 6a 02 c0       	push   0xc0026a52
c001f0c4:	8d 6c 24 1a          	lea    ebp,[esp+0x1a]
c001f0c8:	55                   	push   ebp
c001f0c9:	e8 72 16 fe ff       	call   c0000740 <strcpy>
c001f0ce:	83 c4 10             	add    esp,0x10
c001f0d1:	89 d8                	mov    eax,ebx
c001f0d3:	b9 0a 00 00 00       	mov    ecx,0xa
c001f0d8:	99                   	cdq    
c001f0d9:	f7 f9                	idiv   ecx
c001f0db:	83 c0 30             	add    eax,0x30
c001f0de:	83 c2 30             	add    edx,0x30
c001f0e1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001f0e5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001f0e9:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001f0f0:	75 11                	jne    c001f103 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xdd>
c001f0f2:	f7 c6 01 00 00 00    	test   esi,0x1
c001f0f8:	74 34                	je     c001f12e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x108>
c001f0fa:	d1 ee                	shr    esi,1
c001f0fc:	43                   	inc    ebx
c001f0fd:	39 fb                	cmp    ebx,edi
c001f0ff:	75 bc                	jne    c001f0bd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x97>
c001f101:	eb 63                	jmp    c001f166 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x140>
c001f103:	83 ec 0c             	sub    esp,0xc
c001f106:	55                   	push   ebp
c001f107:	e8 5d a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f10c:	83 c4 10             	add    esp,0x10
c001f10f:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001f116:	75 da                	jne    c001f0f2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001f118:	e4 60                	in     al,0x60
c001f11a:	3c 1c                	cmp    al,0x1c
c001f11c:	74 04                	je     c001f122 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f11e:	3c 5a                	cmp    al,0x5a
c001f120:	75 f6                	jne    c001f118 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xf2>
c001f122:	e4 60                	in     al,0x60
c001f124:	3c 5a                	cmp    al,0x5a
c001f126:	74 fa                	je     c001f122 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f128:	3c 1c                	cmp    al,0x1c
c001f12a:	74 f6                	je     c001f122 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xfc>
c001f12c:	eb c4                	jmp    c001f0f2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0xcc>
c001f12e:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001f135:	74 78                	je     c001f1af <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f137:	83 ec 0c             	sub    esp,0xc
c001f13a:	68 6c 6a 02 c0       	push   0xc0026a6c
c001f13f:	e8 25 a9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f144:	83 c4 10             	add    esp,0x10
c001f147:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001f14e:	75 5f                	jne    c001f1af <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f150:	e4 60                	in     al,0x60
c001f152:	3c 5a                	cmp    al,0x5a
c001f154:	74 04                	je     c001f15a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f156:	3c 1c                	cmp    al,0x1c
c001f158:	75 f6                	jne    c001f150 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x12a>
c001f15a:	e4 60                	in     al,0x60
c001f15c:	3c 5a                	cmp    al,0x5a
c001f15e:	74 fa                	je     c001f15a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f160:	3c 1c                	cmp    al,0x1c
c001f162:	74 f6                	je     c001f15a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x134>
c001f164:	eb 49                	jmp    c001f1af <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x189>
c001f166:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001f16d:	74 2d                	je     c001f19c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001f16f:	83 ec 0c             	sub    esp,0xc
c001f172:	68 83 6a 02 c0       	push   0xc0026a83
c001f177:	e8 ed a8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f17c:	83 c4 10             	add    esp,0x10
c001f17f:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001f186:	75 14                	jne    c001f19c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x176>
c001f188:	e4 60                	in     al,0x60
c001f18a:	3c 5a                	cmp    al,0x5a
c001f18c:	74 04                	je     c001f192 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f18e:	3c 1c                	cmp    al,0x1c
c001f190:	75 f6                	jne    c001f188 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x162>
c001f192:	e4 60                	in     al,0x60
c001f194:	3c 5a                	cmp    al,0x5a
c001f196:	74 fa                	je     c001f192 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f198:	3c 1c                	cmp    al,0x1c
c001f19a:	74 f6                	je     c001f192 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x16c>
c001f19c:	83 ec 0c             	sub    esp,0xc
c001f19f:	83 cb ff             	or     ebx,0xffffffff
c001f1a2:	68 9a 6a 02 c0       	push   0xc0026a9a
c001f1a7:	e8 1b 58 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c001f1ac:	83 c4 10             	add    esp,0x10
c001f1af:	83 c4 3c             	add    esp,0x3c
c001f1b2:	89 d8                	mov    eax,ebx
c001f1b4:	5b                   	pop    ebx
c001f1b5:	5e                   	pop    esi
c001f1b6:	5f                   	pop    edi
c001f1b7:	5d                   	pop    ebp
c001f1b8:	c3                   	ret    
c001f1b9:	90                   	nop

c001f1ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f1ba:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1be:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f1c1:	89 c2                	mov    edx,eax
c001f1c3:	c1 ea 08             	shr    edx,0x8
c001f1c6:	83 e2 0f             	and    edx,0xf
c001f1c9:	fe ca                	dec    dl
c001f1cb:	75 31                	jne    c001f1fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f1cd:	83 e0 0f             	and    eax,0xf
c001f1d0:	3c 03                	cmp    al,0x3
c001f1d2:	75 2a                	jne    c001f1fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f1d4:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f1d7:	b8 02 00 00 00       	mov    eax,0x2
c001f1dc:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f1e2:	74 1c                	je     c001f200 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f1e4:	b8 04 00 00 00       	mov    eax,0x4
c001f1e9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f1ef:	74 0f                	je     c001f200 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f1f1:	31 c0                	xor    eax,eax
c001f1f3:	83 fa 03             	cmp    edx,0x3
c001f1f6:	0f 94 c0             	sete   al
c001f1f9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f1fd:	c3                   	ret    
c001f1fe:	31 c0                	xor    eax,eax
c001f200:	c3                   	ret    
c001f201:	90                   	nop

c001f202 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f202:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f206:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f209:	0f ba e2 0f          	bt     edx,0xf
c001f20d:	72 f7                	jb     c001f206 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f20f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f212:	83 ca 10             	or     edx,0x10
c001f215:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f218:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f21b:	83 ca 01             	or     edx,0x1
c001f21e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f221:	c3                   	ret    

c001f222 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f222:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f226:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f229:	83 e2 fe             	and    edx,0xfffffffe
c001f22c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f22f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f232:	83 e2 ef             	and    edx,0xffffffef
c001f235:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f238:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f23b:	0f ba e2 0e          	bt     edx,0xe
c001f23f:	72 f7                	jb     c001f238 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f241:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f244:	0f ba e2 0f          	bt     edx,0xf
c001f248:	72 ee                	jb     c001f238 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f24a:	c3                   	ret    
c001f24b:	90                   	nop

c001f24c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f24c:	55                   	push   ebp
c001f24d:	57                   	push   edi
c001f24e:	56                   	push   esi
c001f24f:	53                   	push   ebx
c001f250:	83 ec 1c             	sub    esp,0x1c
c001f253:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f257:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f25b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f25f:	53                   	push   ebx
c001f260:	89 fd                	mov    ebp,edi
c001f262:	56                   	push   esi
c001f263:	c1 e5 0a             	shl    ebp,0xa
c001f266:	e8 b7 ff ff ff       	call   c001f222 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f26b:	83 ec 0c             	sub    esp,0xc
c001f26e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f274:	01 e8                	add    eax,ebp
c001f276:	89 03                	mov    DWORD PTR [ebx],eax
c001f278:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f27a:	68 00 04 00 00       	push   0x400
c001f27f:	6a 00                	push   0x0
c001f281:	50                   	push   eax
c001f282:	e8 fd 13 fe ff       	call   c0000684 <memset>
c001f287:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f28d:	89 fa                	mov    edx,edi
c001f28f:	01 e8                	add    eax,ebp
c001f291:	c1 e7 0d             	shl    edi,0xd
c001f294:	89 03                	mov    DWORD PTR [ebx],eax
c001f296:	c1 e2 08             	shl    edx,0x8
c001f299:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f2a0:	81 c2 00 80 00 00    	add    edx,0x8000
c001f2a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f2aa:	89 d0                	mov    eax,edx
c001f2ac:	83 c4 1c             	add    esp,0x1c
c001f2af:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f2b5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f2b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f2bb:	68 00 01 00 00       	push   0x100
c001f2c0:	6a 00                	push   0x0
c001f2c2:	50                   	push   eax
c001f2c3:	e8 bc 13 fe ff       	call   c0000684 <memset>
c001f2c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f2cc:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f2d2:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f2d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f2dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f2df:	83 c4 10             	add    esp,0x10
c001f2e2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f2e9:	31 ff                	xor    edi,edi
c001f2eb:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f2f1:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f2f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2fb:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f301:	83 c5 20             	add    ebp,0x20
c001f304:	01 f8                	add    eax,edi
c001f306:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f309:	52                   	push   edx
c001f30a:	68 00 01 00 00       	push   0x100
c001f30f:	6a 00                	push   0x0
c001f311:	50                   	push   eax
c001f312:	e8 6d 13 fe ff       	call   c0000684 <memset>
c001f317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f31b:	83 c4 10             	add    esp,0x10
c001f31e:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f324:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f32b:	01 f8                	add    eax,edi
c001f32d:	81 c7 00 01 00 00    	add    edi,0x100
c001f333:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f336:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f33c:	75 b3                	jne    c001f2f1 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f33e:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f342:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f346:	83 c4 1c             	add    esp,0x1c
c001f349:	5b                   	pop    ebx
c001f34a:	5e                   	pop    esi
c001f34b:	5f                   	pop    edi
c001f34c:	5d                   	pop    ebp
c001f34d:	e9 b0 fe ff ff       	jmp    c001f202 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f352 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f352:	55                   	push   ebp
c001f353:	57                   	push   edi
c001f354:	56                   	push   esi
c001f355:	53                   	push   ebx
c001f356:	83 ec 0c             	sub    esp,0xc
c001f359:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f35d:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001f364:	74 2d                	je     c001f393 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f366:	83 ec 0c             	sub    esp,0xc
c001f369:	68 bf 6a 02 c0       	push   0xc0026abf
c001f36e:	e8 f6 a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f373:	83 c4 10             	add    esp,0x10
c001f376:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001f37d:	75 14                	jne    c001f393 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f37f:	e4 60                	in     al,0x60
c001f381:	3c 1c                	cmp    al,0x1c
c001f383:	74 04                	je     c001f389 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f385:	3c 5a                	cmp    al,0x5a
c001f387:	75 f6                	jne    c001f37f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f389:	e4 60                	in     al,0x60
c001f38b:	3c 5a                	cmp    al,0x5a
c001f38d:	74 fa                	je     c001f389 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f38f:	3c 1c                	cmp    al,0x1c
c001f391:	74 f6                	je     c001f389 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f393:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f397:	31 db                	xor    ebx,ebx
c001f399:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f39c:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f3a2:	0f 84 78 01 00 00    	je     c001f520 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f3a8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f3ac:	89 d8                	mov    eax,ebx
c001f3ae:	c1 e0 07             	shl    eax,0x7
c001f3b1:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f3b8:	50                   	push   eax
c001f3b9:	50                   	push   eax
c001f3ba:	57                   	push   edi
c001f3bb:	56                   	push   esi
c001f3bc:	e8 f9 fd ff ff       	call   c001f1ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f3c1:	83 c4 10             	add    esp,0x10
c001f3c4:	83 f8 01             	cmp    eax,0x1
c001f3c7:	0f 85 19 01 00 00    	jne    c001f4e6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f3cd:	50                   	push   eax
c001f3ce:	53                   	push   ebx
c001f3cf:	57                   	push   edi
c001f3d0:	56                   	push   esi
c001f3d1:	e8 76 fe ff ff       	call   c001f24c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f3d6:	83 c4 10             	add    esp,0x10
c001f3d9:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001f3e0:	74 2d                	je     c001f40f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f3e2:	83 ec 0c             	sub    esp,0xc
c001f3e5:	68 d4 6a 02 c0       	push   0xc0026ad4
c001f3ea:	e8 7a a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f3ef:	83 c4 10             	add    esp,0x10
c001f3f2:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001f3f9:	75 14                	jne    c001f40f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f3fb:	e4 60                	in     al,0x60
c001f3fd:	3c 1c                	cmp    al,0x1c
c001f3ff:	74 04                	je     c001f405 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f401:	3c 5a                	cmp    al,0x5a
c001f403:	75 f6                	jne    c001f3fb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f405:	e4 60                	in     al,0x60
c001f407:	3c 5a                	cmp    al,0x5a
c001f409:	74 fa                	je     c001f405 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f40b:	3c 1c                	cmp    al,0x1c
c001f40d:	74 f6                	je     c001f405 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f40f:	83 ec 0c             	sub    esp,0xc
c001f412:	68 7c 01 00 00       	push   0x17c
c001f417:	e8 f3 a5 fe ff       	call   c0009a0f <malloc>
c001f41c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f41f:	89 c7                	mov    edi,eax
c001f421:	e8 fa 0f 00 00       	call   c0020420 <SATA::SATA()>
c001f426:	83 c4 10             	add    esp,0x10
c001f429:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001f430:	74 2d                	je     c001f45f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f432:	83 ec 0c             	sub    esp,0xc
c001f435:	68 e9 6a 02 c0       	push   0xc0026ae9
c001f43a:	e8 2a a6 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f43f:	83 c4 10             	add    esp,0x10
c001f442:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001f449:	75 14                	jne    c001f45f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f44b:	e4 60                	in     al,0x60
c001f44d:	3c 5a                	cmp    al,0x5a
c001f44f:	74 04                	je     c001f455 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f451:	3c 1c                	cmp    al,0x1c
c001f453:	75 f6                	jne    c001f44b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f455:	e4 60                	in     al,0x60
c001f457:	3c 5a                	cmp    al,0x5a
c001f459:	74 fa                	je     c001f455 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f45b:	3c 1c                	cmp    al,0x1c
c001f45d:	74 f6                	je     c001f455 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f45f:	50                   	push   eax
c001f460:	50                   	push   eax
c001f461:	57                   	push   edi
c001f462:	56                   	push   esi
c001f463:	e8 d6 ed fe ff       	call   c000e23e <Device::addChild(Device*)>
c001f468:	83 c4 10             	add    esp,0x10
c001f46b:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001f472:	74 2d                	je     c001f4a1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f474:	83 ec 0c             	sub    esp,0xc
c001f477:	68 fe 6a 02 c0       	push   0xc0026afe
c001f47c:	e8 e8 a5 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f481:	83 c4 10             	add    esp,0x10
c001f484:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001f48b:	75 14                	jne    c001f4a1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f48d:	e4 60                	in     al,0x60
c001f48f:	3c 1c                	cmp    al,0x1c
c001f491:	74 04                	je     c001f497 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f493:	3c 5a                	cmp    al,0x5a
c001f495:	75 f6                	jne    c001f48d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f497:	e4 60                	in     al,0x60
c001f499:	3c 5a                	cmp    al,0x5a
c001f49b:	74 fa                	je     c001f497 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f49d:	3c 1c                	cmp    al,0x1c
c001f49f:	74 f6                	je     c001f497 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f4a1:	8b 07                	mov    eax,DWORD PTR [edi]
c001f4a3:	56                   	push   esi
c001f4a4:	6a 00                	push   0x0
c001f4a6:	53                   	push   ebx
c001f4a7:	57                   	push   edi
c001f4a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f4ab:	83 c4 10             	add    esp,0x10
c001f4ae:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c001f4b5:	74 69                	je     c001f520 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4b7:	83 ec 0c             	sub    esp,0xc
c001f4ba:	68 13 6b 02 c0       	push   0xc0026b13
c001f4bf:	e8 a5 a5 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f4c4:	83 c4 10             	add    esp,0x10
c001f4c7:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c001f4ce:	75 50                	jne    c001f520 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4d0:	e4 60                	in     al,0x60
c001f4d2:	3c 1c                	cmp    al,0x1c
c001f4d4:	74 04                	je     c001f4da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4d6:	3c 5a                	cmp    al,0x5a
c001f4d8:	75 f6                	jne    c001f4d0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f4da:	e4 60                	in     al,0x60
c001f4dc:	3c 5a                	cmp    al,0x5a
c001f4de:	74 fa                	je     c001f4da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4e0:	3c 1c                	cmp    al,0x1c
c001f4e2:	74 f6                	je     c001f4da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4e4:	eb 3a                	jmp    c001f520 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4e6:	83 f8 04             	cmp    eax,0x4
c001f4e9:	75 35                	jne    c001f520 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4eb:	50                   	push   eax
c001f4ec:	53                   	push   ebx
c001f4ed:	57                   	push   edi
c001f4ee:	56                   	push   esi
c001f4ef:	e8 58 fd ff ff       	call   c001f24c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f4f4:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f4fb:	e8 0f a5 fe ff       	call   c0009a0f <malloc>
c001f500:	89 04 24             	mov    DWORD PTR [esp],eax
c001f503:	89 c7                	mov    edi,eax
c001f505:	e8 8c 17 00 00       	call   c0020c96 <SATAPI::SATAPI()>
c001f50a:	5a                   	pop    edx
c001f50b:	59                   	pop    ecx
c001f50c:	57                   	push   edi
c001f50d:	56                   	push   esi
c001f50e:	e8 2b ed fe ff       	call   c000e23e <Device::addChild(Device*)>
c001f513:	8b 07                	mov    eax,DWORD PTR [edi]
c001f515:	56                   	push   esi
c001f516:	6a 00                	push   0x0
c001f518:	53                   	push   ebx
c001f519:	57                   	push   edi
c001f51a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f51d:	83 c4 20             	add    esp,0x20
c001f520:	d1 ed                	shr    ebp,1
c001f522:	43                   	inc    ebx
c001f523:	83 fb 20             	cmp    ebx,0x20
c001f526:	0f 85 70 fe ff ff    	jne    c001f39c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f52c:	83 c4 0c             	add    esp,0xc
c001f52f:	5b                   	pop    ebx
c001f530:	5e                   	pop    esi
c001f531:	5f                   	pop    edi
c001f532:	5d                   	pop    ebp
c001f533:	c3                   	ret    

c001f534 <SATABus::open(int, int, void*)>:
c001f534:	83 ec 14             	sub    esp,0x14
c001f537:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f53b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f541:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f547:	52                   	push   edx
c001f548:	50                   	push   eax
c001f549:	e8 04 fe ff ff       	call   c001f352 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f54e:	31 c0                	xor    eax,eax
c001f550:	83 c4 1c             	add    esp,0x1c
c001f553:	c3                   	ret    

c001f554 <ATA::close(int, int, void*)>:
c001f554:	83 ec 0c             	sub    esp,0xc
c001f557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f561:	85 c0                	test   eax,eax
c001f563:	74 0c                	je     c001f571 <ATA::close(int, int, void*)+0x1d>
c001f565:	83 ec 0c             	sub    esp,0xc
c001f568:	8b 10                	mov    edx,DWORD PTR [eax]
c001f56a:	50                   	push   eax
c001f56b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f56e:	83 c4 10             	add    esp,0x10
c001f571:	31 c0                	xor    eax,eax
c001f573:	83 c4 0c             	add    esp,0xc
c001f576:	c3                   	ret    
c001f577:	90                   	nop

c001f578 <ATA::powerSaving(PowerSavingLevel)>:
c001f578:	c3                   	ret    
c001f579:	90                   	nop

c001f57a <ATA::ATA()>:
c001f57a:	83 ec 0c             	sub    esp,0xc
c001f57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f581:	83 ec 04             	sub    esp,0x4
c001f584:	68 00 02 00 00       	push   0x200
c001f589:	68 9f 6c 02 c0       	push   0xc0026c9f
c001f58e:	50                   	push   eax
c001f58f:	e8 e2 f0 fe ff       	call   c000e676 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f594:	83 c4 10             	add    esp,0x10
c001f597:	ba a8 6b 02 c0       	mov    edx,0xc0026ba8
c001f59c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a0:	89 10                	mov    DWORD PTR [eax],edx
c001f5a2:	90                   	nop
c001f5a3:	83 c4 0c             	add    esp,0xc
c001f5a6:	c3                   	ret    
c001f5a7:	90                   	nop

c001f5a8 <ATA::flush(bool)>:
c001f5a8:	53                   	push   ebx
c001f5a9:	83 ec 08             	sub    esp,0x8
c001f5ac:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f5b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5b5:	19 c0                	sbb    eax,eax
c001f5b7:	83 e0 fd             	and    eax,0xfffffffd
c001f5ba:	05 ea 00 00 00       	add    eax,0xea
c001f5bf:	50                   	push   eax
c001f5c0:	6a 07                	push   0x7
c001f5c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5c9:	50                   	push   eax
c001f5ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5d0:	e8 d9 ee ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5d5:	83 c4 0c             	add    esp,0xc
c001f5d8:	6a 00                	push   0x0
c001f5da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5e1:	50                   	push   eax
c001f5e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5e8:	e8 59 f9 ff ff       	call   c001ef46 <IDE::polling(unsigned char, unsigned int)>
c001f5ed:	83 c4 18             	add    esp,0x18
c001f5f0:	5b                   	pop    ebx
c001f5f1:	c3                   	ret    

c001f5f2 <ATA::readyForCommand()>:
c001f5f2:	56                   	push   esi
c001f5f3:	53                   	push   ebx
c001f5f4:	53                   	push   ebx
c001f5f5:	31 db                	xor    ebx,ebx
c001f5f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f5fb:	51                   	push   ecx
c001f5fc:	6a 0c                	push   0xc
c001f5fe:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f605:	50                   	push   eax
c001f606:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f60c:	e8 5d ef ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001f611:	83 c4 10             	add    esp,0x10
c001f614:	a8 88                	test   al,0x88
c001f616:	74 1f                	je     c001f637 <ATA::readyForCommand()+0x45>
c001f618:	43                   	inc    ebx
c001f619:	83 fb 63             	cmp    ebx,0x63
c001f61c:	7e dd                	jle    c001f5fb <ATA::readyForCommand()+0x9>
c001f61e:	83 ec 0c             	sub    esp,0xc
c001f621:	6a 0a                	push   0xa
c001f623:	e8 fc 93 ff ff       	call   c0018a24 <milliTenthSleep(unsigned int)>
c001f628:	83 c4 10             	add    esp,0x10
c001f62b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f631:	75 c8                	jne    c001f5fb <ATA::readyForCommand()+0x9>
c001f633:	31 c0                	xor    eax,eax
c001f635:	eb 02                	jmp    c001f639 <ATA::readyForCommand()+0x47>
c001f637:	b0 01                	mov    al,0x1
c001f639:	5a                   	pop    edx
c001f63a:	5b                   	pop    ebx
c001f63b:	5e                   	pop    esi
c001f63c:	c3                   	ret    
c001f63d:	90                   	nop

c001f63e <ATA::access(unsigned long long, int, void*, bool)>:
c001f63e:	55                   	push   ebp
c001f63f:	57                   	push   edi
c001f640:	56                   	push   esi
c001f641:	53                   	push   ebx
c001f642:	83 ec 38             	sub    esp,0x38
c001f645:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f649:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f64d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f651:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f655:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f659:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f65d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f661:	68 54 6b 02 c0       	push   0xc0026b54
c001f666:	e8 94 d6 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f66b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f671:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f675:	83 c4 10             	add    esp,0x10
c001f678:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f67e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f682:	c1 e0 06             	shl    eax,0x6
c001f685:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f68d:	74 5d                	je     c001f6ec <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f68f:	89 fa                	mov    edx,edi
c001f691:	89 f0                	mov    eax,esi
c001f693:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f697:	c1 ea 1c             	shr    edx,0x1c
c001f69a:	89 d1                	mov    ecx,edx
c001f69c:	09 c1                	or     ecx,eax
c001f69e:	74 25                	je     c001f6c5 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f6a0:	31 ed                	xor    ebp,ebp
c001f6a2:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f6a9:	89 fa                	mov    edx,edi
c001f6ab:	89 f0                	mov    eax,esi
c001f6ad:	0f ad d0             	shrd   eax,edx,cl
c001f6b0:	d3 ea                	shr    edx,cl
c001f6b2:	f6 c1 20             	test   cl,0x20
c001f6b5:	74 02                	je     c001f6b9 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f6b7:	89 d0                	mov    eax,edx
c001f6b9:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f6bd:	45                   	inc    ebp
c001f6be:	83 fd 06             	cmp    ebp,0x6
c001f6c1:	75 df                	jne    c001f6a2 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f6c3:	eb 76                	jmp    c001f73b <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f6c5:	89 f0                	mov    eax,esi
c001f6c7:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f6cc:	89 fa                	mov    edx,edi
c001f6ce:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f6d5:	0f ac d0 10          	shrd   eax,edx,0x10
c001f6d9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f6de:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f6e2:	c1 ee 18             	shr    esi,0x18
c001f6e5:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f6ea:	eb 56                	jmp    c001f742 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f6ec:	6a 00                	push   0x0
c001f6ee:	6a 3f                	push   0x3f
c001f6f0:	57                   	push   edi
c001f6f1:	56                   	push   esi
c001f6f2:	e8 fd 31 00 00       	call   c00228f4 <__umoddi3>
c001f6f7:	83 c4 10             	add    esp,0x10
c001f6fa:	40                   	inc    eax
c001f6fb:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f6ff:	6a 00                	push   0x0
c001f701:	68 f0 03 00 00       	push   0x3f0
c001f706:	57                   	push   edi
c001f707:	56                   	push   esi
c001f708:	e8 e7 30 00 00       	call   c00227f4 <__udivdi3>
c001f70d:	83 c4 10             	add    esp,0x10
c001f710:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f715:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f71c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f721:	6a 00                	push   0x0
c001f723:	6a 3f                	push   0x3f
c001f725:	57                   	push   edi
c001f726:	56                   	push   esi
c001f727:	e8 c8 30 00 00       	call   c00227f4 <__udivdi3>
c001f72c:	83 c4 10             	add    esp,0x10
c001f72f:	89 c6                	mov    esi,eax
c001f731:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f736:	83 e6 0f             	and    esi,0xf
c001f739:	eb 07                	jmp    c001f742 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f73b:	31 f6                	xor    esi,esi
c001f73d:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f742:	bf 01 00 00 00       	mov    edi,0x1
c001f747:	50                   	push   eax
c001f748:	6a 00                	push   0x0
c001f74a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f751:	50                   	push   eax
c001f752:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f756:	e8 5b ef ff ff       	call   c001e6b6 <IDE::enableIRQs(unsigned char, bool)>
c001f75b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f75e:	e8 8f fe ff ff       	call   c001f5f2 <ATA::readyForCommand()>
c001f763:	83 c4 10             	add    esp,0x10
c001f766:	84 c0                	test   al,al
c001f768:	0f 84 bc 02 00 00    	je     c001fa2a <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f76e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f774:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f77a:	c1 e0 04             	shl    eax,0x4
c001f77d:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f784:	09 c6                	or     esi,eax
c001f786:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f78b:	75 05                	jne    c001f792 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f78d:	83 ce a0             	or     esi,0xffffffa0
c001f790:	eb 03                	jmp    c001f795 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f792:	83 ce e0             	or     esi,0xffffffe0
c001f795:	89 f0                	mov    eax,esi
c001f797:	0f b6 f0             	movzx  esi,al
c001f79a:	56                   	push   esi
c001f79b:	6a 06                	push   0x6
c001f79d:	51                   	push   ecx
c001f79e:	52                   	push   edx
c001f79f:	e8 0a ed ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7a4:	83 c4 10             	add    esp,0x10
c001f7a7:	6a 00                	push   0x0
c001f7a9:	6a 01                	push   0x1
c001f7ab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7b2:	50                   	push   eax
c001f7b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7b9:	e8 f0 ec ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7be:	83 c4 10             	add    esp,0x10
c001f7c1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f7c6:	75 6e                	jne    c001f836 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f7c8:	6a 00                	push   0x0
c001f7ca:	6a 08                	push   0x8
c001f7cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7d3:	50                   	push   eax
c001f7d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7da:	e8 cf ec ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7df:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f7e4:	50                   	push   eax
c001f7e5:	6a 09                	push   0x9
c001f7e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7ee:	50                   	push   eax
c001f7ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7f5:	e8 b4 ec ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7fa:	83 c4 20             	add    esp,0x20
c001f7fd:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f802:	50                   	push   eax
c001f803:	6a 0a                	push   0xa
c001f805:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f80c:	50                   	push   eax
c001f80d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f813:	e8 96 ec ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f818:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f81d:	50                   	push   eax
c001f81e:	6a 0b                	push   0xb
c001f820:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f827:	50                   	push   eax
c001f828:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f82e:	e8 7b ec ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f833:	83 c4 20             	add    esp,0x20
c001f836:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f83b:	50                   	push   eax
c001f83c:	6a 02                	push   0x2
c001f83e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f845:	50                   	push   eax
c001f846:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f84c:	e8 5d ec ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f851:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f856:	50                   	push   eax
c001f857:	6a 03                	push   0x3
c001f859:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f860:	50                   	push   eax
c001f861:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f867:	e8 42 ec ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f86c:	83 c4 20             	add    esp,0x20
c001f86f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f874:	50                   	push   eax
c001f875:	6a 04                	push   0x4
c001f877:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f87e:	50                   	push   eax
c001f87f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f885:	e8 24 ec ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f88a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f88f:	50                   	push   eax
c001f890:	6a 05                	push   0x5
c001f892:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f899:	50                   	push   eax
c001f89a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8a0:	e8 09 ec ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8a5:	83 c4 20             	add    esp,0x20
c001f8a8:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f8ad:	0f 94 c0             	sete   al
c001f8b0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f8b5:	74 09                	je     c001f8c0 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f8b7:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f8be:	eb 07                	jmp    c001f8c7 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f8c0:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f8c7:	0f b6 c0             	movzx  eax,al
c001f8ca:	50                   	push   eax
c001f8cb:	6a 07                	push   0x7
c001f8cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8d4:	50                   	push   eax
c001f8d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8db:	e8 ce eb ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8e0:	c7 04 24 61 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b61
c001f8e7:	e8 13 d4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f8ec:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f8f0:	83 c4 10             	add    esp,0x10
c001f8f3:	85 f6                	test   esi,esi
c001f8f5:	0f 84 f7 00 00 00    	je     c001f9f2 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f8fb:	83 ec 0c             	sub    esp,0xc
c001f8fe:	68 64 6b 02 c0       	push   0xc0026b64
c001f903:	e8 f7 d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f908:	83 c4 0c             	add    esp,0xc
c001f90b:	6a 01                	push   0x1
c001f90d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f914:	50                   	push   eax
c001f915:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f91b:	e8 26 f6 ff ff       	call   c001ef46 <IDE::polling(unsigned char, unsigned int)>
c001f920:	c7 04 24 67 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b67
c001f927:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f92b:	e8 cf d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f930:	83 c4 10             	add    esp,0x10
c001f933:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f937:	84 c0                	test   al,al
c001f939:	74 2b                	je     c001f966 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f93b:	0f b6 f8             	movzx  edi,al
c001f93e:	57                   	push   edi
c001f93f:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f946:	50                   	push   eax
c001f947:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f94e:	50                   	push   eax
c001f94f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f955:	e8 3c f5 ff ff       	call   c001ee96 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f95a:	c7 04 24 6a 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b6a
c001f961:	e9 bc 00 00 00       	jmp    c001fa22 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f966:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f96b:	74 50                	je     c001f9bd <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f96d:	83 ec 0c             	sub    esp,0xc
c001f970:	31 ed                	xor    ebp,ebp
c001f972:	68 75 6b 02 c0       	push   0xc0026b75
c001f977:	e8 83 d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f97c:	83 c4 10             	add    esp,0x10
c001f97f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f983:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f987:	50                   	push   eax
c001f988:	50                   	push   eax
c001f989:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f990:	50                   	push   eax
c001f991:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f997:	e8 00 eb ff ff       	call   c001e49c <IDE::getBase(unsigned char)>
c001f99c:	89 c2                	mov    edx,eax
c001f99e:	89 f8                	mov    eax,edi
c001f9a0:	66 ef                	out    dx,ax
c001f9a2:	45                   	inc    ebp
c001f9a3:	83 c4 10             	add    esp,0x10
c001f9a6:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f9ac:	75 d1                	jne    c001f97f <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f9ae:	83 ec 0c             	sub    esp,0xc
c001f9b1:	68 78 6b 02 c0       	push   0xc0026b78
c001f9b6:	e8 44 d3 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001f9bb:	eb 24                	jmp    c001f9e1 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f9bd:	51                   	push   ecx
c001f9be:	51                   	push   ecx
c001f9bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9c6:	50                   	push   eax
c001f9c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9cd:	e8 ca ea ff ff       	call   c001e49c <IDE::getBase(unsigned char)>
c001f9d2:	b9 00 01 00 00       	mov    ecx,0x100
c001f9d7:	89 c2                	mov    edx,eax
c001f9d9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f9dd:	fc                   	cld    
c001f9de:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f9e1:	83 c4 10             	add    esp,0x10
c001f9e4:	4e                   	dec    esi
c001f9e5:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f9ed:	e9 01 ff ff ff       	jmp    c001f8f3 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f9f2:	31 ff                	xor    edi,edi
c001f9f4:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f9f9:	74 2f                	je     c001fa2a <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f9fb:	83 ec 0c             	sub    esp,0xc
c001f9fe:	68 7b 6b 02 c0       	push   0xc0026b7b
c001fa03:	e8 f7 d2 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001fa08:	58                   	pop    eax
c001fa09:	31 c0                	xor    eax,eax
c001fa0b:	5a                   	pop    edx
c001fa0c:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001fa11:	0f 94 c0             	sete   al
c001fa14:	50                   	push   eax
c001fa15:	53                   	push   ebx
c001fa16:	e8 8d fb ff ff       	call   c001f5a8 <ATA::flush(bool)>
c001fa1b:	c7 04 24 7e 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b7e
c001fa22:	e8 d8 d2 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001fa27:	83 c4 10             	add    esp,0x10
c001fa2a:	83 c4 2c             	add    esp,0x2c
c001fa2d:	89 f8                	mov    eax,edi
c001fa2f:	5b                   	pop    ebx
c001fa30:	5e                   	pop    esi
c001fa31:	5f                   	pop    edi
c001fa32:	5d                   	pop    ebp
c001fa33:	c3                   	ret    

c001fa34 <ATA::read(unsigned long long, int, void*)>:
c001fa34:	57                   	push   edi
c001fa35:	b8 04 00 00 00       	mov    eax,0x4
c001fa3a:	56                   	push   esi
c001fa3b:	53                   	push   ebx
c001fa3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fa44:	8d 7a ff             	lea    edi,[edx-0x1]
c001fa47:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa4b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fa4f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fa55:	77 25                	ja     c001fa7c <ATA::read(unsigned long long, int, void*)+0x48>
c001fa57:	b8 06 00 00 00       	mov    eax,0x6
c001fa5c:	85 f6                	test   esi,esi
c001fa5e:	74 1c                	je     c001fa7c <ATA::read(unsigned long long, int, void*)+0x48>
c001fa60:	50                   	push   eax
c001fa61:	50                   	push   eax
c001fa62:	6a 00                	push   0x0
c001fa64:	56                   	push   esi
c001fa65:	52                   	push   edx
c001fa66:	53                   	push   ebx
c001fa67:	51                   	push   ecx
c001fa68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fa6c:	e8 cd fb ff ff       	call   c001f63e <ATA::access(unsigned long long, int, void*, bool)>
c001fa71:	83 c4 20             	add    esp,0x20
c001fa74:	85 c0                	test   eax,eax
c001fa76:	0f 95 c0             	setne  al
c001fa79:	0f b6 c0             	movzx  eax,al
c001fa7c:	5b                   	pop    ebx
c001fa7d:	5e                   	pop    esi
c001fa7e:	5f                   	pop    edi
c001fa7f:	c3                   	ret    

c001fa80 <ATA::write(unsigned long long, int, void*)>:
c001fa80:	55                   	push   ebp
c001fa81:	57                   	push   edi
c001fa82:	56                   	push   esi
c001fa83:	53                   	push   ebx
c001fa84:	83 ec 18             	sub    esp,0x18
c001fa87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fa8b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fa8f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001fa93:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fa97:	68 81 6b 02 c0       	push   0xc0026b81
c001fa9c:	e8 5e d2 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001faa1:	8d 53 ff             	lea    edx,[ebx-0x1]
c001faa4:	83 c4 10             	add    esp,0x10
c001faa7:	b8 04 00 00 00       	mov    eax,0x4
c001faac:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001fab2:	77 25                	ja     c001fad9 <ATA::write(unsigned long long, int, void*)+0x59>
c001fab4:	b8 06 00 00 00       	mov    eax,0x6
c001fab9:	85 f6                	test   esi,esi
c001fabb:	74 1c                	je     c001fad9 <ATA::write(unsigned long long, int, void*)+0x59>
c001fabd:	50                   	push   eax
c001fabe:	50                   	push   eax
c001fabf:	6a 01                	push   0x1
c001fac1:	56                   	push   esi
c001fac2:	53                   	push   ebx
c001fac3:	55                   	push   ebp
c001fac4:	57                   	push   edi
c001fac5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fac9:	e8 70 fb ff ff       	call   c001f63e <ATA::access(unsigned long long, int, void*, bool)>
c001face:	83 c4 20             	add    esp,0x20
c001fad1:	85 c0                	test   eax,eax
c001fad3:	0f 95 c0             	setne  al
c001fad6:	0f b6 c0             	movzx  eax,al
c001fad9:	83 c4 0c             	add    esp,0xc
c001fadc:	5b                   	pop    ebx
c001fadd:	5e                   	pop    esi
c001fade:	5f                   	pop    edi
c001fadf:	5d                   	pop    ebp
c001fae0:	c3                   	ret    
c001fae1:	90                   	nop

c001fae2 <ATA::detectCHS()>:
c001fae2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fae6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001faec:	c1 e0 06             	shl    eax,0x6
c001faef:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001faf5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001faff:	c7 44 24 04 8d 6b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026b8d
c001fb07:	e9 bb 4e ff ff       	jmp    c00149c7 <Krnl::panic(char const*)>

c001fb0c <ATA::open(int, int, void*)>:
c001fb0c:	53                   	push   ebx
c001fb0d:	83 ec 08             	sub    esp,0x8
c001fb10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fb18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fb1c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fb22:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fb28:	c1 e0 06             	shl    eax,0x6
c001fb2b:	01 d0                	add    eax,edx
c001fb2d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fb34:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fb3a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fb41:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fb4b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fb51:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fb58:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fb5f:	75 0c                	jne    c001fb6d <ATA::open(int, int, void*)+0x61>
c001fb61:	83 ec 0c             	sub    esp,0xc
c001fb64:	53                   	push   ebx
c001fb65:	e8 78 ff ff ff       	call   c001fae2 <ATA::detectCHS()>
c001fb6a:	83 c4 10             	add    esp,0x10
c001fb6d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fb73:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fb79:	c1 e0 06             	shl    eax,0x6
c001fb7c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fb83:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fb8d:	d1 e8                	shr    eax,1
c001fb8f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fb95:	6a 04                	push   0x4
c001fb97:	6a 0c                	push   0xc
c001fb99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fba0:	50                   	push   eax
c001fba1:	52                   	push   edx
c001fba2:	e8 07 e9 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fba7:	90                   	nop
c001fba8:	90                   	nop
c001fba9:	6a 00                	push   0x0
c001fbab:	6a 0c                	push   0xc
c001fbad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbb4:	50                   	push   eax
c001fbb5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbbb:	e8 ee e8 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbc0:	83 c4 14             	add    esp,0x14
c001fbc3:	53                   	push   ebx
c001fbc4:	e8 15 eb fe ff       	call   c000e6de <PhysicalDisk::startCache()>
c001fbc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbcc:	e8 8d 0b ff ff       	call   c001075e <createPartitionsForDisk(PhysicalDisk*)>
c001fbd1:	31 c0                	xor    eax,eax
c001fbd3:	83 c4 18             	add    esp,0x18
c001fbd6:	5b                   	pop    ebx
c001fbd7:	c3                   	ret    

c001fbd8 <ATAPI::write(unsigned long long, int, void*)>:
c001fbd8:	b8 03 00 00 00       	mov    eax,0x3
c001fbdd:	c3                   	ret    

c001fbde <ATAPI::close(int, int, void*)>:
c001fbde:	83 ec 0c             	sub    esp,0xc
c001fbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fbeb:	85 c0                	test   eax,eax
c001fbed:	74 0c                	je     c001fbfb <ATAPI::close(int, int, void*)+0x1d>
c001fbef:	83 ec 0c             	sub    esp,0xc
c001fbf2:	8b 10                	mov    edx,DWORD PTR [eax]
c001fbf4:	50                   	push   eax
c001fbf5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fbf8:	83 c4 10             	add    esp,0x10
c001fbfb:	31 c0                	xor    eax,eax
c001fbfd:	83 c4 0c             	add    esp,0xc
c001fc00:	c3                   	ret    
c001fc01:	90                   	nop

c001fc02 <ATAPI::ATAPI()>:
c001fc02:	83 ec 0c             	sub    esp,0xc
c001fc05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc09:	83 ec 04             	sub    esp,0x4
c001fc0c:	68 00 08 00 00       	push   0x800
c001fc11:	68 79 6e 02 c0       	push   0xc0026e79
c001fc16:	50                   	push   eax
c001fc17:	e8 5a ea fe ff       	call   c000e676 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fc1c:	83 c4 10             	add    esp,0x10
c001fc1f:	ba 0c 6c 02 c0       	mov    edx,0xc0026c0c
c001fc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc28:	89 10                	mov    DWORD PTR [eax],edx
c001fc2a:	90                   	nop
c001fc2b:	83 c4 0c             	add    esp,0xc
c001fc2e:	c3                   	ret    
c001fc2f:	90                   	nop

c001fc30 <ATAPI::readyForCommand()>:
c001fc30:	56                   	push   esi
c001fc31:	53                   	push   ebx
c001fc32:	53                   	push   ebx
c001fc33:	31 db                	xor    ebx,ebx
c001fc35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc39:	51                   	push   ecx
c001fc3a:	6a 0c                	push   0xc
c001fc3c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fc43:	50                   	push   eax
c001fc44:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fc4a:	e8 1f e9 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001fc4f:	83 c4 10             	add    esp,0x10
c001fc52:	a8 88                	test   al,0x88
c001fc54:	74 25                	je     c001fc7b <ATAPI::readyForCommand()+0x4b>
c001fc56:	43                   	inc    ebx
c001fc57:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fc5d:	7e da                	jle    c001fc39 <ATAPI::readyForCommand()+0x9>
c001fc5f:	83 ec 0c             	sub    esp,0xc
c001fc62:	68 5e 01 00 00       	push   0x15e
c001fc67:	e8 b8 8d ff ff       	call   c0018a24 <milliTenthSleep(unsigned int)>
c001fc6c:	83 c4 10             	add    esp,0x10
c001fc6f:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fc75:	75 c2                	jne    c001fc39 <ATAPI::readyForCommand()+0x9>
c001fc77:	31 c0                	xor    eax,eax
c001fc79:	eb 02                	jmp    c001fc7d <ATAPI::readyForCommand()+0x4d>
c001fc7b:	b0 01                	mov    al,0x1
c001fc7d:	5a                   	pop    edx
c001fc7e:	5b                   	pop    ebx
c001fc7f:	5e                   	pop    esi
c001fc80:	c3                   	ret    
c001fc81:	90                   	nop

c001fc82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fc82:	55                   	push   ebp
c001fc83:	57                   	push   edi
c001fc84:	56                   	push   esi
c001fc85:	53                   	push   ebx
c001fc86:	83 ec 20             	sub    esp,0x20
c001fc89:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fc8d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fc91:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fc95:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fc99:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fc9d:	6a 01                	push   0x1
c001fc9f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fca6:	50                   	push   eax
c001fca7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcad:	e8 04 ea ff ff       	call   c001e6b6 <IDE::enableIRQs(unsigned char, bool)>
c001fcb2:	5e                   	pop    esi
c001fcb3:	58                   	pop    eax
c001fcb4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcbb:	50                   	push   eax
c001fcbc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcc2:	e8 c1 e7 ff ff       	call   c001e488 <IDE::prepareInterrupt(unsigned char)>
c001fcc7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fcca:	e8 61 ff ff ff       	call   c001fc30 <ATAPI::readyForCommand()>
c001fccf:	83 c4 10             	add    esp,0x10
c001fcd2:	84 c0                	test   al,al
c001fcd4:	75 0a                	jne    c001fce0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fcd6:	bb 01 00 00 00       	mov    ebx,0x1
c001fcdb:	e9 57 02 00 00       	jmp    c001ff37 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fce0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fce6:	c1 e0 04             	shl    eax,0x4
c001fce9:	0f b6 c0             	movzx  eax,al
c001fcec:	50                   	push   eax
c001fced:	6a 06                	push   0x6
c001fcef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcf6:	50                   	push   eax
c001fcf7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcfd:	e8 ac e7 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd02:	6a 00                	push   0x0
c001fd04:	6a 01                	push   0x1
c001fd06:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd0d:	50                   	push   eax
c001fd0e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd14:	e8 95 e7 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd19:	83 c4 20             	add    esp,0x20
c001fd1c:	0f b6 c3             	movzx  eax,bl
c001fd1f:	0f b6 df             	movzx  ebx,bh
c001fd22:	50                   	push   eax
c001fd23:	6a 04                	push   0x4
c001fd25:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd2c:	50                   	push   eax
c001fd2d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd33:	e8 76 e7 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd38:	53                   	push   ebx
c001fd39:	6a 05                	push   0x5
c001fd3b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd42:	50                   	push   eax
c001fd43:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd49:	e8 60 e7 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd4e:	83 c4 20             	add    esp,0x20
c001fd51:	68 a0 00 00 00       	push   0xa0
c001fd56:	6a 07                	push   0x7
c001fd58:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd5f:	50                   	push   eax
c001fd60:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd66:	e8 43 e7 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd6b:	83 c4 0c             	add    esp,0xc
c001fd6e:	6a 01                	push   0x1
c001fd70:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd77:	50                   	push   eax
c001fd78:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd7e:	e8 c3 f1 ff ff       	call   c001ef46 <IDE::polling(unsigned char, unsigned int)>
c001fd83:	83 c4 10             	add    esp,0x10
c001fd86:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fd8c:	84 c0                	test   al,al
c001fd8e:	74 23                	je     c001fdb3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fd90:	0f b6 d8             	movzx  ebx,al
c001fd93:	0f b6 d2             	movzx  edx,dl
c001fd96:	53                   	push   ebx
c001fd97:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fd9e:	50                   	push   eax
c001fd9f:	52                   	push   edx
c001fda0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fda6:	e8 eb f0 ff ff       	call   c001ee96 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fdab:	83 c4 10             	add    esp,0x10
c001fdae:	e9 84 01 00 00       	jmp    c001ff37 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fdb3:	0f b6 d2             	movzx  edx,dl
c001fdb6:	53                   	push   ebx
c001fdb7:	53                   	push   ebx
c001fdb8:	52                   	push   edx
c001fdb9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdbf:	e8 d8 e6 ff ff       	call   c001e49c <IDE::getBase(unsigned char)>
c001fdc4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fdc8:	b9 06 00 00 00       	mov    ecx,0x6
c001fdcd:	89 c2                	mov    edx,eax
c001fdcf:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fdd2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fdd6:	83 c4 10             	add    esp,0x10
c001fdd9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fddf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fde6:	85 db                	test   ebx,ebx
c001fde8:	0f 84 ec 00 00 00    	je     c001feda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fdee:	51                   	push   ecx
c001fdef:	51                   	push   ecx
c001fdf0:	52                   	push   edx
c001fdf1:	50                   	push   eax
c001fdf2:	e8 25 e8 ff ff       	call   c001e61c <IDE::waitInterrupt(unsigned char)>
c001fdf7:	83 c4 10             	add    esp,0x10
c001fdfa:	84 c0                	test   al,al
c001fdfc:	0f 84 d4 fe ff ff    	je     c001fcd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fe02:	56                   	push   esi
c001fe03:	56                   	push   esi
c001fe04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe0b:	50                   	push   eax
c001fe0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe12:	e8 71 e6 ff ff       	call   c001e488 <IDE::prepareInterrupt(unsigned char)>
c001fe17:	83 c4 0c             	add    esp,0xc
c001fe1a:	6a 04                	push   0x4
c001fe1c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe23:	50                   	push   eax
c001fe24:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe2a:	e8 3f e7 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001fe2f:	83 c4 0c             	add    esp,0xc
c001fe32:	89 c6                	mov    esi,eax
c001fe34:	6a 05                	push   0x5
c001fe36:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe3d:	50                   	push   eax
c001fe3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe44:	e8 25 e7 ff ff       	call   c001e56e <IDE::read(unsigned char, unsigned char)>
c001fe49:	89 f1                	mov    ecx,esi
c001fe4b:	0f b6 c0             	movzx  eax,al
c001fe4e:	0f b6 f1             	movzx  esi,cl
c001fe51:	c1 e0 08             	shl    eax,0x8
c001fe54:	09 c6                	or     esi,eax
c001fe56:	d1 fe                	sar    esi,1
c001fe58:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fe5c:	83 c4 10             	add    esp,0x10
c001fe5f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fe64:	74 41                	je     c001fea7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fe66:	31 c9                	xor    ecx,ecx
c001fe68:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fe6e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fe75:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fe79:	75 0a                	jne    c001fe85 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fe7b:	01 c9                	add    ecx,ecx
c001fe7d:	01 cd                	add    ebp,ecx
c001fe7f:	4b                   	dec    ebx
c001fe80:	e9 54 ff ff ff       	jmp    c001fdd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fe85:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fe8a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fe8e:	51                   	push   ecx
c001fe8f:	51                   	push   ecx
c001fe90:	52                   	push   edx
c001fe91:	50                   	push   eax
c001fe92:	e8 05 e6 ff ff       	call   c001e49c <IDE::getBase(unsigned char)>
c001fe97:	89 c2                	mov    edx,eax
c001fe99:	89 f0                	mov    eax,esi
c001fe9b:	66 ef                	out    dx,ax
c001fe9d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fea1:	83 c4 10             	add    esp,0x10
c001fea4:	41                   	inc    ecx
c001fea5:	eb c1                	jmp    c001fe68 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fea7:	31 f6                	xor    esi,esi
c001fea9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001feaf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001feb6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001feba:	75 06                	jne    c001fec2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001febc:	01 f6                	add    esi,esi
c001febe:	01 f5                	add    ebp,esi
c001fec0:	eb bd                	jmp    c001fe7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fec2:	51                   	push   ecx
c001fec3:	51                   	push   ecx
c001fec4:	52                   	push   edx
c001fec5:	50                   	push   eax
c001fec6:	e8 d1 e5 ff ff       	call   c001e49c <IDE::getBase(unsigned char)>
c001fecb:	89 c2                	mov    edx,eax
c001fecd:	66 ed                	in     ax,dx
c001fecf:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fed4:	83 c4 10             	add    esp,0x10
c001fed7:	46                   	inc    esi
c001fed8:	eb cf                	jmp    c001fea9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001feda:	51                   	push   ecx
c001fedb:	51                   	push   ecx
c001fedc:	52                   	push   edx
c001fedd:	50                   	push   eax
c001fede:	e8 39 e7 ff ff       	call   c001e61c <IDE::waitInterrupt(unsigned char)>
c001fee3:	83 c4 10             	add    esp,0x10
c001fee6:	84 c0                	test   al,al
c001fee8:	0f 84 e8 fd ff ff    	je     c001fcd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001feee:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fef3:	52                   	push   edx
c001fef4:	52                   	push   edx
c001fef5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fefc:	50                   	push   eax
c001fefd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff03:	e8 80 e5 ff ff       	call   c001e488 <IDE::prepareInterrupt(unsigned char)>
c001ff08:	83 c4 10             	add    esp,0x10
c001ff0b:	50                   	push   eax
c001ff0c:	50                   	push   eax
c001ff0d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff14:	50                   	push   eax
c001ff15:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff1b:	e8 7c e5 ff ff       	call   c001e49c <IDE::getBase(unsigned char)>
c001ff20:	8d 50 07             	lea    edx,[eax+0x7]
c001ff23:	ec                   	in     al,dx
c001ff24:	83 c4 10             	add    esp,0x10
c001ff27:	a8 88                	test   al,0x88
c001ff29:	74 0a                	je     c001ff35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ff2b:	4b                   	dec    ebx
c001ff2c:	75 dd                	jne    c001ff0b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ff2e:	bb 02 00 00 00       	mov    ebx,0x2
c001ff33:	eb 02                	jmp    c001ff37 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ff35:	31 db                	xor    ebx,ebx
c001ff37:	83 c4 1c             	add    esp,0x1c
c001ff3a:	89 d8                	mov    eax,ebx
c001ff3c:	5b                   	pop    ebx
c001ff3d:	5e                   	pop    esi
c001ff3e:	5f                   	pop    edi
c001ff3f:	5d                   	pop    ebp
c001ff40:	c3                   	ret    
c001ff41:	90                   	nop

c001ff42 <ATAPI::diskRemoved()>:
c001ff42:	53                   	push   ebx
c001ff43:	83 ec 14             	sub    esp,0x14
c001ff46:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ff4a:	68 85 6e 02 c0       	push   0xc0026e85
c001ff4f:	e8 ab cd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001ff54:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ff5b:	c7 04 24 d8 6b 02 c0 	mov    DWORD PTR [esp],0xc0026bd8
c001ff62:	e8 98 cd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001ff67:	58                   	pop    eax
c001ff68:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ff6e:	e8 6b 05 ff ff       	call   c00104de <LogicalDisk::unmount()>
c001ff73:	c7 44 24 20 e7 6b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026be7
c001ff7b:	83 c4 18             	add    esp,0x18
c001ff7e:	5b                   	pop    ebx
c001ff7f:	e9 7b cd fe ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c001ff84 <ATAPI::eject()>:
c001ff84:	57                   	push   edi
c001ff85:	b9 03 00 00 00       	mov    ecx,0x3
c001ff8a:	53                   	push   ebx
c001ff8b:	83 ec 14             	sub    esp,0x14
c001ff8e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ff92:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ff96:	fc                   	cld    
c001ff97:	31 c0                	xor    eax,eax
c001ff99:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff9b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ffa0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ffa5:	50                   	push   eax
c001ffa6:	50                   	push   eax
c001ffa7:	6a 00                	push   0x0
c001ffa9:	6a 00                	push   0x0
c001ffab:	6a 00                	push   0x0
c001ffad:	6a 02                	push   0x2
c001ffaf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ffb3:	50                   	push   eax
c001ffb4:	53                   	push   ebx
c001ffb5:	e8 c8 fc ff ff       	call   c001fc82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ffba:	83 c4 14             	add    esp,0x14
c001ffbd:	53                   	push   ebx
c001ffbe:	e8 7f ff ff ff       	call   c001ff42 <ATAPI::diskRemoved()>
c001ffc3:	83 c4 24             	add    esp,0x24
c001ffc6:	31 c0                	xor    eax,eax
c001ffc8:	5b                   	pop    ebx
c001ffc9:	5f                   	pop    edi
c001ffca:	c3                   	ret    
c001ffcb:	90                   	nop

c001ffcc <ATAPI::diskInserted()>:
c001ffcc:	83 ec 18             	sub    esp,0x18
c001ffcf:	68 9c 6e 02 c0       	push   0xc0026e9c
c001ffd4:	e8 26 cd fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c001ffd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ffdd:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001ffe4:	83 c4 1c             	add    esp,0x1c
c001ffe7:	c3                   	ret    

c001ffe8 <ATAPI::detectMedia()>:
c001ffe8:	56                   	push   esi
c001ffe9:	53                   	push   ebx
c001ffea:	83 ec 28             	sub    esp,0x28
c001ffed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fff1:	6a 0c                	push   0xc
c001fff3:	6a 00                	push   0x0
c001fff5:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fff9:	56                   	push   esi
c001fffa:	e8 85 06 fe ff       	call   c0000684 <memset>
c001ffff:	58                   	pop    eax
c0020000:	5a                   	pop    edx
c0020001:	6a 00                	push   0x0
c0020003:	6a 00                	push   0x0
c0020005:	6a 00                	push   0x0
c0020007:	6a 00                	push   0x0
c0020009:	56                   	push   esi
c002000a:	53                   	push   ebx
c002000b:	e8 72 fc ff ff       	call   c001fc82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020010:	83 c4 1c             	add    esp,0x1c
c0020013:	6a 0c                	push   0xc
c0020015:	6a 00                	push   0x0
c0020017:	56                   	push   esi
c0020018:	e8 67 06 fe ff       	call   c0000684 <memset>
c002001d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020022:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020027:	59                   	pop    ecx
c0020028:	58                   	pop    eax
c0020029:	6a 01                	push   0x1
c002002b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002002f:	50                   	push   eax
c0020030:	6a 00                	push   0x0
c0020032:	6a 12                	push   0x12
c0020034:	56                   	push   esi
c0020035:	53                   	push   ebx
c0020036:	e8 47 fc ff ff       	call   c001fc82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002003b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002003f:	83 c4 20             	add    esp,0x20
c0020042:	83 e0 7f             	and    eax,0x7f
c0020045:	3c 70                	cmp    al,0x70
c0020047:	74 15                	je     c002005e <ATAPI::detectMedia()+0x76>
c0020049:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020050:	75 0c                	jne    c002005e <ATAPI::detectMedia()+0x76>
c0020052:	83 ec 0c             	sub    esp,0xc
c0020055:	53                   	push   ebx
c0020056:	e8 71 ff ff ff       	call   c001ffcc <ATAPI::diskInserted()>
c002005b:	83 c4 10             	add    esp,0x10
c002005e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020062:	83 e0 0f             	and    eax,0xf
c0020065:	3c 02                	cmp    al,0x2
c0020067:	75 1b                	jne    c0020084 <ATAPI::detectMedia()+0x9c>
c0020069:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002006e:	75 2d                	jne    c002009d <ATAPI::detectMedia()+0xb5>
c0020070:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020077:	74 24                	je     c002009d <ATAPI::detectMedia()+0xb5>
c0020079:	83 ec 0c             	sub    esp,0xc
c002007c:	53                   	push   ebx
c002007d:	e8 c0 fe ff ff       	call   c001ff42 <ATAPI::diskRemoved()>
c0020082:	eb 16                	jmp    c002009a <ATAPI::detectMedia()+0xb2>
c0020084:	84 c0                	test   al,al
c0020086:	75 15                	jne    c002009d <ATAPI::detectMedia()+0xb5>
c0020088:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002008f:	75 0c                	jne    c002009d <ATAPI::detectMedia()+0xb5>
c0020091:	83 ec 0c             	sub    esp,0xc
c0020094:	53                   	push   ebx
c0020095:	e8 32 ff ff ff       	call   c001ffcc <ATAPI::diskInserted()>
c002009a:	83 c4 10             	add    esp,0x10
c002009d:	83 c4 24             	add    esp,0x24
c00200a0:	5b                   	pop    ebx
c00200a1:	5e                   	pop    esi
c00200a2:	c3                   	ret    
c00200a3:	90                   	nop

c00200a4 <ATAPI::open(int, int, void*)>:
c00200a4:	56                   	push   esi
c00200a5:	53                   	push   ebx
c00200a6:	50                   	push   eax
c00200a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00200ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00200af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00200b3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00200b9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00200bf:	c1 e0 06             	shl    eax,0x6
c00200c2:	01 d0                	add    eax,edx
c00200c4:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00200cb:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00200d1:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00200d8:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00200e2:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00200e8:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00200ef:	6a 04                	push   0x4
c00200f1:	6a 0c                	push   0xc
c00200f3:	51                   	push   ecx
c00200f4:	52                   	push   edx
c00200f5:	e8 b4 e3 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200fa:	90                   	nop
c00200fb:	90                   	nop
c00200fc:	6a 00                	push   0x0
c00200fe:	6a 0c                	push   0xc
c0020100:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020107:	50                   	push   eax
c0020108:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002010e:	e8 9b e3 ff ff       	call   c001e4ae <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020113:	83 c4 14             	add    esp,0x14
c0020116:	68 74 01 00 00       	push   0x174
c002011b:	e8 ef 98 fe ff       	call   c0009a0f <malloc>
c0020120:	83 c4 0c             	add    esp,0xc
c0020123:	89 c6                	mov    esi,eax
c0020125:	6a 00                	push   0x0
c0020127:	68 ff ff ff 7f       	push   0x7fffffff
c002012c:	6a 00                	push   0x0
c002012e:	6a 00                	push   0x0
c0020130:	53                   	push   ebx
c0020131:	68 64 6f 02 c0       	push   0xc0026f64
c0020136:	50                   	push   eax
c0020137:	e8 ae 01 ff ff       	call   c00102ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002013c:	83 c4 14             	add    esp,0x14
c002013f:	56                   	push   esi
c0020140:	e8 5b 02 ff ff       	call   c00103a0 <LogicalDisk::assignDriveLetter()>
c0020145:	5a                   	pop    edx
c0020146:	0f be c0             	movsx  eax,al
c0020149:	59                   	pop    ecx
c002014a:	50                   	push   eax
c002014b:	68 f5 6b 02 c0       	push   0xc0026bf5
c0020150:	e8 aa cb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020155:	58                   	pop    eax
c0020156:	5a                   	pop    edx
c0020157:	56                   	push   esi
c0020158:	53                   	push   ebx
c0020159:	e8 e0 e0 fe ff       	call   c000e23e <Device::addChild(Device*)>
c002015e:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020164:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020167:	e8 72 e5 fe ff       	call   c000e6de <PhysicalDisk::startCache()>
c002016c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020173:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020176:	e8 6d fe ff ff       	call   c001ffe8 <ATAPI::detectMedia()>
c002017b:	83 c4 14             	add    esp,0x14
c002017e:	31 c0                	xor    eax,eax
c0020180:	5b                   	pop    ebx
c0020181:	5e                   	pop    esi
c0020182:	c3                   	ret    
c0020183:	90                   	nop

c0020184 <ATAPI::read(unsigned long long, int, void*)>:
c0020184:	55                   	push   ebp
c0020185:	57                   	push   edi
c0020186:	56                   	push   esi
c0020187:	53                   	push   ebx
c0020188:	83 ec 1c             	sub    esp,0x1c
c002018b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002018f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020193:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020197:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002019e:	74 41                	je     c00201e1 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00201a0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00201a4:	b9 03 00 00 00       	mov    ecx,0x3
c00201a9:	fc                   	cld    
c00201aa:	31 c0                	xor    eax,eax
c00201ac:	86 fb                	xchg   bl,bh
c00201ae:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00201b0:	c1 c3 10             	rol    ebx,0x10
c00201b3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00201b8:	89 e8                	mov    eax,ebp
c00201ba:	86 fb                	xchg   bl,bh
c00201bc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00201c0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00201c4:	50                   	push   eax
c00201c5:	50                   	push   eax
c00201c6:	55                   	push   ebp
c00201c7:	c1 e5 0b             	shl    ebp,0xb
c00201ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00201ce:	6a 00                	push   0x0
c00201d0:	55                   	push   ebp
c00201d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00201d5:	50                   	push   eax
c00201d6:	56                   	push   esi
c00201d7:	e8 a6 fa ff ff       	call   c001fc82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00201dc:	83 c4 20             	add    esp,0x20
c00201df:	eb 1a                	jmp    c00201fb <ATAPI::read(unsigned long long, int, void*)+0x77>
c00201e1:	83 ec 0c             	sub    esp,0xc
c00201e4:	56                   	push   esi
c00201e5:	e8 fe fd ff ff       	call   c001ffe8 <ATAPI::detectMedia()>
c00201ea:	83 c4 10             	add    esp,0x10
c00201ed:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00201f4:	75 aa                	jne    c00201a0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00201f6:	b8 02 00 00 00       	mov    eax,0x2
c00201fb:	83 c4 1c             	add    esp,0x1c
c00201fe:	5b                   	pop    ebx
c00201ff:	5e                   	pop    esi
c0020200:	5f                   	pop    edi
c0020201:	5d                   	pop    ebp
c0020202:	c3                   	ret    
c0020203:	90                   	nop

c0020204 <SATA::close(int, int, void*)>:
c0020204:	83 ec 0c             	sub    esp,0xc
c0020207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002020b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020211:	85 c0                	test   eax,eax
c0020213:	74 0c                	je     c0020221 <SATA::close(int, int, void*)+0x1d>
c0020215:	83 ec 0c             	sub    esp,0xc
c0020218:	8b 10                	mov    edx,DWORD PTR [eax]
c002021a:	50                   	push   eax
c002021b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002021e:	83 c4 10             	add    esp,0x10
c0020221:	31 c0                	xor    eax,eax
c0020223:	83 c4 0c             	add    esp,0xc
c0020226:	c3                   	ret    
c0020227:	90                   	nop

c0020228 <SATA::powerSaving(PowerSavingLevel)>:
c0020228:	c3                   	ret    
c0020229:	90                   	nop

c002022a <SATA::open(int, int, void*)>:
c002022a:	56                   	push   esi
c002022b:	53                   	push   ebx
c002022c:	51                   	push   ecx
c002022d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020231:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020238:	74 2d                	je     c0020267 <SATA::open(int, int, void*)+0x3d>
c002023a:	83 ec 0c             	sub    esp,0xc
c002023d:	68 3c 6c 02 c0       	push   0xc0026c3c
c0020242:	e8 22 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020247:	83 c4 10             	add    esp,0x10
c002024a:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020251:	75 14                	jne    c0020267 <SATA::open(int, int, void*)+0x3d>
c0020253:	e4 60                	in     al,0x60
c0020255:	3c 5a                	cmp    al,0x5a
c0020257:	74 04                	je     c002025d <SATA::open(int, int, void*)+0x33>
c0020259:	3c 1c                	cmp    al,0x1c
c002025b:	75 f6                	jne    c0020253 <SATA::open(int, int, void*)+0x29>
c002025d:	e4 60                	in     al,0x60
c002025f:	3c 5a                	cmp    al,0x5a
c0020261:	74 fa                	je     c002025d <SATA::open(int, int, void*)+0x33>
c0020263:	3c 1c                	cmp    al,0x1c
c0020265:	74 f6                	je     c002025d <SATA::open(int, int, void*)+0x33>
c0020267:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002026b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020275:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002027b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020285:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020289:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020293:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020299:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00202a0:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c00202a7:	74 2d                	je     c00202d6 <SATA::open(int, int, void*)+0xac>
c00202a9:	83 ec 0c             	sub    esp,0xc
c00202ac:	68 49 6c 02 c0       	push   0xc0026c49
c00202b1:	e8 b3 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00202b6:	83 c4 10             	add    esp,0x10
c00202b9:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c00202c0:	75 14                	jne    c00202d6 <SATA::open(int, int, void*)+0xac>
c00202c2:	e4 60                	in     al,0x60
c00202c4:	3c 1c                	cmp    al,0x1c
c00202c6:	74 04                	je     c00202cc <SATA::open(int, int, void*)+0xa2>
c00202c8:	3c 5a                	cmp    al,0x5a
c00202ca:	75 f6                	jne    c00202c2 <SATA::open(int, int, void*)+0x98>
c00202cc:	e4 60                	in     al,0x60
c00202ce:	3c 5a                	cmp    al,0x5a
c00202d0:	74 fa                	je     c00202cc <SATA::open(int, int, void*)+0xa2>
c00202d2:	3c 1c                	cmp    al,0x1c
c00202d4:	74 f6                	je     c00202cc <SATA::open(int, int, void*)+0xa2>
c00202d6:	e8 eb 9d fe ff       	call   c000a0c6 <Phys::allocatePage()>
c00202db:	89 c6                	mov    esi,eax
c00202dd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00202e3:	81 c6 00 10 00 00    	add    esi,0x1000
c00202e9:	e8 d8 9d fe ff       	call   c000a0c6 <Phys::allocatePage()>
c00202ee:	39 c6                	cmp    esi,eax
c00202f0:	74 10                	je     c0020302 <SATA::open(int, int, void*)+0xd8>
c00202f2:	83 ec 0c             	sub    esp,0xc
c00202f5:	68 56 6c 02 c0       	push   0xc0026c56
c00202fa:	e8 c8 46 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c00202ff:	83 c4 10             	add    esp,0x10
c0020302:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020309:	74 2d                	je     c0020338 <SATA::open(int, int, void*)+0x10e>
c002030b:	83 ec 0c             	sub    esp,0xc
c002030e:	68 6a 6c 02 c0       	push   0xc0026c6a
c0020313:	e8 51 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020318:	83 c4 10             	add    esp,0x10
c002031b:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020322:	75 14                	jne    c0020338 <SATA::open(int, int, void*)+0x10e>
c0020324:	e4 60                	in     al,0x60
c0020326:	3c 1c                	cmp    al,0x1c
c0020328:	74 04                	je     c002032e <SATA::open(int, int, void*)+0x104>
c002032a:	3c 5a                	cmp    al,0x5a
c002032c:	75 f6                	jne    c0020324 <SATA::open(int, int, void*)+0xfa>
c002032e:	e4 60                	in     al,0x60
c0020330:	3c 5a                	cmp    al,0x5a
c0020332:	74 fa                	je     c002032e <SATA::open(int, int, void*)+0x104>
c0020334:	3c 1c                	cmp    al,0x1c
c0020336:	74 f6                	je     c002032e <SATA::open(int, int, void*)+0x104>
c0020338:	83 ec 0c             	sub    esp,0xc
c002033b:	6a 02                	push   0x2
c002033d:	e8 97 b6 fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c0020342:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020348:	6a 03                	push   0x3
c002034a:	50                   	push   eax
c002034b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020351:	ff 35 10 82 02 c0    	push   DWORD PTR ds:0xc0028210
c0020357:	e8 24 bd fe ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c002035c:	83 c4 20             	add    esp,0x20
c002035f:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020366:	74 2d                	je     c0020395 <SATA::open(int, int, void*)+0x16b>
c0020368:	83 ec 0c             	sub    esp,0xc
c002036b:	68 77 6c 02 c0       	push   0xc0026c77
c0020370:	e8 f4 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020375:	83 c4 10             	add    esp,0x10
c0020378:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c002037f:	75 14                	jne    c0020395 <SATA::open(int, int, void*)+0x16b>
c0020381:	e4 60                	in     al,0x60
c0020383:	3c 1c                	cmp    al,0x1c
c0020385:	74 04                	je     c002038b <SATA::open(int, int, void*)+0x161>
c0020387:	3c 5a                	cmp    al,0x5a
c0020389:	75 f6                	jne    c0020381 <SATA::open(int, int, void*)+0x157>
c002038b:	e4 60                	in     al,0x60
c002038d:	3c 5a                	cmp    al,0x5a
c002038f:	74 fa                	je     c002038b <SATA::open(int, int, void*)+0x161>
c0020391:	3c 1c                	cmp    al,0x1c
c0020393:	74 f6                	je     c002038b <SATA::open(int, int, void*)+0x161>
c0020395:	83 ec 0c             	sub    esp,0xc
c0020398:	53                   	push   ebx
c0020399:	e8 40 e3 fe ff       	call   c000e6de <PhysicalDisk::startCache()>
c002039e:	83 c4 10             	add    esp,0x10
c00203a1:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c00203a8:	74 2d                	je     c00203d7 <SATA::open(int, int, void*)+0x1ad>
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	68 84 6c 02 c0       	push   0xc0026c84
c00203b2:	e8 b2 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00203b7:	83 c4 10             	add    esp,0x10
c00203ba:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c00203c1:	75 14                	jne    c00203d7 <SATA::open(int, int, void*)+0x1ad>
c00203c3:	e4 60                	in     al,0x60
c00203c5:	3c 1c                	cmp    al,0x1c
c00203c7:	74 04                	je     c00203cd <SATA::open(int, int, void*)+0x1a3>
c00203c9:	3c 5a                	cmp    al,0x5a
c00203cb:	75 f6                	jne    c00203c3 <SATA::open(int, int, void*)+0x199>
c00203cd:	e4 60                	in     al,0x60
c00203cf:	3c 5a                	cmp    al,0x5a
c00203d1:	74 fa                	je     c00203cd <SATA::open(int, int, void*)+0x1a3>
c00203d3:	3c 1c                	cmp    al,0x1c
c00203d5:	74 f6                	je     c00203cd <SATA::open(int, int, void*)+0x1a3>
c00203d7:	83 ec 0c             	sub    esp,0xc
c00203da:	53                   	push   ebx
c00203db:	e8 7e 03 ff ff       	call   c001075e <createPartitionsForDisk(PhysicalDisk*)>
c00203e0:	83 c4 10             	add    esp,0x10
c00203e3:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c00203ea:	74 2d                	je     c0020419 <SATA::open(int, int, void*)+0x1ef>
c00203ec:	83 ec 0c             	sub    esp,0xc
c00203ef:	68 91 6c 02 c0       	push   0xc0026c91
c00203f4:	e8 70 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00203f9:	83 c4 10             	add    esp,0x10
c00203fc:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020403:	75 14                	jne    c0020419 <SATA::open(int, int, void*)+0x1ef>
c0020405:	e4 60                	in     al,0x60
c0020407:	3c 1c                	cmp    al,0x1c
c0020409:	74 04                	je     c002040f <SATA::open(int, int, void*)+0x1e5>
c002040b:	3c 5a                	cmp    al,0x5a
c002040d:	75 f6                	jne    c0020405 <SATA::open(int, int, void*)+0x1db>
c002040f:	e4 60                	in     al,0x60
c0020411:	3c 5a                	cmp    al,0x5a
c0020413:	74 fa                	je     c002040f <SATA::open(int, int, void*)+0x1e5>
c0020415:	3c 1c                	cmp    al,0x1c
c0020417:	74 f6                	je     c002040f <SATA::open(int, int, void*)+0x1e5>
c0020419:	5a                   	pop    edx
c002041a:	31 c0                	xor    eax,eax
c002041c:	5b                   	pop    ebx
c002041d:	5e                   	pop    esi
c002041e:	c3                   	ret    
c002041f:	90                   	nop

c0020420 <SATA::SATA()>:
c0020420:	83 ec 0c             	sub    esp,0xc
c0020423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020427:	83 ec 04             	sub    esp,0x4
c002042a:	68 00 02 00 00       	push   0x200
c002042f:	68 9e 6c 02 c0       	push   0xc0026c9e
c0020434:	50                   	push   eax
c0020435:	e8 3c e2 fe ff       	call   c000e676 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002043a:	83 c4 10             	add    esp,0x10
c002043d:	ba 48 6e 02 c0       	mov    edx,0xc0026e48
c0020442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020446:	89 10                	mov    DWORD PTR [eax],edx
c0020448:	90                   	nop
c0020449:	83 c4 0c             	add    esp,0xc
c002044c:	c3                   	ret    
c002044d:	90                   	nop

c002044e <SATA::access(unsigned long long, int, void*, bool)>:
c002044e:	55                   	push   ebp
c002044f:	57                   	push   edi
c0020450:	56                   	push   esi
c0020451:	53                   	push   ebx
c0020452:	83 ec 2c             	sub    esp,0x2c
c0020455:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020459:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002045d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020461:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020468:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002046c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020470:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020474:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020478:	75 19                	jne    c0020493 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c002047a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002047f:	7e 41                	jle    c00204c2 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020481:	83 ec 0c             	sub    esp,0xc
c0020484:	68 bd 6c 02 c0       	push   0xc0026cbd
c0020489:	e8 39 45 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c002048e:	83 c4 10             	add    esp,0x10
c0020491:	eb 2f                	jmp    c00204c2 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020493:	83 ec 0c             	sub    esp,0xc
c0020496:	68 ae 6c 02 c0       	push   0xc0026cae
c002049b:	e8 c9 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00204a0:	83 c4 10             	add    esp,0x10
c00204a3:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c00204aa:	75 ce                	jne    c002047a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00204ac:	e4 60                	in     al,0x60
c00204ae:	3c 1c                	cmp    al,0x1c
c00204b0:	74 04                	je     c00204b6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204b2:	3c 5a                	cmp    al,0x5a
c00204b4:	75 f6                	jne    c00204ac <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c00204b6:	e4 60                	in     al,0x60
c00204b8:	3c 5a                	cmp    al,0x5a
c00204ba:	74 fa                	je     c00204b6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204bc:	3c 1c                	cmp    al,0x1c
c00204be:	74 f6                	je     c00204b6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204c0:	eb b8                	jmp    c002047a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00204c2:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c00204c9:	75 29                	jne    c00204f4 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c00204cb:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00204d1:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00204d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00204dd:	8d 75 02             	lea    esi,[ebp+0x2]
c00204e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204e4:	c1 e6 07             	shl    esi,0x7
c00204e7:	01 c6                	add    esi,eax
c00204e9:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c00204f0:	74 4a                	je     c002053c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00204f2:	eb 2f                	jmp    c0020523 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c00204f4:	83 ec 0c             	sub    esp,0xc
c00204f7:	68 f6 6c 02 c0       	push   0xc0026cf6
c00204fc:	e8 68 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020501:	83 c4 10             	add    esp,0x10
c0020504:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c002050b:	75 be                	jne    c00204cb <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c002050d:	e4 60                	in     al,0x60
c002050f:	3c 1c                	cmp    al,0x1c
c0020511:	74 04                	je     c0020517 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020513:	3c 5a                	cmp    al,0x5a
c0020515:	75 f6                	jne    c002050d <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020517:	e4 60                	in     al,0x60
c0020519:	3c 5a                	cmp    al,0x5a
c002051b:	74 fa                	je     c0020517 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c002051d:	3c 1c                	cmp    al,0x1c
c002051f:	74 f6                	je     c0020517 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020521:	eb a8                	jmp    c00204cb <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020523:	83 ec 0c             	sub    esp,0xc
c0020526:	68 05 6d 02 c0       	push   0xc0026d05
c002052b:	e8 39 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020530:	83 c4 10             	add    esp,0x10
c0020533:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c002053a:	74 3d                	je     c0020579 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c002053c:	89 e8                	mov    eax,ebp
c002053e:	c1 e0 07             	shl    eax,0x7
c0020541:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020545:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002054f:	52                   	push   edx
c0020550:	52                   	push   edx
c0020551:	56                   	push   esi
c0020552:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020558:	e8 c9 ea ff ff       	call   c001f026 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002055d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020561:	83 c4 10             	add    esp,0x10
c0020564:	b8 01 00 00 00       	mov    eax,0x1
c0020569:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002056e:	75 1d                	jne    c002058d <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020570:	e9 c8 04 00 00       	jmp    c0020a3d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020575:	3c 5a                	cmp    al,0x5a
c0020577:	74 0c                	je     c0020585 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020579:	e4 60                	in     al,0x60
c002057b:	3c 1c                	cmp    al,0x1c
c002057d:	75 f6                	jne    c0020575 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c002057f:	eb 04                	jmp    c0020585 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020581:	3c 1c                	cmp    al,0x1c
c0020583:	75 b7                	jne    c002053c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020585:	e4 60                	in     al,0x60
c0020587:	3c 5a                	cmp    al,0x5a
c0020589:	74 fa                	je     c0020585 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c002058b:	eb f4                	jmp    c0020581 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c002058d:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020594:	74 3a                	je     c00205d0 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020596:	83 ec 0c             	sub    esp,0xc
c0020599:	68 14 6d 02 c0       	push   0xc0026d14
c002059e:	e8 c6 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00205a3:	83 c4 10             	add    esp,0x10
c00205a6:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c00205ad:	74 0d                	je     c00205bc <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c00205af:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00205b4:	74 34                	je     c00205ea <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c00205b6:	eb 1f                	jmp    c00205d7 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c00205b8:	3c 1c                	cmp    al,0x1c
c00205ba:	74 0c                	je     c00205c8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205bc:	e4 60                	in     al,0x60
c00205be:	3c 5a                	cmp    al,0x5a
c00205c0:	75 f6                	jne    c00205b8 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c00205c2:	eb 04                	jmp    c00205c8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205c4:	3c 1c                	cmp    al,0x1c
c00205c6:	75 e7                	jne    c00205af <SATA::access(unsigned long long, int, void*, bool)+0x161>
c00205c8:	e4 60                	in     al,0x60
c00205ca:	3c 5a                	cmp    al,0x5a
c00205cc:	74 fa                	je     c00205c8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205ce:	eb f4                	jmp    c00205c4 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c00205d0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00205d5:	74 1c                	je     c00205f3 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00205d7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00205db:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00205e1:	c1 e1 09             	shl    ecx,0x9
c00205e4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00205e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00205ea:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c00205f1:	75 55                	jne    c0020648 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c00205f3:	8d 45 02             	lea    eax,[ebp+0x2]
c00205f6:	c1 e0 07             	shl    eax,0x7
c00205f9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00205fd:	8b 38                	mov    edi,DWORD PTR [eax]
c00205ff:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020605:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c002060b:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020615:	c1 e0 05             	shl    eax,0x5
c0020618:	01 c7                	add    edi,eax
c002061a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002061e:	83 e0 01             	and    eax,0x1
c0020621:	c1 e0 06             	shl    eax,0x6
c0020624:	88 c2                	mov    dl,al
c0020626:	8a 07                	mov    al,BYTE PTR [edi]
c0020628:	83 e0 bf             	and    eax,0xffffffbf
c002062b:	09 d0                	or     eax,edx
c002062d:	88 07                	mov    BYTE PTR [edi],al
c002062f:	8b 07                	mov    eax,DWORD PTR [edi]
c0020631:	25 e0 ff 00 00       	and    eax,0xffe0
c0020636:	0d 05 00 01 00       	or     eax,0x10005
c002063b:	89 07                	mov    DWORD PTR [edi],eax
c002063d:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020644:	74 4d                	je     c0020693 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020646:	eb 32                	jmp    c002067a <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020648:	83 ec 0c             	sub    esp,0xc
c002064b:	68 23 6d 02 c0       	push   0xc0026d23
c0020650:	e8 14 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020655:	83 c4 10             	add    esp,0x10
c0020658:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c002065f:	75 92                	jne    c00205f3 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020661:	e4 60                	in     al,0x60
c0020663:	3c 1c                	cmp    al,0x1c
c0020665:	74 04                	je     c002066b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020667:	3c 5a                	cmp    al,0x5a
c0020669:	75 f6                	jne    c0020661 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c002066b:	e4 60                	in     al,0x60
c002066d:	3c 5a                	cmp    al,0x5a
c002066f:	74 fa                	je     c002066b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020671:	3c 1c                	cmp    al,0x1c
c0020673:	74 f6                	je     c002066b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020675:	e9 79 ff ff ff       	jmp    c00205f3 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002067a:	83 ec 0c             	sub    esp,0xc
c002067d:	68 32 6d 02 c0       	push   0xc0026d32
c0020682:	e8 e2 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020687:	83 c4 10             	add    esp,0x10
c002068a:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020691:	74 3b                	je     c00206ce <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020693:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020699:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c002069f:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c00206a5:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c00206a8:	50                   	push   eax
c00206a9:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c00206ad:	83 c0 08             	add    eax,0x8
c00206b0:	c1 e0 04             	shl    eax,0x4
c00206b3:	50                   	push   eax
c00206b4:	6a 00                	push   0x0
c00206b6:	56                   	push   esi
c00206b7:	e8 c8 ff fd ff       	call   c0000684 <memset>
c00206bc:	83 c4 10             	add    esp,0x10
c00206bf:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c00206c6:	74 33                	je     c00206fb <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00206c8:	eb 18                	jmp    c00206e2 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c00206ca:	3c 1c                	cmp    al,0x1c
c00206cc:	74 0c                	je     c00206da <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206ce:	e4 60                	in     al,0x60
c00206d0:	3c 5a                	cmp    al,0x5a
c00206d2:	75 f6                	jne    c00206ca <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00206d4:	eb 04                	jmp    c00206da <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206d6:	3c 1c                	cmp    al,0x1c
c00206d8:	75 b9                	jne    c0020693 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c00206da:	e4 60                	in     al,0x60
c00206dc:	3c 5a                	cmp    al,0x5a
c00206de:	74 fa                	je     c00206da <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206e0:	eb f4                	jmp    c00206d6 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c00206e2:	83 ec 0c             	sub    esp,0xc
c00206e5:	68 41 6d 02 c0       	push   0xc0026d41
c00206ea:	e8 7a 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00206ef:	83 c4 10             	add    esp,0x10
c00206f2:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c00206f9:	74 48                	je     c0020743 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c00206fb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020701:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020707:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002070b:	c1 e0 09             	shl    eax,0x9
c002070e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020712:	48                   	dec    eax
c0020713:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020718:	89 c2                	mov    edx,eax
c002071a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020720:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020725:	09 d0                	or     eax,edx
c0020727:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002072d:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020734:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c002073b:	74 33                	je     c0020770 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c002073d:	eb 18                	jmp    c0020757 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c002073f:	3c 1c                	cmp    al,0x1c
c0020741:	74 0c                	je     c002074f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020743:	e4 60                	in     al,0x60
c0020745:	3c 5a                	cmp    al,0x5a
c0020747:	75 f6                	jne    c002073f <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020749:	eb 04                	jmp    c002074f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002074b:	3c 1c                	cmp    al,0x1c
c002074d:	75 ac                	jne    c00206fb <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c002074f:	e4 60                	in     al,0x60
c0020751:	3c 5a                	cmp    al,0x5a
c0020753:	74 fa                	je     c002074f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020755:	eb f4                	jmp    c002074b <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020757:	83 ec 0c             	sub    esp,0xc
c002075a:	68 50 6d 02 c0       	push   0xc0026d50
c002075f:	e8 05 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020764:	83 c4 10             	add    esp,0x10
c0020767:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c002076e:	74 63                	je     c00207d3 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020770:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020773:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020777:	66 25 00 7f          	and    ax,0x7f00
c002077b:	66 0d 27 80          	or     ax,0x8027
c002077f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020784:	66 89 06             	mov    WORD PTR [esi],ax
c0020787:	19 c0                	sbb    eax,eax
c0020789:	83 e0 f0             	and    eax,0xfffffff0
c002078c:	83 c0 35             	add    eax,0x35
c002078f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020792:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020796:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002079a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002079e:	c1 e8 10             	shr    eax,0x10
c00207a1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00207a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207a8:	c1 e8 18             	shr    eax,0x18
c00207ab:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c00207b2:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00207b5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00207b9:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00207bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207c0:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00207c3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00207c7:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00207cb:	74 33                	je     c0020800 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00207cd:	eb 18                	jmp    c00207e7 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c00207cf:	3c 1c                	cmp    al,0x1c
c00207d1:	74 0c                	je     c00207df <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207d3:	e4 60                	in     al,0x60
c00207d5:	3c 5a                	cmp    al,0x5a
c00207d7:	75 f6                	jne    c00207cf <SATA::access(unsigned long long, int, void*, bool)+0x381>
c00207d9:	eb 04                	jmp    c00207df <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207db:	3c 1c                	cmp    al,0x1c
c00207dd:	75 91                	jne    c0020770 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c00207df:	e4 60                	in     al,0x60
c00207e1:	3c 5a                	cmp    al,0x5a
c00207e3:	74 fa                	je     c00207df <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207e5:	eb f4                	jmp    c00207db <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c00207e7:	83 ec 0c             	sub    esp,0xc
c00207ea:	68 5f 6d 02 c0       	push   0xc0026d5f
c00207ef:	e8 75 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00207f4:	83 c4 10             	add    esp,0x10
c00207f7:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c00207fe:	74 11                	je     c0020811 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020800:	89 e8                	mov    eax,ebp
c0020802:	31 f6                	xor    esi,esi
c0020804:	c1 e0 07             	shl    eax,0x7
c0020807:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002080b:	eb 21                	jmp    c002082e <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c002080d:	3c 1c                	cmp    al,0x1c
c002080f:	74 0c                	je     c002081d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020811:	e4 60                	in     al,0x60
c0020813:	3c 5a                	cmp    al,0x5a
c0020815:	75 f6                	jne    c002080d <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020817:	eb 04                	jmp    c002081d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020819:	3c 1c                	cmp    al,0x1c
c002081b:	75 e3                	jne    c0020800 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c002081d:	e4 60                	in     al,0x60
c002081f:	3c 5a                	cmp    al,0x5a
c0020821:	74 fa                	je     c002081d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020823:	eb f4                	jmp    c0020819 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020825:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002082b:	74 0c                	je     c0020839 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c002082d:	46                   	inc    esi
c002082e:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020834:	80 e2 88             	and    dl,0x88
c0020837:	75 ec                	jne    c0020825 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020839:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020840:	74 3d                	je     c002087f <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020842:	83 ec 0c             	sub    esp,0xc
c0020845:	68 6e 6d 02 c0       	push   0xc0026d6e
c002084a:	e8 1a 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002084f:	8b 15 00 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028100
c0020855:	83 c4 10             	add    esp,0x10
c0020858:	f6 c2 80             	test   dl,0x80
c002085b:	74 0e                	je     c002086b <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c002085d:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020863:	75 2f                	jne    c0020894 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020865:	eb 20                	jmp    c0020887 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020867:	3c 1c                	cmp    al,0x1c
c0020869:	74 0c                	je     c0020877 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002086b:	e4 60                	in     al,0x60
c002086d:	3c 5a                	cmp    al,0x5a
c002086f:	75 f6                	jne    c0020867 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020871:	eb 04                	jmp    c0020877 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020873:	3c 1c                	cmp    al,0x1c
c0020875:	75 e6                	jne    c002085d <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020877:	e4 60                	in     al,0x60
c0020879:	3c 5a                	cmp    al,0x5a
c002087b:	74 fa                	je     c0020877 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002087d:	eb f4                	jmp    c0020873 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c002087f:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020885:	75 13                	jne    c002089a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020887:	83 ec 0c             	sub    esp,0xc
c002088a:	68 7e 6d 02 c0       	push   0xc0026d7e
c002088f:	e9 d2 00 00 00       	jmp    c0020966 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c0020894:	0f ba e2 0b          	bt     edx,0xb
c0020898:	72 25                	jb     c00208bf <SATA::access(unsigned long long, int, void*, bool)+0x471>
c002089a:	be 01 00 00 00       	mov    esi,0x1
c002089f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00208a3:	89 e8                	mov    eax,ebp
c00208a5:	d3 e6                	shl    esi,cl
c00208a7:	c1 e0 07             	shl    eax,0x7
c00208aa:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00208ae:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c00208b5:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00208bb:	74 4a                	je     c0020907 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00208bd:	eb 2f                	jmp    c00208ee <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c00208bf:	83 ec 0c             	sub    esp,0xc
c00208c2:	68 8c 6d 02 c0       	push   0xc0026d8c
c00208c7:	e8 9d 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00208cc:	83 c4 10             	add    esp,0x10
c00208cf:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c00208d6:	75 c2                	jne    c002089a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00208d8:	e4 60                	in     al,0x60
c00208da:	3c 5a                	cmp    al,0x5a
c00208dc:	74 04                	je     c00208e2 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00208de:	3c 1c                	cmp    al,0x1c
c00208e0:	75 f6                	jne    c00208d8 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c00208e2:	e4 60                	in     al,0x60
c00208e4:	3c 5a                	cmp    al,0x5a
c00208e6:	74 fa                	je     c00208e2 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00208e8:	3c 1c                	cmp    al,0x1c
c00208ea:	74 f6                	je     c00208e2 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00208ec:	eb ac                	jmp    c002089a <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00208ee:	83 ec 0c             	sub    esp,0xc
c00208f1:	68 9c 6d 02 c0       	push   0xc0026d9c
c00208f6:	e8 6e 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00208fb:	83 c4 10             	add    esp,0x10
c00208fe:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020905:	74 0f                	je     c0020916 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020907:	89 e8                	mov    eax,ebp
c0020909:	c1 e0 07             	shl    eax,0x7
c002090c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020910:	eb 24                	jmp    c0020936 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020912:	3c 1c                	cmp    al,0x1c
c0020914:	74 0c                	je     c0020922 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020916:	e4 60                	in     al,0x60
c0020918:	3c 5a                	cmp    al,0x5a
c002091a:	75 f6                	jne    c0020912 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c002091c:	eb 04                	jmp    c0020922 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002091e:	3c 1c                	cmp    al,0x1c
c0020920:	75 e5                	jne    c0020907 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020922:	e4 60                	in     al,0x60
c0020924:	3c 5a                	cmp    al,0x5a
c0020926:	74 fa                	je     c0020922 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020928:	eb f4                	jmp    c002091e <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c002092a:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020930:	0f ba e2 1e          	bt     edx,0x1e
c0020934:	72 28                	jb     c002095e <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020936:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c002093c:	85 d6                	test   esi,edx
c002093e:	75 ea                	jne    c002092a <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020940:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020947:	75 2f                	jne    c0020978 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020949:	89 e8                	mov    eax,ebp
c002094b:	c1 e0 07             	shl    eax,0x7
c002094e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020952:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020958:	0f ba e0 1e          	bt     eax,0x1e
c002095c:	73 49                	jae    c00209a7 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c002095e:	83 ec 0c             	sub    esp,0xc
c0020961:	68 ac 6d 02 c0       	push   0xc0026dac
c0020966:	e8 5c 40 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c002096b:	83 c4 10             	add    esp,0x10
c002096e:	b8 01 00 00 00       	mov    eax,0x1
c0020973:	e9 c5 00 00 00       	jmp    c0020a3d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020978:	83 ec 0c             	sub    esp,0xc
c002097b:	68 bd 6d 02 c0       	push   0xc0026dbd
c0020980:	e8 e4 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020985:	83 c4 10             	add    esp,0x10
c0020988:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c002098f:	75 b8                	jne    c0020949 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c0020991:	e4 60                	in     al,0x60
c0020993:	3c 5a                	cmp    al,0x5a
c0020995:	74 04                	je     c002099b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c0020997:	3c 1c                	cmp    al,0x1c
c0020999:	75 f6                	jne    c0020991 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c002099b:	e4 60                	in     al,0x60
c002099d:	3c 5a                	cmp    al,0x5a
c002099f:	74 fa                	je     c002099b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00209a1:	3c 1c                	cmp    al,0x1c
c00209a3:	74 f6                	je     c002099b <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00209a5:	eb a2                	jmp    c0020949 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00209a7:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c00209ae:	74 3a                	je     c00209ea <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c00209b0:	83 ec 0c             	sub    esp,0xc
c00209b3:	68 cd 6d 02 c0       	push   0xc0026dcd
c00209b8:	e8 ac 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00209bd:	83 c4 10             	add    esp,0x10
c00209c0:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c00209c7:	74 0d                	je     c00209d6 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00209c9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00209ce:	75 31                	jne    c0020a01 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00209d0:	eb 1f                	jmp    c00209f1 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00209d2:	3c 1c                	cmp    al,0x1c
c00209d4:	74 0c                	je     c00209e2 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209d6:	e4 60                	in     al,0x60
c00209d8:	3c 5a                	cmp    al,0x5a
c00209da:	75 f6                	jne    c00209d2 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c00209dc:	eb 04                	jmp    c00209e2 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209de:	3c 1c                	cmp    al,0x1c
c00209e0:	75 e7                	jne    c00209c9 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c00209e2:	e4 60                	in     al,0x60
c00209e4:	3c 5a                	cmp    al,0x5a
c00209e6:	74 fa                	je     c00209e2 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209e8:	eb f4                	jmp    c00209de <SATA::access(unsigned long long, int, void*, bool)+0x590>
c00209ea:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00209ef:	75 19                	jne    c0020a0a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c00209f1:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00209f7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00209fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00209ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a01:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020a08:	75 04                	jne    c0020a0e <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020a0a:	31 c0                	xor    eax,eax
c0020a0c:	eb 2f                	jmp    c0020a3d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020a0e:	83 ec 0c             	sub    esp,0xc
c0020a11:	68 dd 6d 02 c0       	push   0xc0026ddd
c0020a16:	e8 4e 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a1b:	83 c4 10             	add    esp,0x10
c0020a1e:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020a25:	75 e3                	jne    c0020a0a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020a27:	e4 60                	in     al,0x60
c0020a29:	3c 1c                	cmp    al,0x1c
c0020a2b:	74 04                	je     c0020a31 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a2d:	3c 5a                	cmp    al,0x5a
c0020a2f:	75 f6                	jne    c0020a27 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020a31:	e4 60                	in     al,0x60
c0020a33:	3c 5a                	cmp    al,0x5a
c0020a35:	74 fa                	je     c0020a31 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a37:	3c 1c                	cmp    al,0x1c
c0020a39:	74 f6                	je     c0020a31 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a3b:	eb cd                	jmp    c0020a0a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020a3d:	83 c4 2c             	add    esp,0x2c
c0020a40:	5b                   	pop    ebx
c0020a41:	5e                   	pop    esi
c0020a42:	5f                   	pop    edi
c0020a43:	5d                   	pop    ebp
c0020a44:	c3                   	ret    
c0020a45:	90                   	nop

c0020a46 <SATA::read(unsigned long long, int, void*)>:
c0020a46:	55                   	push   ebp
c0020a47:	57                   	push   edi
c0020a48:	56                   	push   esi
c0020a49:	53                   	push   ebx
c0020a4a:	83 ec 0c             	sub    esp,0xc
c0020a4d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020a51:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020a55:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020a59:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020a5d:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020a64:	74 2d                	je     c0020a93 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020a66:	83 ec 0c             	sub    esp,0xc
c0020a69:	68 ed 6d 02 c0       	push   0xc0026ded
c0020a6e:	e8 f6 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a73:	83 c4 10             	add    esp,0x10
c0020a76:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020a7d:	75 14                	jne    c0020a93 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020a7f:	e4 60                	in     al,0x60
c0020a81:	3c 1c                	cmp    al,0x1c
c0020a83:	74 04                	je     c0020a89 <SATA::read(unsigned long long, int, void*)+0x43>
c0020a85:	3c 5a                	cmp    al,0x5a
c0020a87:	75 f6                	jne    c0020a7f <SATA::read(unsigned long long, int, void*)+0x39>
c0020a89:	e4 60                	in     al,0x60
c0020a8b:	3c 5a                	cmp    al,0x5a
c0020a8d:	74 fa                	je     c0020a89 <SATA::read(unsigned long long, int, void*)+0x43>
c0020a8f:	3c 1c                	cmp    al,0x1c
c0020a91:	74 f6                	je     c0020a89 <SATA::read(unsigned long long, int, void*)+0x43>
c0020a93:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020a96:	b8 04 00 00 00       	mov    eax,0x4
c0020a9b:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020aa1:	0f 87 96 00 00 00    	ja     c0020b3d <SATA::read(unsigned long long, int, void*)+0xf7>
c0020aa7:	b8 06 00 00 00       	mov    eax,0x6
c0020aac:	85 ed                	test   ebp,ebp
c0020aae:	0f 84 89 00 00 00    	je     c0020b3d <SATA::read(unsigned long long, int, void*)+0xf7>
c0020ab4:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020abb:	74 2d                	je     c0020aea <SATA::read(unsigned long long, int, void*)+0xa4>
c0020abd:	83 ec 0c             	sub    esp,0xc
c0020ac0:	68 fa 6d 02 c0       	push   0xc0026dfa
c0020ac5:	e8 9f 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020aca:	83 c4 10             	add    esp,0x10
c0020acd:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020ad4:	75 14                	jne    c0020aea <SATA::read(unsigned long long, int, void*)+0xa4>
c0020ad6:	e4 60                	in     al,0x60
c0020ad8:	3c 5a                	cmp    al,0x5a
c0020ada:	74 04                	je     c0020ae0 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020adc:	3c 1c                	cmp    al,0x1c
c0020ade:	75 f6                	jne    c0020ad6 <SATA::read(unsigned long long, int, void*)+0x90>
c0020ae0:	e4 60                	in     al,0x60
c0020ae2:	3c 5a                	cmp    al,0x5a
c0020ae4:	74 fa                	je     c0020ae0 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020ae6:	3c 1c                	cmp    al,0x1c
c0020ae8:	74 f6                	je     c0020ae0 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020aea:	50                   	push   eax
c0020aeb:	50                   	push   eax
c0020aec:	6a 00                	push   0x0
c0020aee:	55                   	push   ebp
c0020aef:	53                   	push   ebx
c0020af0:	57                   	push   edi
c0020af1:	56                   	push   esi
c0020af2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020af6:	e8 53 f9 ff ff       	call   c002044e <SATA::access(unsigned long long, int, void*, bool)>
c0020afb:	83 c4 20             	add    esp,0x20
c0020afe:	89 c3                	mov    ebx,eax
c0020b00:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020b07:	74 2d                	je     c0020b36 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020b09:	83 ec 0c             	sub    esp,0xc
c0020b0c:	68 07 6e 02 c0       	push   0xc0026e07
c0020b11:	e8 53 8f fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020b16:	83 c4 10             	add    esp,0x10
c0020b19:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020b20:	75 14                	jne    c0020b36 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020b22:	e4 60                	in     al,0x60
c0020b24:	3c 5a                	cmp    al,0x5a
c0020b26:	74 04                	je     c0020b2c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b28:	3c 1c                	cmp    al,0x1c
c0020b2a:	75 f6                	jne    c0020b22 <SATA::read(unsigned long long, int, void*)+0xdc>
c0020b2c:	e4 60                	in     al,0x60
c0020b2e:	3c 5a                	cmp    al,0x5a
c0020b30:	74 fa                	je     c0020b2c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b32:	3c 1c                	cmp    al,0x1c
c0020b34:	74 f6                	je     c0020b2c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b36:	31 c0                	xor    eax,eax
c0020b38:	85 db                	test   ebx,ebx
c0020b3a:	0f 95 c0             	setne  al
c0020b3d:	83 c4 0c             	add    esp,0xc
c0020b40:	5b                   	pop    ebx
c0020b41:	5e                   	pop    esi
c0020b42:	5f                   	pop    edi
c0020b43:	5d                   	pop    ebp
c0020b44:	c3                   	ret    
c0020b45:	90                   	nop

c0020b46 <SATA::write(unsigned long long, int, void*)>:
c0020b46:	55                   	push   ebp
c0020b47:	57                   	push   edi
c0020b48:	56                   	push   esi
c0020b49:	53                   	push   ebx
c0020b4a:	83 ec 1c             	sub    esp,0x1c
c0020b4d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020b51:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020b55:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020b59:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020b5d:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020b64:	74 2d                	je     c0020b93 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020b66:	83 ec 0c             	sub    esp,0xc
c0020b69:	68 14 6e 02 c0       	push   0xc0026e14
c0020b6e:	e8 f6 8e fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020b73:	83 c4 10             	add    esp,0x10
c0020b76:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020b7d:	75 14                	jne    c0020b93 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020b7f:	e4 60                	in     al,0x60
c0020b81:	3c 1c                	cmp    al,0x1c
c0020b83:	74 04                	je     c0020b89 <SATA::write(unsigned long long, int, void*)+0x43>
c0020b85:	3c 5a                	cmp    al,0x5a
c0020b87:	75 f6                	jne    c0020b7f <SATA::write(unsigned long long, int, void*)+0x39>
c0020b89:	e4 60                	in     al,0x60
c0020b8b:	3c 5a                	cmp    al,0x5a
c0020b8d:	74 fa                	je     c0020b89 <SATA::write(unsigned long long, int, void*)+0x43>
c0020b8f:	3c 1c                	cmp    al,0x1c
c0020b91:	74 f6                	je     c0020b89 <SATA::write(unsigned long long, int, void*)+0x43>
c0020b93:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020b96:	b8 04 00 00 00       	mov    eax,0x4
c0020b9b:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020ba1:	0f 87 bd 00 00 00    	ja     c0020c64 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020ba7:	b8 06 00 00 00       	mov    eax,0x6
c0020bac:	85 db                	test   ebx,ebx
c0020bae:	0f 84 b0 00 00 00    	je     c0020c64 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020bb4:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020bbb:	74 2d                	je     c0020bea <SATA::write(unsigned long long, int, void*)+0xa4>
c0020bbd:	83 ec 0c             	sub    esp,0xc
c0020bc0:	68 22 6e 02 c0       	push   0xc0026e22
c0020bc5:	e8 9f 8e fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020bca:	83 c4 10             	add    esp,0x10
c0020bcd:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020bd4:	75 14                	jne    c0020bea <SATA::write(unsigned long long, int, void*)+0xa4>
c0020bd6:	e4 60                	in     al,0x60
c0020bd8:	3c 1c                	cmp    al,0x1c
c0020bda:	74 04                	je     c0020be0 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020bdc:	3c 5a                	cmp    al,0x5a
c0020bde:	75 f6                	jne    c0020bd6 <SATA::write(unsigned long long, int, void*)+0x90>
c0020be0:	e4 60                	in     al,0x60
c0020be2:	3c 5a                	cmp    al,0x5a
c0020be4:	74 fa                	je     c0020be0 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020be6:	3c 1c                	cmp    al,0x1c
c0020be8:	74 f6                	je     c0020be0 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020bea:	c1 e5 09             	shl    ebp,0x9
c0020bed:	01 dd                	add    ebp,ebx
c0020bef:	89 f0                	mov    eax,esi
c0020bf1:	89 fa                	mov    edx,edi
c0020bf3:	83 c0 01             	add    eax,0x1
c0020bf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020bfa:	83 d2 00             	adc    edx,0x0
c0020bfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020c01:	50                   	push   eax
c0020c02:	50                   	push   eax
c0020c03:	6a 01                	push   0x1
c0020c05:	53                   	push   ebx
c0020c06:	81 c3 00 02 00 00    	add    ebx,0x200
c0020c0c:	6a 01                	push   0x1
c0020c0e:	57                   	push   edi
c0020c0f:	56                   	push   esi
c0020c10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020c14:	e8 35 f8 ff ff       	call   c002044e <SATA::access(unsigned long long, int, void*, bool)>
c0020c19:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020c1d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020c21:	83 c4 20             	add    esp,0x20
c0020c24:	39 dd                	cmp    ebp,ebx
c0020c26:	75 c7                	jne    c0020bef <SATA::write(unsigned long long, int, void*)+0xa9>
c0020c28:	f6 05 01 81 02 c0 08 	test   BYTE PTR ds:0xc0028101,0x8
c0020c2f:	75 04                	jne    c0020c35 <SATA::write(unsigned long long, int, void*)+0xef>
c0020c31:	31 c0                	xor    eax,eax
c0020c33:	eb 2f                	jmp    c0020c64 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020c35:	83 ec 0c             	sub    esp,0xc
c0020c38:	68 30 6e 02 c0       	push   0xc0026e30
c0020c3d:	e8 27 8e fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020c42:	83 c4 10             	add    esp,0x10
c0020c45:	f6 05 00 81 02 c0 80 	test   BYTE PTR ds:0xc0028100,0x80
c0020c4c:	75 e3                	jne    c0020c31 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020c4e:	e4 60                	in     al,0x60
c0020c50:	3c 5a                	cmp    al,0x5a
c0020c52:	74 04                	je     c0020c58 <SATA::write(unsigned long long, int, void*)+0x112>
c0020c54:	3c 1c                	cmp    al,0x1c
c0020c56:	75 f6                	jne    c0020c4e <SATA::write(unsigned long long, int, void*)+0x108>
c0020c58:	e4 60                	in     al,0x60
c0020c5a:	3c 5a                	cmp    al,0x5a
c0020c5c:	74 fa                	je     c0020c58 <SATA::write(unsigned long long, int, void*)+0x112>
c0020c5e:	3c 1c                	cmp    al,0x1c
c0020c60:	74 f6                	je     c0020c58 <SATA::write(unsigned long long, int, void*)+0x112>
c0020c62:	eb cd                	jmp    c0020c31 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020c64:	83 c4 1c             	add    esp,0x1c
c0020c67:	5b                   	pop    ebx
c0020c68:	5e                   	pop    esi
c0020c69:	5f                   	pop    edi
c0020c6a:	5d                   	pop    ebp
c0020c6b:	c3                   	ret    

c0020c6c <SATAPI::write(unsigned long long, int, void*)>:
c0020c6c:	b8 03 00 00 00       	mov    eax,0x3
c0020c71:	c3                   	ret    

c0020c72 <SATAPI::close(int, int, void*)>:
c0020c72:	83 ec 0c             	sub    esp,0xc
c0020c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c79:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020c7f:	85 c0                	test   eax,eax
c0020c81:	74 0c                	je     c0020c8f <SATAPI::close(int, int, void*)+0x1d>
c0020c83:	83 ec 0c             	sub    esp,0xc
c0020c86:	8b 10                	mov    edx,DWORD PTR [eax]
c0020c88:	50                   	push   eax
c0020c89:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020c8c:	83 c4 10             	add    esp,0x10
c0020c8f:	31 c0                	xor    eax,eax
c0020c91:	83 c4 0c             	add    esp,0xc
c0020c94:	c3                   	ret    
c0020c95:	90                   	nop

c0020c96 <SATAPI::SATAPI()>:
c0020c96:	83 ec 0c             	sub    esp,0xc
c0020c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c9d:	83 ec 04             	sub    esp,0x4
c0020ca0:	68 00 08 00 00       	push   0x800
c0020ca5:	68 78 6e 02 c0       	push   0xc0026e78
c0020caa:	50                   	push   eax
c0020cab:	e8 c6 d9 fe ff       	call   c000e676 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020cb0:	83 c4 10             	add    esp,0x10
c0020cb3:	ba d8 6f 02 c0       	mov    edx,0xc0026fd8
c0020cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cbc:	89 10                	mov    DWORD PTR [eax],edx
c0020cbe:	90                   	nop
c0020cbf:	83 c4 0c             	add    esp,0xc
c0020cc2:	c3                   	ret    
c0020cc3:	90                   	nop

c0020cc4 <SATAPI::diskRemoved()>:
c0020cc4:	53                   	push   ebx
c0020cc5:	83 ec 14             	sub    esp,0x14
c0020cc8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020ccc:	68 84 6e 02 c0       	push   0xc0026e84
c0020cd1:	e8 29 c0 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020cd6:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020cdd:	c7 04 24 d8 6b 02 c0 	mov    DWORD PTR [esp],0xc0026bd8
c0020ce4:	e8 16 c0 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020ce9:	58                   	pop    eax
c0020cea:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0020cf0:	e8 e9 f7 fe ff       	call   c00104de <LogicalDisk::unmount()>
c0020cf5:	c7 44 24 20 e7 6b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026be7
c0020cfd:	83 c4 18             	add    esp,0x18
c0020d00:	5b                   	pop    ebx
c0020d01:	e9 f9 bf fe ff       	jmp    c000ccff <Dbg::kprintf(char const*, ...)>

c0020d06 <SATAPI::diskInserted()>:
c0020d06:	83 ec 18             	sub    esp,0x18
c0020d09:	68 9b 6e 02 c0       	push   0xc0026e9b
c0020d0e:	e8 ec bf fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020d13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020d17:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020d1e:	83 c4 1c             	add    esp,0x1c
c0020d21:	c3                   	ret    

c0020d22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020d22:	55                   	push   ebp
c0020d23:	57                   	push   edi
c0020d24:	56                   	push   esi
c0020d25:	53                   	push   ebx
c0020d26:	83 ec 38             	sub    esp,0x38
c0020d29:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020d2d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020d31:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020d35:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020d39:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020d3d:	68 b3 6e 02 c0       	push   0xc0026eb3
c0020d42:	e8 b8 bf fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020d47:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020d4d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020d53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d57:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020d5d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d61:	c1 e0 07             	shl    eax,0x7
c0020d64:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020d68:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020d6c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020d76:	5a                   	pop    edx
c0020d77:	59                   	pop    ecx
c0020d78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d7c:	8d 58 02             	lea    ebx,[eax+0x2]
c0020d7f:	c1 e3 07             	shl    ebx,0x7
c0020d82:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020d86:	53                   	push   ebx
c0020d87:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020d8d:	e8 94 e2 ff ff       	call   c001f026 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d92:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d96:	83 c4 10             	add    esp,0x10
c0020d99:	b8 01 00 00 00       	mov    eax,0x1
c0020d9e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020da3:	0f 84 04 02 00 00    	je     c0020fad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020da9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020daf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020db1:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020db7:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020dbd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020dc1:	c1 e1 05             	shl    ecx,0x5
c0020dc4:	01 c8                	add    eax,ecx
c0020dc6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020dc8:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020dce:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020dd4:	89 08                	mov    DWORD PTR [eax],ecx
c0020dd6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020ddc:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020de2:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020de8:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020deb:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020dee:	50                   	push   eax
c0020def:	68 90 00 00 00       	push   0x90
c0020df4:	6a 00                	push   0x0
c0020df6:	53                   	push   ebx
c0020df7:	e8 88 f8 fd ff       	call   c0000684 <memset>
c0020dfc:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020e00:	b9 0c 00 00 00       	mov    ecx,0xc
c0020e05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020e07:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020e0d:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020e11:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020e17:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020e1b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020e1f:	48                   	dec    eax
c0020e20:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020e25:	89 c1                	mov    ecx,eax
c0020e27:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020e2d:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020e32:	09 c8                	or     eax,ecx
c0020e34:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020e3a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020e3d:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020e44:	66 25 00 7f          	and    ax,0x7f00
c0020e48:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020e4c:	66 0d 27 80          	or     ax,0x8027
c0020e50:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020e54:	66 89 03             	mov    WORD PTR [ebx],ax
c0020e57:	89 d0                	mov    eax,edx
c0020e59:	c1 ea 18             	shr    edx,0x18
c0020e5c:	c1 e8 10             	shr    eax,0x10
c0020e5f:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020e62:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020e65:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020e69:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020e6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e70:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020e73:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020e77:	83 c4 10             	add    esp,0x10
c0020e7a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020e7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020e82:	31 c0                	xor    eax,eax
c0020e84:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020e8a:	80 e1 88             	and    cl,0x88
c0020e8d:	74 0a                	je     c0020e99 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020e8f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020e94:	74 0a                	je     c0020ea0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020e96:	40                   	inc    eax
c0020e97:	eb eb                	jmp    c0020e84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020e99:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020e9e:	75 0f                	jne    c0020eaf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c0020ea0:	83 ec 0c             	sub    esp,0xc
c0020ea3:	68 7e 6d 02 c0       	push   0xc0026d7e
c0020ea8:	e8 1a 3b ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0020ead:	eb 48                	jmp    c0020ef7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c0020eaf:	be 01 00 00 00       	mov    esi,0x1
c0020eb4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020eb8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020ebc:	d3 e6                	shl    esi,cl
c0020ebe:	c1 e7 07             	shl    edi,0x7
c0020ec1:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020ec7:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020ecc:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020ed0:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020ed6:	85 c6                	test   esi,eax
c0020ed8:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020ede:	0f 84 96 00 00 00    	je     c0020f7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c0020ee4:	0f ba e0 1e          	bt     eax,0x1e
c0020ee8:	73 1a                	jae    c0020f04 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c0020eea:	83 ec 0c             	sub    esp,0xc
c0020eed:	68 cd 6e 02 c0       	push   0xc0026ecd
c0020ef2:	e8 08 be fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0020ef7:	83 c4 10             	add    esp,0x10
c0020efa:	b8 01 00 00 00       	mov    eax,0x1
c0020eff:	e9 a9 00 00 00       	jmp    c0020fad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020f04:	83 fb 0d             	cmp    ebx,0xd
c0020f07:	77 12                	ja     c0020f1b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0020f09:	83 ec 0c             	sub    esp,0xc
c0020f0c:	68 c8 00 00 00       	push   0xc8
c0020f11:	e8 0e 7b ff ff       	call   c0018a24 <milliTenthSleep(unsigned int)>
c0020f16:	83 c4 10             	add    esp,0x10
c0020f19:	eb 2a                	jmp    c0020f45 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020f1b:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020f21:	83 f8 0d             	cmp    eax,0xd
c0020f24:	77 0a                	ja     c0020f30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c0020f26:	83 ec 0c             	sub    esp,0xc
c0020f29:	68 58 02 00 00       	push   0x258
c0020f2e:	eb 28                	jmp    c0020f58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020f30:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020f36:	83 f8 0d             	cmp    eax,0xd
c0020f39:	77 0a                	ja     c0020f45 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020f3b:	83 ec 0c             	sub    esp,0xc
c0020f3e:	68 dc 05 00 00       	push   0x5dc
c0020f43:	eb 13                	jmp    c0020f58 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020f45:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020f4b:	83 f8 0d             	cmp    eax,0xd
c0020f4e:	77 10                	ja     c0020f60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c0020f50:	83 ec 0c             	sub    esp,0xc
c0020f53:	68 c4 09 00 00       	push   0x9c4
c0020f58:	e8 c7 7a ff ff       	call   c0018a24 <milliTenthSleep(unsigned int)>
c0020f5d:	83 c4 10             	add    esp,0x10
c0020f60:	43                   	inc    ebx
c0020f61:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020f67:	0f 85 63 ff ff ff    	jne    c0020ed0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c0020f6d:	83 ec 0c             	sub    esp,0xc
c0020f70:	68 e0 6e 02 c0       	push   0xc0026ee0
c0020f75:	e9 78 ff ff ff       	jmp    c0020ef2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020f7a:	0f ba e0 1e          	bt     eax,0x1e
c0020f7e:	73 0d                	jae    c0020f8d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c0020f80:	83 ec 0c             	sub    esp,0xc
c0020f83:	68 f4 6e 02 c0       	push   0xc0026ef4
c0020f88:	e9 65 ff ff ff       	jmp    c0020ef2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020f8d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020f92:	74 17                	je     c0020fab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020f94:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020f99:	74 10                	je     c0020fab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020f9b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020fa1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020fa5:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020fa9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020fab:	31 c0                	xor    eax,eax
c0020fad:	83 c4 2c             	add    esp,0x2c
c0020fb0:	5b                   	pop    ebx
c0020fb1:	5e                   	pop    esi
c0020fb2:	5f                   	pop    edi
c0020fb3:	5d                   	pop    ebp
c0020fb4:	c3                   	ret    
c0020fb5:	90                   	nop

c0020fb6 <SATAPI::eject()>:
c0020fb6:	57                   	push   edi
c0020fb7:	b9 03 00 00 00       	mov    ecx,0x3
c0020fbc:	53                   	push   ebx
c0020fbd:	83 ec 14             	sub    esp,0x14
c0020fc0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020fc4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020fc8:	fc                   	cld    
c0020fc9:	31 c0                	xor    eax,eax
c0020fcb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020fcd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020fd2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020fd7:	50                   	push   eax
c0020fd8:	6a 00                	push   0x0
c0020fda:	6a 00                	push   0x0
c0020fdc:	6a 00                	push   0x0
c0020fde:	6a 00                	push   0x0
c0020fe0:	6a 02                	push   0x2
c0020fe2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fe6:	50                   	push   eax
c0020fe7:	53                   	push   ebx
c0020fe8:	e8 35 fd ff ff       	call   c0020d22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020fed:	83 c4 20             	add    esp,0x20
c0020ff0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020ff7:	74 0c                	je     c0021005 <SATAPI::eject()+0x4f>
c0020ff9:	83 ec 0c             	sub    esp,0xc
c0020ffc:	53                   	push   ebx
c0020ffd:	e8 c2 fc ff ff       	call   c0020cc4 <SATAPI::diskRemoved()>
c0021002:	83 c4 10             	add    esp,0x10
c0021005:	83 c4 14             	add    esp,0x14
c0021008:	31 c0                	xor    eax,eax
c002100a:	5b                   	pop    ebx
c002100b:	5f                   	pop    edi
c002100c:	c3                   	ret    
c002100d:	90                   	nop

c002100e <SATAPI::detectMedia()>:
c002100e:	56                   	push   esi
c002100f:	53                   	push   ebx
c0021010:	83 ec 30             	sub    esp,0x30
c0021013:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021017:	68 09 6f 02 c0       	push   0xc0026f09
c002101c:	e8 de bc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021021:	83 c4 0c             	add    esp,0xc
c0021024:	6a 0c                	push   0xc
c0021026:	6a 00                	push   0x0
c0021028:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002102c:	56                   	push   esi
c002102d:	e8 52 f6 fd ff       	call   c0000684 <memset>
c0021032:	83 c4 0c             	add    esp,0xc
c0021035:	6a 00                	push   0x0
c0021037:	6a 00                	push   0x0
c0021039:	6a 00                	push   0x0
c002103b:	6a 00                	push   0x0
c002103d:	6a 00                	push   0x0
c002103f:	56                   	push   esi
c0021040:	53                   	push   ebx
c0021041:	e8 dc fc ff ff       	call   c0020d22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021046:	83 c4 20             	add    esp,0x20
c0021049:	48                   	dec    eax
c002104a:	75 27                	jne    c0021073 <SATAPI::detectMedia()+0x65>
c002104c:	83 ec 0c             	sub    esp,0xc
c002104f:	68 1d 6f 02 c0       	push   0xc0026f1d
c0021054:	e8 a6 bc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021059:	83 c4 10             	add    esp,0x10
c002105c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021063:	74 0e                	je     c0021073 <SATAPI::detectMedia()+0x65>
c0021065:	83 ec 0c             	sub    esp,0xc
c0021068:	53                   	push   ebx
c0021069:	e8 56 fc ff ff       	call   c0020cc4 <SATAPI::diskRemoved()>
c002106e:	e9 d1 00 00 00       	jmp    c0021144 <SATAPI::detectMedia()+0x136>
c0021073:	50                   	push   eax
c0021074:	6a 0c                	push   0xc
c0021076:	6a 00                	push   0x0
c0021078:	56                   	push   esi
c0021079:	e8 06 f6 fd ff       	call   c0000684 <memset>
c002107e:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021083:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021088:	83 c4 0c             	add    esp,0xc
c002108b:	6a 01                	push   0x1
c002108d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021091:	50                   	push   eax
c0021092:	6a 00                	push   0x0
c0021094:	6a 00                	push   0x0
c0021096:	6a 12                	push   0x12
c0021098:	56                   	push   esi
c0021099:	53                   	push   ebx
c002109a:	e8 83 fc ff ff       	call   c0020d22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002109f:	83 c4 20             	add    esp,0x20
c00210a2:	48                   	dec    eax
c00210a3:	75 19                	jne    c00210be <SATAPI::detectMedia()+0xb0>
c00210a5:	83 ec 0c             	sub    esp,0xc
c00210a8:	68 27 6f 02 c0       	push   0xc0026f27
c00210ad:	e8 4d bc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00210b2:	83 c4 10             	add    esp,0x10
c00210b5:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00210bc:	75 a7                	jne    c0021065 <SATAPI::detectMedia()+0x57>
c00210be:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00210c2:	83 e0 7f             	and    eax,0x7f
c00210c5:	3c 70                	cmp    al,0x70
c00210c7:	74 25                	je     c00210ee <SATAPI::detectMedia()+0xe0>
c00210c9:	83 ec 0c             	sub    esp,0xc
c00210cc:	68 31 6f 02 c0       	push   0xc0026f31
c00210d1:	e8 29 bc fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00210d6:	83 c4 10             	add    esp,0x10
c00210d9:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00210e0:	75 0c                	jne    c00210ee <SATAPI::detectMedia()+0xe0>
c00210e2:	83 ec 0c             	sub    esp,0xc
c00210e5:	53                   	push   ebx
c00210e6:	e8 1b fc ff ff       	call   c0020d06 <SATAPI::diskInserted()>
c00210eb:	83 c4 10             	add    esp,0x10
c00210ee:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00210f2:	83 e0 0f             	and    eax,0xf
c00210f5:	3c 02                	cmp    al,0x2
c00210f7:	75 25                	jne    c002111e <SATAPI::detectMedia()+0x110>
c00210f9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00210fe:	75 47                	jne    c0021147 <SATAPI::detectMedia()+0x139>
c0021100:	83 ec 0c             	sub    esp,0xc
c0021103:	68 3a 6f 02 c0       	push   0xc0026f3a
c0021108:	e8 f2 bb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c002110d:	83 c4 10             	add    esp,0x10
c0021110:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021117:	74 2e                	je     c0021147 <SATAPI::detectMedia()+0x139>
c0021119:	e9 47 ff ff ff       	jmp    c0021065 <SATAPI::detectMedia()+0x57>
c002111e:	84 c0                	test   al,al
c0021120:	75 25                	jne    c0021147 <SATAPI::detectMedia()+0x139>
c0021122:	83 ec 0c             	sub    esp,0xc
c0021125:	68 43 6f 02 c0       	push   0xc0026f43
c002112a:	e8 d0 bb fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c002112f:	83 c4 10             	add    esp,0x10
c0021132:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021139:	75 0c                	jne    c0021147 <SATAPI::detectMedia()+0x139>
c002113b:	83 ec 0c             	sub    esp,0xc
c002113e:	53                   	push   ebx
c002113f:	e8 c2 fb ff ff       	call   c0020d06 <SATAPI::diskInserted()>
c0021144:	83 c4 10             	add    esp,0x10
c0021147:	83 c4 24             	add    esp,0x24
c002114a:	5b                   	pop    ebx
c002114b:	5e                   	pop    esi
c002114c:	c3                   	ret    
c002114d:	90                   	nop

c002114e <SATAPI::open(int, int, void*)>:
c002114e:	56                   	push   esi
c002114f:	53                   	push   ebx
c0021150:	51                   	push   ecx
c0021151:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021155:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021159:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021163:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021169:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0021173:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021177:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021181:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0021187:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002118e:	e8 33 8f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0021193:	89 c6                	mov    esi,eax
c0021195:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002119b:	81 c6 00 10 00 00    	add    esi,0x1000
c00211a1:	e8 20 8f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c00211a6:	39 c6                	cmp    esi,eax
c00211a8:	74 10                	je     c00211ba <SATAPI::open(int, int, void*)+0x6c>
c00211aa:	83 ec 0c             	sub    esp,0xc
c00211ad:	68 4d 6f 02 c0       	push   0xc0026f4d
c00211b2:	e8 10 38 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c00211b7:	83 c4 10             	add    esp,0x10
c00211ba:	83 ec 0c             	sub    esp,0xc
c00211bd:	6a 02                	push   0x2
c00211bf:	e8 15 a8 fe ff       	call   c000b9d9 <Virt::allocateKernelVirtualPages(int)>
c00211c4:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00211ca:	6a 03                	push   0x3
c00211cc:	50                   	push   eax
c00211cd:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00211d3:	ff 35 10 82 02 c0    	push   DWORD PTR ds:0xc0028210
c00211d9:	e8 a2 ae fe ff       	call   c000c080 <VAS::mapPage(unsigned long, unsigned long, int)>
c00211de:	83 c4 14             	add    esp,0x14
c00211e1:	68 74 01 00 00       	push   0x174
c00211e6:	e8 24 88 fe ff       	call   c0009a0f <malloc>
c00211eb:	83 c4 0c             	add    esp,0xc
c00211ee:	89 c6                	mov    esi,eax
c00211f0:	6a 00                	push   0x0
c00211f2:	68 ff ff ff 7f       	push   0x7fffffff
c00211f7:	6a 00                	push   0x0
c00211f9:	6a 00                	push   0x0
c00211fb:	53                   	push   ebx
c00211fc:	68 63 6f 02 c0       	push   0xc0026f63
c0021201:	50                   	push   eax
c0021202:	e8 e3 f0 fe ff       	call   c00102ea <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021207:	83 c4 14             	add    esp,0x14
c002120a:	56                   	push   esi
c002120b:	e8 90 f1 fe ff       	call   c00103a0 <LogicalDisk::assignDriveLetter()>
c0021210:	5a                   	pop    edx
c0021211:	0f be c0             	movsx  eax,al
c0021214:	59                   	pop    ecx
c0021215:	50                   	push   eax
c0021216:	68 f5 6b 02 c0       	push   0xc0026bf5
c002121b:	e8 df ba fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021220:	58                   	pop    eax
c0021221:	5a                   	pop    edx
c0021222:	56                   	push   esi
c0021223:	53                   	push   ebx
c0021224:	e8 15 d0 fe ff       	call   c000e23e <Device::addChild(Device*)>
c0021229:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002122f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021232:	e8 a7 d4 fe ff       	call   c000e6de <PhysicalDisk::startCache()>
c0021237:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002123e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021241:	e8 c8 fd ff ff       	call   c002100e <SATAPI::detectMedia()>
c0021246:	83 c4 14             	add    esp,0x14
c0021249:	31 c0                	xor    eax,eax
c002124b:	5b                   	pop    ebx
c002124c:	5e                   	pop    esi
c002124d:	c3                   	ret    

c002124e <SATAPI::read(unsigned long long, int, void*)>:
c002124e:	55                   	push   ebp
c002124f:	57                   	push   edi
c0021250:	56                   	push   esi
c0021251:	53                   	push   ebx
c0021252:	83 ec 28             	sub    esp,0x28
c0021255:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021259:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002125d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021261:	68 71 6f 02 c0       	push   0xc0026f71
c0021266:	e8 94 ba fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c002126b:	83 c4 10             	add    esp,0x10
c002126e:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0021275:	75 2c                	jne    c00212a3 <SATAPI::read(unsigned long long, int, void*)+0x55>
c0021277:	83 ec 0c             	sub    esp,0xc
c002127a:	55                   	push   ebp
c002127b:	e8 8e fd ff ff       	call   c002100e <SATAPI::detectMedia()>
c0021280:	83 c4 10             	add    esp,0x10
c0021283:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002128a:	75 17                	jne    c00212a3 <SATAPI::read(unsigned long long, int, void*)+0x55>
c002128c:	83 ec 0c             	sub    esp,0xc
c002128f:	68 82 6f 02 c0       	push   0xc0026f82
c0021294:	e8 66 ba fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021299:	83 c4 10             	add    esp,0x10
c002129c:	b8 02 00 00 00       	mov    eax,0x2
c00212a1:	eb 70                	jmp    c0021313 <SATAPI::read(unsigned long long, int, void*)+0xc5>
c00212a3:	83 ec 0c             	sub    esp,0xc
c00212a6:	68 93 6f 02 c0       	push   0xc0026f93
c00212ab:	e8 4f ba fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00212b0:	83 c4 10             	add    esp,0x10
c00212b3:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00212b8:	7e 10                	jle    c00212ca <SATAPI::read(unsigned long long, int, void*)+0x7c>
c00212ba:	83 ec 0c             	sub    esp,0xc
c00212bd:	68 a4 6f 02 c0       	push   0xc0026fa4
c00212c2:	e8 00 37 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c00212c7:	83 c4 10             	add    esp,0x10
c00212ca:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00212ce:	b9 03 00 00 00       	mov    ecx,0x3
c00212d3:	fc                   	cld    
c00212d4:	31 c0                	xor    eax,eax
c00212d6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00212d8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00212dd:	89 d8                	mov    eax,ebx
c00212df:	86 e0                	xchg   al,ah
c00212e1:	c1 c0 10             	rol    eax,0x10
c00212e4:	86 e0                	xchg   al,ah
c00212e6:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00212ea:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00212ee:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00212f2:	50                   	push   eax
c00212f3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00212f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00212fb:	56                   	push   esi
c00212fc:	53                   	push   ebx
c00212fd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021301:	c1 e0 0b             	shl    eax,0xb
c0021304:	50                   	push   eax
c0021305:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021309:	50                   	push   eax
c002130a:	55                   	push   ebp
c002130b:	e8 12 fa ff ff       	call   c0020d22 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021310:	83 c4 20             	add    esp,0x20
c0021313:	83 c4 1c             	add    esp,0x1c
c0021316:	5b                   	pop    ebx
c0021317:	5e                   	pop    esi
c0021318:	5f                   	pop    edi
c0021319:	5d                   	pop    ebp
c002131a:	c3                   	ret    
c002131b:	90                   	nop

c002131c <AVX::open(int, int, void*)>:
c002131c:	83 ec 0c             	sub    esp,0xc
c002131f:	e8 34 11 00 00       	call   c0022458 <avxInit>
c0021324:	b8 00 00 00 00       	mov    eax,0x0
c0021329:	83 c4 0c             	add    esp,0xc
c002132c:	c3                   	ret    
c002132d:	90                   	nop
c002132e:	66 90                	xchg   ax,ax

c0021330 <AVX::close(int, int, void*)>:
c0021330:	83 ec 0c             	sub    esp,0xc
c0021333:	e8 21 11 00 00       	call   c0022459 <avxClose>
c0021338:	b8 00 00 00 00       	mov    eax,0x0
c002133d:	83 c4 0c             	add    esp,0xc
c0021340:	c3                   	ret    
c0021341:	90                   	nop
c0021342:	66 90                	xchg   ax,ax

c0021344 <AVX::available()>:
c0021344:	83 ec 0c             	sub    esp,0xc
c0021347:	e8 04 11 00 00       	call   c0022450 <avxDetect>
c002134c:	85 c0                	test   eax,eax
c002134e:	0f 95 c0             	setne  al
c0021351:	83 c4 0c             	add    esp,0xc
c0021354:	c3                   	ret    
c0021355:	90                   	nop
c0021356:	66 90                	xchg   ax,ax

c0021358 <AVX::save(void*)>:
c0021358:	83 ec 0c             	sub    esp,0xc
c002135b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002135f:	83 ec 0c             	sub    esp,0xc
c0021362:	50                   	push   eax
c0021363:	e8 ee 10 00 00       	call   c0022456 <avxSave>
c0021368:	83 c4 10             	add    esp,0x10
c002136b:	90                   	nop
c002136c:	83 c4 0c             	add    esp,0xc
c002136f:	c3                   	ret    

c0021370 <AVX::load(void*)>:
c0021370:	83 ec 0c             	sub    esp,0xc
c0021373:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021377:	83 ec 0c             	sub    esp,0xc
c002137a:	50                   	push   eax
c002137b:	e8 d7 10 00 00       	call   c0022457 <avxLoad>
c0021380:	83 c4 10             	add    esp,0x10
c0021383:	90                   	nop
c0021384:	83 c4 0c             	add    esp,0xc
c0021387:	c3                   	ret    

c0021388 <AVX::AVX()>:
c0021388:	83 ec 0c             	sub    esp,0xc
c002138b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002138f:	83 ec 08             	sub    esp,0x8
c0021392:	68 08 70 02 c0       	push   0xc0027008
c0021397:	50                   	push   eax
c0021398:	e8 b7 d3 fe ff       	call   c000e754 <FPU::FPU(char const*)>
c002139d:	83 c4 10             	add    esp,0x10
c00213a0:	ba 18 70 02 c0       	mov    edx,0xc0027018
c00213a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a9:	89 10                	mov    DWORD PTR [eax],edx
c00213ab:	90                   	nop
c00213ac:	83 c4 0c             	add    esp,0xc
c00213af:	c3                   	ret    

c00213b0 <MMX::available()>:
c00213b0:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c00213b5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00213bb:	83 e0 20             	and    eax,0x20
c00213be:	84 c0                	test   al,al
c00213c0:	0f 95 c0             	setne  al
c00213c3:	c3                   	ret    

c00213c4 <MMX::open(int, int, void*)>:
c00213c4:	83 ec 0c             	sub    esp,0xc
c00213c7:	e8 16 11 00 00       	call   c00224e2 <x87Init>
c00213cc:	b8 00 00 00 00       	mov    eax,0x0
c00213d1:	83 c4 0c             	add    esp,0xc
c00213d4:	c3                   	ret    
c00213d5:	90                   	nop
c00213d6:	66 90                	xchg   ax,ax

c00213d8 <MMX::close(int, int, void*)>:
c00213d8:	83 ec 0c             	sub    esp,0xc
c00213db:	e8 1c 11 00 00       	call   c00224fc <x87Close>
c00213e0:	b8 00 00 00 00       	mov    eax,0x0
c00213e5:	83 c4 0c             	add    esp,0xc
c00213e8:	c3                   	ret    
c00213e9:	90                   	nop
c00213ea:	66 90                	xchg   ax,ax

c00213ec <MMX::save(void*)>:
c00213ec:	83 ec 0c             	sub    esp,0xc
c00213ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213f3:	83 ec 0c             	sub    esp,0xc
c00213f6:	50                   	push   eax
c00213f7:	e8 d5 10 00 00       	call   c00224d1 <x87Save>
c00213fc:	83 c4 10             	add    esp,0x10
c00213ff:	90                   	nop
c0021400:	83 c4 0c             	add    esp,0xc
c0021403:	c3                   	ret    

c0021404 <MMX::load(void*)>:
c0021404:	83 ec 0c             	sub    esp,0xc
c0021407:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002140b:	83 ec 0c             	sub    esp,0xc
c002140e:	50                   	push   eax
c002140f:	e8 c6 10 00 00       	call   c00224da <x87Load>
c0021414:	83 c4 10             	add    esp,0x10
c0021417:	90                   	nop
c0021418:	83 c4 0c             	add    esp,0xc
c002141b:	c3                   	ret    

c002141c <MMX::MMX()>:
c002141c:	83 ec 0c             	sub    esp,0xc
c002141f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021423:	83 ec 08             	sub    esp,0x8
c0021426:	68 48 70 02 c0       	push   0xc0027048
c002142b:	50                   	push   eax
c002142c:	e8 23 d3 fe ff       	call   c000e754 <FPU::FPU(char const*)>
c0021431:	83 c4 10             	add    esp,0x10
c0021434:	ba 58 70 02 c0       	mov    edx,0xc0027058
c0021439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002143d:	89 10                	mov    DWORD PTR [eax],edx
c002143f:	90                   	nop
c0021440:	83 c4 0c             	add    esp,0xc
c0021443:	c3                   	ret    

c0021444 <SSE::open(int, int, void*)>:
c0021444:	83 ec 0c             	sub    esp,0xc
c0021447:	e8 48 10 00 00       	call   c0022494 <sseInit>
c002144c:	b8 00 00 00 00       	mov    eax,0x0
c0021451:	83 c4 0c             	add    esp,0xc
c0021454:	c3                   	ret    
c0021455:	90                   	nop
c0021456:	66 90                	xchg   ax,ax

c0021458 <SSE::close(int, int, void*)>:
c0021458:	83 ec 0c             	sub    esp,0xc
c002145b:	e8 44 10 00 00       	call   c00224a4 <sseClose>
c0021460:	b8 00 00 00 00       	mov    eax,0x0
c0021465:	83 c4 0c             	add    esp,0xc
c0021468:	c3                   	ret    
c0021469:	90                   	nop
c002146a:	66 90                	xchg   ax,ax

c002146c <SSE::available()>:
c002146c:	83 ec 1c             	sub    esp,0x1c
c002146f:	e8 fc 0f 00 00       	call   c0022470 <absolutelyNoChanceInHell>
c0021474:	85 c0                	test   eax,eax
c0021476:	0f 95 c0             	setne  al
c0021479:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002147d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021481:	83 c4 1c             	add    esp,0x1c
c0021484:	c3                   	ret    
c0021485:	90                   	nop
c0021486:	66 90                	xchg   ax,ax

c0021488 <SSE::save(void*)>:
c0021488:	83 ec 0c             	sub    esp,0xc
c002148b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002148f:	83 ec 0c             	sub    esp,0xc
c0021492:	50                   	push   eax
c0021493:	e8 f0 0f 00 00       	call   c0022488 <sseSave>
c0021498:	83 c4 10             	add    esp,0x10
c002149b:	90                   	nop
c002149c:	83 c4 0c             	add    esp,0xc
c002149f:	c3                   	ret    

c00214a0 <SSE::load(void*)>:
c00214a0:	83 ec 0c             	sub    esp,0xc
c00214a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214a7:	83 ec 0c             	sub    esp,0xc
c00214aa:	50                   	push   eax
c00214ab:	e8 de 0f 00 00       	call   c002248e <sseLoad>
c00214b0:	83 c4 10             	add    esp,0x10
c00214b3:	90                   	nop
c00214b4:	83 c4 0c             	add    esp,0xc
c00214b7:	c3                   	ret    

c00214b8 <SSE::SSE()>:
c00214b8:	83 ec 0c             	sub    esp,0xc
c00214bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214bf:	83 ec 08             	sub    esp,0x8
c00214c2:	68 88 70 02 c0       	push   0xc0027088
c00214c7:	50                   	push   eax
c00214c8:	e8 87 d2 fe ff       	call   c000e754 <FPU::FPU(char const*)>
c00214cd:	83 c4 10             	add    esp,0x10
c00214d0:	ba 98 70 02 c0       	mov    edx,0xc0027098
c00214d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d9:	89 10                	mov    DWORD PTR [eax],edx
c00214db:	90                   	nop
c00214dc:	83 c4 0c             	add    esp,0xc
c00214df:	c3                   	ret    

c00214e0 <x87::open(int, int, void*)>:
c00214e0:	83 ec 0c             	sub    esp,0xc
c00214e3:	e8 fa 0f 00 00       	call   c00224e2 <x87Init>
c00214e8:	b8 00 00 00 00       	mov    eax,0x0
c00214ed:	83 c4 0c             	add    esp,0xc
c00214f0:	c3                   	ret    
c00214f1:	90                   	nop
c00214f2:	66 90                	xchg   ax,ax

c00214f4 <x87::close(int, int, void*)>:
c00214f4:	83 ec 0c             	sub    esp,0xc
c00214f7:	e8 00 10 00 00       	call   c00224fc <x87Close>
c00214fc:	b8 00 00 00 00       	mov    eax,0x0
c0021501:	83 c4 0c             	add    esp,0xc
c0021504:	c3                   	ret    
c0021505:	90                   	nop
c0021506:	66 90                	xchg   ax,ax

c0021508 <x87::available()>:
c0021508:	83 ec 0c             	sub    esp,0xc
c002150b:	e8 a6 0f 00 00       	call   c00224b6 <x87Detect>
c0021510:	85 c0                	test   eax,eax
c0021512:	0f 95 c0             	setne  al
c0021515:	83 c4 0c             	add    esp,0xc
c0021518:	c3                   	ret    
c0021519:	90                   	nop
c002151a:	66 90                	xchg   ax,ax

c002151c <x87::save(void*)>:
c002151c:	83 ec 0c             	sub    esp,0xc
c002151f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021523:	83 ec 0c             	sub    esp,0xc
c0021526:	50                   	push   eax
c0021527:	e8 a5 0f 00 00       	call   c00224d1 <x87Save>
c002152c:	83 c4 10             	add    esp,0x10
c002152f:	90                   	nop
c0021530:	83 c4 0c             	add    esp,0xc
c0021533:	c3                   	ret    

c0021534 <x87::load(void*)>:
c0021534:	83 ec 0c             	sub    esp,0xc
c0021537:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002153b:	83 ec 0c             	sub    esp,0xc
c002153e:	50                   	push   eax
c002153f:	e8 96 0f 00 00       	call   c00224da <x87Load>
c0021544:	83 c4 10             	add    esp,0x10
c0021547:	90                   	nop
c0021548:	83 c4 0c             	add    esp,0xc
c002154b:	c3                   	ret    

c002154c <x87::x87()>:
c002154c:	83 ec 0c             	sub    esp,0xc
c002154f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021553:	83 ec 08             	sub    esp,0x8
c0021556:	68 c8 70 02 c0       	push   0xc00270c8
c002155b:	50                   	push   eax
c002155c:	e8 f3 d1 fe ff       	call   c000e754 <FPU::FPU(char const*)>
c0021561:	83 c4 10             	add    esp,0x10
c0021564:	ba d8 70 02 c0       	mov    edx,0xc00270d8
c0021569:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002156d:	89 10                	mov    DWORD PTR [eax],edx
c002156f:	90                   	nop
c0021570:	83 c4 0c             	add    esp,0xc
c0021573:	c3                   	ret    

c0021574 <APIC::disable()>:
c0021574:	90                   	nop
c0021575:	c3                   	ret    

c0021576 <APIC::close(int, int, void*)>:
c0021576:	55                   	push   ebp
c0021577:	89 e5                	mov    ebp,esp
c0021579:	83 ec 08             	sub    esp,0x8
c002157c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002157f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021581:	83 c0 3c             	add    eax,0x3c
c0021584:	8b 00                	mov    eax,DWORD PTR [eax]
c0021586:	83 ec 0c             	sub    esp,0xc
c0021589:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002158c:	ff d0                	call   eax
c002158e:	83 c4 10             	add    esp,0x10
c0021591:	b8 00 00 00 00       	mov    eax,0x0
c0021596:	c9                   	leave  
c0021597:	c3                   	ret    

c0021598 <IOAPIC::close(int, int, void*)>:
c0021598:	b8 00 00 00 00       	mov    eax,0x0
c002159d:	c3                   	ret    

c002159e <APIC::io_wait()>:
c002159e:	eb 00                	jmp    c00215a0 <APIC::io_wait()+0x2>
c00215a0:	eb 00                	jmp    c00215a2 <APIC::io_wait()+0x4>
c00215a2:	90                   	nop
c00215a3:	c3                   	ret    

c00215a4 <APIC::getBase()>:
c00215a4:	55                   	push   ebp
c00215a5:	89 e5                	mov    ebp,esp
c00215a7:	83 ec 18             	sub    esp,0x18
c00215aa:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c00215af:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00215b5:	83 e0 08             	and    eax,0x8
c00215b8:	84 c0                	test   al,al
c00215ba:	75 07                	jne    c00215c3 <APIC::getBase()+0x1f>
c00215bc:	b8 00 00 00 00       	mov    eax,0x0
c00215c1:	eb 21                	jmp    c00215e4 <APIC::getBase()+0x40>
c00215c3:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c00215c8:	83 ec 08             	sub    esp,0x8
c00215cb:	6a 1b                	push   0x1b
c00215cd:	50                   	push   eax
c00215ce:	e8 57 79 fe ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c00215d3:	83 c4 10             	add    esp,0x10
c00215d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00215d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00215dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00215df:	25 00 f0 ff ff       	and    eax,0xfffff000
c00215e4:	c9                   	leave  
c00215e5:	c3                   	ret    

c00215e6 <APIC::eoi(unsigned char)>:
c00215e6:	55                   	push   ebp
c00215e7:	89 e5                	mov    ebp,esp
c00215e9:	83 ec 28             	sub    esp,0x28
c00215ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215ef:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00215f2:	83 ec 0c             	sub    esp,0xc
c00215f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215f8:	e8 a7 ff ff ff       	call   c00215a4 <APIC::getBase()>
c00215fd:	83 c4 10             	add    esp,0x10
c0021600:	05 b0 00 00 00       	add    eax,0xb0
c0021605:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021608:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002160b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021611:	90                   	nop
c0021612:	c9                   	leave  
c0021613:	c3                   	ret    

c0021614 <APIC::open(int, int, void*)>:
c0021614:	55                   	push   ebp
c0021615:	89 e5                	mov    ebp,esp
c0021617:	57                   	push   edi
c0021618:	56                   	push   esi
c0021619:	53                   	push   ebx
c002161a:	83 ec 2c             	sub    esp,0x2c
c002161d:	83 ec 0c             	sub    esp,0xc
c0021620:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021623:	e8 7c ff ff ff       	call   c00215a4 <APIC::getBase()>
c0021628:	83 c4 10             	add    esp,0x10
c002162b:	89 c2                	mov    edx,eax
c002162d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021630:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021636:	0f b6 f8             	movzx  edi,al
c0021639:	89 d0                	mov    eax,edx
c002163b:	ba 00 00 00 00       	mov    edx,0x0
c0021640:	89 c1                	mov    ecx,eax
c0021642:	80 e5 ff             	and    ch,0xff
c0021645:	89 cb                	mov    ebx,ecx
c0021647:	0f b6 f2             	movzx  esi,dl
c002164a:	89 d8                	mov    eax,ebx
c002164c:	89 f2                	mov    edx,esi
c002164e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021651:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021654:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021658:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002165c:	83 e0 00             	and    eax,0x0
c002165f:	09 d0                	or     eax,edx
c0021661:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021668:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002166e:	8d 50 01             	lea    edx,[eax+0x1]
c0021671:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021674:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002167a:	0f b6 d0             	movzx  edx,al
c002167d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021680:	83 c2 08             	add    edx,0x8
c0021683:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021687:	0f b6 c9             	movzx  ecx,cl
c002168a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021690:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021694:	83 ec 0c             	sub    esp,0xc
c0021697:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002169a:	e8 05 ff ff ff       	call   c00215a4 <APIC::getBase()>
c002169f:	83 c4 10             	add    esp,0x10
c00216a2:	05 f0 00 00 00       	add    eax,0xf0
c00216a7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00216aa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00216ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00216af:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00216b2:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00216b9:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00216c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00216c3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00216c6:	89 10                	mov    DWORD PTR [eax],edx
c00216c8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00216cf:	a1 50 89 02 c0       	mov    eax,ds:0xc0028950
c00216d4:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00216d7:	7d 7c                	jge    c0021755 <APIC::open(int, int, void*)+0x141>
c00216d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00216dc:	8b 04 85 60 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd76a0]
c00216e3:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00216e6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00216e9:	8b 04 85 60 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd76a0]
c00216f0:	c1 e8 08             	shr    eax,0x8
c00216f3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00216f7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00216fa:	8b 04 85 60 89 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd76a0]
c0021701:	c1 e8 18             	shr    eax,0x18
c0021704:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021707:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002170b:	75 40                	jne    c002174d <APIC::open(int, int, void*)+0x139>
c002170d:	83 ec 0c             	sub    esp,0xc
c0021710:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021713:	e8 8c fe ff ff       	call   c00215a4 <APIC::getBase()>
c0021718:	83 c4 10             	add    esp,0x10
c002171b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002171f:	75 07                	jne    c0021728 <APIC::open(int, int, void*)+0x114>
c0021721:	ba 60 03 00 00       	mov    edx,0x360
c0021726:	eb 05                	jmp    c002172d <APIC::open(int, int, void*)+0x119>
c0021728:	ba 50 03 00 00       	mov    edx,0x350
c002172d:	01 d0                	add    eax,edx
c002172f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021732:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021735:	8b 00                	mov    eax,DWORD PTR [eax]
c0021737:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002173a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021741:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021745:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021748:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002174b:	89 10                	mov    DWORD PTR [eax],edx
c002174d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021750:	e9 7a ff ff ff       	jmp    c00216cf <APIC::open(int, int, void*)+0xbb>
c0021755:	b8 00 00 00 00       	mov    eax,0x0
c002175a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002175d:	5b                   	pop    ebx
c002175e:	5e                   	pop    esi
c002175f:	5f                   	pop    edi
c0021760:	5d                   	pop    ebp
c0021761:	c3                   	ret    

c0021762 <IOAPIC::IOAPIC()>:
c0021762:	83 ec 0c             	sub    esp,0xc
c0021765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021769:	83 ec 08             	sub    esp,0x8
c002176c:	68 08 71 02 c0       	push   0xc0027108
c0021771:	50                   	push   eax
c0021772:	e8 cb cc fe ff       	call   c000e442 <Device::Device(char const*)>
c0021777:	83 c4 10             	add    esp,0x10
c002177a:	ba 30 72 02 c0       	mov    edx,0xc0027230
c002177f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021783:	89 10                	mov    DWORD PTR [eax],edx
c0021785:	90                   	nop
c0021786:	83 c4 0c             	add    esp,0xc
c0021789:	c3                   	ret    

c002178a <APIC::APIC()>:
c002178a:	53                   	push   ebx
c002178b:	83 ec 18             	sub    esp,0x18
c002178e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021792:	83 ec 08             	sub    esp,0x8
c0021795:	68 10 71 02 c0       	push   0xc0027110
c002179a:	50                   	push   eax
c002179b:	e8 1a d4 fe ff       	call   c000ebba <InterruptController::InterruptController(char const*)>
c00217a0:	83 c4 10             	add    esp,0x10
c00217a3:	ba e8 71 02 c0       	mov    edx,0xc00271e8
c00217a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00217ac:	89 10                	mov    DWORD PTR [eax],edx
c00217ae:	a0 80 a0 02 c0       	mov    al,ds:0xc002a080
c00217b3:	83 f0 01             	xor    eax,0x1
c00217b6:	84 c0                	test   al,al
c00217b8:	0f 84 a1 00 00 00    	je     c002185f <APIC::APIC()+0xd5>
c00217be:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00217c3:	a0 00 8a 02 c0       	mov    al,ds:0xc0028a00
c00217c8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00217cc:	0f 83 86 00 00 00    	jae    c0021858 <APIC::APIC()+0xce>
c00217d2:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00217da:	83 ec 0c             	sub    esp,0xc
c00217dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00217e1:	e8 29 82 fe ff       	call   c0009a0f <malloc>
c00217e6:	83 c4 10             	add    esp,0x10
c00217e9:	89 c3                	mov    ebx,eax
c00217eb:	83 ec 0c             	sub    esp,0xc
c00217ee:	53                   	push   ebx
c00217ef:	e8 6e ff ff ff       	call   c0021762 <IOAPIC::IOAPIC()>
c00217f4:	83 c4 10             	add    esp,0x10
c00217f7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00217fb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021800:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021804:	89 14 85 60 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5fa0],edx
c002180b:	a1 40 a0 02 c0       	mov    eax,ds:0xc002a040
c0021810:	40                   	inc    eax
c0021811:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c0021816:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c002181b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021821:	83 ec 08             	sub    esp,0x8
c0021824:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021828:	50                   	push   eax
c0021829:	e8 10 ca fe ff       	call   c000e23e <Device::addChild(Device*)>
c002182e:	83 c4 10             	add    esp,0x10
c0021831:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021835:	8b 00                	mov    eax,DWORD PTR [eax]
c0021837:	83 c0 08             	add    eax,0x8
c002183a:	8b 00                	mov    eax,DWORD PTR [eax]
c002183c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0021841:	6a 00                	push   0x0
c0021843:	6a 00                	push   0x0
c0021845:	52                   	push   edx
c0021846:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002184a:	ff d0                	call   eax
c002184c:	83 c4 10             	add    esp,0x10
c002184f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0021853:	e9 6b ff ff ff       	jmp    c00217c3 <APIC::APIC()+0x39>
c0021858:	c6 05 80 a0 02 c0 01 	mov    BYTE PTR ds:0xc002a080,0x1
c002185f:	90                   	nop
c0021860:	83 c4 18             	add    esp,0x18
c0021863:	5b                   	pop    ebx
c0021864:	c3                   	ret    
c0021865:	90                   	nop

c0021866 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021866:	55                   	push   ebp
c0021867:	89 e5                	mov    ebp,esp
c0021869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002186c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021872:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021875:	72 1d                	jb     c0021894 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002187a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021883:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021889:	01 d0                	add    eax,edx
c002188b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002188e:	73 04                	jae    c0021894 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021890:	b0 01                	mov    al,0x1
c0021892:	eb 02                	jmp    c0021896 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0021894:	b0 00                	mov    al,0x0
c0021896:	5d                   	pop    ebp
c0021897:	c3                   	ret    

c0021898 <IOAPIC::read(int)>:
c0021898:	55                   	push   ebp
c0021899:	89 e5                	mov    ebp,esp
c002189b:	83 ec 10             	sub    esp,0x10
c002189e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00218a7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00218aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00218ad:	0f b6 d0             	movzx  edx,al
c00218b0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00218b3:	89 10                	mov    DWORD PTR [eax],edx
c00218b5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00218b8:	83 c0 10             	add    eax,0x10
c00218bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00218bd:	c9                   	leave  
c00218be:	c3                   	ret    
c00218bf:	90                   	nop

c00218c0 <IOAPIC::open(int, int, void*)>:
c00218c0:	55                   	push   ebp
c00218c1:	89 e5                	mov    ebp,esp
c00218c3:	57                   	push   edi
c00218c4:	56                   	push   esi
c00218c5:	53                   	push   ebx
c00218c6:	83 ec 0c             	sub    esp,0xc
c00218c9:	83 ec 0c             	sub    esp,0xc
c00218cc:	68 3b 71 02 c0       	push   0xc002713b
c00218d1:	e8 29 b4 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c00218d6:	83 c4 10             	add    esp,0x10
c00218d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00218df:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00218e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00218ee:	8b 14 85 40 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd75c0]
c00218f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00218f8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00218fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021901:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021907:	8b 14 85 c0 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7540]
c002190e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021911:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002191a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021923:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021929:	0f b6 f8             	movzx  edi,al
c002192c:	89 d0                	mov    eax,edx
c002192e:	ba 00 00 00 00       	mov    edx,0x0
c0021933:	89 c1                	mov    ecx,eax
c0021935:	80 e5 ff             	and    ch,0xff
c0021938:	89 cb                	mov    ebx,ecx
c002193a:	0f b6 f2             	movzx  esi,dl
c002193d:	89 d8                	mov    eax,ebx
c002193f:	89 f2                	mov    edx,esi
c0021941:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021944:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021947:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002194b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002194f:	83 e0 00             	and    eax,0x0
c0021952:	09 d0                	or     eax,edx
c0021954:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002195b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021961:	8d 50 01             	lea    edx,[eax+0x1]
c0021964:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021967:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002196d:	0f b6 d0             	movzx  edx,al
c0021970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021973:	83 c2 08             	add    edx,0x8
c0021976:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002197a:	0f b6 c9             	movzx  ecx,cl
c002197d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0021983:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021987:	83 ec 08             	sub    esp,0x8
c002198a:	6a 01                	push   0x1
c002198c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002198f:	e8 04 ff ff ff       	call   c0021898 <IOAPIC::read(int)>
c0021994:	83 c4 10             	add    esp,0x10
c0021997:	c1 f8 10             	sar    eax,0x10
c002199a:	0f b6 c0             	movzx  eax,al
c002199d:	8d 50 01             	lea    edx,[eax+0x1]
c00219a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00219a3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00219a9:	b8 00 00 00 00       	mov    eax,0x0
c00219ae:	8d 65 f4             	lea    esp,[ebp-0xc]
c00219b1:	5b                   	pop    ebx
c00219b2:	5e                   	pop    esi
c00219b3:	5f                   	pop    edi
c00219b4:	5d                   	pop    ebp
c00219b5:	c3                   	ret    

c00219b6 <IOAPIC::write(int, int)>:
c00219b6:	55                   	push   ebp
c00219b7:	89 e5                	mov    ebp,esp
c00219b9:	83 ec 10             	sub    esp,0x10
c00219bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00219bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00219c5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00219c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219cb:	0f b6 d0             	movzx  edx,al
c00219ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00219d1:	89 10                	mov    DWORD PTR [eax],edx
c00219d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00219d6:	8d 50 10             	lea    edx,[eax+0x10]
c00219d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00219dc:	89 02                	mov    DWORD PTR [edx],eax
c00219de:	90                   	nop
c00219df:	c9                   	leave  
c00219e0:	c3                   	ret    
c00219e1:	90                   	nop

c00219e2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00219e2:	55                   	push   ebp
c00219e3:	89 e5                	mov    ebp,esp
c00219e5:	53                   	push   ebx
c00219e6:	83 ec 2c             	sub    esp,0x2c
c00219e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219ec:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00219ef:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00219f2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00219f5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00219f8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00219fb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00219fe:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021a01:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021a04:	88 d8                	mov    al,bl
c0021a06:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0021a09:	88 c8                	mov    al,cl
c0021a0b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021a0e:	88 d0                	mov    al,dl
c0021a10:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021a13:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021a17:	83 c0 08             	add    eax,0x8
c0021a1a:	01 c0                	add    eax,eax
c0021a1c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021a1f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021a23:	83 c0 08             	add    eax,0x8
c0021a26:	01 c0                	add    eax,eax
c0021a28:	40                   	inc    eax
c0021a29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0021a2c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021a2f:	50                   	push   eax
c0021a30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a33:	e8 60 fe ff ff       	call   c0021898 <IOAPIC::read(int)>
c0021a38:	83 c4 08             	add    esp,0x8
c0021a3b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021a3e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021a45:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021a48:	c1 e0 18             	shl    eax,0x18
c0021a4b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0021a4e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021a51:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021a54:	52                   	push   edx
c0021a55:	50                   	push   eax
c0021a56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a59:	e8 58 ff ff ff       	call   c00219b6 <IOAPIC::write(int, int)>
c0021a5e:	83 c4 0c             	add    esp,0xc
c0021a61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021a64:	50                   	push   eax
c0021a65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021a68:	e8 2b fe ff ff       	call   c0021898 <IOAPIC::read(int)>
c0021a6d:	83 c4 08             	add    esp,0x8
c0021a70:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021a73:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021a7a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0021a81:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021a88:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021a8c:	74 09                	je     c0021a97 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021a8e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0021a95:	eb 07                	jmp    c0021a9e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0021a97:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021a9e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0021aa2:	74 09                	je     c0021aad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0021aa4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021aab:	eb 07                	jmp    c0021ab4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021aad:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0021ab4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021abb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021abf:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0021ac2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0021ac5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021ac8:	52                   	push   edx
c0021ac9:	50                   	push   eax
c0021aca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021acd:	e8 e4 fe ff ff       	call   c00219b6 <IOAPIC::write(int, int)>
c0021ad2:	83 c4 0c             	add    esp,0xc
c0021ad5:	90                   	nop
c0021ad6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021ad9:	c9                   	leave  
c0021ada:	c3                   	ret    
c0021adb:	90                   	nop

c0021adc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021adc:	55                   	push   ebp
c0021add:	89 e5                	mov    ebp,esp
c0021adf:	57                   	push   edi
c0021ae0:	56                   	push   esi
c0021ae1:	53                   	push   ebx
c0021ae2:	83 ec 2c             	sub    esp,0x2c
c0021ae5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021ae8:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021aeb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021aef:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0021af3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021af7:	74 5a                	je     c0021b53 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021af9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021afd:	7f 44                	jg     c0021b43 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021aff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b02:	05 e0 77 02 c0       	add    eax,0xc00277e0
c0021b07:	8a 00                	mov    al,BYTE PTR [eax]
c0021b09:	0f b6 c0             	movzx  eax,al
c0021b0c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0021b0f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b12:	66 8b 84 00 e0 89 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7620]
c0021b1a:	0f b7 c0             	movzx  eax,ax
c0021b1d:	83 e0 02             	and    eax,0x2
c0021b20:	85 c0                	test   eax,eax
c0021b22:	74 04                	je     c0021b28 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0021b24:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0021b28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b2b:	66 8b 84 00 e0 89 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7620]
c0021b33:	0f b7 c0             	movzx  eax,ax
c0021b36:	83 e0 08             	and    eax,0x8
c0021b39:	85 c0                	test   eax,eax
c0021b3b:	74 16                	je     c0021b53 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021b3d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021b41:	eb 10                	jmp    c0021b53 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021b43:	83 ec 0c             	sub    esp,0xc
c0021b46:	68 4c 71 02 c0       	push   0xc002714c
c0021b4b:	e8 77 2e ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0021b50:	83 c4 10             	add    esp,0x10
c0021b53:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0021b57:	a1 40 a0 02 c0       	mov    eax,ds:0xc002a040
c0021b5c:	83 ec 08             	sub    esp,0x8
c0021b5f:	50                   	push   eax
c0021b60:	68 84 71 02 c0       	push   0xc0027184
c0021b65:	e8 95 b1 fe ff       	call   c000ccff <Dbg::kprintf(char const*, ...)>
c0021b6a:	83 c4 10             	add    esp,0x10
c0021b6d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021b74:	a1 40 a0 02 c0       	mov    eax,ds:0xc002a040
c0021b79:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021b7c:	7d 67                	jge    c0021be5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021b7e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021b81:	8b 04 85 60 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5fa0]
c0021b88:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021b8b:	83 ec 08             	sub    esp,0x8
c0021b8e:	52                   	push   edx
c0021b8f:	50                   	push   eax
c0021b90:	e8 d1 fc ff ff       	call   c0021866 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021b95:	83 c4 10             	add    esp,0x10
c0021b98:	84 c0                	test   al,al
c0021b9a:	74 44                	je     c0021be0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021b9c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021b9f:	8b 1c 85 60 a0 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5fa0]
c0021ba6:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021baa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021bad:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021bb1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021bb4:	83 c0 20             	add    eax,0x20
c0021bb7:	0f b6 f0             	movzx  esi,al
c0021bba:	b8 00 00 00 00       	mov    eax,0x0
c0021bbf:	99                   	cdq    
c0021bc0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021bc3:	0f b6 c9             	movzx  ecx,cl
c0021bc6:	83 ec 04             	sub    esp,0x4
c0021bc9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021bcc:	57                   	push   edi
c0021bcd:	56                   	push   esi
c0021bce:	52                   	push   edx
c0021bcf:	50                   	push   eax
c0021bd0:	51                   	push   ecx
c0021bd1:	53                   	push   ebx
c0021bd2:	e8 0b fe ff ff       	call   c00219e2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021bd7:	83 c4 20             	add    esp,0x20
c0021bda:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021bde:	eb 05                	jmp    c0021be5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021be0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021be3:	eb 8f                	jmp    c0021b74 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021be5:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021be8:	83 f0 01             	xor    eax,0x1
c0021beb:	84 c0                	test   al,al
c0021bed:	74 10                	je     c0021bff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021bef:	83 ec 0c             	sub    esp,0xc
c0021bf2:	68 9b 71 02 c0       	push   0xc002719b
c0021bf7:	e8 cb 2d ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0021bfc:	83 c4 10             	add    esp,0x10
c0021bff:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021c03:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021c0a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021c0e:	7f 65                	jg     c0021c75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021c10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c13:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021c16:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021c1d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021c20:	01 ca                	add    edx,ecx
c0021c22:	83 c2 54             	add    edx,0x54
c0021c25:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021c29:	85 c0                	test   eax,eax
c0021c2b:	75 43                	jne    c0021c70 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c30:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021c33:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021c3a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021c3d:	01 ca                	add    edx,ecx
c0021c3f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021c42:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021c45:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021c4c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021c4f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021c56:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021c59:	01 ca                	add    edx,ecx
c0021c5b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021c61:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021c64:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021c68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c6b:	83 e8 20             	sub    eax,0x20
c0021c6e:	eb 1a                	jmp    c0021c8a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021c70:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021c73:	eb 95                	jmp    c0021c0a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021c75:	83 ec 0c             	sub    esp,0xc
c0021c78:	68 a8 71 02 c0       	push   0xc00271a8
c0021c7d:	e8 45 2d ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0021c82:	83 c4 10             	add    esp,0x10
c0021c85:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021c8a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021c8d:	5b                   	pop    ebx
c0021c8e:	5e                   	pop    esi
c0021c8f:	5f                   	pop    edi
c0021c90:	5d                   	pop    ebp
c0021c91:	c3                   	ret    

c0021c92 <PIC::disable()>:
c0021c92:	55                   	push   ebp
c0021c93:	89 e5                	mov    ebp,esp
c0021c95:	83 ec 10             	sub    esp,0x10
c0021c98:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021c9e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021ca2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021ca5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021ca9:	ee                   	out    dx,al
c0021caa:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021cb0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021cb4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021cb7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021cbb:	ee                   	out    dx,al
c0021cbc:	90                   	nop
c0021cbd:	c9                   	leave  
c0021cbe:	c3                   	ret    
c0021cbf:	90                   	nop

c0021cc0 <PIC::close(int, int, void*)>:
c0021cc0:	55                   	push   ebp
c0021cc1:	89 e5                	mov    ebp,esp
c0021cc3:	83 ec 08             	sub    esp,0x8
c0021cc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021cc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ccb:	83 c0 3c             	add    eax,0x3c
c0021cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cd0:	83 ec 0c             	sub    esp,0xc
c0021cd3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cd6:	ff d0                	call   eax
c0021cd8:	83 c4 10             	add    esp,0x10
c0021cdb:	b8 00 00 00 00       	mov    eax,0x0
c0021ce0:	c9                   	leave  
c0021ce1:	c3                   	ret    

c0021ce2 <PIC::PIC()>:
c0021ce2:	83 ec 0c             	sub    esp,0xc
c0021ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ce9:	83 ec 08             	sub    esp,0x8
c0021cec:	68 54 72 02 c0       	push   0xc0027254
c0021cf1:	50                   	push   eax
c0021cf2:	e8 c3 ce fe ff       	call   c000ebba <InterruptController::InterruptController(char const*)>
c0021cf7:	83 c4 10             	add    esp,0x10
c0021cfa:	ba 80 72 02 c0       	mov    edx,0xc0027280
c0021cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d03:	89 10                	mov    DWORD PTR [eax],edx
c0021d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d0f:	0f b6 d0             	movzx  edx,al
c0021d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d16:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021d1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d21:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d27:	0f b6 d0             	movzx  edx,al
c0021d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d3d:	8d 50 01             	lea    edx,[eax+0x1]
c0021d40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d44:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021d4a:	0f b6 d0             	movzx  edx,al
c0021d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d51:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021d55:	83 e1 3f             	and    ecx,0x3f
c0021d58:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d60:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d66:	0f b6 d0             	movzx  edx,al
c0021d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d6d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d78:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d7e:	0f b6 d0             	movzx  edx,al
c0021d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d85:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021d94:	8d 50 01             	lea    edx,[eax+0x1]
c0021d97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021d9b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021da1:	0f b6 d0             	movzx  edx,al
c0021da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021dac:	83 e1 3f             	and    ecx,0x3f
c0021daf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021db3:	90                   	nop
c0021db4:	83 c4 0c             	add    esp,0xc
c0021db7:	c3                   	ret    

c0021db8 <PIC::ioWait()>:
c0021db8:	eb 00                	jmp    c0021dba <PIC::ioWait()+0x2>
c0021dba:	eb 00                	jmp    c0021dbc <PIC::ioWait()+0x4>
c0021dbc:	90                   	nop
c0021dbd:	c3                   	ret    

c0021dbe <PIC::getIRQReg(int)>:
c0021dbe:	55                   	push   ebp
c0021dbf:	89 e5                	mov    ebp,esp
c0021dc1:	83 ec 10             	sub    esp,0x10
c0021dc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021dc7:	0f b6 c0             	movzx  eax,al
c0021dca:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021dd0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021dd3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021dd6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021dda:	ee                   	out    dx,al
c0021ddb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021dde:	0f b6 c0             	movzx  eax,al
c0021de1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021de7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021dea:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021ded:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021df1:	ee                   	out    dx,al
c0021df2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021df8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021dfc:	89 c2                	mov    edx,eax
c0021dfe:	ec                   	in     al,dx
c0021dff:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021e02:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021e05:	0f b6 c0             	movzx  eax,al
c0021e08:	c1 e0 08             	shl    eax,0x8
c0021e0b:	89 c1                	mov    ecx,eax
c0021e0d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021e13:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021e17:	89 c2                	mov    edx,eax
c0021e19:	ec                   	in     al,dx
c0021e1a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021e1d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021e20:	0f b6 c0             	movzx  eax,al
c0021e23:	09 c8                	or     eax,ecx
c0021e25:	c9                   	leave  
c0021e26:	c3                   	ret    
c0021e27:	90                   	nop

c0021e28 <PIC::eoi(unsigned char)>:
c0021e28:	55                   	push   ebp
c0021e29:	89 e5                	mov    ebp,esp
c0021e2b:	83 ec 14             	sub    esp,0x14
c0021e2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021e31:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021e34:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021e38:	75 1e                	jne    c0021e58 <PIC::eoi(unsigned char)+0x30>
c0021e3a:	6a 0b                	push   0xb
c0021e3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e3f:	e8 7a ff ff ff       	call   c0021dbe <PIC::getIRQReg(int)>
c0021e44:	83 c4 08             	add    esp,0x8
c0021e47:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021e4b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021e4f:	25 80 00 00 00       	and    eax,0x80
c0021e54:	85 c0                	test   eax,eax
c0021e56:	74 5f                	je     c0021eb7 <PIC::eoi(unsigned char)+0x8f>
c0021e58:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021e5c:	75 2d                	jne    c0021e8b <PIC::eoi(unsigned char)+0x63>
c0021e5e:	6a 0b                	push   0xb
c0021e60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e63:	e8 56 ff ff ff       	call   c0021dbe <PIC::getIRQReg(int)>
c0021e68:	83 c4 08             	add    esp,0x8
c0021e6b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021e6f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021e72:	66 85 c0             	test   ax,ax
c0021e75:	78 14                	js     c0021e8b <PIC::eoi(unsigned char)+0x63>
c0021e77:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021e7d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021e81:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021e84:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021e88:	ee                   	out    dx,al
c0021e89:	eb 2d                	jmp    c0021eb8 <PIC::eoi(unsigned char)+0x90>
c0021e8b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021e8f:	76 12                	jbe    c0021ea3 <PIC::eoi(unsigned char)+0x7b>
c0021e91:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021e97:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021e9b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021e9e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021ea2:	ee                   	out    dx,al
c0021ea3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021ea9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021ead:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021eb0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021eb4:	ee                   	out    dx,al
c0021eb5:	eb 01                	jmp    c0021eb8 <PIC::eoi(unsigned char)+0x90>
c0021eb7:	90                   	nop
c0021eb8:	c9                   	leave  
c0021eb9:	c3                   	ret    

c0021eba <PIC::remap()>:
c0021eba:	55                   	push   ebp
c0021ebb:	89 e5                	mov    ebp,esp
c0021ebd:	83 ec 48             	sub    esp,0x48
c0021ec0:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021ec7:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021ece:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021ed4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021ed7:	89 c2                	mov    edx,eax
c0021ed9:	ec                   	in     al,dx
c0021eda:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021edd:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021ee0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021ee3:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021ee9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021eec:	89 c2                	mov    edx,eax
c0021eee:	ec                   	in     al,dx
c0021eef:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021ef2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021ef5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021ef8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021efe:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021f02:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021f05:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021f08:	ee                   	out    dx,al
c0021f09:	83 ec 0c             	sub    esp,0xc
c0021f0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f0f:	e8 a4 fe ff ff       	call   c0021db8 <PIC::ioWait()>
c0021f14:	83 c4 10             	add    esp,0x10
c0021f17:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021f1d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021f21:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021f24:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021f27:	ee                   	out    dx,al
c0021f28:	83 ec 0c             	sub    esp,0xc
c0021f2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f2e:	e8 85 fe ff ff       	call   c0021db8 <PIC::ioWait()>
c0021f33:	83 c4 10             	add    esp,0x10
c0021f36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021f39:	0f b6 c0             	movzx  eax,al
c0021f3c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021f42:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021f45:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021f48:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021f4b:	ee                   	out    dx,al
c0021f4c:	83 ec 0c             	sub    esp,0xc
c0021f4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f52:	e8 61 fe ff ff       	call   c0021db8 <PIC::ioWait()>
c0021f57:	83 c4 10             	add    esp,0x10
c0021f5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021f5d:	0f b6 c0             	movzx  eax,al
c0021f60:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021f66:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021f69:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021f6c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021f6f:	ee                   	out    dx,al
c0021f70:	83 ec 0c             	sub    esp,0xc
c0021f73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f76:	e8 3d fe ff ff       	call   c0021db8 <PIC::ioWait()>
c0021f7b:	83 c4 10             	add    esp,0x10
c0021f7e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021f84:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021f88:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021f8b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021f8e:	ee                   	out    dx,al
c0021f8f:	83 ec 0c             	sub    esp,0xc
c0021f92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f95:	e8 1e fe ff ff       	call   c0021db8 <PIC::ioWait()>
c0021f9a:	83 c4 10             	add    esp,0x10
c0021f9d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021fa3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021fa7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021faa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021fad:	ee                   	out    dx,al
c0021fae:	83 ec 0c             	sub    esp,0xc
c0021fb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fb4:	e8 ff fd ff ff       	call   c0021db8 <PIC::ioWait()>
c0021fb9:	83 c4 10             	add    esp,0x10
c0021fbc:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021fc2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021fc6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021fc9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021fcc:	ee                   	out    dx,al
c0021fcd:	83 ec 0c             	sub    esp,0xc
c0021fd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021fd3:	e8 e0 fd ff ff       	call   c0021db8 <PIC::ioWait()>
c0021fd8:	83 c4 10             	add    esp,0x10
c0021fdb:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021fe1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021fe5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021fe8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021feb:	ee                   	out    dx,al
c0021fec:	83 ec 0c             	sub    esp,0xc
c0021fef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ff2:	e8 c1 fd ff ff       	call   c0021db8 <PIC::ioWait()>
c0021ff7:	83 c4 10             	add    esp,0x10
c0021ffa:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021ffe:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022004:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022007:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002200a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002200d:	ee                   	out    dx,al
c002200e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022012:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022018:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002201b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002201e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022021:	ee                   	out    dx,al
c0022022:	90                   	nop
c0022023:	c9                   	leave  
c0022024:	c3                   	ret    
c0022025:	90                   	nop

c0022026 <PIC::open(int, int, void*)>:
c0022026:	55                   	push   ebp
c0022027:	89 e5                	mov    ebp,esp
c0022029:	83 ec 18             	sub    esp,0x18
c002202c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022032:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022036:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022039:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002203d:	ee                   	out    dx,al
c002203e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022044:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022048:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002204b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002204f:	ee                   	out    dx,al
c0022050:	83 ec 0c             	sub    esp,0xc
c0022053:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022056:	e8 5f fe ff ff       	call   c0021eba <PIC::remap()>
c002205b:	83 c4 10             	add    esp,0x10
c002205e:	b8 00 00 00 00       	mov    eax,0x0
c0022063:	c9                   	leave  
c0022064:	c3                   	ret    
c0022065:	66 90                	xchg   ax,ax
c0022067:	90                   	nop

c0022068 <APICTimer::close(int, int, void*)>:
c0022068:	b8 00 00 00 00       	mov    eax,0x0
c002206d:	c3                   	ret    
c002206e:	66 90                	xchg   ax,ax

c0022070 <apicTimerHandler(regs*, void*)>:
c0022070:	83 ec 0c             	sub    esp,0xc
c0022073:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022077:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022079:	b8 10 27 00 00       	mov    eax,0x2710
c002207e:	ba 00 00 00 00       	mov    edx,0x0
c0022083:	f7 f1                	div    ecx
c0022085:	83 ec 0c             	sub    esp,0xc
c0022088:	50                   	push   eax
c0022089:	e8 7b ea fe ff       	call   c0010b09 <timerHandler(unsigned int)>
c002208e:	83 c4 10             	add    esp,0x10
c0022091:	90                   	nop
c0022092:	83 c4 0c             	add    esp,0xc
c0022095:	c3                   	ret    
c0022096:	66 90                	xchg   ax,ax

c0022098 <APICTimer::write(int)>:
c0022098:	83 ec 1c             	sub    esp,0x1c
c002209b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002209f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00220a3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00220a9:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c00220ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00220b4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00220ba:	83 ec 0c             	sub    esp,0xc
c00220bd:	50                   	push   eax
c00220be:	e8 e1 f4 ff ff       	call   c00215a4 <APIC::getBase()>
c00220c3:	83 c4 10             	add    esp,0x10
c00220c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00220ca:	a1 0c 87 02 c0       	mov    eax,ds:0xc002870c
c00220cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220d7:	05 e0 03 00 00       	add    eax,0x3e0
c00220dc:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00220e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220e6:	05 80 03 00 00       	add    eax,0x380
c00220eb:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00220f1:	fb                   	sti    
c00220f2:	66 90                	xchg   ax,ax
c00220f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220f8:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c00220fe:	a1 0c 87 02 c0       	mov    eax,ds:0xc002870c
c0022103:	39 c2                	cmp    edx,eax
c0022105:	76 05                	jbe    c002210c <APICTimer::write(int)+0x74>
c0022107:	eb eb                	jmp    c00220f4 <APICTimer::write(int)+0x5c>
c0022109:	8d 76 00             	lea    esi,[esi+0x0]
c002210c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022110:	05 20 03 00 00       	add    eax,0x320
c0022115:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002211b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002211f:	05 90 03 00 00       	add    eax,0x390
c0022124:	8b 00                	mov    eax,DWORD PTR [eax]
c0022126:	f7 d0                	not    eax
c0022128:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002212c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022134:	ba 00 00 00 00       	mov    edx,0x0
c0022139:	f7 f1                	div    ecx
c002213b:	89 04 24             	mov    DWORD PTR [esp],eax
c002213e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022142:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022148:	0d 00 00 02 00       	or     eax,0x20000
c002214d:	89 c2                	mov    edx,eax
c002214f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022153:	05 20 03 00 00       	add    eax,0x320
c0022158:	89 10                	mov    DWORD PTR [eax],edx
c002215a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002215e:	05 e0 03 00 00       	add    eax,0x3e0
c0022163:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022169:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002216d:	05 80 03 00 00       	add    eax,0x380
c0022172:	89 c2                	mov    edx,eax
c0022174:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022177:	89 02                	mov    DWORD PTR [edx],eax
c0022179:	90                   	nop
c002217a:	83 c4 1c             	add    esp,0x1c
c002217d:	c3                   	ret    
c002217e:	66 90                	xchg   ax,ax

c0022180 <APICTimer::open(int, int, void*)>:
c0022180:	57                   	push   edi
c0022181:	56                   	push   esi
c0022182:	53                   	push   ebx
c0022183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022187:	8b 00                	mov    eax,DWORD PTR [eax]
c0022189:	83 c0 24             	add    eax,0x24
c002218c:	8b 00                	mov    eax,DWORD PTR [eax]
c002218e:	83 ec 08             	sub    esp,0x8
c0022191:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022199:	ff d0                	call   eax
c002219b:	83 c4 10             	add    esp,0x10
c002219e:	a1 e8 80 02 c0       	mov    eax,ds:0xc00280e8
c00221a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00221a9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00221af:	83 ec 0c             	sub    esp,0xc
c00221b2:	50                   	push   eax
c00221b3:	e8 ec f3 ff ff       	call   c00215a4 <APIC::getBase()>
c00221b8:	83 c4 10             	add    esp,0x10
c00221bb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00221c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221c5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00221cb:	0f b6 f8             	movzx  edi,al
c00221ce:	89 d0                	mov    eax,edx
c00221d0:	ba 00 00 00 00       	mov    edx,0x0
c00221d5:	89 c1                	mov    ecx,eax
c00221d7:	80 e5 ff             	and    ch,0xff
c00221da:	89 cb                	mov    ebx,ecx
c00221dc:	0f b6 f2             	movzx  esi,dl
c00221df:	89 d8                	mov    eax,ebx
c00221e1:	89 f2                	mov    edx,esi
c00221e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00221e7:	8d 5f 08             	lea    ebx,[edi+0x8]
c00221ea:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00221ee:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00221f2:	83 e0 00             	and    eax,0x0
c00221f5:	09 d0                	or     eax,edx
c00221f7:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00221fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022205:	8d 50 01             	lea    edx,[eax+0x1]
c0022208:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002220c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022212:	0f b6 d0             	movzx  edx,al
c0022215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022219:	83 c2 08             	add    edx,0x8
c002221c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022220:	0f b6 c9             	movzx  ecx,cl
c0022223:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022229:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002222d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022231:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022235:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002223b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022243:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022249:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002224d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022253:	83 ec 0c             	sub    esp,0xc
c0022256:	51                   	push   ecx
c0022257:	6a 01                	push   0x1
c0022259:	68 70 20 02 c0       	push   0xc0022070
c002225e:	52                   	push   edx
c002225f:	50                   	push   eax
c0022260:	e8 51 bf fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022265:	83 c4 20             	add    esp,0x20
c0022268:	89 c2                	mov    edx,eax
c002226a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022274:	b8 00 00 00 00       	mov    eax,0x0
c0022279:	5b                   	pop    ebx
c002227a:	5e                   	pop    esi
c002227b:	5f                   	pop    edi
c002227c:	c3                   	ret    
c002227d:	90                   	nop
c002227e:	66 90                	xchg   ax,ax

c0022280 <APICTimer::APICTimer()>:
c0022280:	83 ec 0c             	sub    esp,0xc
c0022283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022287:	83 ec 08             	sub    esp,0x8
c002228a:	68 c0 72 02 c0       	push   0xc00272c0
c002228f:	50                   	push   eax
c0022290:	e8 e3 e7 fe ff       	call   c0010a78 <Timer::Timer(char const*)>
c0022295:	83 c4 10             	add    esp,0x10
c0022298:	ba d4 72 02 c0       	mov    edx,0xc00272d4
c002229d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a1:	89 10                	mov    DWORD PTR [eax],edx
c00222a3:	90                   	nop
c00222a4:	83 c4 0c             	add    esp,0xc
c00222a7:	c3                   	ret    

c00222a8 <PIT::write(int)>:
c00222a8:	83 ec 10             	sub    esp,0x10
c00222ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00222af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00222b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00222b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00222bd:	a3 84 a0 02 c0       	mov    ds:0xc002a084,eax
c00222c2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00222c7:	99                   	cdq    
c00222c8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00222cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00222d0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00222d7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00222dc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00222e0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00222e5:	ee                   	out    dx,al
c00222e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222ea:	0f b6 c0             	movzx  eax,al
c00222ed:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00222f4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00222f8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00222fc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022301:	ee                   	out    dx,al
c0022302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022306:	c1 f8 08             	sar    eax,0x8
c0022309:	0f b6 c0             	movzx  eax,al
c002230c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022313:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022317:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002231b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022320:	ee                   	out    dx,al
c0022321:	90                   	nop
c0022322:	83 c4 10             	add    esp,0x10
c0022325:	c3                   	ret    
c0022326:	66 90                	xchg   ax,ax

c0022328 <pitHandler(regs*, void*)>:
c0022328:	83 ec 0c             	sub    esp,0xc
c002232b:	8b 0d 84 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a084
c0022331:	b8 10 27 00 00       	mov    eax,0x2710
c0022336:	99                   	cdq    
c0022337:	f7 f9                	idiv   ecx
c0022339:	83 ec 0c             	sub    esp,0xc
c002233c:	50                   	push   eax
c002233d:	e8 c7 e7 fe ff       	call   c0010b09 <timerHandler(unsigned int)>
c0022342:	83 c4 10             	add    esp,0x10
c0022345:	90                   	nop
c0022346:	83 c4 0c             	add    esp,0xc
c0022349:	c3                   	ret    
c002234a:	66 90                	xchg   ax,ax

c002234c <PIT::open(int, int, void*)>:
c002234c:	83 ec 0c             	sub    esp,0xc
c002234f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022353:	8b 00                	mov    eax,DWORD PTR [eax]
c0022355:	83 c0 24             	add    eax,0x24
c0022358:	8b 00                	mov    eax,DWORD PTR [eax]
c002235a:	83 ec 08             	sub    esp,0x8
c002235d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022365:	ff d0                	call   eax
c0022367:	83 c4 10             	add    esp,0x10
c002236a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002236e:	83 ec 0c             	sub    esp,0xc
c0022371:	6a 00                	push   0x0
c0022373:	6a 01                	push   0x1
c0022375:	68 28 23 02 c0       	push   0xc0022328
c002237a:	6a 00                	push   0x0
c002237c:	50                   	push   eax
c002237d:	e8 34 be fe ff       	call   c000e1b6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022382:	83 c4 20             	add    esp,0x20
c0022385:	89 c2                	mov    edx,eax
c0022387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002238b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022391:	b8 00 00 00 00       	mov    eax,0x0
c0022396:	83 c4 0c             	add    esp,0xc
c0022399:	c3                   	ret    
c002239a:	66 90                	xchg   ax,ax

c002239c <PIT::close(int, int, void*)>:
c002239c:	83 ec 0c             	sub    esp,0xc
c002239f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00223ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b1:	6a 01                	push   0x1
c00223b3:	68 28 23 02 c0       	push   0xc0022328
c00223b8:	6a 00                	push   0x0
c00223ba:	50                   	push   eax
c00223bb:	e8 40 be fe ff       	call   c000e200 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00223c0:	83 c4 10             	add    esp,0x10
c00223c3:	b8 00 00 00 00       	mov    eax,0x0
c00223c8:	83 c4 0c             	add    esp,0xc
c00223cb:	c3                   	ret    

c00223cc <PIT::PIT()>:
c00223cc:	83 ec 0c             	sub    esp,0xc
c00223cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d3:	83 ec 08             	sub    esp,0x8
c00223d6:	68 fc 72 02 c0       	push   0xc00272fc
c00223db:	50                   	push   eax
c00223dc:	e8 97 e6 fe ff       	call   c0010a78 <Timer::Timer(char const*)>
c00223e1:	83 c4 10             	add    esp,0x10
c00223e4:	ba 24 73 02 c0       	mov    edx,0xc0027324
c00223e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ed:	89 10                	mov    DWORD PTR [eax],edx
c00223ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223f9:	0f b6 d0             	movzx  edx,al
c00223fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022400:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002240b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022411:	0f b6 d0             	movzx  edx,al
c0022414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022418:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002241d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022421:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022427:	8d 50 01             	lea    edx,[eax+0x1]
c002242a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002242e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022434:	0f b6 d0             	movzx  edx,al
c0022437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002243b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002243f:	83 e1 3f             	and    ecx,0x3f
c0022442:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022446:	90                   	nop
c0022447:	83 c4 0c             	add    esp,0xc
c002244a:	c3                   	ret    
c002244b:	66 90                	xchg   ax,ax
c002244d:	66 90                	xchg   ax,ax
c002244f:	90                   	nop

c0022450 <avxDetect>:
c0022450:	b8 00 00 00 00       	mov    eax,0x0
c0022455:	c3                   	ret    

c0022456 <avxSave>:
c0022456:	c3                   	ret    

c0022457 <avxLoad>:
c0022457:	c3                   	ret    

c0022458 <avxInit>:
c0022458:	c3                   	ret    

c0022459 <avxClose>:
c0022459:	c3                   	ret    

c002245a <wouldSheSayYes>:
c002245a:	c3                   	ret    
c002245b:	49                   	dec    ecx
c002245c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022460:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022464:	75 20                	jne    c0022486 <sseDetect.noSSE+0x1>
c0022466:	4e                   	dec    esi
c0022467:	79 61                	jns    c00224ca <x87Detect+0x14>
c0022469:	68 2e 2e 2e 00       	push   0x2e2e2e
c002246e:	66 90                	xchg   ax,ax

c0022470 <absolutelyNoChanceInHell>:
c0022470:	b8 01 00 00 00       	mov    eax,0x1
c0022475:	0f a2                	cpuid  
c0022477:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002247d:	74 06                	je     c0022485 <sseDetect.noSSE>
c002247f:	b8 01 00 00 00       	mov    eax,0x1
c0022484:	c3                   	ret    

c0022485 <sseDetect.noSSE>:
c0022485:	31 c0                	xor    eax,eax
c0022487:	c3                   	ret    

c0022488 <sseSave>:
c0022488:	0f ae 44 24 04       	fxsave [esp+0x4]
c002248d:	c3                   	ret    

c002248e <sseLoad>:
c002248e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022493:	c3                   	ret    

c0022494 <sseInit>:
c0022494:	e8 49 00 00 00       	call   c00224e2 <x87Init>
c0022499:	0f 20 e0             	mov    eax,cr4
c002249c:	66 0d 00 06          	or     ax,0x600
c00224a0:	0f 22 e0             	mov    cr4,eax
c00224a3:	c3                   	ret    

c00224a4 <sseClose>:
c00224a4:	c3                   	ret    
c00224a5:	66 90                	xchg   ax,ax
c00224a7:	66 90                	xchg   ax,ax
c00224a9:	66 90                	xchg   ax,ax
c00224ab:	66 90                	xchg   ax,ax
c00224ad:	66 90                	xchg   ax,ax
c00224af:	90                   	nop

c00224b0 <value_37F>:
c00224b0:	7f 03                	jg     c00224b5 <value_37A+0x1>

c00224b2 <value_37E>:
c00224b2:	7e 03                	jle    c00224b7 <x87Detect+0x1>

c00224b4 <value_37A>:
c00224b4:	7a 03                	jp     c00224b9 <x87Detect+0x3>

c00224b6 <x87Detect>:
c00224b6:	b8 01 00 00 00       	mov    eax,0x1
c00224bb:	0f a2                	cpuid  
c00224bd:	f7 c2 01 00 00 00    	test   edx,0x1
c00224c3:	74 06                	je     c00224cb <x87Detect.nox87>
c00224c5:	b8 01 00 00 00       	mov    eax,0x1
c00224ca:	c3                   	ret    

c00224cb <x87Detect.nox87>:
c00224cb:	b8 00 00 00 00       	mov    eax,0x0
c00224d0:	c3                   	ret    

c00224d1 <x87Save>:
c00224d1:	55                   	push   ebp
c00224d2:	89 e5                	mov    ebp,esp
c00224d4:	9b dd 75 08          	fsave  [ebp+0x8]
c00224d8:	c9                   	leave  
c00224d9:	c3                   	ret    

c00224da <x87Load>:
c00224da:	55                   	push   ebp
c00224db:	89 e5                	mov    ebp,esp
c00224dd:	dd 65 08             	frstor [ebp+0x8]
c00224e0:	c9                   	leave  
c00224e1:	c3                   	ret    

c00224e2 <x87Init>:
c00224e2:	9b db e3             	finit  
c00224e5:	0f 20 c0             	mov    eax,cr0
c00224e8:	66 25 fb ff          	and    ax,0xfffb
c00224ec:	66 0d 22 00          	or     ax,0x22
c00224f0:	0f 22 c0             	mov    cr0,eax
c00224f3:	0f 06                	clts   
c00224f5:	d9 2d b4 24 02 c0    	fldcw  WORD PTR ds:0xc00224b4
c00224fb:	c3                   	ret    

c00224fc <x87Close>:
c00224fc:	c3                   	ret    
c00224fd:	66 90                	xchg   ax,ax
c00224ff:	90                   	nop

c0022500 <__do_global_ctors_aux>:
c0022500:	a1 9c 36 02 c0       	mov    eax,ds:0xc002369c
c0022505:	83 f8 ff             	cmp    eax,0xffffffff
c0022508:	74 1a                	je     c0022524 <__do_global_ctors_aux+0x24>
c002250a:	55                   	push   ebp
c002250b:	89 e5                	mov    ebp,esp
c002250d:	53                   	push   ebx
c002250e:	52                   	push   edx
c002250f:	bb 9c 36 02 c0       	mov    ebx,0xc002369c
c0022514:	ff d0                	call   eax
c0022516:	83 eb 04             	sub    ebx,0x4
c0022519:	8b 03                	mov    eax,DWORD PTR [ebx]
c002251b:	83 f8 ff             	cmp    eax,0xffffffff
c002251e:	75 f4                	jne    c0022514 <__do_global_ctors_aux+0x14>
c0022520:	58                   	pop    eax
c0022521:	5b                   	pop    ebx
c0022522:	5d                   	pop    ebp
c0022523:	c3                   	ret    
c0022524:	c3                   	ret    
c0022525:	66 90                	xchg   ax,ax
c0022527:	90                   	nop

c0022528 <__divdi3>:
c0022528:	55                   	push   ebp
c0022529:	57                   	push   edi
c002252a:	56                   	push   esi
c002252b:	53                   	push   ebx
c002252c:	83 ec 1c             	sub    esp,0x1c
c002252f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022533:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022537:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002253a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002253e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022542:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022546:	85 db                	test   ebx,ebx
c0022548:	0f 88 8e 00 00 00    	js     c00225dc <__divdi3+0xb4>
c002254e:	89 dd                	mov    ebp,ebx
c0022550:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022558:	89 d3                	mov    ebx,edx
c002255a:	85 d2                	test   edx,edx
c002255c:	79 0d                	jns    c002256b <__divdi3+0x43>
c002255e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022562:	f7 d8                	neg    eax
c0022564:	83 d2 00             	adc    edx,0x0
c0022567:	f7 da                	neg    edx
c0022569:	89 d3                	mov    ebx,edx
c002256b:	89 c7                	mov    edi,eax
c002256d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022570:	85 db                	test   ebx,ebx
c0022572:	75 48                	jne    c00225bc <__divdi3+0x94>
c0022574:	39 ef                	cmp    edi,ebp
c0022576:	76 24                	jbe    c002259c <__divdi3+0x74>
c0022578:	89 ea                	mov    edx,ebp
c002257a:	f7 f7                	div    edi
c002257c:	89 c1                	mov    ecx,eax
c002257e:	31 f6                	xor    esi,esi
c0022580:	89 c8                	mov    eax,ecx
c0022582:	89 f2                	mov    edx,esi
c0022584:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022588:	85 c9                	test   ecx,ecx
c002258a:	74 07                	je     c0022593 <__divdi3+0x6b>
c002258c:	f7 d8                	neg    eax
c002258e:	83 d2 00             	adc    edx,0x0
c0022591:	f7 da                	neg    edx
c0022593:	83 c4 1c             	add    esp,0x1c
c0022596:	5b                   	pop    ebx
c0022597:	5e                   	pop    esi
c0022598:	5f                   	pop    edi
c0022599:	5d                   	pop    ebp
c002259a:	c3                   	ret    
c002259b:	90                   	nop
c002259c:	85 ff                	test   edi,edi
c002259e:	75 0b                	jne    c00225ab <__divdi3+0x83>
c00225a0:	b8 01 00 00 00       	mov    eax,0x1
c00225a5:	31 d2                	xor    edx,edx
c00225a7:	f7 f3                	div    ebx
c00225a9:	89 c7                	mov    edi,eax
c00225ab:	31 d2                	xor    edx,edx
c00225ad:	89 e8                	mov    eax,ebp
c00225af:	f7 f7                	div    edi
c00225b1:	89 c6                	mov    esi,eax
c00225b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00225b6:	f7 f7                	div    edi
c00225b8:	89 c1                	mov    ecx,eax
c00225ba:	eb c4                	jmp    c0022580 <__divdi3+0x58>
c00225bc:	39 eb                	cmp    ebx,ebp
c00225be:	77 3c                	ja     c00225fc <__divdi3+0xd4>
c00225c0:	0f bd f3             	bsr    esi,ebx
c00225c3:	83 f6 1f             	xor    esi,0x1f
c00225c6:	75 40                	jne    c0022608 <__divdi3+0xe0>
c00225c8:	39 eb                	cmp    ebx,ebp
c00225ca:	72 09                	jb     c00225d5 <__divdi3+0xad>
c00225cc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00225cf:	0f 87 97 00 00 00    	ja     c002266c <__divdi3+0x144>
c00225d5:	b9 01 00 00 00       	mov    ecx,0x1
c00225da:	eb a4                	jmp    c0022580 <__divdi3+0x58>
c00225dc:	f7 d9                	neg    ecx
c00225de:	83 d3 00             	adc    ebx,0x0
c00225e1:	f7 db                	neg    ebx
c00225e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00225e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00225ea:	89 dd                	mov    ebp,ebx
c00225ec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00225f4:	e9 5f ff ff ff       	jmp    c0022558 <__divdi3+0x30>
c00225f9:	8d 76 00             	lea    esi,[esi+0x0]
c00225fc:	31 f6                	xor    esi,esi
c00225fe:	31 c9                	xor    ecx,ecx
c0022600:	e9 7b ff ff ff       	jmp    c0022580 <__divdi3+0x58>
c0022605:	8d 76 00             	lea    esi,[esi+0x0]
c0022608:	b8 20 00 00 00       	mov    eax,0x20
c002260d:	29 f0                	sub    eax,esi
c002260f:	89 f1                	mov    ecx,esi
c0022611:	d3 e3                	shl    ebx,cl
c0022613:	89 fa                	mov    edx,edi
c0022615:	88 c1                	mov    cl,al
c0022617:	d3 ea                	shr    edx,cl
c0022619:	09 da                	or     edx,ebx
c002261b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002261f:	89 f1                	mov    ecx,esi
c0022621:	d3 e7                	shl    edi,cl
c0022623:	89 eb                	mov    ebx,ebp
c0022625:	88 c1                	mov    cl,al
c0022627:	d3 eb                	shr    ebx,cl
c0022629:	89 f1                	mov    ecx,esi
c002262b:	d3 e5                	shl    ebp,cl
c002262d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022630:	88 c1                	mov    cl,al
c0022632:	d3 ea                	shr    edx,cl
c0022634:	09 d5                	or     ebp,edx
c0022636:	89 e8                	mov    eax,ebp
c0022638:	89 da                	mov    edx,ebx
c002263a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002263e:	89 d3                	mov    ebx,edx
c0022640:	89 c5                	mov    ebp,eax
c0022642:	f7 e7                	mul    edi
c0022644:	39 d3                	cmp    ebx,edx
c0022646:	72 18                	jb     c0022660 <__divdi3+0x138>
c0022648:	74 0a                	je     c0022654 <__divdi3+0x12c>
c002264a:	89 e9                	mov    ecx,ebp
c002264c:	31 f6                	xor    esi,esi
c002264e:	e9 2d ff ff ff       	jmp    c0022580 <__divdi3+0x58>
c0022653:	90                   	nop
c0022654:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022657:	89 f1                	mov    ecx,esi
c0022659:	d3 e7                	shl    edi,cl
c002265b:	39 c7                	cmp    edi,eax
c002265d:	73 eb                	jae    c002264a <__divdi3+0x122>
c002265f:	90                   	nop
c0022660:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022663:	31 f6                	xor    esi,esi
c0022665:	e9 16 ff ff ff       	jmp    c0022580 <__divdi3+0x58>
c002266a:	66 90                	xchg   ax,ax
c002266c:	31 c9                	xor    ecx,ecx
c002266e:	e9 0d ff ff ff       	jmp    c0022580 <__divdi3+0x58>
c0022673:	90                   	nop

c0022674 <__moddi3>:
c0022674:	55                   	push   ebp
c0022675:	57                   	push   edi
c0022676:	56                   	push   esi
c0022677:	53                   	push   ebx
c0022678:	83 ec 2c             	sub    esp,0x2c
c002267b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002267f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022683:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022687:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002268b:	85 db                	test   ebx,ebx
c002268d:	0f 88 85 00 00 00    	js     c0022718 <__moddi3+0xa4>
c0022693:	89 de                	mov    esi,ebx
c0022695:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002269d:	89 d7                	mov    edi,edx
c002269f:	85 d2                	test   edx,edx
c00226a1:	79 09                	jns    c00226ac <__moddi3+0x38>
c00226a3:	f7 d8                	neg    eax
c00226a5:	83 d2 00             	adc    edx,0x0
c00226a8:	f7 da                	neg    edx
c00226aa:	89 d7                	mov    edi,edx
c00226ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00226b0:	89 cd                	mov    ebp,ecx
c00226b2:	85 ff                	test   edi,edi
c00226b4:	75 52                	jne    c0022708 <__moddi3+0x94>
c00226b6:	89 c3                	mov    ebx,eax
c00226b8:	39 f0                	cmp    eax,esi
c00226ba:	76 24                	jbe    c00226e0 <__moddi3+0x6c>
c00226bc:	89 c8                	mov    eax,ecx
c00226be:	89 f2                	mov    edx,esi
c00226c0:	f7 f3                	div    ebx
c00226c2:	89 d6                	mov    esi,edx
c00226c4:	89 f0                	mov    eax,esi
c00226c6:	31 d2                	xor    edx,edx
c00226c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00226cc:	85 c9                	test   ecx,ecx
c00226ce:	74 07                	je     c00226d7 <__moddi3+0x63>
c00226d0:	f7 d8                	neg    eax
c00226d2:	83 d2 00             	adc    edx,0x0
c00226d5:	f7 da                	neg    edx
c00226d7:	83 c4 2c             	add    esp,0x2c
c00226da:	5b                   	pop    ebx
c00226db:	5e                   	pop    esi
c00226dc:	5f                   	pop    edi
c00226dd:	5d                   	pop    ebp
c00226de:	c3                   	ret    
c00226df:	90                   	nop
c00226e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00226e4:	85 db                	test   ebx,ebx
c00226e6:	75 0d                	jne    c00226f5 <__moddi3+0x81>
c00226e8:	b8 01 00 00 00       	mov    eax,0x1
c00226ed:	31 d2                	xor    edx,edx
c00226ef:	f7 f7                	div    edi
c00226f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00226f5:	89 f0                	mov    eax,esi
c00226f7:	31 d2                	xor    edx,edx
c00226f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00226fd:	f7 f7                	div    edi
c00226ff:	89 e8                	mov    eax,ebp
c0022701:	f7 f7                	div    edi
c0022703:	89 d6                	mov    esi,edx
c0022705:	eb bd                	jmp    c00226c4 <__moddi3+0x50>
c0022707:	90                   	nop
c0022708:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002270c:	39 f7                	cmp    edi,esi
c002270e:	76 20                	jbe    c0022730 <__moddi3+0xbc>
c0022710:	89 c8                	mov    eax,ecx
c0022712:	89 f2                	mov    edx,esi
c0022714:	eb b2                	jmp    c00226c8 <__moddi3+0x54>
c0022716:	66 90                	xchg   ax,ax
c0022718:	f7 d9                	neg    ecx
c002271a:	83 d3 00             	adc    ebx,0x0
c002271d:	f7 db                	neg    ebx
c002271f:	89 de                	mov    esi,ebx
c0022721:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022729:	e9 6f ff ff ff       	jmp    c002269d <__moddi3+0x29>
c002272e:	66 90                	xchg   ax,ax
c0022730:	0f bd c7             	bsr    eax,edi
c0022733:	83 f0 1f             	xor    eax,0x1f
c0022736:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002273a:	75 24                	jne    c0022760 <__moddi3+0xec>
c002273c:	39 f7                	cmp    edi,esi
c002273e:	72 06                	jb     c0022746 <__moddi3+0xd2>
c0022740:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022744:	77 0c                	ja     c0022752 <__moddi3+0xde>
c0022746:	89 e9                	mov    ecx,ebp
c0022748:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002274c:	19 fe                	sbb    esi,edi
c002274e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022752:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022756:	89 f2                	mov    edx,esi
c0022758:	e9 6b ff ff ff       	jmp    c00226c8 <__moddi3+0x54>
c002275d:	8d 76 00             	lea    esi,[esi+0x0]
c0022760:	b8 20 00 00 00       	mov    eax,0x20
c0022765:	89 c2                	mov    edx,eax
c0022767:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002276b:	29 da                	sub    edx,ebx
c002276d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022771:	88 d9                	mov    cl,bl
c0022773:	d3 e7                	shl    edi,cl
c0022775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022779:	88 d1                	mov    cl,dl
c002277b:	d3 e8                	shr    eax,cl
c002277d:	09 c7                	or     edi,eax
c002277f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022783:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022787:	89 d8                	mov    eax,ebx
c0022789:	88 d9                	mov    cl,bl
c002278b:	d3 e7                	shl    edi,cl
c002278d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022791:	89 f3                	mov    ebx,esi
c0022793:	88 d1                	mov    cl,dl
c0022795:	d3 eb                	shr    ebx,cl
c0022797:	89 c7                	mov    edi,eax
c0022799:	88 c1                	mov    cl,al
c002279b:	d3 e6                	shl    esi,cl
c002279d:	89 e8                	mov    eax,ebp
c002279f:	88 d1                	mov    cl,dl
c00227a1:	d3 e8                	shr    eax,cl
c00227a3:	09 f0                	or     eax,esi
c00227a5:	89 f9                	mov    ecx,edi
c00227a7:	d3 e5                	shl    ebp,cl
c00227a9:	89 da                	mov    edx,ebx
c00227ab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00227af:	89 d3                	mov    ebx,edx
c00227b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00227b5:	89 c6                	mov    esi,eax
c00227b7:	89 d1                	mov    ecx,edx
c00227b9:	39 d3                	cmp    ebx,edx
c00227bb:	72 27                	jb     c00227e4 <__moddi3+0x170>
c00227bd:	74 21                	je     c00227e0 <__moddi3+0x16c>
c00227bf:	29 f5                	sub    ebp,esi
c00227c1:	19 cb                	sbb    ebx,ecx
c00227c3:	89 de                	mov    esi,ebx
c00227c5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00227c9:	d3 e6                	shl    esi,cl
c00227cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00227cf:	89 f9                	mov    ecx,edi
c00227d1:	d3 ed                	shr    ebp,cl
c00227d3:	09 ee                	or     esi,ebp
c00227d5:	89 f0                	mov    eax,esi
c00227d7:	d3 eb                	shr    ebx,cl
c00227d9:	89 da                	mov    edx,ebx
c00227db:	e9 e8 fe ff ff       	jmp    c00226c8 <__moddi3+0x54>
c00227e0:	39 c5                	cmp    ebp,eax
c00227e2:	73 db                	jae    c00227bf <__moddi3+0x14b>
c00227e4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00227e8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00227ec:	89 d1                	mov    ecx,edx
c00227ee:	89 c6                	mov    esi,eax
c00227f0:	eb cd                	jmp    c00227bf <__moddi3+0x14b>
c00227f2:	66 90                	xchg   ax,ax

c00227f4 <__udivdi3>:
c00227f4:	55                   	push   ebp
c00227f5:	57                   	push   edi
c00227f6:	56                   	push   esi
c00227f7:	53                   	push   ebx
c00227f8:	83 ec 1c             	sub    esp,0x1c
c00227fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00227ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022803:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022807:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002280b:	85 d2                	test   edx,edx
c002280d:	75 41                	jne    c0022850 <__udivdi3+0x5c>
c002280f:	39 f7                	cmp    edi,esi
c0022811:	76 15                	jbe    c0022828 <__udivdi3+0x34>
c0022813:	89 e8                	mov    eax,ebp
c0022815:	89 f2                	mov    edx,esi
c0022817:	f7 f7                	div    edi
c0022819:	31 db                	xor    ebx,ebx
c002281b:	89 da                	mov    edx,ebx
c002281d:	83 c4 1c             	add    esp,0x1c
c0022820:	5b                   	pop    ebx
c0022821:	5e                   	pop    esi
c0022822:	5f                   	pop    edi
c0022823:	5d                   	pop    ebp
c0022824:	c3                   	ret    
c0022825:	8d 76 00             	lea    esi,[esi+0x0]
c0022828:	89 f9                	mov    ecx,edi
c002282a:	85 ff                	test   edi,edi
c002282c:	75 0b                	jne    c0022839 <__udivdi3+0x45>
c002282e:	b8 01 00 00 00       	mov    eax,0x1
c0022833:	31 d2                	xor    edx,edx
c0022835:	f7 f7                	div    edi
c0022837:	89 c1                	mov    ecx,eax
c0022839:	31 d2                	xor    edx,edx
c002283b:	89 f0                	mov    eax,esi
c002283d:	f7 f1                	div    ecx
c002283f:	89 c3                	mov    ebx,eax
c0022841:	89 e8                	mov    eax,ebp
c0022843:	f7 f1                	div    ecx
c0022845:	89 da                	mov    edx,ebx
c0022847:	83 c4 1c             	add    esp,0x1c
c002284a:	5b                   	pop    ebx
c002284b:	5e                   	pop    esi
c002284c:	5f                   	pop    edi
c002284d:	5d                   	pop    ebp
c002284e:	c3                   	ret    
c002284f:	90                   	nop
c0022850:	39 f2                	cmp    edx,esi
c0022852:	77 1c                	ja     c0022870 <__udivdi3+0x7c>
c0022854:	0f bd da             	bsr    ebx,edx
c0022857:	83 f3 1f             	xor    ebx,0x1f
c002285a:	75 24                	jne    c0022880 <__udivdi3+0x8c>
c002285c:	39 f2                	cmp    edx,esi
c002285e:	72 08                	jb     c0022868 <__udivdi3+0x74>
c0022860:	39 ef                	cmp    edi,ebp
c0022862:	0f 87 84 00 00 00    	ja     c00228ec <__udivdi3+0xf8>
c0022868:	b8 01 00 00 00       	mov    eax,0x1
c002286d:	eb ac                	jmp    c002281b <__udivdi3+0x27>
c002286f:	90                   	nop
c0022870:	31 db                	xor    ebx,ebx
c0022872:	31 c0                	xor    eax,eax
c0022874:	89 da                	mov    edx,ebx
c0022876:	83 c4 1c             	add    esp,0x1c
c0022879:	5b                   	pop    ebx
c002287a:	5e                   	pop    esi
c002287b:	5f                   	pop    edi
c002287c:	5d                   	pop    ebp
c002287d:	c3                   	ret    
c002287e:	66 90                	xchg   ax,ax
c0022880:	b8 20 00 00 00       	mov    eax,0x20
c0022885:	29 d8                	sub    eax,ebx
c0022887:	88 d9                	mov    cl,bl
c0022889:	d3 e2                	shl    edx,cl
c002288b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002288f:	89 fa                	mov    edx,edi
c0022891:	88 c1                	mov    cl,al
c0022893:	d3 ea                	shr    edx,cl
c0022895:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022899:	09 d1                	or     ecx,edx
c002289b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002289f:	88 d9                	mov    cl,bl
c00228a1:	d3 e7                	shl    edi,cl
c00228a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00228a7:	89 f7                	mov    edi,esi
c00228a9:	88 c1                	mov    cl,al
c00228ab:	d3 ef                	shr    edi,cl
c00228ad:	88 d9                	mov    cl,bl
c00228af:	d3 e6                	shl    esi,cl
c00228b1:	89 ea                	mov    edx,ebp
c00228b3:	88 c1                	mov    cl,al
c00228b5:	d3 ea                	shr    edx,cl
c00228b7:	09 d6                	or     esi,edx
c00228b9:	89 f0                	mov    eax,esi
c00228bb:	89 fa                	mov    edx,edi
c00228bd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00228c1:	89 d7                	mov    edi,edx
c00228c3:	89 c6                	mov    esi,eax
c00228c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00228c9:	39 d7                	cmp    edi,edx
c00228cb:	72 13                	jb     c00228e0 <__udivdi3+0xec>
c00228cd:	74 09                	je     c00228d8 <__udivdi3+0xe4>
c00228cf:	89 f0                	mov    eax,esi
c00228d1:	31 db                	xor    ebx,ebx
c00228d3:	e9 43 ff ff ff       	jmp    c002281b <__udivdi3+0x27>
c00228d8:	88 d9                	mov    cl,bl
c00228da:	d3 e5                	shl    ebp,cl
c00228dc:	39 c5                	cmp    ebp,eax
c00228de:	73 ef                	jae    c00228cf <__udivdi3+0xdb>
c00228e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00228e3:	31 db                	xor    ebx,ebx
c00228e5:	e9 31 ff ff ff       	jmp    c002281b <__udivdi3+0x27>
c00228ea:	66 90                	xchg   ax,ax
c00228ec:	31 c0                	xor    eax,eax
c00228ee:	e9 28 ff ff ff       	jmp    c002281b <__udivdi3+0x27>
c00228f3:	90                   	nop

c00228f4 <__umoddi3>:
c00228f4:	55                   	push   ebp
c00228f5:	57                   	push   edi
c00228f6:	56                   	push   esi
c00228f7:	53                   	push   ebx
c00228f8:	83 ec 1c             	sub    esp,0x1c
c00228fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00228ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022903:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022907:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002290b:	89 da                	mov    edx,ebx
c002290d:	85 c0                	test   eax,eax
c002290f:	75 37                	jne    c0022948 <__umoddi3+0x54>
c0022911:	39 df                	cmp    edi,ebx
c0022913:	76 13                	jbe    c0022928 <__umoddi3+0x34>
c0022915:	89 f0                	mov    eax,esi
c0022917:	f7 f7                	div    edi
c0022919:	89 d0                	mov    eax,edx
c002291b:	31 d2                	xor    edx,edx
c002291d:	83 c4 1c             	add    esp,0x1c
c0022920:	5b                   	pop    ebx
c0022921:	5e                   	pop    esi
c0022922:	5f                   	pop    edi
c0022923:	5d                   	pop    ebp
c0022924:	c3                   	ret    
c0022925:	8d 76 00             	lea    esi,[esi+0x0]
c0022928:	89 fd                	mov    ebp,edi
c002292a:	85 ff                	test   edi,edi
c002292c:	75 0b                	jne    c0022939 <__umoddi3+0x45>
c002292e:	b8 01 00 00 00       	mov    eax,0x1
c0022933:	31 d2                	xor    edx,edx
c0022935:	f7 f7                	div    edi
c0022937:	89 c5                	mov    ebp,eax
c0022939:	89 d8                	mov    eax,ebx
c002293b:	31 d2                	xor    edx,edx
c002293d:	f7 f5                	div    ebp
c002293f:	89 f0                	mov    eax,esi
c0022941:	f7 f5                	div    ebp
c0022943:	89 d0                	mov    eax,edx
c0022945:	eb d4                	jmp    c002291b <__umoddi3+0x27>
c0022947:	90                   	nop
c0022948:	89 f1                	mov    ecx,esi
c002294a:	39 d8                	cmp    eax,ebx
c002294c:	76 0a                	jbe    c0022958 <__umoddi3+0x64>
c002294e:	89 f0                	mov    eax,esi
c0022950:	83 c4 1c             	add    esp,0x1c
c0022953:	5b                   	pop    ebx
c0022954:	5e                   	pop    esi
c0022955:	5f                   	pop    edi
c0022956:	5d                   	pop    ebp
c0022957:	c3                   	ret    
c0022958:	0f bd e8             	bsr    ebp,eax
c002295b:	83 f5 1f             	xor    ebp,0x1f
c002295e:	75 1c                	jne    c002297c <__umoddi3+0x88>
c0022960:	39 d8                	cmp    eax,ebx
c0022962:	72 04                	jb     c0022968 <__umoddi3+0x74>
c0022964:	39 f7                	cmp    edi,esi
c0022966:	77 08                	ja     c0022970 <__umoddi3+0x7c>
c0022968:	89 da                	mov    edx,ebx
c002296a:	29 fe                	sub    esi,edi
c002296c:	19 c2                	sbb    edx,eax
c002296e:	89 f1                	mov    ecx,esi
c0022970:	89 c8                	mov    eax,ecx
c0022972:	83 c4 1c             	add    esp,0x1c
c0022975:	5b                   	pop    ebx
c0022976:	5e                   	pop    esi
c0022977:	5f                   	pop    edi
c0022978:	5d                   	pop    ebp
c0022979:	c3                   	ret    
c002297a:	66 90                	xchg   ax,ax
c002297c:	ba 20 00 00 00       	mov    edx,0x20
c0022981:	29 ea                	sub    edx,ebp
c0022983:	89 e9                	mov    ecx,ebp
c0022985:	d3 e0                	shl    eax,cl
c0022987:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002298b:	89 f8                	mov    eax,edi
c002298d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022991:	88 d1                	mov    cl,dl
c0022993:	d3 e8                	shr    eax,cl
c0022995:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022999:	09 c1                	or     ecx,eax
c002299b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002299f:	89 e9                	mov    ecx,ebp
c00229a1:	d3 e7                	shl    edi,cl
c00229a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00229a7:	89 d8                	mov    eax,ebx
c00229a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00229ad:	88 d1                	mov    cl,dl
c00229af:	d3 e8                	shr    eax,cl
c00229b1:	89 c7                	mov    edi,eax
c00229b3:	89 e9                	mov    ecx,ebp
c00229b5:	d3 e3                	shl    ebx,cl
c00229b7:	89 f0                	mov    eax,esi
c00229b9:	88 d1                	mov    cl,dl
c00229bb:	d3 e8                	shr    eax,cl
c00229bd:	09 d8                	or     eax,ebx
c00229bf:	89 e9                	mov    ecx,ebp
c00229c1:	d3 e6                	shl    esi,cl
c00229c3:	89 f3                	mov    ebx,esi
c00229c5:	89 fa                	mov    edx,edi
c00229c7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00229cb:	89 d1                	mov    ecx,edx
c00229cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00229d1:	89 c6                	mov    esi,eax
c00229d3:	89 d7                	mov    edi,edx
c00229d5:	39 d1                	cmp    ecx,edx
c00229d7:	72 27                	jb     c0022a00 <__umoddi3+0x10c>
c00229d9:	74 21                	je     c00229fc <__umoddi3+0x108>
c00229db:	89 ca                	mov    edx,ecx
c00229dd:	29 f3                	sub    ebx,esi
c00229df:	19 fa                	sbb    edx,edi
c00229e1:	89 d0                	mov    eax,edx
c00229e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00229e7:	d3 e0                	shl    eax,cl
c00229e9:	89 e9                	mov    ecx,ebp
c00229eb:	d3 eb                	shr    ebx,cl
c00229ed:	09 d8                	or     eax,ebx
c00229ef:	d3 ea                	shr    edx,cl
c00229f1:	83 c4 1c             	add    esp,0x1c
c00229f4:	5b                   	pop    ebx
c00229f5:	5e                   	pop    esi
c00229f6:	5f                   	pop    edi
c00229f7:	5d                   	pop    ebp
c00229f8:	c3                   	ret    
c00229f9:	8d 76 00             	lea    esi,[esi+0x0]
c00229fc:	39 c3                	cmp    ebx,eax
c00229fe:	73 db                	jae    c00229db <__umoddi3+0xe7>
c0022a00:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022a04:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0022a08:	89 d7                	mov    edi,edx
c0022a0a:	89 c6                	mov    esi,eax
c0022a0c:	eb cd                	jmp    c00229db <__umoddi3+0xe7>

Disassembly of section .init:

c0022a0e <_init>:
c0022a0e:	55                   	push   ebp
c0022a0f:	89 e5                	mov    ebp,esp
c0022a11:	e8 02 d7 fd ff       	call   c0000118 <frame_dummy>
c0022a16:	e8 e5 fa ff ff       	call   c0022500 <__do_global_ctors_aux>
c0022a1b:	5d                   	pop    ebp
c0022a1c:	c3                   	ret    

Disassembly of section .fini:

c0022a1d <_fini>:
c0022a1d:	55                   	push   ebp
c0022a1e:	89 e5                	mov    ebp,esp
c0022a20:	e8 83 d6 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022a25:	5d                   	pop    ebp
c0022a26:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022a28 <Computer::~Computer()>:
c0022a28:	83 ec 0c             	sub    esp,0xc
c0022a2b:	ba 54 40 02 c0       	mov    edx,0xc0024054
c0022a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a34:	89 10                	mov    DWORD PTR [eax],edx
c0022a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a3a:	83 ec 0c             	sub    esp,0xc
c0022a3d:	50                   	push   eax
c0022a3e:	e8 c9 b6 fe ff       	call   c000e10c <Device::~Device()>
c0022a43:	83 c4 10             	add    esp,0x10
c0022a46:	90                   	nop
c0022a47:	83 c4 0c             	add    esp,0xc
c0022a4a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0022a4c <Computer::~Computer()>:
c0022a4c:	83 ec 0c             	sub    esp,0xc
c0022a4f:	83 ec 0c             	sub    esp,0xc
c0022a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a56:	e8 cd ff ff ff       	call   c0022a28 <Computer::~Computer()>
c0022a5b:	83 c4 10             	add    esp,0x10
c0022a5e:	83 ec 08             	sub    esp,0x8
c0022a61:	68 ec 01 00 00       	push   0x1ec
c0022a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a6a:	e8 af a1 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022a6f:	83 c4 10             	add    esp,0x10
c0022a72:	83 c4 0c             	add    esp,0xc
c0022a75:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022a76 <idleCommon()>:
c0022a76:	83 ec 0c             	sub    esp,0xc
c0022a79:	fa                   	cli    
c0022a7a:	ff 05 08 96 02 c0    	inc    DWORD PTR ds:0xc0029608
c0022a80:	e8 a7 5c ff ff       	call   c001872c <schedule()>
c0022a85:	a1 08 96 02 c0       	mov    eax,ds:0xc0029608
c0022a8a:	48                   	dec    eax
c0022a8b:	a3 08 96 02 c0       	mov    ds:0xc0029608,eax
c0022a90:	75 01                	jne    c0022a93 <idleCommon()+0x1d>
c0022a92:	fb                   	sti    
c0022a93:	83 c4 0c             	add    esp,0xc
c0022a96:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022a98 <LinkedList<UnixFile>::~LinkedList()>:
c0022a98:	90                   	nop
c0022a99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022a9a <LinkedList<UnixFile>::LinkedList()>:
c0022a9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a9e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022aa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aa8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022aaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ab3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022abe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ac8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022acf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022ada:	90                   	nop
c0022adb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0022adc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0022adc:	83 ec 0c             	sub    esp,0xc
c0022adf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022ae4:	75 10                	jne    c0022af6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022ae6:	83 ec 0c             	sub    esp,0xc
c0022ae9:	68 20 44 02 c0       	push   0xc0024420
c0022aee:	e8 d4 1e ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022af3:	83 c4 10             	add    esp,0x10
c0022af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022afa:	8b 00                	mov    eax,DWORD PTR [eax]
c0022afc:	85 c0                	test   eax,eax
c0022afe:	74 34                	je     c0022b34 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b07:	85 c0                	test   eax,eax
c0022b09:	74 29                	je     c0022b34 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022b0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b1d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b21:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b2b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022b32:	eb 65                	jmp    c0022b99 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b3a:	85 c0                	test   eax,eax
c0022b3c:	75 4b                	jne    c0022b89 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b45:	85 c0                	test   eax,eax
c0022b47:	75 40                	jne    c0022b89 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b4d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b51:	89 10                	mov    DWORD PTR [eax],edx
c0022b53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b5b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b65:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b73:	85 c0                	test   eax,eax
c0022b75:	74 22                	je     c0022b99 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b77:	83 ec 0c             	sub    esp,0xc
c0022b7a:	68 42 44 02 c0       	push   0xc0024442
c0022b7f:	e8 43 1e ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022b84:	83 c4 10             	add    esp,0x10
c0022b87:	eb 10                	jmp    c0022b99 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022b89:	83 ec 0c             	sub    esp,0xc
c0022b8c:	68 4c 44 02 c0       	push   0xc002444c
c0022b91:	e8 31 1e ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022b96:	83 c4 10             	add    esp,0x10
c0022b99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b9d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ba0:	8d 50 01             	lea    edx,[eax+0x1]
c0022ba3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022baa:	90                   	nop
c0022bab:	83 c4 0c             	add    esp,0xc
c0022bae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022bb0 <LinkedList<UnixFile>::getFirstElement()>:
c0022bb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bb6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022bb8 <LinkedList<UnixFile>::removeFirst()>:
c0022bb8:	83 ec 0c             	sub    esp,0xc
c0022bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bc1:	85 c0                	test   eax,eax
c0022bc3:	75 12                	jne    c0022bd7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022bc5:	83 ec 0c             	sub    esp,0xc
c0022bc8:	68 58 44 02 c0       	push   0xc0024458
c0022bcd:	e8 f5 1d ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022bd2:	83 c4 10             	add    esp,0x10
c0022bd5:	eb 7e                	jmp    c0022c55 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bdb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bde:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022be1:	85 c0                	test   eax,eax
c0022be3:	74 10                	je     c0022bf5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022be5:	83 ec 0c             	sub    esp,0xc
c0022be8:	68 a3 44 02 c0       	push   0xc00244a3
c0022bed:	e8 d5 1d ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022bf2:	83 c4 10             	add    esp,0x10
c0022bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bfb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bfe:	85 c0                	test   eax,eax
c0022c00:	75 33                	jne    c0022c35 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c06:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c10:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c1b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c1e:	83 f8 01             	cmp    eax,0x1
c0022c21:	74 21                	je     c0022c44 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022c23:	83 ec 0c             	sub    esp,0xc
c0022c26:	68 7c 44 02 c0       	push   0xc002447c
c0022c2b:	e8 97 1d ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022c30:	83 c4 10             	add    esp,0x10
c0022c33:	eb 0f                	jmp    c0022c44 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c39:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c3b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c42:	89 10                	mov    DWORD PTR [eax],edx
c0022c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c4b:	8d 50 ff             	lea    edx,[eax-0x1]
c0022c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c55:	83 c4 0c             	add    esp,0xc
c0022c58:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022c5a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022c5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c5e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c61:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022c62 <DriverlessDevice::~DriverlessDevice()>:
c0022c62:	ba bc 4c 02 c0       	mov    edx,0xc0024cbc
c0022c67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c6b:	89 10                	mov    DWORD PTR [eax],edx
c0022c6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c71:	50                   	push   eax
c0022c72:	e8 95 b4 fe ff       	call   c000e10c <Device::~Device()>
c0022c77:	83 c4 04             	add    esp,0x4
c0022c7a:	90                   	nop
c0022c7b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022c7c <DriverlessDevice::~DriverlessDevice()>:
c0022c7c:	83 ec 0c             	sub    esp,0xc
c0022c7f:	83 ec 0c             	sub    esp,0xc
c0022c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c86:	e8 d7 ff ff ff       	call   c0022c62 <DriverlessDevice::~DriverlessDevice()>
c0022c8b:	83 c4 10             	add    esp,0x10
c0022c8e:	83 ec 08             	sub    esp,0x8
c0022c91:	68 58 01 00 00       	push   0x158
c0022c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c9a:	e8 7f 9f fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022c9f:	83 c4 10             	add    esp,0x10
c0022ca2:	83 c4 0c             	add    esp,0xc
c0022ca5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022ca6 <LinkedList<Device>::addElement(Device*)>:
c0022ca6:	83 ec 0c             	sub    esp,0xc
c0022ca9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022cae:	75 10                	jne    c0022cc0 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022cb0:	83 ec 0c             	sub    esp,0xc
c0022cb3:	68 20 44 02 c0       	push   0xc0024420
c0022cb8:	e8 0a 1d ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022cbd:	83 c4 10             	add    esp,0x10
c0022cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cc6:	85 c0                	test   eax,eax
c0022cc8:	74 3a                	je     c0022d04 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cd1:	85 c0                	test   eax,eax
c0022cd3:	74 2f                	je     c0022d04 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cdc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ce0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022cee:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cf8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022d02:	eb 68                	jmp    c0022d6c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d08:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d0a:	85 c0                	test   eax,eax
c0022d0c:	75 4e                	jne    c0022d5c <LinkedList<Device>::addElement(Device*)+0xb6>
c0022d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d15:	85 c0                	test   eax,eax
c0022d17:	75 43                	jne    c0022d5c <LinkedList<Device>::addElement(Device*)+0xb6>
c0022d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d1d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d21:	89 10                	mov    DWORD PTR [eax],edx
c0022d23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d27:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d2b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d35:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d46:	85 c0                	test   eax,eax
c0022d48:	74 22                	je     c0022d6c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022d4a:	83 ec 0c             	sub    esp,0xc
c0022d4d:	68 42 44 02 c0       	push   0xc0024442
c0022d52:	e8 70 1c ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022d57:	83 c4 10             	add    esp,0x10
c0022d5a:	eb 10                	jmp    c0022d6c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022d5c:	83 ec 0c             	sub    esp,0xc
c0022d5f:	68 4c 44 02 c0       	push   0xc002444c
c0022d64:	e8 5e 1c ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022d69:	83 c4 10             	add    esp,0x10
c0022d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d70:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d73:	8d 50 01             	lea    edx,[eax+0x1]
c0022d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d7a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d7d:	90                   	nop
c0022d7e:	83 c4 0c             	add    esp,0xc
c0022d81:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022d82 <LinkedList<Device>::LinkedList()>:
c0022d82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d86:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022d8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d90:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022d97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d9b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022da6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022db0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dbb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022dc2:	90                   	nop
c0022dc3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022dc4 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022dca:	85 c0                	test   eax,eax
c0022dcc:	75 0e                	jne    c0022ddc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022dce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022dd5:	85 c0                	test   eax,eax
c0022dd7:	75 03                	jne    c0022ddc <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022dd9:	b0 01                	mov    al,0x1
c0022ddb:	c3                   	ret    
c0022ddc:	b0 00                	mov    al,0x0
c0022dde:	90                   	nop
c0022ddf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022de0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022de4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022de6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022de8 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022de8:	83 ec 0c             	sub    esp,0xc
c0022deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022def:	8b 00                	mov    eax,DWORD PTR [eax]
c0022df1:	85 c0                	test   eax,eax
c0022df3:	75 17                	jne    c0022e0c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022df5:	83 ec 0c             	sub    esp,0xc
c0022df8:	68 58 44 02 c0       	push   0xc0024458
c0022dfd:	e8 c5 1b ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022e02:	83 c4 10             	add    esp,0x10
c0022e05:	e9 92 00 00 00       	jmp    c0022e9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022e0a:	66 90                	xchg   ax,ax
c0022e0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e13:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022e16:	85 c0                	test   eax,eax
c0022e18:	0f 95 c0             	setne  al
c0022e1b:	84 c0                	test   al,al
c0022e1d:	74 11                	je     c0022e30 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022e1f:	83 ec 0c             	sub    esp,0xc
c0022e22:	68 a3 44 02 c0       	push   0xc00244a3
c0022e27:	e8 9b 1b ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022e2c:	83 c4 10             	add    esp,0x10
c0022e2f:	90                   	nop
c0022e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e36:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022e39:	85 c0                	test   eax,eax
c0022e3b:	0f 94 c0             	sete   al
c0022e3e:	84 c0                	test   al,al
c0022e40:	74 36                	je     c0022e78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e46:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e5b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e5e:	83 f8 01             	cmp    eax,0x1
c0022e61:	74 25                	je     c0022e88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022e63:	83 ec 0c             	sub    esp,0xc
c0022e66:	68 7c 44 02 c0       	push   0xc002447c
c0022e6b:	e8 57 1b ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022e70:	83 c4 10             	add    esp,0x10
c0022e73:	eb 13                	jmp    c0022e88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022e75:	8d 76 00             	lea    esi,[esi+0x0]
c0022e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e7e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022e81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e85:	89 10                	mov    DWORD PTR [eax],edx
c0022e87:	90                   	nop
c0022e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e8f:	8d 50 ff             	lea    edx,[eax-0x1]
c0022e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e96:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022e99:	8d 76 00             	lea    esi,[esi+0x0]
c0022e9c:	83 c4 0c             	add    esp,0xc
c0022e9f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022ea0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022ea0:	83 ec 0c             	sub    esp,0xc
c0022ea3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022ea8:	75 12                	jne    c0022ebc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022eaa:	83 ec 0c             	sub    esp,0xc
c0022ead:	68 20 44 02 c0       	push   0xc0024420
c0022eb2:	e8 10 1b ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022eb7:	83 c4 10             	add    esp,0x10
c0022eba:	66 90                	xchg   ax,ax
c0022ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ec0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ec2:	85 c0                	test   eax,eax
c0022ec4:	74 36                	je     c0022efc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ecd:	85 c0                	test   eax,eax
c0022ecf:	74 2b                	je     c0022efc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022ed1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ed8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022edc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022ee7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ef1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022ef8:	eb 6a                	jmp    c0022f64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022efa:	66 90                	xchg   ax,ax
c0022efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f00:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f02:	85 c0                	test   eax,eax
c0022f04:	75 4e                	jne    c0022f54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f0d:	85 c0                	test   eax,eax
c0022f0f:	75 43                	jne    c0022f54 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f15:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022f19:	89 10                	mov    DWORD PTR [eax],edx
c0022f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022f23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022f2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f3b:	85 c0                	test   eax,eax
c0022f3d:	74 25                	je     c0022f64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022f3f:	83 ec 0c             	sub    esp,0xc
c0022f42:	68 42 44 02 c0       	push   0xc0024442
c0022f47:	e8 7b 1a ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022f4c:	83 c4 10             	add    esp,0x10
c0022f4f:	eb 13                	jmp    c0022f64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022f51:	8d 76 00             	lea    esi,[esi+0x0]
c0022f54:	83 ec 0c             	sub    esp,0xc
c0022f57:	68 4c 44 02 c0       	push   0xc002444c
c0022f5c:	e8 66 1a ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0022f61:	83 c4 10             	add    esp,0x10
c0022f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f6b:	8d 50 01             	lea    edx,[eax+0x1]
c0022f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f72:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022f75:	90                   	nop
c0022f76:	83 c4 0c             	add    esp,0xc
c0022f79:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022f7c <ACPI::~ACPI()>:
c0022f7c:	83 ec 0c             	sub    esp,0xc
c0022f7f:	ba 44 57 02 c0       	mov    edx,0xc0025744
c0022f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f88:	89 10                	mov    DWORD PTR [eax],edx
c0022f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f8e:	83 ec 0c             	sub    esp,0xc
c0022f91:	50                   	push   eax
c0022f92:	e8 75 b1 fe ff       	call   c000e10c <Device::~Device()>
c0022f97:	83 c4 10             	add    esp,0x10
c0022f9a:	90                   	nop
c0022f9b:	83 c4 0c             	add    esp,0xc
c0022f9e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022fa0 <ACPI::~ACPI()>:
c0022fa0:	83 ec 0c             	sub    esp,0xc
c0022fa3:	83 ec 0c             	sub    esp,0xc
c0022fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022faa:	e8 cd ff ff ff       	call   c0022f7c <ACPI::~ACPI()>
c0022faf:	83 c4 10             	add    esp,0x10
c0022fb2:	83 ec 08             	sub    esp,0x8
c0022fb5:	68 64 12 00 00       	push   0x1264
c0022fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022fbe:	e8 5b 9c fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0022fc3:	83 c4 10             	add    esp,0x10
c0022fc6:	83 c4 0c             	add    esp,0xc
c0022fc9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022fcc <LinkedList<Device>::~LinkedList()>:
c0022fcc:	90                   	nop
c0022fcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022fd0 <LinkedList<Device>::isEmpty()>:
c0022fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fd6:	85 c0                	test   eax,eax
c0022fd8:	75 0e                	jne    c0022fe8 <LinkedList<Device>::isEmpty()+0x18>
c0022fda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022fe1:	85 c0                	test   eax,eax
c0022fe3:	75 03                	jne    c0022fe8 <LinkedList<Device>::isEmpty()+0x18>
c0022fe5:	b0 01                	mov    al,0x1
c0022fe7:	c3                   	ret    
c0022fe8:	b0 00                	mov    al,0x0
c0022fea:	90                   	nop
c0022feb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022fec <LinkedList<Device>::getFirstElement()>:
c0022fec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ff0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ff2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022ff4 <LinkedList<Device>::removeFirst()>:
c0022ff4:	83 ec 0c             	sub    esp,0xc
c0022ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ffd:	85 c0                	test   eax,eax
c0022fff:	75 17                	jne    c0023018 <LinkedList<Device>::removeFirst()+0x24>
c0023001:	83 ec 0c             	sub    esp,0xc
c0023004:	68 58 44 02 c0       	push   0xc0024458
c0023009:	e8 b9 19 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c002300e:	83 c4 10             	add    esp,0x10
c0023011:	e9 92 00 00 00       	jmp    c00230a8 <LinkedList<Device>::removeFirst()+0xb4>
c0023016:	66 90                	xchg   ax,ax
c0023018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002301c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002301f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023025:	85 c0                	test   eax,eax
c0023027:	74 13                	je     c002303c <LinkedList<Device>::removeFirst()+0x48>
c0023029:	83 ec 0c             	sub    esp,0xc
c002302c:	68 a3 44 02 c0       	push   0xc00244a3
c0023031:	e8 91 19 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c0023036:	83 c4 10             	add    esp,0x10
c0023039:	8d 76 00             	lea    esi,[esi+0x0]
c002303c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023040:	8b 00                	mov    eax,DWORD PTR [eax]
c0023042:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0023048:	85 c0                	test   eax,eax
c002304a:	75 34                	jne    c0023080 <LinkedList<Device>::removeFirst()+0x8c>
c002304c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023050:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002305a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023065:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023068:	83 f8 01             	cmp    eax,0x1
c002306b:	74 27                	je     c0023094 <LinkedList<Device>::removeFirst()+0xa0>
c002306d:	83 ec 0c             	sub    esp,0xc
c0023070:	68 7c 44 02 c0       	push   0xc002447c
c0023075:	e8 4d 19 ff ff       	call   c00149c7 <Krnl::panic(char const*)>
c002307a:	83 c4 10             	add    esp,0x10
c002307d:	eb 15                	jmp    c0023094 <LinkedList<Device>::removeFirst()+0xa0>
c002307f:	90                   	nop
c0023080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023084:	8b 00                	mov    eax,DWORD PTR [eax]
c0023086:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002308c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023090:	89 10                	mov    DWORD PTR [eax],edx
c0023092:	66 90                	xchg   ax,ax
c0023094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023098:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002309b:	8d 50 ff             	lea    edx,[eax-0x1]
c002309e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00230a5:	8d 76 00             	lea    esi,[esi+0x0]
c00230a8:	83 c4 0c             	add    esp,0xc
c00230ab:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00230ac <CPU::~CPU()>:
c00230ac:	83 ec 0c             	sub    esp,0xc
c00230af:	ba 20 5b 02 c0       	mov    edx,0xc0025b20
c00230b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230b8:	89 10                	mov    DWORD PTR [eax],edx
c00230ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230be:	83 ec 0c             	sub    esp,0xc
c00230c1:	50                   	push   eax
c00230c2:	e8 45 b0 fe ff       	call   c000e10c <Device::~Device()>
c00230c7:	83 c4 10             	add    esp,0x10
c00230ca:	90                   	nop
c00230cb:	83 c4 0c             	add    esp,0xc
c00230ce:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00230d0 <CPU::~CPU()>:
c00230d0:	83 ec 0c             	sub    esp,0xc
c00230d3:	83 ec 0c             	sub    esp,0xc
c00230d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230da:	e8 cd ff ff ff       	call   c00230ac <CPU::~CPU()>
c00230df:	83 c4 10             	add    esp,0x10
c00230e2:	83 ec 08             	sub    esp,0x8
c00230e5:	68 98 11 00 00       	push   0x1198
c00230ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230ee:	e8 2b 9b fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00230f3:	83 c4 10             	add    esp,0x10
c00230f6:	83 c4 0c             	add    esp,0xc
c00230f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00230fc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00230fc:	90                   	nop
c00230fd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0023100 <ThreadControlBlock::ThreadControlBlock()>:
c0023100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023104:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002310b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002310f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0023116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002311a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0023121:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023125:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002312c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023130:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0023137:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002313b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002313f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023143:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0023147:	90                   	nop
c0023148:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002314c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002314c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023150:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002315a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023161:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023165:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002316c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023170:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002317a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023181:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023185:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002318c:	90                   	nop
c002318d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0023190 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0023190:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023194:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023197:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023198 <Vm::_FPUState::_FPUState()>:
c0023198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002319c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00231a3:	90                   	nop
c00231a4:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00231a6 <PCI::~PCI()>:
c00231a6:	83 ec 0c             	sub    esp,0xc
c00231a9:	ba 28 69 02 c0       	mov    edx,0xc0026928
c00231ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231b2:	89 10                	mov    DWORD PTR [eax],edx
c00231b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231b8:	83 ec 0c             	sub    esp,0xc
c00231bb:	50                   	push   eax
c00231bc:	e8 1b a9 fe ff       	call   c000dadc <Bus::~Bus()>
c00231c1:	83 c4 10             	add    esp,0x10
c00231c4:	90                   	nop
c00231c5:	83 c4 0c             	add    esp,0xc
c00231c8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00231ca <PCI::~PCI()>:
c00231ca:	83 ec 0c             	sub    esp,0xc
c00231cd:	83 ec 0c             	sub    esp,0xc
c00231d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231d4:	e8 cd ff ff ff       	call   c00231a6 <PCI::~PCI()>
c00231d9:	83 c4 10             	add    esp,0x10
c00231dc:	83 ec 08             	sub    esp,0x8
c00231df:	68 5c 01 00 00       	push   0x15c
c00231e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231e8:	e8 31 9a fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00231ed:	83 c4 10             	add    esp,0x10
c00231f0:	83 c4 0c             	add    esp,0xc
c00231f3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00231f4 <IDE::~IDE()>:
c00231f4:	83 ec 0c             	sub    esp,0xc
c00231f7:	ba dc 69 02 c0       	mov    edx,0xc00269dc
c00231fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023200:	89 10                	mov    DWORD PTR [eax],edx
c0023202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023206:	83 ec 0c             	sub    esp,0xc
c0023209:	50                   	push   eax
c002320a:	e8 15 b4 fe ff       	call   c000e624 <HardDiskController::~HardDiskController()>
c002320f:	83 c4 10             	add    esp,0x10
c0023212:	90                   	nop
c0023213:	83 c4 0c             	add    esp,0xc
c0023216:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023218 <IDE::~IDE()>:
c0023218:	83 ec 0c             	sub    esp,0xc
c002321b:	83 ec 0c             	sub    esp,0xc
c002321e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023222:	e8 cd ff ff ff       	call   c00231f4 <IDE::~IDE()>
c0023227:	83 c4 10             	add    esp,0x10
c002322a:	83 ec 08             	sub    esp,0x8
c002322d:	68 70 02 00 00       	push   0x270
c0023232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023236:	e8 e3 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002323b:	83 c4 10             	add    esp,0x10
c002323e:	83 c4 0c             	add    esp,0xc
c0023241:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0023242 <SATABus::~SATABus()>:
c0023242:	83 ec 0c             	sub    esp,0xc
c0023245:	ba 30 6b 02 c0       	mov    edx,0xc0026b30
c002324a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002324e:	89 10                	mov    DWORD PTR [eax],edx
c0023250:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023254:	83 ec 0c             	sub    esp,0xc
c0023257:	50                   	push   eax
c0023258:	e8 c7 b3 fe ff       	call   c000e624 <HardDiskController::~HardDiskController()>
c002325d:	83 c4 10             	add    esp,0x10
c0023260:	90                   	nop
c0023261:	83 c4 0c             	add    esp,0xc
c0023264:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023266 <SATABus::~SATABus()>:
c0023266:	83 ec 0c             	sub    esp,0xc
c0023269:	83 ec 0c             	sub    esp,0xc
c002326c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023270:	e8 cd ff ff ff       	call   c0023242 <SATABus::~SATABus()>
c0023275:	83 c4 10             	add    esp,0x10
c0023278:	83 ec 08             	sub    esp,0x8
c002327b:	68 64 01 00 00       	push   0x164
c0023280:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023284:	e8 95 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023289:	83 c4 10             	add    esp,0x10
c002328c:	83 c4 0c             	add    esp,0xc
c002328f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023290 <ATA::~ATA()>:
c0023290:	83 ec 0c             	sub    esp,0xc
c0023293:	ba a8 6b 02 c0       	mov    edx,0xc0026ba8
c0023298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002329c:	89 10                	mov    DWORD PTR [eax],edx
c002329e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232a2:	83 ec 0c             	sub    esp,0xc
c00232a5:	50                   	push   eax
c00232a6:	e8 5b b4 fe ff       	call   c000e706 <PhysicalDisk::~PhysicalDisk()>
c00232ab:	83 c4 10             	add    esp,0x10
c00232ae:	90                   	nop
c00232af:	83 c4 0c             	add    esp,0xc
c00232b2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00232b4 <ATA::~ATA()>:
c00232b4:	83 ec 0c             	sub    esp,0xc
c00232b7:	83 ec 0c             	sub    esp,0xc
c00232ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232be:	e8 cd ff ff ff       	call   c0023290 <ATA::~ATA()>
c00232c3:	83 c4 10             	add    esp,0x10
c00232c6:	83 ec 08             	sub    esp,0x8
c00232c9:	68 7c 01 00 00       	push   0x17c
c00232ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232d2:	e8 47 99 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00232d7:	83 c4 10             	add    esp,0x10
c00232da:	83 c4 0c             	add    esp,0xc
c00232dd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00232de <ATAPI::~ATAPI()>:
c00232de:	83 ec 0c             	sub    esp,0xc
c00232e1:	ba 0c 6c 02 c0       	mov    edx,0xc0026c0c
c00232e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232ea:	89 10                	mov    DWORD PTR [eax],edx
c00232ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232f0:	83 ec 0c             	sub    esp,0xc
c00232f3:	50                   	push   eax
c00232f4:	e8 0d b4 fe ff       	call   c000e706 <PhysicalDisk::~PhysicalDisk()>
c00232f9:	83 c4 10             	add    esp,0x10
c00232fc:	90                   	nop
c00232fd:	83 c4 0c             	add    esp,0xc
c0023300:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023302 <ATAPI::~ATAPI()>:
c0023302:	83 ec 0c             	sub    esp,0xc
c0023305:	83 ec 0c             	sub    esp,0xc
c0023308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002330c:	e8 cd ff ff ff       	call   c00232de <ATAPI::~ATAPI()>
c0023311:	83 c4 10             	add    esp,0x10
c0023314:	83 ec 08             	sub    esp,0x8
c0023317:	68 84 01 00 00       	push   0x184
c002331c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023320:	e8 f9 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023325:	83 c4 10             	add    esp,0x10
c0023328:	83 c4 0c             	add    esp,0xc
c002332b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002332c <SATA::~SATA()>:
c002332c:	83 ec 0c             	sub    esp,0xc
c002332f:	ba 48 6e 02 c0       	mov    edx,0xc0026e48
c0023334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023338:	89 10                	mov    DWORD PTR [eax],edx
c002333a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002333e:	83 ec 0c             	sub    esp,0xc
c0023341:	50                   	push   eax
c0023342:	e8 bf b3 fe ff       	call   c000e706 <PhysicalDisk::~PhysicalDisk()>
c0023347:	83 c4 10             	add    esp,0x10
c002334a:	90                   	nop
c002334b:	83 c4 0c             	add    esp,0xc
c002334e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023350 <SATA::~SATA()>:
c0023350:	83 ec 0c             	sub    esp,0xc
c0023353:	83 ec 0c             	sub    esp,0xc
c0023356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002335a:	e8 cd ff ff ff       	call   c002332c <SATA::~SATA()>
c002335f:	83 c4 10             	add    esp,0x10
c0023362:	83 ec 08             	sub    esp,0x8
c0023365:	68 7c 01 00 00       	push   0x17c
c002336a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002336e:	e8 ab 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023373:	83 c4 10             	add    esp,0x10
c0023376:	83 c4 0c             	add    esp,0xc
c0023379:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002337a <SATAPI::~SATAPI()>:
c002337a:	83 ec 0c             	sub    esp,0xc
c002337d:	ba d8 6f 02 c0       	mov    edx,0xc0026fd8
c0023382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023386:	89 10                	mov    DWORD PTR [eax],edx
c0023388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002338c:	83 ec 0c             	sub    esp,0xc
c002338f:	50                   	push   eax
c0023390:	e8 71 b3 fe ff       	call   c000e706 <PhysicalDisk::~PhysicalDisk()>
c0023395:	83 c4 10             	add    esp,0x10
c0023398:	90                   	nop
c0023399:	83 c4 0c             	add    esp,0xc
c002339c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002339e <SATAPI::~SATAPI()>:
c002339e:	83 ec 0c             	sub    esp,0xc
c00233a1:	83 ec 0c             	sub    esp,0xc
c00233a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233a8:	e8 cd ff ff ff       	call   c002337a <SATAPI::~SATAPI()>
c00233ad:	83 c4 10             	add    esp,0x10
c00233b0:	83 ec 08             	sub    esp,0x8
c00233b3:	68 84 01 00 00       	push   0x184
c00233b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233bc:	e8 5d 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00233c1:	83 c4 10             	add    esp,0x10
c00233c4:	83 c4 0c             	add    esp,0xc
c00233c7:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00233c8 <AVX::~AVX()>:
c00233c8:	83 ec 0c             	sub    esp,0xc
c00233cb:	ba 18 70 02 c0       	mov    edx,0xc0027018
c00233d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233d4:	89 10                	mov    DWORD PTR [eax],edx
c00233d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233da:	83 ec 0c             	sub    esp,0xc
c00233dd:	50                   	push   eax
c00233de:	e8 a9 b3 fe ff       	call   c000e78c <FPU::~FPU()>
c00233e3:	83 c4 10             	add    esp,0x10
c00233e6:	90                   	nop
c00233e7:	83 c4 0c             	add    esp,0xc
c00233ea:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00233ec <AVX::~AVX()>:
c00233ec:	83 ec 0c             	sub    esp,0xc
c00233ef:	83 ec 0c             	sub    esp,0xc
c00233f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233f6:	e8 cd ff ff ff       	call   c00233c8 <AVX::~AVX()>
c00233fb:	83 c4 10             	add    esp,0x10
c00233fe:	83 ec 08             	sub    esp,0x8
c0023401:	68 58 01 00 00       	push   0x158
c0023406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002340a:	e8 0f 98 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002340f:	83 c4 10             	add    esp,0x10
c0023412:	83 c4 0c             	add    esp,0xc
c0023415:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023418 <MMX::~MMX()>:
c0023418:	83 ec 0c             	sub    esp,0xc
c002341b:	ba 58 70 02 c0       	mov    edx,0xc0027058
c0023420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023424:	89 10                	mov    DWORD PTR [eax],edx
c0023426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002342a:	83 ec 0c             	sub    esp,0xc
c002342d:	50                   	push   eax
c002342e:	e8 59 b3 fe ff       	call   c000e78c <FPU::~FPU()>
c0023433:	83 c4 10             	add    esp,0x10
c0023436:	90                   	nop
c0023437:	83 c4 0c             	add    esp,0xc
c002343a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002343c <MMX::~MMX()>:
c002343c:	83 ec 0c             	sub    esp,0xc
c002343f:	83 ec 0c             	sub    esp,0xc
c0023442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023446:	e8 cd ff ff ff       	call   c0023418 <MMX::~MMX()>
c002344b:	83 c4 10             	add    esp,0x10
c002344e:	83 ec 08             	sub    esp,0x8
c0023451:	68 58 01 00 00       	push   0x158
c0023456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002345a:	e8 bf 97 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002345f:	83 c4 10             	add    esp,0x10
c0023462:	83 c4 0c             	add    esp,0xc
c0023465:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023468 <SSE::~SSE()>:
c0023468:	83 ec 0c             	sub    esp,0xc
c002346b:	ba 98 70 02 c0       	mov    edx,0xc0027098
c0023470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023474:	89 10                	mov    DWORD PTR [eax],edx
c0023476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002347a:	83 ec 0c             	sub    esp,0xc
c002347d:	50                   	push   eax
c002347e:	e8 09 b3 fe ff       	call   c000e78c <FPU::~FPU()>
c0023483:	83 c4 10             	add    esp,0x10
c0023486:	90                   	nop
c0023487:	83 c4 0c             	add    esp,0xc
c002348a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002348c <SSE::~SSE()>:
c002348c:	83 ec 0c             	sub    esp,0xc
c002348f:	83 ec 0c             	sub    esp,0xc
c0023492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023496:	e8 cd ff ff ff       	call   c0023468 <SSE::~SSE()>
c002349b:	83 c4 10             	add    esp,0x10
c002349e:	83 ec 08             	sub    esp,0x8
c00234a1:	68 58 01 00 00       	push   0x158
c00234a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234aa:	e8 6f 97 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00234af:	83 c4 10             	add    esp,0x10
c00234b2:	83 c4 0c             	add    esp,0xc
c00234b5:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00234b8 <x87::~x87()>:
c00234b8:	83 ec 0c             	sub    esp,0xc
c00234bb:	ba d8 70 02 c0       	mov    edx,0xc00270d8
c00234c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234c4:	89 10                	mov    DWORD PTR [eax],edx
c00234c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ca:	83 ec 0c             	sub    esp,0xc
c00234cd:	50                   	push   eax
c00234ce:	e8 b9 b2 fe ff       	call   c000e78c <FPU::~FPU()>
c00234d3:	83 c4 10             	add    esp,0x10
c00234d6:	90                   	nop
c00234d7:	83 c4 0c             	add    esp,0xc
c00234da:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00234dc <x87::~x87()>:
c00234dc:	83 ec 0c             	sub    esp,0xc
c00234df:	83 ec 0c             	sub    esp,0xc
c00234e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234e6:	e8 cd ff ff ff       	call   c00234b8 <x87::~x87()>
c00234eb:	83 c4 10             	add    esp,0x10
c00234ee:	83 ec 08             	sub    esp,0x8
c00234f1:	68 58 01 00 00       	push   0x158
c00234f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234fa:	e8 1f 97 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00234ff:	83 c4 10             	add    esp,0x10
c0023502:	83 c4 0c             	add    esp,0xc
c0023505:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023506 <IOAPIC::~IOAPIC()>:
c0023506:	83 ec 0c             	sub    esp,0xc
c0023509:	ba 30 72 02 c0       	mov    edx,0xc0027230
c002350e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023512:	89 10                	mov    DWORD PTR [eax],edx
c0023514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023518:	83 ec 0c             	sub    esp,0xc
c002351b:	50                   	push   eax
c002351c:	e8 eb ab fe ff       	call   c000e10c <Device::~Device()>
c0023521:	83 c4 10             	add    esp,0x10
c0023524:	90                   	nop
c0023525:	83 c4 0c             	add    esp,0xc
c0023528:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002352a <IOAPIC::~IOAPIC()>:
c002352a:	83 ec 0c             	sub    esp,0xc
c002352d:	83 ec 0c             	sub    esp,0xc
c0023530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023534:	e8 cd ff ff ff       	call   c0023506 <IOAPIC::~IOAPIC()>
c0023539:	83 c4 10             	add    esp,0x10
c002353c:	83 ec 08             	sub    esp,0x8
c002353f:	68 68 01 00 00       	push   0x168
c0023544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023548:	e8 d1 96 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002354d:	83 c4 10             	add    esp,0x10
c0023550:	83 c4 0c             	add    esp,0xc
c0023553:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023554 <APIC::~APIC()>:
c0023554:	83 ec 0c             	sub    esp,0xc
c0023557:	ba e8 71 02 c0       	mov    edx,0xc00271e8
c002355c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023560:	89 10                	mov    DWORD PTR [eax],edx
c0023562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023566:	83 ec 0c             	sub    esp,0xc
c0023569:	50                   	push   eax
c002356a:	e8 f1 b6 fe ff       	call   c000ec60 <InterruptController::~InterruptController()>
c002356f:	83 c4 10             	add    esp,0x10
c0023572:	90                   	nop
c0023573:	83 c4 0c             	add    esp,0xc
c0023576:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023578 <APIC::~APIC()>:
c0023578:	83 ec 0c             	sub    esp,0xc
c002357b:	83 ec 0c             	sub    esp,0xc
c002357e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023582:	e8 cd ff ff ff       	call   c0023554 <APIC::~APIC()>
c0023587:	83 c4 10             	add    esp,0x10
c002358a:	83 ec 08             	sub    esp,0x8
c002358d:	68 58 21 00 00       	push   0x2158
c0023592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023596:	e8 83 96 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c002359b:	83 c4 10             	add    esp,0x10
c002359e:	83 c4 0c             	add    esp,0xc
c00235a1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00235a2 <PIC::~PIC()>:
c00235a2:	83 ec 0c             	sub    esp,0xc
c00235a5:	ba 80 72 02 c0       	mov    edx,0xc0027280
c00235aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ae:	89 10                	mov    DWORD PTR [eax],edx
c00235b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235b4:	83 ec 0c             	sub    esp,0xc
c00235b7:	50                   	push   eax
c00235b8:	e8 a3 b6 fe ff       	call   c000ec60 <InterruptController::~InterruptController()>
c00235bd:	83 c4 10             	add    esp,0x10
c00235c0:	90                   	nop
c00235c1:	83 c4 0c             	add    esp,0xc
c00235c4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00235c6 <PIC::~PIC()>:
c00235c6:	83 ec 0c             	sub    esp,0xc
c00235c9:	83 ec 0c             	sub    esp,0xc
c00235cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235d0:	e8 cd ff ff ff       	call   c00235a2 <PIC::~PIC()>
c00235d5:	83 c4 10             	add    esp,0x10
c00235d8:	83 ec 08             	sub    esp,0x8
c00235db:	68 58 21 00 00       	push   0x2158
c00235e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00235e4:	e8 35 96 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c00235e9:	83 c4 10             	add    esp,0x10
c00235ec:	83 c4 0c             	add    esp,0xc
c00235ef:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00235f0 <APICTimer::~APICTimer()>:
c00235f0:	83 ec 0c             	sub    esp,0xc
c00235f3:	ba d4 72 02 c0       	mov    edx,0xc00272d4
c00235f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235fc:	89 10                	mov    DWORD PTR [eax],edx
c00235fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023602:	83 ec 0c             	sub    esp,0xc
c0023605:	50                   	push   eax
c0023606:	e8 a5 d4 fe ff       	call   c0010ab0 <Timer::~Timer()>
c002360b:	83 c4 10             	add    esp,0x10
c002360e:	90                   	nop
c002360f:	83 c4 0c             	add    esp,0xc
c0023612:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023614 <APICTimer::~APICTimer()>:
c0023614:	83 ec 0c             	sub    esp,0xc
c0023617:	83 ec 0c             	sub    esp,0xc
c002361a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002361e:	e8 cd ff ff ff       	call   c00235f0 <APICTimer::~APICTimer()>
c0023623:	83 c4 10             	add    esp,0x10
c0023626:	83 ec 08             	sub    esp,0x8
c0023629:	68 60 01 00 00       	push   0x160
c002362e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023632:	e8 e7 95 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023637:	83 c4 10             	add    esp,0x10
c002363a:	83 c4 0c             	add    esp,0xc
c002363d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023640 <PIT::~PIT()>:
c0023640:	83 ec 0c             	sub    esp,0xc
c0023643:	ba 24 73 02 c0       	mov    edx,0xc0027324
c0023648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002364c:	89 10                	mov    DWORD PTR [eax],edx
c002364e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023652:	83 ec 0c             	sub    esp,0xc
c0023655:	50                   	push   eax
c0023656:	e8 55 d4 fe ff       	call   c0010ab0 <Timer::~Timer()>
c002365b:	83 c4 10             	add    esp,0x10
c002365e:	90                   	nop
c002365f:	83 c4 0c             	add    esp,0xc
c0023662:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023664 <PIT::~PIT()>:
c0023664:	83 ec 0c             	sub    esp,0xc
c0023667:	83 ec 0c             	sub    esp,0xc
c002366a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002366e:	e8 cd ff ff ff       	call   c0023640 <PIT::~PIT()>
c0023673:	83 c4 10             	add    esp,0x10
c0023676:	83 ec 08             	sub    esp,0x8
c0023679:	68 5c 01 00 00       	push   0x15c
c002367e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023682:	e8 97 95 fe ff       	call   c000cc1e <operator delete(void*, unsigned long)>
c0023687:	83 c4 10             	add    esp,0x10
c002368a:	83 c4 0c             	add    esp,0xc
c002368d:	c3                   	ret    
